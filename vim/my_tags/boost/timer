!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_DYN_LINK	/usr/include/boost/timer/config.hpp	44;"	d
BOOST_LIB_NAME	/usr/include/boost/timer/config.hpp	39;"	d
BOOST_TIMER_CONFIG_HPP	/usr/include/boost/timer/config.hpp	11;"	d
BOOST_TIMER_DECL	/usr/include/boost/timer/config.hpp	24;"	d
BOOST_TIMER_DECL	/usr/include/boost/timer/config.hpp	26;"	d
BOOST_TIMER_DECL	/usr/include/boost/timer/config.hpp	29;"	d
BOOST_TIMER_TIMER_HPP	/usr/include/boost/timer/timer.hpp	9;"	d
auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^             auto_cpu_timer(short places, const std::string& format);                \/\/ #2$/;"	p	class:boost::timer::auto_cpu_timer	access:public	signature:(short places, const std::string& format)
auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^             auto_cpu_timer(std::ostream& os, const std::string& format)             \/\/ #6$/;"	f	class:boost::timer::auto_cpu_timer	access:public	signature:(std::ostream& os, const std::string& format)
auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^             auto_cpu_timer(std::ostream& os, short places,$/;"	f	class:boost::timer::auto_cpu_timer	access:public	signature:(std::ostream& os, short places, const std::string& format)
auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^    explicit auto_cpu_timer(const std::string& format);                              \/\/ #3$/;"	p	class:boost::timer::auto_cpu_timer	access:public	signature:(const std::string& format)
auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^    explicit auto_cpu_timer(short places = default_places);                          \/\/ #1$/;"	p	class:boost::timer::auto_cpu_timer	access:public	signature:(short places = default_places)
auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^    explicit auto_cpu_timer(std::ostream& os, short places = default_places);        \/\/ #5$/;"	p	class:boost::timer::auto_cpu_timer	access:public	signature:(std::ostream& os, short places = default_places)
auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^  class BOOST_TIMER_DECL auto_cpu_timer : public cpu_timer$/;"	c	namespace:boost::timer	inherits:cpu_timer
boost	/usr/include/boost/timer/timer.hpp	/^namespace boost$/;"	n
boost::timer	/usr/include/boost/timer/timer.hpp	/^namespace timer$/;"	n	namespace:boost
boost::timer::auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^  class BOOST_TIMER_DECL auto_cpu_timer : public cpu_timer$/;"	c	namespace:boost::timer	inherits:cpu_timer
boost::timer::auto_cpu_timer::auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^             auto_cpu_timer(short places, const std::string& format);                \/\/ #2$/;"	p	class:boost::timer::auto_cpu_timer	access:public	signature:(short places, const std::string& format)
boost::timer::auto_cpu_timer::auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^             auto_cpu_timer(std::ostream& os, const std::string& format)             \/\/ #6$/;"	f	class:boost::timer::auto_cpu_timer	access:public	signature:(std::ostream& os, const std::string& format)
boost::timer::auto_cpu_timer::auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^             auto_cpu_timer(std::ostream& os, short places,$/;"	f	class:boost::timer::auto_cpu_timer	access:public	signature:(std::ostream& os, short places, const std::string& format)
boost::timer::auto_cpu_timer::auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^    explicit auto_cpu_timer(const std::string& format);                              \/\/ #3$/;"	p	class:boost::timer::auto_cpu_timer	access:public	signature:(const std::string& format)
boost::timer::auto_cpu_timer::auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^    explicit auto_cpu_timer(short places = default_places);                          \/\/ #1$/;"	p	class:boost::timer::auto_cpu_timer	access:public	signature:(short places = default_places)
boost::timer::auto_cpu_timer::auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^    explicit auto_cpu_timer(std::ostream& os, short places = default_places);        \/\/ #5$/;"	p	class:boost::timer::auto_cpu_timer	access:public	signature:(std::ostream& os, short places = default_places)
boost::timer::auto_cpu_timer::format_string	/usr/include/boost/timer/timer.hpp	/^   const std::string&  format_string() const { return m_format; }$/;"	f	class:boost::timer::auto_cpu_timer	access:public	signature:() const
boost::timer::auto_cpu_timer::m_format	/usr/include/boost/timer/timer.hpp	/^    std::string     m_format;  $/;"	m	class:boost::timer::auto_cpu_timer	access:private
boost::timer::auto_cpu_timer::m_os	/usr/include/boost/timer/timer.hpp	/^    std::ostream*   m_os;      \/\/ stored as ptr so compiler can generate operator= $/;"	m	class:boost::timer::auto_cpu_timer	access:private
boost::timer::auto_cpu_timer::m_places	/usr/include/boost/timer/timer.hpp	/^    short           m_places;$/;"	m	class:boost::timer::auto_cpu_timer	access:private
boost::timer::auto_cpu_timer::ostream	/usr/include/boost/timer/timer.hpp	/^   std::ostream&       ostream() const       { return *m_os; }$/;"	f	class:boost::timer::auto_cpu_timer	access:public	signature:() const
boost::timer::auto_cpu_timer::places	/usr/include/boost/timer/timer.hpp	/^   short               places() const        { return m_places; }$/;"	f	class:boost::timer::auto_cpu_timer	access:public	signature:() const
boost::timer::auto_cpu_timer::report	/usr/include/boost/timer/timer.hpp	/^    void   report(); $/;"	p	class:boost::timer::auto_cpu_timer	access:public	signature:()
boost::timer::auto_cpu_timer::~auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^   ~auto_cpu_timer();$/;"	p	class:boost::timer::auto_cpu_timer	access:public	signature:()
boost::timer::cpu_timer	/usr/include/boost/timer/timer.hpp	/^  class BOOST_TIMER_DECL cpu_timer$/;"	c	namespace:boost::timer
boost::timer::cpu_timer::cpu_timer	/usr/include/boost/timer/timer.hpp	/^    cpu_timer()                                    { start(); }$/;"	f	class:boost::timer::cpu_timer	access:public	signature:()
boost::timer::cpu_timer::elapsed	/usr/include/boost/timer/timer.hpp	/^    cpu_times     elapsed() const;  \/\/ does not stop()$/;"	p	class:boost::timer::cpu_timer	access:public	signature:() const
boost::timer::cpu_timer::format	/usr/include/boost/timer/timer.hpp	/^    std::string   format(short places = default_places) const$/;"	f	class:boost::timer::cpu_timer	access:public	signature:(short places = default_places) const
boost::timer::cpu_timer::format	/usr/include/boost/timer/timer.hpp	/^    std::string   format(short places, const std::string& format) const$/;"	f	class:boost::timer::cpu_timer	access:public	signature:(short places, const std::string& format) const
boost::timer::cpu_timer::is_stopped	/usr/include/boost/timer/timer.hpp	/^    bool          is_stopped() const               { return m_is_stopped; }$/;"	f	class:boost::timer::cpu_timer	access:public	signature:() const
boost::timer::cpu_timer::m_is_stopped	/usr/include/boost/timer/timer.hpp	/^    bool          m_is_stopped;$/;"	m	class:boost::timer::cpu_timer	access:private
boost::timer::cpu_timer::m_times	/usr/include/boost/timer/timer.hpp	/^    cpu_times     m_times;$/;"	m	class:boost::timer::cpu_timer	access:private
boost::timer::cpu_timer::resume	/usr/include/boost/timer/timer.hpp	/^    void          resume(); $/;"	p	class:boost::timer::cpu_timer	access:public	signature:()
boost::timer::cpu_timer::start	/usr/include/boost/timer/timer.hpp	/^    void          start();$/;"	p	class:boost::timer::cpu_timer	access:public	signature:()
boost::timer::cpu_timer::stop	/usr/include/boost/timer/timer.hpp	/^    void          stop();$/;"	p	class:boost::timer::cpu_timer	access:public	signature:()
boost::timer::cpu_times	/usr/include/boost/timer/timer.hpp	/^  struct cpu_times$/;"	s	namespace:boost::timer
boost::timer::cpu_times::clear	/usr/include/boost/timer/timer.hpp	/^    void clear() { wall = user = system = 0LL; }$/;"	f	struct:boost::timer::cpu_times	access:public	signature:()
boost::timer::cpu_times::system	/usr/include/boost/timer/timer.hpp	/^    nanosecond_type system;$/;"	m	struct:boost::timer::cpu_times	access:public
boost::timer::cpu_times::user	/usr/include/boost/timer/timer.hpp	/^    nanosecond_type user;$/;"	m	struct:boost::timer::cpu_times	access:public
boost::timer::cpu_times::wall	/usr/include/boost/timer/timer.hpp	/^    nanosecond_type wall;$/;"	m	struct:boost::timer::cpu_times	access:public
boost::timer::default_places	/usr/include/boost/timer/timer.hpp	/^  const short         default_places = 6;$/;"	m	namespace:boost::timer
boost::timer::format	/usr/include/boost/timer/timer.hpp	/^  std::string format(const cpu_times& times, short places = default_places); $/;"	p	namespace:boost::timer	signature:(const cpu_times& times, short places = default_places)
boost::timer::format	/usr/include/boost/timer/timer.hpp	/^  std::string format(const cpu_times& times, short places, const std::string& format); $/;"	p	namespace:boost::timer	signature:(const cpu_times& times, short places, const std::string& format)
boost::timer::nanosecond_type	/usr/include/boost/timer/timer.hpp	/^  typedef boost::int_least64_t nanosecond_type;$/;"	t	namespace:boost::timer
clear	/usr/include/boost/timer/timer.hpp	/^    void clear() { wall = user = system = 0LL; }$/;"	f	struct:boost::timer::cpu_times	access:public	signature:()
cpu_timer	/usr/include/boost/timer/timer.hpp	/^    cpu_timer()                                    { start(); }$/;"	f	class:boost::timer::cpu_timer	access:public	signature:()
cpu_timer	/usr/include/boost/timer/timer.hpp	/^  class BOOST_TIMER_DECL cpu_timer$/;"	c	namespace:boost::timer
cpu_times	/usr/include/boost/timer/timer.hpp	/^  struct cpu_times$/;"	s	namespace:boost::timer
default_places	/usr/include/boost/timer/timer.hpp	/^  const short         default_places = 6;$/;"	m	namespace:boost::timer
elapsed	/usr/include/boost/timer/timer.hpp	/^    cpu_times     elapsed() const;  \/\/ does not stop()$/;"	p	class:boost::timer::cpu_timer	access:public	signature:() const
format	/usr/include/boost/timer/timer.hpp	/^    std::string   format(short places = default_places) const$/;"	f	class:boost::timer::cpu_timer	access:public	signature:(short places = default_places) const
format	/usr/include/boost/timer/timer.hpp	/^    std::string   format(short places, const std::string& format) const$/;"	f	class:boost::timer::cpu_timer	access:public	signature:(short places, const std::string& format) const
format	/usr/include/boost/timer/timer.hpp	/^  std::string format(const cpu_times& times, short places = default_places); $/;"	p	namespace:boost::timer	signature:(const cpu_times& times, short places = default_places)
format	/usr/include/boost/timer/timer.hpp	/^  std::string format(const cpu_times& times, short places, const std::string& format); $/;"	p	namespace:boost::timer	signature:(const cpu_times& times, short places, const std::string& format)
format_string	/usr/include/boost/timer/timer.hpp	/^   const std::string&  format_string() const { return m_format; }$/;"	f	class:boost::timer::auto_cpu_timer	access:public	signature:() const
is_stopped	/usr/include/boost/timer/timer.hpp	/^    bool          is_stopped() const               { return m_is_stopped; }$/;"	f	class:boost::timer::cpu_timer	access:public	signature:() const
m_format	/usr/include/boost/timer/timer.hpp	/^    std::string     m_format;  $/;"	m	class:boost::timer::auto_cpu_timer	access:private
m_is_stopped	/usr/include/boost/timer/timer.hpp	/^    bool          m_is_stopped;$/;"	m	class:boost::timer::cpu_timer	access:private
m_os	/usr/include/boost/timer/timer.hpp	/^    std::ostream*   m_os;      \/\/ stored as ptr so compiler can generate operator= $/;"	m	class:boost::timer::auto_cpu_timer	access:private
m_places	/usr/include/boost/timer/timer.hpp	/^    short           m_places;$/;"	m	class:boost::timer::auto_cpu_timer	access:private
m_times	/usr/include/boost/timer/timer.hpp	/^    cpu_times     m_times;$/;"	m	class:boost::timer::cpu_timer	access:private
nanosecond_type	/usr/include/boost/timer/timer.hpp	/^  typedef boost::int_least64_t nanosecond_type;$/;"	t	namespace:boost::timer
ostream	/usr/include/boost/timer/timer.hpp	/^   std::ostream&       ostream() const       { return *m_os; }$/;"	f	class:boost::timer::auto_cpu_timer	access:public	signature:() const
places	/usr/include/boost/timer/timer.hpp	/^   short               places() const        { return m_places; }$/;"	f	class:boost::timer::auto_cpu_timer	access:public	signature:() const
report	/usr/include/boost/timer/timer.hpp	/^    void   report(); $/;"	p	class:boost::timer::auto_cpu_timer	access:public	signature:()
resume	/usr/include/boost/timer/timer.hpp	/^    void          resume(); $/;"	p	class:boost::timer::cpu_timer	access:public	signature:()
start	/usr/include/boost/timer/timer.hpp	/^    void          start();$/;"	p	class:boost::timer::cpu_timer	access:public	signature:()
stop	/usr/include/boost/timer/timer.hpp	/^    void          stop();$/;"	p	class:boost::timer::cpu_timer	access:public	signature:()
system	/usr/include/boost/timer/timer.hpp	/^    nanosecond_type system;$/;"	m	struct:boost::timer::cpu_times	access:public
timer	/usr/include/boost/timer/timer.hpp	/^namespace timer$/;"	n	namespace:boost
user	/usr/include/boost/timer/timer.hpp	/^    nanosecond_type user;$/;"	m	struct:boost::timer::cpu_times	access:public
wall	/usr/include/boost/timer/timer.hpp	/^    nanosecond_type wall;$/;"	m	struct:boost::timer::cpu_times	access:public
~auto_cpu_timer	/usr/include/boost/timer/timer.hpp	/^   ~auto_cpu_timer();$/;"	p	class:boost::timer::auto_cpu_timer	access:public	signature:()
