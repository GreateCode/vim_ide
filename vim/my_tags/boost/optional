!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_OPTIONAL_DETAIL_USE_ATTRIBUTE_MAY_ALIAS	/usr/include/boost/optional/optional.hpp	92;"	d
BOOST_OPTIONAL_NO_CONVERTING_ASSIGNMENT	/usr/include/boost/optional/optional.hpp	50;"	d
BOOST_OPTIONAL_NO_CONVERTING_COPY_CTOR	/usr/include/boost/optional/optional.hpp	59;"	d
BOOST_OPTIONAL_NO_INPLACE_FACTORY_SUPPORT	/usr/include/boost/optional/optional.hpp	67;"	d
BOOST_OPTIONAL_NO_INPLACE_FACTORY_SUPPORT	/usr/include/boost/optional/optional.hpp	72;"	d
BOOST_OPTIONAL_NO_TEMPLATED_STREAMS	/usr/include/boost/optional/optional_io.hpp	17;"	d
BOOST_OPTIONAL_OPTIONAL_FLC_19NOV2002_HPP	/usr/include/boost/optional/optional.hpp	16;"	d
BOOST_OPTIONAL_OPTIONAL_FWD_FLC_19NOV2002_HPP	/usr/include/boost/optional/optional_fwd.hpp	16;"	d
BOOST_OPTIONAL_OPTIONAL_IO_FLC_19NOV2002_HPP	/usr/include/boost/optional/optional_io.hpp	13;"	d
BOOST_OPTIONAL_WEAK_OVERLOAD_RESOLUTION	/usr/include/boost/optional/optional.hpp	83;"	d
address	/usr/include/boost/optional/optional.hpp	/^    void      * address()       { return &dummy_; }$/;"	f	class:boost::optional_detail::aligned_storage	access:public	signature:()
address	/usr/include/boost/optional/optional.hpp	/^    void      * address()       { return dummy_.data; }$/;"	f	class:boost::optional_detail::aligned_storage	access:public	signature:()
address	/usr/include/boost/optional/optional.hpp	/^    void const* address() const { return &dummy_; }$/;"	f	class:boost::optional_detail::aligned_storage	access:public	signature:() const
address	/usr/include/boost/optional/optional.hpp	/^    void const* address() const { return dummy_.data; }$/;"	f	class:boost::optional_detail::aligned_storage	access:public	signature:() const
aligned_storage	/usr/include/boost/optional/optional.hpp	/^class aligned_storage$/;"	c	namespace:boost::optional_detail
aligner_	/usr/include/boost/optional/optional.hpp	/^          ::boost::alignment_of<T>::value >::type aligner_;$/;"	m	union:boost::optional_detail::aligned_storage::dummy_u	access:public
argument_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::argument_type        argument_type ;$/;"	t	class:boost::optional	access:public
argument_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME types::argument_type        argument_type ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
argument_type	/usr/include/boost/optional/optional.hpp	/^  typedef T const& argument_type ;$/;"	t	struct:boost::optional_detail::types_when_isnt_ref	access:public
argument_type	/usr/include/boost/optional/optional.hpp	/^  typedef raw_type& argument_type ;$/;"	t	struct:boost::optional_detail::types_when_is_ref	access:public
assign	/usr/include/boost/optional/optional.hpp	/^    void assign ( argument_type val )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( argument_type val )
assign	/usr/include/boost/optional/optional.hpp	/^    void assign ( none_t ) { destroy(); }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( none_t )
assign	/usr/include/boost/optional/optional.hpp	/^    void assign ( optional<U> const& rhs )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( optional<U> const& rhs )
assign	/usr/include/boost/optional/optional.hpp	/^    void assign ( optional_base const& rhs )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( optional_base const& rhs )
assign_expr	/usr/include/boost/optional/optional.hpp	/^    void assign_expr ( Expr const& expr, Expr const* tag )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& expr, Expr const* tag )
assign_expr_to_initialized	/usr/include/boost/optional/optional.hpp	/^    void assign_expr_to_initialized ( Expr const& expr, void const* )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& expr, void const* )
assign_expr_to_initialized	/usr/include/boost/optional/optional.hpp	/^    void assign_expr_to_initialized ( Expr const& factory, in_place_factory_base const* tag )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& factory, in_place_factory_base const* tag )
assign_expr_to_initialized	/usr/include/boost/optional/optional.hpp	/^    void assign_expr_to_initialized ( Expr const& factory, typed_in_place_factory_base const* tag )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& factory, typed_in_place_factory_base const* tag )
assign_value	/usr/include/boost/optional/optional.hpp	/^    void assign_value ( argument_type val, is_not_reference_tag ) { get_impl() = val; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( argument_type val, is_not_reference_tag )
assign_value	/usr/include/boost/optional/optional.hpp	/^    void assign_value ( argument_type val, is_reference_tag     ) { construct(val); }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( argument_type val, is_reference_tag )
base	/usr/include/boost/optional/optional.hpp	/^    typedef optional_detail::optional_base<T> base ;$/;"	t	class:boost::optional	access:private
boost	/usr/include/boost/optional/optional.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/optional/optional_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/optional/optional_io.hpp	/^namespace boost$/;"	n
boost::get	/usr/include/boost/optional/optional.hpp	/^get ( optional<T> const& opt )$/;"	f	namespace:boost	signature:( optional<T> const& opt )
boost::get	/usr/include/boost/optional/optional.hpp	/^get ( optional<T> const* opt )$/;"	f	namespace:boost	signature:( optional<T> const* opt )
boost::get	/usr/include/boost/optional/optional.hpp	/^get ( optional<T>& opt )$/;"	f	namespace:boost	signature:( optional<T>& opt )
boost::get	/usr/include/boost/optional/optional.hpp	/^get ( optional<T>* opt )$/;"	f	namespace:boost	signature:( optional<T>* opt )
boost::get_optional_value_or	/usr/include/boost/optional/optional.hpp	/^get_optional_value_or ( optional<T> const& opt, BOOST_DEDUCED_TYPENAME optional<T>::reference_const_type v )$/;"	f	namespace:boost	signature:( optional<T> const& opt, BOOST_DEDUCED_TYPENAME optional<T>::reference_const_type v )
boost::get_optional_value_or	/usr/include/boost/optional/optional.hpp	/^get_optional_value_or ( optional<T>& opt, BOOST_DEDUCED_TYPENAME optional<T>::reference_type v )$/;"	f	namespace:boost	signature:( optional<T>& opt, BOOST_DEDUCED_TYPENAME optional<T>::reference_type v )
boost::get_pointer	/usr/include/boost/optional/optional.hpp	/^get_pointer ( optional<T> const& opt )$/;"	f	namespace:boost	signature:( optional<T> const& opt )
boost::get_pointer	/usr/include/boost/optional/optional.hpp	/^get_pointer ( optional<T>& opt )$/;"	f	namespace:boost	signature:( optional<T>& opt )
boost::make_optional	/usr/include/boost/optional/optional.hpp	/^optional<T> make_optional ( T const& v  )$/;"	f	namespace:boost	signature:( T const& v )
boost::make_optional	/usr/include/boost/optional/optional.hpp	/^optional<T> make_optional ( bool cond, T const& v )$/;"	f	namespace:boost	signature:( bool cond, T const& v )
boost::operator !=	/usr/include/boost/optional/optional.hpp	/^bool operator != ( T const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( T const& x, optional<T> const& y )
boost::operator !=	/usr/include/boost/optional/optional.hpp	/^bool operator != ( none_t x, optional<T> const& y )$/;"	f	namespace:boost	signature:( none_t x, optional<T> const& y )
boost::operator !=	/usr/include/boost/optional/optional.hpp	/^bool operator != ( optional<T> const& x, T const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, T const& y )
boost::operator !=	/usr/include/boost/optional/optional.hpp	/^bool operator != ( optional<T> const& x, none_t y )$/;"	f	namespace:boost	signature:( optional<T> const& x, none_t y )
boost::operator !=	/usr/include/boost/optional/optional.hpp	/^bool operator != ( optional<T> const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, optional<T> const& y )
boost::operator <	/usr/include/boost/optional/optional.hpp	/^bool operator < ( T const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( T const& x, optional<T> const& y )
boost::operator <	/usr/include/boost/optional/optional.hpp	/^bool operator < ( none_t , optional<T> const& y )$/;"	f	namespace:boost	signature:( none_t , optional<T> const& y )
boost::operator <	/usr/include/boost/optional/optional.hpp	/^bool operator < ( optional<T> const& x, T const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, T const& y )
boost::operator <	/usr/include/boost/optional/optional.hpp	/^bool operator < ( optional<T> const& x, none_t )$/;"	f	namespace:boost	signature:( optional<T> const& x, none_t )
boost::operator <	/usr/include/boost/optional/optional.hpp	/^bool operator < ( optional<T> const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, optional<T> const& y )
boost::operator <<	/usr/include/boost/optional/optional_io.hpp	/^inline std::ostream& operator<<(std::ostream& out, optional<T> const& v)$/;"	f	namespace:boost	signature:(std::ostream& out, optional<T> const& v)
boost::operator <=	/usr/include/boost/optional/optional.hpp	/^bool operator <= ( T const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( T const& x, optional<T> const& y )
boost::operator <=	/usr/include/boost/optional/optional.hpp	/^bool operator <= ( none_t x, optional<T> const& y )$/;"	f	namespace:boost	signature:( none_t x, optional<T> const& y )
boost::operator <=	/usr/include/boost/optional/optional.hpp	/^bool operator <= ( optional<T> const& x, T const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, T const& y )
boost::operator <=	/usr/include/boost/optional/optional.hpp	/^bool operator <= ( optional<T> const& x, none_t y )$/;"	f	namespace:boost	signature:( optional<T> const& x, none_t y )
boost::operator <=	/usr/include/boost/optional/optional.hpp	/^bool operator <= ( optional<T> const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, optional<T> const& y )
boost::operator ==	/usr/include/boost/optional/optional.hpp	/^bool operator == ( T const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( T const& x, optional<T> const& y )
boost::operator ==	/usr/include/boost/optional/optional.hpp	/^bool operator == ( none_t , optional<T> const& y )$/;"	f	namespace:boost	signature:( none_t , optional<T> const& y )
boost::operator ==	/usr/include/boost/optional/optional.hpp	/^bool operator == ( optional<T> const& x, T const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, T const& y )
boost::operator ==	/usr/include/boost/optional/optional.hpp	/^bool operator == ( optional<T> const& x, none_t )$/;"	f	namespace:boost	signature:( optional<T> const& x, none_t )
boost::operator ==	/usr/include/boost/optional/optional.hpp	/^bool operator == ( optional<T> const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, optional<T> const& y )
boost::operator >	/usr/include/boost/optional/optional.hpp	/^bool operator > ( T const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( T const& x, optional<T> const& y )
boost::operator >	/usr/include/boost/optional/optional.hpp	/^bool operator > ( none_t x, optional<T> const& y )$/;"	f	namespace:boost	signature:( none_t x, optional<T> const& y )
boost::operator >	/usr/include/boost/optional/optional.hpp	/^bool operator > ( optional<T> const& x, T const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, T const& y )
boost::operator >	/usr/include/boost/optional/optional.hpp	/^bool operator > ( optional<T> const& x, none_t y )$/;"	f	namespace:boost	signature:( optional<T> const& x, none_t y )
boost::operator >	/usr/include/boost/optional/optional.hpp	/^bool operator > ( optional<T> const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, optional<T> const& y )
boost::operator >=	/usr/include/boost/optional/optional.hpp	/^bool operator >= ( T const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( T const& x, optional<T> const& y )
boost::operator >=	/usr/include/boost/optional/optional.hpp	/^bool operator >= ( none_t x, optional<T> const& y )$/;"	f	namespace:boost	signature:( none_t x, optional<T> const& y )
boost::operator >=	/usr/include/boost/optional/optional.hpp	/^bool operator >= ( optional<T> const& x, T const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, T const& y )
boost::operator >=	/usr/include/boost/optional/optional.hpp	/^bool operator >= ( optional<T> const& x, none_t y )$/;"	f	namespace:boost	signature:( optional<T> const& x, none_t y )
boost::operator >=	/usr/include/boost/optional/optional.hpp	/^bool operator >= ( optional<T> const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, optional<T> const& y )
boost::operator >>	/usr/include/boost/optional/optional_io.hpp	/^inline std::istream& operator>>(std::istream& in, optional<T>& v)$/;"	f	namespace:boost	signature:(std::istream& in, optional<T>& v)
boost::optional	/usr/include/boost/optional/optional.hpp	/^class optional : public optional_detail::optional_base<T>$/;"	c	namespace:boost	inherits:optional_detail::optional_base
boost::optional::argument_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::argument_type        argument_type ;$/;"	t	class:boost::optional	access:public
boost::optional::base	/usr/include/boost/optional/optional.hpp	/^    typedef optional_detail::optional_base<T> base ;$/;"	t	class:boost::optional	access:private
boost::optional::get	/usr/include/boost/optional/optional.hpp	/^    reference_const_type get() const { BOOST_ASSERT(this->is_initialized()) ; return this->get_impl(); }$/;"	f	class:boost::optional	access:public	signature:() const
boost::optional::get	/usr/include/boost/optional/optional.hpp	/^    reference_type       get()       { BOOST_ASSERT(this->is_initialized()) ; return this->get_impl(); }$/;"	f	class:boost::optional	access:public	signature:()
boost::optional::get_value_or	/usr/include/boost/optional/optional.hpp	/^    reference_const_type get_value_or ( reference_const_type v ) const { return this->is_initialized() ? get() : v ; }$/;"	f	class:boost::optional	access:public	signature:( reference_const_type v ) const
boost::optional::get_value_or	/usr/include/boost/optional/optional.hpp	/^    reference_type       get_value_or ( reference_type       v )       { return this->is_initialized() ? get() : v ; }$/;"	f	class:boost::optional	access:public	signature:( reference_type v )
boost::optional::operator !	/usr/include/boost/optional/optional.hpp	/^    bool operator!() const { return !this->is_initialized() ; }$/;"	f	class:boost::optional	access:public	signature:() const
boost::optional::operator *	/usr/include/boost/optional/optional.hpp	/^    reference_const_type operator *() const { return this->get() ; }$/;"	f	class:boost::optional	access:public	signature:() const
boost::optional::operator *	/usr/include/boost/optional/optional.hpp	/^    reference_type       operator *()       { return this->get() ; }$/;"	f	class:boost::optional	access:public	signature:()
boost::optional::operator ->	/usr/include/boost/optional/optional.hpp	/^    pointer_const_type operator->() const { BOOST_ASSERT(this->is_initialized()) ; return this->get_ptr_impl() ; }$/;"	f	class:boost::optional	access:public	signature:() const
boost::optional::operator ->	/usr/include/boost/optional/optional.hpp	/^    pointer_type       operator->()       { BOOST_ASSERT(this->is_initialized()) ; return this->get_ptr_impl() ; }$/;"	f	class:boost::optional	access:public	signature:()
boost::optional::operator =	/usr/include/boost/optional/optional.hpp	/^    optional& operator= ( Expr const& expr )$/;"	f	class:boost::optional	access:public	signature:( Expr const& expr )
boost::optional::operator =	/usr/include/boost/optional/optional.hpp	/^    optional& operator= ( argument_type val )$/;"	f	class:boost::optional	access:public	signature:( argument_type val )
boost::optional::operator =	/usr/include/boost/optional/optional.hpp	/^    optional& operator= ( none_t none_ )$/;"	f	class:boost::optional	access:public	signature:( none_t none_ )
boost::optional::operator =	/usr/include/boost/optional/optional.hpp	/^    optional& operator= ( optional const& rhs )$/;"	f	class:boost::optional	access:public	signature:( optional const& rhs )
boost::optional::operator =	/usr/include/boost/optional/optional.hpp	/^    optional& operator= ( optional<U> const& rhs )$/;"	f	class:boost::optional	access:public	signature:( optional<U> const& rhs )
boost::optional::operator unspecified_bool_type	/usr/include/boost/optional/optional.hpp	/^    operator unspecified_bool_type() const { return this->safe_bool() ; }$/;"	f	class:boost::optional	access:public	signature:() const
boost::optional::optional	/usr/include/boost/optional/optional.hpp	/^    explicit optional ( Expr const& expr ) : base(expr,boost::addressof(expr)) {}$/;"	f	class:boost::optional	access:public	signature:( Expr const& expr )
boost::optional::optional	/usr/include/boost/optional/optional.hpp	/^    explicit optional ( optional<U> const& rhs )$/;"	f	class:boost::optional	access:public	signature:( optional<U> const& rhs )
boost::optional::optional	/usr/include/boost/optional/optional.hpp	/^    optional ( argument_type val ) : base(val) {}$/;"	f	class:boost::optional	access:public	signature:( argument_type val )
boost::optional::optional	/usr/include/boost/optional/optional.hpp	/^    optional ( bool cond, argument_type val ) : base(cond,val) {}$/;"	f	class:boost::optional	access:public	signature:( bool cond, argument_type val )
boost::optional::optional	/usr/include/boost/optional/optional.hpp	/^    optional ( optional const& rhs ) : base( static_cast<base const&>(rhs) ) {}$/;"	f	class:boost::optional	access:public	signature:( optional const& rhs )
boost::optional::optional	/usr/include/boost/optional/optional.hpp	/^    optional( none_t none_ ) : base(none_) {}$/;"	f	class:boost::optional	access:public	signature:( none_t none_ )
boost::optional::optional	/usr/include/boost/optional/optional.hpp	/^    optional() : base() {}$/;"	f	class:boost::optional	access:public	signature:()
boost::optional::pointer_const_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::pointer_const_type   pointer_const_type ;$/;"	t	class:boost::optional	access:public
boost::optional::pointer_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::pointer_type         pointer_type ;$/;"	t	class:boost::optional	access:public
boost::optional::reference_const_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::reference_const_type reference_const_type ;$/;"	t	class:boost::optional	access:public
boost::optional::reference_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::reference_type       reference_type ;$/;"	t	class:boost::optional	access:public
boost::optional::swap	/usr/include/boost/optional/optional.hpp	/^    void swap( optional & arg )$/;"	f	class:boost::optional	access:public	signature:( optional & arg )
boost::optional::this_type	/usr/include/boost/optional/optional.hpp	/^    typedef optional<T> this_type ;$/;"	t	class:boost::optional	access:public
boost::optional::unspecified_bool_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::unspecified_bool_type  unspecified_bool_type ;$/;"	t	class:boost::optional	access:private
boost::optional::value_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::value_type           value_type ;$/;"	t	class:boost::optional	access:public
boost::optional::~optional	/usr/include/boost/optional/optional.hpp	/^    ~optional() {}$/;"	f	class:boost::optional	access:public	signature:()
boost::optional_detail	/usr/include/boost/optional/optional.hpp	/^namespace optional_detail {$/;"	n	namespace:boost
boost::optional_detail::aligned_storage	/usr/include/boost/optional/optional.hpp	/^class aligned_storage$/;"	c	namespace:boost::optional_detail
boost::optional_detail::aligned_storage::address	/usr/include/boost/optional/optional.hpp	/^    void      * address()       { return &dummy_; }$/;"	f	class:boost::optional_detail::aligned_storage	access:public	signature:()
boost::optional_detail::aligned_storage::address	/usr/include/boost/optional/optional.hpp	/^    void      * address()       { return dummy_.data; }$/;"	f	class:boost::optional_detail::aligned_storage	access:public	signature:()
boost::optional_detail::aligned_storage::address	/usr/include/boost/optional/optional.hpp	/^    void const* address() const { return &dummy_; }$/;"	f	class:boost::optional_detail::aligned_storage	access:public	signature:() const
boost::optional_detail::aligned_storage::address	/usr/include/boost/optional/optional.hpp	/^    void const* address() const { return dummy_.data; }$/;"	f	class:boost::optional_detail::aligned_storage	access:public	signature:() const
boost::optional_detail::aligned_storage::dummy_	/usr/include/boost/optional/optional.hpp	/^    } dummy_ ;$/;"	m	class:boost::optional_detail::aligned_storage	typeref:union:boost::optional_detail::aligned_storage::dummy_u	access:private
boost::optional_detail::aligned_storage::dummy_u	/usr/include/boost/optional/optional.hpp	/^    dummy_u$/;"	u	class:boost::optional_detail::aligned_storage	access:private
boost::optional_detail::aligned_storage::dummy_u::aligner_	/usr/include/boost/optional/optional.hpp	/^          ::boost::alignment_of<T>::value >::type aligner_;$/;"	m	union:boost::optional_detail::aligned_storage::dummy_u	access:public
boost::optional_detail::aligned_storage::dummy_u::data	/usr/include/boost/optional/optional.hpp	/^        char data[ sizeof(T) ];$/;"	m	union:boost::optional_detail::aligned_storage::dummy_u	access:public
boost::optional_detail::optional_base	/usr/include/boost/optional/optional.hpp	/^class optional_base : public optional_tag$/;"	c	namespace:boost::optional_detail	inherits:optional_tag
boost::optional_detail::optional_base::argument_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME types::argument_type        argument_type ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
boost::optional_detail::optional_base::assign	/usr/include/boost/optional/optional.hpp	/^    void assign ( argument_type val )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( argument_type val )
boost::optional_detail::optional_base::assign	/usr/include/boost/optional/optional.hpp	/^    void assign ( none_t ) { destroy(); }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( none_t )
boost::optional_detail::optional_base::assign	/usr/include/boost/optional/optional.hpp	/^    void assign ( optional<U> const& rhs )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( optional<U> const& rhs )
boost::optional_detail::optional_base::assign	/usr/include/boost/optional/optional.hpp	/^    void assign ( optional_base const& rhs )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( optional_base const& rhs )
boost::optional_detail::optional_base::assign_expr	/usr/include/boost/optional/optional.hpp	/^    void assign_expr ( Expr const& expr, Expr const* tag )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& expr, Expr const* tag )
boost::optional_detail::optional_base::assign_expr_to_initialized	/usr/include/boost/optional/optional.hpp	/^    void assign_expr_to_initialized ( Expr const& expr, void const* )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& expr, void const* )
boost::optional_detail::optional_base::assign_expr_to_initialized	/usr/include/boost/optional/optional.hpp	/^    void assign_expr_to_initialized ( Expr const& factory, in_place_factory_base const* tag )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& factory, in_place_factory_base const* tag )
boost::optional_detail::optional_base::assign_expr_to_initialized	/usr/include/boost/optional/optional.hpp	/^    void assign_expr_to_initialized ( Expr const& factory, typed_in_place_factory_base const* tag )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& factory, typed_in_place_factory_base const* tag )
boost::optional_detail::optional_base::assign_value	/usr/include/boost/optional/optional.hpp	/^    void assign_value ( argument_type val, is_not_reference_tag ) { get_impl() = val; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( argument_type val, is_not_reference_tag )
boost::optional_detail::optional_base::assign_value	/usr/include/boost/optional/optional.hpp	/^    void assign_value ( argument_type val, is_reference_tag     ) { construct(val); }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( argument_type val, is_reference_tag )
boost::optional_detail::optional_base::cast_ptr	/usr/include/boost/optional/optional.hpp	/^    pointer_const_type cast_ptr( internal_type const* p, is_not_reference_tag ) const { return p ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type const* p, is_not_reference_tag ) const
boost::optional_detail::optional_base::cast_ptr	/usr/include/boost/optional/optional.hpp	/^    pointer_const_type cast_ptr( internal_type const* p, is_reference_tag     ) const { return &p->get() ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type const* p, is_reference_tag ) const
boost::optional_detail::optional_base::cast_ptr	/usr/include/boost/optional/optional.hpp	/^    pointer_type       cast_ptr( internal_type *      p, is_not_reference_tag )       { return p ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type * p, is_not_reference_tag )
boost::optional_detail::optional_base::cast_ptr	/usr/include/boost/optional/optional.hpp	/^    pointer_type       cast_ptr( internal_type *      p, is_reference_tag     )       { return &p->get() ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type * p, is_reference_tag )
boost::optional_detail::optional_base::construct	/usr/include/boost/optional/optional.hpp	/^    void construct ( Expr const& expr, optional_tag const* )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& expr, optional_tag const* )
boost::optional_detail::optional_base::construct	/usr/include/boost/optional/optional.hpp	/^    void construct ( Expr const& expr, void const* )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& expr, void const* )
boost::optional_detail::optional_base::construct	/usr/include/boost/optional/optional.hpp	/^    void construct ( Expr const& factory, in_place_factory_base const* )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& factory, in_place_factory_base const* )
boost::optional_detail::optional_base::construct	/usr/include/boost/optional/optional.hpp	/^    void construct ( Expr const& factory, typed_in_place_factory_base const* )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& factory, typed_in_place_factory_base const* )
boost::optional_detail::optional_base::construct	/usr/include/boost/optional/optional.hpp	/^    void construct ( argument_type val )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( argument_type val )
boost::optional_detail::optional_base::dereference	/usr/include/boost/optional/optional.hpp	/^    reference_const_type dereference( internal_type const* p, is_not_reference_tag ) const { return *p ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type const* p, is_not_reference_tag ) const
boost::optional_detail::optional_base::dereference	/usr/include/boost/optional/optional.hpp	/^    reference_const_type dereference( internal_type const* p, is_reference_tag     ) const { return p->get() ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type const* p, is_reference_tag ) const
boost::optional_detail::optional_base::dereference	/usr/include/boost/optional/optional.hpp	/^    reference_type       dereference( internal_type*       p, is_not_reference_tag )       { return *p ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type* p, is_not_reference_tag )
boost::optional_detail::optional_base::dereference	/usr/include/boost/optional/optional.hpp	/^    reference_type       dereference( internal_type*       p, is_reference_tag     )       { return p->get() ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type* p, is_reference_tag )
boost::optional_detail::optional_base::destroy	/usr/include/boost/optional/optional.hpp	/^    void destroy()$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:()
boost::optional_detail::optional_base::destroy_impl	/usr/include/boost/optional/optional.hpp	/^    void destroy_impl ( is_not_reference_tag ) { get_ptr_impl()->T::~T() ; m_initialized = false ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( is_not_reference_tag )
boost::optional_detail::optional_base::destroy_impl	/usr/include/boost/optional/optional.hpp	/^    void destroy_impl ( is_not_reference_tag ) { get_ptr_impl()->internal_type::~internal_type() ; m_initialized = false ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( is_not_reference_tag )
boost::optional_detail::optional_base::destroy_impl	/usr/include/boost/optional/optional.hpp	/^    void destroy_impl ( is_reference_tag     ) { m_initialized = false ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( is_reference_tag )
boost::optional_detail::optional_base::get_impl	/usr/include/boost/optional/optional.hpp	/^    reference_const_type get_impl() const { return dereference(get_object(), is_reference_predicate() ) ; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:() const
boost::optional_detail::optional_base::get_impl	/usr/include/boost/optional/optional.hpp	/^    reference_type       get_impl()       { return dereference(get_object(), is_reference_predicate() ) ; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:()
boost::optional_detail::optional_base::get_object	/usr/include/boost/optional/optional.hpp	/^    internal_type *      get_object()       { return static_cast<internal_type *>     (m_storage.address()); }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:()
boost::optional_detail::optional_base::get_object	/usr/include/boost/optional/optional.hpp	/^    internal_type *      get_object()$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:()
boost::optional_detail::optional_base::get_object	/usr/include/boost/optional/optional.hpp	/^    internal_type const* get_object() const { return static_cast<internal_type const*>(m_storage.address()); }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:() const
boost::optional_detail::optional_base::get_object	/usr/include/boost/optional/optional.hpp	/^    internal_type const* get_object() const$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:() const
boost::optional_detail::optional_base::get_ptr	/usr/include/boost/optional/optional.hpp	/^    pointer_const_type get_ptr() const { return m_initialized ? get_ptr_impl() : 0 ; }$/;"	f	class:boost::optional_detail::optional_base	access:public	signature:() const
boost::optional_detail::optional_base::get_ptr	/usr/include/boost/optional/optional.hpp	/^    pointer_type       get_ptr()       { return m_initialized ? get_ptr_impl() : 0 ; }$/;"	f	class:boost::optional_detail::optional_base	access:public	signature:()
boost::optional_detail::optional_base::get_ptr_impl	/usr/include/boost/optional/optional.hpp	/^    pointer_const_type get_ptr_impl() const { return cast_ptr(get_object(), is_reference_predicate() ) ; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:() const
boost::optional_detail::optional_base::get_ptr_impl	/usr/include/boost/optional/optional.hpp	/^    pointer_type       get_ptr_impl()       { return cast_ptr(get_object(), is_reference_predicate() ) ; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:()
boost::optional_detail::optional_base::internal_type	/usr/include/boost/optional/optional.hpp	/^    ::boost::detail::make_reference_content<T>::type internal_type ;$/;"	t	class:boost::optional_detail::optional_base	access:private
boost::optional_detail::optional_base::is_initialized	/usr/include/boost/optional/optional.hpp	/^    bool is_initialized() const { return m_initialized ; }$/;"	f	class:boost::optional_detail::optional_base	access:public	signature:() const
boost::optional_detail::optional_base::is_not_reference_tag	/usr/include/boost/optional/optional.hpp	/^    typedef mpl::false_ is_not_reference_tag ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
boost::optional_detail::optional_base::is_reference_predicate	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME is_reference<T>::type is_reference_predicate ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
boost::optional_detail::optional_base::is_reference_tag	/usr/include/boost/optional/optional.hpp	/^    typedef mpl::true_  is_reference_tag ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
boost::optional_detail::optional_base::m_initialized	/usr/include/boost/optional/optional.hpp	/^    bool m_initialized ;$/;"	m	class:boost::optional_detail::optional_base	access:private
boost::optional_detail::optional_base::m_storage	/usr/include/boost/optional/optional.hpp	/^    storage_type m_storage ;$/;"	m	class:boost::optional_detail::optional_base	access:private
boost::optional_detail::optional_base::optional_base	/usr/include/boost/optional/optional.hpp	/^    explicit optional_base ( Expr const& expr, Expr const* tag )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& expr, Expr const* tag )
boost::optional_detail::optional_base::optional_base	/usr/include/boost/optional/optional.hpp	/^    optional_base ( argument_type val )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( argument_type val )
boost::optional_detail::optional_base::optional_base	/usr/include/boost/optional/optional.hpp	/^    optional_base ( bool cond, argument_type val )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( bool cond, argument_type val )
boost::optional_detail::optional_base::optional_base	/usr/include/boost/optional/optional.hpp	/^    optional_base ( none_t )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( none_t )
boost::optional_detail::optional_base::optional_base	/usr/include/boost/optional/optional.hpp	/^    optional_base ( optional_base const& rhs )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( optional_base const& rhs )
boost::optional_detail::optional_base::optional_base	/usr/include/boost/optional/optional.hpp	/^    optional_base()$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:()
boost::optional_detail::optional_base::pointer_const_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME types::pointer_const_type   pointer_const_type ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
boost::optional_detail::optional_base::pointer_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME types::pointer_type         pointer_type ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
boost::optional_detail::optional_base::reference_const_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME types::reference_const_type reference_const_type ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
boost::optional_detail::optional_base::reference_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME types::reference_type       reference_type ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
boost::optional_detail::optional_base::reset	/usr/include/boost/optional/optional.hpp	/^    void reset ( argument_type val ) { assign(val); }$/;"	f	class:boost::optional_detail::optional_base	access:public	signature:( argument_type val )
boost::optional_detail::optional_base::reset	/usr/include/boost/optional/optional.hpp	/^    void reset() { destroy(); }$/;"	f	class:boost::optional_detail::optional_base	access:public	signature:()
boost::optional_detail::optional_base::safe_bool	/usr/include/boost/optional/optional.hpp	/^    unspecified_bool_type safe_bool() const { return m_initialized ? &this_type::is_initialized : 0 ; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:() const
boost::optional_detail::optional_base::storage_type	/usr/include/boost/optional/optional.hpp	/^    typedef aligned_storage<internal_type> storage_type ;$/;"	t	class:boost::optional_detail::optional_base	access:private
boost::optional_detail::optional_base::this_type	/usr/include/boost/optional/optional.hpp	/^    typedef optional_base<T> this_type ;$/;"	t	class:boost::optional_detail::optional_base	access:private
boost::optional_detail::optional_base::types	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME mpl::if_<is_reference_predicate,types_when_ref,types_when_not_ref>::type types ;$/;"	t	class:boost::optional_detail::optional_base	access:public
boost::optional_detail::optional_base::types_when_not_ref	/usr/include/boost/optional/optional.hpp	/^    typedef types_when_isnt_ref<T> types_when_not_ref ;$/;"	t	class:boost::optional_detail::optional_base	access:private
boost::optional_detail::optional_base::types_when_ref	/usr/include/boost/optional/optional.hpp	/^    typedef types_when_is_ref<T>   types_when_ref   ;$/;"	t	class:boost::optional_detail::optional_base	access:private
boost::optional_detail::optional_base::value_type	/usr/include/boost/optional/optional.hpp	/^    typedef T value_type ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
boost::optional_detail::optional_base::~optional_base	/usr/include/boost/optional/optional.hpp	/^    ~optional_base() { destroy() ; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:()
boost::optional_detail::optional_tag	/usr/include/boost/optional/optional.hpp	/^struct optional_tag {} ;$/;"	s	namespace:boost::optional_detail
boost::optional_detail::swap_selector	/usr/include/boost/optional/optional.hpp	/^struct swap_selector<false>$/;"	s	namespace:boost::optional_detail
boost::optional_detail::swap_selector	/usr/include/boost/optional/optional.hpp	/^struct swap_selector<true>$/;"	s	namespace:boost::optional_detail
boost::optional_detail::swap_selector::optional_swap	/usr/include/boost/optional/optional.hpp	/^    static void optional_swap ( optional<T>& x, optional<T>& y )$/;"	f	struct:boost::optional_detail::swap_selector	access:public	signature:( optional<T>& x, optional<T>& y )
boost::optional_detail::types_when_is_ref	/usr/include/boost/optional/optional.hpp	/^struct types_when_is_ref$/;"	s	namespace:boost::optional_detail
boost::optional_detail::types_when_is_ref::argument_type	/usr/include/boost/optional/optional.hpp	/^  typedef raw_type& argument_type ;$/;"	t	struct:boost::optional_detail::types_when_is_ref	access:public
boost::optional_detail::types_when_is_ref::pointer_const_type	/usr/include/boost/optional/optional.hpp	/^  typedef raw_type* pointer_const_type ;$/;"	t	struct:boost::optional_detail::types_when_is_ref	access:public
boost::optional_detail::types_when_is_ref::pointer_type	/usr/include/boost/optional/optional.hpp	/^  typedef raw_type* pointer_type ;$/;"	t	struct:boost::optional_detail::types_when_is_ref	access:public
boost::optional_detail::types_when_is_ref::raw_type	/usr/include/boost/optional/optional.hpp	/^  typedef BOOST_DEDUCED_TYPENAME remove_reference<T>::type raw_type ;$/;"	t	struct:boost::optional_detail::types_when_is_ref	access:public
boost::optional_detail::types_when_is_ref::reference_const_type	/usr/include/boost/optional/optional.hpp	/^  typedef raw_type& reference_const_type ;$/;"	t	struct:boost::optional_detail::types_when_is_ref	access:public
boost::optional_detail::types_when_is_ref::reference_type	/usr/include/boost/optional/optional.hpp	/^  typedef raw_type& reference_type ;$/;"	t	struct:boost::optional_detail::types_when_is_ref	access:public
boost::optional_detail::types_when_isnt_ref	/usr/include/boost/optional/optional.hpp	/^struct types_when_isnt_ref$/;"	s	namespace:boost::optional_detail
boost::optional_detail::types_when_isnt_ref::argument_type	/usr/include/boost/optional/optional.hpp	/^  typedef T const& argument_type ;$/;"	t	struct:boost::optional_detail::types_when_isnt_ref	access:public
boost::optional_detail::types_when_isnt_ref::pointer_const_type	/usr/include/boost/optional/optional.hpp	/^  typedef T const* pointer_const_type ;$/;"	t	struct:boost::optional_detail::types_when_isnt_ref	access:public
boost::optional_detail::types_when_isnt_ref::pointer_type	/usr/include/boost/optional/optional.hpp	/^  typedef T *      pointer_type ;$/;"	t	struct:boost::optional_detail::types_when_isnt_ref	access:public
boost::optional_detail::types_when_isnt_ref::reference_const_type	/usr/include/boost/optional/optional.hpp	/^  typedef T const& reference_const_type ;$/;"	t	struct:boost::optional_detail::types_when_isnt_ref	access:public
boost::optional_detail::types_when_isnt_ref::reference_type	/usr/include/boost/optional/optional.hpp	/^  typedef T &      reference_type ;$/;"	t	struct:boost::optional_detail::types_when_isnt_ref	access:public
boost::optional_swap_should_use_default_constructor	/usr/include/boost/optional/optional.hpp	/^struct optional_swap_should_use_default_constructor : has_nothrow_default_constructor<T> {} ;$/;"	s	namespace:boost	inherits:has_nothrow_default_constructor
boost::swap	/usr/include/boost/optional/optional.hpp	/^template<class T> inline void swap ( optional<T>& x, optional<T>& y )$/;"	f	namespace:boost	signature:( optional<T>& x, optional<T>& y )
boost::swap	/usr/include/boost/optional/optional.hpp	/^template<class T> void swap ( optional<T>& x, optional<T>& y );$/;"	p	namespace:boost	signature:( optional<T>& x, optional<T>& y )
boost::swap	/usr/include/boost/optional/optional_fwd.hpp	/^template<class T> void swap ( optional<T>& , optional<T>& ) ;$/;"	p	namespace:boost	signature:( optional<T>& , optional<T>& )
boost_optional_detail	/usr/include/boost/optional/optional.hpp	/^namespace boost_optional_detail$/;"	n
boost_optional_detail::construct	/usr/include/boost/optional/optional.hpp	/^  inline void construct(Factory const& factory, void* address)$/;"	f	namespace:boost_optional_detail	signature:(Factory const& factory, void* address)
cast_ptr	/usr/include/boost/optional/optional.hpp	/^    pointer_const_type cast_ptr( internal_type const* p, is_not_reference_tag ) const { return p ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type const* p, is_not_reference_tag ) const
cast_ptr	/usr/include/boost/optional/optional.hpp	/^    pointer_const_type cast_ptr( internal_type const* p, is_reference_tag     ) const { return &p->get() ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type const* p, is_reference_tag ) const
cast_ptr	/usr/include/boost/optional/optional.hpp	/^    pointer_type       cast_ptr( internal_type *      p, is_not_reference_tag )       { return p ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type * p, is_not_reference_tag )
cast_ptr	/usr/include/boost/optional/optional.hpp	/^    pointer_type       cast_ptr( internal_type *      p, is_reference_tag     )       { return &p->get() ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type * p, is_reference_tag )
construct	/usr/include/boost/optional/optional.hpp	/^    void construct ( Expr const& expr, optional_tag const* )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& expr, optional_tag const* )
construct	/usr/include/boost/optional/optional.hpp	/^    void construct ( Expr const& expr, void const* )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& expr, void const* )
construct	/usr/include/boost/optional/optional.hpp	/^    void construct ( Expr const& factory, in_place_factory_base const* )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& factory, in_place_factory_base const* )
construct	/usr/include/boost/optional/optional.hpp	/^    void construct ( Expr const& factory, typed_in_place_factory_base const* )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& factory, typed_in_place_factory_base const* )
construct	/usr/include/boost/optional/optional.hpp	/^    void construct ( argument_type val )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( argument_type val )
construct	/usr/include/boost/optional/optional.hpp	/^  inline void construct(Factory const& factory, void* address)$/;"	f	namespace:boost_optional_detail	signature:(Factory const& factory, void* address)
data	/usr/include/boost/optional/optional.hpp	/^        char data[ sizeof(T) ];$/;"	m	union:boost::optional_detail::aligned_storage::dummy_u	access:public
dereference	/usr/include/boost/optional/optional.hpp	/^    reference_const_type dereference( internal_type const* p, is_not_reference_tag ) const { return *p ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type const* p, is_not_reference_tag ) const
dereference	/usr/include/boost/optional/optional.hpp	/^    reference_const_type dereference( internal_type const* p, is_reference_tag     ) const { return p->get() ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type const* p, is_reference_tag ) const
dereference	/usr/include/boost/optional/optional.hpp	/^    reference_type       dereference( internal_type*       p, is_not_reference_tag )       { return *p ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type* p, is_not_reference_tag )
dereference	/usr/include/boost/optional/optional.hpp	/^    reference_type       dereference( internal_type*       p, is_reference_tag     )       { return p->get() ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( internal_type* p, is_reference_tag )
destroy	/usr/include/boost/optional/optional.hpp	/^    void destroy()$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:()
destroy_impl	/usr/include/boost/optional/optional.hpp	/^    void destroy_impl ( is_not_reference_tag ) { get_ptr_impl()->T::~T() ; m_initialized = false ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( is_not_reference_tag )
destroy_impl	/usr/include/boost/optional/optional.hpp	/^    void destroy_impl ( is_not_reference_tag ) { get_ptr_impl()->internal_type::~internal_type() ; m_initialized = false ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( is_not_reference_tag )
destroy_impl	/usr/include/boost/optional/optional.hpp	/^    void destroy_impl ( is_reference_tag     ) { m_initialized = false ; }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:( is_reference_tag )
dummy_	/usr/include/boost/optional/optional.hpp	/^    } dummy_ ;$/;"	m	class:boost::optional_detail::aligned_storage	typeref:union:boost::optional_detail::aligned_storage::dummy_u	access:private
dummy_u	/usr/include/boost/optional/optional.hpp	/^    dummy_u$/;"	u	class:boost::optional_detail::aligned_storage	access:private
get	/usr/include/boost/optional/optional.hpp	/^    reference_const_type get() const { BOOST_ASSERT(this->is_initialized()) ; return this->get_impl(); }$/;"	f	class:boost::optional	access:public	signature:() const
get	/usr/include/boost/optional/optional.hpp	/^    reference_type       get()       { BOOST_ASSERT(this->is_initialized()) ; return this->get_impl(); }$/;"	f	class:boost::optional	access:public	signature:()
get	/usr/include/boost/optional/optional.hpp	/^get ( optional<T> const& opt )$/;"	f	namespace:boost	signature:( optional<T> const& opt )
get	/usr/include/boost/optional/optional.hpp	/^get ( optional<T> const* opt )$/;"	f	namespace:boost	signature:( optional<T> const* opt )
get	/usr/include/boost/optional/optional.hpp	/^get ( optional<T>& opt )$/;"	f	namespace:boost	signature:( optional<T>& opt )
get	/usr/include/boost/optional/optional.hpp	/^get ( optional<T>* opt )$/;"	f	namespace:boost	signature:( optional<T>* opt )
get_impl	/usr/include/boost/optional/optional.hpp	/^    reference_const_type get_impl() const { return dereference(get_object(), is_reference_predicate() ) ; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:() const
get_impl	/usr/include/boost/optional/optional.hpp	/^    reference_type       get_impl()       { return dereference(get_object(), is_reference_predicate() ) ; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:()
get_object	/usr/include/boost/optional/optional.hpp	/^    internal_type *      get_object()       { return static_cast<internal_type *>     (m_storage.address()); }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:()
get_object	/usr/include/boost/optional/optional.hpp	/^    internal_type *      get_object()$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:()
get_object	/usr/include/boost/optional/optional.hpp	/^    internal_type const* get_object() const { return static_cast<internal_type const*>(m_storage.address()); }$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:() const
get_object	/usr/include/boost/optional/optional.hpp	/^    internal_type const* get_object() const$/;"	f	class:boost::optional_detail::optional_base	access:private	signature:() const
get_optional_value_or	/usr/include/boost/optional/optional.hpp	/^get_optional_value_or ( optional<T> const& opt, BOOST_DEDUCED_TYPENAME optional<T>::reference_const_type v )$/;"	f	namespace:boost	signature:( optional<T> const& opt, BOOST_DEDUCED_TYPENAME optional<T>::reference_const_type v )
get_optional_value_or	/usr/include/boost/optional/optional.hpp	/^get_optional_value_or ( optional<T>& opt, BOOST_DEDUCED_TYPENAME optional<T>::reference_type v )$/;"	f	namespace:boost	signature:( optional<T>& opt, BOOST_DEDUCED_TYPENAME optional<T>::reference_type v )
get_pointer	/usr/include/boost/optional/optional.hpp	/^get_pointer ( optional<T> const& opt )$/;"	f	namespace:boost	signature:( optional<T> const& opt )
get_pointer	/usr/include/boost/optional/optional.hpp	/^get_pointer ( optional<T>& opt )$/;"	f	namespace:boost	signature:( optional<T>& opt )
get_ptr	/usr/include/boost/optional/optional.hpp	/^    pointer_const_type get_ptr() const { return m_initialized ? get_ptr_impl() : 0 ; }$/;"	f	class:boost::optional_detail::optional_base	access:public	signature:() const
get_ptr	/usr/include/boost/optional/optional.hpp	/^    pointer_type       get_ptr()       { return m_initialized ? get_ptr_impl() : 0 ; }$/;"	f	class:boost::optional_detail::optional_base	access:public	signature:()
get_ptr_impl	/usr/include/boost/optional/optional.hpp	/^    pointer_const_type get_ptr_impl() const { return cast_ptr(get_object(), is_reference_predicate() ) ; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:() const
get_ptr_impl	/usr/include/boost/optional/optional.hpp	/^    pointer_type       get_ptr_impl()       { return cast_ptr(get_object(), is_reference_predicate() ) ; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:()
get_value_or	/usr/include/boost/optional/optional.hpp	/^    reference_const_type get_value_or ( reference_const_type v ) const { return this->is_initialized() ? get() : v ; }$/;"	f	class:boost::optional	access:public	signature:( reference_const_type v ) const
get_value_or	/usr/include/boost/optional/optional.hpp	/^    reference_type       get_value_or ( reference_type       v )       { return this->is_initialized() ? get() : v ; }$/;"	f	class:boost::optional	access:public	signature:( reference_type v )
internal_type	/usr/include/boost/optional/optional.hpp	/^    ::boost::detail::make_reference_content<T>::type internal_type ;$/;"	t	class:boost::optional_detail::optional_base	access:private
is_initialized	/usr/include/boost/optional/optional.hpp	/^    bool is_initialized() const { return m_initialized ; }$/;"	f	class:boost::optional_detail::optional_base	access:public	signature:() const
is_not_reference_tag	/usr/include/boost/optional/optional.hpp	/^    typedef mpl::false_ is_not_reference_tag ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
is_reference_predicate	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME is_reference<T>::type is_reference_predicate ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
is_reference_tag	/usr/include/boost/optional/optional.hpp	/^    typedef mpl::true_  is_reference_tag ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
m_initialized	/usr/include/boost/optional/optional.hpp	/^    bool m_initialized ;$/;"	m	class:boost::optional_detail::optional_base	access:private
m_storage	/usr/include/boost/optional/optional.hpp	/^    storage_type m_storage ;$/;"	m	class:boost::optional_detail::optional_base	access:private
make_optional	/usr/include/boost/optional/optional.hpp	/^optional<T> make_optional ( T const& v  )$/;"	f	namespace:boost	signature:( T const& v )
make_optional	/usr/include/boost/optional/optional.hpp	/^optional<T> make_optional ( bool cond, T const& v )$/;"	f	namespace:boost	signature:( bool cond, T const& v )
operator !	/usr/include/boost/optional/optional.hpp	/^    bool operator!() const { return !this->is_initialized() ; }$/;"	f	class:boost::optional	access:public	signature:() const
operator !=	/usr/include/boost/optional/optional.hpp	/^bool operator != ( T const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( T const& x, optional<T> const& y )
operator !=	/usr/include/boost/optional/optional.hpp	/^bool operator != ( none_t x, optional<T> const& y )$/;"	f	namespace:boost	signature:( none_t x, optional<T> const& y )
operator !=	/usr/include/boost/optional/optional.hpp	/^bool operator != ( optional<T> const& x, T const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, T const& y )
operator !=	/usr/include/boost/optional/optional.hpp	/^bool operator != ( optional<T> const& x, none_t y )$/;"	f	namespace:boost	signature:( optional<T> const& x, none_t y )
operator !=	/usr/include/boost/optional/optional.hpp	/^bool operator != ( optional<T> const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, optional<T> const& y )
operator *	/usr/include/boost/optional/optional.hpp	/^    reference_const_type operator *() const { return this->get() ; }$/;"	f	class:boost::optional	access:public	signature:() const
operator *	/usr/include/boost/optional/optional.hpp	/^    reference_type       operator *()       { return this->get() ; }$/;"	f	class:boost::optional	access:public	signature:()
operator ->	/usr/include/boost/optional/optional.hpp	/^    pointer_const_type operator->() const { BOOST_ASSERT(this->is_initialized()) ; return this->get_ptr_impl() ; }$/;"	f	class:boost::optional	access:public	signature:() const
operator ->	/usr/include/boost/optional/optional.hpp	/^    pointer_type       operator->()       { BOOST_ASSERT(this->is_initialized()) ; return this->get_ptr_impl() ; }$/;"	f	class:boost::optional	access:public	signature:()
operator <	/usr/include/boost/optional/optional.hpp	/^bool operator < ( T const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( T const& x, optional<T> const& y )
operator <	/usr/include/boost/optional/optional.hpp	/^bool operator < ( none_t , optional<T> const& y )$/;"	f	namespace:boost	signature:( none_t , optional<T> const& y )
operator <	/usr/include/boost/optional/optional.hpp	/^bool operator < ( optional<T> const& x, T const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, T const& y )
operator <	/usr/include/boost/optional/optional.hpp	/^bool operator < ( optional<T> const& x, none_t )$/;"	f	namespace:boost	signature:( optional<T> const& x, none_t )
operator <	/usr/include/boost/optional/optional.hpp	/^bool operator < ( optional<T> const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, optional<T> const& y )
operator <<	/usr/include/boost/optional/optional_io.hpp	/^inline std::ostream& operator<<(std::ostream& out, optional<T> const& v)$/;"	f	namespace:boost	signature:(std::ostream& out, optional<T> const& v)
operator <=	/usr/include/boost/optional/optional.hpp	/^bool operator <= ( T const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( T const& x, optional<T> const& y )
operator <=	/usr/include/boost/optional/optional.hpp	/^bool operator <= ( none_t x, optional<T> const& y )$/;"	f	namespace:boost	signature:( none_t x, optional<T> const& y )
operator <=	/usr/include/boost/optional/optional.hpp	/^bool operator <= ( optional<T> const& x, T const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, T const& y )
operator <=	/usr/include/boost/optional/optional.hpp	/^bool operator <= ( optional<T> const& x, none_t y )$/;"	f	namespace:boost	signature:( optional<T> const& x, none_t y )
operator <=	/usr/include/boost/optional/optional.hpp	/^bool operator <= ( optional<T> const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, optional<T> const& y )
operator =	/usr/include/boost/optional/optional.hpp	/^    optional& operator= ( Expr const& expr )$/;"	f	class:boost::optional	access:public	signature:( Expr const& expr )
operator =	/usr/include/boost/optional/optional.hpp	/^    optional& operator= ( argument_type val )$/;"	f	class:boost::optional	access:public	signature:( argument_type val )
operator =	/usr/include/boost/optional/optional.hpp	/^    optional& operator= ( none_t none_ )$/;"	f	class:boost::optional	access:public	signature:( none_t none_ )
operator =	/usr/include/boost/optional/optional.hpp	/^    optional& operator= ( optional const& rhs )$/;"	f	class:boost::optional	access:public	signature:( optional const& rhs )
operator =	/usr/include/boost/optional/optional.hpp	/^    optional& operator= ( optional<U> const& rhs )$/;"	f	class:boost::optional	access:public	signature:( optional<U> const& rhs )
operator ==	/usr/include/boost/optional/optional.hpp	/^bool operator == ( T const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( T const& x, optional<T> const& y )
operator ==	/usr/include/boost/optional/optional.hpp	/^bool operator == ( none_t , optional<T> const& y )$/;"	f	namespace:boost	signature:( none_t , optional<T> const& y )
operator ==	/usr/include/boost/optional/optional.hpp	/^bool operator == ( optional<T> const& x, T const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, T const& y )
operator ==	/usr/include/boost/optional/optional.hpp	/^bool operator == ( optional<T> const& x, none_t )$/;"	f	namespace:boost	signature:( optional<T> const& x, none_t )
operator ==	/usr/include/boost/optional/optional.hpp	/^bool operator == ( optional<T> const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, optional<T> const& y )
operator >	/usr/include/boost/optional/optional.hpp	/^bool operator > ( T const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( T const& x, optional<T> const& y )
operator >	/usr/include/boost/optional/optional.hpp	/^bool operator > ( none_t x, optional<T> const& y )$/;"	f	namespace:boost	signature:( none_t x, optional<T> const& y )
operator >	/usr/include/boost/optional/optional.hpp	/^bool operator > ( optional<T> const& x, T const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, T const& y )
operator >	/usr/include/boost/optional/optional.hpp	/^bool operator > ( optional<T> const& x, none_t y )$/;"	f	namespace:boost	signature:( optional<T> const& x, none_t y )
operator >	/usr/include/boost/optional/optional.hpp	/^bool operator > ( optional<T> const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, optional<T> const& y )
operator >=	/usr/include/boost/optional/optional.hpp	/^bool operator >= ( T const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( T const& x, optional<T> const& y )
operator >=	/usr/include/boost/optional/optional.hpp	/^bool operator >= ( none_t x, optional<T> const& y )$/;"	f	namespace:boost	signature:( none_t x, optional<T> const& y )
operator >=	/usr/include/boost/optional/optional.hpp	/^bool operator >= ( optional<T> const& x, T const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, T const& y )
operator >=	/usr/include/boost/optional/optional.hpp	/^bool operator >= ( optional<T> const& x, none_t y )$/;"	f	namespace:boost	signature:( optional<T> const& x, none_t y )
operator >=	/usr/include/boost/optional/optional.hpp	/^bool operator >= ( optional<T> const& x, optional<T> const& y )$/;"	f	namespace:boost	signature:( optional<T> const& x, optional<T> const& y )
operator >>	/usr/include/boost/optional/optional_io.hpp	/^inline std::istream& operator>>(std::istream& in, optional<T>& v)$/;"	f	namespace:boost	signature:(std::istream& in, optional<T>& v)
operator unspecified_bool_type	/usr/include/boost/optional/optional.hpp	/^    operator unspecified_bool_type() const { return this->safe_bool() ; }$/;"	f	class:boost::optional	access:public	signature:() const
optional	/usr/include/boost/optional/optional.hpp	/^    explicit optional ( Expr const& expr ) : base(expr,boost::addressof(expr)) {}$/;"	f	class:boost::optional	access:public	signature:( Expr const& expr )
optional	/usr/include/boost/optional/optional.hpp	/^    explicit optional ( optional<U> const& rhs )$/;"	f	class:boost::optional	access:public	signature:( optional<U> const& rhs )
optional	/usr/include/boost/optional/optional.hpp	/^    optional ( argument_type val ) : base(val) {}$/;"	f	class:boost::optional	access:public	signature:( argument_type val )
optional	/usr/include/boost/optional/optional.hpp	/^    optional ( bool cond, argument_type val ) : base(cond,val) {}$/;"	f	class:boost::optional	access:public	signature:( bool cond, argument_type val )
optional	/usr/include/boost/optional/optional.hpp	/^    optional ( optional const& rhs ) : base( static_cast<base const&>(rhs) ) {}$/;"	f	class:boost::optional	access:public	signature:( optional const& rhs )
optional	/usr/include/boost/optional/optional.hpp	/^    optional( none_t none_ ) : base(none_) {}$/;"	f	class:boost::optional	access:public	signature:( none_t none_ )
optional	/usr/include/boost/optional/optional.hpp	/^    optional() : base() {}$/;"	f	class:boost::optional	access:public	signature:()
optional	/usr/include/boost/optional/optional.hpp	/^class optional : public optional_detail::optional_base<T>$/;"	c	namespace:boost	inherits:optional_detail::optional_base
optional_base	/usr/include/boost/optional/optional.hpp	/^    explicit optional_base ( Expr const& expr, Expr const* tag )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( Expr const& expr, Expr const* tag )
optional_base	/usr/include/boost/optional/optional.hpp	/^    optional_base ( argument_type val )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( argument_type val )
optional_base	/usr/include/boost/optional/optional.hpp	/^    optional_base ( bool cond, argument_type val )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( bool cond, argument_type val )
optional_base	/usr/include/boost/optional/optional.hpp	/^    optional_base ( none_t )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( none_t )
optional_base	/usr/include/boost/optional/optional.hpp	/^    optional_base ( optional_base const& rhs )$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:( optional_base const& rhs )
optional_base	/usr/include/boost/optional/optional.hpp	/^    optional_base()$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:()
optional_base	/usr/include/boost/optional/optional.hpp	/^class optional_base : public optional_tag$/;"	c	namespace:boost::optional_detail	inherits:optional_tag
optional_detail	/usr/include/boost/optional/optional.hpp	/^namespace optional_detail {$/;"	n	namespace:boost
optional_swap	/usr/include/boost/optional/optional.hpp	/^    static void optional_swap ( optional<T>& x, optional<T>& y )$/;"	f	struct:boost::optional_detail::swap_selector	access:public	signature:( optional<T>& x, optional<T>& y )
optional_swap_should_use_default_constructor	/usr/include/boost/optional/optional.hpp	/^struct optional_swap_should_use_default_constructor : has_nothrow_default_constructor<T> {} ;$/;"	s	namespace:boost	inherits:has_nothrow_default_constructor
optional_tag	/usr/include/boost/optional/optional.hpp	/^struct optional_tag {} ;$/;"	s	namespace:boost::optional_detail
pointer_const_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::pointer_const_type   pointer_const_type ;$/;"	t	class:boost::optional	access:public
pointer_const_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME types::pointer_const_type   pointer_const_type ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
pointer_const_type	/usr/include/boost/optional/optional.hpp	/^  typedef T const* pointer_const_type ;$/;"	t	struct:boost::optional_detail::types_when_isnt_ref	access:public
pointer_const_type	/usr/include/boost/optional/optional.hpp	/^  typedef raw_type* pointer_const_type ;$/;"	t	struct:boost::optional_detail::types_when_is_ref	access:public
pointer_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::pointer_type         pointer_type ;$/;"	t	class:boost::optional	access:public
pointer_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME types::pointer_type         pointer_type ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
pointer_type	/usr/include/boost/optional/optional.hpp	/^  typedef T *      pointer_type ;$/;"	t	struct:boost::optional_detail::types_when_isnt_ref	access:public
pointer_type	/usr/include/boost/optional/optional.hpp	/^  typedef raw_type* pointer_type ;$/;"	t	struct:boost::optional_detail::types_when_is_ref	access:public
raw_type	/usr/include/boost/optional/optional.hpp	/^  typedef BOOST_DEDUCED_TYPENAME remove_reference<T>::type raw_type ;$/;"	t	struct:boost::optional_detail::types_when_is_ref	access:public
reference_const_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::reference_const_type reference_const_type ;$/;"	t	class:boost::optional	access:public
reference_const_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME types::reference_const_type reference_const_type ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
reference_const_type	/usr/include/boost/optional/optional.hpp	/^  typedef T const& reference_const_type ;$/;"	t	struct:boost::optional_detail::types_when_isnt_ref	access:public
reference_const_type	/usr/include/boost/optional/optional.hpp	/^  typedef raw_type& reference_const_type ;$/;"	t	struct:boost::optional_detail::types_when_is_ref	access:public
reference_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::reference_type       reference_type ;$/;"	t	class:boost::optional	access:public
reference_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME types::reference_type       reference_type ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
reference_type	/usr/include/boost/optional/optional.hpp	/^  typedef T &      reference_type ;$/;"	t	struct:boost::optional_detail::types_when_isnt_ref	access:public
reference_type	/usr/include/boost/optional/optional.hpp	/^  typedef raw_type& reference_type ;$/;"	t	struct:boost::optional_detail::types_when_is_ref	access:public
reset	/usr/include/boost/optional/optional.hpp	/^    void reset ( argument_type val ) { assign(val); }$/;"	f	class:boost::optional_detail::optional_base	access:public	signature:( argument_type val )
reset	/usr/include/boost/optional/optional.hpp	/^    void reset() { destroy(); }$/;"	f	class:boost::optional_detail::optional_base	access:public	signature:()
safe_bool	/usr/include/boost/optional/optional.hpp	/^    unspecified_bool_type safe_bool() const { return m_initialized ? &this_type::is_initialized : 0 ; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:() const
storage_type	/usr/include/boost/optional/optional.hpp	/^    typedef aligned_storage<internal_type> storage_type ;$/;"	t	class:boost::optional_detail::optional_base	access:private
swap	/usr/include/boost/optional/optional.hpp	/^    void swap( optional & arg )$/;"	f	class:boost::optional	access:public	signature:( optional & arg )
swap	/usr/include/boost/optional/optional.hpp	/^template<class T> inline void swap ( optional<T>& x, optional<T>& y )$/;"	f	namespace:boost	signature:( optional<T>& x, optional<T>& y )
swap	/usr/include/boost/optional/optional.hpp	/^template<class T> void swap ( optional<T>& x, optional<T>& y );$/;"	p	namespace:boost	signature:( optional<T>& x, optional<T>& y )
swap	/usr/include/boost/optional/optional_fwd.hpp	/^template<class T> void swap ( optional<T>& , optional<T>& ) ;$/;"	p	namespace:boost	signature:( optional<T>& , optional<T>& )
swap_selector	/usr/include/boost/optional/optional.hpp	/^struct swap_selector<false>$/;"	s	namespace:boost::optional_detail
swap_selector	/usr/include/boost/optional/optional.hpp	/^struct swap_selector<true>$/;"	s	namespace:boost::optional_detail
this_type	/usr/include/boost/optional/optional.hpp	/^    typedef optional<T> this_type ;$/;"	t	class:boost::optional	access:public
this_type	/usr/include/boost/optional/optional.hpp	/^    typedef optional_base<T> this_type ;$/;"	t	class:boost::optional_detail::optional_base	access:private
types	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME mpl::if_<is_reference_predicate,types_when_ref,types_when_not_ref>::type types ;$/;"	t	class:boost::optional_detail::optional_base	access:public
types_when_is_ref	/usr/include/boost/optional/optional.hpp	/^struct types_when_is_ref$/;"	s	namespace:boost::optional_detail
types_when_isnt_ref	/usr/include/boost/optional/optional.hpp	/^struct types_when_isnt_ref$/;"	s	namespace:boost::optional_detail
types_when_not_ref	/usr/include/boost/optional/optional.hpp	/^    typedef types_when_isnt_ref<T> types_when_not_ref ;$/;"	t	class:boost::optional_detail::optional_base	access:private
types_when_ref	/usr/include/boost/optional/optional.hpp	/^    typedef types_when_is_ref<T>   types_when_ref   ;$/;"	t	class:boost::optional_detail::optional_base	access:private
unspecified_bool_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::unspecified_bool_type  unspecified_bool_type ;$/;"	t	class:boost::optional	access:private
value_type	/usr/include/boost/optional/optional.hpp	/^    typedef BOOST_DEDUCED_TYPENAME base::value_type           value_type ;$/;"	t	class:boost::optional	access:public
value_type	/usr/include/boost/optional/optional.hpp	/^    typedef T value_type ;$/;"	t	class:boost::optional_detail::optional_base	access:protected
~optional	/usr/include/boost/optional/optional.hpp	/^    ~optional() {}$/;"	f	class:boost::optional	access:public	signature:()
~optional_base	/usr/include/boost/optional/optional.hpp	/^    ~optional_base() { destroy() ; }$/;"	f	class:boost::optional_detail::optional_base	access:protected	signature:()
