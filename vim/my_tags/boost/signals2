!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_PARAMETER_MAX_ARITY	/usr/include/boost/signals2/signal_type.hpp	26;"	d
BOOST_PP_FILENAME_1	/usr/include/boost/signals2/detail/preprocessed_arg_type.hpp	19;"	d
BOOST_PP_FILENAME_1	/usr/include/boost/signals2/preprocessed_signal.hpp	27;"	d
BOOST_PP_FILENAME_1	/usr/include/boost/signals2/preprocessed_slot.hpp	37;"	d
BOOST_PP_ITERATION_LIMITS	/usr/include/boost/signals2/detail/preprocessed_arg_type.hpp	18;"	d
BOOST_PP_ITERATION_LIMITS	/usr/include/boost/signals2/preprocessed_signal.hpp	26;"	d
BOOST_PP_ITERATION_LIMITS	/usr/include/boost/signals2/preprocessed_slot.hpp	36;"	d
BOOST_SIGNALS2_ADD_REF_ARG	/usr/include/boost/signals2/detail/signal_template.hpp	323;"	d
BOOST_SIGNALS2_ADD_REF_ARG	/usr/include/boost/signals2/detail/signal_template.hpp	355;"	d
BOOST_SIGNALS2_ADD_REF_ARGS	/usr/include/boost/signals2/detail/signal_template.hpp	327;"	d
BOOST_SIGNALS2_ADD_REF_ARGS	/usr/include/boost/signals2/detail/signal_template.hpp	330;"	d
BOOST_SIGNALS2_ADD_REF_M_ARG_STATEMENT	/usr/include/boost/signals2/detail/signal_template.hpp	351;"	d
BOOST_SIGNALS2_ADD_REF_M_ARG_STATEMENT	/usr/include/boost/signals2/detail/signal_template.hpp	354;"	d
BOOST_SIGNALS2_ADD_REF_TYPE	/usr/include/boost/signals2/detail/signal_template.hpp	320;"	d
BOOST_SIGNALS2_ADD_REF_TYPE	/usr/include/boost/signals2/detail/signal_template.hpp	356;"	d
BOOST_SIGNALS2_ARGS_TEMPLATE_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	151;"	d
BOOST_SIGNALS2_ARGS_TEMPLATE_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	56;"	d
BOOST_SIGNALS2_ARGS_TEMPLATE_INSTANTIATION	/usr/include/boost/signals2/detail/signals_common_macros.hpp	148;"	d
BOOST_SIGNALS2_ARGS_TEMPLATE_INSTANTIATION	/usr/include/boost/signals2/detail/signals_common_macros.hpp	39;"	d
BOOST_SIGNALS2_BOUND_EXTENDED_SLOT_FUNCTION_INVOKER_N	/usr/include/boost/signals2/detail/signal_template.hpp	/^        class BOOST_SIGNALS2_BOUND_EXTENDED_SLOT_FUNCTION_INVOKER_N(BOOST_SIGNALS2_NUM_ARGS)$/;"	f	namespace:boost::signals2::detail	signature:(BOOST_SIGNALS2_NUM_ARGS)
BOOST_SIGNALS2_BOUND_EXTENDED_SLOT_FUNCTION_INVOKER_N	/usr/include/boost/signals2/detail/signals_common_macros.hpp	156;"	d
BOOST_SIGNALS2_BOUND_EXTENDED_SLOT_FUNCTION_INVOKER_N	/usr/include/boost/signals2/detail/signals_common_macros.hpp	84;"	d
BOOST_SIGNALS2_BOUND_EXTENDED_SLOT_FUNCTION_N	/usr/include/boost/signals2/detail/signal_template.hpp	/^        class BOOST_SIGNALS2_BOUND_EXTENDED_SLOT_FUNCTION_N(BOOST_SIGNALS2_NUM_ARGS)$/;"	f	namespace:boost::signals2::detail	signature:(BOOST_SIGNALS2_NUM_ARGS)
BOOST_SIGNALS2_BOUND_EXTENDED_SLOT_FUNCTION_N	/usr/include/boost/signals2/detail/signals_common_macros.hpp	155;"	d
BOOST_SIGNALS2_BOUND_EXTENDED_SLOT_FUNCTION_N	/usr/include/boost/signals2/detail/signals_common_macros.hpp	82;"	d
BOOST_SIGNALS2_CONNECTION_HPP	/usr/include/boost/signals2/connection.hpp	15;"	d
BOOST_SIGNALS2_DECONSTRUCT_HPP	/usr/include/boost/signals2/deconstruct.hpp	2;"	d
BOOST_SIGNALS2_DECONSTRUCT_PTR_HPP	/usr/include/boost/signals2/deconstruct_ptr.hpp	16;"	d
BOOST_SIGNALS2_DETAIL_AUTO_BUFFER_HPP_25_02_2009	/usr/include/boost/signals2/detail/auto_buffer.hpp	7;"	d
BOOST_SIGNALS2_DETAIL_REPLACE_SLOT_FUNCTION_HPP	/usr/include/boost/signals2/detail/replace_slot_function.hpp	11;"	d
BOOST_SIGNALS2_DETAIL_VARIADIC_ARG_TYPE_HPP	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	11;"	d
BOOST_SIGNALS2_DETAIL_VARIADIC_SLOT_INVOKER_HPP	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	16;"	d
BOOST_SIGNALS2_DUMMY_MUTEX_HPP	/usr/include/boost/signals2/dummy_mutex.hpp	14;"	d
BOOST_SIGNALS2_EXPIRED_SLOT_HPP	/usr/include/boost/signals2/expired_slot.hpp	12;"	d
BOOST_SIGNALS2_EXTENDED_SLOT_TYPE	/usr/include/boost/signals2/detail/signals_common_macros.hpp	154;"	d
BOOST_SIGNALS2_EXTENDED_SLOT_TYPE	/usr/include/boost/signals2/detail/signals_common_macros.hpp	77;"	d
BOOST_SIGNALS2_EXT_FUNCTION_N_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	72;"	d
BOOST_SIGNALS2_EXT_SIGNATURE	/usr/include/boost/signals2/detail/signal_template.hpp	787;"	d
BOOST_SIGNALS2_EXT_SIGNATURE	/usr/include/boost/signals2/detail/signal_template.hpp	792;"	d
BOOST_SIGNALS2_EXT_SLOT_TEMPLATE_INSTANTIATION	/usr/include/boost/signals2/detail/signals_common_macros.hpp	68;"	d
BOOST_SIGNALS2_FOREIGN_PTR_HPP	/usr/include/boost/signals2/detail/foreign_ptr.hpp	12;"	d
BOOST_SIGNALS2_FULL_REF_ARG	/usr/include/boost/signals2/detail/signals_common_macros.hpp	103;"	d
BOOST_SIGNALS2_FULL_REF_ARGS	/usr/include/boost/signals2/detail/signals_common_macros.hpp	106;"	d
BOOST_SIGNALS2_FULL_REF_ARGS	/usr/include/boost/signals2/detail/signals_common_macros.hpp	152;"	d
BOOST_SIGNALS2_FUNCTION_N_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	157;"	d
BOOST_SIGNALS2_FUNCTION_N_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	65;"	d
BOOST_SIGNALS2_LAST_VALUE_HPP	/usr/include/boost/signals2/last_value.hpp	12;"	d
BOOST_SIGNALS2_LWM_NOP_HPP	/usr/include/boost/signals2/detail/lwm_nop.hpp	13;"	d
BOOST_SIGNALS2_LWM_PTHREADS_HPP	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	13;"	d
BOOST_SIGNALS2_LWM_WIN32_CS_HPP	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	13;"	d
BOOST_SIGNALS2_MAX_ARGS	/usr/include/boost/signals2/detail/signals_common_macros.hpp	19;"	d
BOOST_SIGNALS2_MISC_STATEMENT	/usr/include/boost/signals2/detail/signal_template.hpp	335;"	d
BOOST_SIGNALS2_MISC_STATEMENT	/usr/include/boost/signals2/detail/signal_template.hpp	339;"	d
BOOST_SIGNALS2_MISC_STATEMENT	/usr/include/boost/signals2/detail/signal_template.hpp	624;"	d
BOOST_SIGNALS2_MISC_STATEMENT	/usr/include/boost/signals2/detail/signal_template.hpp	627;"	d
BOOST_SIGNALS2_MISC_STATEMENT	/usr/include/boost/signals2/detail/slot_template.hpp	48;"	d
BOOST_SIGNALS2_MISC_STATEMENT	/usr/include/boost/signals2/detail/slot_template.hpp	51;"	d
BOOST_SIGNALS2_MUTEX_HPP	/usr/include/boost/signals2/mutex.hpp	17;"	d
BOOST_SIGNALS2_M_ARG_NAME	/usr/include/boost/signals2/detail/signal_template.hpp	333;"	d
BOOST_SIGNALS2_M_ARG_NAME	/usr/include/boost/signals2/detail/signal_template.hpp	372;"	d
BOOST_SIGNALS2_M_ARG_NAMES	/usr/include/boost/signals2/detail/signal_template.hpp	359;"	d
BOOST_SIGNALS2_M_ARG_NAMES	/usr/include/boost/signals2/detail/signal_template.hpp	371;"	d
BOOST_SIGNALS2_NO_CXX11_SMART_PTR	/usr/include/boost/signals2/detail/foreign_ptr.hpp	25;"	d
BOOST_SIGNALS2_NULL_OUTPUT_ITERATOR_HPP	/usr/include/boost/signals2/detail/null_output_iterator.hpp	12;"	d
BOOST_SIGNALS2_NUM_ARGS	/usr/include/boost/signals2/detail/preprocessed_arg_type_template.hpp	12;"	d
BOOST_SIGNALS2_NUM_ARGS	/usr/include/boost/signals2/detail/preprocessed_arg_type_template.hpp	39;"	d
BOOST_SIGNALS2_NUM_ARGS	/usr/include/boost/signals2/detail/signal_template.hpp	17;"	d
BOOST_SIGNALS2_NUM_ARGS	/usr/include/boost/signals2/detail/signal_template.hpp	19;"	d
BOOST_SIGNALS2_NUM_ARGS	/usr/include/boost/signals2/detail/signal_template.hpp	819;"	d
BOOST_SIGNALS2_NUM_ARGS	/usr/include/boost/signals2/detail/slot_template.hpp	15;"	d
BOOST_SIGNALS2_NUM_ARGS	/usr/include/boost/signals2/detail/slot_template.hpp	17;"	d
BOOST_SIGNALS2_NUM_ARGS	/usr/include/boost/signals2/detail/slot_template.hpp	183;"	d
BOOST_SIGNALS2_OPTIONAL_LAST_VALUE_HPP	/usr/include/boost/signals2/optional_last_value.hpp	12;"	d
BOOST_SIGNALS2_PORTABLE_SIGNATURE	/usr/include/boost/signals2/detail/signals_common_macros.hpp	162;"	d
BOOST_SIGNALS2_PORTABLE_SIGNATURE	/usr/include/boost/signals2/detail/signals_common_macros.hpp	93;"	d
BOOST_SIGNALS2_POSTCONSTRUCTIBLE_HPP	/usr/include/boost/signals2/postconstructible.hpp	16;"	d
BOOST_SIGNALS2_PP_COMMA_IF	/usr/include/boost/signals2/detail/signals_common_macros.hpp	140;"	d
BOOST_SIGNALS2_PP_COMMA_IF	/usr/include/boost/signals2/detail/signals_common_macros.hpp	209;"	d
BOOST_SIGNALS2_PREDESTRUCTIBLE_HPP	/usr/include/boost/signals2/predestructible.hpp	16;"	d
BOOST_SIGNALS2_PREFIXED_ARGS_TEMPLATE_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	53;"	d
BOOST_SIGNALS2_PREFIXED_FULL_REF_ARG	/usr/include/boost/signals2/detail/signals_common_macros.hpp	97;"	d
BOOST_SIGNALS2_PREFIXED_FULL_REF_ARGS	/usr/include/boost/signals2/detail/signals_common_macros.hpp	100;"	d
BOOST_SIGNALS2_PREFIXED_SIGNATURE_TEMPLATE_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	158;"	d
BOOST_SIGNALS2_PREFIXED_SIGNATURE_TEMPLATE_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	45;"	d
BOOST_SIGNALS2_PREFIXED_SIGNATURE_TEMPLATE_INSTANTIATION	/usr/include/boost/signals2/detail/signals_common_macros.hpp	159;"	d
BOOST_SIGNALS2_PREFIXED_SIGNATURE_TEMPLATE_INSTANTIATION	/usr/include/boost/signals2/detail/signals_common_macros.hpp	59;"	d
BOOST_SIGNALS2_PREPROCESSED_ARG_N_TYPE_CLASS_NAME	/usr/include/boost/signals2/detail/preprocessed_arg_type_template.hpp	/^        class BOOST_SIGNALS2_PREPROCESSED_ARG_N_TYPE_CLASS_NAME(BOOST_SIGNALS2_NUM_ARGS);$/;"	p	namespace:boost::signals2::detail	signature:(BOOST_SIGNALS2_NUM_ARGS)
BOOST_SIGNALS2_PREPROCESSED_ARG_N_TYPE_CLASS_NAME	/usr/include/boost/signals2/detail/signals_common_macros.hpp	109;"	d
BOOST_SIGNALS2_PREPROCESSED_ARG_TYPE_CLASS_TEMPLATE_SPECIALIZATION	/usr/include/boost/signals2/detail/preprocessed_arg_type_template.hpp	25;"	d
BOOST_SIGNALS2_PREPROCESSED_ARG_TYPE_HPP	/usr/include/boost/signals2/detail/preprocessed_arg_type.hpp	13;"	d
BOOST_SIGNALS2_PREPROCESSED_SIGNAL_HPP	/usr/include/boost/signals2/preprocessed_signal.hpp	16;"	d
BOOST_SIGNALS2_PREPROCESSED_SLOT_HPP	/usr/include/boost/signals2/preprocessed_slot.hpp	13;"	d
BOOST_SIGNALS2_RESULT_TYPE_WRAPPER_HPP	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	12;"	d
BOOST_SIGNALS2_SHARED_CONNECTION_BLOCK_HPP	/usr/include/boost/signals2/shared_connection_block.hpp	12;"	d
BOOST_SIGNALS2_SIGNALS_COMMON_HPP	/usr/include/boost/signals2/detail/signals_common.hpp	12;"	d
BOOST_SIGNALS2_SIGNALS_COMMON_MACROS_HPP	/usr/include/boost/signals2/detail/signals_common_macros.hpp	12;"	d
BOOST_SIGNALS2_SIGNAL_BASE_HPP	/usr/include/boost/signals2/signal_base.hpp	12;"	d
BOOST_SIGNALS2_SIGNAL_CLASS_NAME	/usr/include/boost/signals2/detail/signal_template.hpp	/^      class BOOST_SIGNALS2_SIGNAL_CLASS_NAME(BOOST_SIGNALS2_NUM_ARGS);$/;"	p	namespace:boost::signals2	signature:(BOOST_SIGNALS2_NUM_ARGS)
BOOST_SIGNALS2_SIGNAL_CLASS_NAME	/usr/include/boost/signals2/detail/signals_common_macros.hpp	144;"	d
BOOST_SIGNALS2_SIGNAL_CLASS_NAME	/usr/include/boost/signals2/detail/signals_common_macros.hpp	23;"	d
BOOST_SIGNALS2_SIGNAL_HPP	/usr/include/boost/signals2/signal.hpp	13;"	d
BOOST_SIGNALS2_SIGNAL_IMPL_CLASS_NAME	/usr/include/boost/signals2/detail/signal_template.hpp	/^        class BOOST_SIGNALS2_SIGNAL_IMPL_CLASS_NAME(BOOST_SIGNALS2_NUM_ARGS);$/;"	p	namespace:boost::signals2::detail	signature:(BOOST_SIGNALS2_NUM_ARGS)
BOOST_SIGNALS2_SIGNAL_IMPL_CLASS_NAME	/usr/include/boost/signals2/detail/signals_common_macros.hpp	146;"	d
BOOST_SIGNALS2_SIGNAL_IMPL_CLASS_NAME	/usr/include/boost/signals2/detail/signals_common_macros.hpp	27;"	d
BOOST_SIGNALS2_SIGNAL_TEMPLATE_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	118;"	d
BOOST_SIGNALS2_SIGNAL_TEMPLATE_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	172;"	d
BOOST_SIGNALS2_SIGNAL_TEMPLATE_DEFAULTED_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	127;"	d
BOOST_SIGNALS2_SIGNAL_TEMPLATE_DEFAULTED_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	180;"	d
BOOST_SIGNALS2_SIGNAL_TEMPLATE_INSTANTIATION	/usr/include/boost/signals2/detail/signal_template.hpp	23;"	d
BOOST_SIGNALS2_SIGNAL_TEMPLATE_INSTANTIATION	/usr/include/boost/signals2/detail/signal_template.hpp	820;"	d
BOOST_SIGNALS2_SIGNAL_TEMPLATE_SPECIALIZATION	/usr/include/boost/signals2/detail/signals_common_macros.hpp	136;"	d
BOOST_SIGNALS2_SIGNAL_TEMPLATE_SPECIALIZATION	/usr/include/boost/signals2/detail/signals_common_macros.hpp	197;"	d
BOOST_SIGNALS2_SIGNAL_TEMPLATE_SPECIALIZATION_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	135;"	d
BOOST_SIGNALS2_SIGNAL_TEMPLATE_SPECIALIZATION_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	188;"	d
BOOST_SIGNALS2_SIGNAL_TYPE_HPP	/usr/include/boost/signals2/signal_type.hpp	18;"	d
BOOST_SIGNALS2_SIGNATURE_ARG_NAME	/usr/include/boost/signals2/detail/signals_common_macros.hpp	29;"	d
BOOST_SIGNALS2_SIGNATURE_ARG_NAMES	/usr/include/boost/signals2/detail/signals_common_macros.hpp	161;"	d
BOOST_SIGNALS2_SIGNATURE_ARG_NAMES	/usr/include/boost/signals2/detail/signals_common_macros.hpp	37;"	d
BOOST_SIGNALS2_SIGNATURE_FULL_ARG	/usr/include/boost/signals2/detail/signals_common_macros.hpp	31;"	d
BOOST_SIGNALS2_SIGNATURE_FULL_ARGS	/usr/include/boost/signals2/detail/signals_common_macros.hpp	160;"	d
BOOST_SIGNALS2_SIGNATURE_FULL_ARGS	/usr/include/boost/signals2/detail/signals_common_macros.hpp	34;"	d
BOOST_SIGNALS2_SIGNATURE_FUNCTION_TYPE	/usr/include/boost/signals2/detail/signals_common_macros.hpp	150;"	d
BOOST_SIGNALS2_SIGNATURE_FUNCTION_TYPE	/usr/include/boost/signals2/detail/signals_common_macros.hpp	42;"	d
BOOST_SIGNALS2_SIGNATURE_TEMPLATE_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	147;"	d
BOOST_SIGNALS2_SIGNATURE_TEMPLATE_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	49;"	d
BOOST_SIGNALS2_SIGNATURE_TEMPLATE_INSTANTIATION	/usr/include/boost/signals2/detail/signals_common_macros.hpp	149;"	d
BOOST_SIGNALS2_SIGNATURE_TEMPLATE_INSTANTIATION	/usr/include/boost/signals2/detail/signals_common_macros.hpp	62;"	d
BOOST_SIGNALS2_SIGNATURE_TO_ARGN_TYPE	/usr/include/boost/signals2/detail/signals_common_macros.hpp	86;"	d
BOOST_SIGNALS2_SLOT_BASE_HPP	/usr/include/boost/signals2/slot_base.hpp	13;"	d
BOOST_SIGNALS2_SLOT_BINDING_CONSTRUCTOR	/usr/include/boost/signals2/preprocessed_slot.hpp	61;"	d
BOOST_SIGNALS2_SLOT_BINDING_CONSTRUCTOR	/usr/include/boost/signals2/preprocessed_slot.hpp	67;"	d
BOOST_SIGNALS2_SLOT_CALL_ITERATOR_HPP	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	13;"	d
BOOST_SIGNALS2_SLOT_CLASS_NAME	/usr/include/boost/signals2/detail/signals_common_macros.hpp	153;"	d
BOOST_SIGNALS2_SLOT_CLASS_NAME	/usr/include/boost/signals2/detail/signals_common_macros.hpp	163;"	d
BOOST_SIGNALS2_SLOT_CLASS_NAME	/usr/include/boost/signals2/detail/signals_common_macros.hpp	75;"	d
BOOST_SIGNALS2_SLOT_CLASS_NAME	/usr/include/boost/signals2/detail/slot_template.hpp	/^      class BOOST_SIGNALS2_SLOT_CLASS_NAME(BOOST_SIGNALS2_NUM_ARGS);$/;"	p	namespace:boost::signals2	signature:(BOOST_SIGNALS2_NUM_ARGS)
BOOST_SIGNALS2_SLOT_GROUPS_HPP	/usr/include/boost/signals2/detail/slot_groups.hpp	12;"	d
BOOST_SIGNALS2_SLOT_HPP	/usr/include/boost/signals2/slot.hpp	13;"	d
BOOST_SIGNALS2_SLOT_MAX_BINDING_ARGS	/usr/include/boost/signals2/preprocessed_slot.hpp	20;"	d
BOOST_SIGNALS2_SLOT_N_BINDING_CONSTRUCTOR	/usr/include/boost/signals2/preprocessed_slot.hpp	25;"	d
BOOST_SIGNALS2_SLOT_N_BINDING_CONSTRUCTOR	/usr/include/boost/signals2/preprocessed_slot.hpp	40;"	d
BOOST_SIGNALS2_SLOT_N_BINDING_CONSTRUCTORS	/usr/include/boost/signals2/preprocessed_slot.hpp	32;"	d
BOOST_SIGNALS2_SLOT_N_BINDING_CONSTRUCTORS	/usr/include/boost/signals2/preprocessed_slot.hpp	41;"	d
BOOST_SIGNALS2_SLOT_N_BINDING_CONSTRUCTORS	/usr/include/boost/signals2/variadic_slot.hpp	16;"	d
BOOST_SIGNALS2_SLOT_TEMPLATE_SPECIALIZATION	/usr/include/boost/signals2/detail/signals_common_macros.hpp	115;"	d
BOOST_SIGNALS2_SLOT_TEMPLATE_SPECIALIZATION	/usr/include/boost/signals2/detail/signals_common_macros.hpp	169;"	d
BOOST_SIGNALS2_SLOT_TEMPLATE_SPECIALIZATION_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	112;"	d
BOOST_SIGNALS2_SLOT_TEMPLATE_SPECIALIZATION_DECL	/usr/include/boost/signals2/detail/signals_common_macros.hpp	165;"	d
BOOST_SIGNALS2_STD_FUNCTIONAL_BASE	/usr/include/boost/signals2/detail/signal_template.hpp	/^      public detail::BOOST_SIGNALS2_STD_FUNCTIONAL_BASE$/;"	f	class:boost::signals2::detail	access:public	signature:(typename detail::result_type_wrapper<typename Combiner::result_type>::type)
BOOST_SIGNALS2_STD_FUNCTIONAL_BASE	/usr/include/boost/signals2/detail/signals_common_macros.hpp	138;"	d
BOOST_SIGNALS2_STD_FUNCTIONAL_BASE	/usr/include/boost/signals2/detail/signals_common_macros.hpp	206;"	d
BOOST_SIGNALS2_STD_FUNCTIONAL_BASE	/usr/include/boost/signals2/detail/slot_template.hpp	/^      : public slot_base, public detail::BOOST_SIGNALS2_STD_FUNCTIONAL_BASE(R)$/;"	f	class:boost::signals2::detail	access:public	signature:(R)
BOOST_SIGNALS2_TRACKABLE_HPP	/usr/include/boost/signals2/trackable.hpp	17;"	d
BOOST_SIGNALS2_TRACKED_OBJECTS_VISITOR_HPP	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	13;"	d
BOOST_SIGNALS2_TUPLE	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	24;"	d
BOOST_SIGNALS2_TUPLE	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	27;"	d
BOOST_SIGNALS2_UNIQUE_LOCK_HPP	/usr/include/boost/signals2/detail/unique_lock.hpp	13;"	d
BOOST_SIGNALS2_VARIADIC_SIGNAL_HPP	/usr/include/boost/signals2/variadic_signal.hpp	17;"	d
BOOST_SIGNALS2_VARIADIC_SLOT_HPP	/usr/include/boost/signals2/variadic_slot.hpp	12;"	d
BOOST_SIGNALS2_WEAK_SIGNAL_CLASS_NAME	/usr/include/boost/signals2/detail/signal_template.hpp	/^        class BOOST_SIGNALS2_WEAK_SIGNAL_CLASS_NAME(BOOST_SIGNALS2_NUM_ARGS);$/;"	p	namespace:boost::signals2::detail	signature:(BOOST_SIGNALS2_NUM_ARGS)
BOOST_SIGNALS2_WEAK_SIGNAL_CLASS_NAME	/usr/include/boost/signals2/detail/signals_common_macros.hpp	145;"	d
BOOST_SIGNALS2_WEAK_SIGNAL_CLASS_NAME	/usr/include/boost/signals2/detail/signals_common_macros.hpp	25;"	d
BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            BOOST_STATIC_CONSTANT( unsigned, value = N );$/;"	p	struct:boost::signals2::detail::auto_buffer_detail::compute_buffer_size	access:public	signature:( unsigned, value = N )
BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            BOOST_STATIC_CONSTANT( unsigned, value = N \/ sizeof(T) );$/;"	p	struct:boost::signals2::detail::auto_buffer_detail::compute_buffer_objects	access:public	signature:( unsigned, value = N / sizeof(T) )
BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            BOOST_STATIC_CONSTANT( unsigned, value = Policy::value );$/;"	p	struct:boost::signals2::detail::auto_buffer_detail::compute_buffer_objects	access:public	signature:( unsigned, value = Policy::value )
BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            BOOST_STATIC_CONSTANT( unsigned, value = Policy::value * sizeof(T) );$/;"	p	struct:boost::signals2::detail::auto_buffer_detail::compute_buffer_size	access:public	signature:( unsigned, value = Policy::value * sizeof(T) )
BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        BOOST_STATIC_CONSTANT( bool, is_stack_buffer_empty = N == 0u );$/;"	p	class:boost::signals2::detail::auto_buffer	access:private	signature:( bool, is_stack_buffer_empty = N == 0u )
BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        BOOST_STATIC_CONSTANT( unsigned, value = N );$/;"	p	struct:boost::signals2::detail::store_n_bytes	access:public	signature:( unsigned, value = N )
BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        BOOST_STATIC_CONSTANT( unsigned, value = N );$/;"	p	struct:boost::signals2::detail::store_n_objects	access:public	signature:( unsigned, value = N )
DebugInfo	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    struct critical_section_debug * DebugInfo;$/;"	m	struct:boost::signals2::critical_section	typeref:struct:boost::signals2::critical_section::critical_section_debug	access:public
DeleteCriticalSection	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^extern "C" __declspec(dllimport) void __stdcall DeleteCriticalSection(critical_section *);$/;"	p	namespace:boost::signals2	signature:(critical_section *)
EnterCriticalSection	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^extern "C" __declspec(dllimport) void __stdcall EnterCriticalSection(critical_section *);$/;"	p	namespace:boost::signals2	signature:(critical_section *)
InitializeCriticalSection	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^extern "C" __declspec(dllimport) void __stdcall InitializeCriticalSection(critical_section *);$/;"	p	namespace:boost::signals2	signature:(critical_section *)
LeaveCriticalSection	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^extern "C" __declspec(dllimport) void __stdcall LeaveCriticalSection(critical_section *);$/;"	p	namespace:boost::signals2	signature:(critical_section *)
LockCount	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    long LockCount;$/;"	m	struct:boost::signals2::critical_section	access:public
LockSemaphore	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    void * LockSemaphore;$/;"	m	struct:boost::signals2::critical_section	access:public
N	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        enum { N = auto_buffer_detail::$/;"	e	enum:boost::signals2::detail::auto_buffer::__anon2
OwningThread	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    void * OwningThread;$/;"	m	struct:boost::signals2::critical_section	access:public
RecursionCount	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    long RecursionCount;$/;"	m	struct:boost::signals2::critical_section	access:public
SpinCount	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    unsigned __int64 SpinCount;$/;"	m	struct:boost::signals2::critical_section	access:public
SpinCount	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    unsigned long SpinCount;$/;"	m	struct:boost::signals2::critical_section	access:public
TryEnterCriticalSection	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^extern "C" __declspec(dllimport) bool __stdcall TryEnterCriticalSection(critical_section *);$/;"	p	namespace:boost::signals2	signature:(critical_section *)
_args	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        BOOST_SIGNALS2_TUPLE<Args& ...> _args;$/;"	m	class:boost::signals2::detail::variadic_slot_invoker	access:private
_blocker	/usr/include/boost/signals2/shared_connection_block.hpp	/^      shared_ptr<void> _blocker;$/;"	m	class:boost::signals2::shared_connection_block	access:private
_connected	/usr/include/boost/signals2/connection.hpp	/^        mutable bool _connected;$/;"	m	class:boost::signals2::detail::connection_body_base	access:protected
_group_compare	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        GroupCompare _group_compare;$/;"	m	class:boost::signals2::detail::group_key_less	access:private
_group_key	/usr/include/boost/signals2/connection.hpp	/^        GroupKey _group_key;$/;"	m	class:boost::signals2::detail::connection_body	access:private
_group_key_compare	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        group_key_compare_type _group_key_compare;$/;"	m	class:boost::signals2::detail::grouped_list	access:private
_group_map	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        map_type _group_map;$/;"	m	class:boost::signals2::detail::grouped_list	access:private
_list	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        list_type _list;$/;"	m	class:boost::signals2::detail::grouped_list	access:private
_mutex	/usr/include/boost/signals2/connection.hpp	/^        mutable mutex_type _mutex;$/;"	m	class:boost::signals2::detail::connection_body	access:private
_mutex	/usr/include/boost/signals2/detail/unique_lock.hpp	/^        Mutex &_mutex;$/;"	m	class:boost::signals2::detail::unique_lock	access:private
_p	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        FSP _p;$/;"	m	class:boost::signals2::detail::foreign_shared_ptr_impl	access:private
_p	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        FWP _p;$/;"	m	class:boost::signals2::detail::foreign_weak_ptr_impl	access:private
_p	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        boost::scoped_ptr<foreign_weak_ptr_impl_base> _p;$/;"	m	class:boost::signals2::detail::foreign_void_weak_ptr	access:private
_p	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_shared_ptr_impl_base *_p;$/;"	m	class:boost::signals2::detail::foreign_void_shared_ptr	access:private
_postconstructed	/usr/include/boost/signals2/deconstruct.hpp	/^    mutable bool _postconstructed;$/;"	m	class:boost::signals2::postconstructor_invoker	access:private
_sp	/usr/include/boost/signals2/deconstruct.hpp	/^    shared_ptr<T> _sp;$/;"	m	class:boost::signals2::postconstructor_invoker	access:private
_tracked_objects	/usr/include/boost/signals2/slot_base.hpp	/^      tracked_container_type _tracked_objects;$/;"	m	class:boost::signals2::slot_base	access:protected
_tracked_ptr	/usr/include/boost/signals2/trackable.hpp	/^      shared_ptr<void> _tracked_ptr;$/;"	m	class:boost::signals2::trackable	access:private
_weak_blocker	/usr/include/boost/signals2/connection.hpp	/^        weak_ptr<void> _weak_blocker;$/;"	m	class:boost::signals2::detail::connection_body_base	access:protected
_weak_connection_body	/usr/include/boost/signals2/connection.hpp	/^      boost::weak_ptr<detail::connection_body_base> _weak_connection_body;$/;"	m	class:boost::signals2::connection	access:protected
_weak_connection_body	/usr/include/boost/signals2/shared_connection_block.hpp	/^      boost::weak_ptr<detail::connection_body_base> _weak_connection_body;$/;"	m	class:boost::signals2::shared_connection_block	access:private
add_if_trackable	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void add_if_trackable(const trackable *trackable) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const trackable *trackable) const
add_if_trackable	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void add_if_trackable(const void *) const {}$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const void *) const
address	/usr/include/boost/signals2/deconstruct.hpp	/^    void * address()$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:public	signature:()
address	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            void* address() const$/;"	f	struct:boost::signals2::detail::members_type	access:public	signature:() const
adl_postconstruct	/usr/include/boost/signals2/postconstructible.hpp	/^          friend void adl_postconstruct(const shared_ptr<T> &sp, postconstructible *p)$/;"	f	class:boost::signals2::postconstructible_adl_barrier::postconstructible	access:friend	signature:(const shared_ptr<T> &sp, postconstructible *p)
adl_postconstruct	/usr/include/boost/signals2/predestructible.hpp	/^          friend void adl_postconstruct(const shared_ptr<T> &, ...)$/;"	f	class:boost::signals2::predestructible_adl_barrier::predestructible	access:friend	signature:(const shared_ptr<T> &, ...)
adl_predestruct	/usr/include/boost/signals2/deconstruct.hpp	/^  inline void adl_predestruct(...) {}$/;"	f	namespace:boost::signals2::detail	signature:(....)
adl_predestruct	/usr/include/boost/signals2/predestructible.hpp	/^        friend void adl_predestruct(predestructible *p)$/;"	f	class:boost::signals2::predestructible_adl_barrier::predestructible	access:friend	signature:(predestructible *p)
align_	/usr/include/boost/signals2/deconstruct.hpp	/^        typename boost::type_with_alignment< A >::type align_;$/;"	m	union:boost::signals2::detail::sp_aligned_storage::type	access:public
allocator_pointer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef typename Allocator::pointer              allocator_pointer;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
allocator_type	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef Allocator                                allocator_type;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
args	/usr/include/boost/signals2/signal_type.hpp	/^        args;$/;"	t	class:boost::signals2::signal_type	access:public
assign_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void assign_impl( I begin, I end, I2 where )$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, I2 where )
assign_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void assign_impl( I begin, I end, I2 where, const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, I2 where, const boost::false_type& )
assign_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void assign_impl( I begin, I end, I2 where, const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, I2 where, const boost::true_type& )
at_back	/usr/include/boost/signals2/detail/slot_groups.hpp	/^    enum connect_position { at_back, at_front };$/;"	e	enum:boost::signals2::connect_position
at_front	/usr/include/boost/signals2/detail/slot_groups.hpp	/^    enum connect_position { at_back, at_front };$/;"	e	enum:boost::signals2::connect_position
auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer( ForwardIterator begin_arg, ForwardIterator end_arg )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( ForwardIterator begin_arg, ForwardIterator end_arg )
auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer( ForwardIterator begin_arg, ForwardIterator end_arg,$/;"	f	namespace:boost::signals2::detail	access:public	signature:( ForwardIterator begin_arg, ForwardIterator end_arg, const allocator_type& a )
auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer( const auto_buffer& r )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const auto_buffer& r )
auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer( size_type capacity_arg, const allocator_type& a )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type capacity_arg, const allocator_type& a )
auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer( size_type size_arg, optimized_const_reference init_value )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type size_arg, optimized_const_reference init_value )
auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer( size_type size_arg, optimized_const_reference init_value,$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type size_arg, optimized_const_reference init_value, const allocator_type& a )
auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        explicit auto_buffer( size_type capacity_arg )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type capacity_arg )
auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    class auto_buffer : Allocator$/;"	c	namespace:boost::signals2::detail	inherits:Allocator
auto_buffer_destroy	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void auto_buffer_destroy( const boost::false_type& x )$/;"	f	namespace:boost::signals2::detail	signature:( const boost::false_type& x )
auto_buffer_destroy	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void auto_buffer_destroy( const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( const boost::true_type& )
auto_buffer_destroy	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void auto_buffer_destroy( pointer where )$/;"	f	namespace:boost::signals2::detail	signature:( pointer where )
auto_buffer_destroy	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void auto_buffer_destroy( pointer where, const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( pointer where, const boost::false_type& )
auto_buffer_destroy	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void auto_buffer_destroy( pointer, const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( pointer, const boost::true_type& )
auto_buffer_detail	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    namespace auto_buffer_detail$/;"	n	namespace:boost::signals2::detail
back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        optimized_const_reference back() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        reference back()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
back_ungrouped_slots	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      enum slot_meta_group {front_ungrouped_slots, grouped_slots, back_ungrouped_slots};$/;"	e	enum:boost::signals2::detail::slot_meta_group
base_type	/usr/include/boost/signals2/preprocessed_signal.hpp	/^        Signature, Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::type base_type;$/;"	t	class:boost::signals2::signal	access:private
base_type	/usr/include/boost/signals2/preprocessed_slot.hpp	/^        Signature, SlotFunction>::type base_type;$/;"	t	class:boost::signals2::slot	access:private
begin	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_iterator begin() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
begin	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        iterator begin()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
begin	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        iterator begin()$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:()
block	/usr/include/boost/signals2/shared_connection_block.hpp	/^      void block()$/;"	f	class:boost::signals2::shared_connection_block	access:public	signature:()
blocked	/usr/include/boost/signals2/connection.hpp	/^        bool blocked() const$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:() const
blocked	/usr/include/boost/signals2/connection.hpp	/^      bool blocked() const$/;"	f	class:boost::signals2::connection	access:public	signature:() const
blocking	/usr/include/boost/signals2/shared_connection_block.hpp	/^      bool blocking() const$/;"	f	class:boost::signals2::shared_connection_block	access:public	signature:() const
boost	/usr/include/boost/signals2/connection.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/deconstruct.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/lwm_nop.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/null_output_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/preprocessed_arg_type.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/preprocessed_arg_type_template.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/replace_slot_function.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals2/detail/signal_template.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/signals_common.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals2/detail/slot_groups.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals2/detail/slot_template.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/unique_lock.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/dummy_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals2/expired_slot.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/last_value.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals2/optional_last_value.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals2/postconstructible.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/predestructible.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/preprocessed_signal.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/preprocessed_slot.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/shared_connection_block.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/signal_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals2/signal_type.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/slot_base.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/signals2/trackable.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals2/variadic_signal.hpp	/^namespace boost$/;"	n
boost::signals2	/usr/include/boost/signals2/connection.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/deconstruct.hpp	/^namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/lwm_nop.hpp	/^namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/null_output_iterator.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/preprocessed_arg_type.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/preprocessed_arg_type_template.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/replace_slot_function.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/signal_template.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/signals_common.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/slot_groups.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/slot_template.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/unique_lock.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/dummy_mutex.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/expired_slot.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/last_value.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/optional_last_value.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/postconstructible.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/predestructible.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/preprocessed_signal.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/preprocessed_slot.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/shared_connection_block.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/signal_base.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/signal_type.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/slot_base.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/trackable.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
boost::signals2	/usr/include/boost/signals2/variadic_signal.hpp	/^  namespace signals2$/;"	n	namespace:boost
boost::signals2::BOOST_SIGNALS2_SIGNAL_CLASS_NAME	/usr/include/boost/signals2/detail/signal_template.hpp	/^      class BOOST_SIGNALS2_SIGNAL_CLASS_NAME(BOOST_SIGNALS2_NUM_ARGS);$/;"	p	namespace:boost::signals2	signature:(BOOST_SIGNALS2_NUM_ARGS)
boost::signals2::BOOST_SIGNALS2_SLOT_CLASS_NAME	/usr/include/boost/signals2/detail/slot_template.hpp	/^      class BOOST_SIGNALS2_SLOT_CLASS_NAME(BOOST_SIGNALS2_NUM_ARGS);$/;"	p	namespace:boost::signals2	signature:(BOOST_SIGNALS2_NUM_ARGS)
boost::signals2::DeleteCriticalSection	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^extern "C" __declspec(dllimport) void __stdcall DeleteCriticalSection(critical_section *);$/;"	p	namespace:boost::signals2	signature:(critical_section *)
boost::signals2::EnterCriticalSection	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^extern "C" __declspec(dllimport) void __stdcall EnterCriticalSection(critical_section *);$/;"	p	namespace:boost::signals2	signature:(critical_section *)
boost::signals2::InitializeCriticalSection	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^extern "C" __declspec(dllimport) void __stdcall InitializeCriticalSection(critical_section *);$/;"	p	namespace:boost::signals2	signature:(critical_section *)
boost::signals2::LeaveCriticalSection	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^extern "C" __declspec(dllimport) void __stdcall LeaveCriticalSection(critical_section *);$/;"	p	namespace:boost::signals2	signature:(critical_section *)
boost::signals2::TryEnterCriticalSection	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^extern "C" __declspec(dllimport) bool __stdcall TryEnterCriticalSection(critical_section *);$/;"	p	namespace:boost::signals2	signature:(critical_section *)
boost::signals2::at_back	/usr/include/boost/signals2/detail/slot_groups.hpp	/^    enum connect_position { at_back, at_front };$/;"	e	enum:boost::signals2::connect_position
boost::signals2::at_front	/usr/include/boost/signals2/detail/slot_groups.hpp	/^    enum connect_position { at_back, at_front };$/;"	e	enum:boost::signals2::connect_position
boost::signals2::connect_position	/usr/include/boost/signals2/detail/slot_groups.hpp	/^    enum connect_position { at_back, at_front };$/;"	g	namespace:boost::signals2
boost::signals2::connection	/usr/include/boost/signals2/connection.hpp	/^    class connection$/;"	c	namespace:boost::signals2
boost::signals2::connection::_weak_connection_body	/usr/include/boost/signals2/connection.hpp	/^      boost::weak_ptr<detail::connection_body_base> _weak_connection_body;$/;"	m	class:boost::signals2::connection	access:protected
boost::signals2::connection::blocked	/usr/include/boost/signals2/connection.hpp	/^      bool blocked() const$/;"	f	class:boost::signals2::connection	access:public	signature:() const
boost::signals2::connection::connected	/usr/include/boost/signals2/connection.hpp	/^      bool connected() const$/;"	f	class:boost::signals2::connection	access:public	signature:() const
boost::signals2::connection::connection	/usr/include/boost/signals2/connection.hpp	/^      connection() {}$/;"	f	class:boost::signals2::connection	access:public	signature:()
boost::signals2::connection::connection	/usr/include/boost/signals2/connection.hpp	/^      connection(const boost::weak_ptr<detail::connection_body_base> &connectionBody):$/;"	f	class:boost::signals2::connection	access:public	signature:(const boost::weak_ptr<detail::connection_body_base> &connectionBody)
boost::signals2::connection::connection	/usr/include/boost/signals2/connection.hpp	/^      connection(const connection &other): _weak_connection_body(other._weak_connection_body)$/;"	f	class:boost::signals2::connection	access:public	signature:(const connection &other)
boost::signals2::connection::disconnect	/usr/include/boost/signals2/connection.hpp	/^      void disconnect() const$/;"	f	class:boost::signals2::connection	access:public	signature:() const
boost::signals2::connection::operator !=	/usr/include/boost/signals2/connection.hpp	/^      bool operator!=(const connection& other) const$/;"	f	class:boost::signals2::connection	access:public	signature:(const connection& other) const
boost::signals2::connection::operator <	/usr/include/boost/signals2/connection.hpp	/^      bool operator<(const connection& other) const$/;"	f	class:boost::signals2::connection	access:public	signature:(const connection& other) const
boost::signals2::connection::operator ==	/usr/include/boost/signals2/connection.hpp	/^      bool operator==(const connection& other) const$/;"	f	class:boost::signals2::connection	access:public	signature:(const connection& other) const
boost::signals2::connection::swap	/usr/include/boost/signals2/connection.hpp	/^      void swap(connection &other)$/;"	f	class:boost::signals2::connection	access:public	signature:(connection &other)
boost::signals2::connection::~connection	/usr/include/boost/signals2/connection.hpp	/^      ~connection() {}$/;"	f	class:boost::signals2::connection	access:public	signature:()
boost::signals2::critical_section	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^struct critical_section$/;"	s	namespace:boost::signals2
boost::signals2::critical_section::DebugInfo	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    struct critical_section_debug * DebugInfo;$/;"	m	struct:boost::signals2::critical_section	typeref:struct:boost::signals2::critical_section::critical_section_debug	access:public
boost::signals2::critical_section::LockCount	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    long LockCount;$/;"	m	struct:boost::signals2::critical_section	access:public
boost::signals2::critical_section::LockSemaphore	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    void * LockSemaphore;$/;"	m	struct:boost::signals2::critical_section	access:public
boost::signals2::critical_section::OwningThread	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    void * OwningThread;$/;"	m	struct:boost::signals2::critical_section	access:public
boost::signals2::critical_section::RecursionCount	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    long RecursionCount;$/;"	m	struct:boost::signals2::critical_section	access:public
boost::signals2::critical_section::SpinCount	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    unsigned __int64 SpinCount;$/;"	m	struct:boost::signals2::critical_section	access:public
boost::signals2::critical_section::SpinCount	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    unsigned long SpinCount;$/;"	m	struct:boost::signals2::critical_section	access:public
boost::signals2::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1 )
boost::signals2::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2 )
boost::signals2::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3 )
boost::signals2::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4 )
boost::signals2::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5 )
boost::signals2::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6 )
boost::signals2::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7 )
boost::signals2::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8 )
boost::signals2::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8, A9 const & a9 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8, A9 const & a9 )
boost::signals2::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^template< class T > postconstructor_invoker<T> deconstruct()$/;"	f	namespace:boost::signals2	signature:()
boost::signals2::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^template< class T, class... Args > postconstructor_invoker< T > deconstruct( Args && ... args )$/;"	f	namespace:boost::signals2	signature:( Args && .... args )
boost::signals2::deconstruct_access	/usr/include/boost/signals2/deconstruct.hpp	/^class deconstruct_access$/;"	c	namespace:boost::signals2
boost::signals2::deconstruct_access::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1 )
boost::signals2::deconstruct_access::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2 )
boost::signals2::deconstruct_access::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3 )
boost::signals2::deconstruct_access::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4 )
boost::signals2::deconstruct_access::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5 )
boost::signals2::deconstruct_access::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6 )
boost::signals2::deconstruct_access::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7 )
boost::signals2::deconstruct_access::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8 )
boost::signals2::deconstruct_access::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8, A9 const & a9 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8, A9 const & a9 )
boost::signals2::deconstruct_access::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( Args && ... args )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( Args && .... args )
boost::signals2::deconstruct_access::deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct()$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:()
boost::signals2::deconstruct_ptr	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^    shared_ptr<T> deconstruct_ptr(T *ptr)$/;"	f	namespace:boost::signals2	signature:(T *ptr)
boost::signals2::deconstruct_ptr	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^    shared_ptr<T> deconstruct_ptr(T *ptr, D deleter)$/;"	f	namespace:boost::signals2	signature:(T *ptr, D deleter)
boost::signals2::detail	/usr/include/boost/signals2/connection.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/deconstruct.hpp	/^namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/null_output_iterator.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/preprocessed_arg_type.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/preprocessed_arg_type_template.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/replace_slot_function.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^    namespace detail {$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/signal_template.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/signal_template.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2	access:public
boost::signals2::detail	/usr/include/boost/signals2/detail/signals_common.hpp	/^    namespace detail {$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^    namespace detail {$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/slot_groups.hpp	/^    namespace detail {$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/slot_template.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2	access:public
boost::signals2::detail	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/unique_lock.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/postconstructible.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/slot_base.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/trackable.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail	/usr/include/boost/signals2/variadic_signal.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
boost::signals2::detail::BOOST_SIGNALS2_BOUND_EXTENDED_SLOT_FUNCTION_INVOKER_N	/usr/include/boost/signals2/detail/signal_template.hpp	/^        class BOOST_SIGNALS2_BOUND_EXTENDED_SLOT_FUNCTION_INVOKER_N(BOOST_SIGNALS2_NUM_ARGS)$/;"	f	namespace:boost::signals2::detail	signature:(BOOST_SIGNALS2_NUM_ARGS)
boost::signals2::detail::BOOST_SIGNALS2_BOUND_EXTENDED_SLOT_FUNCTION_N	/usr/include/boost/signals2/detail/signal_template.hpp	/^        class BOOST_SIGNALS2_BOUND_EXTENDED_SLOT_FUNCTION_N(BOOST_SIGNALS2_NUM_ARGS)$/;"	f	namespace:boost::signals2::detail	signature:(BOOST_SIGNALS2_NUM_ARGS)
boost::signals2::detail::BOOST_SIGNALS2_PREPROCESSED_ARG_N_TYPE_CLASS_NAME	/usr/include/boost/signals2/detail/preprocessed_arg_type_template.hpp	/^        class BOOST_SIGNALS2_PREPROCESSED_ARG_N_TYPE_CLASS_NAME(BOOST_SIGNALS2_NUM_ARGS);$/;"	p	namespace:boost::signals2::detail	signature:(BOOST_SIGNALS2_NUM_ARGS)
boost::signals2::detail::BOOST_SIGNALS2_SIGNAL_IMPL_CLASS_NAME	/usr/include/boost/signals2/detail/signal_template.hpp	/^        class BOOST_SIGNALS2_SIGNAL_IMPL_CLASS_NAME(BOOST_SIGNALS2_NUM_ARGS);$/;"	p	namespace:boost::signals2::detail	signature:(BOOST_SIGNALS2_NUM_ARGS)
boost::signals2::detail::BOOST_SIGNALS2_STD_FUNCTIONAL_BASE	/usr/include/boost/signals2/detail/signal_template.hpp	/^      public detail::BOOST_SIGNALS2_STD_FUNCTIONAL_BASE$/;"	f	class:boost::signals2::detail	access:public	signature:(typename detail::result_type_wrapper<typename Combiner::result_type>::type)
boost::signals2::detail::BOOST_SIGNALS2_STD_FUNCTIONAL_BASE	/usr/include/boost/signals2/detail/slot_template.hpp	/^      : public slot_base, public detail::BOOST_SIGNALS2_STD_FUNCTIONAL_BASE(R)$/;"	f	class:boost::signals2::detail	access:public	signature:(R)
boost::signals2::detail::BOOST_SIGNALS2_WEAK_SIGNAL_CLASS_NAME	/usr/include/boost/signals2/detail/signal_template.hpp	/^        class BOOST_SIGNALS2_WEAK_SIGNAL_CLASS_NAME(BOOST_SIGNALS2_NUM_ARGS);$/;"	p	namespace:boost::signals2::detail	signature:(BOOST_SIGNALS2_NUM_ARGS)
boost::signals2::detail::adl_predestruct	/usr/include/boost/signals2/deconstruct.hpp	/^  inline void adl_predestruct(...) {}$/;"	f	namespace:boost::signals2::detail	signature:(....)
boost::signals2::detail::assign_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void assign_impl( I begin, I end, I2 where )$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, I2 where )
boost::signals2::detail::assign_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void assign_impl( I begin, I end, I2 where, const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, I2 where, const boost::false_type& )
boost::signals2::detail::assign_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void assign_impl( I begin, I end, I2 where, const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, I2 where, const boost::true_type& )
boost::signals2::detail::auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer( ForwardIterator begin_arg, ForwardIterator end_arg )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( ForwardIterator begin_arg, ForwardIterator end_arg )
boost::signals2::detail::auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer( ForwardIterator begin_arg, ForwardIterator end_arg,$/;"	f	namespace:boost::signals2::detail	access:public	signature:( ForwardIterator begin_arg, ForwardIterator end_arg, const allocator_type& a )
boost::signals2::detail::auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer( const auto_buffer& r )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const auto_buffer& r )
boost::signals2::detail::auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer( size_type capacity_arg, const allocator_type& a )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type capacity_arg, const allocator_type& a )
boost::signals2::detail::auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer( size_type size_arg, optimized_const_reference init_value )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type size_arg, optimized_const_reference init_value )
boost::signals2::detail::auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer( size_type size_arg, optimized_const_reference init_value,$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type size_arg, optimized_const_reference init_value, const allocator_type& a )
boost::signals2::detail::auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        explicit auto_buffer( size_type capacity_arg )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type capacity_arg )
boost::signals2::detail::auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    class auto_buffer : Allocator$/;"	c	namespace:boost::signals2::detail	inherits:Allocator
boost::signals2::detail::auto_buffer::BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        BOOST_STATIC_CONSTANT( bool, is_stack_buffer_empty = N == 0u );$/;"	p	class:boost::signals2::detail::auto_buffer	access:private	signature:( bool, is_stack_buffer_empty = N == 0u )
boost::signals2::detail::auto_buffer::N	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        enum { N = auto_buffer_detail::$/;"	e	enum:boost::signals2::detail::auto_buffer::__anon2
boost::signals2::detail::auto_buffer::allocator_pointer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef typename Allocator::pointer              allocator_pointer;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer::allocator_type	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef Allocator                                allocator_type;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer::const_iterator	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef const_pointer                            const_iterator;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer::const_pointer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef const T*                                 const_pointer;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer::const_reference	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef const T&                                 const_reference;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer::const_reverse_iterator	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef boost::reverse_iterator<const_iterator>  const_reverse_iterator;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer::difference_type	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef typename Allocator::difference_type      difference_type;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer::iterator	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef pointer                                  iterator;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer::local_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^                                                         local_buffer;$/;"	t	class:boost::signals2::detail::auto_buffer	access:private
boost::signals2::detail::auto_buffer::pointer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef T*                                       pointer;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer::reference	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef T&                                       reference;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer::reverse_iterator	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef boost::reverse_iterator<iterator>        reverse_iterator;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer::size_type	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef typename Allocator::size_type            size_type;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer::value_type	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef T                                        value_type;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
boost::signals2::detail::auto_buffer_destroy	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void auto_buffer_destroy( const boost::false_type& x )$/;"	f	namespace:boost::signals2::detail	signature:( const boost::false_type& x )
boost::signals2::detail::auto_buffer_destroy	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void auto_buffer_destroy( const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( const boost::true_type& )
boost::signals2::detail::auto_buffer_destroy	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void auto_buffer_destroy( pointer where )$/;"	f	namespace:boost::signals2::detail	signature:( pointer where )
boost::signals2::detail::auto_buffer_destroy	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void auto_buffer_destroy( pointer where, const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( pointer where, const boost::false_type& )
boost::signals2::detail::auto_buffer_destroy	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void auto_buffer_destroy( pointer, const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( pointer, const boost::true_type& )
boost::signals2::detail::auto_buffer_detail	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    namespace auto_buffer_detail$/;"	n	namespace:boost::signals2::detail
boost::signals2::detail::auto_buffer_detail::compute_buffer_objects	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        struct compute_buffer_objects$/;"	s	namespace:boost::signals2::detail::auto_buffer_detail
boost::signals2::detail::auto_buffer_detail::compute_buffer_objects	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        struct compute_buffer_objects< store_n_bytes<N>, T >$/;"	s	namespace:boost::signals2::detail::auto_buffer_detail
boost::signals2::detail::auto_buffer_detail::compute_buffer_objects::BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            BOOST_STATIC_CONSTANT( unsigned, value = N \/ sizeof(T) );$/;"	p	struct:boost::signals2::detail::auto_buffer_detail::compute_buffer_objects	access:public	signature:( unsigned, value = N / sizeof(T) )
boost::signals2::detail::auto_buffer_detail::compute_buffer_objects::BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            BOOST_STATIC_CONSTANT( unsigned, value = Policy::value );$/;"	p	struct:boost::signals2::detail::auto_buffer_detail::compute_buffer_objects	access:public	signature:( unsigned, value = Policy::value )
boost::signals2::detail::auto_buffer_detail::compute_buffer_size	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        struct compute_buffer_size$/;"	s	namespace:boost::signals2::detail::auto_buffer_detail
boost::signals2::detail::auto_buffer_detail::compute_buffer_size	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        struct compute_buffer_size< store_n_bytes<N>, T >$/;"	s	namespace:boost::signals2::detail::auto_buffer_detail
boost::signals2::detail::auto_buffer_detail::compute_buffer_size::BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            BOOST_STATIC_CONSTANT( unsigned, value = N );$/;"	p	struct:boost::signals2::detail::auto_buffer_detail::compute_buffer_size	access:public	signature:( unsigned, value = N )
boost::signals2::detail::auto_buffer_detail::compute_buffer_size::BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            BOOST_STATIC_CONSTANT( unsigned, value = Policy::value * sizeof(T) );$/;"	p	struct:boost::signals2::detail::auto_buffer_detail::compute_buffer_size	access:public	signature:( unsigned, value = Policy::value * sizeof(T) )
boost::signals2::detail::back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        optimized_const_reference back() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        reference back()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::back_ungrouped_slots	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      enum slot_meta_group {front_ungrouped_slots, grouped_slots, back_ungrouped_slots};$/;"	e	enum:boost::signals2::detail::slot_meta_group
boost::signals2::detail::begin	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_iterator begin() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::begin	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        iterator begin()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::buffer_	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        pointer      buffer_;$/;"	m	namespace:boost::signals2::detail	access:private
boost::signals2::detail::call_with_tuple_args	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        class call_with_tuple_args$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::call_with_tuple_args::m_invoke	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^          R m_invoke(T *, Func &func, unsigned_meta_array<indices...>, BOOST_SIGNALS2_TUPLE<Args...> args) const$/;"	f	class:boost::signals2::detail::call_with_tuple_args	access:private	signature:(T *, Func &func, unsigned_meta_array<indices...>, BOOST_SIGNALS2_TUPLE<Args...> args) const
boost::signals2::detail::call_with_tuple_args::m_invoke	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^          R m_invoke(void *, Func &func, unsigned_meta_array<indices...>, BOOST_SIGNALS2_TUPLE<Args...> args) const$/;"	f	class:boost::signals2::detail::call_with_tuple_args	access:private	signature:(void *, Func &func, unsigned_meta_array<indices...>, BOOST_SIGNALS2_TUPLE<Args...> args) const
boost::signals2::detail::call_with_tuple_args::operator ()	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^          R operator()(Func &func, BOOST_SIGNALS2_TUPLE<Args...> args) const$/;"	f	class:boost::signals2::detail::call_with_tuple_args	access:public	signature:(Func &func, BOOST_SIGNALS2_TUPLE<Args...> args) const
boost::signals2::detail::call_with_tuple_args::result_type	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        typedef R result_type;$/;"	t	class:boost::signals2::detail::call_with_tuple_args	access:public
boost::signals2::detail::capacity	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        size_type capacity() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::cbegin	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_iterator cbegin() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::cend	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_iterator cend() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::clear	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void clear()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::combiner_invoker	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      template<> class combiner_invoker<void>$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::combiner_invoker	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      template<typename R> class combiner_invoker$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::combiner_invoker::operator ()	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^          result_type operator()(Combiner &combiner,$/;"	f	class:boost::signals2::detail::combiner_invoker	access:public	signature:(Combiner &combiner, InputIterator first, InputIterator last) const
boost::signals2::detail::combiner_invoker::result_type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^        typedef R result_type;$/;"	t	class:boost::signals2::detail::combiner_invoker	access:public
boost::signals2::detail::combiner_invoker::result_type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^        typedef result_type_wrapper<void>::type result_type;$/;"	t	class:boost::signals2::detail::combiner_invoker	access:public
boost::signals2::detail::connection_body	/usr/include/boost/signals2/connection.hpp	/^      class connection_body: public connection_body_base$/;"	c	namespace:boost::signals2::detail	inherits:connection_body_base
boost::signals2::detail::connection_body::_group_key	/usr/include/boost/signals2/connection.hpp	/^        GroupKey _group_key;$/;"	m	class:boost::signals2::detail::connection_body	access:private
boost::signals2::detail::connection_body::_mutex	/usr/include/boost/signals2/connection.hpp	/^        mutable mutex_type _mutex;$/;"	m	class:boost::signals2::detail::connection_body	access:private
boost::signals2::detail::connection_body::connected	/usr/include/boost/signals2/connection.hpp	/^        virtual bool connected() const$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:() const
boost::signals2::detail::connection_body::connection_body	/usr/include/boost/signals2/connection.hpp	/^        connection_body(const SlotType &slot_in):$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:(const SlotType &slot_in)
boost::signals2::detail::connection_body::group_key	/usr/include/boost/signals2/connection.hpp	/^        const GroupKey& group_key() const {return _group_key;}$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:() const
boost::signals2::detail::connection_body::lock	/usr/include/boost/signals2/connection.hpp	/^        virtual void lock()$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:()
boost::signals2::detail::connection_body::mutex_type	/usr/include/boost/signals2/connection.hpp	/^        typedef Mutex mutex_type;$/;"	t	class:boost::signals2::detail::connection_body	access:public
boost::signals2::detail::connection_body::nolock_grab_tracked_objects	/usr/include/boost/signals2/connection.hpp	/^          void nolock_grab_tracked_objects(OutputIterator inserter) const$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:(OutputIterator inserter) const
boost::signals2::detail::connection_body::nolock_slot_expired	/usr/include/boost/signals2/connection.hpp	/^        bool nolock_slot_expired() const$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:() const
boost::signals2::detail::connection_body::set_group_key	/usr/include/boost/signals2/connection.hpp	/^        void set_group_key(const GroupKey &key) {_group_key = key;}$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:(const GroupKey &key)
boost::signals2::detail::connection_body::slot	/usr/include/boost/signals2/connection.hpp	/^        SlotType slot;$/;"	m	class:boost::signals2::detail::connection_body	access:public
boost::signals2::detail::connection_body::unlock	/usr/include/boost/signals2/connection.hpp	/^        virtual void unlock()$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:()
boost::signals2::detail::connection_body::~connection_body	/usr/include/boost/signals2/connection.hpp	/^        virtual ~connection_body() {}$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:()
boost::signals2::detail::connection_body_base	/usr/include/boost/signals2/connection.hpp	/^      class connection_body_base$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::connection_body_base::_connected	/usr/include/boost/signals2/connection.hpp	/^        mutable bool _connected;$/;"	m	class:boost::signals2::detail::connection_body_base	access:protected
boost::signals2::detail::connection_body_base::_weak_blocker	/usr/include/boost/signals2/connection.hpp	/^        weak_ptr<void> _weak_blocker;$/;"	m	class:boost::signals2::detail::connection_body_base	access:protected
boost::signals2::detail::connection_body_base::blocked	/usr/include/boost/signals2/connection.hpp	/^        bool blocked() const$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:() const
boost::signals2::detail::connection_body_base::connected	/usr/include/boost/signals2/connection.hpp	/^        virtual bool connected() const = 0;$/;"	p	class:boost::signals2::detail::connection_body_base	access:public	signature:() const
boost::signals2::detail::connection_body_base::connection_body_base	/usr/include/boost/signals2/connection.hpp	/^        connection_body_base():$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:()
boost::signals2::detail::connection_body_base::disconnect	/usr/include/boost/signals2/connection.hpp	/^        void disconnect()$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:()
boost::signals2::detail::connection_body_base::get_blocker	/usr/include/boost/signals2/connection.hpp	/^        shared_ptr<void> get_blocker()$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:()
boost::signals2::detail::connection_body_base::lock	/usr/include/boost/signals2/connection.hpp	/^        virtual void lock() = 0;$/;"	p	class:boost::signals2::detail::connection_body_base	access:public	signature:()
boost::signals2::detail::connection_body_base::nolock_disconnect	/usr/include/boost/signals2/connection.hpp	/^        void nolock_disconnect()$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:()
boost::signals2::detail::connection_body_base::nolock_nograb_blocked	/usr/include/boost/signals2/connection.hpp	/^        bool nolock_nograb_blocked() const$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:() const
boost::signals2::detail::connection_body_base::nolock_nograb_connected	/usr/include/boost/signals2/connection.hpp	/^        bool nolock_nograb_connected() const {return _connected;}$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:() const
boost::signals2::detail::connection_body_base::unlock	/usr/include/boost/signals2/connection.hpp	/^        virtual void unlock() = 0;$/;"	p	class:boost::signals2::detail::connection_body_base	access:public	signature:()
boost::signals2::detail::connection_body_base::~connection_body_base	/usr/include/boost/signals2/connection.hpp	/^        virtual ~connection_body_base() {}$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:()
boost::signals2::detail::copy_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void copy_impl( I begin, I end, pointer where )$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, pointer where )
boost::signals2::detail::copy_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void copy_impl( I begin, I end, pointer where, std::bidirectional_iterator_tag )$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, pointer where, std::bidirectional_iterator_tag )
boost::signals2::detail::copy_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void copy_impl( I begin, I end, pointer where, std::random_access_iterator_tag )$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, pointer where, std::random_access_iterator_tag )
boost::signals2::detail::copy_rai	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void copy_rai( I begin, I end,$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, pointer where, const boost::integral_constant<bool, b>& )
boost::signals2::detail::copy_rai	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void copy_rai( const T* begin, const T* end,$/;"	f	namespace:boost::signals2::detail	signature:( const T* begin, const T* end, pointer where, const boost::true_type& )
boost::signals2::detail::crbegin	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_reverse_iterator crbegin() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::crend	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_reverse_iterator crend() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::data	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_pointer data() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::data	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        pointer data()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::deallocate	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void deallocate( pointer where, size_type capacity_arg )$/;"	f	namespace:boost::signals2::detail	signature:( pointer where, size_type capacity_arg )
boost::signals2::detail::deconstruct_deleter	/usr/include/boost/signals2/deconstruct.hpp	/^template< class T > class deconstruct_deleter$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::deconstruct_deleter::address	/usr/include/boost/signals2/deconstruct.hpp	/^    void * address()$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:public	signature:()
boost::signals2::detail::deconstruct_deleter::deconstruct_deleter	/usr/include/boost/signals2/deconstruct.hpp	/^    deconstruct_deleter(): initialized_( false )$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:public	signature:()
boost::signals2::detail::deconstruct_deleter::deconstruct_deleter	/usr/include/boost/signals2/deconstruct.hpp	/^    deconstruct_deleter(const deconstruct_deleter &): initialized_( false )$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:public	signature:(const deconstruct_deleter &)
boost::signals2::detail::deconstruct_deleter::destroy	/usr/include/boost/signals2/deconstruct.hpp	/^    void destroy()$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:private	signature:()
boost::signals2::detail::deconstruct_deleter::initialized_	/usr/include/boost/signals2/deconstruct.hpp	/^    bool initialized_;$/;"	m	class:boost::signals2::detail::deconstruct_deleter	access:private
boost::signals2::detail::deconstruct_deleter::operator ()	/usr/include/boost/signals2/deconstruct.hpp	/^    void operator()( T * )$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:public	signature:( T * )
boost::signals2::detail::deconstruct_deleter::set_initialized	/usr/include/boost/signals2/deconstruct.hpp	/^    void set_initialized()$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:public	signature:()
boost::signals2::detail::deconstruct_deleter::storage_	/usr/include/boost/signals2/deconstruct.hpp	/^    storage_type storage_;$/;"	m	class:boost::signals2::detail::deconstruct_deleter	access:private
boost::signals2::detail::deconstruct_deleter::storage_type	/usr/include/boost/signals2/deconstruct.hpp	/^    typedef typename sp_aligned_storage< sizeof( T ), ::boost::alignment_of< T >::value >::type storage_type;$/;"	t	class:boost::signals2::detail::deconstruct_deleter	access:private
boost::signals2::detail::deconstruct_deleter::~deconstruct_deleter	/usr/include/boost/signals2/deconstruct.hpp	/^    ~deconstruct_deleter()$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:public	signature:()
boost::signals2::detail::default_grow_policy	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    struct default_grow_policy$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::default_grow_policy::new_capacity	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static SizeType new_capacity( SizeType capacity )$/;"	f	struct:boost::signals2::detail::default_grow_policy	access:public	signature:( SizeType capacity )
boost::signals2::detail::default_grow_policy::should_shrink	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static bool should_shrink( SizeType size, SizeType capacity )$/;"	f	struct:boost::signals2::detail::default_grow_policy	access:public	signature:( SizeType size, SizeType capacity )
boost::signals2::detail::destroy_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void destroy_back_n( size_type n )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n )
boost::signals2::detail::destroy_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void destroy_back_n( size_type n, const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n, const boost::false_type& )
boost::signals2::detail::destroy_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void destroy_back_n( size_type n, const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n, const boost::true_type& )
boost::signals2::detail::do_postconstruct	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^      extern inline void do_postconstruct(...)$/;"	f	namespace:boost::signals2::detail	signature:(....)
boost::signals2::detail::do_postconstruct	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^      extern inline void do_postconstruct(const postconstructible *ptr)$/;"	f	namespace:boost::signals2::detail	signature:(const postconstructible *ptr)
boost::signals2::detail::do_postconstruct	/usr/include/boost/signals2/postconstructible.hpp	/^      void do_postconstruct(const boost::signals2::postconstructible_adl_barrier::postconstructible *ptr);$/;"	p	namespace:boost::signals2::detail	signature:(const boost::signals2::postconstructible_adl_barrier::postconstructible *ptr)
boost::signals2::detail::do_predestruct	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^      extern inline void do_predestruct(...)$/;"	f	namespace:boost::signals2::detail	signature:(....)
boost::signals2::detail::do_predestruct	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^      extern inline void do_predestruct(const predestructible *ptr)$/;"	f	namespace:boost::signals2::detail	signature:(const predestructible *ptr)
boost::signals2::detail::does_nothing	/usr/include/boost/signals2/detail/null_output_iterator.hpp	/^      class does_nothing$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::does_nothing::operator ()	/usr/include/boost/signals2/detail/null_output_iterator.hpp	/^          void operator()(const T&) const$/;"	f	class:boost::signals2::detail::does_nothing	access:public	signature:(const T&) const
boost::signals2::detail::empty	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        bool empty() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::end	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_iterator end() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::end	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        iterator end()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::erase	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        iterator erase( const_iterator from, const_iterator to )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const_iterator from, const_iterator to )
boost::signals2::detail::erase	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        iterator erase( const_iterator where )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const_iterator where )
boost::signals2::detail::expired_weak_ptr_visitor	/usr/include/boost/signals2/slot_base.hpp	/^      class expired_weak_ptr_visitor$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::expired_weak_ptr_visitor::operator ()	/usr/include/boost/signals2/slot_base.hpp	/^        bool operator()(const WeakPtr &wp) const$/;"	f	class:boost::signals2::detail::expired_weak_ptr_visitor	access:public	signature:(const WeakPtr &wp) const
boost::signals2::detail::expired_weak_ptr_visitor::result_type	/usr/include/boost/signals2/slot_base.hpp	/^        typedef bool result_type;$/;"	t	class:boost::signals2::detail::expired_weak_ptr_visitor	access:public
boost::signals2::detail::extended_signature	/usr/include/boost/signals2/detail/signal_template.hpp	/^        class extended_signature: public variadic_extended_signature<Signature>$/;"	c	namespace:boost::signals2::detail	inherits:variadic_extended_signature
boost::signals2::detail::extended_signature	/usr/include/boost/signals2/detail/signal_template.hpp	/^        class extended_signature<BOOST_SIGNALS2_NUM_ARGS, Signature>$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::extended_signature::function_type	/usr/include/boost/signals2/detail/signal_template.hpp	/^        typedef function<BOOST_SIGNALS2_EXT_SIGNATURE(BOOST_SIGNALS2_NUM_ARGS, Signature)> function_type;$/;"	t	class:boost::signals2::detail::extended_signature	access:public
boost::signals2::detail::foreign_shared_ptr_impl	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      class foreign_shared_ptr_impl: public foreign_shared_ptr_impl_base$/;"	c	namespace:boost::signals2::detail	inherits:foreign_shared_ptr_impl_base
boost::signals2::detail::foreign_shared_ptr_impl::_p	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        FSP _p;$/;"	m	class:boost::signals2::detail::foreign_shared_ptr_impl	access:private
boost::signals2::detail::foreign_shared_ptr_impl::clone	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual foreign_shared_ptr_impl * clone() const$/;"	f	class:boost::signals2::detail::foreign_shared_ptr_impl	access:public	signature:() const
boost::signals2::detail::foreign_shared_ptr_impl::foreign_shared_ptr_impl	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_shared_ptr_impl(const FSP &p): _p(p)$/;"	f	class:boost::signals2::detail::foreign_shared_ptr_impl	access:public	signature:(const FSP &p)
boost::signals2::detail::foreign_shared_ptr_impl::get	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual void * get() const$/;"	f	class:boost::signals2::detail::foreign_shared_ptr_impl	access:public	signature:() const
boost::signals2::detail::foreign_shared_ptr_impl_base	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      struct foreign_shared_ptr_impl_base$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::foreign_shared_ptr_impl_base::clone	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual foreign_shared_ptr_impl_base * clone() const = 0;$/;"	p	struct:boost::signals2::detail::foreign_shared_ptr_impl_base	access:public	signature:() const
boost::signals2::detail::foreign_shared_ptr_impl_base::get	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual void* get() const = 0;$/;"	p	struct:boost::signals2::detail::foreign_shared_ptr_impl_base	access:public	signature:() const
boost::signals2::detail::foreign_shared_ptr_impl_base::~foreign_shared_ptr_impl_base	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual ~foreign_shared_ptr_impl_base() {}$/;"	f	struct:boost::signals2::detail::foreign_shared_ptr_impl_base	access:public	signature:()
boost::signals2::detail::foreign_void_shared_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      class foreign_void_shared_ptr$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::foreign_void_shared_ptr::_p	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_shared_ptr_impl_base *_p;$/;"	m	class:boost::signals2::detail::foreign_void_shared_ptr	access:private
boost::signals2::detail::foreign_void_shared_ptr::foreign_void_shared_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        explicit foreign_void_shared_ptr(const FSP &fsp):$/;"	f	class:boost::signals2::detail::foreign_void_shared_ptr	access:public	signature:(const FSP &fsp)
boost::signals2::detail::foreign_void_shared_ptr::foreign_void_shared_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_shared_ptr():$/;"	f	class:boost::signals2::detail::foreign_void_shared_ptr	access:public	signature:()
boost::signals2::detail::foreign_void_shared_ptr::foreign_void_shared_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_shared_ptr(const foreign_void_shared_ptr &other):$/;"	f	class:boost::signals2::detail::foreign_void_shared_ptr	access:public	signature:(const foreign_void_shared_ptr &other)
boost::signals2::detail::foreign_void_shared_ptr::operator =	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_shared_ptr & operator=(const foreign_void_shared_ptr &other)$/;"	f	class:boost::signals2::detail::foreign_void_shared_ptr	access:public	signature:(const foreign_void_shared_ptr &other)
boost::signals2::detail::foreign_void_shared_ptr::swap	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        void swap(foreign_void_shared_ptr &other)$/;"	f	class:boost::signals2::detail::foreign_void_shared_ptr	access:public	signature:(foreign_void_shared_ptr &other)
boost::signals2::detail::foreign_void_shared_ptr::~foreign_void_shared_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        ~foreign_void_shared_ptr()$/;"	f	class:boost::signals2::detail::foreign_void_shared_ptr	access:public	signature:()
boost::signals2::detail::foreign_void_weak_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      class foreign_void_weak_ptr$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::foreign_void_weak_ptr::_p	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        boost::scoped_ptr<foreign_weak_ptr_impl_base> _p;$/;"	m	class:boost::signals2::detail::foreign_void_weak_ptr	access:private
boost::signals2::detail::foreign_void_weak_ptr::expired	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        bool expired() const$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:() const
boost::signals2::detail::foreign_void_weak_ptr::foreign_void_weak_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        explicit foreign_void_weak_ptr(const FWP &fwp):$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:(const FWP &fwp)
boost::signals2::detail::foreign_void_weak_ptr::foreign_void_weak_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_weak_ptr()$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:()
boost::signals2::detail::foreign_void_weak_ptr::foreign_void_weak_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_weak_ptr(const foreign_void_weak_ptr &other):$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:(const foreign_void_weak_ptr &other)
boost::signals2::detail::foreign_void_weak_ptr::lock	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_shared_ptr lock() const$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:() const
boost::signals2::detail::foreign_void_weak_ptr::operator =	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_weak_ptr & operator=(const foreign_void_weak_ptr &other)$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:(const foreign_void_weak_ptr &other)
boost::signals2::detail::foreign_void_weak_ptr::swap	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        void swap(foreign_void_weak_ptr &other)$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:(foreign_void_weak_ptr &other)
boost::signals2::detail::foreign_weak_ptr_impl	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      class foreign_weak_ptr_impl: public foreign_weak_ptr_impl_base$/;"	c	namespace:boost::signals2::detail	inherits:foreign_weak_ptr_impl_base
boost::signals2::detail::foreign_weak_ptr_impl::_p	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        FWP _p;$/;"	m	class:boost::signals2::detail::foreign_weak_ptr_impl	access:private
boost::signals2::detail::foreign_weak_ptr_impl::clone	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual foreign_weak_ptr_impl * clone() const$/;"	f	class:boost::signals2::detail::foreign_weak_ptr_impl	access:public	signature:() const
boost::signals2::detail::foreign_weak_ptr_impl::expired	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual bool expired() const$/;"	f	class:boost::signals2::detail::foreign_weak_ptr_impl	access:public	signature:() const
boost::signals2::detail::foreign_weak_ptr_impl::foreign_weak_ptr_impl	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_weak_ptr_impl(const FWP &p): _p(p)$/;"	f	class:boost::signals2::detail::foreign_weak_ptr_impl	access:public	signature:(const FWP &p)
boost::signals2::detail::foreign_weak_ptr_impl::lock	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual foreign_void_shared_ptr lock() const$/;"	f	class:boost::signals2::detail::foreign_weak_ptr_impl	access:public	signature:() const
boost::signals2::detail::foreign_weak_ptr_impl_base	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      struct foreign_weak_ptr_impl_base$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::foreign_weak_ptr_impl_base::clone	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual foreign_weak_ptr_impl_base * clone() const = 0;$/;"	p	struct:boost::signals2::detail::foreign_weak_ptr_impl_base	access:public	signature:() const
boost::signals2::detail::foreign_weak_ptr_impl_base::expired	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual bool expired() const = 0;$/;"	p	struct:boost::signals2::detail::foreign_weak_ptr_impl_base	access:public	signature:() const
boost::signals2::detail::foreign_weak_ptr_impl_base::lock	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual foreign_void_shared_ptr lock() const = 0;$/;"	p	struct:boost::signals2::detail::foreign_weak_ptr_impl_base	access:public	signature:() const
boost::signals2::detail::foreign_weak_ptr_impl_base::~foreign_weak_ptr_impl_base	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual ~foreign_weak_ptr_impl_base() {}$/;"	f	struct:boost::signals2::detail::foreign_weak_ptr_impl_base	access:public	signature:()
boost::signals2::detail::front	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        optimized_const_reference front() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::front	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        reference front()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::front_ungrouped_slots	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      enum slot_meta_group {front_ungrouped_slots, grouped_slots, back_ungrouped_slots};$/;"	e	enum:boost::signals2::detail::slot_meta_group
boost::signals2::detail::full	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        bool full() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::get_allocator	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        allocator_type& get_allocator()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::get_allocator	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const allocator_type& get_allocator() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::get_invocable_slot	/usr/include/boost/signals2/detail/signals_common.hpp	/^      get_invocable_slot(const F &signal, signal_tag)$/;"	f	namespace:boost::signals2::detail	signature:(const F &signal, signal_tag)
boost::signals2::detail::get_invocable_slot	/usr/include/boost/signals2/detail/signals_common.hpp	/^      get_invocable_slot(const F& f, reference_tag)$/;"	f	namespace:boost::signals2::detail	signature:(const F& f, reference_tag)
boost::signals2::detail::get_invocable_slot	/usr/include/boost/signals2/detail/signals_common.hpp	/^      get_invocable_slot(const F& f, value_tag)$/;"	f	namespace:boost::signals2::detail	signature:(const F& f, value_tag)
boost::signals2::detail::get_slot_tag	/usr/include/boost/signals2/detail/signals_common.hpp	/^      class get_slot_tag {$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::get_slot_tag::signal_or_value	/usr/include/boost/signals2/detail/signals_common.hpp	/^          signal_tag, value_tag>::type signal_or_value;$/;"	t	class:boost::signals2::detail::get_slot_tag	access:private
boost::signals2::detail::get_slot_tag::type	/usr/include/boost/signals2/detail/signals_common.hpp	/^                            signal_or_value>::type type;$/;"	t	class:boost::signals2::detail::get_slot_tag	access:public
boost::signals2::detail::group_key	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      struct group_key$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::group_key::type	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef std::pair<enum slot_meta_group, boost::optional<Group> > type;$/;"	t	struct:boost::signals2::detail::group_key	access:public
boost::signals2::detail::group_key_less	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      class group_key_less$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::group_key_less::_group_compare	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        GroupCompare _group_compare;$/;"	m	class:boost::signals2::detail::group_key_less	access:private
boost::signals2::detail::group_key_less::group_key_less	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        group_key_less()$/;"	f	class:boost::signals2::detail::group_key_less	access:public	signature:()
boost::signals2::detail::group_key_less::group_key_less	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        group_key_less(const GroupCompare &group_compare): _group_compare(group_compare)$/;"	f	class:boost::signals2::detail::group_key_less	access:public	signature:(const GroupCompare &group_compare)
boost::signals2::detail::group_key_less::operator ()	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        bool operator ()(const typename group_key<Group>::type &key1, const typename group_key<Group>::type &key2) const$/;"	f	class:boost::signals2::detail::group_key_less	access:public	signature:(const typename group_key<Group>::type &key1, const typename group_key<Group>::type &key2) const
boost::signals2::detail::grouped_list	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      class grouped_list$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::grouped_list::_group_key_compare	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        group_key_compare_type _group_key_compare;$/;"	m	class:boost::signals2::detail::grouped_list	access:private
boost::signals2::detail::grouped_list::_group_map	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        map_type _group_map;$/;"	m	class:boost::signals2::detail::grouped_list	access:private
boost::signals2::detail::grouped_list::_list	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        list_type _list;$/;"	m	class:boost::signals2::detail::grouped_list	access:private
boost::signals2::detail::grouped_list::begin	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        iterator begin()$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:()
boost::signals2::detail::grouped_list::clear	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        void clear()$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:()
boost::signals2::detail::grouped_list::const_iterator	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef typename list_type::const_iterator const_iterator;$/;"	t	class:boost::signals2::detail::grouped_list	access:public
boost::signals2::detail::grouped_list::const_map_iterator	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef typename map_type::const_iterator const_map_iterator;$/;"	t	class:boost::signals2::detail::grouped_list	access:private
boost::signals2::detail::grouped_list::end	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        iterator end()$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:()
boost::signals2::detail::grouped_list::erase	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        iterator erase(const group_key_type &key, const iterator &it)$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_type &key, const iterator &it)
boost::signals2::detail::grouped_list::erase	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        void erase(const group_key_type &key)$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_type &key)
boost::signals2::detail::grouped_list::get_list_iterator	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        const_iterator get_list_iterator(const const_map_iterator &map_it) const$/;"	f	class:boost::signals2::detail::grouped_list	access:private	signature:(const const_map_iterator &map_it) const
boost::signals2::detail::grouped_list::get_list_iterator	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        iterator get_list_iterator(const const_map_iterator &map_it)$/;"	f	class:boost::signals2::detail::grouped_list	access:private	signature:(const const_map_iterator &map_it)
boost::signals2::detail::grouped_list::group_key_compare_type	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef group_key_less<Group, GroupCompare> group_key_compare_type;$/;"	t	class:boost::signals2::detail::grouped_list	access:public
boost::signals2::detail::grouped_list::group_key_type	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef typename group_key<Group>::type group_key_type;$/;"	t	class:boost::signals2::detail::grouped_list	access:public
boost::signals2::detail::grouped_list::grouped_list	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        grouped_list(const group_key_compare_type &group_key_compare):$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_compare_type &group_key_compare)
boost::signals2::detail::grouped_list::grouped_list	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        grouped_list(const grouped_list &other): _list(other._list),$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const grouped_list &other)
boost::signals2::detail::grouped_list::iterator	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef typename list_type::iterator iterator;$/;"	t	class:boost::signals2::detail::grouped_list	access:public
boost::signals2::detail::grouped_list::list_type	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef std::list<ValueType> list_type;$/;"	t	class:boost::signals2::detail::grouped_list	access:private
boost::signals2::detail::grouped_list::lower_bound	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        iterator lower_bound(const group_key_type &key)$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_type &key)
boost::signals2::detail::grouped_list::m_insert	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        void m_insert(const map_iterator &map_it, const group_key_type &key, const ValueType &value)$/;"	f	class:boost::signals2::detail::grouped_list	access:private	signature:(const map_iterator &map_it, const group_key_type &key, const ValueType &value)
boost::signals2::detail::grouped_list::map_iterator	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef typename map_type::iterator map_iterator;$/;"	t	class:boost::signals2::detail::grouped_list	access:private
boost::signals2::detail::grouped_list::map_type	/usr/include/boost/signals2/detail/slot_groups.hpp	/^          > map_type;$/;"	t	class:boost::signals2::detail::grouped_list	access:private
boost::signals2::detail::grouped_list::operator =	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        grouped_list& operator=(const grouped_list &other);$/;"	p	class:boost::signals2::detail::grouped_list	access:private	signature:(const grouped_list &other)
boost::signals2::detail::grouped_list::push_back	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        void push_back(const group_key_type &key, const ValueType &value)$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_type &key, const ValueType &value)
boost::signals2::detail::grouped_list::push_front	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        void push_front(const group_key_type &key, const ValueType &value)$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_type &key, const ValueType &value)
boost::signals2::detail::grouped_list::upper_bound	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        iterator upper_bound(const group_key_type &key)$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_type &key)
boost::signals2::detail::grouped_list::weakly_equivalent	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        bool weakly_equivalent(const group_key_type &arg1, const group_key_type &arg2)$/;"	f	class:boost::signals2::detail::grouped_list	access:private	signature:(const group_key_type &arg1, const group_key_type &arg2)
boost::signals2::detail::grouped_slots	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      enum slot_meta_group {front_ungrouped_slots, grouped_slots, back_ungrouped_slots};$/;"	e	enum:boost::signals2::detail::slot_meta_group
boost::signals2::detail::grow_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void grow_back( size_type n )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n )
boost::signals2::detail::grow_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void grow_back( size_type n, const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n, const boost::false_type& )
boost::signals2::detail::grow_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void grow_back( size_type n, const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n, const boost::true_type& )
boost::signals2::detail::grow_back_one	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void grow_back_one( const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( const boost::false_type& )
boost::signals2::detail::grow_back_one	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void grow_back_one( const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( const boost::true_type& )
boost::signals2::detail::grow_back_one	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void grow_back_one()$/;"	f	namespace:boost::signals2::detail	signature:()
boost::signals2::detail::insert	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        iterator insert( const_iterator before, optimized_const_reference x ) \/\/ basic$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const_iterator before, optimized_const_reference x )
boost::signals2::detail::insert	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void insert( const_iterator before, size_type n,$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const_iterator before, size_type n, optimized_const_reference x )
boost::signals2::detail::insert	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void insert( const_iterator before,$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const_iterator before, ForwardIterator begin_arg, ForwardIterator end_arg )
boost::signals2::detail::insert_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void insert_impl( const_iterator before, I begin_arg, I end_arg,$/;"	f	namespace:boost::signals2::detail	signature:( const_iterator before, I begin_arg, I end_arg, std::forward_iterator_tag )
boost::signals2::detail::insert_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void insert_impl( const_iterator before, I begin_arg, I end_arg,$/;"	f	namespace:boost::signals2::detail	signature:( const_iterator before, I begin_arg, I end_arg, std::input_iterator_tag )
boost::signals2::detail::is_on_stack	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        bool is_on_stack() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::is_signal	/usr/include/boost/signals2/detail/signals_common.hpp	/^      class is_signal: public mpl::bool_<is_base_of<signal_base, T>::value>$/;"	c	namespace:boost::signals2::detail	inherits:mpl::bool_
boost::signals2::detail::is_valid	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        bool is_valid() const \/\/ invariant$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::lock_weak_ptr_visitor	/usr/include/boost/signals2/slot_base.hpp	/^      class lock_weak_ptr_visitor$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::lock_weak_ptr_visitor::operator ()	/usr/include/boost/signals2/slot_base.hpp	/^        result_type operator()(const WeakPtr &wp) const$/;"	f	class:boost::signals2::detail::lock_weak_ptr_visitor	access:public	signature:(const WeakPtr &wp) const
boost::signals2::detail::lock_weak_ptr_visitor::result_type	/usr/include/boost/signals2/slot_base.hpp	/^        typedef void_shared_ptr_variant result_type;$/;"	t	class:boost::signals2::detail::lock_weak_ptr_visitor	access:public
boost::signals2::detail::make_unsigned_meta_array	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^      template<> class make_unsigned_meta_array<0>$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::make_unsigned_meta_array	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^      template<> class make_unsigned_meta_array<1>$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::make_unsigned_meta_array	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^      template<unsigned n> class make_unsigned_meta_array$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::make_unsigned_meta_array::type	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        typedef typename unsigned_meta_array_appender<typename make_unsigned_meta_array<n-1>::type, n - 1>::type type;$/;"	t	class:boost::signals2::detail::make_unsigned_meta_array	access:public
boost::signals2::detail::make_unsigned_meta_array::type	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        typedef unsigned_meta_array<0> type;$/;"	t	class:boost::signals2::detail::make_unsigned_meta_array	access:public
boost::signals2::detail::make_unsigned_meta_array::type	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        typedef unsigned_meta_array<> type;$/;"	t	class:boost::signals2::detail::make_unsigned_meta_array	access:public
boost::signals2::detail::members_	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        members_type members_;$/;"	m	namespace:boost::signals2::detail	access:private
boost::signals2::detail::members_type	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        struct members_type : storage \/* to enable EBO *\/$/;"	s	namespace:boost::signals2::detail	inherits:storage	access:private
boost::signals2::detail::members_type::address	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            void* address() const$/;"	f	struct:boost::signals2::detail::members_type	access:public	signature:() const
boost::signals2::detail::members_type::capacity_	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            size_type capacity_;$/;"	m	struct:boost::signals2::detail::members_type	access:public
boost::signals2::detail::members_type::members_type	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            members_type( size_type capacity )$/;"	f	struct:boost::signals2::detail::members_type	access:public	signature:( size_type capacity )
boost::signals2::detail::move_to_new_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        pointer move_to_new_buffer( size_type new_capacity, const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type new_capacity, const boost::false_type& )
boost::signals2::detail::move_to_new_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        pointer move_to_new_buffer( size_type new_capacity, const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type new_capacity, const boost::true_type& )
boost::signals2::detail::new_capacity_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        size_type new_capacity_impl( size_type n )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n )
boost::signals2::detail::nonvoid	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      struct nonvoid {$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::nonvoid	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      struct nonvoid<void> {$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::nonvoid::type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^        typedef R type;$/;"	t	struct:boost::signals2::detail::nonvoid	access:public
boost::signals2::detail::nonvoid::type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^        typedef void_type type;$/;"	t	struct:boost::signals2::detail::nonvoid	access:public
boost::signals2::detail::null_output_iterator	/usr/include/boost/signals2/detail/null_output_iterator.hpp	/^      typedef boost::function_output_iterator<does_nothing> null_output_iterator;$/;"	t	namespace:boost::signals2::detail
boost::signals2::detail::one_sided_swap	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void one_sided_swap( auto_buffer& temp ) \/\/ nothrow$/;"	f	namespace:boost::signals2::detail	signature:( auto_buffer& temp )
boost::signals2::detail::operator =	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer& operator=( const auto_buffer& r ) \/\/ basic$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const auto_buffer& r )
boost::signals2::detail::operator []	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        optimized_const_reference operator[]( size_type n ) const$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n ) const
boost::signals2::detail::operator []	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        reference operator[]( size_type n )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
boost::signals2::detail::pop_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void pop_back()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::pop_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void pop_back_n( size_type n )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
boost::signals2::detail::push_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void push_back( ForwardIterator begin_arg, ForwardIterator end_arg )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( ForwardIterator begin_arg, ForwardIterator end_arg )
boost::signals2::detail::push_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void push_back( optimized_const_reference x )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( optimized_const_reference x )
boost::signals2::detail::push_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void push_back()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::rbegin	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_reverse_iterator rbegin() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::rbegin	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        reverse_iterator rbegin()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::reference_tag	/usr/include/boost/signals2/detail/signals_common.hpp	/^      struct reference_tag {};$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::rend	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_reverse_iterator rend() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::rend	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        reverse_iterator rend()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::replace_slot_function	/usr/include/boost/signals2/detail/replace_slot_function.hpp	/^        ResultSlot replace_slot_function(const SlotIn &slot_in, const SlotFunction &fun)$/;"	f	namespace:boost::signals2::detail	signature:(const SlotIn &slot_in, const SlotFunction &fun)
boost::signals2::detail::reserve	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void reserve( size_type n ) \/\/ strong$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
boost::signals2::detail::reserve_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void reserve_impl( size_type new_capacity )$/;"	f	namespace:boost::signals2::detail	signature:( size_type new_capacity )
boost::signals2::detail::reserve_precisely	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void reserve_precisely( size_type n )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
boost::signals2::detail::result_type_wrapper	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      struct result_type_wrapper {$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::result_type_wrapper	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      struct result_type_wrapper<void> {$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::result_type_wrapper::type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^        typedef R type;$/;"	t	struct:boost::signals2::detail::result_type_wrapper	access:public
boost::signals2::detail::result_type_wrapper::type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^        typedef void_type type;$/;"	t	struct:boost::signals2::detail::result_type_wrapper	access:public
boost::signals2::detail::shrink_to_fit	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void shrink_to_fit()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::signalN	/usr/include/boost/signals2/detail/signal_template.hpp	/^      class signalN<BOOST_SIGNALS2_NUM_ARGS, Signature, Combiner, Group,$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::signalN::type	/usr/include/boost/signals2/detail/signal_template.hpp	/^          GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex> type;$/;"	t	class:boost::signals2::detail::signalN	access:public
boost::signals2::detail::signal_tag	/usr/include/boost/signals2/detail/signals_common.hpp	/^      struct signal_tag {};$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::size	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        size_type size() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
boost::signals2::detail::size_	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        size_type    size_;$/;"	m	namespace:boost::signals2::detail	access:private
boost::signals2::detail::slotN	/usr/include/boost/signals2/detail/slot_template.hpp	/^      class slotN<BOOST_SIGNALS2_NUM_ARGS, Signature, SlotFunction>$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::slotN::type	/usr/include/boost/signals2/detail/slot_template.hpp	/^          SlotFunction> type;$/;"	t	class:boost::signals2::detail::slotN	access:public
boost::signals2::detail::slot_call_iterator_cache	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        class slot_call_iterator_cache$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::slot_call_iterator_cache::connected_slot_count	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        unsigned connected_slot_count;$/;"	m	class:boost::signals2::detail::slot_call_iterator_cache	access:public
boost::signals2::detail::slot_call_iterator_cache::disconnected_slot_count	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        unsigned disconnected_slot_count;$/;"	m	class:boost::signals2::detail::slot_call_iterator_cache	access:public
boost::signals2::detail::slot_call_iterator_cache::f	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        Function f;$/;"	m	class:boost::signals2::detail::slot_call_iterator_cache	access:public
boost::signals2::detail::slot_call_iterator_cache::result	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        optional<ResultType> result;$/;"	m	class:boost::signals2::detail::slot_call_iterator_cache	access:public
boost::signals2::detail::slot_call_iterator_cache::slot_call_iterator_cache	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        slot_call_iterator_cache(const Function &f_arg):$/;"	f	class:boost::signals2::detail::slot_call_iterator_cache	access:public	signature:(const Function &f_arg)
boost::signals2::detail::slot_call_iterator_cache::tracked_ptrs	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        tracked_ptrs_type tracked_ptrs;$/;"	m	class:boost::signals2::detail::slot_call_iterator_cache	access:public
boost::signals2::detail::slot_call_iterator_cache::tracked_ptrs_type	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        typedef auto_buffer<void_shared_ptr_variant, store_n_objects<10> > tracked_ptrs_type;$/;"	t	class:boost::signals2::detail::slot_call_iterator_cache	access:public
boost::signals2::detail::slot_call_iterator_t	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^      class slot_call_iterator_t$/;"	c	namespace:boost::signals2::detail	inherits:boost::iterator_facade
boost::signals2::detail::slot_call_iterator_t::cache	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        slot_call_iterator_cache<result_type, Function> *cache;$/;"	m	class:boost::signals2::detail::slot_call_iterator_t	access:private
boost::signals2::detail::slot_call_iterator_t::callable_iter	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        mutable Iterator callable_iter;$/;"	m	class:boost::signals2::detail::slot_call_iterator_t	access:private
boost::signals2::detail::slot_call_iterator_t::dereference	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        dereference() const$/;"	f	class:boost::signals2::detail::slot_call_iterator_t	access:public	signature:() const
boost::signals2::detail::slot_call_iterator_t::end	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        Iterator end;$/;"	m	class:boost::signals2::detail::slot_call_iterator_t	access:private
boost::signals2::detail::slot_call_iterator_t::equal	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        bool equal(const slot_call_iterator_t& other) const$/;"	f	class:boost::signals2::detail::slot_call_iterator_t	access:public	signature:(const slot_call_iterator_t& other) const
boost::signals2::detail::slot_call_iterator_t::increment	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        void increment()$/;"	f	class:boost::signals2::detail::slot_call_iterator_t	access:public	signature:()
boost::signals2::detail::slot_call_iterator_t::inherited	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        inherited;$/;"	t	class:boost::signals2::detail::slot_call_iterator_t	access:private
boost::signals2::detail::slot_call_iterator_t::iter	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        mutable Iterator iter;$/;"	m	class:boost::signals2::detail::slot_call_iterator_t	access:private
boost::signals2::detail::slot_call_iterator_t::lock_next_callable	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        void lock_next_callable() const$/;"	f	class:boost::signals2::detail::slot_call_iterator_t	access:private	signature:() const
boost::signals2::detail::slot_call_iterator_t::lock_type	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        typedef unique_lock<connection_body_base> lock_type;$/;"	t	class:boost::signals2::detail::slot_call_iterator_t	access:private
boost::signals2::detail::slot_call_iterator_t::result_type	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        typedef typename Function::result_type result_type;$/;"	t	class:boost::signals2::detail::slot_call_iterator_t	access:private
boost::signals2::detail::slot_call_iterator_t::slot_call_iterator_t	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        slot_call_iterator_t(Iterator iter_in, Iterator end_in,$/;"	f	class:boost::signals2::detail::slot_call_iterator_t	access:public	signature:(Iterator iter_in, Iterator end_in, slot_call_iterator_cache<result_type, Function> &c)
boost::signals2::detail::slot_meta_group	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      enum slot_meta_group {front_ungrouped_slots, grouped_slots, back_ungrouped_slots};$/;"	g	namespace:boost::signals2::detail
boost::signals2::detail::sp_aligned_storage	/usr/include/boost/signals2/deconstruct.hpp	/^template< std::size_t N, std::size_t A > struct sp_aligned_storage$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::sp_aligned_storage::type	/usr/include/boost/signals2/deconstruct.hpp	/^    union type$/;"	u	struct:boost::signals2::detail::sp_aligned_storage	access:public
boost::signals2::detail::sp_aligned_storage::type::align_	/usr/include/boost/signals2/deconstruct.hpp	/^        typename boost::type_with_alignment< A >::type align_;$/;"	m	union:boost::signals2::detail::sp_aligned_storage::type	access:public
boost::signals2::detail::sp_aligned_storage::type::data_	/usr/include/boost/signals2/deconstruct.hpp	/^        char data_[ N ];$/;"	m	union:boost::signals2::detail::sp_aligned_storage::type	access:public
boost::signals2::detail::std_functional_base	/usr/include/boost/signals2/detail/preprocessed_arg_type.hpp	/^      struct std_functional_base$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::std_functional_base	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^        struct std_functional_base$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::std_functional_base	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^        struct std_functional_base<R, T1, T2>: public std::binary_function<T1, T2, R>$/;"	s	namespace:boost::signals2::detail	inherits:std::binary_function
boost::signals2::detail::std_functional_base	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^        struct std_functional_base<R, T1>: public std::unary_function<T1, R>$/;"	s	namespace:boost::signals2::detail	inherits:std::unary_function
boost::signals2::detail::storage	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^                               storage;$/;"	t	namespace:boost::signals2::detail	access:private
boost::signals2::detail::store_n_bytes	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    struct store_n_bytes$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::store_n_bytes::BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        BOOST_STATIC_CONSTANT( unsigned, value = N );$/;"	p	struct:boost::signals2::detail::store_n_bytes	access:public	signature:( unsigned, value = N )
boost::signals2::detail::store_n_objects	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    struct store_n_objects$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::store_n_objects::BOOST_STATIC_CONSTANT	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        BOOST_STATIC_CONSTANT( unsigned, value = N );$/;"	p	struct:boost::signals2::detail::store_n_objects	access:public	signature:( unsigned, value = N )
boost::signals2::detail::swap	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void swap( auto_buffer& r )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( auto_buffer& r )
boost::signals2::detail::swap_helper	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void swap_helper( auto_buffer& l, auto_buffer& r,$/;"	f	namespace:boost::signals2::detail	signature:( auto_buffer& l, auto_buffer& r, const boost::false_type& )
boost::signals2::detail::swap_helper	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void swap_helper( auto_buffer& l, auto_buffer& r,$/;"	f	namespace:boost::signals2::detail	signature:( auto_buffer& l, auto_buffer& r, const boost::true_type& )
boost::signals2::detail::tag_type	/usr/include/boost/signals2/detail/signals_common.hpp	/^      tag_type(const F&)$/;"	f	namespace:boost::signals2::detail	signature:(const F&)
boost::signals2::detail::tracked_objects_visitor	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^      class tracked_objects_visitor$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::tracked_objects_visitor::add_if_trackable	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void add_if_trackable(const trackable *trackable) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const trackable *trackable) const
boost::signals2::detail::tracked_objects_visitor::add_if_trackable	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void add_if_trackable(const void *) const {}$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const void *) const
boost::signals2::detail::tracked_objects_visitor::m_visit_not_function_pointer	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_not_function_pointer(const T &, const mpl::bool_<false> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T &, const mpl::bool_<false> &) const
boost::signals2::detail::tracked_objects_visitor::m_visit_not_function_pointer	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_not_function_pointer(const T *t, const mpl::bool_<true> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T *t, const mpl::bool_<true> &) const
boost::signals2::detail::tracked_objects_visitor::m_visit_pointer	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_pointer(const T &t, const mpl::bool_<false> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T &t, const mpl::bool_<false> &) const
boost::signals2::detail::tracked_objects_visitor::m_visit_pointer	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_pointer(const T &t, const mpl::bool_<true> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T &t, const mpl::bool_<true> &) const
boost::signals2::detail::tracked_objects_visitor::m_visit_reference_wrapper	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_reference_wrapper(const T &t, const mpl::bool_<false> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T &t, const mpl::bool_<false> &) const
boost::signals2::detail::tracked_objects_visitor::m_visit_reference_wrapper	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_reference_wrapper(const reference_wrapper<T> &t, const mpl::bool_<true> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const reference_wrapper<T> &t, const mpl::bool_<true> &) const
boost::signals2::detail::tracked_objects_visitor::m_visit_signal	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_signal(const T &t, const mpl::bool_<false> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T &t, const mpl::bool_<false> &) const
boost::signals2::detail::tracked_objects_visitor::m_visit_signal	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_signal(const T *signal, const mpl::bool_<true> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T *signal, const mpl::bool_<true> &) const
boost::signals2::detail::tracked_objects_visitor::operator ()	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void operator()(const T& t) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:public	signature:(const T& t) const
boost::signals2::detail::tracked_objects_visitor::slot_	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        mutable slot_base * slot_;$/;"	m	class:boost::signals2::detail::tracked_objects_visitor	access:private
boost::signals2::detail::tracked_objects_visitor::tracked_objects_visitor	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        tracked_objects_visitor(slot_base *slot) : slot_(slot)$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:public	signature:(slot_base *slot)
boost::signals2::detail::unchecked_push_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void unchecked_push_back( ForwardIterator begin_arg,$/;"	f	namespace:boost::signals2::detail	access:public	signature:( ForwardIterator begin_arg, ForwardIterator end_arg )
boost::signals2::detail::unchecked_push_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void unchecked_push_back( optimized_const_reference x ) \/\/ non-growing$/;"	f	namespace:boost::signals2::detail	access:public	signature:( optimized_const_reference x )
boost::signals2::detail::unchecked_push_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void unchecked_push_back()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::detail::unchecked_push_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void unchecked_push_back_n( size_type n )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
boost::signals2::detail::unchecked_push_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void unchecked_push_back_n( size_type n, const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n, const boost::false_type& )
boost::signals2::detail::unchecked_push_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void unchecked_push_back_n( size_type n, const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n, const boost::true_type& )
boost::signals2::detail::uninitialized_grow	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        pointer uninitialized_grow( size_type n ) \/\/ strong$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
boost::signals2::detail::uninitialized_resize	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void uninitialized_resize( size_type n )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
boost::signals2::detail::uninitialized_shrink	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void uninitialized_shrink( size_type n ) \/\/ nothrow$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
boost::signals2::detail::unique_lock	/usr/include/boost/signals2/detail/unique_lock.hpp	/^      class unique_lock: public noncopyable$/;"	c	namespace:boost::signals2::detail	inherits:noncopyable
boost::signals2::detail::unique_lock::_mutex	/usr/include/boost/signals2/detail/unique_lock.hpp	/^        Mutex &_mutex;$/;"	m	class:boost::signals2::detail::unique_lock	access:private
boost::signals2::detail::unique_lock::unique_lock	/usr/include/boost/signals2/detail/unique_lock.hpp	/^        unique_lock(Mutex &m): _mutex(m)$/;"	f	class:boost::signals2::detail::unique_lock	access:public	signature:(Mutex &m)
boost::signals2::detail::unique_lock::~unique_lock	/usr/include/boost/signals2/detail/unique_lock.hpp	/^        ~unique_lock()$/;"	f	class:boost::signals2::detail::unique_lock	access:public	signature:()
boost::signals2::detail::unsigned_meta_array	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^      template<unsigned ... values> class unsigned_meta_array {};$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::unsigned_meta_array_appender	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        class unsigned_meta_array_appender<unsigned_meta_array<Args...>, n>$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::unsigned_meta_array_appender::type	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        typedef unsigned_meta_array<Args..., n> type;$/;"	t	class:boost::signals2::detail::unsigned_meta_array_appender	access:public
boost::signals2::detail::value_tag	/usr/include/boost/signals2/detail/signals_common.hpp	/^      struct value_tag {};$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::variadic_arg_type	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^      template<typename T, typename ... Args> class variadic_arg_type<0, T, Args...>$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::variadic_arg_type	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^      template<unsigned n, typename T, typename ... Args> class variadic_arg_type<n, T, Args...>$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::variadic_arg_type::type	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^        typedef T type;$/;"	t	class:boost::signals2::detail::variadic_arg_type	access:public
boost::signals2::detail::variadic_arg_type::type	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^        typedef typename variadic_arg_type<n - 1, Args...>::type type;$/;"	t	class:boost::signals2::detail::variadic_arg_type	access:public
boost::signals2::detail::variadic_extended_signature	/usr/include/boost/signals2/variadic_signal.hpp	/^        class variadic_extended_signature<R (Args...)>$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::variadic_extended_signature::function_type	/usr/include/boost/signals2/variadic_signal.hpp	/^        typedef boost::function<R (const boost::signals2::connection &, Args...)> function_type;$/;"	t	class:boost::signals2::detail::variadic_extended_signature	access:public
boost::signals2::detail::variadic_slot_invoker	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        class variadic_slot_invoker$/;"	c	namespace:boost::signals2::detail
boost::signals2::detail::variadic_slot_invoker::_args	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        BOOST_SIGNALS2_TUPLE<Args& ...> _args;$/;"	m	class:boost::signals2::detail::variadic_slot_invoker	access:private
boost::signals2::detail::variadic_slot_invoker::m_invoke	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^          result_type m_invoke(const ConnectionBodyType &connectionBody, ...) const$/;"	f	class:boost::signals2::detail::variadic_slot_invoker	access:private	signature:(const ConnectionBodyType &connectionBody, ...) const
boost::signals2::detail::variadic_slot_invoker::m_invoke	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        result_type m_invoke(const ConnectionBodyType &connectionBody,$/;"	f	class:boost::signals2::detail::variadic_slot_invoker	access:private	signature:(const ConnectionBodyType &connectionBody, const void_type *) const
boost::signals2::detail::variadic_slot_invoker::operator ()	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^          result_type operator ()(const ConnectionBodyType &connectionBody) const$/;"	f	class:boost::signals2::detail::variadic_slot_invoker	access:public	signature:(const ConnectionBodyType &connectionBody) const
boost::signals2::detail::variadic_slot_invoker::result_type	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        typedef R result_type;$/;"	t	class:boost::signals2::detail::variadic_slot_invoker	access:public
boost::signals2::detail::variadic_slot_invoker::variadic_slot_invoker	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        variadic_slot_invoker(Args & ... args): _args(args...)$/;"	f	class:boost::signals2::detail::variadic_slot_invoker	access:public	signature:(Args & .... args)
boost::signals2::detail::void_shared_ptr_variant	/usr/include/boost/signals2/slot_base.hpp	/^      typedef boost::variant<boost::shared_ptr<void>, detail::foreign_void_shared_ptr > void_shared_ptr_variant;$/;"	t	namespace:boost::signals2::detail
boost::signals2::detail::void_type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      struct void_type {};$/;"	s	namespace:boost::signals2::detail
boost::signals2::detail::void_weak_ptr_variant	/usr/include/boost/signals2/slot_base.hpp	/^      typedef boost::variant<boost::weak_ptr<void>, detail::foreign_void_weak_ptr > void_weak_ptr_variant;$/;"	t	namespace:boost::signals2::detail
boost::signals2::detail::~auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        ~auto_buffer()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
boost::signals2::dummy_mutex	/usr/include/boost/signals2/dummy_mutex.hpp	/^    class dummy_mutex$/;"	c	namespace:boost::signals2
boost::signals2::dummy_mutex::lock	/usr/include/boost/signals2/dummy_mutex.hpp	/^      void lock() {}$/;"	f	class:boost::signals2::dummy_mutex	access:public	signature:()
boost::signals2::dummy_mutex::try_lock	/usr/include/boost/signals2/dummy_mutex.hpp	/^      bool try_lock() {return true;}$/;"	f	class:boost::signals2::dummy_mutex	access:public	signature:()
boost::signals2::dummy_mutex::unlock	/usr/include/boost/signals2/dummy_mutex.hpp	/^      void unlock() {}$/;"	f	class:boost::signals2::dummy_mutex	access:public	signature:()
boost::signals2::expired_slot	/usr/include/boost/signals2/expired_slot.hpp	/^    class expired_slot: public bad_weak_ptr$/;"	c	namespace:boost::signals2	inherits:bad_weak_ptr
boost::signals2::expired_slot::what	/usr/include/boost/signals2/expired_slot.hpp	/^      virtual char const * what() const throw()$/;"	f	class:boost::signals2::expired_slot	access:public	signature:() const
boost::signals2::keywords	/usr/include/boost/signals2/signal_type.hpp	/^    namespace keywords$/;"	n	namespace:boost::signals2
boost::signals2::last_value	/usr/include/boost/signals2/last_value.hpp	/^    class last_value {$/;"	c	namespace:boost::signals2
boost::signals2::last_value	/usr/include/boost/signals2/last_value.hpp	/^    class last_value<void> {$/;"	c	namespace:boost::signals2
boost::signals2::last_value::operator ()	/usr/include/boost/signals2/last_value.hpp	/^        result_type operator()(InputIterator first, InputIterator last) const$/;"	f	class:boost::signals2::last_value	access:public	signature:(InputIterator first, InputIterator last) const
boost::signals2::last_value::operator ()	/usr/include/boost/signals2/last_value.hpp	/^      T operator()(InputIterator first, InputIterator last) const$/;"	f	class:boost::signals2::last_value	access:public	signature:(InputIterator first, InputIterator last) const
boost::signals2::last_value::result_type	/usr/include/boost/signals2/last_value.hpp	/^      typedef T result_type;$/;"	t	class:boost::signals2::last_value	access:public
boost::signals2::last_value::result_type	/usr/include/boost/signals2/last_value.hpp	/^      typedef void result_type;$/;"	t	class:boost::signals2::last_value	access:public
boost::signals2::mutex	/usr/include/boost/signals2/detail/lwm_nop.hpp	/^class mutex: public dummy_mutex$/;"	c	namespace:boost::signals2	inherits:dummy_mutex
boost::signals2::mutex	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^class mutex$/;"	c	namespace:boost::signals2
boost::signals2::mutex	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^class mutex$/;"	c	namespace:boost::signals2
boost::signals2::mutex::cs_	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    critical_section cs_;$/;"	m	class:boost::signals2::mutex	access:private
boost::signals2::mutex::lock	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    void lock()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
boost::signals2::mutex::lock	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    void lock()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
boost::signals2::mutex::m_	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    pthread_mutex_t m_;$/;"	m	class:boost::signals2::mutex	access:private
boost::signals2::mutex::mutex	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    mutex()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
boost::signals2::mutex::mutex	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    mutex(mutex const &);$/;"	p	class:boost::signals2::mutex	access:private	signature:(mutex const &)
boost::signals2::mutex::mutex	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    mutex()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
boost::signals2::mutex::mutex	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    mutex(mutex const &);$/;"	p	class:boost::signals2::mutex	access:private	signature:(mutex const &)
boost::signals2::mutex::operator =	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    mutex & operator=(mutex const &);$/;"	p	class:boost::signals2::mutex	access:private	signature:(mutex const &)
boost::signals2::mutex::operator =	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    mutex & operator=(mutex const &);$/;"	p	class:boost::signals2::mutex	access:private	signature:(mutex const &)
boost::signals2::mutex::try_lock	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    bool try_lock()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
boost::signals2::mutex::try_lock	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    bool try_lock()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
boost::signals2::mutex::unlock	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    void unlock()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
boost::signals2::mutex::unlock	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    void unlock()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
boost::signals2::mutex::~mutex	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    ~mutex()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
boost::signals2::mutex::~mutex	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    ~mutex()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
boost::signals2::no_slots_error	/usr/include/boost/signals2/last_value.hpp	/^    class no_slots_error: public std::exception$/;"	c	namespace:boost::signals2	inherits:std::exception
boost::signals2::no_slots_error::what	/usr/include/boost/signals2/last_value.hpp	/^      virtual const char* what() const throw() {return "boost::signals2::no_slots_error";}$/;"	f	class:boost::signals2::no_slots_error	access:public	signature:() const
boost::signals2::null_deleter	/usr/include/boost/signals2/connection.hpp	/^    extern inline void null_deleter(const void*) {}$/;"	f	namespace:boost::signals2	signature:(const void*)
boost::signals2::operator !=	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline bool operator!=( const auto_buffer<T,SBP,GP,A>& l,$/;"	f	namespace:boost::signals2	signature:( const auto_buffer<T,SBP,GP,A>& l, const auto_buffer<T,SBP,GP,A>& r )
boost::signals2::operator <	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline bool operator<( const auto_buffer<T,SBP,GP,A>& l,$/;"	f	namespace:boost::signals2	signature:( const auto_buffer<T,SBP,GP,A>& l, const auto_buffer<T,SBP,GP,A>& r )
boost::signals2::operator <=	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline bool operator<=( const auto_buffer<T,SBP,GP,A>& l,$/;"	f	namespace:boost::signals2	signature:( const auto_buffer<T,SBP,GP,A>& l, const auto_buffer<T,SBP,GP,A>& r )
boost::signals2::operator ==	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline bool operator==( const auto_buffer<T,SBP,GP,A>& l,$/;"	f	namespace:boost::signals2	signature:( const auto_buffer<T,SBP,GP,A>& l, const auto_buffer<T,SBP,GP,A>& r )
boost::signals2::operator >	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline bool operator>( const auto_buffer<T,SBP,GP,A>& l,$/;"	f	namespace:boost::signals2	signature:( const auto_buffer<T,SBP,GP,A>& l, const auto_buffer<T,SBP,GP,A>& r )
boost::signals2::operator >=	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline bool operator>=( const auto_buffer<T,SBP,GP,A>& l,$/;"	f	namespace:boost::signals2	signature:( const auto_buffer<T,SBP,GP,A>& l, const auto_buffer<T,SBP,GP,A>& r )
boost::signals2::optional_last_value	/usr/include/boost/signals2/optional_last_value.hpp	/^      class optional_last_value$/;"	c	namespace:boost::signals2
boost::signals2::optional_last_value	/usr/include/boost/signals2/optional_last_value.hpp	/^      class optional_last_value<void>$/;"	c	namespace:boost::signals2
boost::signals2::optional_last_value::operator ()	/usr/include/boost/signals2/optional_last_value.hpp	/^        optional<T> operator()(InputIterator first, InputIterator last) const$/;"	f	class:boost::signals2::optional_last_value	access:public	signature:(InputIterator first, InputIterator last) const
boost::signals2::optional_last_value::operator ()	/usr/include/boost/signals2/optional_last_value.hpp	/^        result_type operator()(InputIterator first, InputIterator last) const$/;"	f	class:boost::signals2::optional_last_value	access:public	signature:(InputIterator first, InputIterator last) const
boost::signals2::optional_last_value::result_type	/usr/include/boost/signals2/optional_last_value.hpp	/^      typedef optional<T> result_type;$/;"	t	class:boost::signals2::optional_last_value	access:public
boost::signals2::optional_last_value::result_type	/usr/include/boost/signals2/optional_last_value.hpp	/^      typedef void result_type;$/;"	t	class:boost::signals2::optional_last_value	access:public
boost::signals2::postconstructible_adl_barrier	/usr/include/boost/signals2/postconstructible.hpp	/^    namespace postconstructible_adl_barrier$/;"	n	namespace:boost::signals2
boost::signals2::postconstructible_adl_barrier::postconstructible	/usr/include/boost/signals2/postconstructible.hpp	/^      class postconstructible$/;"	c	namespace:boost::signals2::postconstructible_adl_barrier
boost::signals2::postconstructible_adl_barrier::postconstructible::adl_postconstruct	/usr/include/boost/signals2/postconstructible.hpp	/^          friend void adl_postconstruct(const shared_ptr<T> &sp, postconstructible *p)$/;"	f	class:boost::signals2::postconstructible_adl_barrier::postconstructible	access:friend	signature:(const shared_ptr<T> &sp, postconstructible *p)
boost::signals2::postconstructible_adl_barrier::postconstructible::detail::do_postconstruct	/usr/include/boost/signals2/postconstructible.hpp	/^        friend void detail::do_postconstruct(const postconstructible *ptr);$/;"	p	class:boost::signals2::postconstructible_adl_barrier::postconstructible::detail	access:friend	signature:(const postconstructible *ptr)
boost::signals2::postconstructible_adl_barrier::postconstructible::postconstruct	/usr/include/boost/signals2/postconstructible.hpp	/^        virtual void postconstruct() = 0;$/;"	p	class:boost::signals2::postconstructible_adl_barrier::postconstructible	access:protected	signature:()
boost::signals2::postconstructible_adl_barrier::postconstructible::postconstructible	/usr/include/boost/signals2/postconstructible.hpp	/^        postconstructible() {}$/;"	f	class:boost::signals2::postconstructible_adl_barrier::postconstructible	access:protected	signature:()
boost::signals2::postconstructible_adl_barrier::postconstructible::~postconstructible	/usr/include/boost/signals2/postconstructible.hpp	/^        virtual ~postconstructible() {}$/;"	f	class:boost::signals2::postconstructible_adl_barrier::postconstructible	access:protected	signature:()
boost::signals2::postconstructor_invoker	/usr/include/boost/signals2/deconstruct.hpp	/^    class postconstructor_invoker$/;"	c	namespace:boost::signals2
boost::signals2::postconstructor_invoker::_postconstructed	/usr/include/boost/signals2/deconstruct.hpp	/^    mutable bool _postconstructed;$/;"	m	class:boost::signals2::postconstructor_invoker	access:private
boost::signals2::postconstructor_invoker::_sp	/usr/include/boost/signals2/deconstruct.hpp	/^    shared_ptr<T> _sp;$/;"	m	class:boost::signals2::postconstructor_invoker	access:private
boost::signals2::postconstructor_invoker::operator const shared_ptr<T> &	/usr/include/boost/signals2/deconstruct.hpp	/^    operator const shared_ptr<T> & () const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:() const
boost::signals2::postconstructor_invoker::postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(Args && ... args)$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(Args && .... args)
boost::signals2::postconstructor_invoker::postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1) const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1) const
boost::signals2::postconstructor_invoker::postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2) const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2) const
boost::signals2::postconstructor_invoker::postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3) const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3) const
boost::signals2::postconstructor_invoker::postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4) const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4) const
boost::signals2::postconstructor_invoker::postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5) const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5) const
boost::signals2::postconstructor_invoker::postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5,$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6) const
boost::signals2::postconstructor_invoker::postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5,$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7) const
boost::signals2::postconstructor_invoker::postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5,$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8) const
boost::signals2::postconstructor_invoker::postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5,$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8, const A9 &a9) const
boost::signals2::postconstructor_invoker::postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    const shared_ptr<T>& postconstruct() const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:() const
boost::signals2::postconstructor_invoker::postconstructor_invoker	/usr/include/boost/signals2/deconstruct.hpp	/^    postconstructor_invoker(const shared_ptr<T> & sp):$/;"	f	class:boost::signals2::postconstructor_invoker	access:private	signature:(const shared_ptr<T> & sp)
boost::signals2::predestructible_adl_barrier	/usr/include/boost/signals2/predestructible.hpp	/^    namespace predestructible_adl_barrier$/;"	n	namespace:boost::signals2
boost::signals2::predestructible_adl_barrier::predestructible	/usr/include/boost/signals2/predestructible.hpp	/^      class predestructible$/;"	c	namespace:boost::signals2::predestructible_adl_barrier
boost::signals2::predestructible_adl_barrier::predestructible::adl_postconstruct	/usr/include/boost/signals2/predestructible.hpp	/^          friend void adl_postconstruct(const shared_ptr<T> &, ...)$/;"	f	class:boost::signals2::predestructible_adl_barrier::predestructible	access:friend	signature:(const shared_ptr<T> &, ...)
boost::signals2::predestructible_adl_barrier::predestructible::adl_predestruct	/usr/include/boost/signals2/predestructible.hpp	/^        friend void adl_predestruct(predestructible *p)$/;"	f	class:boost::signals2::predestructible_adl_barrier::predestructible	access:friend	signature:(predestructible *p)
boost::signals2::predestructible_adl_barrier::predestructible::predestruct	/usr/include/boost/signals2/predestructible.hpp	/^        virtual void predestruct() = 0;$/;"	p	class:boost::signals2::predestructible_adl_barrier::predestructible	access:public	signature:()
boost::signals2::predestructible_adl_barrier::predestructible::predestructible	/usr/include/boost/signals2/predestructible.hpp	/^        predestructible() {}$/;"	f	class:boost::signals2::predestructible_adl_barrier::predestructible	access:protected	signature:()
boost::signals2::predestructible_adl_barrier::predestructible::~predestructible	/usr/include/boost/signals2/predestructible.hpp	/^        virtual ~predestructible() {}$/;"	f	class:boost::signals2::predestructible_adl_barrier::predestructible	access:public	signature:()
boost::signals2::predestructing_deleter	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^    template<typename T> class predestructing_deleter$/;"	c	namespace:boost::signals2
boost::signals2::predestructing_deleter::operator ()	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^      void operator()(const T *ptr) const$/;"	f	class:boost::signals2::predestructing_deleter	access:public	signature:(const T *ptr) const
boost::signals2::scoped_connection	/usr/include/boost/signals2/connection.hpp	/^    class scoped_connection: public connection$/;"	c	namespace:boost::signals2	inherits:connection
boost::signals2::scoped_connection::operator =	/usr/include/boost/signals2/connection.hpp	/^      scoped_connection& operator=(const connection &rhs)$/;"	f	class:boost::signals2::scoped_connection	access:public	signature:(const connection &rhs)
boost::signals2::scoped_connection::operator =	/usr/include/boost/signals2/connection.hpp	/^      scoped_connection& operator=(const scoped_connection &rhs);$/;"	p	class:boost::signals2::scoped_connection	access:private	signature:(const scoped_connection &rhs)
boost::signals2::scoped_connection::release	/usr/include/boost/signals2/connection.hpp	/^      connection release()$/;"	f	class:boost::signals2::scoped_connection	access:public	signature:()
boost::signals2::scoped_connection::scoped_connection	/usr/include/boost/signals2/connection.hpp	/^      scoped_connection() {}$/;"	f	class:boost::signals2::scoped_connection	access:public	signature:()
boost::signals2::scoped_connection::scoped_connection	/usr/include/boost/signals2/connection.hpp	/^      scoped_connection(const connection &other):$/;"	f	class:boost::signals2::scoped_connection	access:public	signature:(const connection &other)
boost::signals2::scoped_connection::scoped_connection	/usr/include/boost/signals2/connection.hpp	/^      scoped_connection(const scoped_connection &other);$/;"	p	class:boost::signals2::scoped_connection	access:private	signature:(const scoped_connection &other)
boost::signals2::scoped_connection::~scoped_connection	/usr/include/boost/signals2/connection.hpp	/^      ~scoped_connection()$/;"	f	class:boost::signals2::scoped_connection	access:public	signature:()
boost::signals2::shared_connection_block	/usr/include/boost/signals2/shared_connection_block.hpp	/^    class shared_connection_block$/;"	c	namespace:boost::signals2
boost::signals2::shared_connection_block::_blocker	/usr/include/boost/signals2/shared_connection_block.hpp	/^      shared_ptr<void> _blocker;$/;"	m	class:boost::signals2::shared_connection_block	access:private
boost::signals2::shared_connection_block::_weak_connection_body	/usr/include/boost/signals2/shared_connection_block.hpp	/^      boost::weak_ptr<detail::connection_body_base> _weak_connection_body;$/;"	m	class:boost::signals2::shared_connection_block	access:private
boost::signals2::shared_connection_block::block	/usr/include/boost/signals2/shared_connection_block.hpp	/^      void block()$/;"	f	class:boost::signals2::shared_connection_block	access:public	signature:()
boost::signals2::shared_connection_block::blocking	/usr/include/boost/signals2/shared_connection_block.hpp	/^      bool blocking() const$/;"	f	class:boost::signals2::shared_connection_block	access:public	signature:() const
boost::signals2::shared_connection_block::connection	/usr/include/boost/signals2/shared_connection_block.hpp	/^      signals2::connection connection() const$/;"	f	class:boost::signals2::shared_connection_block	access:public	signature:() const
boost::signals2::shared_connection_block::shared_connection_block	/usr/include/boost/signals2/shared_connection_block.hpp	/^      shared_connection_block(const signals2::connection &conn = signals2::connection(),$/;"	f	class:boost::signals2::shared_connection_block	access:public	signature:(const signals2::connection &conn = signals2::connection(), bool initially_blocked = true)
boost::signals2::shared_connection_block::unblock	/usr/include/boost/signals2/shared_connection_block.hpp	/^      void unblock()$/;"	f	class:boost::signals2::shared_connection_block	access:public	signature:()
boost::signals2::shared_ptr_traits	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    template<typename SharedPtr> struct shared_ptr_traits$/;"	s	namespace:boost::signals2
boost::signals2::shared_ptr_traits	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    template<typename T> struct shared_ptr_traits<boost::shared_ptr<T> >$/;"	s	namespace:boost::signals2
boost::signals2::shared_ptr_traits	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    template<typename T> struct shared_ptr_traits<std::shared_ptr<T> >$/;"	s	namespace:boost::signals2
boost::signals2::shared_ptr_traits::weak_type	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      typedef boost::weak_ptr<T> weak_type;$/;"	t	struct:boost::signals2::shared_ptr_traits	access:public
boost::signals2::shared_ptr_traits::weak_type	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      typedef std::weak_ptr<T> weak_type;$/;"	t	struct:boost::signals2::shared_ptr_traits	access:public
boost::signals2::signal	/usr/include/boost/signals2/preprocessed_signal.hpp	/^    class signal: public detail::signalN<function_traits<Signature>::arity,$/;"	c	namespace:boost::signals2	inherits:detail::signalN::type
boost::signals2::signal::base_type	/usr/include/boost/signals2/preprocessed_signal.hpp	/^        Signature, Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::type base_type;$/;"	t	class:boost::signals2::signal	access:private
boost::signals2::signal::signal	/usr/include/boost/signals2/preprocessed_signal.hpp	/^      signal(const Combiner &combiner_arg = Combiner(), const GroupCompare &group_compare = GroupCompare()):$/;"	f	class:boost::signals2::signal	access:public	signature:(const Combiner &combiner_arg = Combiner(), const GroupCompare &group_compare = GroupCompare())
boost::signals2::signal_base	/usr/include/boost/signals2/detail/signal_template.hpp	/^      BOOST_SIGNALS2_SIGNAL_TEMPLATE_SPECIALIZATION: public signal_base,$/;"	m	namespace:boost::signals2	access:public
boost::signals2::signal_base	/usr/include/boost/signals2/signal_base.hpp	/^    class signal_base : public noncopyable$/;"	c	namespace:boost::signals2	inherits:noncopyable
boost::signals2::signal_base::lock_pimpl	/usr/include/boost/signals2/signal_base.hpp	/^      virtual shared_ptr<void> lock_pimpl() const = 0;$/;"	p	class:boost::signals2::signal_base	access:protected	signature:() const
boost::signals2::signal_base::~signal_base	/usr/include/boost/signals2/signal_base.hpp	/^      virtual ~signal_base() {}$/;"	f	class:boost::signals2::signal_base	access:public	signature:()
boost::signals2::signal_type	/usr/include/boost/signals2/signal_type.hpp	/^    class signal_type$/;"	c	namespace:boost::signals2
boost::signals2::signal_type::args	/usr/include/boost/signals2/signal_type.hpp	/^        args;$/;"	t	class:boost::signals2::signal_type	access:public
boost::signals2::signal_type::combiner_type	/usr/include/boost/signals2/signal_type.hpp	/^        >::type combiner_type;$/;"	t	class:boost::signals2::signal_type	access:public
boost::signals2::signal_type::extended_slot_function_type	/usr/include/boost/signals2/signal_type.hpp	/^          extended_slot_function_type;$/;"	t	class:boost::signals2::signal_type	access:public
boost::signals2::signal_type::group_compare_type	/usr/include/boost/signals2/signal_type.hpp	/^        group_compare_type;$/;"	t	class:boost::signals2::signal_type	access:public
boost::signals2::signal_type::group_type	/usr/include/boost/signals2/signal_type.hpp	/^        parameter::value_type<args, keywords::tag::group_type, int>::type group_type;$/;"	t	class:boost::signals2::signal_type	access:public
boost::signals2::signal_type::mutex_type	/usr/include/boost/signals2/signal_type.hpp	/^        parameter::value_type<args, keywords::tag::mutex_type, mutex>::type mutex_type;$/;"	t	class:boost::signals2::signal_type	access:public
boost::signals2::signal_type::parameter_spec	/usr/include/boost/signals2/signal_type.hpp	/^        > parameter_spec;$/;"	t	class:boost::signals2::signal_type	access:private
boost::signals2::signal_type::signature_type	/usr/include/boost/signals2/signal_type.hpp	/^        signature_type;$/;"	t	class:boost::signals2::signal_type	access:public
boost::signals2::signal_type::signature_type	/usr/include/boost/signals2/signal_type.hpp	/^      typedef Signature signature_type;$/;"	t	class:boost::signals2::signal_type	access:public
boost::signals2::signal_type::slot_function_type	/usr/include/boost/signals2/signal_type.hpp	/^        slot_function_type;$/;"	t	class:boost::signals2::signal_type	access:public
boost::signals2::signal_type::type	/usr/include/boost/signals2/signal_type.hpp	/^        > type;$/;"	t	class:boost::signals2::signal_type	access:public
boost::signals2::slot	/usr/include/boost/signals2/preprocessed_slot.hpp	/^    class slot: public detail::slotN<function_traits<Signature>::arity,$/;"	c	namespace:boost::signals2	inherits:detail::slotN::type
boost::signals2::slot::base_type	/usr/include/boost/signals2/preprocessed_slot.hpp	/^        Signature, SlotFunction>::type base_type;$/;"	t	class:boost::signals2::slot	access:private
boost::signals2::slot::slot	/usr/include/boost/signals2/preprocessed_slot.hpp	/^      slot(const F& f): base_type(f)$/;"	f	class:boost::signals2::slot	access:public	signature:(const F& f)
boost::signals2::slot_base	/usr/include/boost/signals2/detail/slot_template.hpp	/^      : public slot_base, public detail::BOOST_SIGNALS2_STD_FUNCTIONAL_BASE(R)$/;"	m	namespace:boost::signals2	access:public
boost::signals2::slot_base	/usr/include/boost/signals2/slot_base.hpp	/^    class slot_base$/;"	c	namespace:boost::signals2
boost::signals2::slot_base::_tracked_objects	/usr/include/boost/signals2/slot_base.hpp	/^      tracked_container_type _tracked_objects;$/;"	m	class:boost::signals2::slot_base	access:protected
boost::signals2::slot_base::expired	/usr/include/boost/signals2/slot_base.hpp	/^      bool expired() const$/;"	f	class:boost::signals2::slot_base	access:public	signature:() const
boost::signals2::slot_base::lock	/usr/include/boost/signals2/slot_base.hpp	/^      locked_container_type lock() const$/;"	f	class:boost::signals2::slot_base	access:public	signature:() const
boost::signals2::slot_base::locked_container_type	/usr/include/boost/signals2/slot_base.hpp	/^      typedef std::vector<detail::void_shared_ptr_variant> locked_container_type;$/;"	t	class:boost::signals2::slot_base	access:public
boost::signals2::slot_base::track_signal	/usr/include/boost/signals2/slot_base.hpp	/^      void track_signal(const signal_base &signal)$/;"	f	class:boost::signals2::slot_base	access:protected	signature:(const signal_base &signal)
boost::signals2::slot_base::tracked_container_type	/usr/include/boost/signals2/slot_base.hpp	/^      typedef std::vector<detail::void_weak_ptr_variant> tracked_container_type;$/;"	t	class:boost::signals2::slot_base	access:public
boost::signals2::slot_base::tracked_objects	/usr/include/boost/signals2/slot_base.hpp	/^      const tracked_container_type& tracked_objects() const {return _tracked_objects;}$/;"	f	class:boost::signals2::slot_base	access:public	signature:() const
boost::signals2::swap	/usr/include/boost/signals2/connection.hpp	/^    inline void swap(connection &conn1, connection &conn2)$/;"	f	namespace:boost::signals2	signature:(connection &conn1, connection &conn2)
boost::signals2::swap	/usr/include/boost/signals2/connection.hpp	/^    inline void swap(scoped_connection &conn1, scoped_connection &conn2)$/;"	f	namespace:boost::signals2	signature:(scoped_connection &conn1, scoped_connection &conn2)
boost::signals2::swap	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline void swap( auto_buffer<T,SBP,GP,A>& l, auto_buffer<T,SBP,GP,A>& r )$/;"	f	namespace:boost::signals2	signature:( auto_buffer<T,SBP,GP,A>& l, auto_buffer<T,SBP,GP,A>& r )
boost::signals2::trackable	/usr/include/boost/signals2/trackable.hpp	/^    class trackable {$/;"	c	namespace:boost::signals2
boost::signals2::trackable::_tracked_ptr	/usr/include/boost/signals2/trackable.hpp	/^      shared_ptr<void> _tracked_ptr;$/;"	m	class:boost::signals2::trackable	access:private
boost::signals2::trackable::get_shared_ptr	/usr/include/boost/signals2/trackable.hpp	/^      const shared_ptr<void>& get_shared_ptr() const$/;"	f	class:boost::signals2::trackable	access:private	signature:() const
boost::signals2::trackable::operator =	/usr/include/boost/signals2/trackable.hpp	/^      trackable& operator=(const trackable &)$/;"	f	class:boost::signals2::trackable	access:protected	signature:(const trackable &)
boost::signals2::trackable::trackable	/usr/include/boost/signals2/trackable.hpp	/^      trackable(): _tracked_ptr(static_cast<int*>(0)) {}$/;"	f	class:boost::signals2::trackable	access:protected	signature:()
boost::signals2::trackable::trackable	/usr/include/boost/signals2/trackable.hpp	/^      trackable(const trackable &): _tracked_ptr(static_cast<int*>(0)) {}$/;"	f	class:boost::signals2::trackable	access:protected	signature:(const trackable &)
boost::signals2::trackable::~trackable	/usr/include/boost/signals2/trackable.hpp	/^      ~trackable() {}$/;"	f	class:boost::signals2::trackable	access:protected	signature:()
boost::signals2::weak_ptr_traits	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    template<typename T> struct weak_ptr_traits<boost::weak_ptr<T> >$/;"	s	namespace:boost::signals2
boost::signals2::weak_ptr_traits	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    template<typename T> struct weak_ptr_traits<std::weak_ptr<T> >$/;"	s	namespace:boost::signals2
boost::signals2::weak_ptr_traits	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    template<typename WeakPtr> struct weak_ptr_traits$/;"	s	namespace:boost::signals2
boost::signals2::weak_ptr_traits::shared_type	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      typedef boost::shared_ptr<T> shared_type;$/;"	t	struct:boost::signals2::weak_ptr_traits	access:public
boost::signals2::weak_ptr_traits::shared_type	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      typedef std::shared_ptr<T> shared_type;$/;"	t	struct:boost::signals2::weak_ptr_traits	access:public
buffer_	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        pointer      buffer_;$/;"	m	namespace:boost::signals2::detail	access:private
cache	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        slot_call_iterator_cache<result_type, Function> *cache;$/;"	m	class:boost::signals2::detail::slot_call_iterator_t	access:private
call_with_tuple_args	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        class call_with_tuple_args$/;"	c	namespace:boost::signals2::detail
callable_iter	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        mutable Iterator callable_iter;$/;"	m	class:boost::signals2::detail::slot_call_iterator_t	access:private
capacity	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        size_type capacity() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
capacity_	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            size_type capacity_;$/;"	m	struct:boost::signals2::detail::members_type	access:public
cbegin	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_iterator cbegin() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
cend	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_iterator cend() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
clear	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void clear()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
clear	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        void clear()$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:()
clone	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual foreign_shared_ptr_impl * clone() const$/;"	f	class:boost::signals2::detail::foreign_shared_ptr_impl	access:public	signature:() const
clone	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual foreign_shared_ptr_impl_base * clone() const = 0;$/;"	p	struct:boost::signals2::detail::foreign_shared_ptr_impl_base	access:public	signature:() const
clone	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual foreign_weak_ptr_impl * clone() const$/;"	f	class:boost::signals2::detail::foreign_weak_ptr_impl	access:public	signature:() const
clone	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual foreign_weak_ptr_impl_base * clone() const = 0;$/;"	p	struct:boost::signals2::detail::foreign_weak_ptr_impl_base	access:public	signature:() const
combiner_invoker	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      template<> class combiner_invoker<void>$/;"	c	namespace:boost::signals2::detail
combiner_invoker	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      template<typename R> class combiner_invoker$/;"	c	namespace:boost::signals2::detail
combiner_type	/usr/include/boost/signals2/signal_type.hpp	/^        >::type combiner_type;$/;"	t	class:boost::signals2::signal_type	access:public
compute_buffer_objects	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        struct compute_buffer_objects$/;"	s	namespace:boost::signals2::detail::auto_buffer_detail
compute_buffer_objects	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        struct compute_buffer_objects< store_n_bytes<N>, T >$/;"	s	namespace:boost::signals2::detail::auto_buffer_detail
compute_buffer_size	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        struct compute_buffer_size$/;"	s	namespace:boost::signals2::detail::auto_buffer_detail
compute_buffer_size	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        struct compute_buffer_size< store_n_bytes<N>, T >$/;"	s	namespace:boost::signals2::detail::auto_buffer_detail
connect_position	/usr/include/boost/signals2/detail/slot_groups.hpp	/^    enum connect_position { at_back, at_front };$/;"	g	namespace:boost::signals2
connected	/usr/include/boost/signals2/connection.hpp	/^        virtual bool connected() const = 0;$/;"	p	class:boost::signals2::detail::connection_body_base	access:public	signature:() const
connected	/usr/include/boost/signals2/connection.hpp	/^        virtual bool connected() const$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:() const
connected	/usr/include/boost/signals2/connection.hpp	/^      bool connected() const$/;"	f	class:boost::signals2::connection	access:public	signature:() const
connected_slot_count	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        unsigned connected_slot_count;$/;"	m	class:boost::signals2::detail::slot_call_iterator_cache	access:public
connection	/usr/include/boost/signals2/connection.hpp	/^      connection() {}$/;"	f	class:boost::signals2::connection	access:public	signature:()
connection	/usr/include/boost/signals2/connection.hpp	/^      connection(const boost::weak_ptr<detail::connection_body_base> &connectionBody):$/;"	f	class:boost::signals2::connection	access:public	signature:(const boost::weak_ptr<detail::connection_body_base> &connectionBody)
connection	/usr/include/boost/signals2/connection.hpp	/^      connection(const connection &other): _weak_connection_body(other._weak_connection_body)$/;"	f	class:boost::signals2::connection	access:public	signature:(const connection &other)
connection	/usr/include/boost/signals2/connection.hpp	/^    class connection$/;"	c	namespace:boost::signals2
connection	/usr/include/boost/signals2/shared_connection_block.hpp	/^      signals2::connection connection() const$/;"	f	class:boost::signals2::shared_connection_block	access:public	signature:() const
connection_body	/usr/include/boost/signals2/connection.hpp	/^        connection_body(const SlotType &slot_in):$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:(const SlotType &slot_in)
connection_body	/usr/include/boost/signals2/connection.hpp	/^      class connection_body: public connection_body_base$/;"	c	namespace:boost::signals2::detail	inherits:connection_body_base
connection_body_base	/usr/include/boost/signals2/connection.hpp	/^        connection_body_base():$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:()
connection_body_base	/usr/include/boost/signals2/connection.hpp	/^      class connection_body_base$/;"	c	namespace:boost::signals2::detail
const_iterator	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef const_pointer                            const_iterator;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
const_iterator	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef typename list_type::const_iterator const_iterator;$/;"	t	class:boost::signals2::detail::grouped_list	access:public
const_map_iterator	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef typename map_type::const_iterator const_map_iterator;$/;"	t	class:boost::signals2::detail::grouped_list	access:private
const_pointer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef const T*                                 const_pointer;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
const_reference	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef const T&                                 const_reference;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
const_reverse_iterator	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef boost::reverse_iterator<const_iterator>  const_reverse_iterator;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
copy_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void copy_impl( I begin, I end, pointer where )$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, pointer where )
copy_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void copy_impl( I begin, I end, pointer where, std::bidirectional_iterator_tag )$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, pointer where, std::bidirectional_iterator_tag )
copy_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void copy_impl( I begin, I end, pointer where, std::random_access_iterator_tag )$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, pointer where, std::random_access_iterator_tag )
copy_rai	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void copy_rai( I begin, I end,$/;"	f	namespace:boost::signals2::detail	signature:( I begin, I end, pointer where, const boost::integral_constant<bool, b>& )
copy_rai	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void copy_rai( const T* begin, const T* end,$/;"	f	namespace:boost::signals2::detail	signature:( const T* begin, const T* end, pointer where, const boost::true_type& )
crbegin	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_reverse_iterator crbegin() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
crend	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_reverse_iterator crend() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
critical_section	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^struct critical_section$/;"	s	namespace:boost::signals2
cs_	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    critical_section cs_;$/;"	m	class:boost::signals2::mutex	access:private
data	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_pointer data() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
data	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        pointer data()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
data_	/usr/include/boost/signals2/deconstruct.hpp	/^        char data_[ N ];$/;"	m	union:boost::signals2::detail::sp_aligned_storage::type	access:public
deallocate	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void deallocate( pointer where, size_type capacity_arg )$/;"	f	namespace:boost::signals2::detail	signature:( pointer where, size_type capacity_arg )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8, A9 const & a9 )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8, A9 const & a9 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct( Args && ... args )$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:( Args && .... args )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    static postconstructor_invoker<T> deconstruct()$/;"	f	class:boost::signals2::deconstruct_access	access:public	signature:()
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^postconstructor_invoker<T> deconstruct( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8, A9 const & a9 )$/;"	f	namespace:boost::signals2	signature:( A1 const & a1, A2 const & a2, A3 const & a3, A4 const & a4, A5 const & a5, A6 const & a6, A7 const & a7, A8 const & a8, A9 const & a9 )
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^template< class T > postconstructor_invoker<T> deconstruct()$/;"	f	namespace:boost::signals2	signature:()
deconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^template< class T, class... Args > postconstructor_invoker< T > deconstruct( Args && ... args )$/;"	f	namespace:boost::signals2	signature:( Args && .... args )
deconstruct_access	/usr/include/boost/signals2/deconstruct.hpp	/^class deconstruct_access$/;"	c	namespace:boost::signals2
deconstruct_deleter	/usr/include/boost/signals2/deconstruct.hpp	/^    deconstruct_deleter(): initialized_( false )$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:public	signature:()
deconstruct_deleter	/usr/include/boost/signals2/deconstruct.hpp	/^    deconstruct_deleter(const deconstruct_deleter &): initialized_( false )$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:public	signature:(const deconstruct_deleter &)
deconstruct_deleter	/usr/include/boost/signals2/deconstruct.hpp	/^template< class T > class deconstruct_deleter$/;"	c	namespace:boost::signals2::detail
deconstruct_ptr	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^    shared_ptr<T> deconstruct_ptr(T *ptr)$/;"	f	namespace:boost::signals2	signature:(T *ptr)
deconstruct_ptr	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^    shared_ptr<T> deconstruct_ptr(T *ptr, D deleter)$/;"	f	namespace:boost::signals2	signature:(T *ptr, D deleter)
default_grow_policy	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    struct default_grow_policy$/;"	s	namespace:boost::signals2::detail
dereference	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        dereference() const$/;"	f	class:boost::signals2::detail::slot_call_iterator_t	access:public	signature:() const
destroy	/usr/include/boost/signals2/deconstruct.hpp	/^    void destroy()$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:private	signature:()
destroy_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void destroy_back_n( size_type n )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n )
destroy_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void destroy_back_n( size_type n, const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n, const boost::false_type& )
destroy_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void destroy_back_n( size_type n, const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n, const boost::true_type& )
detail	/usr/include/boost/signals2/connection.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/deconstruct.hpp	/^namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/null_output_iterator.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/preprocessed_arg_type.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/preprocessed_arg_type_template.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/replace_slot_function.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^    namespace detail {$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/signal_template.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/signal_template.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2	access:public
detail	/usr/include/boost/signals2/detail/signals_common.hpp	/^    namespace detail {$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^    namespace detail {$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/slot_groups.hpp	/^    namespace detail {$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/slot_template.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2	access:public
detail	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/unique_lock.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/postconstructible.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/slot_base.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/trackable.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
detail	/usr/include/boost/signals2/variadic_signal.hpp	/^    namespace detail$/;"	n	namespace:boost::signals2
difference_type	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef typename Allocator::difference_type      difference_type;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
disconnect	/usr/include/boost/signals2/connection.hpp	/^        void disconnect()$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:()
disconnect	/usr/include/boost/signals2/connection.hpp	/^      void disconnect() const$/;"	f	class:boost::signals2::connection	access:public	signature:() const
disconnected_slot_count	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        unsigned disconnected_slot_count;$/;"	m	class:boost::signals2::detail::slot_call_iterator_cache	access:public
do_postconstruct	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^      extern inline void do_postconstruct(...)$/;"	f	namespace:boost::signals2::detail	signature:(....)
do_postconstruct	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^      extern inline void do_postconstruct(const postconstructible *ptr)$/;"	f	namespace:boost::signals2::detail	signature:(const postconstructible *ptr)
do_postconstruct	/usr/include/boost/signals2/postconstructible.hpp	/^        friend void detail::do_postconstruct(const postconstructible *ptr);$/;"	p	class:boost::signals2::postconstructible_adl_barrier::postconstructible::detail	access:friend	signature:(const postconstructible *ptr)
do_postconstruct	/usr/include/boost/signals2/postconstructible.hpp	/^      void do_postconstruct(const boost::signals2::postconstructible_adl_barrier::postconstructible *ptr);$/;"	p	namespace:boost::signals2::detail	signature:(const boost::signals2::postconstructible_adl_barrier::postconstructible *ptr)
do_predestruct	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^      extern inline void do_predestruct(...)$/;"	f	namespace:boost::signals2::detail	signature:(....)
do_predestruct	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^      extern inline void do_predestruct(const predestructible *ptr)$/;"	f	namespace:boost::signals2::detail	signature:(const predestructible *ptr)
does_nothing	/usr/include/boost/signals2/detail/null_output_iterator.hpp	/^      class does_nothing$/;"	c	namespace:boost::signals2::detail
dummy_mutex	/usr/include/boost/signals2/dummy_mutex.hpp	/^    class dummy_mutex$/;"	c	namespace:boost::signals2
empty	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        bool empty() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
end	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_iterator end() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
end	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        iterator end()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
end	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        Iterator end;$/;"	m	class:boost::signals2::detail::slot_call_iterator_t	access:private
end	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        iterator end()$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:()
equal	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        bool equal(const slot_call_iterator_t& other) const$/;"	f	class:boost::signals2::detail::slot_call_iterator_t	access:public	signature:(const slot_call_iterator_t& other) const
erase	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        iterator erase( const_iterator from, const_iterator to )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const_iterator from, const_iterator to )
erase	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        iterator erase( const_iterator where )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const_iterator where )
erase	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        iterator erase(const group_key_type &key, const iterator &it)$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_type &key, const iterator &it)
erase	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        void erase(const group_key_type &key)$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_type &key)
expired	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        bool expired() const$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:() const
expired	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual bool expired() const = 0;$/;"	p	struct:boost::signals2::detail::foreign_weak_ptr_impl_base	access:public	signature:() const
expired	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual bool expired() const$/;"	f	class:boost::signals2::detail::foreign_weak_ptr_impl	access:public	signature:() const
expired	/usr/include/boost/signals2/slot_base.hpp	/^      bool expired() const$/;"	f	class:boost::signals2::slot_base	access:public	signature:() const
expired_slot	/usr/include/boost/signals2/expired_slot.hpp	/^    class expired_slot: public bad_weak_ptr$/;"	c	namespace:boost::signals2	inherits:bad_weak_ptr
expired_weak_ptr_visitor	/usr/include/boost/signals2/slot_base.hpp	/^      class expired_weak_ptr_visitor$/;"	c	namespace:boost::signals2::detail
extended_signature	/usr/include/boost/signals2/detail/signal_template.hpp	/^        class extended_signature: public variadic_extended_signature<Signature>$/;"	c	namespace:boost::signals2::detail	inherits:variadic_extended_signature
extended_signature	/usr/include/boost/signals2/detail/signal_template.hpp	/^        class extended_signature<BOOST_SIGNALS2_NUM_ARGS, Signature>$/;"	c	namespace:boost::signals2::detail
extended_slot_function_type	/usr/include/boost/signals2/signal_type.hpp	/^          extended_slot_function_type;$/;"	t	class:boost::signals2::signal_type	access:public
f	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        Function f;$/;"	m	class:boost::signals2::detail::slot_call_iterator_cache	access:public
foreign_shared_ptr_impl	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_shared_ptr_impl(const FSP &p): _p(p)$/;"	f	class:boost::signals2::detail::foreign_shared_ptr_impl	access:public	signature:(const FSP &p)
foreign_shared_ptr_impl	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      class foreign_shared_ptr_impl: public foreign_shared_ptr_impl_base$/;"	c	namespace:boost::signals2::detail	inherits:foreign_shared_ptr_impl_base
foreign_shared_ptr_impl_base	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      struct foreign_shared_ptr_impl_base$/;"	s	namespace:boost::signals2::detail
foreign_void_shared_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        explicit foreign_void_shared_ptr(const FSP &fsp):$/;"	f	class:boost::signals2::detail::foreign_void_shared_ptr	access:public	signature:(const FSP &fsp)
foreign_void_shared_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_shared_ptr():$/;"	f	class:boost::signals2::detail::foreign_void_shared_ptr	access:public	signature:()
foreign_void_shared_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_shared_ptr(const foreign_void_shared_ptr &other):$/;"	f	class:boost::signals2::detail::foreign_void_shared_ptr	access:public	signature:(const foreign_void_shared_ptr &other)
foreign_void_shared_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      class foreign_void_shared_ptr$/;"	c	namespace:boost::signals2::detail
foreign_void_weak_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        explicit foreign_void_weak_ptr(const FWP &fwp):$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:(const FWP &fwp)
foreign_void_weak_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_weak_ptr()$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:()
foreign_void_weak_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_weak_ptr(const foreign_void_weak_ptr &other):$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:(const foreign_void_weak_ptr &other)
foreign_void_weak_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      class foreign_void_weak_ptr$/;"	c	namespace:boost::signals2::detail
foreign_weak_ptr_impl	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_weak_ptr_impl(const FWP &p): _p(p)$/;"	f	class:boost::signals2::detail::foreign_weak_ptr_impl	access:public	signature:(const FWP &p)
foreign_weak_ptr_impl	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      class foreign_weak_ptr_impl: public foreign_weak_ptr_impl_base$/;"	c	namespace:boost::signals2::detail	inherits:foreign_weak_ptr_impl_base
foreign_weak_ptr_impl_base	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      struct foreign_weak_ptr_impl_base$/;"	s	namespace:boost::signals2::detail
front	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        optimized_const_reference front() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
front	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        reference front()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
front_ungrouped_slots	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      enum slot_meta_group {front_ungrouped_slots, grouped_slots, back_ungrouped_slots};$/;"	e	enum:boost::signals2::detail::slot_meta_group
full	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        bool full() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
function_type	/usr/include/boost/signals2/detail/signal_template.hpp	/^        typedef function<BOOST_SIGNALS2_EXT_SIGNATURE(BOOST_SIGNALS2_NUM_ARGS, Signature)> function_type;$/;"	t	class:boost::signals2::detail::extended_signature	access:public
function_type	/usr/include/boost/signals2/variadic_signal.hpp	/^        typedef boost::function<R (const boost::signals2::connection &, Args...)> function_type;$/;"	t	class:boost::signals2::detail::variadic_extended_signature	access:public
get	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual void * get() const$/;"	f	class:boost::signals2::detail::foreign_shared_ptr_impl	access:public	signature:() const
get	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual void* get() const = 0;$/;"	p	struct:boost::signals2::detail::foreign_shared_ptr_impl_base	access:public	signature:() const
get_allocator	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        allocator_type& get_allocator()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
get_allocator	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const allocator_type& get_allocator() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
get_blocker	/usr/include/boost/signals2/connection.hpp	/^        shared_ptr<void> get_blocker()$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:()
get_invocable_slot	/usr/include/boost/signals2/detail/signals_common.hpp	/^      get_invocable_slot(const F &signal, signal_tag)$/;"	f	namespace:boost::signals2::detail	signature:(const F &signal, signal_tag)
get_invocable_slot	/usr/include/boost/signals2/detail/signals_common.hpp	/^      get_invocable_slot(const F& f, reference_tag)$/;"	f	namespace:boost::signals2::detail	signature:(const F& f, reference_tag)
get_invocable_slot	/usr/include/boost/signals2/detail/signals_common.hpp	/^      get_invocable_slot(const F& f, value_tag)$/;"	f	namespace:boost::signals2::detail	signature:(const F& f, value_tag)
get_list_iterator	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        const_iterator get_list_iterator(const const_map_iterator &map_it) const$/;"	f	class:boost::signals2::detail::grouped_list	access:private	signature:(const const_map_iterator &map_it) const
get_list_iterator	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        iterator get_list_iterator(const const_map_iterator &map_it)$/;"	f	class:boost::signals2::detail::grouped_list	access:private	signature:(const const_map_iterator &map_it)
get_shared_ptr	/usr/include/boost/signals2/trackable.hpp	/^      const shared_ptr<void>& get_shared_ptr() const$/;"	f	class:boost::signals2::trackable	access:private	signature:() const
get_slot_tag	/usr/include/boost/signals2/detail/signals_common.hpp	/^      class get_slot_tag {$/;"	c	namespace:boost::signals2::detail
group_compare_type	/usr/include/boost/signals2/signal_type.hpp	/^        group_compare_type;$/;"	t	class:boost::signals2::signal_type	access:public
group_key	/usr/include/boost/signals2/connection.hpp	/^        const GroupKey& group_key() const {return _group_key;}$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:() const
group_key	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      struct group_key$/;"	s	namespace:boost::signals2::detail
group_key_compare_type	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef group_key_less<Group, GroupCompare> group_key_compare_type;$/;"	t	class:boost::signals2::detail::grouped_list	access:public
group_key_less	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        group_key_less()$/;"	f	class:boost::signals2::detail::group_key_less	access:public	signature:()
group_key_less	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        group_key_less(const GroupCompare &group_compare): _group_compare(group_compare)$/;"	f	class:boost::signals2::detail::group_key_less	access:public	signature:(const GroupCompare &group_compare)
group_key_less	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      class group_key_less$/;"	c	namespace:boost::signals2::detail
group_key_type	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef typename group_key<Group>::type group_key_type;$/;"	t	class:boost::signals2::detail::grouped_list	access:public
group_type	/usr/include/boost/signals2/signal_type.hpp	/^        parameter::value_type<args, keywords::tag::group_type, int>::type group_type;$/;"	t	class:boost::signals2::signal_type	access:public
grouped_list	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        grouped_list(const group_key_compare_type &group_key_compare):$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_compare_type &group_key_compare)
grouped_list	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        grouped_list(const grouped_list &other): _list(other._list),$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const grouped_list &other)
grouped_list	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      class grouped_list$/;"	c	namespace:boost::signals2::detail
grouped_slots	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      enum slot_meta_group {front_ungrouped_slots, grouped_slots, back_ungrouped_slots};$/;"	e	enum:boost::signals2::detail::slot_meta_group
grow_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void grow_back( size_type n )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n )
grow_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void grow_back( size_type n, const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n, const boost::false_type& )
grow_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void grow_back( size_type n, const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n, const boost::true_type& )
grow_back_one	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void grow_back_one( const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( const boost::false_type& )
grow_back_one	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void grow_back_one( const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( const boost::true_type& )
grow_back_one	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void grow_back_one()$/;"	f	namespace:boost::signals2::detail	signature:()
increment	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        void increment()$/;"	f	class:boost::signals2::detail::slot_call_iterator_t	access:public	signature:()
inherited	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        inherited;$/;"	t	class:boost::signals2::detail::slot_call_iterator_t	access:private
initialized_	/usr/include/boost/signals2/deconstruct.hpp	/^    bool initialized_;$/;"	m	class:boost::signals2::detail::deconstruct_deleter	access:private
insert	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        iterator insert( const_iterator before, optimized_const_reference x ) \/\/ basic$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const_iterator before, optimized_const_reference x )
insert	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void insert( const_iterator before, size_type n,$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const_iterator before, size_type n, optimized_const_reference x )
insert	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void insert( const_iterator before,$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const_iterator before, ForwardIterator begin_arg, ForwardIterator end_arg )
insert_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void insert_impl( const_iterator before, I begin_arg, I end_arg,$/;"	f	namespace:boost::signals2::detail	signature:( const_iterator before, I begin_arg, I end_arg, std::forward_iterator_tag )
insert_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void insert_impl( const_iterator before, I begin_arg, I end_arg,$/;"	f	namespace:boost::signals2::detail	signature:( const_iterator before, I begin_arg, I end_arg, std::input_iterator_tag )
is_on_stack	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        bool is_on_stack() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
is_signal	/usr/include/boost/signals2/detail/signals_common.hpp	/^      class is_signal: public mpl::bool_<is_base_of<signal_base, T>::value>$/;"	c	namespace:boost::signals2::detail	inherits:mpl::bool_
is_valid	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        bool is_valid() const \/\/ invariant$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
iter	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        mutable Iterator iter;$/;"	m	class:boost::signals2::detail::slot_call_iterator_t	access:private
iterator	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef pointer                                  iterator;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
iterator	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef typename list_type::iterator iterator;$/;"	t	class:boost::signals2::detail::grouped_list	access:public
keywords	/usr/include/boost/signals2/signal_type.hpp	/^    namespace keywords$/;"	n	namespace:boost::signals2
last_value	/usr/include/boost/signals2/last_value.hpp	/^    class last_value {$/;"	c	namespace:boost::signals2
last_value	/usr/include/boost/signals2/last_value.hpp	/^    class last_value<void> {$/;"	c	namespace:boost::signals2
list_type	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef std::list<ValueType> list_type;$/;"	t	class:boost::signals2::detail::grouped_list	access:private
local_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^                                                         local_buffer;$/;"	t	class:boost::signals2::detail::auto_buffer	access:private
lock	/usr/include/boost/signals2/connection.hpp	/^        virtual void lock() = 0;$/;"	p	class:boost::signals2::detail::connection_body_base	access:public	signature:()
lock	/usr/include/boost/signals2/connection.hpp	/^        virtual void lock()$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:()
lock	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_shared_ptr lock() const$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:() const
lock	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual foreign_void_shared_ptr lock() const = 0;$/;"	p	struct:boost::signals2::detail::foreign_weak_ptr_impl_base	access:public	signature:() const
lock	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual foreign_void_shared_ptr lock() const$/;"	f	class:boost::signals2::detail::foreign_weak_ptr_impl	access:public	signature:() const
lock	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    void lock()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
lock	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    void lock()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
lock	/usr/include/boost/signals2/dummy_mutex.hpp	/^      void lock() {}$/;"	f	class:boost::signals2::dummy_mutex	access:public	signature:()
lock	/usr/include/boost/signals2/slot_base.hpp	/^      locked_container_type lock() const$/;"	f	class:boost::signals2::slot_base	access:public	signature:() const
lock_next_callable	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        void lock_next_callable() const$/;"	f	class:boost::signals2::detail::slot_call_iterator_t	access:private	signature:() const
lock_pimpl	/usr/include/boost/signals2/signal_base.hpp	/^      virtual shared_ptr<void> lock_pimpl() const = 0;$/;"	p	class:boost::signals2::signal_base	access:protected	signature:() const
lock_type	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        typedef unique_lock<connection_body_base> lock_type;$/;"	t	class:boost::signals2::detail::slot_call_iterator_t	access:private
lock_weak_ptr_visitor	/usr/include/boost/signals2/slot_base.hpp	/^      class lock_weak_ptr_visitor$/;"	c	namespace:boost::signals2::detail
locked_container_type	/usr/include/boost/signals2/slot_base.hpp	/^      typedef std::vector<detail::void_shared_ptr_variant> locked_container_type;$/;"	t	class:boost::signals2::slot_base	access:public
lower_bound	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        iterator lower_bound(const group_key_type &key)$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_type &key)
m_	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    pthread_mutex_t m_;$/;"	m	class:boost::signals2::mutex	access:private
m_insert	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        void m_insert(const map_iterator &map_it, const group_key_type &key, const ValueType &value)$/;"	f	class:boost::signals2::detail::grouped_list	access:private	signature:(const map_iterator &map_it, const group_key_type &key, const ValueType &value)
m_invoke	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^          R m_invoke(T *, Func &func, unsigned_meta_array<indices...>, BOOST_SIGNALS2_TUPLE<Args...> args) const$/;"	f	class:boost::signals2::detail::call_with_tuple_args	access:private	signature:(T *, Func &func, unsigned_meta_array<indices...>, BOOST_SIGNALS2_TUPLE<Args...> args) const
m_invoke	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^          R m_invoke(void *, Func &func, unsigned_meta_array<indices...>, BOOST_SIGNALS2_TUPLE<Args...> args) const$/;"	f	class:boost::signals2::detail::call_with_tuple_args	access:private	signature:(void *, Func &func, unsigned_meta_array<indices...>, BOOST_SIGNALS2_TUPLE<Args...> args) const
m_invoke	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^          result_type m_invoke(const ConnectionBodyType &connectionBody, ...) const$/;"	f	class:boost::signals2::detail::variadic_slot_invoker	access:private	signature:(const ConnectionBodyType &connectionBody, ...) const
m_invoke	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        result_type m_invoke(const ConnectionBodyType &connectionBody,$/;"	f	class:boost::signals2::detail::variadic_slot_invoker	access:private	signature:(const ConnectionBodyType &connectionBody, const void_type *) const
m_visit_not_function_pointer	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_not_function_pointer(const T &, const mpl::bool_<false> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T &, const mpl::bool_<false> &) const
m_visit_not_function_pointer	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_not_function_pointer(const T *t, const mpl::bool_<true> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T *t, const mpl::bool_<true> &) const
m_visit_pointer	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_pointer(const T &t, const mpl::bool_<false> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T &t, const mpl::bool_<false> &) const
m_visit_pointer	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_pointer(const T &t, const mpl::bool_<true> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T &t, const mpl::bool_<true> &) const
m_visit_reference_wrapper	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_reference_wrapper(const T &t, const mpl::bool_<false> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T &t, const mpl::bool_<false> &) const
m_visit_reference_wrapper	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_reference_wrapper(const reference_wrapper<T> &t, const mpl::bool_<true> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const reference_wrapper<T> &t, const mpl::bool_<true> &) const
m_visit_signal	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_signal(const T &t, const mpl::bool_<false> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T &t, const mpl::bool_<false> &) const
m_visit_signal	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void m_visit_signal(const T *signal, const mpl::bool_<true> &) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:private	signature:(const T *signal, const mpl::bool_<true> &) const
make_unsigned_meta_array	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^      template<> class make_unsigned_meta_array<0>$/;"	c	namespace:boost::signals2::detail
make_unsigned_meta_array	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^      template<> class make_unsigned_meta_array<1>$/;"	c	namespace:boost::signals2::detail
make_unsigned_meta_array	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^      template<unsigned n> class make_unsigned_meta_array$/;"	c	namespace:boost::signals2::detail
map_iterator	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef typename map_type::iterator map_iterator;$/;"	t	class:boost::signals2::detail::grouped_list	access:private
map_type	/usr/include/boost/signals2/detail/slot_groups.hpp	/^          > map_type;$/;"	t	class:boost::signals2::detail::grouped_list	access:private
members_	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        members_type members_;$/;"	m	namespace:boost::signals2::detail	access:private
members_type	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^            members_type( size_type capacity )$/;"	f	struct:boost::signals2::detail::members_type	access:public	signature:( size_type capacity )
members_type	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        struct members_type : storage \/* to enable EBO *\/$/;"	s	namespace:boost::signals2::detail	inherits:storage	access:private
move_to_new_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        pointer move_to_new_buffer( size_type new_capacity, const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type new_capacity, const boost::false_type& )
move_to_new_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        pointer move_to_new_buffer( size_type new_capacity, const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type new_capacity, const boost::true_type& )
mutex	/usr/include/boost/signals2/detail/lwm_nop.hpp	/^class mutex: public dummy_mutex$/;"	c	namespace:boost::signals2	inherits:dummy_mutex
mutex	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    mutex()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
mutex	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    mutex(mutex const &);$/;"	p	class:boost::signals2::mutex	access:private	signature:(mutex const &)
mutex	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^class mutex$/;"	c	namespace:boost::signals2
mutex	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    mutex()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
mutex	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    mutex(mutex const &);$/;"	p	class:boost::signals2::mutex	access:private	signature:(mutex const &)
mutex	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^class mutex$/;"	c	namespace:boost::signals2
mutex_type	/usr/include/boost/signals2/connection.hpp	/^        typedef Mutex mutex_type;$/;"	t	class:boost::signals2::detail::connection_body	access:public
mutex_type	/usr/include/boost/signals2/signal_type.hpp	/^        parameter::value_type<args, keywords::tag::mutex_type, mutex>::type mutex_type;$/;"	t	class:boost::signals2::signal_type	access:public
new_capacity	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static SizeType new_capacity( SizeType capacity )$/;"	f	struct:boost::signals2::detail::default_grow_policy	access:public	signature:( SizeType capacity )
new_capacity_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        size_type new_capacity_impl( size_type n )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n )
no_slots_error	/usr/include/boost/signals2/last_value.hpp	/^    class no_slots_error: public std::exception$/;"	c	namespace:boost::signals2	inherits:std::exception
nolock_disconnect	/usr/include/boost/signals2/connection.hpp	/^        void nolock_disconnect()$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:()
nolock_grab_tracked_objects	/usr/include/boost/signals2/connection.hpp	/^          void nolock_grab_tracked_objects(OutputIterator inserter) const$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:(OutputIterator inserter) const
nolock_nograb_blocked	/usr/include/boost/signals2/connection.hpp	/^        bool nolock_nograb_blocked() const$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:() const
nolock_nograb_connected	/usr/include/boost/signals2/connection.hpp	/^        bool nolock_nograb_connected() const {return _connected;}$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:() const
nolock_slot_expired	/usr/include/boost/signals2/connection.hpp	/^        bool nolock_slot_expired() const$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:() const
nonvoid	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      struct nonvoid {$/;"	s	namespace:boost::signals2::detail
nonvoid	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      struct nonvoid<void> {$/;"	s	namespace:boost::signals2::detail
null_deleter	/usr/include/boost/signals2/connection.hpp	/^    extern inline void null_deleter(const void*) {}$/;"	f	namespace:boost::signals2	signature:(const void*)
null_output_iterator	/usr/include/boost/signals2/detail/null_output_iterator.hpp	/^      typedef boost::function_output_iterator<does_nothing> null_output_iterator;$/;"	t	namespace:boost::signals2::detail
one_sided_swap	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void one_sided_swap( auto_buffer& temp ) \/\/ nothrow$/;"	f	namespace:boost::signals2::detail	signature:( auto_buffer& temp )
operator !=	/usr/include/boost/signals2/connection.hpp	/^      bool operator!=(const connection& other) const$/;"	f	class:boost::signals2::connection	access:public	signature:(const connection& other) const
operator !=	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline bool operator!=( const auto_buffer<T,SBP,GP,A>& l,$/;"	f	namespace:boost::signals2	signature:( const auto_buffer<T,SBP,GP,A>& l, const auto_buffer<T,SBP,GP,A>& r )
operator ()	/usr/include/boost/signals2/deconstruct.hpp	/^    void operator()( T * )$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:public	signature:( T * )
operator ()	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^      void operator()(const T *ptr) const$/;"	f	class:boost::signals2::predestructing_deleter	access:public	signature:(const T *ptr) const
operator ()	/usr/include/boost/signals2/detail/null_output_iterator.hpp	/^          void operator()(const T&) const$/;"	f	class:boost::signals2::detail::does_nothing	access:public	signature:(const T&) const
operator ()	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^          result_type operator()(Combiner &combiner,$/;"	f	class:boost::signals2::detail::combiner_invoker	access:public	signature:(Combiner &combiner, InputIterator first, InputIterator last) const
operator ()	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        bool operator ()(const typename group_key<Group>::type &key1, const typename group_key<Group>::type &key2) const$/;"	f	class:boost::signals2::detail::group_key_less	access:public	signature:(const typename group_key<Group>::type &key1, const typename group_key<Group>::type &key2) const
operator ()	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        void operator()(const T& t) const$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:public	signature:(const T& t) const
operator ()	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^          R operator()(Func &func, BOOST_SIGNALS2_TUPLE<Args...> args) const$/;"	f	class:boost::signals2::detail::call_with_tuple_args	access:public	signature:(Func &func, BOOST_SIGNALS2_TUPLE<Args...> args) const
operator ()	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^          result_type operator ()(const ConnectionBodyType &connectionBody) const$/;"	f	class:boost::signals2::detail::variadic_slot_invoker	access:public	signature:(const ConnectionBodyType &connectionBody) const
operator ()	/usr/include/boost/signals2/last_value.hpp	/^        result_type operator()(InputIterator first, InputIterator last) const$/;"	f	class:boost::signals2::last_value	access:public	signature:(InputIterator first, InputIterator last) const
operator ()	/usr/include/boost/signals2/last_value.hpp	/^      T operator()(InputIterator first, InputIterator last) const$/;"	f	class:boost::signals2::last_value	access:public	signature:(InputIterator first, InputIterator last) const
operator ()	/usr/include/boost/signals2/optional_last_value.hpp	/^        optional<T> operator()(InputIterator first, InputIterator last) const$/;"	f	class:boost::signals2::optional_last_value	access:public	signature:(InputIterator first, InputIterator last) const
operator ()	/usr/include/boost/signals2/optional_last_value.hpp	/^        result_type operator()(InputIterator first, InputIterator last) const$/;"	f	class:boost::signals2::optional_last_value	access:public	signature:(InputIterator first, InputIterator last) const
operator ()	/usr/include/boost/signals2/slot_base.hpp	/^        bool operator()(const WeakPtr &wp) const$/;"	f	class:boost::signals2::detail::expired_weak_ptr_visitor	access:public	signature:(const WeakPtr &wp) const
operator ()	/usr/include/boost/signals2/slot_base.hpp	/^        result_type operator()(const WeakPtr &wp) const$/;"	f	class:boost::signals2::detail::lock_weak_ptr_visitor	access:public	signature:(const WeakPtr &wp) const
operator <	/usr/include/boost/signals2/connection.hpp	/^      bool operator<(const connection& other) const$/;"	f	class:boost::signals2::connection	access:public	signature:(const connection& other) const
operator <	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline bool operator<( const auto_buffer<T,SBP,GP,A>& l,$/;"	f	namespace:boost::signals2	signature:( const auto_buffer<T,SBP,GP,A>& l, const auto_buffer<T,SBP,GP,A>& r )
operator <=	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline bool operator<=( const auto_buffer<T,SBP,GP,A>& l,$/;"	f	namespace:boost::signals2	signature:( const auto_buffer<T,SBP,GP,A>& l, const auto_buffer<T,SBP,GP,A>& r )
operator =	/usr/include/boost/signals2/connection.hpp	/^      scoped_connection& operator=(const connection &rhs)$/;"	f	class:boost::signals2::scoped_connection	access:public	signature:(const connection &rhs)
operator =	/usr/include/boost/signals2/connection.hpp	/^      scoped_connection& operator=(const scoped_connection &rhs);$/;"	p	class:boost::signals2::scoped_connection	access:private	signature:(const scoped_connection &rhs)
operator =	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        auto_buffer& operator=( const auto_buffer& r ) \/\/ basic$/;"	f	namespace:boost::signals2::detail	access:public	signature:( const auto_buffer& r )
operator =	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_shared_ptr & operator=(const foreign_void_shared_ptr &other)$/;"	f	class:boost::signals2::detail::foreign_void_shared_ptr	access:public	signature:(const foreign_void_shared_ptr &other)
operator =	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        foreign_void_weak_ptr & operator=(const foreign_void_weak_ptr &other)$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:(const foreign_void_weak_ptr &other)
operator =	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    mutex & operator=(mutex const &);$/;"	p	class:boost::signals2::mutex	access:private	signature:(mutex const &)
operator =	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    mutex & operator=(mutex const &);$/;"	p	class:boost::signals2::mutex	access:private	signature:(mutex const &)
operator =	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        grouped_list& operator=(const grouped_list &other);$/;"	p	class:boost::signals2::detail::grouped_list	access:private	signature:(const grouped_list &other)
operator =	/usr/include/boost/signals2/trackable.hpp	/^      trackable& operator=(const trackable &)$/;"	f	class:boost::signals2::trackable	access:protected	signature:(const trackable &)
operator ==	/usr/include/boost/signals2/connection.hpp	/^      bool operator==(const connection& other) const$/;"	f	class:boost::signals2::connection	access:public	signature:(const connection& other) const
operator ==	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline bool operator==( const auto_buffer<T,SBP,GP,A>& l,$/;"	f	namespace:boost::signals2	signature:( const auto_buffer<T,SBP,GP,A>& l, const auto_buffer<T,SBP,GP,A>& r )
operator >	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline bool operator>( const auto_buffer<T,SBP,GP,A>& l,$/;"	f	namespace:boost::signals2	signature:( const auto_buffer<T,SBP,GP,A>& l, const auto_buffer<T,SBP,GP,A>& r )
operator >=	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline bool operator>=( const auto_buffer<T,SBP,GP,A>& l,$/;"	f	namespace:boost::signals2	signature:( const auto_buffer<T,SBP,GP,A>& l, const auto_buffer<T,SBP,GP,A>& r )
operator []	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        optimized_const_reference operator[]( size_type n ) const$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n ) const
operator []	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        reference operator[]( size_type n )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
operator const shared_ptr<T> &	/usr/include/boost/signals2/deconstruct.hpp	/^    operator const shared_ptr<T> & () const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:() const
optional_last_value	/usr/include/boost/signals2/optional_last_value.hpp	/^      class optional_last_value$/;"	c	namespace:boost::signals2
optional_last_value	/usr/include/boost/signals2/optional_last_value.hpp	/^      class optional_last_value<void>$/;"	c	namespace:boost::signals2
parameter_spec	/usr/include/boost/signals2/signal_type.hpp	/^        > parameter_spec;$/;"	t	class:boost::signals2::signal_type	access:private
pointer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef T*                                       pointer;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
pop_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void pop_back()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
pop_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void pop_back_n( size_type n )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(Args && ... args)$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(Args && .... args)
postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1) const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1) const
postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2) const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2) const
postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3) const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3) const
postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4) const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4) const
postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5) const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5) const
postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5,$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6) const
postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5,$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7) const
postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5,$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8) const
postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^      const shared_ptr<T>& postconstruct(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5,$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:(const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8, const A9 &a9) const
postconstruct	/usr/include/boost/signals2/deconstruct.hpp	/^    const shared_ptr<T>& postconstruct() const$/;"	f	class:boost::signals2::postconstructor_invoker	access:public	signature:() const
postconstruct	/usr/include/boost/signals2/postconstructible.hpp	/^        virtual void postconstruct() = 0;$/;"	p	class:boost::signals2::postconstructible_adl_barrier::postconstructible	access:protected	signature:()
postconstructible	/usr/include/boost/signals2/postconstructible.hpp	/^        postconstructible() {}$/;"	f	class:boost::signals2::postconstructible_adl_barrier::postconstructible	access:protected	signature:()
postconstructible	/usr/include/boost/signals2/postconstructible.hpp	/^      class postconstructible$/;"	c	namespace:boost::signals2::postconstructible_adl_barrier
postconstructible_adl_barrier	/usr/include/boost/signals2/postconstructible.hpp	/^    namespace postconstructible_adl_barrier$/;"	n	namespace:boost::signals2
postconstructor_invoker	/usr/include/boost/signals2/deconstruct.hpp	/^    class postconstructor_invoker$/;"	c	namespace:boost::signals2
postconstructor_invoker	/usr/include/boost/signals2/deconstruct.hpp	/^    postconstructor_invoker(const shared_ptr<T> & sp):$/;"	f	class:boost::signals2::postconstructor_invoker	access:private	signature:(const shared_ptr<T> & sp)
predestruct	/usr/include/boost/signals2/predestructible.hpp	/^        virtual void predestruct() = 0;$/;"	p	class:boost::signals2::predestructible_adl_barrier::predestructible	access:public	signature:()
predestructible	/usr/include/boost/signals2/predestructible.hpp	/^        predestructible() {}$/;"	f	class:boost::signals2::predestructible_adl_barrier::predestructible	access:protected	signature:()
predestructible	/usr/include/boost/signals2/predestructible.hpp	/^      class predestructible$/;"	c	namespace:boost::signals2::predestructible_adl_barrier
predestructible_adl_barrier	/usr/include/boost/signals2/predestructible.hpp	/^    namespace predestructible_adl_barrier$/;"	n	namespace:boost::signals2
predestructing_deleter	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^    template<typename T> class predestructing_deleter$/;"	c	namespace:boost::signals2
push_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void push_back( ForwardIterator begin_arg, ForwardIterator end_arg )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( ForwardIterator begin_arg, ForwardIterator end_arg )
push_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void push_back( optimized_const_reference x )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( optimized_const_reference x )
push_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void push_back()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
push_back	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        void push_back(const group_key_type &key, const ValueType &value)$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_type &key, const ValueType &value)
push_front	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        void push_front(const group_key_type &key, const ValueType &value)$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_type &key, const ValueType &value)
rbegin	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_reverse_iterator rbegin() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
rbegin	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        reverse_iterator rbegin()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
reference	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef T&                                       reference;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
reference_tag	/usr/include/boost/signals2/detail/signals_common.hpp	/^      struct reference_tag {};$/;"	s	namespace:boost::signals2::detail
release	/usr/include/boost/signals2/connection.hpp	/^      connection release()$/;"	f	class:boost::signals2::scoped_connection	access:public	signature:()
rend	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        const_reverse_iterator rend() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
rend	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        reverse_iterator rend()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
replace_slot_function	/usr/include/boost/signals2/detail/replace_slot_function.hpp	/^        ResultSlot replace_slot_function(const SlotIn &slot_in, const SlotFunction &fun)$/;"	f	namespace:boost::signals2::detail	signature:(const SlotIn &slot_in, const SlotFunction &fun)
reserve	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void reserve( size_type n ) \/\/ strong$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
reserve_impl	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void reserve_impl( size_type new_capacity )$/;"	f	namespace:boost::signals2::detail	signature:( size_type new_capacity )
reserve_precisely	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void reserve_precisely( size_type n )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
result	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        optional<ResultType> result;$/;"	m	class:boost::signals2::detail::slot_call_iterator_cache	access:public
result_type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^        typedef R result_type;$/;"	t	class:boost::signals2::detail::combiner_invoker	access:public
result_type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^        typedef result_type_wrapper<void>::type result_type;$/;"	t	class:boost::signals2::detail::combiner_invoker	access:public
result_type	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        typedef typename Function::result_type result_type;$/;"	t	class:boost::signals2::detail::slot_call_iterator_t	access:private
result_type	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        typedef R result_type;$/;"	t	class:boost::signals2::detail::call_with_tuple_args	access:public
result_type	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        typedef R result_type;$/;"	t	class:boost::signals2::detail::variadic_slot_invoker	access:public
result_type	/usr/include/boost/signals2/last_value.hpp	/^      typedef T result_type;$/;"	t	class:boost::signals2::last_value	access:public
result_type	/usr/include/boost/signals2/last_value.hpp	/^      typedef void result_type;$/;"	t	class:boost::signals2::last_value	access:public
result_type	/usr/include/boost/signals2/optional_last_value.hpp	/^      typedef optional<T> result_type;$/;"	t	class:boost::signals2::optional_last_value	access:public
result_type	/usr/include/boost/signals2/optional_last_value.hpp	/^      typedef void result_type;$/;"	t	class:boost::signals2::optional_last_value	access:public
result_type	/usr/include/boost/signals2/slot_base.hpp	/^        typedef bool result_type;$/;"	t	class:boost::signals2::detail::expired_weak_ptr_visitor	access:public
result_type	/usr/include/boost/signals2/slot_base.hpp	/^        typedef void_shared_ptr_variant result_type;$/;"	t	class:boost::signals2::detail::lock_weak_ptr_visitor	access:public
result_type_wrapper	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      struct result_type_wrapper {$/;"	s	namespace:boost::signals2::detail
result_type_wrapper	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      struct result_type_wrapper<void> {$/;"	s	namespace:boost::signals2::detail
reverse_iterator	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef boost::reverse_iterator<iterator>        reverse_iterator;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
scoped_connection	/usr/include/boost/signals2/connection.hpp	/^      scoped_connection() {}$/;"	f	class:boost::signals2::scoped_connection	access:public	signature:()
scoped_connection	/usr/include/boost/signals2/connection.hpp	/^      scoped_connection(const connection &other):$/;"	f	class:boost::signals2::scoped_connection	access:public	signature:(const connection &other)
scoped_connection	/usr/include/boost/signals2/connection.hpp	/^      scoped_connection(const scoped_connection &other);$/;"	p	class:boost::signals2::scoped_connection	access:private	signature:(const scoped_connection &other)
scoped_connection	/usr/include/boost/signals2/connection.hpp	/^    class scoped_connection: public connection$/;"	c	namespace:boost::signals2	inherits:connection
set_group_key	/usr/include/boost/signals2/connection.hpp	/^        void set_group_key(const GroupKey &key) {_group_key = key;}$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:(const GroupKey &key)
set_initialized	/usr/include/boost/signals2/deconstruct.hpp	/^    void set_initialized()$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:public	signature:()
shared_connection_block	/usr/include/boost/signals2/shared_connection_block.hpp	/^      shared_connection_block(const signals2::connection &conn = signals2::connection(),$/;"	f	class:boost::signals2::shared_connection_block	access:public	signature:(const signals2::connection &conn = signals2::connection(), bool initially_blocked = true)
shared_connection_block	/usr/include/boost/signals2/shared_connection_block.hpp	/^    class shared_connection_block$/;"	c	namespace:boost::signals2
shared_ptr_traits	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    template<typename SharedPtr> struct shared_ptr_traits$/;"	s	namespace:boost::signals2
shared_ptr_traits	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    template<typename T> struct shared_ptr_traits<boost::shared_ptr<T> >$/;"	s	namespace:boost::signals2
shared_ptr_traits	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    template<typename T> struct shared_ptr_traits<std::shared_ptr<T> >$/;"	s	namespace:boost::signals2
shared_type	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      typedef boost::shared_ptr<T> shared_type;$/;"	t	struct:boost::signals2::weak_ptr_traits	access:public
shared_type	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      typedef std::shared_ptr<T> shared_type;$/;"	t	struct:boost::signals2::weak_ptr_traits	access:public
should_shrink	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static bool should_shrink( SizeType size, SizeType capacity )$/;"	f	struct:boost::signals2::detail::default_grow_policy	access:public	signature:( SizeType size, SizeType capacity )
shrink_to_fit	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void shrink_to_fit()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
signal	/usr/include/boost/signals2/preprocessed_signal.hpp	/^      signal(const Combiner &combiner_arg = Combiner(), const GroupCompare &group_compare = GroupCompare()):$/;"	f	class:boost::signals2::signal	access:public	signature:(const Combiner &combiner_arg = Combiner(), const GroupCompare &group_compare = GroupCompare())
signal	/usr/include/boost/signals2/preprocessed_signal.hpp	/^    class signal: public detail::signalN<function_traits<Signature>::arity,$/;"	c	namespace:boost::signals2	inherits:detail::signalN::type
signalN	/usr/include/boost/signals2/detail/signal_template.hpp	/^      class signalN<BOOST_SIGNALS2_NUM_ARGS, Signature, Combiner, Group,$/;"	c	namespace:boost::signals2::detail
signal_base	/usr/include/boost/signals2/detail/signal_template.hpp	/^      BOOST_SIGNALS2_SIGNAL_TEMPLATE_SPECIALIZATION: public signal_base,$/;"	m	namespace:boost::signals2	access:public
signal_base	/usr/include/boost/signals2/signal_base.hpp	/^    class signal_base : public noncopyable$/;"	c	namespace:boost::signals2	inherits:noncopyable
signal_or_value	/usr/include/boost/signals2/detail/signals_common.hpp	/^          signal_tag, value_tag>::type signal_or_value;$/;"	t	class:boost::signals2::detail::get_slot_tag	access:private
signal_tag	/usr/include/boost/signals2/detail/signals_common.hpp	/^      struct signal_tag {};$/;"	s	namespace:boost::signals2::detail
signal_type	/usr/include/boost/signals2/signal_type.hpp	/^    class signal_type$/;"	c	namespace:boost::signals2
signals2	/usr/include/boost/signals2/connection.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/deconstruct.hpp	/^namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/deconstruct_ptr.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/lwm_nop.hpp	/^namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/null_output_iterator.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/preprocessed_arg_type.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/preprocessed_arg_type_template.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/replace_slot_function.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/signal_template.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/signals_common.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/slot_groups.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/slot_template.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/unique_lock.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/dummy_mutex.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/expired_slot.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/last_value.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/optional_last_value.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/postconstructible.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/predestructible.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/preprocessed_signal.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/preprocessed_slot.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/shared_connection_block.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/signal_base.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/signal_type.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/slot_base.hpp	/^  namespace signals2$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/trackable.hpp	/^  namespace signals2 {$/;"	n	namespace:boost
signals2	/usr/include/boost/signals2/variadic_signal.hpp	/^  namespace signals2$/;"	n	namespace:boost
signature_type	/usr/include/boost/signals2/signal_type.hpp	/^        signature_type;$/;"	t	class:boost::signals2::signal_type	access:public
signature_type	/usr/include/boost/signals2/signal_type.hpp	/^      typedef Signature signature_type;$/;"	t	class:boost::signals2::signal_type	access:public
size	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        size_type size() const$/;"	f	namespace:boost::signals2::detail	access:public	signature:() const
size_	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        size_type    size_;$/;"	m	namespace:boost::signals2::detail	access:private
size_type	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef typename Allocator::size_type            size_type;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
slot	/usr/include/boost/signals2/connection.hpp	/^        SlotType slot;$/;"	m	class:boost::signals2::detail::connection_body	access:public
slot	/usr/include/boost/signals2/preprocessed_slot.hpp	/^      slot(const F& f): base_type(f)$/;"	f	class:boost::signals2::slot	access:public	signature:(const F& f)
slot	/usr/include/boost/signals2/preprocessed_slot.hpp	/^    class slot: public detail::slotN<function_traits<Signature>::arity,$/;"	c	namespace:boost::signals2	inherits:detail::slotN::type
slotN	/usr/include/boost/signals2/detail/slot_template.hpp	/^      class slotN<BOOST_SIGNALS2_NUM_ARGS, Signature, SlotFunction>$/;"	c	namespace:boost::signals2::detail
slot_	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        mutable slot_base * slot_;$/;"	m	class:boost::signals2::detail::tracked_objects_visitor	access:private
slot_base	/usr/include/boost/signals2/detail/slot_template.hpp	/^      : public slot_base, public detail::BOOST_SIGNALS2_STD_FUNCTIONAL_BASE(R)$/;"	m	namespace:boost::signals2	access:public
slot_base	/usr/include/boost/signals2/slot_base.hpp	/^    class slot_base$/;"	c	namespace:boost::signals2
slot_call_iterator_cache	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        class slot_call_iterator_cache$/;"	c	namespace:boost::signals2::detail
slot_call_iterator_cache	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        slot_call_iterator_cache(const Function &f_arg):$/;"	f	class:boost::signals2::detail::slot_call_iterator_cache	access:public	signature:(const Function &f_arg)
slot_call_iterator_t	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        slot_call_iterator_t(Iterator iter_in, Iterator end_in,$/;"	f	class:boost::signals2::detail::slot_call_iterator_t	access:public	signature:(Iterator iter_in, Iterator end_in, slot_call_iterator_cache<result_type, Function> &c)
slot_call_iterator_t	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^      class slot_call_iterator_t$/;"	c	namespace:boost::signals2::detail	inherits:boost::iterator_facade
slot_function_type	/usr/include/boost/signals2/signal_type.hpp	/^        slot_function_type;$/;"	t	class:boost::signals2::signal_type	access:public
slot_meta_group	/usr/include/boost/signals2/detail/slot_groups.hpp	/^      enum slot_meta_group {front_ungrouped_slots, grouped_slots, back_ungrouped_slots};$/;"	g	namespace:boost::signals2::detail
sp_aligned_storage	/usr/include/boost/signals2/deconstruct.hpp	/^template< std::size_t N, std::size_t A > struct sp_aligned_storage$/;"	s	namespace:boost::signals2::detail
std_functional_base	/usr/include/boost/signals2/detail/preprocessed_arg_type.hpp	/^      struct std_functional_base$/;"	s	namespace:boost::signals2::detail
std_functional_base	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^        struct std_functional_base$/;"	s	namespace:boost::signals2::detail
std_functional_base	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^        struct std_functional_base<R, T1, T2>: public std::binary_function<T1, T2, R>$/;"	s	namespace:boost::signals2::detail	inherits:std::binary_function
std_functional_base	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^        struct std_functional_base<R, T1>: public std::unary_function<T1, R>$/;"	s	namespace:boost::signals2::detail	inherits:std::unary_function
storage	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^                               storage;$/;"	t	namespace:boost::signals2::detail	access:private
storage_	/usr/include/boost/signals2/deconstruct.hpp	/^    storage_type storage_;$/;"	m	class:boost::signals2::detail::deconstruct_deleter	access:private
storage_type	/usr/include/boost/signals2/deconstruct.hpp	/^    typedef typename sp_aligned_storage< sizeof( T ), ::boost::alignment_of< T >::value >::type storage_type;$/;"	t	class:boost::signals2::detail::deconstruct_deleter	access:private
store_n_bytes	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    struct store_n_bytes$/;"	s	namespace:boost::signals2::detail
store_n_objects	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    struct store_n_objects$/;"	s	namespace:boost::signals2::detail
swap	/usr/include/boost/signals2/connection.hpp	/^      void swap(connection &other)$/;"	f	class:boost::signals2::connection	access:public	signature:(connection &other)
swap	/usr/include/boost/signals2/connection.hpp	/^    inline void swap(connection &conn1, connection &conn2)$/;"	f	namespace:boost::signals2	signature:(connection &conn1, connection &conn2)
swap	/usr/include/boost/signals2/connection.hpp	/^    inline void swap(scoped_connection &conn1, scoped_connection &conn2)$/;"	f	namespace:boost::signals2	signature:(scoped_connection &conn1, scoped_connection &conn2)
swap	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void swap( auto_buffer& r )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( auto_buffer& r )
swap	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^    inline void swap( auto_buffer<T,SBP,GP,A>& l, auto_buffer<T,SBP,GP,A>& r )$/;"	f	namespace:boost::signals2	signature:( auto_buffer<T,SBP,GP,A>& l, auto_buffer<T,SBP,GP,A>& r )
swap	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        void swap(foreign_void_shared_ptr &other)$/;"	f	class:boost::signals2::detail::foreign_void_shared_ptr	access:public	signature:(foreign_void_shared_ptr &other)
swap	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        void swap(foreign_void_weak_ptr &other)$/;"	f	class:boost::signals2::detail::foreign_void_weak_ptr	access:public	signature:(foreign_void_weak_ptr &other)
swap_helper	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void swap_helper( auto_buffer& l, auto_buffer& r,$/;"	f	namespace:boost::signals2::detail	signature:( auto_buffer& l, auto_buffer& r, const boost::false_type& )
swap_helper	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        static void swap_helper( auto_buffer& l, auto_buffer& r,$/;"	f	namespace:boost::signals2::detail	signature:( auto_buffer& l, auto_buffer& r, const boost::true_type& )
tag_type	/usr/include/boost/signals2/detail/signals_common.hpp	/^      tag_type(const F&)$/;"	f	namespace:boost::signals2::detail	signature:(const F&)
track_signal	/usr/include/boost/signals2/slot_base.hpp	/^      void track_signal(const signal_base &signal)$/;"	f	class:boost::signals2::slot_base	access:protected	signature:(const signal_base &signal)
trackable	/usr/include/boost/signals2/trackable.hpp	/^      trackable(): _tracked_ptr(static_cast<int*>(0)) {}$/;"	f	class:boost::signals2::trackable	access:protected	signature:()
trackable	/usr/include/boost/signals2/trackable.hpp	/^      trackable(const trackable &): _tracked_ptr(static_cast<int*>(0)) {}$/;"	f	class:boost::signals2::trackable	access:protected	signature:(const trackable &)
trackable	/usr/include/boost/signals2/trackable.hpp	/^    class trackable {$/;"	c	namespace:boost::signals2
tracked_container_type	/usr/include/boost/signals2/slot_base.hpp	/^      typedef std::vector<detail::void_weak_ptr_variant> tracked_container_type;$/;"	t	class:boost::signals2::slot_base	access:public
tracked_objects	/usr/include/boost/signals2/slot_base.hpp	/^      const tracked_container_type& tracked_objects() const {return _tracked_objects;}$/;"	f	class:boost::signals2::slot_base	access:public	signature:() const
tracked_objects_visitor	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^        tracked_objects_visitor(slot_base *slot) : slot_(slot)$/;"	f	class:boost::signals2::detail::tracked_objects_visitor	access:public	signature:(slot_base *slot)
tracked_objects_visitor	/usr/include/boost/signals2/detail/tracked_objects_visitor.hpp	/^      class tracked_objects_visitor$/;"	c	namespace:boost::signals2::detail
tracked_ptrs	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        tracked_ptrs_type tracked_ptrs;$/;"	m	class:boost::signals2::detail::slot_call_iterator_cache	access:public
tracked_ptrs_type	/usr/include/boost/signals2/detail/slot_call_iterator.hpp	/^        typedef auto_buffer<void_shared_ptr_variant, store_n_objects<10> > tracked_ptrs_type;$/;"	t	class:boost::signals2::detail::slot_call_iterator_cache	access:public
try_lock	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    bool try_lock()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
try_lock	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    bool try_lock()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
try_lock	/usr/include/boost/signals2/dummy_mutex.hpp	/^      bool try_lock() {return true;}$/;"	f	class:boost::signals2::dummy_mutex	access:public	signature:()
type	/usr/include/boost/signals2/deconstruct.hpp	/^    union type$/;"	u	struct:boost::signals2::detail::sp_aligned_storage	access:public
type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^        typedef R type;$/;"	t	struct:boost::signals2::detail::nonvoid	access:public
type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^        typedef R type;$/;"	t	struct:boost::signals2::detail::result_type_wrapper	access:public
type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^        typedef void_type type;$/;"	t	struct:boost::signals2::detail::nonvoid	access:public
type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^        typedef void_type type;$/;"	t	struct:boost::signals2::detail::result_type_wrapper	access:public
type	/usr/include/boost/signals2/detail/signal_template.hpp	/^          GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex> type;$/;"	t	class:boost::signals2::detail::signalN	access:public
type	/usr/include/boost/signals2/detail/signals_common.hpp	/^                            signal_or_value>::type type;$/;"	t	class:boost::signals2::detail::get_slot_tag	access:public
type	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        typedef std::pair<enum slot_meta_group, boost::optional<Group> > type;$/;"	t	struct:boost::signals2::detail::group_key	access:public
type	/usr/include/boost/signals2/detail/slot_template.hpp	/^          SlotFunction> type;$/;"	t	class:boost::signals2::detail::slotN	access:public
type	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^        typedef T type;$/;"	t	class:boost::signals2::detail::variadic_arg_type	access:public
type	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^        typedef typename variadic_arg_type<n - 1, Args...>::type type;$/;"	t	class:boost::signals2::detail::variadic_arg_type	access:public
type	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        typedef typename unsigned_meta_array_appender<typename make_unsigned_meta_array<n-1>::type, n - 1>::type type;$/;"	t	class:boost::signals2::detail::make_unsigned_meta_array	access:public
type	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        typedef unsigned_meta_array<0> type;$/;"	t	class:boost::signals2::detail::make_unsigned_meta_array	access:public
type	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        typedef unsigned_meta_array<> type;$/;"	t	class:boost::signals2::detail::make_unsigned_meta_array	access:public
type	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        typedef unsigned_meta_array<Args..., n> type;$/;"	t	class:boost::signals2::detail::unsigned_meta_array_appender	access:public
type	/usr/include/boost/signals2/signal_type.hpp	/^        > type;$/;"	t	class:boost::signals2::signal_type	access:public
unblock	/usr/include/boost/signals2/shared_connection_block.hpp	/^      void unblock()$/;"	f	class:boost::signals2::shared_connection_block	access:public	signature:()
unchecked_push_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void unchecked_push_back( ForwardIterator begin_arg,$/;"	f	namespace:boost::signals2::detail	access:public	signature:( ForwardIterator begin_arg, ForwardIterator end_arg )
unchecked_push_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void unchecked_push_back( optimized_const_reference x ) \/\/ non-growing$/;"	f	namespace:boost::signals2::detail	access:public	signature:( optimized_const_reference x )
unchecked_push_back	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void unchecked_push_back()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
unchecked_push_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void unchecked_push_back_n( size_type n )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
unchecked_push_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void unchecked_push_back_n( size_type n, const boost::false_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n, const boost::false_type& )
unchecked_push_back_n	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void unchecked_push_back_n( size_type n, const boost::true_type& )$/;"	f	namespace:boost::signals2::detail	signature:( size_type n, const boost::true_type& )
uninitialized_grow	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        pointer uninitialized_grow( size_type n ) \/\/ strong$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
uninitialized_resize	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void uninitialized_resize( size_type n )$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
uninitialized_shrink	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        void uninitialized_shrink( size_type n ) \/\/ nothrow$/;"	f	namespace:boost::signals2::detail	access:public	signature:( size_type n )
unique_lock	/usr/include/boost/signals2/detail/unique_lock.hpp	/^        unique_lock(Mutex &m): _mutex(m)$/;"	f	class:boost::signals2::detail::unique_lock	access:public	signature:(Mutex &m)
unique_lock	/usr/include/boost/signals2/detail/unique_lock.hpp	/^      class unique_lock: public noncopyable$/;"	c	namespace:boost::signals2::detail	inherits:noncopyable
unlock	/usr/include/boost/signals2/connection.hpp	/^        virtual void unlock() = 0;$/;"	p	class:boost::signals2::detail::connection_body_base	access:public	signature:()
unlock	/usr/include/boost/signals2/connection.hpp	/^        virtual void unlock()$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:()
unlock	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    void unlock()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
unlock	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    void unlock()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
unlock	/usr/include/boost/signals2/dummy_mutex.hpp	/^      void unlock() {}$/;"	f	class:boost::signals2::dummy_mutex	access:public	signature:()
unsigned_meta_array	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^      template<unsigned ... values> class unsigned_meta_array {};$/;"	c	namespace:boost::signals2::detail
unsigned_meta_array_appender	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        class unsigned_meta_array_appender<unsigned_meta_array<Args...>, n>$/;"	c	namespace:boost::signals2::detail
upper_bound	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        iterator upper_bound(const group_key_type &key)$/;"	f	class:boost::signals2::detail::grouped_list	access:public	signature:(const group_key_type &key)
value_tag	/usr/include/boost/signals2/detail/signals_common.hpp	/^      struct value_tag {};$/;"	s	namespace:boost::signals2::detail
value_type	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        typedef T                                        value_type;$/;"	t	class:boost::signals2::detail::auto_buffer	access:public
variadic_arg_type	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^      template<typename T, typename ... Args> class variadic_arg_type<0, T, Args...>$/;"	c	namespace:boost::signals2::detail
variadic_arg_type	/usr/include/boost/signals2/detail/variadic_arg_type.hpp	/^      template<unsigned n, typename T, typename ... Args> class variadic_arg_type<n, T, Args...>$/;"	c	namespace:boost::signals2::detail
variadic_extended_signature	/usr/include/boost/signals2/variadic_signal.hpp	/^        class variadic_extended_signature<R (Args...)>$/;"	c	namespace:boost::signals2::detail
variadic_slot_invoker	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        class variadic_slot_invoker$/;"	c	namespace:boost::signals2::detail
variadic_slot_invoker	/usr/include/boost/signals2/detail/variadic_slot_invoker.hpp	/^        variadic_slot_invoker(Args & ... args): _args(args...)$/;"	f	class:boost::signals2::detail::variadic_slot_invoker	access:public	signature:(Args & .... args)
void_shared_ptr_variant	/usr/include/boost/signals2/slot_base.hpp	/^      typedef boost::variant<boost::shared_ptr<void>, detail::foreign_void_shared_ptr > void_shared_ptr_variant;$/;"	t	namespace:boost::signals2::detail
void_type	/usr/include/boost/signals2/detail/result_type_wrapper.hpp	/^      struct void_type {};$/;"	s	namespace:boost::signals2::detail
void_weak_ptr_variant	/usr/include/boost/signals2/slot_base.hpp	/^      typedef boost::variant<boost::weak_ptr<void>, detail::foreign_void_weak_ptr > void_weak_ptr_variant;$/;"	t	namespace:boost::signals2::detail
weak_ptr_traits	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    template<typename T> struct weak_ptr_traits<boost::weak_ptr<T> >$/;"	s	namespace:boost::signals2
weak_ptr_traits	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    template<typename T> struct weak_ptr_traits<std::weak_ptr<T> >$/;"	s	namespace:boost::signals2
weak_ptr_traits	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^    template<typename WeakPtr> struct weak_ptr_traits$/;"	s	namespace:boost::signals2
weak_type	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      typedef boost::weak_ptr<T> weak_type;$/;"	t	struct:boost::signals2::shared_ptr_traits	access:public
weak_type	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^      typedef std::weak_ptr<T> weak_type;$/;"	t	struct:boost::signals2::shared_ptr_traits	access:public
weakly_equivalent	/usr/include/boost/signals2/detail/slot_groups.hpp	/^        bool weakly_equivalent(const group_key_type &arg1, const group_key_type &arg2)$/;"	f	class:boost::signals2::detail::grouped_list	access:private	signature:(const group_key_type &arg1, const group_key_type &arg2)
what	/usr/include/boost/signals2/expired_slot.hpp	/^      virtual char const * what() const throw()$/;"	f	class:boost::signals2::expired_slot	access:public	signature:() const
what	/usr/include/boost/signals2/last_value.hpp	/^      virtual const char* what() const throw() {return "boost::signals2::no_slots_error";}$/;"	f	class:boost::signals2::no_slots_error	access:public	signature:() const
~auto_buffer	/usr/include/boost/signals2/detail/auto_buffer.hpp	/^        ~auto_buffer()$/;"	f	namespace:boost::signals2::detail	access:public	signature:()
~connection	/usr/include/boost/signals2/connection.hpp	/^      ~connection() {}$/;"	f	class:boost::signals2::connection	access:public	signature:()
~connection_body	/usr/include/boost/signals2/connection.hpp	/^        virtual ~connection_body() {}$/;"	f	class:boost::signals2::detail::connection_body	access:public	signature:()
~connection_body_base	/usr/include/boost/signals2/connection.hpp	/^        virtual ~connection_body_base() {}$/;"	f	class:boost::signals2::detail::connection_body_base	access:public	signature:()
~deconstruct_deleter	/usr/include/boost/signals2/deconstruct.hpp	/^    ~deconstruct_deleter()$/;"	f	class:boost::signals2::detail::deconstruct_deleter	access:public	signature:()
~foreign_shared_ptr_impl_base	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual ~foreign_shared_ptr_impl_base() {}$/;"	f	struct:boost::signals2::detail::foreign_shared_ptr_impl_base	access:public	signature:()
~foreign_void_shared_ptr	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        ~foreign_void_shared_ptr()$/;"	f	class:boost::signals2::detail::foreign_void_shared_ptr	access:public	signature:()
~foreign_weak_ptr_impl_base	/usr/include/boost/signals2/detail/foreign_ptr.hpp	/^        virtual ~foreign_weak_ptr_impl_base() {}$/;"	f	struct:boost::signals2::detail::foreign_weak_ptr_impl_base	access:public	signature:()
~mutex	/usr/include/boost/signals2/detail/lwm_pthreads.hpp	/^    ~mutex()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
~mutex	/usr/include/boost/signals2/detail/lwm_win32_cs.hpp	/^    ~mutex()$/;"	f	class:boost::signals2::mutex	access:public	signature:()
~postconstructible	/usr/include/boost/signals2/postconstructible.hpp	/^        virtual ~postconstructible() {}$/;"	f	class:boost::signals2::postconstructible_adl_barrier::postconstructible	access:protected	signature:()
~predestructible	/usr/include/boost/signals2/predestructible.hpp	/^        virtual ~predestructible() {}$/;"	f	class:boost::signals2::predestructible_adl_barrier::predestructible	access:public	signature:()
~scoped_connection	/usr/include/boost/signals2/connection.hpp	/^      ~scoped_connection()$/;"	f	class:boost::signals2::scoped_connection	access:public	signature:()
~signal_base	/usr/include/boost/signals2/signal_base.hpp	/^      virtual ~signal_base() {}$/;"	f	class:boost::signals2::signal_base	access:public	signature:()
~trackable	/usr/include/boost/signals2/trackable.hpp	/^      ~trackable() {}$/;"	f	class:boost::signals2::trackable	access:protected	signature:()
~unique_lock	/usr/include/boost/signals2/detail/unique_lock.hpp	/^        ~unique_lock()$/;"	f	class:boost::signals2::detail::unique_lock	access:public	signature:()
