!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALIGN16	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	16;"	d
ALIGN16	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	18;"	d
ALIGN16	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	197;"	d
BOOST_ACOSH_HPP	/usr/include/boost/math/special_functions/acosh.hpp	12;"	d
BOOST_ASINH_HPP	/usr/include/boost/math/special_functions/asinh.hpp	12;"	d
BOOST_ATANH_HPP	/usr/include/boost/math/special_functions/atanh.hpp	12;"	d
BOOST_BIG_LANCZOS_HPP	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	7;"	d
BOOST_CONSTANTS_GENERATE	/usr/include/boost/math/constants/generate.hpp	70;"	d
BOOST_DEFINE_MATH_CONSTANT	/usr/include/boost/math/constants/constants.hpp	161;"	d
BOOST_DETAIL_GCD_HELPER_VAL	/usr/include/boost/math/common_factor_ct.hpp	36;"	d
BOOST_DETAIL_GCD_HELPER_VAL	/usr/include/boost/math/common_factor_ct.hpp	39;"	d
BOOST_DETAIL_GCD_HELPER_VAL	/usr/include/boost/math/common_factor_ct.hpp	45;"	d
BOOST_DYN_LINK	/usr/include/boost/math/tr1.hpp	102;"	d
BOOST_DYN_LINK	/usr/include/boost/math/tr1.hpp	60;"	d
BOOST_DYN_LINK	/usr/include/boost/math/tr1.hpp	68;"	d
BOOST_DYN_LINK	/usr/include/boost/math/tr1.hpp	77;"	d
BOOST_DYN_LINK	/usr/include/boost/math/tr1.hpp	85;"	d
BOOST_DYN_LINK	/usr/include/boost/math/tr1.hpp	93;"	d
BOOST_FPCLASSIFY_VAX_FORMAT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	20;"	d
BOOST_FPU_EXCEPTION_GUARD	/usr/include/boost/math/tools/config.hpp	306;"	d
BOOST_GET_VALARRAY	/usr/include/boost/math/octonion.hpp	25;"	d
BOOST_GET_VALARRAY	/usr/include/boost/math/octonion.hpp	4750;"	d
BOOST_GET_VALARRAY	/usr/include/boost/math/quaternion.hpp	1920;"	d
BOOST_GET_VALARRAY	/usr/include/boost/math/quaternion.hpp	40;"	d
BOOST_HAS_LOG1P	/usr/include/boost/math/special_functions/log1p.hpp	344;"	d
BOOST_HAS_expm1	/usr/include/boost/math/special_functions/expm1.hpp	296;"	d
BOOST_HEADER	/usr/include/boost/math/tools/rational.hpp	18;"	d
BOOST_HEADER	/usr/include/boost/math/tools/rational.hpp	20;"	d
BOOST_HEADER	/usr/include/boost/math/tools/rational.hpp	22;"	d
BOOST_HEADER	/usr/include/boost/math/tools/rational.hpp	24;"	d
BOOST_HEADER	/usr/include/boost/math/tools/rational.hpp	26;"	d
BOOST_HEADER	/usr/include/boost/math/tools/rational.hpp	28;"	d
BOOST_HEADER	/usr/include/boost/math/tools/rational.hpp	31;"	d
BOOST_HEADER	/usr/include/boost/math/tools/rational.hpp	33;"	d
BOOST_HEADER	/usr/include/boost/math/tools/rational.hpp	35;"	d
BOOST_HEADER	/usr/include/boost/math/tools/rational.hpp	37;"	d
BOOST_HEADER	/usr/include/boost/math/tools/rational.hpp	39;"	d
BOOST_HEADER	/usr/include/boost/math/tools/rational.hpp	41;"	d
BOOST_IOS_BASE	/usr/include/boost/math/octonion.hpp	28;"	d
BOOST_IOS_BASE	/usr/include/boost/math/quaternion.hpp	43;"	d
BOOST_LIB_NAME	/usr/include/boost/math/tr1.hpp	100;"	d
BOOST_LIB_NAME	/usr/include/boost/math/tr1.hpp	58;"	d
BOOST_LIB_NAME	/usr/include/boost/math/tr1.hpp	66;"	d
BOOST_LIB_NAME	/usr/include/boost/math/tr1.hpp	75;"	d
BOOST_LIB_NAME	/usr/include/boost/math/tr1.hpp	83;"	d
BOOST_LIB_NAME	/usr/include/boost/math/tr1.hpp	91;"	d
BOOST_MATH_AIRY_HPP	/usr/include/boost/math/special_functions/airy.hpp	8;"	d
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_NON_TYPE	/usr/include/boost/math/tools/config.hpp	127;"	d
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_NON_TYPE	/usr/include/boost/math/tools/config.hpp	143;"	d
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_NON_TYPE_SPEC	/usr/include/boost/math/tools/config.hpp	129;"	d
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_NON_TYPE_SPEC	/usr/include/boost/math/tools/config.hpp	144;"	d
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/config.hpp	123;"	d
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/config.hpp	141;"	d
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T epsilon(const mpl::false_& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T epsilon(const mpl::true_& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_max_value(const mpl::int_<0>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_max_value(const mpl::int_<1024>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_max_value(const mpl::int_<128>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_max_value(const mpl::int_<16384>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_min_value(const mpl::int_<0>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_min_value(const mpl::int_<1024>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_min_value(const mpl::int_<128>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_min_value(const mpl::int_<16384>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline long double epsilon<long double>(const mpl::true_& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(long double))$/;"	f	namespace:boost::math::tools::detail	signature:(long double)
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/tools/config.hpp	125;"	d
BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/tools/config.hpp	142;"	d
BOOST_MATH_ASSERT_UNDEFINED_POLICY	/usr/include/boost/math/policies/policy.hpp	88;"	d
BOOST_MATH_BESSEL_HPP	/usr/include/boost/math/special_functions/bessel.hpp	11;"	d
BOOST_MATH_BESSEL_I0_HPP	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	7;"	d
BOOST_MATH_BESSEL_I1_HPP	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	7;"	d
BOOST_MATH_BESSEL_IK_HPP	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	7;"	d
BOOST_MATH_BESSEL_J0_HPP	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	7;"	d
BOOST_MATH_BESSEL_J1_HPP	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	7;"	d
BOOST_MATH_BESSEL_JN_HPP	/usr/include/boost/math/special_functions/detail/bessel_jn.hpp	7;"	d
BOOST_MATH_BESSEL_JN_SERIES_HPP	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	7;"	d
BOOST_MATH_BESSEL_JY_HPP	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	7;"	d
BOOST_MATH_BESSEL_K0_HPP	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	7;"	d
BOOST_MATH_BESSEL_K1_HPP	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	7;"	d
BOOST_MATH_BESSEL_KN_HPP	/usr/include/boost/math/special_functions/detail/bessel_kn.hpp	7;"	d
BOOST_MATH_BESSEL_Y0_HPP	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	7;"	d
BOOST_MATH_BESSEL_Y1_HPP	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	7;"	d
BOOST_MATH_BESSEL_YN_HPP	/usr/include/boost/math/special_functions/detail/bessel_yn.hpp	7;"	d
BOOST_MATH_BIG_CONSTANT	/usr/include/boost/math/tools/big_constant.hpp	42;"	d
BOOST_MATH_BUGGY_LARGE_FLOAT_CONSTANTS	/usr/include/boost/math/tools/config.hpp	164;"	d
BOOST_MATH_C99_THROW_SPEC	/usr/include/boost/math/tr1.hpp	48;"	d
BOOST_MATH_CALCULATE_CONSTANTS_CONSTANTS_INCLUDED	/usr/include/boost/math/constants/calculate_constants.hpp	9;"	d
BOOST_MATH_COMMON_FACTOR_CT_HPP	/usr/include/boost/math/common_factor_ct.hpp	11;"	d
BOOST_MATH_COMMON_FACTOR_HPP	/usr/include/boost/math/common_factor.hpp	11;"	d
BOOST_MATH_COMMON_FACTOR_RT_HPP	/usr/include/boost/math/common_factor_rt.hpp	16;"	d
BOOST_MATH_COMPLEX_ACOSH_INCLUDED	/usr/include/boost/math/complex/acosh.hpp	7;"	d
BOOST_MATH_COMPLEX_ACOS_INCLUDED	/usr/include/boost/math/complex/acos.hpp	6;"	d
BOOST_MATH_COMPLEX_ASINH_INCLUDED	/usr/include/boost/math/complex/asinh.hpp	7;"	d
BOOST_MATH_COMPLEX_ASIN_INCLUDED	/usr/include/boost/math/complex/asin.hpp	6;"	d
BOOST_MATH_COMPLEX_ATANH_INCLUDED	/usr/include/boost/math/complex/atanh.hpp	7;"	d
BOOST_MATH_COMPLEX_ATAN_INCLUDED	/usr/include/boost/math/complex/atan.hpp	7;"	d
BOOST_MATH_COMPLEX_DETAILS_INCLUDED	/usr/include/boost/math/complex/details.hpp	7;"	d
BOOST_MATH_COMPLEX_FABS_INCLUDED	/usr/include/boost/math/complex/fabs.hpp	7;"	d
BOOST_MATH_COMPLEX_INCLUDED	/usr/include/boost/math/complex.hpp	7;"	d
BOOST_MATH_CONSTANTS_CONSTANTS_INCLUDED	/usr/include/boost/math/constants/constants.hpp	8;"	d
BOOST_MATH_CONSTANTS_GENERATE_INCLUDED	/usr/include/boost/math/constants/generate.hpp	7;"	d
BOOST_MATH_CONSTANTS_INFO_INCLUDED	/usr/include/boost/math/constants/info.hpp	11;"	d
BOOST_MATH_CONSTANT_THREAD_HELPER	/usr/include/boost/math/constants/constants.hpp	87;"	d
BOOST_MATH_CONTROL_FP	/usr/include/boost/math/tools/config.hpp	216;"	d
BOOST_MATH_CONTROL_FP	/usr/include/boost/math/tools/config.hpp	40;"	d
BOOST_MATH_CONTROL_FP	/usr/include/boost/math/tools/config.hpp	83;"	d
BOOST_MATH_COS_PI_HPP	/usr/include/boost/math/special_functions/cos_pi.hpp	7;"	d
BOOST_MATH_C_MACROS_IPP	/usr/include/boost/math/tr1_c_macros.ipp	8;"	d	file:
BOOST_MATH_DECLARE_DISTRIBUTIONS	/usr/include/boost/math/distributions/fwd.hpp	113;"	d
BOOST_MATH_DECLARE_SPECIAL_FUNCTIONS	/usr/include/boost/math/special_functions/math_fwd.hpp	866;"	d
BOOST_MATH_DENORM_ERROR_POLICY	/usr/include/boost/math/policies/policy.hpp	66;"	d
BOOST_MATH_DETAIL_IGAMMA_LARGE	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	46;"	d
BOOST_MATH_DETAIL_LL_FUNC	/usr/include/boost/math/special_functions/math_fwd.hpp	851;"	d
BOOST_MATH_DIGITS10_POLICY	/usr/include/boost/math/policies/policy.hpp	72;"	d
BOOST_MATH_DISABLE_STD_FPCLASSIFY	/usr/include/boost/math/tools/config.hpp	78;"	d
BOOST_MATH_DISCRETE_QUANTILE_POLICY	/usr/include/boost/math/policies/policy.hpp	85;"	d
BOOST_MATH_DISTIBUTIONS_DETAIL_GENERIC_QUANTILE_HPP	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	7;"	d
BOOST_MATH_DISTRIBUTIONS_CHI_SQUARED_HPP	/usr/include/boost/math/distributions/chi_squared.hpp	10;"	d
BOOST_MATH_DISTRIBUTIONS_COMMON_ERROR_HANDLING_HPP	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	10;"	d
BOOST_MATH_DISTRIBUTIONS_DETAIL_HG_CDF_HPP	/usr/include/boost/math/distributions/detail/hypergeometric_cdf.hpp	9;"	d
BOOST_MATH_DISTRIBUTIONS_DETAIL_HG_PDF_HPP	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	10;"	d
BOOST_MATH_DISTRIBUTIONS_DETAIL_HG_QUANTILE_HPP	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	9;"	d
BOOST_MATH_DISTRIBUTIONS_DETAIL_INV_DISCRETE_QUANTILE	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	7;"	d
BOOST_MATH_DISTRIBUTIONS_DETAIL_MODE_HPP	/usr/include/boost/math/distributions/detail/generic_mode.hpp	9;"	d
BOOST_MATH_DISTRIBUTIONS_FISHER_F_HPP	/usr/include/boost/math/distributions/fisher_f.hpp	9;"	d
BOOST_MATH_DISTRIBUTIONS_FWD_HPP	/usr/include/boost/math/distributions/fwd.hpp	12;"	d
BOOST_MATH_DISTRIBUTIONS_HPP	/usr/include/boost/math/distributions.hpp	13;"	d
BOOST_MATH_DISTRIBUTIONS_HYPERGEOMETRIC_HPP	/usr/include/boost/math/distributions/hypergeometric.hpp	10;"	d
BOOST_MATH_DISTRIBUTIONS_INVERSE_CHI_SQUARED_HPP	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	10;"	d
BOOST_MATH_DISTRIBUTIONS_LOGISTIC	/usr/include/boost/math/distributions/logistic.hpp	9;"	d
BOOST_MATH_DISTRIBUTION_CONCEPT_HPP	/usr/include/boost/math/concepts/distributions.hpp	12;"	d
BOOST_MATH_DIST_BETA_HPP	/usr/include/boost/math/distributions/beta.hpp	25;"	d
BOOST_MATH_DOMAIN_ERROR_POLICY	/usr/include/boost/math/policies/policy.hpp	48;"	d
BOOST_MATH_ELLINT_1_HPP	/usr/include/boost/math/special_functions/ellint_1.hpp	15;"	d
BOOST_MATH_ELLINT_2_HPP	/usr/include/boost/math/special_functions/ellint_2.hpp	15;"	d
BOOST_MATH_ELLINT_3_HPP	/usr/include/boost/math/special_functions/ellint_3.hpp	15;"	d
BOOST_MATH_ELLINT_RC_HPP	/usr/include/boost/math/special_functions/ellint_rc.hpp	14;"	d
BOOST_MATH_ELLINT_RD_HPP	/usr/include/boost/math/special_functions/ellint_rd.hpp	12;"	d
BOOST_MATH_ELLINT_RF_HPP	/usr/include/boost/math/special_functions/ellint_rf.hpp	13;"	d
BOOST_MATH_ELLINT_RJ_HPP	/usr/include/boost/math/special_functions/ellint_rj.hpp	14;"	d
BOOST_MATH_EVALUATION_ERROR_POLICY	/usr/include/boost/math/policies/policy.hpp	57;"	d
BOOST_MATH_EXPINT_HPP	/usr/include/boost/math/special_functions/expint.hpp	7;"	d
BOOST_MATH_EXPLICIT_TEMPLATE_NON_TYPE	/usr/include/boost/math/tools/config.hpp	120;"	d
BOOST_MATH_EXPLICIT_TEMPLATE_NON_TYPE	/usr/include/boost/math/tools/config.hpp	138;"	d
BOOST_MATH_EXPLICIT_TEMPLATE_NON_TYPE_SPEC	/usr/include/boost/math/tools/config.hpp	121;"	d
BOOST_MATH_EXPLICIT_TEMPLATE_NON_TYPE_SPEC	/usr/include/boost/math/tools/config.hpp	139;"	d
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/policies/policy.hpp	/^T epsilon(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE(T));$/;"	p	namespace:boost::math::tools	signature:(T)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/policies/policy.hpp	/^int digits(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE(T));$/;"	p	namespace:boost::math::tools	signature:(T)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/config.hpp	118;"	d
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/config.hpp	136;"	d
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_max_value(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools	signature:(T)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_min_value(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools	signature:(T)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T max_value(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools	signature:(T)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T min_value(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools	signature:(T)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpfr.hpp	/^inline int digits<mpfr_class>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr_class))$/;"	f	namespace:boost::math::tools	signature:(mpfr_class)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class epsilon<mpfr_class>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr_class))$/;"	f	namespace:boost::math::tools	signature:(mpfr_class)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class log_max_value<mpfr_class>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr_class))$/;"	f	namespace:boost::math::tools	signature:(mpfr_class)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class log_min_value<mpfr_class>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr_class))$/;"	f	namespace:boost::math::tools	signature:(mpfr_class)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class max_value<mpfr_class>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr_class))$/;"	f	namespace:boost::math::tools	signature:(mpfr_class)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class min_value<mpfr_class>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr_class))$/;"	f	namespace:boost::math::tools	signature:(mpfr_class)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpreal.hpp	/^inline int digits<mpfr::mpreal>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr::mpreal))$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal epsilon<mpfr::mpreal>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr::mpreal))$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal log_max_value<mpfr::mpreal>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr::mpreal))$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal log_min_value<mpfr::mpreal>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr::mpreal))$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal max_value<mpfr::mpreal>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr::mpreal))$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal min_value<mpfr::mpreal>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr::mpreal))$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^inline boost::math::ntl::RR epsilon<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^inline boost::math::ntl::RR log_max_value<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^inline boost::math::ntl::RR log_min_value<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^inline boost::math::ntl::RR max_value<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^inline boost::math::ntl::RR min_value<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^inline int digits<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^template<> inline boost::math::ntl::RR e<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::constants	signature:(boost::math::ntl::RR)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^template<> inline boost::math::ntl::RR pi<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::constants	signature:(boost::math::ntl::RR)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/real_concept.hpp	/^inline concepts::real_concept epsilon<concepts::real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/real_concept.hpp	/^inline concepts::real_concept log_max_value<concepts::real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/real_concept.hpp	/^inline concepts::real_concept log_min_value<concepts::real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/real_concept.hpp	/^inline concepts::real_concept max_value<concepts::real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/real_concept.hpp	/^inline concepts::real_concept min_value<concepts::real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/real_concept.hpp	/^inline int digits<concepts::real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline concepts::std_real_concept epsilon(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::std_real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::std_real_concept)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline concepts::std_real_concept log_max_value<concepts::std_real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::std_real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::std_real_concept)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline concepts::std_real_concept log_min_value<concepts::std_real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::std_real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::std_real_concept)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline concepts::std_real_concept max_value<concepts::std_real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::std_real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::std_real_concept)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline concepts::std_real_concept min_value<concepts::std_real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::std_real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::std_real_concept)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline int digits<concepts::std_real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::std_real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::std_real_concept)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_catalan<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_catalan	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_cbrt_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_cbrt_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_cos_one<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_cos_one	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_cosh_one<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_cosh_one	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_degree<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_degree	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_e<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_e	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_e_pow_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_e_pow_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_euler<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<M>))$/;"	f	class:boost::math::constants::detail::constant_euler	signature:(mpl::int_<M>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_euler_sqr<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_euler_sqr	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_exp_minus_half<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_exp_minus_half	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_extreme_value_skewness<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_extreme_value_skewness	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_four_minus_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_four_minus_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_four_thirds_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_four_thirds_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_glaisher<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_glaisher	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_half<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_half	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_half_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_half_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_half_root_two<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_half_root_two	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_khinchin<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_khinchin	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_ln_ln_two<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_ln_ln_two	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_ln_phi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_ln_phi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_ln_ten<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_ln_ten	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_ln_two<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_ln_two	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_log10_e<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_log10_e	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_cbrt_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_cbrt_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_euler<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_euler	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_ln_phi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_ln_phi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_log10_e<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_log10_e	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_root_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_root_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_root_two<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_root_two	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_root_two_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_root_two_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_two_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_two_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_phi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_phi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pi_cubed<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pi_cubed	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pi_minus_three<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pi_minus_three	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pi_pow_e<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pi_pow_e	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pi_sqr<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pi_sqr	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pi_sqr_div_six<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pi_sqr_div_six	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pow23_four_minus_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pow23_four_minus_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_radian<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_radian	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_rayleigh_kurtosis<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_rayleigh_kurtosis	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_rayleigh_kurtosis_excess<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_rayleigh_kurtosis_excess	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_rayleigh_skewness<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_rayleigh_skewness	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_e<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_e	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_half_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_half_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_ln_four<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_ln_four	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_one_div_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_one_div_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_three<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_three	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_two<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_two	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_two_div_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_two_div_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_two_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_two_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_sin_one<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_sin_one	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_sinh_one<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_sinh_one	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_sixth_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_sixth_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_third<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_third	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_third_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_third_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_three_quarters<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_three_quarters	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_three_quarters_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_three_quarters_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_two_div_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_two_div_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_two_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_two_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_two_thirds<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_two_thirds	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_two_thirds_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_two_thirds_pi	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_twothirds<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_twothirds	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_zeta_three<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_zeta_three	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_zeta_two<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_zeta_two	signature:(mpl::int_<N>)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/info.hpp	/^      const char* nameof(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(T))$/;"	f	namespace:boost::math::constants::detail	signature:(T)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/info.hpp	/^      const char* nameof<double>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(double))$/;"	f	namespace:boost::math::constants::detail	signature:(double)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/info.hpp	/^      const char* nameof<float>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(float))$/;"	f	namespace:boost::math::constants::detail	signature:(float)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/info.hpp	/^      const char* nameof<long double>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(long double))$/;"	f	namespace:boost::math::constants::detail	signature:(long double)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/tools/config.hpp	119;"	d
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/tools/config.hpp	137;"	d
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/tools/precision.hpp	/^inline T epsilon(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(T))$/;"	f	namespace:boost::math::tools	signature:(T)
BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/tools/precision.hpp	/^inline int digits(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(T))$/;"	f	namespace:boost::math::tools	signature:(T)
BOOST_MATH_EXPM1_INCLUDED	/usr/include/boost/math/special_functions/expm1.hpp	7;"	d
BOOST_MATH_E_FLOAT_BINDINGS_HPP	/usr/include/boost/math/bindings/e_float.hpp	12;"	d
BOOST_MATH_FPCLASSIFY_HPP	/usr/include/boost/math/special_functions/fpclassify.hpp	8;"	d
BOOST_MATH_FP_TRAITS_HPP	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	4;"	d
BOOST_MATH_HANKEL_HPP	/usr/include/boost/math/special_functions/hankel.hpp	8;"	d
BOOST_MATH_HUGE_CONSTANT	/usr/include/boost/math/tools/big_constant.hpp	55;"	d
BOOST_MATH_HYPOT_INCLUDED	/usr/include/boost/math/special_functions/hypot.hpp	7;"	d
BOOST_MATH_ICONV_HPP	/usr/include/boost/math/special_functions/detail/iconv.hpp	7;"	d
BOOST_MATH_INDETERMINATE_RESULT_ERROR_POLICY	/usr/include/boost/math/policies/policy.hpp	69;"	d
BOOST_MATH_INSTRUMENT_CODE	/usr/include/boost/math/tools/config.hpp	322;"	d
BOOST_MATH_INSTRUMENT_FPU	/usr/include/boost/math/tools/config.hpp	307;"	d
BOOST_MATH_INSTRUMENT_VARIABLE	/usr/include/boost/math/tools/config.hpp	324;"	d
BOOST_MATH_INT_TABLE_TYPE	/usr/include/boost/math/tools/config.hpp	177;"	d
BOOST_MATH_INT_TABLE_TYPE	/usr/include/boost/math/tools/config.hpp	182;"	d
BOOST_MATH_INT_TABLE_TYPE	/usr/include/boost/math/tools/config.hpp	206;"	d
BOOST_MATH_INT_VALUE_SUFFIX	/usr/include/boost/math/tools/config.hpp	178;"	d
BOOST_MATH_INT_VALUE_SUFFIX	/usr/include/boost/math/tools/config.hpp	183;"	d
BOOST_MATH_INT_VALUE_SUFFIX	/usr/include/boost/math/tools/config.hpp	209;"	d
BOOST_MATH_JACOBI_ELLIPTIC_HPP	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	8;"	d
BOOST_MATH_LOG1P_INCLUDED	/usr/include/boost/math/special_functions/log1p.hpp	7;"	d
BOOST_MATH_MAX_POLY_ORDER	/usr/include/boost/math/tools/config.hpp	191;"	d
BOOST_MATH_MAX_ROOT_ITERATION_POLICY	/usr/include/boost/math/policies/policy.hpp	94;"	d
BOOST_MATH_MAX_SERIES_ITERATION_POLICY	/usr/include/boost/math/policies/policy.hpp	91;"	d
BOOST_MATH_META_BOOL	/usr/include/boost/math/policies/policy.hpp	114;"	d
BOOST_MATH_META_INT	/usr/include/boost/math/policies/policy.hpp	99;"	d
BOOST_MATH_MODF_HPP	/usr/include/boost/math/special_functions/modf.hpp	7;"	d
BOOST_MATH_MPLFR_BINDINGS_HPP	/usr/include/boost/math/bindings/mpfr.hpp	12;"	d
BOOST_MATH_MPREAL_BINDINGS_HPP	/usr/include/boost/math/bindings/mpreal.hpp	12;"	d
BOOST_MATH_NONFINITE_NUM_FACETS_HPP	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	2;"	d
BOOST_MATH_NO_DEDUCED_FUNCTION_POINTERS	/usr/include/boost/math/tools/config.hpp	87;"	d
BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS	/usr/include/boost/math/tools/config.hpp	30;"	d
BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS	/usr/include/boost/math/tools/config.hpp	39;"	d
BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS	/usr/include/boost/math/tools/config.hpp	55;"	d
BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS	/usr/include/boost/math/tools/config.hpp	70;"	d
BOOST_MATH_NO_NATIVE_LONG_DOUBLE_FP_CLASSIFY	/usr/include/boost/math/tools/config.hpp	110;"	d
BOOST_MATH_NO_REAL_CONCEPT_TESTS	/usr/include/boost/math/tools/config.hpp	38;"	d
BOOST_MATH_NO_REAL_CONCEPT_TESTS	/usr/include/boost/math/tools/config.hpp	48;"	d
BOOST_MATH_NTL_DIGAMMA	/usr/include/boost/math/bindings/detail/big_digamma.hpp	7;"	d
BOOST_MATH_NTL_RR_HPP	/usr/include/boost/math/bindings/rr.hpp	7;"	d
BOOST_MATH_OVERFLOW_ERROR_POLICY	/usr/include/boost/math/policies/policy.hpp	54;"	d
BOOST_MATH_PARAMETER	/usr/include/boost/math/policies/policy.hpp	226;"	d
BOOST_MATH_POLE_ERROR_POLICY	/usr/include/boost/math/policies/policy.hpp	51;"	d
BOOST_MATH_POLICY_ERROR_HANDLING_HPP	/usr/include/boost/math/policies/error_handling.hpp	9;"	d
BOOST_MATH_POLICY_HPP	/usr/include/boost/math/policies/policy.hpp	7;"	d
BOOST_MATH_POLY_METHOD	/usr/include/boost/math/tools/config.hpp	170;"	d
BOOST_MATH_POLY_METHOD	/usr/include/boost/math/tools/config.hpp	172;"	d
BOOST_MATH_POLY_METHOD	/usr/include/boost/math/tools/config.hpp	175;"	d
BOOST_MATH_POLY_METHOD	/usr/include/boost/math/tools/config.hpp	197;"	d
BOOST_MATH_POWM1	/usr/include/boost/math/special_functions/powm1.hpp	7;"	d
BOOST_MATH_POW_HPP	/usr/include/boost/math/special_functions/pow.hpp	13;"	d
BOOST_MATH_PROMOTE_DOUBLE_POLICY	/usr/include/boost/math/policies/policy.hpp	79;"	d
BOOST_MATH_PROMOTE_FLOAT_POLICY	/usr/include/boost/math/policies/policy.hpp	75;"	d
BOOST_MATH_PROMOTION_HPP	/usr/include/boost/math/tools/promotion.hpp	19;"	d
BOOST_MATH_RATIONAL_METHOD	/usr/include/boost/math/tools/config.hpp	173;"	d
BOOST_MATH_RATIONAL_METHOD	/usr/include/boost/math/tools/config.hpp	176;"	d
BOOST_MATH_RATIONAL_METHOD	/usr/include/boost/math/tools/config.hpp	200;"	d
BOOST_MATH_REAL_CONCEPT_HPP	/usr/include/boost/math/concepts/real_concept.hpp	24;"	d
BOOST_MATH_REAL_TYPE_CONCEPT_HPP	/usr/include/boost/math/concepts/real_type_concept.hpp	7;"	d
BOOST_MATH_ROUNDING_ERROR_POLICY	/usr/include/boost/math/policies/policy.hpp	60;"	d
BOOST_MATH_ROUND_HPP	/usr/include/boost/math/special_functions/round.hpp	7;"	d
BOOST_MATH_SF_BINOMIAL_HPP	/usr/include/boost/math/special_functions/binomial.hpp	7;"	d
BOOST_MATH_SF_CBRT_HPP	/usr/include/boost/math/special_functions/cbrt.hpp	7;"	d
BOOST_MATH_SF_DETAIL_BESSEL_JY_ASYM_HPP	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	13;"	d
BOOST_MATH_SF_DETAIL_INV_T_HPP	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	8;"	d
BOOST_MATH_SF_DIGAMMA_HPP	/usr/include/boost/math/special_functions/digamma.hpp	7;"	d
BOOST_MATH_SF_ERF_INV_HPP	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	7;"	d
BOOST_MATH_SF_GAMMA_HPP	/usr/include/boost/math/special_functions/gamma.hpp	10;"	d
BOOST_MATH_SF_PRIME_HPP	/usr/include/boost/math/special_functions/prime.hpp	9;"	d
BOOST_MATH_SIN_PI_HPP	/usr/include/boost/math/special_functions/sin_pi.hpp	7;"	d
BOOST_MATH_SMALL_CONSTANT	/usr/include/boost/math/tools/config.hpp	152;"	d
BOOST_MATH_SMALL_CONSTANT	/usr/include/boost/math/tools/config.hpp	154;"	d
BOOST_MATH_SPECIAL_BERNOULLI_HPP	/usr/include/boost/math/distributions/bernoulli.hpp	28;"	d
BOOST_MATH_SPECIAL_BETA_HPP	/usr/include/boost/math/special_functions/beta.hpp	7;"	d
BOOST_MATH_SPECIAL_BINOMIAL_HPP	/usr/include/boost/math/distributions/binomial.hpp	80;"	d
BOOST_MATH_SPECIAL_ERF_HPP	/usr/include/boost/math/special_functions/erf.hpp	7;"	d
BOOST_MATH_SPECIAL_FUNCTIONS_DETAIL_LGAMMA_SMALL	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	7;"	d
BOOST_MATH_SPECIAL_FUNCTIONS_HPP	/usr/include/boost/math/special_functions.hpp	13;"	d
BOOST_MATH_SPECIAL_FUNCTIONS_IBETA_INVERSE_HPP	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	8;"	d
BOOST_MATH_SPECIAL_FUNCTIONS_IGAMMA_INVERSE_HPP	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	7;"	d
BOOST_MATH_SPECIAL_FUNCTIONS_LANCZOS	/usr/include/boost/math/special_functions/lanczos.hpp	7;"	d
BOOST_MATH_SPECIAL_FUNCTIONS_LANCZOS_SSE2	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	7;"	d
BOOST_MATH_SPECIAL_GEOMETRIC_HPP	/usr/include/boost/math/distributions/geometric.hpp	37;"	d
BOOST_MATH_SPECIAL_HERMITE_HPP	/usr/include/boost/math/special_functions/hermite.hpp	8;"	d
BOOST_MATH_SPECIAL_LAGUERRE_HPP	/usr/include/boost/math/special_functions/laguerre.hpp	8;"	d
BOOST_MATH_SPECIAL_LEGENDRE_HPP	/usr/include/boost/math/special_functions/legendre.hpp	8;"	d
BOOST_MATH_SPECIAL_MATH_FWD_HPP	/usr/include/boost/math/special_functions/math_fwd.hpp	20;"	d
BOOST_MATH_SPECIAL_NEGATIVE_BINOMIAL_HPP	/usr/include/boost/math/distributions/negative_binomial.hpp	45;"	d
BOOST_MATH_SPECIAL_NEXT_HPP	/usr/include/boost/math/special_functions/next.hpp	7;"	d
BOOST_MATH_SPECIAL_NON_CENTRAL_BETA_HPP	/usr/include/boost/math/distributions/non_central_beta.hpp	11;"	d
BOOST_MATH_SPECIAL_NON_CENTRAL_CHI_SQUARE_HPP	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	11;"	d
BOOST_MATH_SPECIAL_NON_CENTRAL_F_HPP	/usr/include/boost/math/distributions/non_central_f.hpp	11;"	d
BOOST_MATH_SPECIAL_NON_CENTRAL_T_HPP	/usr/include/boost/math/distributions/non_central_t.hpp	11;"	d
BOOST_MATH_SPECIAL_POISSON_HPP	/usr/include/boost/math/distributions/poisson.hpp	37;"	d
BOOST_MATH_SPECIAL_ROUND_FWD_HPP	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	9;"	d
BOOST_MATH_SPECIAL_SPHERICAL_HARMONIC_HPP	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	8;"	d
BOOST_MATH_SP_DETAIL_BETA_INV_AB	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	14;"	d
BOOST_MATH_SP_DETAIL_GAMMA_INVA	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	14;"	d
BOOST_MATH_SP_FACTORIALS_HPP	/usr/include/boost/math/special_functions/factorials.hpp	7;"	d
BOOST_MATH_SP_UC_FACTORIALS_HPP	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	7;"	d
BOOST_MATH_SQRT1PM1	/usr/include/boost/math/special_functions/sqrt1pm1.hpp	7;"	d
BOOST_MATH_STD_REAL_CONCEPT_HPP	/usr/include/boost/math/concepts/std_real_concept.hpp	30;"	d
BOOST_MATH_STD_USING	/usr/include/boost/math/tools/config.hpp	221;"	d
BOOST_MATH_TOOLS_BIG_CONSTANT_HPP	/usr/include/boost/math/tools/big_constant.hpp	8;"	d
BOOST_MATH_TOOLS_CONFIG_HPP	/usr/include/boost/math/tools/config.hpp	7;"	d
BOOST_MATH_TOOLS_FRACTION_INCLUDED	/usr/include/boost/math/tools/fraction.hpp	7;"	d
BOOST_MATH_TOOLS_MINIMA_HPP	/usr/include/boost/math/tools/minima.hpp	8;"	d
BOOST_MATH_TOOLS_NEWTON_SOLVER_HPP	/usr/include/boost/math/tools/roots.hpp	7;"	d
BOOST_MATH_TOOLS_POLYNOMIAL_HPP	/usr/include/boost/math/tools/polynomial.hpp	7;"	d
BOOST_MATH_TOOLS_POLY_EVAL_10_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_10_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_10_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_11_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_11_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_11_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_12_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_12_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_12_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_13_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_13_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_13_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_14_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_14_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_14_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_15_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_15_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_15_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_16_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_16_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_16_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_17_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_17_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_17_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_18_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_18_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_18_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_19_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_19_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_19_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_20_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_20_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_20_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_2_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_2_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_2_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_3_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_3_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_3_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_4_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_4_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_4_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_5_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_5_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_5_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_6_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_6_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_6_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_7_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_7_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_7_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_8_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_8_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_8_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_9_HPP	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_9_HPP	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_EVAL_9_HPP	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_10_HPP	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_11_HPP	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_12_HPP	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_13_HPP	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_14_HPP	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_15_HPP	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_16_HPP	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_17_HPP	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_18_HPP	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_19_HPP	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_20_HPP	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_2_HPP	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_3_HPP	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_4_HPP	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_5_HPP	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_6_HPP	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_7_HPP	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_8_HPP	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	10;"	d
BOOST_MATH_TOOLS_POLY_RAT_9_HPP	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	10;"	d
BOOST_MATH_TOOLS_PRECISION_INCLUDED	/usr/include/boost/math/tools/precision.hpp	7;"	d
BOOST_MATH_TOOLS_RATIONAL_HPP	/usr/include/boost/math/tools/rational.hpp	7;"	d
BOOST_MATH_TOOLS_RAT_EVAL_10_HPP	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_10_HPP	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_11_HPP	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_11_HPP	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_12_HPP	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_12_HPP	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_13_HPP	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_13_HPP	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_14_HPP	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_14_HPP	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_15_HPP	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_15_HPP	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_16_HPP	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_16_HPP	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_17_HPP	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_17_HPP	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_18_HPP	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_18_HPP	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_19_HPP	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_19_HPP	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_20_HPP	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_20_HPP	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_2_HPP	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_2_HPP	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_3_HPP	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_3_HPP	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_4_HPP	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_4_HPP	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_5_HPP	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_5_HPP	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_6_HPP	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_6_HPP	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_7_HPP	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_7_HPP	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_8_HPP	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_8_HPP	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_9_HPP	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	10;"	d
BOOST_MATH_TOOLS_RAT_EVAL_9_HPP	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	10;"	d
BOOST_MATH_TOOLS_REAL_CAST_HPP	/usr/include/boost/math/tools/real_cast.hpp	7;"	d
BOOST_MATH_TOOLS_REMEZ_HPP	/usr/include/boost/math/tools/remez.hpp	7;"	d
BOOST_MATH_TOOLS_SERIES_INCLUDED	/usr/include/boost/math/tools/series.hpp	7;"	d
BOOST_MATH_TOOLS_SIGN_HPP	/usr/include/boost/math/special_functions/sign.hpp	10;"	d
BOOST_MATH_TOOLS_SOLVE_HPP	/usr/include/boost/math/tools/solve.hpp	7;"	d
BOOST_MATH_TOOLS_SOLVE_ROOT_HPP	/usr/include/boost/math/tools/toms748_solve.hpp	7;"	d
BOOST_MATH_TOOLS_STATS_INCLUDED	/usr/include/boost/math/tools/stats.hpp	7;"	d
BOOST_MATH_TOOLS_TEST_DATA_HPP	/usr/include/boost/math/tools/test_data.hpp	7;"	d
BOOST_MATH_TOOLS_TEST_HPP	/usr/include/boost/math/tools/test.hpp	7;"	d
BOOST_MATH_TOOLS_USER_HPP	/usr/include/boost/math/tools/user.hpp	10;"	d
BOOST_MATH_TOOLS_WORHAROUND_HPP	/usr/include/boost/math/tools/workaround.hpp	7;"	d
BOOST_MATH_TR1_DECL	/usr/include/boost/math/tr1.hpp	36;"	d
BOOST_MATH_TR1_HPP	/usr/include/boost/math/tr1.hpp	8;"	d
BOOST_MATH_TRUNC_HPP	/usr/include/boost/math/special_functions/trunc.hpp	7;"	d
BOOST_MATH_TUPLE_HPP_INCLUDED	/usr/include/boost/math/tools/tuple.hpp	7;"	d
BOOST_MATH_UNDERFLOW_ERROR_POLICY	/usr/include/boost/math/policies/policy.hpp	63;"	d
BOOST_MATH_USE_C99	/usr/include/boost/math/tools/config.hpp	103;"	d
BOOST_MATH_USE_C99	/usr/include/boost/math/tools/config.hpp	91;"	d
BOOST_MATH_USE_C99	/usr/include/boost/math/tools/config.hpp	95;"	d
BOOST_MATH_USE_C99	/usr/include/boost/math/tools/config.hpp	99;"	d
BOOST_MATH_USE_STD_FPCLASSIFY	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	550;"	d
BOOST_MATH_ZETA_HPP	/usr/include/boost/math/special_functions/zeta.hpp	7;"	d
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/bindings/e_float.hpp	/^inline int fpclassify_imp< boost::math::ef::e_float> BOOST_NO_MACRO_EXPAND(boost::math::ef::e_float x, const generic_tag<true>&)$/;"	f	namespace:boost::math::detail	signature:(boost::math::ef::e_float x, const generic_tag<true>&)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool isfinite_impl BOOST_NO_MACRO_EXPAND(long double t, const native_tag&)$/;"	f	namespace:boost::math::detail	signature:(long double t, const native_tag&)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool isinf_impl BOOST_NO_MACRO_EXPAND(long double t, const native_tag&)$/;"	f	namespace:boost::math::detail	signature:(long double t, const native_tag&)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool isnormal_impl BOOST_NO_MACRO_EXPAND(long double t, const native_tag&)$/;"	f	namespace:boost::math::detail	signature:(long double t, const native_tag&)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline int fpclassify BOOST_NO_MACRO_EXPAND(T t)$/;"	f	namespace:boost::math	signature:(T t)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline int fpclassify<long double> BOOST_NO_MACRO_EXPAND(long double t)$/;"	f	namespace:boost::math	signature:(long double t)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline int fpclassify_imp BOOST_NO_MACRO_EXPAND(T t, const generic_tag<false>&)$/;"	f	namespace:boost::math::detail	signature:(T t, const generic_tag<false>&)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline int fpclassify_imp BOOST_NO_MACRO_EXPAND(T t, const generic_tag<true>&)$/;"	f	namespace:boost::math::detail	signature:(T t, const generic_tag<true>&)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline int fpclassify_imp BOOST_NO_MACRO_EXPAND(T t, const native_tag&)$/;"	f	namespace:boost::math::detail	signature:(T t, const native_tag&)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline int fpclassify_imp BOOST_NO_MACRO_EXPAND(long double t, const native_tag&)$/;"	f	namespace:boost::math::detail	signature:(long double t, const native_tag&)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^int fpclassify_imp BOOST_NO_MACRO_EXPAND(T x, ieee_copy_all_bits_tag)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_all_bits_tag)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^int fpclassify_imp BOOST_NO_MACRO_EXPAND(T x, ieee_copy_leading_bits_tag)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_leading_bits_tag)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^template <> inline bool isnan BOOST_NO_MACRO_EXPAND<double>(double t){ return ::boost::math_detail::is_nan_helper(t, boost::true_type()); }$/;"	f	namespace:boost::math	signature:(double t)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^template <> inline bool isnan BOOST_NO_MACRO_EXPAND<float>(float t){ return ::boost::math_detail::is_nan_helper(t, boost::true_type()); }$/;"	f	namespace:boost::math	signature:(float t)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^template <> inline bool isnan BOOST_NO_MACRO_EXPAND<long double>(long double t){ return ::boost::math_detail::is_nan_helper(t, boost::true_type()); }$/;"	f	namespace:boost::math	signature:(long double t)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T changesign BOOST_NO_MACRO_EXPAND(const T& z);$/;"	p	namespace:boost::math	signature:(const T& z)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T copysign BOOST_NO_MACRO_EXPAND(const T& x, const T& y);$/;"	p	namespace:boost::math	signature:(const T& x, const T& y)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   bool isfinite BOOST_NO_MACRO_EXPAND(T z);$/;"	p	namespace:boost::math	signature:(T z)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   bool isinf BOOST_NO_MACRO_EXPAND(T t);$/;"	p	namespace:boost::math	signature:(T t)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   bool isnan BOOST_NO_MACRO_EXPAND(T t);$/;"	p	namespace:boost::math	signature:(T t)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   bool isnormal BOOST_NO_MACRO_EXPAND(T t);$/;"	p	namespace:boost::math	signature:(T t)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   int fpclassify BOOST_NO_MACRO_EXPAND(T t);$/;"	p	namespace:boost::math	signature:(T t)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   int sign BOOST_NO_MACRO_EXPAND(const T& z);$/;"	p	namespace:boost::math	signature:(const T& z)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   int signbit BOOST_NO_MACRO_EXPAND(T x);$/;"	p	namespace:boost::math	signature:(T x)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	32;"	d
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/sign.hpp	/^inline T copysign BOOST_NO_MACRO_EXPAND(const T& x, const T& y)$/;"	f	namespace:boost::math	signature:(const T& x, const T& y)
BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/sign.hpp	/^inline int sign BOOST_NO_MACRO_EXPAND(const T& z)$/;"	f	namespace:boost::math	signature:(const T& z)
BOOST_OCTONION_ACCESSOR_GENERATOR	/usr/include/boost/math/octonion.hpp	1619;"	d
BOOST_OCTONION_ACCESSOR_GENERATOR	/usr/include/boost/math/octonion.hpp	39;"	d
BOOST_OCTONION_CONSTRUCTOR_GENERATOR	/usr/include/boost/math/octonion.hpp	1588;"	d
BOOST_OCTONION_CONSTRUCTOR_GENERATOR	/usr/include/boost/math/octonion.hpp	701;"	d
BOOST_OCTONION_HPP	/usr/include/boost/math/octonion.hpp	12;"	d
BOOST_OCTONION_MEMBER_ADD_GENERATOR	/usr/include/boost/math/octonion.hpp	1367;"	d
BOOST_OCTONION_MEMBER_ADD_GENERATOR	/usr/include/boost/math/octonion.hpp	1592;"	d
BOOST_OCTONION_MEMBER_ADD_GENERATOR_1	/usr/include/boost/math/octonion.hpp	1597;"	d
BOOST_OCTONION_MEMBER_ADD_GENERATOR_1	/usr/include/boost/math/octonion.hpp	750;"	d
BOOST_OCTONION_MEMBER_ADD_GENERATOR_2	/usr/include/boost/math/octonion.hpp	1598;"	d
BOOST_OCTONION_MEMBER_ADD_GENERATOR_2	/usr/include/boost/math/octonion.hpp	758;"	d
BOOST_OCTONION_MEMBER_ADD_GENERATOR_3	/usr/include/boost/math/octonion.hpp	1599;"	d
BOOST_OCTONION_MEMBER_ADD_GENERATOR_3	/usr/include/boost/math/octonion.hpp	767;"	d
BOOST_OCTONION_MEMBER_ADD_GENERATOR_4	/usr/include/boost/math/octonion.hpp	1600;"	d
BOOST_OCTONION_MEMBER_ADD_GENERATOR_4	/usr/include/boost/math/octonion.hpp	778;"	d
BOOST_OCTONION_MEMBER_ALGEBRAIC_GENERATOR	/usr/include/boost/math/octonion.hpp	1391;"	d
BOOST_OCTONION_MEMBER_ALGEBRAIC_GENERATOR	/usr/include/boost/math/octonion.hpp	1590;"	d
BOOST_OCTONION_MEMBER_ASSIGNMENT_GENERATOR	/usr/include/boost/math/octonion.hpp	121;"	d
BOOST_OCTONION_MEMBER_ASSIGNMENT_GENERATOR	/usr/include/boost/math/octonion.hpp	1617;"	d
BOOST_OCTONION_MEMBER_DATA_GENERATOR	/usr/include/boost/math/octonion.hpp	1615;"	d
BOOST_OCTONION_MEMBER_DATA_GENERATOR	/usr/include/boost/math/octonion.hpp	183;"	d
BOOST_OCTONION_MEMBER_DIV_GENERATOR	/usr/include/boost/math/octonion.hpp	1385;"	d
BOOST_OCTONION_MEMBER_DIV_GENERATOR	/usr/include/boost/math/octonion.hpp	1595;"	d
BOOST_OCTONION_MEMBER_DIV_GENERATOR_1	/usr/include/boost/math/octonion.hpp	1609;"	d
BOOST_OCTONION_MEMBER_DIV_GENERATOR_1	/usr/include/boost/math/octonion.hpp	950;"	d
BOOST_OCTONION_MEMBER_DIV_GENERATOR_2	/usr/include/boost/math/octonion.hpp	1610;"	d
BOOST_OCTONION_MEMBER_DIV_GENERATOR_2	/usr/include/boost/math/octonion.hpp	962;"	d
BOOST_OCTONION_MEMBER_DIV_GENERATOR_3	/usr/include/boost/math/octonion.hpp	1088;"	d
BOOST_OCTONION_MEMBER_DIV_GENERATOR_3	/usr/include/boost/math/octonion.hpp	1611;"	d
BOOST_OCTONION_MEMBER_DIV_GENERATOR_4	/usr/include/boost/math/octonion.hpp	1220;"	d
BOOST_OCTONION_MEMBER_DIV_GENERATOR_4	/usr/include/boost/math/octonion.hpp	1612;"	d
BOOST_OCTONION_MEMBER_MUL_GENERATOR	/usr/include/boost/math/octonion.hpp	1379;"	d
BOOST_OCTONION_MEMBER_MUL_GENERATOR	/usr/include/boost/math/octonion.hpp	1594;"	d
BOOST_OCTONION_MEMBER_MUL_GENERATOR_1	/usr/include/boost/math/octonion.hpp	1605;"	d
BOOST_OCTONION_MEMBER_MUL_GENERATOR_1	/usr/include/boost/math/octonion.hpp	838;"	d
BOOST_OCTONION_MEMBER_MUL_GENERATOR_2	/usr/include/boost/math/octonion.hpp	1606;"	d
BOOST_OCTONION_MEMBER_MUL_GENERATOR_2	/usr/include/boost/math/octonion.hpp	853;"	d
BOOST_OCTONION_MEMBER_MUL_GENERATOR_3	/usr/include/boost/math/octonion.hpp	1607;"	d
BOOST_OCTONION_MEMBER_MUL_GENERATOR_3	/usr/include/boost/math/octonion.hpp	880;"	d
BOOST_OCTONION_MEMBER_MUL_GENERATOR_4	/usr/include/boost/math/octonion.hpp	1608;"	d
BOOST_OCTONION_MEMBER_MUL_GENERATOR_4	/usr/include/boost/math/octonion.hpp	909;"	d
BOOST_OCTONION_MEMBER_SUB_GENERATOR	/usr/include/boost/math/octonion.hpp	1373;"	d
BOOST_OCTONION_MEMBER_SUB_GENERATOR	/usr/include/boost/math/octonion.hpp	1593;"	d
BOOST_OCTONION_MEMBER_SUB_GENERATOR_1	/usr/include/boost/math/octonion.hpp	1601;"	d
BOOST_OCTONION_MEMBER_SUB_GENERATOR_1	/usr/include/boost/math/octonion.hpp	794;"	d
BOOST_OCTONION_MEMBER_SUB_GENERATOR_2	/usr/include/boost/math/octonion.hpp	1602;"	d
BOOST_OCTONION_MEMBER_SUB_GENERATOR_2	/usr/include/boost/math/octonion.hpp	802;"	d
BOOST_OCTONION_MEMBER_SUB_GENERATOR_3	/usr/include/boost/math/octonion.hpp	1603;"	d
BOOST_OCTONION_MEMBER_SUB_GENERATOR_3	/usr/include/boost/math/octonion.hpp	811;"	d
BOOST_OCTONION_MEMBER_SUB_GENERATOR_4	/usr/include/boost/math/octonion.hpp	1604;"	d
BOOST_OCTONION_MEMBER_SUB_GENERATOR_4	/usr/include/boost/math/octonion.hpp	822;"	d
BOOST_OCTONION_NOT_EQUAL_GENERATOR	/usr/include/boost/math/octonion.hpp	1821;"	d
BOOST_OCTONION_NOT_EQUAL_GENERATOR	/usr/include/boost/math/octonion.hpp	1854;"	d
BOOST_OCTONION_OPERATOR_GENERATOR	/usr/include/boost/math/octonion.hpp	1666;"	d
BOOST_OCTONION_OPERATOR_GENERATOR	/usr/include/boost/math/octonion.hpp	1682;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_1_L	/usr/include/boost/math/octonion.hpp	1631;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_1_L	/usr/include/boost/math/octonion.hpp	1684;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_1_R	/usr/include/boost/math/octonion.hpp	1636;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_1_R	/usr/include/boost/math/octonion.hpp	1685;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_2_L	/usr/include/boost/math/octonion.hpp	1641;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_2_L	/usr/include/boost/math/octonion.hpp	1686;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_2_R	/usr/include/boost/math/octonion.hpp	1646;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_2_R	/usr/include/boost/math/octonion.hpp	1687;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_3_L	/usr/include/boost/math/octonion.hpp	1651;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_3_L	/usr/include/boost/math/octonion.hpp	1688;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_3_R	/usr/include/boost/math/octonion.hpp	1656;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_3_R	/usr/include/boost/math/octonion.hpp	1689;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_4	/usr/include/boost/math/octonion.hpp	1661;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_4	/usr/include/boost/math/octonion.hpp	1690;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_BODY	/usr/include/boost/math/octonion.hpp	1624;"	d
BOOST_OCTONION_OPERATOR_GENERATOR_BODY	/usr/include/boost/math/octonion.hpp	1692;"	d
BOOST_OCTONION_VALARRAY_LOADER	/usr/include/boost/math/octonion.hpp	4383;"	d
BOOST_OCTONION_VALARRAY_LOADER	/usr/include/boost/math/octonion.hpp	4468;"	d
BOOST_OWENS_T_HPP	/usr/include/boost/math/special_functions/owens_t.hpp	8;"	d
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tools/config.hpp	/^inline T max BOOST_PREVENT_MACRO_SUBSTITUTION(T a, T b, T c)$/;"	f	namespace:boost::math::tools	signature:(T a, T b, T c)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tools/config.hpp	/^inline T max BOOST_PREVENT_MACRO_SUBSTITUTION(T a, T b, T c, T d)$/;"	f	namespace:boost::math::tools	signature:(T a, T b, T c, T d)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tools/stats.hpp	/^   T max BOOST_PREVENT_MACRO_SUBSTITUTION()const{ return m_max; }$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tools/stats.hpp	/^   T min BOOST_PREVENT_MACRO_SUBSTITUTION()const{ return m_min; }$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tools/test.hpp	/^   T max BOOST_PREVENT_MACRO_SUBSTITUTION()const{ return (stat.max)(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tools/test.hpp	/^   T min BOOST_PREVENT_MACRO_SUBSTITUTION()const{ return (stat.min)(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline ::boost::long_long_type llround BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline ::boost::long_long_type llround BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline ::boost::long_long_type llround BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline ::boost::long_long_type llround BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline ::boost::long_long_type llroundf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline ::boost::long_long_type llroundl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double acosh BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double asinh BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double assoc_laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, unsigned m, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, unsigned m, double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double assoc_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double atanh BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double beta BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double cbrt BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double comp_ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(double k)$/;"	f	namespace:boost::math::tr1	signature:(double k)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double copysign BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double cyl_bessel_i BOOST_PREVENT_MACRO_SUBSTITUTION(double nu, double x)$/;"	f	namespace:boost::math::tr1	signature:(double nu, double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double cyl_bessel_j BOOST_PREVENT_MACRO_SUBSTITUTION(double nu, double x)$/;"	f	namespace:boost::math::tr1	signature:(double nu, double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double cyl_bessel_k BOOST_PREVENT_MACRO_SUBSTITUTION(double nu, double x)$/;"	f	namespace:boost::math::tr1	signature:(double nu, double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double cyl_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(double nu, double x)$/;"	f	namespace:boost::math::tr1	signature:(double nu, double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(double k, double phi)$/;"	f	namespace:boost::math::tr1	signature:(double k, double phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double ellint_2 BOOST_PREVENT_MACRO_SUBSTITUTION(double k, double phi)$/;"	f	namespace:boost::math::tr1	signature:(double k, double phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double ellint_3 BOOST_PREVENT_MACRO_SUBSTITUTION(double k, double nu, double phi)$/;"	f	namespace:boost::math::tr1	signature:(double k, double nu, double phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double erf BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double erfc BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double expint BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double expm1 BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double fmax BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double fmin BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double hermite BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double hypot BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double lgamma BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double log1p BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double nextafter BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double nexttoward BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double riemann_zeta BOOST_PREVENT_MACRO_SUBSTITUTION(double z)$/;"	f	namespace:boost::math::tr1	signature:(double z)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double round BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double sph_bessel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double sph_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, double theta)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, double theta)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double sph_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double tgamma BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double trunc BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float acosh BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float acoshf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float asinh BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float asinhf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float assoc_laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, unsigned m, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, unsigned m, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float assoc_laguerref BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, unsigned m, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, unsigned m, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float assoc_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float assoc_legendref BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float atanh BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float atanhf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float beta BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float betaf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cbrt BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cbrtf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float comp_ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(float k)$/;"	f	namespace:boost::math::tr1	signature:(float k)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float comp_ellint_1f BOOST_PREVENT_MACRO_SUBSTITUTION(float k)$/;"	f	namespace:boost::math::tr1	signature:(float k)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float copysign BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float copysignf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_bessel_i BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_bessel_if BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_bessel_j BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_bessel_jf BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_bessel_k BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_bessel_kf BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_neumannf BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(float k, float phi)$/;"	f	namespace:boost::math::tr1	signature:(float k, float phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float ellint_1f BOOST_PREVENT_MACRO_SUBSTITUTION(float k, float phi)$/;"	f	namespace:boost::math::tr1	signature:(float k, float phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float ellint_2 BOOST_PREVENT_MACRO_SUBSTITUTION(float k, float phi)$/;"	f	namespace:boost::math::tr1	signature:(float k, float phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float ellint_2f BOOST_PREVENT_MACRO_SUBSTITUTION(float k, float phi)$/;"	f	namespace:boost::math::tr1	signature:(float k, float phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float ellint_3 BOOST_PREVENT_MACRO_SUBSTITUTION(float k, float nu, float phi)$/;"	f	namespace:boost::math::tr1	signature:(float k, float nu, float phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float ellint_3f BOOST_PREVENT_MACRO_SUBSTITUTION(float k, float nu, float phi)$/;"	f	namespace:boost::math::tr1	signature:(float k, float nu, float phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float erf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float erfc BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float erfcf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float erff BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float expint BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float expintf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float expm1 BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float expm1f BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float fmax BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float fmaxf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float fmin BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float fminf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float hermite BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float hermitef BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float hypot BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float hypotf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float laguerref BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float legendref BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float lgamma BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float lgammaf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float log1p BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float log1pf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float nextafter BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float nextafterf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float nexttoward BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float nexttowardf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float riemann_zeta BOOST_PREVENT_MACRO_SUBSTITUTION(float z)$/;"	f	namespace:boost::math::tr1	signature:(float z)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float riemann_zetaf BOOST_PREVENT_MACRO_SUBSTITUTION(float z)$/;"	f	namespace:boost::math::tr1	signature:(float z)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float round BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float roundf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float sph_bessel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float sph_besself BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float sph_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, float theta)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, float theta)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float sph_legendref BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, float theta)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, float theta)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float sph_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float sph_neumannf BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float tgamma BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float tgammaf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float trunc BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float truncf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double acosh BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double acoshl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double asinh BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double asinhl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double assoc_laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, unsigned m, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, unsigned m, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double assoc_laguerrel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, unsigned m, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, unsigned m, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double assoc_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double assoc_legendrel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double atanh BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double atanhl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double beta BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double betal BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cbrt BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cbrtl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double comp_ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(long double k)$/;"	f	namespace:boost::math::tr1	signature:(long double k)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double comp_ellint_1l BOOST_PREVENT_MACRO_SUBSTITUTION(long double k)$/;"	f	namespace:boost::math::tr1	signature:(long double k)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double copysign BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double copysignl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_bessel_i BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_bessel_il BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_bessel_j BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_bessel_jl BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_bessel_k BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_bessel_kl BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_neumannl BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(long double k, long double phi)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double ellint_1l BOOST_PREVENT_MACRO_SUBSTITUTION(long double k, long double phi)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double ellint_2 BOOST_PREVENT_MACRO_SUBSTITUTION(long double k, long double phi)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double ellint_2l BOOST_PREVENT_MACRO_SUBSTITUTION(long double k, long double phi)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double ellint_3 BOOST_PREVENT_MACRO_SUBSTITUTION(long double k, long double nu, long double phi)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double nu, long double phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double ellint_3l BOOST_PREVENT_MACRO_SUBSTITUTION(long double k, long double nu, long double phi)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double nu, long double phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double erf BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double erfc BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double erfcl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double erfl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double expint BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double expintl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double expm1 BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double expm1l BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double fmax BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double fmaxl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double fmin BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double fminl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double hermite BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double hermitel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double hypot BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double hypotl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double laguerrel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double legendrel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double lgamma BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double lgammal BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double log1p BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double log1pl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double nextafter BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double nextafterl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double nexttoward BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double nexttowardl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double riemann_zeta BOOST_PREVENT_MACRO_SUBSTITUTION(long double z)$/;"	f	namespace:boost::math::tr1	signature:(long double z)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double riemann_zetal BOOST_PREVENT_MACRO_SUBSTITUTION(long double z)$/;"	f	namespace:boost::math::tr1	signature:(long double z)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double round BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double roundl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double sph_bessel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double sph_bessell BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double sph_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, long double theta)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, long double theta)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double sph_legendrel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, long double theta)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, long double theta)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double sph_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double sph_neumannl BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double tgamma BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double tgammal BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double trunc BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double truncl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long lround BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long lround BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long lround BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long lroundf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long lroundl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2, T3>::type ellint_3 BOOST_PREVENT_MACRO_SUBSTITUTION(T1 k, T2 nu, T3 phi)$/;"	f	namespace:boost::math::tr1	signature:(T1 k, T2 nu, T3 phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type beta BOOST_PREVENT_MACRO_SUBSTITUTION(T2 x, T1 y)$/;"	f	namespace:boost::math::tr1	signature:(T2 x, T1 y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type copysign BOOST_PREVENT_MACRO_SUBSTITUTION(T1 x, T2 y)$/;"	f	namespace:boost::math::tr1	signature:(T1 x, T2 y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type cyl_bessel_i BOOST_PREVENT_MACRO_SUBSTITUTION(T1 nu, T2 x)$/;"	f	namespace:boost::math::tr1	signature:(T1 nu, T2 x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type cyl_bessel_j BOOST_PREVENT_MACRO_SUBSTITUTION(T1 nu, T2 x)$/;"	f	namespace:boost::math::tr1	signature:(T1 nu, T2 x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type cyl_bessel_k BOOST_PREVENT_MACRO_SUBSTITUTION(T1 nu, T2 x)$/;"	f	namespace:boost::math::tr1	signature:(T1 nu, T2 x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type cyl_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(T1 nu, T2 x)$/;"	f	namespace:boost::math::tr1	signature:(T1 nu, T2 x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(T1 k, T2 phi)$/;"	f	namespace:boost::math::tr1	signature:(T1 k, T2 phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_2 BOOST_PREVENT_MACRO_SUBSTITUTION(T1 k, T2 phi)$/;"	f	namespace:boost::math::tr1	signature:(T1 k, T2 phi)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type fmax BOOST_PREVENT_MACRO_SUBSTITUTION(T1 x, T2 y)$/;"	f	namespace:boost::math::tr1	signature:(T1 x, T2 y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type fmin BOOST_PREVENT_MACRO_SUBSTITUTION(T1 x, T2 y)$/;"	f	namespace:boost::math::tr1	signature:(T1 x, T2 y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type hypot BOOST_PREVENT_MACRO_SUBSTITUTION(T1 x, T2 y)$/;"	f	namespace:boost::math::tr1	signature:(T1 x, T2 y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type nextafter BOOST_PREVENT_MACRO_SUBSTITUTION(T1 x, T2 y)$/;"	f	namespace:boost::math::tr1	signature:(T1 x, T2 y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type nexttoward BOOST_PREVENT_MACRO_SUBSTITUTION(T1 x, T2 y)$/;"	f	namespace:boost::math::tr1	signature:(T1 x, T2 y)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type acosh BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type asinh BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type assoc_laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, unsigned m, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, unsigned m, T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type assoc_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type atanh BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type cbrt BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type comp_ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(T k)$/;"	f	namespace:boost::math::tr1	signature:(T k)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type erf BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type erfc BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type expint BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type expm1 BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type hermite BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type lgamma BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type log1p BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type riemann_zeta BOOST_PREVENT_MACRO_SUBSTITUTION(T z)$/;"	f	namespace:boost::math::tr1	signature:(T z)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type round BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type sph_bessel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type sph_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, T theta)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, T theta)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type sph_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type tgamma BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type trunc BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^long lround BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( __int64, unsigned __int64 );$/;"	p	namespace:boost::math::detail	signature:( __int64, unsigned __int64 )
BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( boost::long_long_type, boost::ulong_long_type );$/;"	p	namespace:boost::math::detail	signature:( boost::long_long_type, boost::ulong_long_type )
BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( char, unsigned char ); \/\/ char is signed$/;"	p	namespace:boost::math::detail	signature:( char, unsigned char )
BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( int, unsigned );$/;"	p	namespace:boost::math::detail	signature:( int, unsigned )
BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( long, unsigned long );$/;"	p	namespace:boost::math::detail	signature:( long, unsigned long )
BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( short, unsigned short );$/;"	p	namespace:boost::math::detail	signature:( short, unsigned short )
BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( signed char, unsigned char );$/;"	p	namespace:boost::math::detail	signature:( signed char, unsigned char )
BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	326;"	d
BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	348;"	d
BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( boost::ulong_long_type );$/;"	p	namespace:boost::math::detail	signature:( boost::ulong_long_type )
BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( char ); \/\/ char is unsigned$/;"	p	namespace:boost::math::detail	signature:( char )
BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( unsigned );$/;"	p	namespace:boost::math::detail	signature:( unsigned )
BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( unsigned __int64 );$/;"	p	namespace:boost::math::detail	signature:( unsigned __int64 )
BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( unsigned char );$/;"	p	namespace:boost::math::detail	signature:( unsigned char )
BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( unsigned long );$/;"	p	namespace:boost::math::detail	signature:( unsigned long )
BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( unsigned short );$/;"	p	namespace:boost::math::detail	signature:( unsigned short )
BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	305;"	d
BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	324;"	d
BOOST_QUATERNION_ACCESSOR_GENERATOR	/usr/include/boost/math/quaternion.hpp	1054;"	d
BOOST_QUATERNION_ACCESSOR_GENERATOR	/usr/include/boost/math/quaternion.hpp	54;"	d
BOOST_QUATERNION_CONSTRUCTOR_GENERATOR	/usr/include/boost/math/quaternion.hpp	1047;"	d
BOOST_QUATERNION_CONSTRUCTOR_GENERATOR	/usr/include/boost/math/quaternion.hpp	454;"	d
BOOST_QUATERNION_HPP	/usr/include/boost/math/quaternion.hpp	11;"	d
BOOST_QUATERNION_MEMBER_ADD_GENERATOR	/usr/include/boost/math/quaternion.hpp	1030;"	d
BOOST_QUATERNION_MEMBER_ADD_GENERATOR	/usr/include/boost/math/quaternion.hpp	817;"	d
BOOST_QUATERNION_MEMBER_ADD_GENERATOR_1	/usr/include/boost/math/quaternion.hpp	1034;"	d
BOOST_QUATERNION_MEMBER_ADD_GENERATOR_1	/usr/include/boost/math/quaternion.hpp	476;"	d
BOOST_QUATERNION_MEMBER_ADD_GENERATOR_2	/usr/include/boost/math/quaternion.hpp	1035;"	d
BOOST_QUATERNION_MEMBER_ADD_GENERATOR_2	/usr/include/boost/math/quaternion.hpp	484;"	d
BOOST_QUATERNION_MEMBER_ADD_GENERATOR_3	/usr/include/boost/math/quaternion.hpp	1036;"	d
BOOST_QUATERNION_MEMBER_ADD_GENERATOR_3	/usr/include/boost/math/quaternion.hpp	493;"	d
BOOST_QUATERNION_MEMBER_ALGEBRAIC_GENERATOR	/usr/include/boost/math/quaternion.hpp	1029;"	d
BOOST_QUATERNION_MEMBER_ALGEBRAIC_GENERATOR	/usr/include/boost/math/quaternion.hpp	837;"	d
BOOST_QUATERNION_MEMBER_ASSIGNMENT_GENERATOR	/usr/include/boost/math/quaternion.hpp	1050;"	d
BOOST_QUATERNION_MEMBER_ASSIGNMENT_GENERATOR	/usr/include/boost/math/quaternion.hpp	96;"	d
BOOST_QUATERNION_MEMBER_DATA_GENERATOR	/usr/include/boost/math/quaternion.hpp	1052;"	d
BOOST_QUATERNION_MEMBER_DATA_GENERATOR	/usr/include/boost/math/quaternion.hpp	138;"	d
BOOST_QUATERNION_MEMBER_DIV_GENERATOR	/usr/include/boost/math/quaternion.hpp	1033;"	d
BOOST_QUATERNION_MEMBER_DIV_GENERATOR	/usr/include/boost/math/quaternion.hpp	832;"	d
BOOST_QUATERNION_MEMBER_DIV_GENERATOR_1	/usr/include/boost/math/quaternion.hpp	1043;"	d
BOOST_QUATERNION_MEMBER_DIV_GENERATOR_1	/usr/include/boost/math/quaternion.hpp	593;"	d
BOOST_QUATERNION_MEMBER_DIV_GENERATOR_2	/usr/include/boost/math/quaternion.hpp	1044;"	d
BOOST_QUATERNION_MEMBER_DIV_GENERATOR_2	/usr/include/boost/math/quaternion.hpp	605;"	d
BOOST_QUATERNION_MEMBER_DIV_GENERATOR_3	/usr/include/boost/math/quaternion.hpp	1045;"	d
BOOST_QUATERNION_MEMBER_DIV_GENERATOR_3	/usr/include/boost/math/quaternion.hpp	707;"	d
BOOST_QUATERNION_MEMBER_MUL_GENERATOR	/usr/include/boost/math/quaternion.hpp	1032;"	d
BOOST_QUATERNION_MEMBER_MUL_GENERATOR	/usr/include/boost/math/quaternion.hpp	827;"	d
BOOST_QUATERNION_MEMBER_MUL_GENERATOR_1	/usr/include/boost/math/quaternion.hpp	1040;"	d
BOOST_QUATERNION_MEMBER_MUL_GENERATOR_1	/usr/include/boost/math/quaternion.hpp	534;"	d
BOOST_QUATERNION_MEMBER_MUL_GENERATOR_2	/usr/include/boost/math/quaternion.hpp	1041;"	d
BOOST_QUATERNION_MEMBER_MUL_GENERATOR_2	/usr/include/boost/math/quaternion.hpp	545;"	d
BOOST_QUATERNION_MEMBER_MUL_GENERATOR_3	/usr/include/boost/math/quaternion.hpp	1042;"	d
BOOST_QUATERNION_MEMBER_MUL_GENERATOR_3	/usr/include/boost/math/quaternion.hpp	564;"	d
BOOST_QUATERNION_MEMBER_SUB_GENERATOR	/usr/include/boost/math/quaternion.hpp	1031;"	d
BOOST_QUATERNION_MEMBER_SUB_GENERATOR	/usr/include/boost/math/quaternion.hpp	822;"	d
BOOST_QUATERNION_MEMBER_SUB_GENERATOR_1	/usr/include/boost/math/quaternion.hpp	1037;"	d
BOOST_QUATERNION_MEMBER_SUB_GENERATOR_1	/usr/include/boost/math/quaternion.hpp	505;"	d
BOOST_QUATERNION_MEMBER_SUB_GENERATOR_2	/usr/include/boost/math/quaternion.hpp	1038;"	d
BOOST_QUATERNION_MEMBER_SUB_GENERATOR_2	/usr/include/boost/math/quaternion.hpp	513;"	d
BOOST_QUATERNION_MEMBER_SUB_GENERATOR_3	/usr/include/boost/math/quaternion.hpp	1039;"	d
BOOST_QUATERNION_MEMBER_SUB_GENERATOR_3	/usr/include/boost/math/quaternion.hpp	522;"	d
BOOST_QUATERNION_NOT_EQUAL_GENERATOR	/usr/include/boost/math/quaternion.hpp	1190;"	d
BOOST_QUATERNION_NOT_EQUAL_GENERATOR	/usr/include/boost/math/quaternion.hpp	1215;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR	/usr/include/boost/math/quaternion.hpp	1091;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR	/usr/include/boost/math/quaternion.hpp	1105;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR_1_L	/usr/include/boost/math/quaternion.hpp	1066;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR_1_L	/usr/include/boost/math/quaternion.hpp	1107;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR_1_R	/usr/include/boost/math/quaternion.hpp	1071;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR_1_R	/usr/include/boost/math/quaternion.hpp	1108;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR_2_L	/usr/include/boost/math/quaternion.hpp	1076;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR_2_L	/usr/include/boost/math/quaternion.hpp	1109;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR_2_R	/usr/include/boost/math/quaternion.hpp	1081;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR_2_R	/usr/include/boost/math/quaternion.hpp	1110;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR_3	/usr/include/boost/math/quaternion.hpp	1086;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR_3	/usr/include/boost/math/quaternion.hpp	1111;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR_BODY	/usr/include/boost/math/quaternion.hpp	1059;"	d
BOOST_QUATERNION_OPERATOR_GENERATOR_BODY	/usr/include/boost/math/quaternion.hpp	1113;"	d
BOOST_QUATERNION_VALARRAY_LOADER	/usr/include/boost/math/quaternion.hpp	1570;"	d
BOOST_QUATERNION_VALARRAY_LOADER	/usr/include/boost/math/quaternion.hpp	1651;"	d
BOOST_SINC_HPP	/usr/include/boost/math/special_functions/sinc.hpp	11;"	d
BOOST_SINHC_HPP	/usr/include/boost/math/special_functions/sinhc.hpp	11;"	d
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT( ::std::numeric_limits<Real>::radix == 2);$/;"	p	struct:boost::math::policies::precision	access:public	signature:( ::std::numeric_limits<Real>::radix == 2)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT((::std::numeric_limits<Real>::radix == 2) || ((::std::numeric_limits<Real>::is_specialized == 0) || (::std::numeric_limits<Real>::digits == 0)));$/;"	p	struct:boost::math::policies::precision	access:public	signature:(::std::numeric_limits<Real>::radix == 2) || ((::std::numeric_limits<Real>::is_specialized == 0) || (::std::numeric_limits<Real>::digits == 0))
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A10>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A10>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A11>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A11>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A12>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A12>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A13>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A13>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A1>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A1>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A2>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A2>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A3>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A3>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A4>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A4>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A5>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A5>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A6>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A6>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A7>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A7>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A8>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A8>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A9>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A9>::value)
BOOST_STATIC_ASSERT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_ASSERT(false);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:private	signature:(false)
BOOST_STATIC_ASSERT	/usr/include/boost/math/tools/promotion.hpp	/^         BOOST_STATIC_ASSERT((0 == ::boost::is_same<type, long double>::value));$/;"	p	struct:boost::math::tools::promote_args	access:public	signature:(0 == ::boost::is_same<type, long double>::value)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^            BOOST_STATIC_CONSTANT( static_gcd_type, value = 0UL );$/;"	p	struct:boost::math::detail::static_lcm_helper2_t::helper	access:public	signature:( static_gcd_type, value = 0UL )
BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^            BOOST_STATIC_CONSTANT( static_gcd_type, value = Value1$/;"	p	struct:boost::math::detail::static_lcm_helper2_t::helper	access:public	signature:( static_gcd_type, value = Value1 / gcd_type::value * Value2 )
BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, new_value1 = Value2 );$/;"	p	struct:boost::math::detail::static_gcd_helper_t	access:private	signature:( static_gcd_type, new_value1 = Value2 )
BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, new_value2 = Value1 % Value2 );$/;"	p	struct:boost::math::detail::static_gcd_helper_t	access:private	signature:( static_gcd_type, new_value2 = Value1 % Value2 )
BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, value = 0UL );$/;"	p	struct:boost::math::detail::static_lcm_helper_t	access:public	signature:( static_gcd_type, value = 0UL )
BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, value = Value1 );$/;"	p	struct:boost::math::detail::static_gcd_helper_t	access:public	signature:( static_gcd_type, value = Value1 )
BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, value = Value1 \/ gcd_type::value$/;"	p	struct:boost::math::detail::static_lcm_helper_t	access:public	signature:( static_gcd_type, value = Value1 / gcd_type::value * Value2 )
BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, value = next_step_type::value );$/;"	p	struct:boost::math::detail::static_gcd_helper_t	access:public	signature:( static_gcd_type, value = next_step_type::value )
BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, value$/;"	p	struct:boost::math::detail::static_lcm_helper_t	access:public	signature:( static_gcd_type, value = static_lcm_helper2_t<Value1>::BOOST_NESTED_TEMPLATE helper<Value2>::value )
BOOST_STATIC_CONSTANT	/usr/include/boost/math/constants/constants.hpp	/^   BOOST_STATIC_CONSTANT(int, max_string_digits = (101 * 1000L) \/ 301L);$/;"	p	namespace:boost::math::constants	signature:(int, max_string_digits = (101 * 1000L) / 301L)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = sizeof(::boost::math::policies::detail::test_is_default_arg(static_cast<T*>(0))) == 1);$/;"	p	struct:boost::math::policies::detail::is_default_policy_imp	access:public	signature:(bool, value = sizeof(::boost::math::policies::detail::test_is_default_arg(static_cast<T*>(0))) == 1)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = sizeof(::boost::math::policies::detail::test_is_valid_arg(static_cast<T*>(0))) == 1);$/;"	p	struct:boost::math::policies::detail::is_valid_policy_imp	access:public	signature:(bool, value = sizeof(::boost::math::policies::detail::test_is_valid_arg(static_cast<T*>(0))) == 1)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/beta.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 15); \/\/ ~8-15 digit accuracy$/;"	p	struct:boost::math::detail::Pn_size	access:public	signature:(unsigned, value = 15)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/beta.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 30); \/\/ 16-20 digit accuracy$/;"	p	struct:boost::math::detail::Pn_size	access:public	signature:(unsigned, value = 30)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/beta.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 50); \/\/ ~35-50 digit accuracy$/;"	p	struct:boost::math::detail::Pn_size	access:public	signature:(unsigned, value = 50)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/beta.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 50);$/;"	p	struct:boost::math::detail::Pn_size	access:public	signature:(unsigned, value = 50)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(int, offset_ = 0);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:private	signature:(int, offset_ = 0)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(int, offset_ = 12);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:private	signature:(int, offset_ = 12)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(int, offset_ = 4);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:private	signature:(int, offset_ = 4)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, exponent    = 0x7f800000);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, exponent = 0x7f800000)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, exponent    = 0x7ff00000);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, exponent = 0x7ff00000)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, exponent    = 0x7fff0000);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, exponent = 0x7fff0000)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, flag        = 0);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, flag = 0)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, flag        = 0x00000000);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, flag = 0x00000000)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, flag        = 0x00008000);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, flag = 0x00008000)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, sign        = 0x80000000u);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, sign = 0x80000000u)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, significand = 0x00007fff);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, significand = 0x00007fff)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, significand = 0x0000ffff);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, significand = 0x0000ffff)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, significand = 0x000fffff);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, significand = 0x000fffff)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, significand = 0x007fffff);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, significand = 0x007fffff)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 100);$/;"	p	struct:boost::math::max_factorial	access:public	signature:(unsigned, value = 100)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 170);$/;"	p	struct:boost::math::max_factorial	access:public	signature:(unsigned, value = 170)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 34);$/;"	p	struct:boost::math::max_factorial	access:public	signature:(unsigned, value = 34)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^   BOOST_STATIC_CONSTANT(unsigned,$/;"	p	struct:boost::math::max_factorial	access:public	signature:(unsigned, value = ::boost::math::max_factorial<long double>::value)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/tools/traits.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = $/;"	p	struct:boost::math::tools::detail::is_distribution_imp	access:public	signature:(bool, value = has_quantile<D>::value && has_cdf<D>::value && has_value_type<D>::value && has_policy_type<D>::value)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/tools/traits.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = $/;"	p	struct:boost::math::tools::detail::is_scaled_distribution_helper	access:public	signature:(bool, value = (sizeof(test_has_location<D>(0)) != 1) && (sizeof(test_has_scale<D>(0)) != 1))
BOOST_STATIC_CONSTANT	/usr/include/boost/math/tools/traits.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = (::boost::math::tools::detail::is_scaled_distribution_helper<D, ::boost::math::tools::detail::is_distribution_imp<D>::value>::value));$/;"	p	struct:boost::math::tools::detail::is_scaled_distribution_imp	access:public	signature:(bool, value = (::boost::math::tools::detail::is_scaled_distribution_helper<D, ::boost::math::tools::detail::is_distribution_imp<D>::value>::value))
BOOST_STATIC_CONSTANT	/usr/include/boost/math/tools/traits.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = false);$/;"	p	struct:boost::math::tools::detail::is_scaled_distribution_helper	access:public	signature:(bool, value = false)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/tools/traits.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = sizeof(cdf(d, 0.0f)) != 1);$/;"	p	struct:boost::math::tools::detail::has_cdf	access:public	signature:(bool, value = sizeof(cdf(d, 0.0f)) != 1)
BOOST_STATIC_CONSTANT	/usr/include/boost/math/tools/traits.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = sizeof(quantile(d, 0.0f)) != 1);$/;"	p	struct:boost::math::tools::detail::has_quantile	access:public	signature:(bool, value = sizeof(quantile(d, 0.0f)) != 1)
BOOST_STATS_CAUCHY_HPP	/usr/include/boost/math/distributions/cauchy.hpp	9;"	d
BOOST_STATS_COMPLEMENT_HPP	/usr/include/boost/math/distributions/complement.hpp	8;"	d
BOOST_STATS_DERIVED_HPP	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	7;"	d
BOOST_STATS_EXPONENTIAL_HPP	/usr/include/boost/math/distributions/exponential.hpp	7;"	d
BOOST_STATS_EXTREME_VALUE_HPP	/usr/include/boost/math/distributions/extreme_value.hpp	7;"	d
BOOST_STATS_FIND_LOCATION_HPP	/usr/include/boost/math/distributions/find_location.hpp	9;"	d
BOOST_STATS_FIND_SCALE_HPP	/usr/include/boost/math/distributions/find_scale.hpp	9;"	d
BOOST_STATS_GAMMA_HPP	/usr/include/boost/math/distributions/gamma.hpp	7;"	d
BOOST_STATS_INVERSE_GAMMA_HPP	/usr/include/boost/math/distributions/inverse_gamma.hpp	10;"	d
BOOST_STATS_INVERSE_GAUSSIAN_HPP	/usr/include/boost/math/distributions/inverse_gaussian.hpp	9;"	d
BOOST_STATS_IS_DISTRIBUTION_HPP	/usr/include/boost/math/tools/traits.hpp	22;"	d
BOOST_STATS_LAPLACE_HPP	/usr/include/boost/math/distributions/laplace.hpp	18;"	d
BOOST_STATS_LOGNORMAL_HPP	/usr/include/boost/math/distributions/lognormal.hpp	7;"	d
BOOST_STATS_NORMAL_HPP	/usr/include/boost/math/distributions/normal.hpp	9;"	d
BOOST_STATS_PARETO_HPP	/usr/include/boost/math/distributions/pareto.hpp	8;"	d
BOOST_STATS_SKEW_NORMAL_HPP	/usr/include/boost/math/distributions/skew_normal.hpp	8;"	d
BOOST_STATS_STUDENTS_T_HPP	/usr/include/boost/math/distributions/students_t.hpp	10;"	d
BOOST_STATS_TRIANGULAR_HPP	/usr/include/boost/math/distributions/triangular.hpp	8;"	d
BOOST_STATS_UNIFORM_HPP	/usr/include/boost/math/distributions/uniform.hpp	11;"	d
BOOST_STATS_WEIBULL_HPP	/usr/include/boost/math/distributions/weibull.hpp	7;"	d
BOOST_STATS_rayleigh_HPP	/usr/include/boost/math/distributions/rayleigh.hpp	7;"	d
BRAKE	/usr/include/boost/math/tools/remez.hpp	190;"	d
CF1_ik	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^int CF1_ik(T v, T x, T* fv, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* fv, const Policy& pol)
CF1_jy	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^int CF1_jy(T v, T x, T* fv, int* sign, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* fv, int* sign, const Policy& pol)
CF2_ik	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^int CF2_ik(T v, T x, T* Kv, T* Kv1, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* Kv, T* Kv1, const Policy& pol)
CF2_jy	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^int CF2_jy(T v, T x, T* p, T* q, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* p, T* q, const Policy& pol)
Digits2	/usr/include/boost/math/policies/policy.hpp	/^      Digits2, digits2_type>::type type;$/;"	t	struct:boost::math::policies::detail::precision	access:public
DistributionConcept	/usr/include/boost/math/concepts/distributions.hpp	/^struct DistributionConcept$/;"	s	namespace:boost::math::concepts
FP_INFINITE	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	39;"	d
FP_NAN	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	40;"	d
FP_NORMAL	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	38;"	d
FP_SUBNORMAL	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	41;"	d
FP_ZERO	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	37;"	d
N	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   const unsigned N;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_data	access:public
N	/usr/include/boost/math/special_functions/bessel.hpp	/^   unsigned N;$/;"	m	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:private
N	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   unsigned N;$/;"	m	struct:boost::math::detail::bessel_j_small_z_series_term	access:private
N	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   unsigned N;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:private
N	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   unsigned N;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:private
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isfinite<double> NO_MACRO_EXPAND(double x);$/;"	p	namespace:boost::math::tr1	signature:(double x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isfinite<float> NO_MACRO_EXPAND(float x);$/;"	p	namespace:boost::math::tr1	signature:(float x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isfinite<long double> NO_MACRO_EXPAND(long double x);$/;"	p	namespace:boost::math::tr1	signature:(long double x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isinf<double> NO_MACRO_EXPAND(double x);$/;"	p	namespace:boost::math::tr1	signature:(double x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isinf<float> NO_MACRO_EXPAND(float x);$/;"	p	namespace:boost::math::tr1	signature:(float x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isinf<long double> NO_MACRO_EXPAND(long double x);$/;"	p	namespace:boost::math::tr1	signature:(long double x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isnan<double> NO_MACRO_EXPAND(double x);$/;"	p	namespace:boost::math::tr1	signature:(double x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isnan<float> NO_MACRO_EXPAND(float x);$/;"	p	namespace:boost::math::tr1	signature:(float x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isnan<long double> NO_MACRO_EXPAND(long double x);$/;"	p	namespace:boost::math::tr1	signature:(long double x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isnormal<double> NO_MACRO_EXPAND(double x);$/;"	p	namespace:boost::math::tr1	signature:(double x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isnormal<float> NO_MACRO_EXPAND(float x);$/;"	p	namespace:boost::math::tr1	signature:(float x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isnormal<long double> NO_MACRO_EXPAND(long double x);$/;"	p	namespace:boost::math::tr1	signature:(long double x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL signbit<double> NO_MACRO_EXPAND(double x);$/;"	p	namespace:boost::math::tr1	signature:(double x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL signbit<float> NO_MACRO_EXPAND(float x);$/;"	p	namespace:boost::math::tr1	signature:(float x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL signbit<long double> NO_MACRO_EXPAND(long double x);$/;"	p	namespace:boost::math::tr1	signature:(long double x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> int BOOST_MATH_TR1_DECL fpclassify<double> NO_MACRO_EXPAND(double x);$/;"	p	namespace:boost::math::tr1	signature:(double x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> int BOOST_MATH_TR1_DECL fpclassify<float> NO_MACRO_EXPAND(float x);$/;"	p	namespace:boost::math::tr1	signature:(float x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> int BOOST_MATH_TR1_DECL fpclassify<long double> NO_MACRO_EXPAND(long double x);$/;"	p	namespace:boost::math::tr1	signature:(long double x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<class T> bool isfinite NO_MACRO_EXPAND(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<class T> bool isinf NO_MACRO_EXPAND(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<class T> bool isnan NO_MACRO_EXPAND(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<class T> bool isnormal NO_MACRO_EXPAND(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<class T> bool signbit NO_MACRO_EXPAND(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<class T> int fpclassify NO_MACRO_EXPAND(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	734;"	d
NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	772;"	d
OutputPrecision	/usr/include/boost/math/bindings/rr.hpp	/^   static long OutputPrecision()$/;"	f	class:boost::math::ntl::RR	access:public	signature:()
Pn_size	/usr/include/boost/math/special_functions/beta.hpp	/^struct Pn_size$/;"	s	namespace:boost::math::detail
Pn_size	/usr/include/boost/math/special_functions/beta.hpp	/^struct Pn_size<double>$/;"	s	namespace:boost::math::detail
Pn_size	/usr/include/boost/math/special_functions/beta.hpp	/^struct Pn_size<float>$/;"	s	namespace:boost::math::detail
Pn_size	/usr/include/boost/math/special_functions/beta.hpp	/^struct Pn_size<long double>$/;"	s	namespace:boost::math::detail
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR() {}$/;"	f	class:boost::math::ntl::RR	access:public	signature:()
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(boost::long_long_type c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(boost::long_long_type c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(boost::ulong_long_type c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(boost::ulong_long_type c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(char c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(char c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(const ::NTL::RR& c) : m_value(c){}$/;"	f	class:boost::math::ntl::RR	access:public	signature:(const ::NTL::RR& c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(double c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(double c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(float c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(float c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(int c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(int c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(long c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(long c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(long double c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(long double c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(short c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(short c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(signed char c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(signed char c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(unsigned char c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned char c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(unsigned int c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned int c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(unsigned long c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned long c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(unsigned short c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned short c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(wchar_t c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(wchar_t c)
RR	/usr/include/boost/math/bindings/rr.hpp	/^class RR$/;"	c	namespace:boost::math::ntl
RealTypeConcept	/usr/include/boost/math/concepts/real_type_concept.hpp	/^struct RealTypeConcept$/;"	s	namespace:boost::math::concepts
SKEW	/usr/include/boost/math/tools/remez.hpp	193;"	d
SetOutputPrecision	/usr/include/boost/math/bindings/rr.hpp	/^   static void SetOutputPrecision(long p)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(long p)
SetPrecision	/usr/include/boost/math/bindings/rr.hpp	/^   static void SetPrecision(long p)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(long p)
T	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_even_polynomial(const T(&a)[N], const V& z)$/;"	m	namespace:boost::math::tools
T	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_odd_polynomial(const T(&a)[N], const V& z)$/;"	m	namespace:boost::math::tools
T	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_polynomial(const T(&a)[N], const V& val)$/;"	m	namespace:boost::math::tools
T	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_rational(const T(&a)[N], const U(&b)[N], const V& z)$/;"	m	namespace:boost::math::tools
T1P	/usr/include/boost/math/tools/promotion.hpp	/^        typedef typename promote_arg<T1>::type T1P; \/\/ T1 perhaps promoted.$/;"	t	struct:boost::math::tools::promote_args_2	access:public
T2P	/usr/include/boost/math/tools/promotion.hpp	/^        typedef typename promote_arg<T2>::type T2P; \/\/ T2 perhaps promoted.$/;"	t	struct:boost::math::tools::promote_args_2	access:public
T4_mp	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType T4_mp(const RealType h, const RealType a, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const Policy& pol)
a	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType a;   \/\/ alpha.$/;"	m	class:boost::math::non_central_beta_distribution	access:private
a	/usr/include/boost/math/special_functions/beta.hpp	/^   T a, b, x, y;$/;"	m	struct:boost::math::detail::ibeta_fraction2_t	access:private
a	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   T a, b, target;$/;"	m	struct:boost::math::detail::ibeta_roots	access:private
a	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   T t, a;$/;"	m	struct:boost::math::detail::temme_root_finder	access:private
a	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   T a, p;$/;"	m	struct:boost::math::detail::gamma_p_inverse_func	access:private
a	/usr/include/boost/math/special_functions/gamma.hpp	/^   T a, z, result;$/;"	m	struct:boost::math::detail::lower_incomplete_gamma_series	access:private
a	/usr/include/boost/math/special_functions/gamma.hpp	/^   T z, a;$/;"	m	struct:boost::math::detail::upper_incomplete_gamma_fract	access:private
a	/usr/include/boost/math/tools/fraction.hpp	/^       static result_type a(const value_type& v)$/;"	f	struct:boost::math::tools::detail::fraction_traits_pair	access:public	signature:(const value_type& v)
a	/usr/include/boost/math/tools/fraction.hpp	/^       static result_type a(const value_type& v)$/;"	f	struct:boost::math::tools::detail::fraction_traits_simple	access:public	signature:(const value_type& v)
a1	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
a2	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
abs	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float abs(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
abs	/usr/include/boost/math/bindings/rr.hpp	/^inline RR abs(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
abs	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept abs(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
abs	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept abs(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
abs	/usr/include/boost/math/octonion.hpp	/^        inline T                                abs(const octonion<T> & o)$/;"	f	namespace:boost::math	signature:(const octonion<T> & o)
abs	/usr/include/boost/math/quaternion.hpp	/^        inline T                                abs(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
acos	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float acos(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
acos	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR acos(RR z)$/;"	f	namespace:boost::math::ntl	signature:(RR z)
acos	/usr/include/boost/math/complex/acos.hpp	/^std::complex<T> acos(const std::complex<T>& z)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& z)
acos	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept acos(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
acos	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept acos(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
acos_root	/usr/include/boost/math/bindings/rr.hpp	/^      acos_root(RR const& target) : t(target){}$/;"	f	struct:boost::math::ntl::acos_root	access:public	signature:(RR const& target)
acos_root	/usr/include/boost/math/bindings/rr.hpp	/^   struct acos_root$/;"	s	namespace:boost::math::ntl
acosh	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float acosh (const e_float& x)$/;"	f	namespace:boost::math::ef	signature:(const e_float& x)
acosh	/usr/include/boost/math/complex/acosh.hpp	/^inline std::complex<T> acosh(const std::complex<T>& z)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& z)
acosh	/usr/include/boost/math/special_functions/acosh.hpp	/^        inline typename tools::promote_args<T>::type acosh(T x)$/;"	f	namespace:boost::math	signature:(T x)
acosh	/usr/include/boost/math/special_functions/acosh.hpp	/^        inline typename tools::promote_args<T>::type acosh(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
acosh	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type acosh(T x);$/;"	p	namespace:boost::math	signature:(T x)
acosh	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type acosh(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
acosh	/usr/include/boost/math/tr1_c_macros.ipp	12;"	d	file:
acosh	/usr/include/boost/math/tr1_c_macros.ipp	14;"	d	file:
acosh_imp	/usr/include/boost/math/special_functions/acosh.hpp	/^        inline T    acosh_imp(const T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T x, const Policy& pol)
acoshf	/usr/include/boost/math/tr1_c_macros.ipp	16;"	d	file:
acoshf	/usr/include/boost/math/tr1_c_macros.ipp	18;"	d	file:
acoshl	/usr/include/boost/math/tr1_c_macros.ipp	20;"	d	file:
acoshl	/usr/include/boost/math/tr1_c_macros.ipp	22;"	d	file:
add	/usr/include/boost/math/tools/stats.hpp	/^   void add(const T& val)$/;"	f	class:boost::math::tools::stats	access:public	signature:(const T& val)
add	/usr/include/boost/math/tools/test.hpp	/^   void add(const T& point){ stat.add(point); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:(const T& point)
adjust_bounds	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^void adjust_bounds(Real& \/* a *\/, Real& \/* b *\/, Tol const& \/* tol *\/){}$/;"	f	namespace:boost::math::detail	signature:(Real& , Real& , Tol const& )
adjust_bounds	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^void adjust_bounds(Real& \/* a *\/, Real& b, tools::equal_floor const& \/* tol *\/)$/;"	f	namespace:boost::math::detail	signature:(Real& , Real& b, tools::equal_floor const& )
adjust_bounds	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^void adjust_bounds(Real& a, Real& \/* b *\/, tools::equal_ceil const& \/* tol *\/)$/;"	f	namespace:boost::math::detail	signature:(Real& a, Real& , tools::equal_ceil const& )
adjust_bounds	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^void adjust_bounds(Real& a, Real& b, tools::equal_nearest_integer const& \/* tol *\/)$/;"	f	namespace:boost::math::detail	signature:(Real& a, Real& b, tools::equal_nearest_integer const& )
airy_ai	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_ai(T x)$/;"	f	namespace:boost::math	signature:(T x)
airy_ai	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_ai(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
airy_ai	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_ai(T x);$/;"	p	namespace:boost::math	signature:(T x)
airy_ai	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_ai(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
airy_ai_imp	/usr/include/boost/math/special_functions/airy.hpp	/^T airy_ai_imp(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
airy_ai_prime	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_ai_prime(T x)$/;"	f	namespace:boost::math	signature:(T x)
airy_ai_prime	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_ai_prime(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
airy_ai_prime	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_ai_prime(T x);$/;"	p	namespace:boost::math	signature:(T x)
airy_ai_prime	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_ai_prime(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
airy_ai_prime_imp	/usr/include/boost/math/special_functions/airy.hpp	/^T airy_ai_prime_imp(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
airy_bi	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_bi(T x)$/;"	f	namespace:boost::math	signature:(T x)
airy_bi	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_bi(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
airy_bi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_bi(T x);$/;"	p	namespace:boost::math	signature:(T x)
airy_bi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_bi(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
airy_bi_imp	/usr/include/boost/math/special_functions/airy.hpp	/^T airy_bi_imp(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
airy_bi_prime	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_bi_prime(T x)$/;"	f	namespace:boost::math	signature:(T x)
airy_bi_prime	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_bi_prime(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
airy_bi_prime	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_bi_prime(T x);$/;"	p	namespace:boost::math	signature:(T x)
airy_bi_prime	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_bi_prime(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
airy_bi_prime_imp	/usr/include/boost/math/special_functions/airy.hpp	/^T airy_bi_prime_imp(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
alpha	/usr/include/boost/math/distributions/beta.hpp	/^      RealType alpha() const$/;"	f	class:boost::math::beta_distribution	access:public	signature:() const
alpha	/usr/include/boost/math/distributions/chi_squared.hpp	/^   RealType alpha;$/;"	m	struct:boost::math::detail::df_estimator	access:private
alpha	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType alpha() const$/;"	f	class:boost::math::non_central_beta_distribution	access:public	signature:() const
alpha	/usr/include/boost/math/distributions/students_t.hpp	/^   RealType alpha, beta, ratio;$/;"	m	struct:boost::math::detail::sample_size_func	access:public
apn	/usr/include/boost/math/special_functions/beta.hpp	/^   T result, x, apn, poch;$/;"	m	struct:boost::math::detail::ibeta_series_t	access:private
apn	/usr/include/boost/math/special_functions/gamma.hpp	/^   T result, x, apn;$/;"	m	struct:boost::math::detail::small_gamma2_series	access:private
append_N	/usr/include/boost/math/policies/policy.hpp	/^struct append_N$/;"	s	namespace:boost::math::policies::detail
append_N	/usr/include/boost/math/policies/policy.hpp	/^struct append_N<Seq, T, 0>$/;"	s	namespace:boost::math::policies::detail
apply	/usr/include/boost/math/policies/policy.hpp	/^   struct apply$/;"	s	struct:boost::math::policies::detail::is_default_policy	access:public
arg1	/usr/include/boost/math/policies/policy.hpp	/^   typedef default_policy arg1;$/;"	t	struct:boost::math::policies::detail::default_args	access:public
arg1	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_double<false> arg1;$/;"	t	struct:boost::math::policies::detail::default_args	access:public
arg1	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_float<false> arg1;$/;"	t	struct:boost::math::policies::detail::default_args	access:public
arg2	/usr/include/boost/math/policies/policy.hpp	/^   typedef default_policy arg2;$/;"	t	struct:boost::math::policies::detail::default_args	access:public
arg2	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_double<false> arg2;$/;"	t	struct:boost::math::policies::detail::default_args	access:public
arg_list	/usr/include/boost/math/policies/policy.hpp	/^   typedef mpl::list<A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13> arg_list;$/;"	t	struct:boost::math::policies::normalise	access:private
arg_list	/usr/include/boost/math/policies/policy.hpp	/^   typedef mpl::list<A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13> arg_list;$/;"	t	struct:boost::math::policies::policy	access:private
asin	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float asin(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
asin	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR asin(RR z)$/;"	f	namespace:boost::math::ntl	signature:(RR z)
asin	/usr/include/boost/math/complex/asin.hpp	/^inline std::complex<T> asin(const std::complex<T>& z)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& z)
asin	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept asin(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
asin	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept asin(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
asin_root	/usr/include/boost/math/bindings/rr.hpp	/^      asin_root(RR const& target) : t(target){}$/;"	f	struct:boost::math::ntl::asin_root	access:public	signature:(RR const& target)
asin_root	/usr/include/boost/math/bindings/rr.hpp	/^   struct asin_root$/;"	s	namespace:boost::math::ntl
asinh	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float asinh (const e_float& x)$/;"	f	namespace:boost::math::ef	signature:(const e_float& x)
asinh	/usr/include/boost/math/complex/asinh.hpp	/^inline std::complex<T> asinh(const std::complex<T>& x)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& x)
asinh	/usr/include/boost/math/special_functions/asinh.hpp	/^        inline typename tools::promote_args<T>::type asinh(T x)$/;"	f	namespace:boost::math	signature:(T x)
asinh	/usr/include/boost/math/special_functions/asinh.hpp	/^        inline typename tools::promote_args<T>::type asinh(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
asinh	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type asinh(T x);$/;"	p	namespace:boost::math	signature:(T x)
asinh	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type asinh(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
asinh	/usr/include/boost/math/tr1_c_macros.ipp	25;"	d	file:
asinh	/usr/include/boost/math/tr1_c_macros.ipp	27;"	d	file:
asinh_imp	/usr/include/boost/math/special_functions/asinh.hpp	/^        inline T    asinh_imp(const T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T x, const Policy& pol)
asinhf	/usr/include/boost/math/tr1_c_macros.ipp	29;"	d	file:
asinhf	/usr/include/boost/math/tr1_c_macros.ipp	31;"	d	file:
asinhl	/usr/include/boost/math/tr1_c_macros.ipp	33;"	d	file:
asinhl	/usr/include/boost/math/tr1_c_macros.ipp	35;"	d	file:
assert_undefined_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef assert_undefined<> assert_undefined_type;$/;"	t	struct:boost::math::policies::policy	access:public
assert_undefined_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_assert_undefined<mpl::_1>, assert_undefined<> >::type assert_undefined_type;$/;"	t	struct:boost::math::policies::policy	access:public
assert_undefined_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_assert_undefined<mpl::_1>, typename Policy::assert_undefined_type >::type assert_undefined_type;$/;"	t	struct:boost::math::policies::normalise	access:private
assign_large_int	/usr/include/boost/math/bindings/rr.hpp	/^   void assign_large_int(V a)$/;"	f	class:boost::math::ntl::RR	access:private	signature:(V a)
assign_large_real	/usr/include/boost/math/bindings/e_float.hpp	/^   void assign_large_real(const V& a)$/;"	f	class:boost::math::ef::e_float	access:private	signature:(const V& a)
assign_large_real	/usr/include/boost/math/bindings/rr.hpp	/^   void assign_large_real(const V& a)$/;"	f	class:boost::math::ntl::RR	access:private	signature:(const V& a)
assoc_laguerre	/usr/include/boost/math/tr1_c_macros.ipp	484;"	d	file:
assoc_laguerre	/usr/include/boost/math/tr1_c_macros.ipp	486;"	d	file:
assoc_laguerref	/usr/include/boost/math/tr1_c_macros.ipp	488;"	d	file:
assoc_laguerref	/usr/include/boost/math/tr1_c_macros.ipp	490;"	d	file:
assoc_laguerrel	/usr/include/boost/math/tr1_c_macros.ipp	492;"	d	file:
assoc_laguerrel	/usr/include/boost/math/tr1_c_macros.ipp	494;"	d	file:
assoc_legendre	/usr/include/boost/math/tr1_c_macros.ipp	498;"	d	file:
assoc_legendre	/usr/include/boost/math/tr1_c_macros.ipp	500;"	d	file:
assoc_legendref	/usr/include/boost/math/tr1_c_macros.ipp	502;"	d	file:
assoc_legendref	/usr/include/boost/math/tr1_c_macros.ipp	504;"	d	file:
assoc_legendrel	/usr/include/boost/math/tr1_c_macros.ipp	506;"	d	file:
assoc_legendrel	/usr/include/boost/math/tr1_c_macros.ipp	508;"	d	file:
asymptotic_bessel_amplitude	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_amplitude(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
asymptotic_bessel_i_large_x	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^T asymptotic_bessel_i_large_x(T v, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const Policy& pol)
asymptotic_bessel_j_large_x	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_large_x(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
asymptotic_bessel_j_large_x_2	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_large_x_2(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
asymptotic_bessel_j_large_x_P	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_large_x_P(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
asymptotic_bessel_j_large_x_Q	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_large_x_Q(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
asymptotic_bessel_j_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_limit(const T& v, const mpl::int_<0>&)$/;"	f	namespace:boost::math::detail	signature:(const T& v, const mpl::int_<0>&)
asymptotic_bessel_j_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_limit(const T& v, const mpl::int_<113>&)$/;"	f	namespace:boost::math::detail	signature:(const T& v, const mpl::int_<113>&)
asymptotic_bessel_j_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_limit(const T& v, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const T& v, const mpl::int_<53>&)
asymptotic_bessel_j_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_limit(const T& v, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const T& v, const mpl::int_<64>&)
asymptotic_bessel_phase_mx	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^T asymptotic_bessel_phase_mx(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
asymptotic_bessel_y_large_x	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_y_large_x(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
asymptotic_bessel_y_large_x_2	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_y_large_x_2(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
asymptotic_bessel_y_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_y_limit(const mpl::int_<0>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<0>&)
asymptotic_bessel_y_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_y_limit(const mpl::int_<113>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<113>&)
asymptotic_bessel_y_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_y_limit(const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<53>&)
asymptotic_bessel_y_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_y_limit(const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<64>&)
atan	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float atan(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
atan	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR atan(RR z)$/;"	f	namespace:boost::math::ntl	signature:(RR z)
atan	/usr/include/boost/math/complex/atan.hpp	/^std::complex<T> atan(const std::complex<T>& x)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& x)
atan	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept atan(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
atan	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept atan(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
atan2	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float atan2(const e_float& v, const e_float& u)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const e_float& u)
atan2	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR atan2(RR y, RR x)$/;"	f	namespace:boost::math::ntl	signature:(RR y, RR x)
atan2	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept atan2(real_concept a, real_concept b)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, real_concept b)
atan2	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept atan2(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept b)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept b)
atan_root	/usr/include/boost/math/bindings/rr.hpp	/^      atan_root(RR const& target) : t(target){}$/;"	f	struct:boost::math::ntl::atan_root	access:public	signature:(RR const& target)
atan_root	/usr/include/boost/math/bindings/rr.hpp	/^   struct atan_root$/;"	s	namespace:boost::math::ntl
atanh	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float atanh (const e_float& x)$/;"	f	namespace:boost::math::ef	signature:(const e_float& x)
atanh	/usr/include/boost/math/complex/atanh.hpp	/^std::complex<T> atanh(const std::complex<T>& z)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& z)
atanh	/usr/include/boost/math/special_functions/atanh.hpp	/^        inline typename tools::promote_args<T>::type atanh(T x)$/;"	f	namespace:boost::math	signature:(T x)
atanh	/usr/include/boost/math/special_functions/atanh.hpp	/^        inline typename tools::promote_args<T>::type atanh(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
atanh	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type atanh(T x);$/;"	p	namespace:boost::math	signature:(T x)
atanh	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type atanh(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
atanh	/usr/include/boost/math/tr1_c_macros.ipp	38;"	d	file:
atanh	/usr/include/boost/math/tr1_c_macros.ipp	40;"	d	file:
atanh_imp	/usr/include/boost/math/special_functions/atanh.hpp	/^        inline T    atanh_imp(const T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T x, const Policy& pol)
atanhf	/usr/include/boost/math/tr1_c_macros.ipp	42;"	d	file:
atanhf	/usr/include/boost/math/tr1_c_macros.ipp	44;"	d	file:
atanhl	/usr/include/boost/math/tr1_c_macros.ipp	46;"	d	file:
atanhl	/usr/include/boost/math/tr1_c_macros.ipp	48;"	d	file:
b	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType b;   \/\/ beta.$/;"	m	class:boost::math::non_central_beta_distribution	access:private
b	/usr/include/boost/math/special_functions/beta.hpp	/^   T a, b, x, y;$/;"	m	struct:boost::math::detail::ibeta_fraction2_t	access:private
b	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   T b, z, p;$/;"	m	struct:boost::math::detail::beta_inv_ab_t	access:private
b	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   T a, b, target;$/;"	m	struct:boost::math::detail::ibeta_roots	access:private
b	/usr/include/boost/math/special_functions/expint.hpp	/^   T b;$/;"	m	struct:boost::math::detail::expint_fraction	access:private
b	/usr/include/boost/math/tools/fraction.hpp	/^       static result_type b(const value_type& v)$/;"	f	struct:boost::math::tools::detail::fraction_traits_pair	access:public	signature:(const value_type& v)
b	/usr/include/boost/math/tools/fraction.hpp	/^       static result_type b(const value_type& v)$/;"	f	struct:boost::math::tools::detail::fraction_traits_simple	access:public	signature:(const value_type& v)
b	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_rational(const T(&a)[N], const U(&b)[N], const V& z)$/;"	m	namespace:boost::math::tools
b1	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
b2	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
basic_digits	/usr/include/boost/math/policies/policy.hpp	/^struct basic_digits : public mpl::int_<0>{ };$/;"	s	namespace:boost::math::policies	inherits:mpl::int_
basic_digits	/usr/include/boost/math/policies/policy.hpp	/^struct basic_digits<double> : public mpl::int_<DBL_MANT_DIG>{ };$/;"	s	namespace:boost::math::policies	inherits:mpl::int_
basic_digits	/usr/include/boost/math/policies/policy.hpp	/^struct basic_digits<float> : public mpl::int_<FLT_MANT_DIG>{ };$/;"	s	namespace:boost::math::policies	inherits:mpl::int_
basic_digits	/usr/include/boost/math/policies/policy.hpp	/^struct basic_digits<long double> : public mpl::int_<LDBL_MANT_DIG>{ };$/;"	s	namespace:boost::math::policies	inherits:mpl::int_
begin	/usr/include/boost/math/tools/test_data.hpp	/^   const_iterator begin()const { return m_data.begin(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:() const
begin	/usr/include/boost/math/tools/test_data.hpp	/^   iterator begin() { return m_data.begin(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:()
bernoulli	/usr/include/boost/math/distributions/bernoulli.hpp	/^    typedef bernoulli_distribution<double> bernoulli;$/;"	t	namespace:boost::math
bernoulli_detail	/usr/include/boost/math/distributions/bernoulli.hpp	/^    namespace bernoulli_detail$/;"	n	namespace:boost::math
bernoulli_distribution	/usr/include/boost/math/distributions/bernoulli.hpp	/^      bernoulli_distribution(RealType p = 0.5) : m_p(p)$/;"	f	class:boost::math::bernoulli_distribution	access:public	signature:(RealType p = 0.5)
bernoulli_distribution	/usr/include/boost/math/distributions/bernoulli.hpp	/^    class bernoulli_distribution$/;"	c	namespace:boost::math
bessel_asymptotic_tag	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^struct bessel_asymptotic_tag$/;"	s	namespace:boost::math::detail
bessel_i0	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class bessel_i0(mpfr_class x)$/;"	f	namespace:boost::math::detail	signature:(mpfr_class x)
bessel_i0	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal bessel_i0(mpfr::mpreal x)$/;"	f	namespace:boost::math::detail	signature:(mpfr::mpreal x)
bessel_i0	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^T bessel_i0(T x)$/;"	f	namespace:boost::math::detail	signature:(T x)
bessel_i0	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^T bessel_i0(T x);$/;"	p	namespace:boost::math::detail	signature:(T x)
bessel_i0_initializer	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^struct bessel_i0_initializer$/;"	s	namespace:boost::math::detail
bessel_i1	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class bessel_i1(mpfr_class x)$/;"	f	namespace:boost::math::detail	signature:(mpfr_class x)
bessel_i1	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal bessel_i1(mpfr::mpreal x)$/;"	f	namespace:boost::math::detail	signature:(mpfr::mpreal x)
bessel_i1	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^T bessel_i1(T x)$/;"	f	namespace:boost::math::detail	signature:(T x)
bessel_i1	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^T bessel_i1(T x);$/;"	p	namespace:boost::math::detail	signature:(T x)
bessel_i1_initializer	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^struct bessel_i1_initializer$/;"	s	namespace:boost::math::detail
bessel_i_small_z_series	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^inline T bessel_i_small_z_series(T v, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const Policy& pol)
bessel_ik	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^int bessel_ik(T v, T x, T* I, T* K, int kind, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* I, T* K, int kind, const Policy& pol)
bessel_int_tag	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      typedef mpl::int_<2> bessel_int_tag;         \/\/ Definite integer optimistaion.$/;"	t	namespace:boost::math::detail
bessel_j0	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^T bessel_j0(T x)$/;"	f	namespace:boost::math::detail	signature:(T x)
bessel_j0	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^T bessel_j0(T x);$/;"	p	namespace:boost::math::detail	signature:(T x)
bessel_j0_initializer	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^struct bessel_j0_initializer$/;"	s	namespace:boost::math::detail
bessel_j1	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^T bessel_j1(T x)$/;"	f	namespace:boost::math::detail	signature:(T x)
bessel_j1	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^T bessel_j1(T x);$/;"	p	namespace:boost::math::detail	signature:(T x)
bessel_j1_initializer	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^struct bessel_j1_initializer$/;"	s	namespace:boost::math::detail
bessel_j_small_z_series	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^inline T bessel_j_small_z_series(T v, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const Policy& pol)
bessel_j_small_z_series_term	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   bessel_j_small_z_series_term(T v_, T x)$/;"	f	struct:boost::math::detail::bessel_j_small_z_series_term	access:public	signature:(T v_, T x)
bessel_j_small_z_series_term	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^struct bessel_j_small_z_series_term$/;"	s	namespace:boost::math::detail
bessel_jn	/usr/include/boost/math/special_functions/detail/bessel_jn.hpp	/^T bessel_jn(int n, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int n, T x, const Policy& pol)
bessel_jy	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^int bessel_jy(T v, T x, T* J, T* Y, int kind, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* J, T* Y, int kind, const Policy& pol)
bessel_k0	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^T bessel_k0(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
bessel_k0	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^T bessel_k0(T x, const Policy&);$/;"	p	namespace:boost::math::detail	signature:(T x, const Policy&)
bessel_k0_initializer	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^struct bessel_k0_initializer$/;"	s	namespace:boost::math::detail
bessel_k1	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^T bessel_k1(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
bessel_k1	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^T bessel_k1(T x, const Policy&);$/;"	p	namespace:boost::math::detail	signature:(T x, const Policy&)
bessel_k1_initializer	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^struct bessel_k1_initializer$/;"	s	namespace:boost::math::detail
bessel_kn	/usr/include/boost/math/special_functions/detail/bessel_kn.hpp	/^T bessel_kn(int n, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int n, T x, const Policy& pol)
bessel_maybe_int_tag	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      typedef mpl::int_<1> bessel_maybe_int_tag;   \/\/ Maybe integer optimisation.$/;"	t	namespace:boost::math::detail
bessel_no_int_tag	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      typedef mpl::int_<0> bessel_no_int_tag;      \/\/ No integer optimisation possible.$/;"	t	namespace:boost::math::detail
bessel_traits	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      struct bessel_traits$/;"	s	namespace:boost::math::detail
bessel_y0	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^T bessel_y0(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
bessel_y0	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^T bessel_y0(T x, const Policy&);$/;"	p	namespace:boost::math::detail	signature:(T x, const Policy&)
bessel_y0_initializer	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^struct bessel_y0_initializer$/;"	s	namespace:boost::math::detail
bessel_y1	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^T bessel_y1(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
bessel_y1	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^T bessel_y1(T x, const Policy&);$/;"	p	namespace:boost::math::detail	signature:(T x, const Policy&)
bessel_y1_initializer	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^struct bessel_y1_initializer$/;"	s	namespace:boost::math::detail
bessel_y_small_z_series	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^inline T bessel_y_small_z_series(T v, T x, T* pscale, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* pscale, const Policy& pol)
bessel_y_small_z_series_term_a	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   bessel_y_small_z_series_term_a(T v_, T x)$/;"	f	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:public	signature:(T v_, T x)
bessel_y_small_z_series_term_a	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^struct bessel_y_small_z_series_term_a$/;"	s	namespace:boost::math::detail
bessel_y_small_z_series_term_b	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   bessel_y_small_z_series_term_b(T v_, T x)$/;"	f	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:public	signature:(T v_, T x)
bessel_y_small_z_series_term_b	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^struct bessel_y_small_z_series_term_b$/;"	s	namespace:boost::math::detail
bessel_yn	/usr/include/boost/math/special_functions/detail/bessel_yn.hpp	/^T bessel_yn(int n, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int n, T x, const Policy& pol)
bessel_yn_small_z	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^T bessel_yn_small_z(int n, T z, T* scale, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int n, T z, T* scale, const Policy& pol)
beta	/usr/include/boost/math/distributions/beta.hpp	/^      RealType beta() const$/;"	f	class:boost::math::beta_distribution	access:public	signature:() const
beta	/usr/include/boost/math/distributions/chi_squared.hpp	/^   RealType beta;$/;"	m	struct:boost::math::detail::df_estimator	access:private
beta	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType beta() const$/;"	f	class:boost::math::non_central_beta_distribution	access:public	signature:() const
beta	/usr/include/boost/math/distributions/students_t.hpp	/^   RealType alpha, beta, ratio;$/;"	m	struct:boost::math::detail::sample_size_func	access:public
beta	/usr/include/boost/math/special_functions/beta.hpp	/^   beta(RT1 a, RT2 b)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b)
beta	/usr/include/boost/math/special_functions/beta.hpp	/^   beta(RT1 a, RT2 b, A arg)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, A arg)
beta	/usr/include/boost/math/special_functions/beta.hpp	/^   beta(RT1 a, RT2 b, RT3 x, const Policy&)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy&)
beta	/usr/include/boost/math/special_functions/beta.hpp	/^   beta(RT1 a, RT2 b, RT3 x, const mpl::false_*)$/;"	f	namespace:boost::math::detail	signature:(RT1 a, RT2 b, RT3 x, const mpl::false_*)
beta	/usr/include/boost/math/special_functions/beta.hpp	/^   beta(RT1 a, RT2 b, const Policy&, const mpl::true_*)$/;"	f	namespace:boost::math::detail	signature:(RT1 a, RT2 b, const Policy&, const mpl::true_*)
beta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         beta(RT1 a, RT2 b); \/\/ Beta function (2 arguments).$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b)
beta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         beta(RT1 a, RT2 b, A x); \/\/ Beta function (3 arguments).$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, A x)
beta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         beta(RT1 a, RT2 b, RT3 x, const Policy& pol); \/\/ Beta function (3 arguments).$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy& pol)
beta	/usr/include/boost/math/tr1_c_macros.ipp	512;"	d	file:
beta	/usr/include/boost/math/tr1_c_macros.ipp	514;"	d	file:
beta_detail	/usr/include/boost/math/distributions/beta.hpp	/^    namespace beta_detail$/;"	n	namespace:boost::math
beta_distribution	/usr/include/boost/math/distributions/beta.hpp	/^      beta_distribution(RealType alpha = 1, RealType beta = 1) : m_alpha(alpha), m_beta(beta)$/;"	f	class:boost::math::beta_distribution	access:public	signature:(RealType alpha = 1, RealType beta = 1)
beta_distribution	/usr/include/boost/math/distributions/beta.hpp	/^    class beta_distribution$/;"	c	namespace:boost::math
beta_imp	/usr/include/boost/math/special_functions/beta.hpp	/^T beta_imp(T a, T b, const Lanczos&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, const Lanczos&, const Policy& pol)
beta_imp	/usr/include/boost/math/special_functions/beta.hpp	/^T beta_imp(T a, T b, const lanczos::undefined_lanczos& \/* l *\/, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, const lanczos::undefined_lanczos& , const Policy& pol)
beta_inv_ab_t	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   beta_inv_ab_t(T b_, T z_, T p_, bool invert_, bool swap_ab_) : b(b_), z(z_), p(p_), invert(invert_), swap_ab(swap_ab_) {}$/;"	f	struct:boost::math::detail::beta_inv_ab_t	access:public	signature:(T b_, T z_, T p_, bool invert_, bool swap_ab_)
beta_inv_ab_t	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^struct beta_inv_ab_t$/;"	s	namespace:boost::math::detail
beta_small_b_large_a_series	/usr/include/boost/math/special_functions/beta.hpp	/^T beta_small_b_large_a_series(T a, T b, T x, T y, T s0, T mult, const Policy& pol, bool normalised)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T y, T s0, T mult, const Policy& pol, bool normalised)
betac	/usr/include/boost/math/special_functions/beta.hpp	/^   betac(RT1 a, RT2 b, RT3 x)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
betac	/usr/include/boost/math/special_functions/beta.hpp	/^   betac(RT1 a, RT2 b, RT3 x, const Policy&)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy&)
betac	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         betac(RT1 a, RT2 b, RT3 x);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
betac	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         betac(RT1 a, RT2 b, RT3 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy& pol)
betaf	/usr/include/boost/math/tr1_c_macros.ipp	516;"	d	file:
betaf	/usr/include/boost/math/tr1_c_macros.ipp	518;"	d	file:
betal	/usr/include/boost/math/tr1_c_macros.ipp	520;"	d	file:
betal	/usr/include/boost/math/tr1_c_macros.ipp	522;"	d	file:
big_digamma	/usr/include/boost/math/bindings/detail/big_digamma.hpp	/^T big_digamma(T x)$/;"	f	namespace:boost::math::detail	signature:(T x)
big_digamma_helper	/usr/include/boost/math/bindings/detail/big_digamma.hpp	/^T big_digamma_helper(T x)$/;"	f	namespace:boost::math::detail	signature:(T x)
big_int_type	/usr/include/boost/math/special_functions/cbrt.hpp	/^struct big_int_type$/;"	s	namespace:boost::math::detail
binomial	/usr/include/boost/math/distributions/binomial.hpp	/^      typedef binomial_distribution<> binomial;$/;"	t	namespace:boost::math
binomial_ccdf	/usr/include/boost/math/special_functions/beta.hpp	/^inline T binomial_ccdf(T n, T k, T x, T y)$/;"	f	namespace:boost::math::detail	signature:(T n, T k, T x, T y)
binomial_coefficient	/usr/include/boost/math/special_functions/binomial.hpp	/^T binomial_coefficient(unsigned n, unsigned k, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, unsigned k, const Policy& pol)
binomial_coefficient	/usr/include/boost/math/special_functions/binomial.hpp	/^inline T binomial_coefficient(unsigned n, unsigned k)$/;"	f	namespace:boost::math	signature:(unsigned n, unsigned k)
binomial_coefficient	/usr/include/boost/math/special_functions/binomial.hpp	/^inline float binomial_coefficient<float, policies::policy<> >(unsigned n, unsigned k, const policies::policy<>& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, unsigned k, const policies::policy<>& pol)
binomial_detail	/usr/include/boost/math/distributions/binomial.hpp	/^     namespace binomial_detail{$/;"	n	namespace:boost::math
binomial_distribution	/usr/include/boost/math/distributions/binomial.hpp	/^      binomial_distribution(RealType n = 1, RealType p = 0.5) : m_n(n), m_p(p)$/;"	f	class:boost::math::binomial_distribution	access:public	signature:(RealType n = 1, RealType p = 0.5)
binomial_distribution	/usr/include/boost/math/distributions/binomial.hpp	/^    class binomial_distribution$/;"	c	namespace:boost::math
bisect	/usr/include/boost/math/tools/roots.hpp	/^inline std::pair<T, T> bisect(F f, T min, T max, Tol tol)$/;"	f	namespace:boost::math::tools	signature:(F f, T min, T max, Tol tol)
bisect	/usr/include/boost/math/tools/roots.hpp	/^inline std::pair<T, T> bisect(F f, T min, T max, Tol tol, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, T min, T max, Tol tol, boost::uintmax_t& max_iter)
bisect	/usr/include/boost/math/tools/roots.hpp	/^std::pair<T, T> bisect(F f, T min, T max, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)$/;"	f	namespace:boost::math::tools	signature:(F f, T min, T max, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)
bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef uint32_t bits;$/;"	t	struct:boost::math::detail::fp_traits_non_native	access:public
bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef uint64_t bits;$/;"	t	struct:boost::math::detail::fp_traits_non_native	access:public
bits_precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_digits2<mpl::_1>, digits2<> >::type bits_precision_type;$/;"	t	struct:boost::math::policies::policy	access:private
bits_precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_digits2<mpl::_1>, typename Policy::precision_type >::type bits_precision_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost	/usr/include/boost/math/bindings/detail/big_digamma.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n
boost	/usr/include/boost/math/bindings/e_float.hpp	/^namespace boost{ namespace math{ namespace ef{$/;"	n
boost	/usr/include/boost/math/bindings/e_float.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/bindings/mpreal.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/bindings/rr.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/common_factor_ct.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/common_factor_rt.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/complex/acos.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/complex/acosh.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/complex/asin.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/complex/asinh.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/complex/atan.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/complex/atanh.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/complex/details.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/complex/fabs.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/concepts/distributions.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/math/concepts/real_concept.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/concepts/real_type_concept.hpp	/^namespace boost{ namespace math{ namespace concepts{$/;"	n
boost	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace boost{ namespace math{ namespace concepts{$/;"	n
boost	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/constants/calculate_constants.hpp	/^namespace boost{ namespace math{ namespace constants{ namespace detail{$/;"	n
boost	/usr/include/boost/math/constants/constants.hpp	/^namespace boost{ namespace math$/;"	n
boost	/usr/include/boost/math/constants/generate.hpp	/^namespace boost{ namespace math{ namespace constants{ $/;"	n
boost	/usr/include/boost/math/constants/info.hpp	/^namespace boost{ namespace math{ namespace constants{$/;"	n
boost	/usr/include/boost/math/distributions/bernoulli.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/beta.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/binomial.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/cauchy.hpp	/^namespace boost{ namespace math$/;"	n
boost	/usr/include/boost/math/distributions/chi_squared.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/complement.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^namespace boost{ namespace math{ namespace detail$/;"	n
boost	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/distributions/detail/hypergeometric_cdf.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/distributions/exponential.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/extreme_value.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/find_location.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/find_scale.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/fisher_f.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/fwd.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/gamma.hpp	/^namespace boost{ namespace math$/;"	n
boost	/usr/include/boost/math/distributions/geometric.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/hypergeometric.hpp	/^namespace boost { namespace math {$/;"	n
boost	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^namespace boost{ namespace math$/;"	n
boost	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/laplace.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/logistic.hpp	/^namespace boost { namespace math { $/;"	n
boost	/usr/include/boost/math/distributions/lognormal.hpp	/^namespace boost{ namespace math$/;"	n
boost	/usr/include/boost/math/distributions/negative_binomial.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/non_central_beta.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/non_central_f.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/non_central_t.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/normal.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/pareto.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/poisson.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/distributions/rayleigh.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/skew_normal.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/students_t.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/distributions/triangular.hpp	/^namespace boost{ namespace math$/;"	n
boost	/usr/include/boost/math/distributions/uniform.hpp	/^namespace boost{ namespace math$/;"	n
boost	/usr/include/boost/math/distributions/weibull.hpp	/^namespace boost{ namespace math$/;"	n
boost	/usr/include/boost/math/octonion.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/policies/error_handling.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/policies/policy.hpp	/^namespace boost{ namespace math{ $/;"	n
boost	/usr/include/boost/math/quaternion.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/special_functions/acosh.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/special_functions/airy.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/asinh.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/special_functions/atanh.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/special_functions/bessel.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/beta.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/binomial.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/cbrt.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/cos_pi.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^namespace boost { namespace math {$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^namespace boost { namespace math{  namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_jn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^namespace boost { namespace math {$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_kn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/bessel_yn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^namespace boost{ namespace math{ $/;"	n
boost	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/iconv.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^namespace boost { namespace math$/;"	n
boost	/usr/include/boost/math/special_functions/digamma.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/math/special_functions/ellint_1.hpp	/^namespace boost { namespace math {$/;"	n
boost	/usr/include/boost/math/special_functions/ellint_2.hpp	/^namespace boost { namespace math { $/;"	n
boost	/usr/include/boost/math/special_functions/ellint_3.hpp	/^namespace boost { namespace math { $/;"	n
boost	/usr/include/boost/math/special_functions/ellint_rc.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/ellint_rd.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/ellint_rf.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/ellint_rj.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/erf.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/expint.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/expm1.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/factorials.hpp	/^namespace boost { namespace math$/;"	n
boost	/usr/include/boost/math/special_functions/fpclassify.hpp	/^namespace boost{ $/;"	n
boost	/usr/include/boost/math/special_functions/gamma.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/hankel.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/hermite.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/math/special_functions/hypot.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/laguerre.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/math/special_functions/lanczos.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n
boost	/usr/include/boost/math/special_functions/legendre.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/math/special_functions/log1p.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/math_fwd.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/special_functions/modf.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/next.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/math/special_functions/owens_t.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/special_functions/pow.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/math/special_functions/powm1.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/prime.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/round.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/sign.hpp	/^namespace boost{ namespace math{ $/;"	n
boost	/usr/include/boost/math/special_functions/sin_pi.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/special_functions/sinc.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/special_functions/sinhc.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/math/special_functions/sqrt1pm1.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/trunc.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/special_functions/zeta.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/big_constant.hpp	/^namespace boost{ namespace math{ $/;"	n
boost	/usr/include/boost/math/tools/config.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n
boost	/usr/include/boost/math/tools/fraction.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/minima.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/polynomial.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/precision.hpp	/^namespace boost{ namespace math$/;"	n
boost	/usr/include/boost/math/tools/promotion.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/math/tools/rational.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/real_cast.hpp	/^namespace boost{ namespace math$/;"	n
boost	/usr/include/boost/math/tools/remez.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/roots.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/series.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/solve.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/stats.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/test.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/test_data.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/toms748_solve.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/traits.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tools/tuple.hpp	/^namespace boost{ namespace math{$/;"	n
boost	/usr/include/boost/math/tools/workaround.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n
boost	/usr/include/boost/math/tr1.hpp	/^namespace boost{ namespace math{ namespace tr1{ extern "C"{$/;"	n
boost	/usr/include/boost/math/tr1.hpp	/^namespace boost{ namespace math{ namespace tr1{$/;"	n
boost::is_convertible	/usr/include/boost/math/bindings/mpfr.hpp	/^template<> struct is_convertible<long double, mpfr_class> : public mpl::false_{};$/;"	s	namespace:boost	inherits:mpl::false_
boost::math	/usr/include/boost/math/bindings/detail/big_digamma.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/bindings/e_float.hpp	/^namespace boost{ namespace math{ namespace ef{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/bindings/e_float.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/bindings/mpreal.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/bindings/rr.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/common_factor_ct.hpp	/^namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/common_factor_rt.hpp	/^namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/complex/acos.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/complex/acosh.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/complex/asin.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/complex/asinh.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/complex/atan.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/complex/atanh.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/complex/details.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/complex/fabs.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/concepts/distributions.hpp	/^namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/concepts/real_concept.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/concepts/real_type_concept.hpp	/^namespace boost{ namespace math{ namespace concepts{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace boost{ namespace math{ namespace concepts{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/constants/calculate_constants.hpp	/^namespace boost{ namespace math{ namespace constants{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/constants/constants.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/constants/generate.hpp	/^namespace boost{ namespace math{ namespace constants{ $/;"	n	namespace:boost
boost::math	/usr/include/boost/math/constants/info.hpp	/^namespace boost{ namespace math{ namespace constants{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/bernoulli.hpp	/^  namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/beta.hpp	/^  namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/binomial.hpp	/^  namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/cauchy.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/chi_squared.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/complement.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^namespace boost{ namespace math{ namespace detail$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/detail/hypergeometric_cdf.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/exponential.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/extreme_value.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/find_location.hpp	/^  namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/find_scale.hpp	/^  namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/fisher_f.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/fwd.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/gamma.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/geometric.hpp	/^  namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/hypergeometric.hpp	/^namespace boost { namespace math {$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/laplace.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/logistic.hpp	/^namespace boost { namespace math { $/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/lognormal.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/negative_binomial.hpp	/^  namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/non_central_beta.hpp	/^   namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^   namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/non_central_f.hpp	/^   namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/non_central_t.hpp	/^   namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/normal.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/pareto.hpp	/^  namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/poisson.hpp	/^  namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/rayleigh.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/skew_normal.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/students_t.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/triangular.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/uniform.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/distributions/weibull.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/octonion.hpp	/^    namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/policies/error_handling.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/policies/policy.hpp	/^namespace boost{ namespace math{ $/;"	n	namespace:boost
boost::math	/usr/include/boost/math/quaternion.hpp	/^    namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/acosh.hpp	/^    namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/airy.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/asinh.hpp	/^    namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/atanh.hpp	/^    namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/bessel.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/beta.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/binomial.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/cbrt.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/cos_pi.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^namespace boost { namespace math {$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^namespace boost { namespace math{  namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_jn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^namespace boost { namespace math {$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_kn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/bessel_yn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^namespace boost{ namespace math{ $/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^namespace math {$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/iconv.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^namespace boost { namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/digamma.hpp	/^namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/ellint_1.hpp	/^namespace boost { namespace math {$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/ellint_2.hpp	/^namespace boost { namespace math { $/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/ellint_3.hpp	/^namespace boost { namespace math { $/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/ellint_rc.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/ellint_rd.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/ellint_rf.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/ellint_rj.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/erf.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/expint.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/expm1.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/factorials.hpp	/^namespace boost { namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/fpclassify.hpp	/^namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/gamma.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/hankel.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/hermite.hpp	/^namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/hypot.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/laguerre.hpp	/^namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/lanczos.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/legendre.hpp	/^namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/log1p.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/modf.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/next.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^  namespace math {$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/owens_t.hpp	/^   namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/pow.hpp	/^namespace math {$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/powm1.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/prime.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/round.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/sign.hpp	/^namespace boost{ namespace math{ $/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/sin_pi.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/sinc.hpp	/^    namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/sinhc.hpp	/^    namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/sqrt1pm1.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/trunc.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/special_functions/zeta.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/big_constant.hpp	/^namespace boost{ namespace math{ $/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/config.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/fraction.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/minima.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/polynomial.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/precision.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/promotion.hpp	/^  namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/rational.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/real_cast.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/remez.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/roots.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/series.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/solve.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/stats.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/test.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/test_data.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/toms748_solve.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/traits.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/tuple.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tools/workaround.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tr1.hpp	/^namespace boost{ namespace math{ namespace tr1{ extern "C"{$/;"	n	namespace:boost
boost::math	/usr/include/boost/math/tr1.hpp	/^namespace boost{ namespace math{ namespace tr1{$/;"	n	namespace:boost
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline int fpclassify BOOST_NO_MACRO_EXPAND(T t)$/;"	f	namespace:boost::math	signature:(T t)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline int fpclassify<long double> BOOST_NO_MACRO_EXPAND(long double t)$/;"	f	namespace:boost::math	signature:(long double t)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^template <> inline bool isnan BOOST_NO_MACRO_EXPAND<double>(double t){ return ::boost::math_detail::is_nan_helper(t, boost::true_type()); }$/;"	f	namespace:boost::math	signature:(double t)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^template <> inline bool isnan BOOST_NO_MACRO_EXPAND<float>(float t){ return ::boost::math_detail::is_nan_helper(t, boost::true_type()); }$/;"	f	namespace:boost::math	signature:(float t)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^template <> inline bool isnan BOOST_NO_MACRO_EXPAND<long double>(long double t){ return ::boost::math_detail::is_nan_helper(t, boost::true_type()); }$/;"	f	namespace:boost::math	signature:(long double t)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T changesign BOOST_NO_MACRO_EXPAND(const T& z);$/;"	p	namespace:boost::math	signature:(const T& z)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T copysign BOOST_NO_MACRO_EXPAND(const T& x, const T& y);$/;"	p	namespace:boost::math	signature:(const T& x, const T& y)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   bool isfinite BOOST_NO_MACRO_EXPAND(T z);$/;"	p	namespace:boost::math	signature:(T z)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   bool isinf BOOST_NO_MACRO_EXPAND(T t);$/;"	p	namespace:boost::math	signature:(T t)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   bool isnan BOOST_NO_MACRO_EXPAND(T t);$/;"	p	namespace:boost::math	signature:(T t)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   bool isnormal BOOST_NO_MACRO_EXPAND(T t);$/;"	p	namespace:boost::math	signature:(T t)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   int fpclassify BOOST_NO_MACRO_EXPAND(T t);$/;"	p	namespace:boost::math	signature:(T t)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   int sign BOOST_NO_MACRO_EXPAND(const T& z);$/;"	p	namespace:boost::math	signature:(const T& z)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   int signbit BOOST_NO_MACRO_EXPAND(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/sign.hpp	/^inline T copysign BOOST_NO_MACRO_EXPAND(const T& x, const T& y)$/;"	f	namespace:boost::math	signature:(const T& x, const T& y)
boost::math::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/sign.hpp	/^inline int sign BOOST_NO_MACRO_EXPAND(const T& z)$/;"	f	namespace:boost::math	signature:(const T& z)
boost::math::abs	/usr/include/boost/math/octonion.hpp	/^        inline T                                abs(const octonion<T> & o)$/;"	f	namespace:boost::math	signature:(const octonion<T> & o)
boost::math::abs	/usr/include/boost/math/quaternion.hpp	/^        inline T                                abs(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::acos	/usr/include/boost/math/complex/acos.hpp	/^std::complex<T> acos(const std::complex<T>& z)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& z)
boost::math::acosh	/usr/include/boost/math/complex/acosh.hpp	/^inline std::complex<T> acosh(const std::complex<T>& z)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& z)
boost::math::acosh	/usr/include/boost/math/special_functions/acosh.hpp	/^        inline typename tools::promote_args<T>::type acosh(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::acosh	/usr/include/boost/math/special_functions/acosh.hpp	/^        inline typename tools::promote_args<T>::type acosh(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
boost::math::acosh	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type acosh(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::acosh	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type acosh(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
boost::math::airy_ai	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_ai(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::airy_ai	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_ai(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
boost::math::airy_ai	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_ai(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::airy_ai	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_ai(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
boost::math::airy_ai_prime	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_ai_prime(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::airy_ai_prime	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_ai_prime(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
boost::math::airy_ai_prime	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_ai_prime(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::airy_ai_prime	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_ai_prime(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
boost::math::airy_bi	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_bi(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::airy_bi	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_bi(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
boost::math::airy_bi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_bi(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::airy_bi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_bi(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
boost::math::airy_bi_prime	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_bi_prime(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::airy_bi_prime	/usr/include/boost/math/special_functions/airy.hpp	/^inline typename tools::promote_args<T>::type airy_bi_prime(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
boost::math::airy_bi_prime	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_bi_prime(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::airy_bi_prime	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type airy_bi_prime(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
boost::math::asin	/usr/include/boost/math/complex/asin.hpp	/^inline std::complex<T> asin(const std::complex<T>& z)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& z)
boost::math::asinh	/usr/include/boost/math/complex/asinh.hpp	/^inline std::complex<T> asinh(const std::complex<T>& x)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& x)
boost::math::asinh	/usr/include/boost/math/special_functions/asinh.hpp	/^        inline typename tools::promote_args<T>::type asinh(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::asinh	/usr/include/boost/math/special_functions/asinh.hpp	/^        inline typename tools::promote_args<T>::type asinh(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
boost::math::asinh	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type asinh(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::asinh	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type asinh(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
boost::math::atan	/usr/include/boost/math/complex/atan.hpp	/^std::complex<T> atan(const std::complex<T>& x)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& x)
boost::math::atanh	/usr/include/boost/math/complex/atanh.hpp	/^std::complex<T> atanh(const std::complex<T>& z)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& z)
boost::math::atanh	/usr/include/boost/math/special_functions/atanh.hpp	/^        inline typename tools::promote_args<T>::type atanh(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::atanh	/usr/include/boost/math/special_functions/atanh.hpp	/^        inline typename tools::promote_args<T>::type atanh(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
boost::math::atanh	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type atanh(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::atanh	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type atanh(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
boost::math::bernoulli	/usr/include/boost/math/distributions/bernoulli.hpp	/^    typedef bernoulli_distribution<double> bernoulli;$/;"	t	namespace:boost::math
boost::math::bernoulli_detail	/usr/include/boost/math/distributions/bernoulli.hpp	/^    namespace bernoulli_detail$/;"	n	namespace:boost::math
boost::math::bernoulli_detail::check_dist	/usr/include/boost/math/distributions/bernoulli.hpp	/^      inline bool check_dist(const char* , const RealType& , RealType* , const Policy& \/* pol *\/, const mpl::false_&)$/;"	f	namespace:boost::math::bernoulli_detail	signature:(const char* , const RealType& , RealType* , const Policy& , const mpl::false_&)
boost::math::bernoulli_detail::check_dist	/usr/include/boost/math/distributions/bernoulli.hpp	/^      inline bool check_dist(const char* function, const RealType& p, RealType* result, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math::bernoulli_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& )
boost::math::bernoulli_detail::check_dist	/usr/include/boost/math/distributions/bernoulli.hpp	/^      inline bool check_dist(const char* function, const RealType& p, RealType* result, const Policy& \/* pol *\/, const mpl::true_&)$/;"	f	namespace:boost::math::bernoulli_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& , const mpl::true_&)
boost::math::bernoulli_detail::check_dist_and_k	/usr/include/boost/math/distributions/bernoulli.hpp	/^      inline bool check_dist_and_k(const char* function, const RealType& p, RealType k, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::bernoulli_detail	signature:(const char* function, const RealType& p, RealType k, RealType* result, const Policy& pol)
boost::math::bernoulli_detail::check_dist_and_prob	/usr/include/boost/math/distributions/bernoulli.hpp	/^      inline bool check_dist_and_prob(const char* function, RealType p, RealType prob, RealType* result, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math::bernoulli_detail	signature:(const char* function, RealType p, RealType prob, RealType* result, const Policy& )
boost::math::bernoulli_detail::check_success_fraction	/usr/include/boost/math/distributions/bernoulli.hpp	/^      inline bool check_success_fraction(const char* function, const RealType& p, RealType* result, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math::bernoulli_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& )
boost::math::bernoulli_distribution	/usr/include/boost/math/distributions/bernoulli.hpp	/^    class bernoulli_distribution$/;"	c	namespace:boost::math
boost::math::bernoulli_distribution::bernoulli_distribution	/usr/include/boost/math/distributions/bernoulli.hpp	/^      bernoulli_distribution(RealType p = 0.5) : m_p(p)$/;"	f	class:boost::math::bernoulli_distribution	access:public	signature:(RealType p = 0.5)
boost::math::bernoulli_distribution::m_p	/usr/include/boost/math/distributions/bernoulli.hpp	/^      RealType m_p; \/\/ success_fraction$/;"	m	class:boost::math::bernoulli_distribution	access:private
boost::math::bernoulli_distribution::policy_type	/usr/include/boost/math/distributions/bernoulli.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::bernoulli_distribution	access:public
boost::math::bernoulli_distribution::success_fraction	/usr/include/boost/math/distributions/bernoulli.hpp	/^      RealType success_fraction() const$/;"	f	class:boost::math::bernoulli_distribution	access:public	signature:() const
boost::math::bernoulli_distribution::value_type	/usr/include/boost/math/distributions/bernoulli.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::bernoulli_distribution	access:public
boost::math::beta	/usr/include/boost/math/special_functions/beta.hpp	/^   beta(RT1 a, RT2 b)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b)
boost::math::beta	/usr/include/boost/math/special_functions/beta.hpp	/^   beta(RT1 a, RT2 b, A arg)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, A arg)
boost::math::beta	/usr/include/boost/math/special_functions/beta.hpp	/^   beta(RT1 a, RT2 b, RT3 x, const Policy&)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy&)
boost::math::beta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         beta(RT1 a, RT2 b); \/\/ Beta function (2 arguments).$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b)
boost::math::beta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         beta(RT1 a, RT2 b, A x); \/\/ Beta function (3 arguments).$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, A x)
boost::math::beta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         beta(RT1 a, RT2 b, RT3 x, const Policy& pol); \/\/ Beta function (3 arguments).$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy& pol)
boost::math::beta_detail	/usr/include/boost/math/distributions/beta.hpp	/^    namespace beta_detail$/;"	n	namespace:boost::math
boost::math::beta_detail::check_alpha	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_alpha(const char* function, const RealType& alpha, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& alpha, RealType* result, const Policy& pol)
boost::math::beta_detail::check_beta	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_beta(const char* function, const RealType& beta, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& beta, RealType* result, const Policy& pol)
boost::math::beta_detail::check_dist	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_dist(const char* function, const RealType& alpha, const RealType& beta, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& alpha, const RealType& beta, RealType* result, const Policy& pol)
boost::math::beta_detail::check_dist_and_prob	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_dist_and_prob(const char* function, const RealType& alpha, const RealType& beta, RealType p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& alpha, const RealType& beta, RealType p, RealType* result, const Policy& pol)
boost::math::beta_detail::check_dist_and_x	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_dist_and_x(const char* function, const RealType& alpha, const RealType& beta, RealType x, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& alpha, const RealType& beta, RealType x, RealType* result, const Policy& pol)
boost::math::beta_detail::check_mean	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_mean(const char* function, const RealType& mean, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& mean, RealType* result, const Policy& pol)
boost::math::beta_detail::check_prob	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_prob(const char* function, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& pol)
boost::math::beta_detail::check_variance	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_variance(const char* function, const RealType& variance, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& variance, RealType* result, const Policy& pol)
boost::math::beta_detail::check_x	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_x(const char* function, const RealType& x, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& x, RealType* result, const Policy& pol)
boost::math::beta_distribution	/usr/include/boost/math/distributions/beta.hpp	/^    class beta_distribution$/;"	c	namespace:boost::math
boost::math::beta_distribution::alpha	/usr/include/boost/math/distributions/beta.hpp	/^      RealType alpha() const$/;"	f	class:boost::math::beta_distribution	access:public	signature:() const
boost::math::beta_distribution::beta	/usr/include/boost/math/distributions/beta.hpp	/^      RealType beta() const$/;"	f	class:boost::math::beta_distribution	access:public	signature:() const
boost::math::beta_distribution::beta_distribution	/usr/include/boost/math/distributions/beta.hpp	/^      beta_distribution(RealType alpha = 1, RealType beta = 1) : m_alpha(alpha), m_beta(beta)$/;"	f	class:boost::math::beta_distribution	access:public	signature:(RealType alpha = 1, RealType beta = 1)
boost::math::beta_distribution::find_alpha	/usr/include/boost/math/distributions/beta.hpp	/^      static RealType find_alpha($/;"	f	class:boost::math::beta_distribution	access:public	signature:( RealType beta, RealType x, RealType probability)
boost::math::beta_distribution::find_alpha	/usr/include/boost/math/distributions/beta.hpp	/^      static RealType find_alpha($/;"	f	class:boost::math::beta_distribution	access:public	signature:( RealType mean, RealType variance)
boost::math::beta_distribution::find_beta	/usr/include/boost/math/distributions/beta.hpp	/^      static RealType find_beta($/;"	f	class:boost::math::beta_distribution	access:public	signature:( RealType alpha, RealType x, RealType probability)
boost::math::beta_distribution::find_beta	/usr/include/boost/math/distributions/beta.hpp	/^      static RealType find_beta($/;"	f	class:boost::math::beta_distribution	access:public	signature:( RealType mean, RealType variance)
boost::math::beta_distribution::m_alpha	/usr/include/boost/math/distributions/beta.hpp	/^      RealType m_alpha; \/\/ Two parameters of the beta distribution.$/;"	m	class:boost::math::beta_distribution	access:private
boost::math::beta_distribution::m_beta	/usr/include/boost/math/distributions/beta.hpp	/^      RealType m_beta;$/;"	m	class:boost::math::beta_distribution	access:private
boost::math::beta_distribution::policy_type	/usr/include/boost/math/distributions/beta.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::beta_distribution	access:public
boost::math::beta_distribution::value_type	/usr/include/boost/math/distributions/beta.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::beta_distribution	access:public
boost::math::betac	/usr/include/boost/math/special_functions/beta.hpp	/^   betac(RT1 a, RT2 b, RT3 x)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
boost::math::betac	/usr/include/boost/math/special_functions/beta.hpp	/^   betac(RT1 a, RT2 b, RT3 x, const Policy&)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy&)
boost::math::betac	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         betac(RT1 a, RT2 b, RT3 x);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
boost::math::betac	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         betac(RT1 a, RT2 b, RT3 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy& pol)
boost::math::binomial	/usr/include/boost/math/distributions/binomial.hpp	/^      typedef binomial_distribution<> binomial;$/;"	t	namespace:boost::math
boost::math::binomial_coefficient	/usr/include/boost/math/special_functions/binomial.hpp	/^T binomial_coefficient(unsigned n, unsigned k, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, unsigned k, const Policy& pol)
boost::math::binomial_coefficient	/usr/include/boost/math/special_functions/binomial.hpp	/^inline T binomial_coefficient(unsigned n, unsigned k)$/;"	f	namespace:boost::math	signature:(unsigned n, unsigned k)
boost::math::binomial_coefficient	/usr/include/boost/math/special_functions/binomial.hpp	/^inline float binomial_coefficient<float, policies::policy<> >(unsigned n, unsigned k, const policies::policy<>& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, unsigned k, const policies::policy<>& pol)
boost::math::binomial_detail	/usr/include/boost/math/distributions/binomial.hpp	/^     namespace binomial_detail{$/;"	n	namespace:boost::math
boost::math::binomial_detail::check_N	/usr/include/boost/math/distributions/binomial.hpp	/^        inline bool check_N(const char* function, const RealType& N, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::binomial_detail	signature:(const char* function, const RealType& N, RealType* result, const Policy& pol)
boost::math::binomial_detail::check_dist	/usr/include/boost/math/distributions/binomial.hpp	/^        inline bool check_dist(const char* function, const RealType& N, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::binomial_detail	signature:(const char* function, const RealType& N, const RealType& p, RealType* result, const Policy& pol)
boost::math::binomial_detail::check_dist_and_k	/usr/include/boost/math/distributions/binomial.hpp	/^        inline bool check_dist_and_k(const char* function, const RealType& N, const RealType& p, RealType k, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::binomial_detail	signature:(const char* function, const RealType& N, const RealType& p, RealType k, RealType* result, const Policy& pol)
boost::math::binomial_detail::check_dist_and_prob	/usr/include/boost/math/distributions/binomial.hpp	/^        inline bool check_dist_and_prob(const char* function, const RealType& N, RealType p, RealType prob, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::binomial_detail	signature:(const char* function, const RealType& N, RealType p, RealType prob, RealType* result, const Policy& pol)
boost::math::binomial_detail::check_success_fraction	/usr/include/boost/math/distributions/binomial.hpp	/^        inline bool check_success_fraction(const char* function, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::binomial_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& pol)
boost::math::binomial_detail::inverse_binomial_cornish_fisher	/usr/include/boost/math/distributions/binomial.hpp	/^         T inverse_binomial_cornish_fisher(T n, T sf, T p, T q, const Policy& pol)$/;"	f	namespace:boost::math::binomial_detail	signature:(T n, T sf, T p, T q, const Policy& pol)
boost::math::binomial_detail::quantile_imp	/usr/include/boost/math/distributions/binomial.hpp	/^      RealType quantile_imp(const binomial_distribution<RealType, Policy>& dist, const RealType& p, const RealType& q)$/;"	f	namespace:boost::math::binomial_detail	signature:(const binomial_distribution<RealType, Policy>& dist, const RealType& p, const RealType& q)
boost::math::binomial_distribution	/usr/include/boost/math/distributions/binomial.hpp	/^    class binomial_distribution$/;"	c	namespace:boost::math
boost::math::binomial_distribution::binomial_distribution	/usr/include/boost/math/distributions/binomial.hpp	/^      binomial_distribution(RealType n = 1, RealType p = 0.5) : m_n(n), m_p(p)$/;"	f	class:boost::math::binomial_distribution	access:public	signature:(RealType n = 1, RealType p = 0.5)
boost::math::binomial_distribution::clopper_pearson_exact_interval	/usr/include/boost/math/distributions/binomial.hpp	/^         clopper_pearson_exact_interval,$/;"	e	enum:boost::math::binomial_distribution::interval_type
boost::math::binomial_distribution::find_lower_bound_on_p	/usr/include/boost/math/distributions/binomial.hpp	/^      static RealType find_lower_bound_on_p($/;"	f	class:boost::math::binomial_distribution	access:public	signature:( RealType trials, RealType successes, RealType probability, interval_type t = clopper_pearson_exact_interval)
boost::math::binomial_distribution::find_maximum_number_of_trials	/usr/include/boost/math/distributions/binomial.hpp	/^      static RealType find_maximum_number_of_trials($/;"	f	class:boost::math::binomial_distribution	access:public	signature:( RealType k, RealType p, RealType alpha)
boost::math::binomial_distribution::find_minimum_number_of_trials	/usr/include/boost/math/distributions/binomial.hpp	/^      static RealType find_minimum_number_of_trials($/;"	f	class:boost::math::binomial_distribution	access:public	signature:( RealType k, RealType p, RealType alpha)
boost::math::binomial_distribution::find_upper_bound_on_p	/usr/include/boost/math/distributions/binomial.hpp	/^      static RealType find_upper_bound_on_p($/;"	f	class:boost::math::binomial_distribution	access:public	signature:( RealType trials, RealType successes, RealType probability, interval_type t = clopper_pearson_exact_interval)
boost::math::binomial_distribution::interval_type	/usr/include/boost/math/distributions/binomial.hpp	/^      enum interval_type{$/;"	g	class:boost::math::binomial_distribution	access:public
boost::math::binomial_distribution::jeffreys_prior_interval	/usr/include/boost/math/distributions/binomial.hpp	/^         jeffreys_prior_interval$/;"	e	enum:boost::math::binomial_distribution::interval_type
boost::math::binomial_distribution::m_n	/usr/include/boost/math/distributions/binomial.hpp	/^        RealType m_n; \/\/ Not sure if this shouldn't be an int?$/;"	m	class:boost::math::binomial_distribution	access:private
boost::math::binomial_distribution::m_p	/usr/include/boost/math/distributions/binomial.hpp	/^        RealType m_p; \/\/ success_fraction$/;"	m	class:boost::math::binomial_distribution	access:private
boost::math::binomial_distribution::policy_type	/usr/include/boost/math/distributions/binomial.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::binomial_distribution	access:public
boost::math::binomial_distribution::success_fraction	/usr/include/boost/math/distributions/binomial.hpp	/^      RealType success_fraction() const$/;"	f	class:boost::math::binomial_distribution	access:public	signature:() const
boost::math::binomial_distribution::trials	/usr/include/boost/math/distributions/binomial.hpp	/^      RealType trials() const$/;"	f	class:boost::math::binomial_distribution	access:public	signature:() const
boost::math::binomial_distribution::value_type	/usr/include/boost/math/distributions/binomial.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::binomial_distribution	access:public
boost::math::cauchy	/usr/include/boost/math/distributions/cauchy.hpp	/^typedef cauchy_distribution<double> cauchy;$/;"	t	namespace:boost::math
boost::math::cauchy_distribution	/usr/include/boost/math/distributions/cauchy.hpp	/^class cauchy_distribution$/;"	c	namespace:boost::math
boost::math::cauchy_distribution::cauchy_distribution	/usr/include/boost/math/distributions/cauchy.hpp	/^   cauchy_distribution(RealType location = 0, RealType scale = 1)$/;"	f	class:boost::math::cauchy_distribution	access:public	signature:(RealType location = 0, RealType scale = 1)
boost::math::cauchy_distribution::location	/usr/include/boost/math/distributions/cauchy.hpp	/^   RealType location()const$/;"	f	class:boost::math::cauchy_distribution	access:public	signature:() const
boost::math::cauchy_distribution::m_a	/usr/include/boost/math/distributions/cauchy.hpp	/^   RealType m_a;    \/\/ The location, this is the median of the distribution.$/;"	m	class:boost::math::cauchy_distribution	access:private
boost::math::cauchy_distribution::m_hg	/usr/include/boost/math/distributions/cauchy.hpp	/^   RealType m_hg;   \/\/ The scale )or shape), this is the half width at half height.$/;"	m	class:boost::math::cauchy_distribution	access:private
boost::math::cauchy_distribution::policy_type	/usr/include/boost/math/distributions/cauchy.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::cauchy_distribution	access:public
boost::math::cauchy_distribution::scale	/usr/include/boost/math/distributions/cauchy.hpp	/^   RealType scale()const$/;"	f	class:boost::math::cauchy_distribution	access:public	signature:() const
boost::math::cauchy_distribution::value_type	/usr/include/boost/math/distributions/cauchy.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::cauchy_distribution	access:public
boost::math::cbrt	/usr/include/boost/math/special_functions/cbrt.hpp	/^inline typename tools::promote_args<T>::type cbrt(T z)$/;"	f	namespace:boost::math	signature:(T z)
boost::math::cbrt	/usr/include/boost/math/special_functions/cbrt.hpp	/^inline typename tools::promote_args<T>::type cbrt(T z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T z, const Policy& pol)
boost::math::cbrt	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type cbrt(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
boost::math::cbrt	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type cbrt(RT z, const Policy&);$/;"	p	namespace:boost::math	signature:(RT z, const Policy&)
boost::math::cdf	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType cdf(const bernoulli_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist, const RealType& k)
boost::math::cdf	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType cdf(const complemented2_type<bernoulli_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<bernoulli_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType cdf(const beta_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType cdf(const complemented2_type<beta_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<beta_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType cdf(const binomial_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist, const RealType& k)
boost::math::cdf	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType cdf(const complemented2_type<binomial_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<binomial_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType cdf(const cauchy_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType cdf(const complemented2_type<cauchy_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<cauchy_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType cdf(const chi_squared_distribution<RealType, Policy>& dist, const RealType& chi_square)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist, const RealType& chi_square)
boost::math::cdf	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType cdf(const complemented2_type<chi_squared_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<chi_squared_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type cdf(const Distribution& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const Distribution& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type cdf(const complemented2_type<Distribution, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<Distribution, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType cdf(const complemented2_type<exponential_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<exponential_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType cdf(const exponential_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType cdf(const complemented2_type<extreme_value_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<extreme_value_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType cdf(const extreme_value_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType cdf(const complemented2_type<fisher_f_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<fisher_f_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType cdf(const fisher_f_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType cdf(const complemented2_type<gamma_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<gamma_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType cdf(const gamma_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/geometric.hpp	/^      inline RealType cdf(const complemented2_type<geometric_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<geometric_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType cdf(const geometric_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist, const RealType& k)
boost::math::cdf	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType cdf(const complemented2_type<hypergeometric_distribution<RealType, Policy>, U>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<hypergeometric_distribution<RealType, Policy>, U>& c)
boost::math::cdf	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType cdf(const complemented2_type<hypergeometric_distribution<RealType, Policy>, unsigned>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<hypergeometric_distribution<RealType, Policy>, unsigned>& c)
boost::math::cdf	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType cdf(const hypergeometric_distribution<RealType, Policy>& dist, const U& x)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist, const U& x)
boost::math::cdf	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType cdf(const hypergeometric_distribution<RealType, Policy>& dist, const unsigned& x)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist, const unsigned& x)
boost::math::cdf	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType cdf(const complemented2_type<inverse_chi_squared_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<inverse_chi_squared_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType cdf(const inverse_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType cdf(const complemented2_type<inverse_gamma_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<inverse_gamma_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType cdf(const inverse_gamma_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType cdf(const complemented2_type<inverse_gaussian_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<inverse_gaussian_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType cdf(const inverse_gaussian_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType cdf(const complemented2_type<laplace_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<laplace_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType cdf(const laplace_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType cdf(const complemented2_type<logistic_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<logistic_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType cdf(const logistic_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType cdf(const complemented2_type<lognormal_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<lognormal_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType cdf(const lognormal_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      inline RealType cdf(const complemented2_type<negative_binomial_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<negative_binomial_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType cdf(const negative_binomial_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist, const RealType& k)
boost::math::cdf	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      RealType cdf(const complemented2_type<non_central_beta_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_beta_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      RealType cdf(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      RealType cdf(const complemented2_type<non_central_chi_squared_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_chi_squared_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      RealType cdf(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/non_central_f.hpp	/^      RealType cdf(const complemented2_type<non_central_f_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_f_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/non_central_f.hpp	/^      RealType cdf(const non_central_f_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/non_central_t.hpp	/^      RealType cdf(const complemented2_type<non_central_t_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_t_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/non_central_t.hpp	/^      RealType cdf(const non_central_t_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType cdf(const complemented2_type<normal_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<normal_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType cdf(const normal_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType cdf(const complemented2_type<pareto_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<pareto_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType cdf(const pareto_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/poisson.hpp	/^    RealType cdf(const complemented2_type<poisson_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<poisson_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/poisson.hpp	/^    RealType cdf(const poisson_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist, const RealType& k)
boost::math::cdf	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType cdf(const complemented2_type<rayleigh_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<rayleigh_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType cdf(const rayleigh_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType cdf(const complemented2_type<skew_normal_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<skew_normal_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType cdf(const skew_normal_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType cdf(const complemented2_type<students_t_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<students_t_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType cdf(const students_t_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/triangular.hpp	/^  RealType cdf(const complemented2_type<triangular_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<triangular_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType cdf(const triangular_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType cdf(const complemented2_type<uniform_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<uniform_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType cdf(const uniform_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::cdf	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType cdf(const complemented2_type<weibull_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<weibull_distribution<RealType, Policy>, RealType>& c)
boost::math::cdf	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType cdf(const weibull_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::changesign	/usr/include/boost/math/special_functions/sign.hpp	/^template<class T> T (changesign)(const T& x)$/;"	f	namespace:boost::math	signature:(const T& x)
boost::math::chf	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type chf(const Distribution& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const Distribution& dist, const RealType& x)
boost::math::chi_squared	/usr/include/boost/math/distributions/chi_squared.hpp	/^typedef chi_squared_distribution<double> chi_squared;$/;"	t	namespace:boost::math
boost::math::chi_squared_distribution	/usr/include/boost/math/distributions/chi_squared.hpp	/^class chi_squared_distribution$/;"	c	namespace:boost::math
boost::math::chi_squared_distribution::chi_squared_distribution	/usr/include/boost/math/distributions/chi_squared.hpp	/^   chi_squared_distribution(RealType i) : m_df(i)$/;"	f	class:boost::math::chi_squared_distribution	access:public	signature:(RealType i)
boost::math::chi_squared_distribution::degrees_of_freedom	/usr/include/boost/math/distributions/chi_squared.hpp	/^   RealType degrees_of_freedom()const$/;"	f	class:boost::math::chi_squared_distribution	access:public	signature:() const
boost::math::chi_squared_distribution::find_degrees_of_freedom	/usr/include/boost/math/distributions/chi_squared.hpp	/^   static RealType find_degrees_of_freedom($/;"	p	class:boost::math::chi_squared_distribution	access:public	signature:( RealType difference_from_variance, RealType alpha, RealType beta, RealType variance, RealType hint = 100)
boost::math::chi_squared_distribution::find_degrees_of_freedom	/usr/include/boost/math/distributions/chi_squared.hpp	/^RealType chi_squared_distribution<RealType, Policy>::find_degrees_of_freedom($/;"	f	class:boost::math::chi_squared_distribution	signature:( RealType difference_from_variance, RealType alpha, RealType beta, RealType variance, RealType hint)
boost::math::chi_squared_distribution::m_df	/usr/include/boost/math/distributions/chi_squared.hpp	/^   RealType m_df; \/\/ degrees of freedom is a positive real number.$/;"	m	class:boost::math::chi_squared_distribution	access:private
boost::math::chi_squared_distribution::policy_type	/usr/include/boost/math/distributions/chi_squared.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::chi_squared_distribution	access:public
boost::math::chi_squared_distribution::value_type	/usr/include/boost/math/distributions/chi_squared.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::chi_squared_distribution	access:public
boost::math::coefficient_of_variation	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type coefficient_of_variation(const Distribution& dist)$/;"	f	namespace:boost::math	signature:(const Distribution& dist)
boost::math::complement	/usr/include/boost/math/distributions/complement.hpp	/^inline complemented2_type<Dist, RealType> complement(const Dist& d, const RealType& r)$/;"	f	namespace:boost::math	signature:(const Dist& d, const RealType& r)
boost::math::complement	/usr/include/boost/math/distributions/complement.hpp	/^inline complemented3_type<Dist, RealType1, RealType2> complement(const Dist& d, const RealType1& r1, const RealType2& r2)$/;"	f	namespace:boost::math	signature:(const Dist& d, const RealType1& r1, const RealType2& r2)
boost::math::complement	/usr/include/boost/math/distributions/complement.hpp	/^inline complemented4_type<Dist, RealType1, RealType2, RealType3> complement(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3)$/;"	f	namespace:boost::math	signature:(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3)
boost::math::complement	/usr/include/boost/math/distributions/complement.hpp	/^inline complemented5_type<Dist, RealType1, RealType2, RealType3, RealType4> complement(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3, const RealType4& r4)$/;"	f	namespace:boost::math	signature:(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3, const RealType4& r4)
boost::math::complement	/usr/include/boost/math/distributions/complement.hpp	/^inline complemented6_type<Dist, RealType1, RealType2, RealType3, RealType4, RealType5> complement(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3, const RealType4& r4, const RealType5& r5)$/;"	f	namespace:boost::math	signature:(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3, const RealType4& r4, const RealType5& r5)
boost::math::complement	/usr/include/boost/math/distributions/complement.hpp	/^inline complemented7_type<Dist, RealType1, RealType2, RealType3, RealType4, RealType5, RealType6> complement(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3, const RealType4& r4, const RealType5& r5, const RealType6& r6)$/;"	f	namespace:boost::math	signature:(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3, const RealType4& r4, const RealType5& r5, const RealType6& r6)
boost::math::complemented2_type	/usr/include/boost/math/distributions/complement.hpp	/^struct complemented2_type$/;"	s	namespace:boost::math
boost::math::complemented2_type::complemented2_type	/usr/include/boost/math/distributions/complement.hpp	/^   complemented2_type($/;"	f	struct:boost::math::complemented2_type	access:public	signature:( const Dist& d, const RealType& p1)
boost::math::complemented2_type::dist	/usr/include/boost/math/distributions/complement.hpp	/^   const Dist& dist;$/;"	m	struct:boost::math::complemented2_type	access:public
boost::math::complemented2_type::operator =	/usr/include/boost/math/distributions/complement.hpp	/^   complemented2_type& operator=(const complemented2_type&);$/;"	p	struct:boost::math::complemented2_type	access:private	signature:(const complemented2_type&)
boost::math::complemented2_type::param	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType& param;$/;"	m	struct:boost::math::complemented2_type	access:public
boost::math::complemented3_type	/usr/include/boost/math/distributions/complement.hpp	/^struct complemented3_type$/;"	s	namespace:boost::math
boost::math::complemented3_type::complemented3_type	/usr/include/boost/math/distributions/complement.hpp	/^   complemented3_type($/;"	f	struct:boost::math::complemented3_type	access:public	signature:( const Dist& d, const RealType1& p1, const RealType2& p2)
boost::math::complemented3_type::dist	/usr/include/boost/math/distributions/complement.hpp	/^   const Dist& dist;$/;"	m	struct:boost::math::complemented3_type	access:public
boost::math::complemented3_type::operator =	/usr/include/boost/math/distributions/complement.hpp	/^   complemented3_type& operator=(const complemented3_type&);$/;"	p	struct:boost::math::complemented3_type	access:private	signature:(const complemented3_type&)
boost::math::complemented3_type::param1	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType1& param1;$/;"	m	struct:boost::math::complemented3_type	access:public
boost::math::complemented3_type::param2	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType2& param2;$/;"	m	struct:boost::math::complemented3_type	access:public
boost::math::complemented4_type	/usr/include/boost/math/distributions/complement.hpp	/^struct complemented4_type$/;"	s	namespace:boost::math
boost::math::complemented4_type::complemented4_type	/usr/include/boost/math/distributions/complement.hpp	/^   complemented4_type($/;"	f	struct:boost::math::complemented4_type	access:public	signature:( const Dist& d, const RealType1& p1, const RealType2& p2, const RealType3& p3)
boost::math::complemented4_type::dist	/usr/include/boost/math/distributions/complement.hpp	/^   const Dist& dist;$/;"	m	struct:boost::math::complemented4_type	access:public
boost::math::complemented4_type::operator =	/usr/include/boost/math/distributions/complement.hpp	/^   complemented4_type& operator=(const complemented4_type&);$/;"	p	struct:boost::math::complemented4_type	access:private	signature:(const complemented4_type&)
boost::math::complemented4_type::param1	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType1& param1;$/;"	m	struct:boost::math::complemented4_type	access:public
boost::math::complemented4_type::param2	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType2& param2;$/;"	m	struct:boost::math::complemented4_type	access:public
boost::math::complemented4_type::param3	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType3& param3;$/;"	m	struct:boost::math::complemented4_type	access:public
boost::math::complemented5_type	/usr/include/boost/math/distributions/complement.hpp	/^struct complemented5_type$/;"	s	namespace:boost::math
boost::math::complemented5_type::complemented5_type	/usr/include/boost/math/distributions/complement.hpp	/^   complemented5_type($/;"	f	struct:boost::math::complemented5_type	access:public	signature:( const Dist& d, const RealType1& p1, const RealType2& p2, const RealType3& p3, const RealType4& p4)
boost::math::complemented5_type::dist	/usr/include/boost/math/distributions/complement.hpp	/^   const Dist& dist;$/;"	m	struct:boost::math::complemented5_type	access:public
boost::math::complemented5_type::operator =	/usr/include/boost/math/distributions/complement.hpp	/^   complemented5_type& operator=(const complemented5_type&);$/;"	p	struct:boost::math::complemented5_type	access:private	signature:(const complemented5_type&)
boost::math::complemented5_type::param1	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType1& param1;$/;"	m	struct:boost::math::complemented5_type	access:public
boost::math::complemented5_type::param2	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType2& param2;$/;"	m	struct:boost::math::complemented5_type	access:public
boost::math::complemented5_type::param3	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType3& param3;$/;"	m	struct:boost::math::complemented5_type	access:public
boost::math::complemented5_type::param4	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType4& param4;$/;"	m	struct:boost::math::complemented5_type	access:public
boost::math::complemented6_type	/usr/include/boost/math/distributions/complement.hpp	/^struct complemented6_type$/;"	s	namespace:boost::math
boost::math::complemented6_type::complemented6_type	/usr/include/boost/math/distributions/complement.hpp	/^   complemented6_type($/;"	f	struct:boost::math::complemented6_type	access:public	signature:( const Dist& d, const RealType1& p1, const RealType2& p2, const RealType3& p3, const RealType4& p4, const RealType5& p5)
boost::math::complemented6_type::dist	/usr/include/boost/math/distributions/complement.hpp	/^   const Dist& dist;$/;"	m	struct:boost::math::complemented6_type	access:public
boost::math::complemented6_type::operator =	/usr/include/boost/math/distributions/complement.hpp	/^   complemented6_type& operator=(const complemented6_type&);$/;"	p	struct:boost::math::complemented6_type	access:private	signature:(const complemented6_type&)
boost::math::complemented6_type::param1	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType1& param1;$/;"	m	struct:boost::math::complemented6_type	access:public
boost::math::complemented6_type::param2	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType2& param2;$/;"	m	struct:boost::math::complemented6_type	access:public
boost::math::complemented6_type::param3	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType3& param3;$/;"	m	struct:boost::math::complemented6_type	access:public
boost::math::complemented6_type::param4	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType4& param4;$/;"	m	struct:boost::math::complemented6_type	access:public
boost::math::complemented6_type::param5	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType5& param5;$/;"	m	struct:boost::math::complemented6_type	access:public
boost::math::complemented7_type	/usr/include/boost/math/distributions/complement.hpp	/^struct complemented7_type$/;"	s	namespace:boost::math
boost::math::complemented7_type::complemented7_type	/usr/include/boost/math/distributions/complement.hpp	/^   complemented7_type($/;"	f	struct:boost::math::complemented7_type	access:public	signature:( const Dist& d, const RealType1& p1, const RealType2& p2, const RealType3& p3, const RealType4& p4, const RealType5& p5, const RealType6& p6)
boost::math::complemented7_type::dist	/usr/include/boost/math/distributions/complement.hpp	/^   const Dist& dist;$/;"	m	struct:boost::math::complemented7_type	access:public
boost::math::complemented7_type::operator =	/usr/include/boost/math/distributions/complement.hpp	/^   complemented7_type& operator=(const complemented7_type&);$/;"	p	struct:boost::math::complemented7_type	access:private	signature:(const complemented7_type&)
boost::math::complemented7_type::param1	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType1& param1;$/;"	m	struct:boost::math::complemented7_type	access:public
boost::math::complemented7_type::param2	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType2& param2;$/;"	m	struct:boost::math::complemented7_type	access:public
boost::math::complemented7_type::param3	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType3& param3;$/;"	m	struct:boost::math::complemented7_type	access:public
boost::math::complemented7_type::param4	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType4& param4;$/;"	m	struct:boost::math::complemented7_type	access:public
boost::math::complemented7_type::param5	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType5& param5;$/;"	m	struct:boost::math::complemented7_type	access:public
boost::math::complemented7_type::param6	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType6& param6;$/;"	m	struct:boost::math::complemented7_type	access:public
boost::math::concepts	/usr/include/boost/math/concepts/distributions.hpp	/^namespace concepts$/;"	n	namespace:boost::math
boost::math::concepts	/usr/include/boost/math/concepts/real_concept.hpp	/^namespace concepts$/;"	n	namespace:boost::math
boost::math::concepts	/usr/include/boost/math/concepts/real_type_concept.hpp	/^namespace boost{ namespace math{ namespace concepts{$/;"	n	namespace:boost::math
boost::math::concepts	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace boost{ namespace math{ namespace concepts{$/;"	n	namespace:boost::math
boost::math::concepts	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace concepts$/;"	n	namespace:boost::math
boost::math::concepts::DistributionConcept	/usr/include/boost/math/concepts/distributions.hpp	/^struct DistributionConcept$/;"	s	namespace:boost::math::concepts
boost::math::concepts::DistributionConcept::constraints	/usr/include/boost/math/concepts/distributions.hpp	/^   void constraints()$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:()
boost::math::concepts::DistributionConcept::get_object	/usr/include/boost/math/concepts/distributions.hpp	/^   static Distribution& get_object()$/;"	f	struct:boost::math::concepts::DistributionConcept	access:private	signature:()
boost::math::concepts::DistributionConcept::pd	/usr/include/boost/math/concepts/distributions.hpp	/^   static Distribution* pd;$/;"	m	struct:boost::math::concepts::DistributionConcept	access:private
boost::math::concepts::DistributionConcept::pd	/usr/include/boost/math/concepts/distributions.hpp	/^Distribution* DistributionConcept<Distribution>::pd = 0;$/;"	m	class:boost::math::concepts::DistributionConcept
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const D&)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const D&)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::bernoulli_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::bernoulli_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::beta_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::beta_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::binomial_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::binomial_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::cauchy_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::cauchy_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::chi_squared_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::chi_squared_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::exponential_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::exponential_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::extreme_value_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::extreme_value_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::fisher_f_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::fisher_f_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::gamma_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::gamma_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::hypergeometric_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::hypergeometric_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::inverse_chi_squared_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::inverse_chi_squared_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::inverse_gamma_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::inverse_gamma_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::laplace_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::laplace_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::logistic_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::logistic_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::lognormal_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::lognormal_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::negative_binomial_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::negative_binomial_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::non_central_beta_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::non_central_beta_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::non_central_chi_squared_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::non_central_chi_squared_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::non_central_f_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::non_central_f_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::non_central_t_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::non_central_t_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::normal_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::normal_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::pareto_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::pareto_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::poisson_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::poisson_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::rayleigh_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::rayleigh_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::students_t_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::students_t_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::triangular_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::triangular_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::uniform_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::uniform_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::weibull_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::weibull_distribution<R, P>& d)
boost::math::concepts::DistributionConcept::value_type	/usr/include/boost/math/concepts/distributions.hpp	/^   typedef typename Distribution::value_type value_type;$/;"	t	struct:boost::math::concepts::DistributionConcept	access:public
boost::math::concepts::RealTypeConcept	/usr/include/boost/math/concepts/real_type_concept.hpp	/^struct RealTypeConcept$/;"	s	namespace:boost::math::concepts
boost::math::concepts::RealTypeConcept::check_binary_ops	/usr/include/boost/math/concepts/real_type_concept.hpp	/^   void check_binary_ops(Other o)$/;"	f	struct:boost::math::concepts::RealTypeConcept	access:public	signature:(Other o)
boost::math::concepts::RealTypeConcept::constraints	/usr/include/boost/math/concepts/real_type_concept.hpp	/^   void constraints()$/;"	f	struct:boost::math::concepts::RealTypeConcept	access:public	signature:()
boost::math::concepts::abs	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept abs(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::acos	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept acos(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::asin	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept asin(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::atan	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept atan(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::atan2	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept atan2(real_concept a, real_concept b)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, real_concept b)
boost::math::concepts::call_fmodl	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long double call_fmodl(long double a, long double b)$/;"	f	namespace:boost::math::concepts	signature:(long double a, long double b)
boost::math::concepts::cdf	/usr/include/boost/math/concepts/distributions.hpp	/^RealType cdf(const complemented2_type<distribution_archetype<RealType>, RealType>& c);$/;"	p	namespace:boost::math::concepts	signature:(const complemented2_type<distribution_archetype<RealType>, RealType>& c)
boost::math::concepts::cdf	/usr/include/boost/math/concepts/distributions.hpp	/^RealType cdf(const distribution_archetype<RealType>& dist, const RealType& x);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist, const RealType& x)
boost::math::concepts::ceil	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept ceil(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::chf	/usr/include/boost/math/concepts/distributions.hpp	/^RealType chf(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::concepts::coefficient_of_variation	/usr/include/boost/math/concepts/distributions.hpp	/^RealType coefficient_of_variation(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::concepts::cos	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept cos(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::cosh	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept cosh(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::distribution_archetype	/usr/include/boost/math/concepts/distributions.hpp	/^class distribution_archetype$/;"	c	namespace:boost::math::concepts
boost::math::concepts::distribution_archetype::distribution_archetype	/usr/include/boost/math/concepts/distributions.hpp	/^   distribution_archetype(const distribution_archetype&); \/\/ Copy constructible.$/;"	p	class:boost::math::concepts::distribution_archetype	access:public	signature:(const distribution_archetype&)
boost::math::concepts::distribution_archetype::get_object	/usr/include/boost/math/concepts/distributions.hpp	/^   static distribution_archetype& get_object()$/;"	f	class:boost::math::concepts::distribution_archetype	access:public	signature:()
boost::math::concepts::distribution_archetype::operator =	/usr/include/boost/math/concepts/distributions.hpp	/^   distribution_archetype& operator=(const distribution_archetype&); \/\/ Assignable.$/;"	p	class:boost::math::concepts::distribution_archetype	access:public	signature:(const distribution_archetype&)
boost::math::concepts::distribution_archetype::value_type	/usr/include/boost/math/concepts/distributions.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::concepts::distribution_archetype	access:public
boost::math::concepts::exp	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept exp(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::fabs	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept fabs(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::floor	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept floor(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::fmod	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept fmod(real_concept a, real_concept b)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, real_concept b)
boost::math::concepts::frexp	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept frexp(real_concept a, int* expon)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, int* expon)
boost::math::concepts::hazard	/usr/include/boost/math/concepts/distributions.hpp	/^RealType hazard(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::concepts::iround	/usr/include/boost/math/concepts/real_concept.hpp	/^inline int iround(const concepts::real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v)
boost::math::concepts::iround	/usr/include/boost/math/concepts/real_concept.hpp	/^inline int iround(const concepts::real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v, const Policy& pol)
boost::math::concepts::iround	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline int iround(const concepts::std_real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v)
boost::math::concepts::iround	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline int iround(const concepts::std_real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v, const Policy& pol)
boost::math::concepts::itrunc	/usr/include/boost/math/concepts/real_concept.hpp	/^inline int itrunc(const concepts::real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v)
boost::math::concepts::itrunc	/usr/include/boost/math/concepts/real_concept.hpp	/^inline int itrunc(const concepts::real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v, const Policy& pol)
boost::math::concepts::itrunc	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline int itrunc(const concepts::std_real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v)
boost::math::concepts::itrunc	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline int itrunc(const concepts::std_real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v, const Policy& pol)
boost::math::concepts::kurtosis	/usr/include/boost/math/concepts/distributions.hpp	/^RealType kurtosis(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::concepts::kurtosis_excess	/usr/include/boost/math/concepts/distributions.hpp	/^RealType kurtosis_excess(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::concepts::ldexp	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept ldexp(real_concept a, int expon)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, int expon)
boost::math::concepts::llround	/usr/include/boost/math/concepts/real_concept.hpp	/^inline boost::long_long_type llround(const concepts::real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v)
boost::math::concepts::llround	/usr/include/boost/math/concepts/real_concept.hpp	/^inline boost::long_long_type llround(const concepts::real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v, const Policy& pol)
boost::math::concepts::llround	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::long_long_type llround(const concepts::std_real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v)
boost::math::concepts::llround	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::long_long_type llround(const concepts::std_real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v, const Policy& pol)
boost::math::concepts::lltrunc	/usr/include/boost/math/concepts/real_concept.hpp	/^inline boost::long_long_type lltrunc(const concepts::real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v)
boost::math::concepts::lltrunc	/usr/include/boost/math/concepts/real_concept.hpp	/^inline boost::long_long_type lltrunc(const concepts::real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v, const Policy& pol)
boost::math::concepts::lltrunc	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::long_long_type lltrunc(const concepts::std_real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v)
boost::math::concepts::lltrunc	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::long_long_type lltrunc(const concepts::std_real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v, const Policy& pol)
boost::math::concepts::log	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept log(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::log10	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept log10(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::lround	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long lround(const concepts::real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v)
boost::math::concepts::lround	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long lround(const concepts::real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v, const Policy& pol)
boost::math::concepts::lround	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline long lround(const concepts::std_real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v)
boost::math::concepts::lround	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline long lround(const concepts::std_real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v, const Policy& pol)
boost::math::concepts::ltrunc	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long ltrunc(const concepts::real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v)
boost::math::concepts::ltrunc	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long ltrunc(const concepts::real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v, const Policy& pol)
boost::math::concepts::ltrunc	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline long ltrunc(const concepts::std_real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v)
boost::math::concepts::ltrunc	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline long ltrunc(const concepts::std_real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v, const Policy& pol)
boost::math::concepts::mean	/usr/include/boost/math/concepts/distributions.hpp	/^RealType mean(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::concepts::median	/usr/include/boost/math/concepts/distributions.hpp	/^RealType median(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::concepts::mode	/usr/include/boost/math/concepts/distributions.hpp	/^RealType mode(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::concepts::modf	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept modf(real_concept a, real_concept* ipart)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, real_concept* ipart)
boost::math::concepts::operator !=	/usr/include/boost/math/concepts/real_concept.hpp	/^inline bool operator != (const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
boost::math::concepts::operator !=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline bool operator != (const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
boost::math::concepts::operator *	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept operator*(const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
boost::math::concepts::operator *	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline std_real_concept operator*(const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
boost::math::concepts::operator +	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept operator+(const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
boost::math::concepts::operator +	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline std_real_concept operator+(const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
boost::math::concepts::operator -	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept operator-(const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
boost::math::concepts::operator -	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline std_real_concept operator-(const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
boost::math::concepts::operator /	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept operator\/(const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
boost::math::concepts::operator /	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline std_real_concept operator\/(const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
boost::math::concepts::operator <	/usr/include/boost/math/concepts/real_concept.hpp	/^inline bool operator < (const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
boost::math::concepts::operator <	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline bool operator < (const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
boost::math::concepts::operator <<	/usr/include/boost/math/concepts/real_concept.hpp	/^inline std::basic_ostream<charT, traits>& operator<<(std::basic_ostream<charT, traits>& os, const real_concept& a)$/;"	f	namespace:boost::math::concepts	signature:(std::basic_ostream<charT, traits>& os, const real_concept& a)
boost::math::concepts::operator <<	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline std::basic_ostream<charT, traits>& operator<<(std::basic_ostream<charT, traits>& os, const std_real_concept& a)$/;"	f	namespace:boost::math::concepts	signature:(std::basic_ostream<charT, traits>& os, const std_real_concept& a)
boost::math::concepts::operator <=	/usr/include/boost/math/concepts/real_concept.hpp	/^inline bool operator <= (const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
boost::math::concepts::operator <=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline bool operator <= (const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
boost::math::concepts::operator ==	/usr/include/boost/math/concepts/real_concept.hpp	/^inline bool operator == (const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
boost::math::concepts::operator ==	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline bool operator == (const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
boost::math::concepts::operator >	/usr/include/boost/math/concepts/real_concept.hpp	/^inline bool operator > (const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
boost::math::concepts::operator >	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline bool operator > (const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
boost::math::concepts::operator >=	/usr/include/boost/math/concepts/real_concept.hpp	/^inline bool operator >= (const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
boost::math::concepts::operator >=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline bool operator >= (const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
boost::math::concepts::operator >>	/usr/include/boost/math/concepts/real_concept.hpp	/^inline std::basic_istream<charT, traits>& operator>>(std::basic_istream<charT, traits>& is, real_concept& a)$/;"	f	namespace:boost::math::concepts	signature:(std::basic_istream<charT, traits>& is, real_concept& a)
boost::math::concepts::operator >>	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline std::basic_istream<charT, traits>& operator>>(std::basic_istream<charT, traits>& is, std_real_concept& a)$/;"	f	namespace:boost::math::concepts	signature:(std::basic_istream<charT, traits>& is, std_real_concept& a)
boost::math::concepts::pdf	/usr/include/boost/math/concepts/distributions.hpp	/^RealType pdf(const distribution_archetype<RealType>& dist, const RealType& x);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist, const RealType& x)
boost::math::concepts::pow	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept pow(real_concept a, int b)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, int b)
boost::math::concepts::pow	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept pow(real_concept a, real_concept b)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, real_concept b)
boost::math::concepts::quantile	/usr/include/boost/math/concepts/distributions.hpp	/^RealType quantile(const complemented2_type<distribution_archetype<RealType>, RealType>& c);$/;"	p	namespace:boost::math::concepts	signature:(const complemented2_type<distribution_archetype<RealType>, RealType>& c)
boost::math::concepts::quantile	/usr/include/boost/math/concepts/distributions.hpp	/^RealType quantile(const distribution_archetype<RealType>& dist, const RealType& p);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist, const RealType& p)
boost::math::concepts::range	/usr/include/boost/math/concepts/distributions.hpp	/^std::pair<RealType, RealType> range(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::concepts::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^class real_concept$/;"	c	namespace:boost::math::concepts
boost::math::concepts::real_concept::m_value	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept_base_type m_value;$/;"	m	class:boost::math::concepts::real_concept	access:private
boost::math::concepts::real_concept::operator *=	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator*=(const real_concept& other)$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(const real_concept& other)
boost::math::concepts::real_concept::operator +	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept const& operator+()const$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:() const
boost::math::concepts::real_concept::operator ++	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator++()$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:()
boost::math::concepts::real_concept::operator +=	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator+=(const real_concept& other)$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(const real_concept& other)
boost::math::concepts::real_concept::operator -	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept operator-()const$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:() const
boost::math::concepts::real_concept::operator --	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator--()$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:()
boost::math::concepts::real_concept::operator -=	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator-=(const real_concept& other)$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(const real_concept& other)
boost::math::concepts::real_concept::operator /=	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator\/=(const real_concept& other)$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(const real_concept& other)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(boost::long_long_type c) { m_value = static_cast<real_concept_base_type>(c); return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(boost::long_long_type c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(boost::ulong_long_type c) { m_value = static_cast<real_concept_base_type>(c); return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(boost::ulong_long_type c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(char c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(char c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(double c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(double c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(float c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(float c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(int c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(int c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(long c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(long c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(long double c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(long double c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(short c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(short c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(signed char c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(signed char c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(unsigned char c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned char c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(unsigned int c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned int c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(unsigned long c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned long c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(unsigned short c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned short c)
boost::math::concepts::real_concept::operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(wchar_t c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(wchar_t c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept() : m_value(0){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:()
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(__int64 c) : m_value(static_cast<real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(__int64 c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(boost::long_long_type c) : m_value(static_cast<real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(boost::long_long_type c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(boost::ulong_long_type c) : m_value(static_cast<real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(boost::ulong_long_type c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(char c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(char c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(double c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(double c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(float c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(float c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(int c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(int c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(long c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(long c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(long double c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(long double c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(long long c) : m_value(static_cast<real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(long long c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(short c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(short c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(signed char c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(signed char c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(unsigned __int64 c) : m_value(static_cast<real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned __int64 c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(unsigned char c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned char c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(unsigned int c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned int c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(unsigned long c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned long c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(unsigned long long c) : m_value(static_cast<real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned long long c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(unsigned short c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned short c)
boost::math::concepts::real_concept::real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(wchar_t c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(wchar_t c)
boost::math::concepts::real_concept::value	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept_base_type value()const{ return m_value; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:() const
boost::math::concepts::real_concept_base_type	/usr/include/boost/math/concepts/real_concept.hpp	/^   typedef double real_concept_base_type;$/;"	t	namespace:boost::math::concepts
boost::math::concepts::sin	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept sin(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::sinh	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept sinh(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::skewness	/usr/include/boost/math/concepts/distributions.hpp	/^RealType skewness(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::concepts::sqrt	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept sqrt(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::standard_deviation	/usr/include/boost/math/concepts/distributions.hpp	/^RealType standard_deviation(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::concepts::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^class std_real_concept$/;"	c	namespace:boost::math::concepts
boost::math::concepts::std_real_concept::m_value	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept_base_type m_value;$/;"	m	class:boost::math::concepts::std_real_concept	access:private
boost::math::concepts::std_real_concept::operator *=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator*=(const std_real_concept& other)$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(const std_real_concept& other)
boost::math::concepts::std_real_concept::operator +	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept const& operator+()const$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:() const
boost::math::concepts::std_real_concept::operator +=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator+=(const std_real_concept& other)$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(const std_real_concept& other)
boost::math::concepts::std_real_concept::operator -	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept operator-()const$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:() const
boost::math::concepts::std_real_concept::operator -=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator-=(const std_real_concept& other)$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(const std_real_concept& other)
boost::math::concepts::std_real_concept::operator /=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator\/=(const std_real_concept& other)$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(const std_real_concept& other)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(boost::long_long_type c) { m_value = static_cast<std_real_concept_base_type>(c); return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(boost::long_long_type c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(boost::ulong_long_type c) { m_value = static_cast<std_real_concept_base_type>(c); return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(boost::ulong_long_type c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(char c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(char c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(double c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(double c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(float c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(float c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(int c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(int c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(long c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(long c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(long double c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(long double c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(long long c) { m_value = static_cast<std_real_concept_base_type>(c); return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(long long c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(short c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(short c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(signed char c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(signed char c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(unsigned char c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned char c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(unsigned int c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned int c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(unsigned long c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned long c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(unsigned long long c) { m_value = static_cast<std_real_concept_base_type>(c); return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned long long c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(unsigned short c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned short c)
boost::math::concepts::std_real_concept::operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(wchar_t c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(wchar_t c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept() : m_value(0){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:()
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(boost::long_long_type c) : m_value(static_cast<std_real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(boost::long_long_type c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(boost::ulong_long_type c) : m_value(static_cast<std_real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(boost::ulong_long_type c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(char c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(char c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(double c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(double c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(float c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(float c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(int c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(int c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(long c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(long c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(long double c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(long double c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(long long c) : m_value(static_cast<std_real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(long long c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(short c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(short c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(signed char c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(signed char c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(unsigned char c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned char c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(unsigned int c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned int c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(unsigned long c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned long c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(unsigned long long c) : m_value(static_cast<std_real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned long long c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(unsigned short c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned short c)
boost::math::concepts::std_real_concept::std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(wchar_t c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(wchar_t c)
boost::math::concepts::std_real_concept::value	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept_base_type value()const{ return m_value; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:() const
boost::math::concepts::std_real_concept_base_type	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   typedef double std_real_concept_base_type;$/;"	t	namespace:boost::math::concepts
boost::math::concepts::support	/usr/include/boost/math/concepts/distributions.hpp	/^std::pair<RealType, RealType> support(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::concepts::tan	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept tan(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::tanh	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept tanh(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
boost::math::concepts::variance	/usr/include/boost/math/concepts/distributions.hpp	/^RealType variance(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
boost::math::conj	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        conj(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::conj	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    conj(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::constants	/usr/include/boost/math/bindings/rr.hpp	/^namespace constants{$/;"	n	namespace:boost::math
boost::math::constants	/usr/include/boost/math/constants/calculate_constants.hpp	/^namespace boost{ namespace math{ namespace constants{ namespace detail{$/;"	n	namespace:boost::math
boost::math::constants	/usr/include/boost/math/constants/constants.hpp	/^  namespace constants$/;"	n	namespace:boost::math
boost::math::constants	/usr/include/boost/math/constants/generate.hpp	/^namespace boost{ namespace math{ namespace constants{ $/;"	n	namespace:boost::math
boost::math::constants	/usr/include/boost/math/constants/info.hpp	/^namespace boost{ namespace math{ namespace constants{$/;"	n	namespace:boost::math
boost::math::constants::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^template<> inline boost::math::ntl::RR e<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::constants	signature:(boost::math::ntl::RR)
boost::math::constants::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^template<> inline boost::math::ntl::RR pi<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::constants	signature:(boost::math::ntl::RR)
boost::math::constants::BOOST_STATIC_CONSTANT	/usr/include/boost/math/constants/constants.hpp	/^   BOOST_STATIC_CONSTANT(int, max_string_digits = (101 * 1000L) \/ 301L);$/;"	p	namespace:boost::math::constants	signature:(int, max_string_digits = (101 * 1000L) / 301L)
boost::math::constants::construct_from_double	/usr/include/boost/math/constants/constants.hpp	/^      construct_from_double = 2,$/;"	e	enum:boost::math::constants::construction_method
boost::math::constants::construct_from_float	/usr/include/boost/math/constants/constants.hpp	/^      construct_from_float = 1,$/;"	e	enum:boost::math::constants::construction_method
boost::math::constants::construct_from_long_double	/usr/include/boost/math/constants/constants.hpp	/^      construct_from_long_double = 3,$/;"	e	enum:boost::math::constants::construction_method
boost::math::constants::construct_from_string	/usr/include/boost/math/constants/constants.hpp	/^      construct_from_string = 4$/;"	e	enum:boost::math::constants::construction_method
boost::math::constants::construction_method	/usr/include/boost/math/constants/constants.hpp	/^   enum construction_method$/;"	g	namespace:boost::math::constants
boost::math::constants::construction_traits	/usr/include/boost/math/constants/constants.hpp	/^   struct construction_traits$/;"	s	namespace:boost::math::constants
boost::math::constants::construction_traits::t1	/usr/include/boost/math/constants/constants.hpp	/^      typedef typename policies::precision<Real, Policy>::type t1;$/;"	t	struct:boost::math::constants::construction_traits	access:private
boost::math::constants::construction_traits::t2	/usr/include/boost/math/constants/constants.hpp	/^      typedef typename policies::precision<float, Policy>::type t2;$/;"	t	struct:boost::math::constants::construction_traits	access:private
boost::math::constants::construction_traits::t3	/usr/include/boost/math/constants/constants.hpp	/^      typedef typename policies::precision<double, Policy>::type t3;$/;"	t	struct:boost::math::constants::construction_traits	access:private
boost::math::constants::construction_traits::t4	/usr/include/boost/math/constants/constants.hpp	/^      typedef typename policies::precision<long double, Policy>::type t4;$/;"	t	struct:boost::math::constants::construction_traits	access:private
boost::math::constants::detail	/usr/include/boost/math/constants/calculate_constants.hpp	/^namespace boost{ namespace math{ namespace constants{ namespace detail{$/;"	n	namespace:boost::math::constants
boost::math::constants::detail	/usr/include/boost/math/constants/info.hpp	/^   namespace detail{$/;"	n	namespace:boost::math::constants
boost::math::constants::detail::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/info.hpp	/^      const char* nameof(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(T))$/;"	f	namespace:boost::math::constants::detail	signature:(T)
boost::math::constants::detail::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/info.hpp	/^      const char* nameof<double>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(double))$/;"	f	namespace:boost::math::constants::detail	signature:(double)
boost::math::constants::detail::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/info.hpp	/^      const char* nameof<float>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(float))$/;"	f	namespace:boost::math::constants::detail	signature:(float)
boost::math::constants::detail::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/info.hpp	/^      const char* nameof<long double>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(long double))$/;"	f	namespace:boost::math::constants::detail	signature:(long double)
boost::math::constants::detail::constant_catalan::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_catalan<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_catalan	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_cbrt_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_cbrt_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_cbrt_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_cos_one::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_cos_one<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_cos_one	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_cosh_one::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_cosh_one<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_cosh_one	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_degree::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_degree<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_degree	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_e::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_e<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_e	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_e_pow_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_e_pow_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_e_pow_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_euler::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_euler<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<M>))$/;"	f	class:boost::math::constants::detail::constant_euler	signature:(mpl::int_<M>)
boost::math::constants::detail::constant_euler_sqr::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_euler_sqr<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_euler_sqr	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_exp_minus_half::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_exp_minus_half<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_exp_minus_half	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_extreme_value_skewness::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_extreme_value_skewness<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_extreme_value_skewness	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_four_minus_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_four_minus_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_four_minus_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_four_thirds_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_four_thirds_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_four_thirds_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_glaisher::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_glaisher<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_glaisher	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_half::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_half<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_half	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_half_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_half_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_half_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_half_root_two::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_half_root_two<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_half_root_two	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_khinchin::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_khinchin<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_khinchin	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_ln_ln_two::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_ln_ln_two<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_ln_ln_two	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_ln_phi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_ln_phi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_ln_phi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_ln_ten::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_ln_ten<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_ln_ten	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_ln_two::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_ln_two<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_ln_two	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_log10_e::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_log10_e<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_log10_e	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_one_div_cbrt_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_cbrt_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_cbrt_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_one_div_euler::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_euler<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_euler	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_one_div_ln_phi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_ln_phi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_ln_phi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_one_div_log10_e::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_log10_e<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_log10_e	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_one_div_root_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_root_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_root_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_one_div_root_two::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_root_two<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_root_two	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_one_div_root_two_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_root_two_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_root_two_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_one_div_two_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_one_div_two_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_one_div_two_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_phi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_phi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_phi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_pi_cubed::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pi_cubed<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pi_cubed	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_pi_minus_three::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pi_minus_three<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pi_minus_three	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_pi_pow_e::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pi_pow_e<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pi_pow_e	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_pi_sqr::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pi_sqr<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pi_sqr	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_pi_sqr_div_six::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pi_sqr_div_six<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pi_sqr_div_six	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_pow23_four_minus_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_pow23_four_minus_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_pow23_four_minus_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_radian::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_radian<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_radian	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_rayleigh_kurtosis::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_rayleigh_kurtosis<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_rayleigh_kurtosis	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_rayleigh_kurtosis_excess::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_rayleigh_kurtosis_excess<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_rayleigh_kurtosis_excess	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_rayleigh_skewness::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_rayleigh_skewness<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_rayleigh_skewness	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_root_e::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_e<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_e	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_root_half_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_half_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_half_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_root_ln_four::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_ln_four<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_ln_four	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_root_one_div_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_one_div_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_one_div_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_root_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_root_three::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_three<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_three	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_root_two::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_two<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_two	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_root_two_div_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_two_div_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_two_div_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_root_two_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_root_two_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_root_two_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_sin_one::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_sin_one<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_sin_one	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_sinh_one::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_sinh_one<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_sinh_one	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_sixth_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_sixth_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_sixth_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_third::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_third<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_third	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_third_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_third_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_third_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_three_quarters::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_three_quarters<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_three_quarters	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_three_quarters_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_three_quarters_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_three_quarters_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_two_div_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_two_div_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_two_div_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_two_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_two_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_two_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_two_thirds::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_two_thirds<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_two_thirds	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_two_thirds_pi::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_two_thirds_pi<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_two_thirds_pi	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_twothirds::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_twothirds<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_twothirds	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_zeta_three::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_zeta_three<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_zeta_three	signature:(mpl::int_<N>)
boost::math::constants::detail::constant_zeta_two::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T constant_zeta_two<T>::compute(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpl::int_<N>))$/;"	f	class:boost::math::constants::detail::constant_zeta_two	signature:(mpl::int_<N>)
boost::math::constants::detail::detail	/usr/include/boost/math/constants/calculate_constants.hpp	/^namespace detail{$/;"	n	namespace:boost::math::constants::detail
boost::math::constants::detail::detail::zeta_derivative_2	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T zeta_derivative_2(unsigned n)$/;"	f	namespace:boost::math::constants::detail::detail	signature:(unsigned n)
boost::math::constants::detail::detail::zeta_series_2	/usr/include/boost/math/constants/calculate_constants.hpp	/^T zeta_series_2(unsigned digits)$/;"	f	namespace:boost::math::constants::detail::detail	signature:(unsigned digits)
boost::math::constants::detail::detail::zeta_series_derivative_2	/usr/include/boost/math/constants/calculate_constants.hpp	/^T zeta_series_derivative_2(unsigned digits)$/;"	f	namespace:boost::math::constants::detail::detail	signature:(unsigned digits)
boost::math::constants::detail::detail::zeta_series_derivative_lead_2	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T zeta_series_derivative_lead_2()$/;"	f	namespace:boost::math::constants::detail::detail	signature:()
boost::math::constants::detail::detail::zeta_series_lead_2	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T zeta_series_lead_2()$/;"	f	namespace:boost::math::constants::detail::detail	signature:()
boost::math::constants::detail::khinchin_detail	/usr/include/boost/math/constants/calculate_constants.hpp	/^namespace khinchin_detail{$/;"	n	namespace:boost::math::constants::detail
boost::math::constants::detail::khinchin_detail::khinchin	/usr/include/boost/math/constants/calculate_constants.hpp	/^T khinchin(int digits)$/;"	f	namespace:boost::math::constants::detail::khinchin_detail	signature:(int digits)
boost::math::constants::detail::khinchin_detail::zeta_polynomial_series	/usr/include/boost/math/constants/calculate_constants.hpp	/^T zeta_polynomial_series(T s, T sc, int digits)$/;"	f	namespace:boost::math::constants::detail::khinchin_detail	signature:(T s, T sc, int digits)
boost::math::constants::generator_type	/usr/include/boost/math/constants/generate.hpp	/^typedef mpfr_class generator_type;$/;"	t	namespace:boost::math::constants
boost::math::constants::print_constant	/usr/include/boost/math/constants/generate.hpp	/^inline void print_constant(const char* name, generator_type(*f)(const mpl::int_<0>&))$/;"	f	namespace:boost::math::constants	signature:(const char* name, generator_type(*f)(const mpl::int_<0>&))
boost::math::constants::print_info_on_type	/usr/include/boost/math/constants/info.hpp	/^void print_info_on_type(std::ostream& os = std::cout BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(T) BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(Policy))$/;"	f	namespace:boost::math::constants	signature:(std::ostream& os = std::cout BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(T) BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(Policy))
boost::math::constants::print_info_on_type	/usr/include/boost/math/constants/info.hpp	/^void print_info_on_type(std::ostream& os = std::cout BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(T))$/;"	f	namespace:boost::math::constants	signature:(std::ostream& os = std::cout BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(T))
boost::math::cos	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        cos(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::cos	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    cos(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::cos_pi	/usr/include/boost/math/special_functions/cos_pi.hpp	/^inline typename tools::promote_args<T>::type cos_pi(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::cos_pi	/usr/include/boost/math/special_functions/cos_pi.hpp	/^inline typename tools::promote_args<T>::type cos_pi(T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T x, const Policy& pol)
boost::math::cos_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type cos_pi(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::cos_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type cos_pi(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
boost::math::cosh	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        cosh(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::cosh	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    cosh(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::cyl_bessel_i	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_bessel_i(T1 v, T2 x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::cyl_bessel_i	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_bessel_i(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::cyl_bessel_i	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_bessel_i(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::cyl_bessel_i	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_bessel_i(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::cyl_bessel_j	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_bessel_j(T1 v, T2 x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::cyl_bessel_j	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_bessel_j(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::cyl_bessel_j	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_bessel_j(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::cyl_bessel_k	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_bessel_k(T1 v, T2 x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::cyl_bessel_k	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_bessel_k(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::cyl_bessel_k	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_bessel_k(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::cyl_bessel_k	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_bessel_k(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::cyl_hankel_1	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> cyl_hankel_1(T1 v, T2 x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::cyl_hankel_1	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> cyl_hankel_1(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::cyl_hankel_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> cyl_hankel_1(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::cyl_hankel_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> cyl_hankel_1(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::cyl_hankel_2	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> cyl_hankel_2(T1 v, T2 x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::cyl_hankel_2	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> cyl_hankel_2(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::cyl_hankel_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> cyl_hankel_2(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::cyl_hankel_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> cyl_hankel_2(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::cyl_neumann	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_neumann(T1 v, T2 x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::cyl_neumann	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_neumann(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::cyl_neumann	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_neumann(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::cyl_neumann	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_neumann(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::cylindrical	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        cylindrical(T const & r,$/;"	f	namespace:boost::math	signature:(T const & r, T const & angle, T const & h1, T const & h2, T const & h3, T const & h4, T const & h5, T const & h6)
boost::math::cylindrical	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    cylindrical(T const & r,$/;"	f	namespace:boost::math	signature:(T const & r, T const & angle, T const & h1, T const & h2)
boost::math::cylindrospherical	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    cylindrospherical(  T const & t,$/;"	f	namespace:boost::math	signature:( T const & t, T const & radius, T const & longitude, T const & latitude)
boost::math::detail	/usr/include/boost/math/bindings/detail/big_digamma.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/bindings/e_float.hpp	/^} namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/bindings/mpreal.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/bindings/rr.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/common_factor_ct.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/common_factor_rt.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/complex/details.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/cauchy.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/chi_squared.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^namespace boost{ namespace math{ namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/detail/hypergeometric_cdf.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/exponential.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/extreme_value.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/gamma.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/lognormal.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/non_central_t.hpp	/^      namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/pareto.hpp	/^    namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/poisson.hpp	/^     namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/rayleigh.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/skew_normal.hpp	/^  namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/students_t.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/triangular.hpp	/^  namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/uniform.hpp	/^  namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/distributions/weibull.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/octonion.hpp	/^        namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/quaternion.hpp	/^        namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/acosh.hpp	/^       namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/airy.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/asinh.hpp	/^       namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/atanh.hpp	/^       namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/bessel.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/beta.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/cbrt.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/cos_pi.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^namespace detail {$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^namespace boost { namespace math{  namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_jn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^namespace detail {$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_kn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/bessel_yn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^namespace detail {$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/iconv.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/digamma.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/ellint_1.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/ellint_2.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/ellint_3.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/ellint_rc.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/ellint_rd.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/ellint_rf.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/ellint_rj.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/erf.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/expint.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/expm1.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/factorials.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/fpclassify.hpp	/^namespace detail {$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/fpclassify.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/gamma.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/hankel.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/hermite.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/hypot.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/laguerre.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/legendre.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/log1p.hpp	/^namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/next.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/owens_t.hpp	/^      namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/pow.hpp	/^namespace detail {$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/powm1.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/sign.hpp	/^namespace detail {$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/sin_pi.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/sinc.hpp	/^       namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/sinhc.hpp	/^       namespace detail$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/special_functions/zeta.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
boost::math::detail	/usr/include/boost/math/tools/config.hpp	/^   namespace detail$/;"	n	namespace:boost::math
boost::math::detail::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/bindings/e_float.hpp	/^inline int fpclassify_imp< boost::math::ef::e_float> BOOST_NO_MACRO_EXPAND(boost::math::ef::e_float x, const generic_tag<true>&)$/;"	f	namespace:boost::math::detail	signature:(boost::math::ef::e_float x, const generic_tag<true>&)
boost::math::detail::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool isfinite_impl BOOST_NO_MACRO_EXPAND(long double t, const native_tag&)$/;"	f	namespace:boost::math::detail	signature:(long double t, const native_tag&)
boost::math::detail::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool isinf_impl BOOST_NO_MACRO_EXPAND(long double t, const native_tag&)$/;"	f	namespace:boost::math::detail	signature:(long double t, const native_tag&)
boost::math::detail::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool isnormal_impl BOOST_NO_MACRO_EXPAND(long double t, const native_tag&)$/;"	f	namespace:boost::math::detail	signature:(long double t, const native_tag&)
boost::math::detail::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline int fpclassify_imp BOOST_NO_MACRO_EXPAND(T t, const generic_tag<false>&)$/;"	f	namespace:boost::math::detail	signature:(T t, const generic_tag<false>&)
boost::math::detail::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline int fpclassify_imp BOOST_NO_MACRO_EXPAND(T t, const generic_tag<true>&)$/;"	f	namespace:boost::math::detail	signature:(T t, const generic_tag<true>&)
boost::math::detail::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline int fpclassify_imp BOOST_NO_MACRO_EXPAND(T t, const native_tag&)$/;"	f	namespace:boost::math::detail	signature:(T t, const native_tag&)
boost::math::detail::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline int fpclassify_imp BOOST_NO_MACRO_EXPAND(long double t, const native_tag&)$/;"	f	namespace:boost::math::detail	signature:(long double t, const native_tag&)
boost::math::detail::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^int fpclassify_imp BOOST_NO_MACRO_EXPAND(T x, ieee_copy_all_bits_tag)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_all_bits_tag)
boost::math::detail::BOOST_NO_MACRO_EXPAND	/usr/include/boost/math/special_functions/fpclassify.hpp	/^int fpclassify_imp BOOST_NO_MACRO_EXPAND(T x, ieee_copy_leading_bits_tag)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_leading_bits_tag)
boost::math::detail::BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( __int64, unsigned __int64 );$/;"	p	namespace:boost::math::detail	signature:( __int64, unsigned __int64 )
boost::math::detail::BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( boost::long_long_type, boost::ulong_long_type );$/;"	p	namespace:boost::math::detail	signature:( boost::long_long_type, boost::ulong_long_type )
boost::math::detail::BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( char, unsigned char ); \/\/ char is signed$/;"	p	namespace:boost::math::detail	signature:( char, unsigned char )
boost::math::detail::BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( int, unsigned );$/;"	p	namespace:boost::math::detail	signature:( int, unsigned )
boost::math::detail::BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( long, unsigned long );$/;"	p	namespace:boost::math::detail	signature:( long, unsigned long )
boost::math::detail::BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( short, unsigned short );$/;"	p	namespace:boost::math::detail	signature:( short, unsigned short )
boost::math::detail::BOOST_PRIVATE_GCD_SF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_SF( signed char, unsigned char );$/;"	p	namespace:boost::math::detail	signature:( signed char, unsigned char )
boost::math::detail::BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( boost::ulong_long_type );$/;"	p	namespace:boost::math::detail	signature:( boost::ulong_long_type )
boost::math::detail::BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( char ); \/\/ char is unsigned$/;"	p	namespace:boost::math::detail	signature:( char )
boost::math::detail::BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( unsigned );$/;"	p	namespace:boost::math::detail	signature:( unsigned )
boost::math::detail::BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( unsigned __int64 );$/;"	p	namespace:boost::math::detail	signature:( unsigned __int64 )
boost::math::detail::BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( unsigned char );$/;"	p	namespace:boost::math::detail	signature:( unsigned char )
boost::math::detail::BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( unsigned long );$/;"	p	namespace:boost::math::detail	signature:( unsigned long )
boost::math::detail::BOOST_PRIVATE_GCD_UF	/usr/include/boost/math/common_factor_rt.hpp	/^    BOOST_PRIVATE_GCD_UF( unsigned short );$/;"	p	namespace:boost::math::detail	signature:( unsigned short )
boost::math::detail::CF1_ik	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^int CF1_ik(T v, T x, T* fv, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* fv, const Policy& pol)
boost::math::detail::CF1_jy	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^int CF1_jy(T v, T x, T* fv, int* sign, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* fv, int* sign, const Policy& pol)
boost::math::detail::CF2_ik	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^int CF2_ik(T v, T x, T* Kv, T* Kv1, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* Kv, T* Kv1, const Policy& pol)
boost::math::detail::CF2_jy	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^int CF2_jy(T v, T x, T* p, T* q, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* p, T* q, const Policy& pol)
boost::math::detail::Pn_size	/usr/include/boost/math/special_functions/beta.hpp	/^struct Pn_size$/;"	s	namespace:boost::math::detail
boost::math::detail::Pn_size	/usr/include/boost/math/special_functions/beta.hpp	/^struct Pn_size<double>$/;"	s	namespace:boost::math::detail
boost::math::detail::Pn_size	/usr/include/boost/math/special_functions/beta.hpp	/^struct Pn_size<float>$/;"	s	namespace:boost::math::detail
boost::math::detail::Pn_size	/usr/include/boost/math/special_functions/beta.hpp	/^struct Pn_size<long double>$/;"	s	namespace:boost::math::detail
boost::math::detail::Pn_size::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/beta.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 15); \/\/ ~8-15 digit accuracy$/;"	p	struct:boost::math::detail::Pn_size	access:public	signature:(unsigned, value = 15)
boost::math::detail::Pn_size::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/beta.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 30); \/\/ 16-20 digit accuracy$/;"	p	struct:boost::math::detail::Pn_size	access:public	signature:(unsigned, value = 30)
boost::math::detail::Pn_size::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/beta.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 50); \/\/ ~35-50 digit accuracy$/;"	p	struct:boost::math::detail::Pn_size	access:public	signature:(unsigned, value = 50)
boost::math::detail::Pn_size::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/beta.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 50);$/;"	p	struct:boost::math::detail::Pn_size	access:public	signature:(unsigned, value = 50)
boost::math::detail::T4_mp	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType T4_mp(const RealType h, const RealType a, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const Policy& pol)
boost::math::detail::acosh_imp	/usr/include/boost/math/special_functions/acosh.hpp	/^        inline T    acosh_imp(const T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T x, const Policy& pol)
boost::math::detail::adjust_bounds	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^void adjust_bounds(Real& \/* a *\/, Real& \/* b *\/, Tol const& \/* tol *\/){}$/;"	f	namespace:boost::math::detail	signature:(Real& , Real& , Tol const& )
boost::math::detail::adjust_bounds	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^void adjust_bounds(Real& \/* a *\/, Real& b, tools::equal_floor const& \/* tol *\/)$/;"	f	namespace:boost::math::detail	signature:(Real& , Real& b, tools::equal_floor const& )
boost::math::detail::adjust_bounds	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^void adjust_bounds(Real& a, Real& \/* b *\/, tools::equal_ceil const& \/* tol *\/)$/;"	f	namespace:boost::math::detail	signature:(Real& a, Real& , tools::equal_ceil const& )
boost::math::detail::adjust_bounds	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^void adjust_bounds(Real& a, Real& b, tools::equal_nearest_integer const& \/* tol *\/)$/;"	f	namespace:boost::math::detail	signature:(Real& a, Real& b, tools::equal_nearest_integer const& )
boost::math::detail::airy_ai_imp	/usr/include/boost/math/special_functions/airy.hpp	/^T airy_ai_imp(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
boost::math::detail::airy_ai_prime_imp	/usr/include/boost/math/special_functions/airy.hpp	/^T airy_ai_prime_imp(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
boost::math::detail::airy_bi_imp	/usr/include/boost/math/special_functions/airy.hpp	/^T airy_bi_imp(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
boost::math::detail::airy_bi_prime_imp	/usr/include/boost/math/special_functions/airy.hpp	/^T airy_bi_prime_imp(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
boost::math::detail::asinh_imp	/usr/include/boost/math/special_functions/asinh.hpp	/^        inline T    asinh_imp(const T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T x, const Policy& pol)
boost::math::detail::asymptotic_bessel_amplitude	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_amplitude(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
boost::math::detail::asymptotic_bessel_i_large_x	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^T asymptotic_bessel_i_large_x(T v, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const Policy& pol)
boost::math::detail::asymptotic_bessel_j_large_x	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_large_x(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
boost::math::detail::asymptotic_bessel_j_large_x_2	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_large_x_2(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
boost::math::detail::asymptotic_bessel_j_large_x_P	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_large_x_P(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
boost::math::detail::asymptotic_bessel_j_large_x_Q	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_large_x_Q(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
boost::math::detail::asymptotic_bessel_j_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_limit(const T& v, const mpl::int_<0>&)$/;"	f	namespace:boost::math::detail	signature:(const T& v, const mpl::int_<0>&)
boost::math::detail::asymptotic_bessel_j_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_limit(const T& v, const mpl::int_<113>&)$/;"	f	namespace:boost::math::detail	signature:(const T& v, const mpl::int_<113>&)
boost::math::detail::asymptotic_bessel_j_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_limit(const T& v, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const T& v, const mpl::int_<53>&)
boost::math::detail::asymptotic_bessel_j_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_j_limit(const T& v, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const T& v, const mpl::int_<64>&)
boost::math::detail::asymptotic_bessel_phase_mx	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^T asymptotic_bessel_phase_mx(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
boost::math::detail::asymptotic_bessel_y_large_x	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_y_large_x(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
boost::math::detail::asymptotic_bessel_y_large_x_2	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_y_large_x_2(T v, T x)$/;"	f	namespace:boost::math::detail	signature:(T v, T x)
boost::math::detail::asymptotic_bessel_y_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_y_limit(const mpl::int_<0>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<0>&)
boost::math::detail::asymptotic_bessel_y_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_y_limit(const mpl::int_<113>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<113>&)
boost::math::detail::asymptotic_bessel_y_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_y_limit(const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<53>&)
boost::math::detail::asymptotic_bessel_y_limit	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^inline T asymptotic_bessel_y_limit(const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<64>&)
boost::math::detail::atanh_imp	/usr/include/boost/math/special_functions/atanh.hpp	/^        inline T    atanh_imp(const T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T x, const Policy& pol)
boost::math::detail::bessel_asymptotic_tag	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^struct bessel_asymptotic_tag$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_asymptotic_tag::precision_type	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^   typedef typename policies::precision<T, Policy>::type precision_type;$/;"	t	struct:boost::math::detail::bessel_asymptotic_tag	access:public
boost::math::detail::bessel_asymptotic_tag::type	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^   >::type type;$/;"	t	struct:boost::math::detail::bessel_asymptotic_tag	access:public
boost::math::detail::bessel_i0	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class bessel_i0(mpfr_class x)$/;"	f	namespace:boost::math::detail	signature:(mpfr_class x)
boost::math::detail::bessel_i0	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal bessel_i0(mpfr::mpreal x)$/;"	f	namespace:boost::math::detail	signature:(mpfr::mpreal x)
boost::math::detail::bessel_i0	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^T bessel_i0(T x)$/;"	f	namespace:boost::math::detail	signature:(T x)
boost::math::detail::bessel_i0	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^T bessel_i0(T x);$/;"	p	namespace:boost::math::detail	signature:(T x)
boost::math::detail::bessel_i0_initializer	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^struct bessel_i0_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_i0_initializer::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_i0_initializer	access:public	signature:()
boost::math::detail::bessel_i0_initializer::init	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_i0_initializer	access:public
boost::math::detail::bessel_i0_initializer::init::do_init	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_i0_initializer::init	access:public	signature:()
boost::math::detail::bessel_i0_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_i0_initializer::init	access:public	signature:() const
boost::math::detail::bessel_i0_initializer::init::init	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_i0_initializer::init	access:public	signature:()
boost::math::detail::bessel_i0_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_i0_initializer	access:public
boost::math::detail::bessel_i0_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^const typename bessel_i0_initializer<T>::init bessel_i0_initializer<T>::initializer;$/;"	m	class:boost::math::detail::bessel_i0_initializer
boost::math::detail::bessel_i1	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class bessel_i1(mpfr_class x)$/;"	f	namespace:boost::math::detail	signature:(mpfr_class x)
boost::math::detail::bessel_i1	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal bessel_i1(mpfr::mpreal x)$/;"	f	namespace:boost::math::detail	signature:(mpfr::mpreal x)
boost::math::detail::bessel_i1	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^T bessel_i1(T x)$/;"	f	namespace:boost::math::detail	signature:(T x)
boost::math::detail::bessel_i1	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^T bessel_i1(T x);$/;"	p	namespace:boost::math::detail	signature:(T x)
boost::math::detail::bessel_i1_initializer	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^struct bessel_i1_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_i1_initializer::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_i1_initializer	access:public	signature:()
boost::math::detail::bessel_i1_initializer::init	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_i1_initializer	access:public
boost::math::detail::bessel_i1_initializer::init::do_init	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_i1_initializer::init	access:public	signature:()
boost::math::detail::bessel_i1_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_i1_initializer::init	access:public	signature:() const
boost::math::detail::bessel_i1_initializer::init::init	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_i1_initializer::init	access:public	signature:()
boost::math::detail::bessel_i1_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_i1_initializer	access:public
boost::math::detail::bessel_i1_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^const typename bessel_i1_initializer<T>::init bessel_i1_initializer<T>::initializer;$/;"	m	class:boost::math::detail::bessel_i1_initializer
boost::math::detail::bessel_i_small_z_series	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^inline T bessel_i_small_z_series(T v, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const Policy& pol)
boost::math::detail::bessel_ik	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^int bessel_ik(T v, T x, T* I, T* K, int kind, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* I, T* K, int kind, const Policy& pol)
boost::math::detail::bessel_int_tag	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      typedef mpl::int_<2> bessel_int_tag;         \/\/ Definite integer optimistaion.$/;"	t	namespace:boost::math::detail
boost::math::detail::bessel_j0	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^T bessel_j0(T x)$/;"	f	namespace:boost::math::detail	signature:(T x)
boost::math::detail::bessel_j0	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^T bessel_j0(T x);$/;"	p	namespace:boost::math::detail	signature:(T x)
boost::math::detail::bessel_j0_initializer	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^struct bessel_j0_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_j0_initializer::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_j0_initializer	access:public	signature:()
boost::math::detail::bessel_j0_initializer::init	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_j0_initializer	access:public
boost::math::detail::bessel_j0_initializer::init::do_init	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_j0_initializer::init	access:public	signature:()
boost::math::detail::bessel_j0_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_j0_initializer::init	access:public	signature:() const
boost::math::detail::bessel_j0_initializer::init::init	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_j0_initializer::init	access:public	signature:()
boost::math::detail::bessel_j0_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_j0_initializer	access:public
boost::math::detail::bessel_j0_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^const typename bessel_j0_initializer<T>::init bessel_j0_initializer<T>::initializer;$/;"	m	class:boost::math::detail::bessel_j0_initializer
boost::math::detail::bessel_j1	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^T bessel_j1(T x)$/;"	f	namespace:boost::math::detail	signature:(T x)
boost::math::detail::bessel_j1	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^T bessel_j1(T x);$/;"	p	namespace:boost::math::detail	signature:(T x)
boost::math::detail::bessel_j1_initializer	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^struct bessel_j1_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_j1_initializer::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_j1_initializer	access:public	signature:()
boost::math::detail::bessel_j1_initializer::init	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_j1_initializer	access:public
boost::math::detail::bessel_j1_initializer::init::do_init	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_j1_initializer::init	access:public	signature:()
boost::math::detail::bessel_j1_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_j1_initializer::init	access:public	signature:() const
boost::math::detail::bessel_j1_initializer::init::init	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_j1_initializer::init	access:public	signature:()
boost::math::detail::bessel_j1_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_j1_initializer	access:public
boost::math::detail::bessel_j1_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^const typename bessel_j1_initializer<T>::init bessel_j1_initializer<T>::initializer;$/;"	m	class:boost::math::detail::bessel_j1_initializer
boost::math::detail::bessel_j_small_z_series	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^inline T bessel_j_small_z_series(T v, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const Policy& pol)
boost::math::detail::bessel_j_small_z_series_term	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^struct bessel_j_small_z_series_term$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_j_small_z_series_term::N	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   unsigned N;$/;"	m	struct:boost::math::detail::bessel_j_small_z_series_term	access:private
boost::math::detail::bessel_j_small_z_series_term::bessel_j_small_z_series_term	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   bessel_j_small_z_series_term(T v_, T x)$/;"	f	struct:boost::math::detail::bessel_j_small_z_series_term	access:public	signature:(T v_, T x)
boost::math::detail::bessel_j_small_z_series_term::mult	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T mult;$/;"	m	struct:boost::math::detail::bessel_j_small_z_series_term	access:private
boost::math::detail::bessel_j_small_z_series_term::operator ()	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::bessel_j_small_z_series_term	access:public	signature:()
boost::math::detail::bessel_j_small_z_series_term::result_type	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::bessel_j_small_z_series_term	access:public
boost::math::detail::bessel_j_small_z_series_term::term	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T term;$/;"	m	struct:boost::math::detail::bessel_j_small_z_series_term	access:private
boost::math::detail::bessel_j_small_z_series_term::v	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T v;$/;"	m	struct:boost::math::detail::bessel_j_small_z_series_term	access:private
boost::math::detail::bessel_jn	/usr/include/boost/math/special_functions/detail/bessel_jn.hpp	/^T bessel_jn(int n, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int n, T x, const Policy& pol)
boost::math::detail::bessel_jy	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^int bessel_jy(T v, T x, T* J, T* Y, int kind, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* J, T* Y, int kind, const Policy& pol)
boost::math::detail::bessel_k0	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^T bessel_k0(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
boost::math::detail::bessel_k0	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^T bessel_k0(T x, const Policy&);$/;"	p	namespace:boost::math::detail	signature:(T x, const Policy&)
boost::math::detail::bessel_k0_initializer	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^struct bessel_k0_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_k0_initializer::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_k0_initializer	access:public	signature:()
boost::math::detail::bessel_k0_initializer::init	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_k0_initializer	access:public
boost::math::detail::bessel_k0_initializer::init::do_init	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_k0_initializer::init	access:public	signature:()
boost::math::detail::bessel_k0_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_k0_initializer::init	access:public	signature:() const
boost::math::detail::bessel_k0_initializer::init::init	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_k0_initializer::init	access:public	signature:()
boost::math::detail::bessel_k0_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_k0_initializer	access:public
boost::math::detail::bessel_k0_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^const typename bessel_k0_initializer<T, Policy>::init bessel_k0_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::bessel_k0_initializer
boost::math::detail::bessel_k1	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^T bessel_k1(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
boost::math::detail::bessel_k1	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^T bessel_k1(T x, const Policy&);$/;"	p	namespace:boost::math::detail	signature:(T x, const Policy&)
boost::math::detail::bessel_k1_initializer	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^struct bessel_k1_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_k1_initializer::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_k1_initializer	access:public	signature:()
boost::math::detail::bessel_k1_initializer::init	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_k1_initializer	access:public
boost::math::detail::bessel_k1_initializer::init::do_init	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_k1_initializer::init	access:public	signature:()
boost::math::detail::bessel_k1_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_k1_initializer::init	access:public	signature:() const
boost::math::detail::bessel_k1_initializer::init::init	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_k1_initializer::init	access:public	signature:()
boost::math::detail::bessel_k1_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_k1_initializer	access:public
boost::math::detail::bessel_k1_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^const typename bessel_k1_initializer<T, Policy>::init bessel_k1_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::bessel_k1_initializer
boost::math::detail::bessel_kn	/usr/include/boost/math/special_functions/detail/bessel_kn.hpp	/^T bessel_kn(int n, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int n, T x, const Policy& pol)
boost::math::detail::bessel_maybe_int_tag	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      typedef mpl::int_<1> bessel_maybe_int_tag;   \/\/ Maybe integer optimisation.$/;"	t	namespace:boost::math::detail
boost::math::detail::bessel_no_int_tag	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      typedef mpl::int_<0> bessel_no_int_tag;      \/\/ No integer optimisation possible.$/;"	t	namespace:boost::math::detail
boost::math::detail::bessel_traits	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      struct bessel_traits$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_traits::optimisation_tag	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         >::type optimisation_tag;$/;"	t	struct:boost::math::detail::bessel_traits	access:public
boost::math::detail::bessel_traits::precision_type	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         typedef typename policies::precision<result_type, Policy>::type precision_type;$/;"	t	struct:boost::math::detail::bessel_traits	access:public
boost::math::detail::bessel_traits::result_type	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         >::type result_type;$/;"	t	struct:boost::math::detail::bessel_traits	access:public
boost::math::detail::bessel_y0	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^T bessel_y0(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
boost::math::detail::bessel_y0	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^T bessel_y0(T x, const Policy&);$/;"	p	namespace:boost::math::detail	signature:(T x, const Policy&)
boost::math::detail::bessel_y0_initializer	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^struct bessel_y0_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_y0_initializer::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_y0_initializer	access:public	signature:()
boost::math::detail::bessel_y0_initializer::init	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_y0_initializer	access:public
boost::math::detail::bessel_y0_initializer::init::do_init	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_y0_initializer::init	access:public	signature:()
boost::math::detail::bessel_y0_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_y0_initializer::init	access:public	signature:() const
boost::math::detail::bessel_y0_initializer::init::init	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_y0_initializer::init	access:public	signature:()
boost::math::detail::bessel_y0_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_y0_initializer	access:public
boost::math::detail::bessel_y0_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^const typename bessel_y0_initializer<T, Policy>::init bessel_y0_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::bessel_y0_initializer
boost::math::detail::bessel_y1	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^T bessel_y1(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
boost::math::detail::bessel_y1	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^T bessel_y1(T x, const Policy&);$/;"	p	namespace:boost::math::detail	signature:(T x, const Policy&)
boost::math::detail::bessel_y1_initializer	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^struct bessel_y1_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_y1_initializer::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_y1_initializer	access:public	signature:()
boost::math::detail::bessel_y1_initializer::init	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_y1_initializer	access:public
boost::math::detail::bessel_y1_initializer::init::do_init	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_y1_initializer::init	access:public	signature:()
boost::math::detail::bessel_y1_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_y1_initializer::init	access:public	signature:() const
boost::math::detail::bessel_y1_initializer::init::init	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_y1_initializer::init	access:public	signature:()
boost::math::detail::bessel_y1_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_y1_initializer	access:public
boost::math::detail::bessel_y1_initializer::initializer	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^const typename bessel_y1_initializer<T, Policy>::init bessel_y1_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::bessel_y1_initializer
boost::math::detail::bessel_y_small_z_series	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^inline T bessel_y_small_z_series(T v, T x, T* pscale, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* pscale, const Policy& pol)
boost::math::detail::bessel_y_small_z_series_term_a	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^struct bessel_y_small_z_series_term_a$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_y_small_z_series_term_a::N	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   unsigned N;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:private
boost::math::detail::bessel_y_small_z_series_term_a::bessel_y_small_z_series_term_a	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   bessel_y_small_z_series_term_a(T v_, T x)$/;"	f	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:public	signature:(T v_, T x)
boost::math::detail::bessel_y_small_z_series_term_a::mult	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T mult;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:private
boost::math::detail::bessel_y_small_z_series_term_a::operator ()	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:public	signature:()
boost::math::detail::bessel_y_small_z_series_term_a::result_type	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:public
boost::math::detail::bessel_y_small_z_series_term_a::term	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T term;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:private
boost::math::detail::bessel_y_small_z_series_term_a::v	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T v;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:private
boost::math::detail::bessel_y_small_z_series_term_b	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^struct bessel_y_small_z_series_term_b$/;"	s	namespace:boost::math::detail
boost::math::detail::bessel_y_small_z_series_term_b::N	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   unsigned N;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:private
boost::math::detail::bessel_y_small_z_series_term_b::bessel_y_small_z_series_term_b	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   bessel_y_small_z_series_term_b(T v_, T x)$/;"	f	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:public	signature:(T v_, T x)
boost::math::detail::bessel_y_small_z_series_term_b::mult	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T mult;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:private
boost::math::detail::bessel_y_small_z_series_term_b::operator ()	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:public	signature:()
boost::math::detail::bessel_y_small_z_series_term_b::result_type	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:public
boost::math::detail::bessel_y_small_z_series_term_b::term	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T term;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:private
boost::math::detail::bessel_y_small_z_series_term_b::v	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T v;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:private
boost::math::detail::bessel_yn	/usr/include/boost/math/special_functions/detail/bessel_yn.hpp	/^T bessel_yn(int n, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int n, T x, const Policy& pol)
boost::math::detail::bessel_yn_small_z	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^T bessel_yn_small_z(int n, T z, T* scale, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int n, T z, T* scale, const Policy& pol)
boost::math::detail::beta	/usr/include/boost/math/special_functions/beta.hpp	/^   beta(RT1 a, RT2 b, RT3 x, const mpl::false_*)$/;"	f	namespace:boost::math::detail	signature:(RT1 a, RT2 b, RT3 x, const mpl::false_*)
boost::math::detail::beta	/usr/include/boost/math/special_functions/beta.hpp	/^   beta(RT1 a, RT2 b, const Policy&, const mpl::true_*)$/;"	f	namespace:boost::math::detail	signature:(RT1 a, RT2 b, const Policy&, const mpl::true_*)
boost::math::detail::beta_imp	/usr/include/boost/math/special_functions/beta.hpp	/^T beta_imp(T a, T b, const Lanczos&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, const Lanczos&, const Policy& pol)
boost::math::detail::beta_imp	/usr/include/boost/math/special_functions/beta.hpp	/^T beta_imp(T a, T b, const lanczos::undefined_lanczos& \/* l *\/, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, const lanczos::undefined_lanczos& , const Policy& pol)
boost::math::detail::beta_inv_ab_t	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^struct beta_inv_ab_t$/;"	s	namespace:boost::math::detail
boost::math::detail::beta_inv_ab_t::b	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   T b, z, p;$/;"	m	struct:boost::math::detail::beta_inv_ab_t	access:private
boost::math::detail::beta_inv_ab_t::beta_inv_ab_t	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   beta_inv_ab_t(T b_, T z_, T p_, bool invert_, bool swap_ab_) : b(b_), z(z_), p(p_), invert(invert_), swap_ab(swap_ab_) {}$/;"	f	struct:boost::math::detail::beta_inv_ab_t	access:public	signature:(T b_, T z_, T p_, bool invert_, bool swap_ab_)
boost::math::detail::beta_inv_ab_t::invert	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   bool invert, swap_ab;$/;"	m	struct:boost::math::detail::beta_inv_ab_t	access:private
boost::math::detail::beta_inv_ab_t::operator ()	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   T operator()(T a)$/;"	f	struct:boost::math::detail::beta_inv_ab_t	access:public	signature:(T a)
boost::math::detail::beta_inv_ab_t::p	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   T b, z, p;$/;"	m	struct:boost::math::detail::beta_inv_ab_t	access:private
boost::math::detail::beta_inv_ab_t::swap_ab	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   bool invert, swap_ab;$/;"	m	struct:boost::math::detail::beta_inv_ab_t	access:private
boost::math::detail::beta_inv_ab_t::z	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   T b, z, p;$/;"	m	struct:boost::math::detail::beta_inv_ab_t	access:private
boost::math::detail::beta_small_b_large_a_series	/usr/include/boost/math/special_functions/beta.hpp	/^T beta_small_b_large_a_series(T a, T b, T x, T y, T s0, T mult, const Policy& pol, bool normalised)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T y, T s0, T mult, const Policy& pol, bool normalised)
boost::math::detail::big_digamma	/usr/include/boost/math/bindings/detail/big_digamma.hpp	/^T big_digamma(T x)$/;"	f	namespace:boost::math::detail	signature:(T x)
boost::math::detail::big_digamma_helper	/usr/include/boost/math/bindings/detail/big_digamma.hpp	/^T big_digamma_helper(T x)$/;"	f	namespace:boost::math::detail	signature:(T x)
boost::math::detail::big_int_type	/usr/include/boost/math/special_functions/cbrt.hpp	/^struct big_int_type$/;"	s	namespace:boost::math::detail
boost::math::detail::big_int_type::operator boost::uintmax_t	/usr/include/boost/math/special_functions/cbrt.hpp	/^   operator boost::uintmax_t()const;$/;"	p	struct:boost::math::detail::big_int_type	access:public	signature:() const
boost::math::detail::binomial_ccdf	/usr/include/boost/math/special_functions/beta.hpp	/^inline T binomial_ccdf(T n, T k, T x, T y)$/;"	f	namespace:boost::math::detail	signature:(T n, T k, T x, T y)
boost::math::detail::bracket_and_solve_root_01	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         std::pair<T, T> bracket_and_solve_root_01(F f, const T& guess, T factor, bool rising, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(F f, const T& guess, T factor, bool rising, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)
boost::math::detail::bubble_down_one	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^void bubble_down_one(T* first, T* last, Func f)$/;"	f	namespace:boost::math::detail	signature:(T* first, T* last, Func f)
boost::math::detail::cbrt_imp	/usr/include/boost/math/special_functions/cbrt.hpp	/^T cbrt_imp(T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol)
boost::math::detail::cdf_imp	/usr/include/boost/math/distributions/cauchy.hpp	/^RealType cdf_imp(const cauchy_distribution<RealType, Policy>& dist, const RealType& x, bool complement)$/;"	f	namespace:boost::math::detail	signature:(const cauchy_distribution<RealType, Policy>& dist, const RealType& x, bool complement)
boost::math::detail::changesign_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline T (changesign_impl)(T x, generic_tag<false> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<false> const&)
boost::math::detail::changesign_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline T (changesign_impl)(T x, generic_tag<true> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<true> const&)
boost::math::detail::changesign_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline T (changesign_impl)(T x, ieee_copy_leading_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_leading_bits_tag const&)
boost::math::detail::changesign_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline T changesign_impl(T x, ieee_copy_all_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_all_bits_tag const&)
boost::math::detail::check_df	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_df(const char* function, RealType const& df, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType const& df, RealType* result, const Policy& pol)
boost::math::detail::check_df_gt0_to_inf	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_df_gt0_to_inf(const char* function, RealType const& df, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType const& df, RealType* result, const Policy& pol)
boost::math::detail::check_finite	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_finite($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType x, RealType* result, const Policy& pol)
boost::math::detail::check_gamma	/usr/include/boost/math/distributions/gamma.hpp	/^inline bool check_gamma($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType scale, RealType shape, RealType* result, const Policy& pol)
boost::math::detail::check_gamma_shape	/usr/include/boost/math/distributions/gamma.hpp	/^inline bool check_gamma_shape($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType shape, RealType* result, const Policy& pol)
boost::math::detail::check_gamma_x	/usr/include/boost/math/distributions/gamma.hpp	/^inline bool check_gamma_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
boost::math::detail::check_inverse_chi_squared	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^  inline bool check_inverse_chi_squared( \/\/ Check both distribution parameters.$/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType degrees_of_freedom, RealType scale, RealType* result, const Policy& pol)
boost::math::detail::check_inverse_gamma	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline bool check_inverse_gamma($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType scale, RealType shape, RealType* result, const Policy& pol)
boost::math::detail::check_inverse_gamma_shape	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline bool check_inverse_gamma_shape($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType shape, RealType* result, const Policy& pol)
boost::math::detail::check_inverse_gamma_x	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline bool check_inverse_gamma_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
boost::math::detail::check_location	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_location($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType location, RealType* result, const Policy& pol)
boost::math::detail::check_lognormal_x	/usr/include/boost/math/distributions/lognormal.hpp	/^  inline bool check_lognormal_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
boost::math::detail::check_non_centrality	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_non_centrality($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType ncp, RealType* result, const Policy& pol)
boost::math::detail::check_pareto	/usr/include/boost/math/distributions/pareto.hpp	/^      inline bool check_pareto( \/\/ distribution parameters.$/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType scale, RealType shape, RealType* result, const Policy& pol)
boost::math::detail::check_pareto_scale	/usr/include/boost/math/distributions/pareto.hpp	/^      inline bool check_pareto_scale($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType scale, RealType* result, const Policy& pol)
boost::math::detail::check_pareto_shape	/usr/include/boost/math/distributions/pareto.hpp	/^      inline bool check_pareto_shape($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType shape, RealType* result, const Policy& pol)
boost::math::detail::check_pareto_x	/usr/include/boost/math/distributions/pareto.hpp	/^      inline bool check_pareto_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
boost::math::detail::check_positive_x	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_positive_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType x, RealType* result, const Policy& pol)
boost::math::detail::check_probability	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_probability(const char* function, RealType const& prob, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType const& prob, RealType* result, const Policy& pol)
boost::math::detail::check_range_result	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^inline T check_range_result(const T& x, const Policy& pol, const char* function)$/;"	f	namespace:boost::math::detail	signature:(const T& x, const Policy& pol, const char* function)
boost::math::detail::check_scale	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_scale($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType scale, RealType* result, const Policy& pol)
boost::math::detail::check_skew_normal_shape	/usr/include/boost/math/distributions/skew_normal.hpp	/^    inline bool check_skew_normal_shape($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType shape, RealType* result, const Policy& pol)
boost::math::detail::check_triangular	/usr/include/boost/math/distributions/triangular.hpp	/^    inline bool check_triangular($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType lower, RealType mode, RealType upper, RealType* result, const Policy& pol)
boost::math::detail::check_triangular_lower	/usr/include/boost/math/distributions/triangular.hpp	/^    inline bool check_triangular_lower($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType lower, RealType* result, const Policy& pol)
boost::math::detail::check_triangular_mode	/usr/include/boost/math/distributions/triangular.hpp	/^    inline bool check_triangular_mode($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType mode, RealType* result, const Policy& pol)
boost::math::detail::check_triangular_upper	/usr/include/boost/math/distributions/triangular.hpp	/^    inline bool check_triangular_upper($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType upper, RealType* result, const Policy& pol)
boost::math::detail::check_triangular_x	/usr/include/boost/math/distributions/triangular.hpp	/^    inline bool check_triangular_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
boost::math::detail::check_uniform	/usr/include/boost/math/distributions/uniform.hpp	/^    inline bool check_uniform($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType lower, RealType upper, RealType* result, const Policy& pol)
boost::math::detail::check_uniform_lower	/usr/include/boost/math/distributions/uniform.hpp	/^    inline bool check_uniform_lower($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType lower, RealType* result, const Policy& pol)
boost::math::detail::check_uniform_upper	/usr/include/boost/math/distributions/uniform.hpp	/^    inline bool check_uniform_upper($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType upper, RealType* result, const Policy& pol)
boost::math::detail::check_uniform_x	/usr/include/boost/math/distributions/uniform.hpp	/^    inline bool check_uniform_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
boost::math::detail::check_weibull	/usr/include/boost/math/distributions/weibull.hpp	/^inline bool check_weibull($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType scale, RealType shape, RealType* result, const Policy& pol)
boost::math::detail::check_weibull_shape	/usr/include/boost/math/distributions/weibull.hpp	/^inline bool check_weibull_shape($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType shape, RealType* result, const Policy& pol)
boost::math::detail::check_weibull_x	/usr/include/boost/math/distributions/weibull.hpp	/^inline bool check_weibull_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
boost::math::detail::check_x	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType x, RealType* result, const Policy& pol)
boost::math::detail::check_x_gt0	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_x_gt0($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType x, RealType* result, const Policy& pol)
boost::math::detail::cos_pi_imp	/usr/include/boost/math/special_functions/cos_pi.hpp	/^T cos_pi_imp(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
boost::math::detail::cyl_bessel_i_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^T cyl_bessel_i_imp(T v, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const Policy& pol)
boost::math::detail::cyl_bessel_i_small_z	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^struct cyl_bessel_i_small_z$/;"	s	namespace:boost::math::detail
boost::math::detail::cyl_bessel_i_small_z::cyl_bessel_i_small_z	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   cyl_bessel_i_small_z(T v_, T z_) : k(0), v(v_), mult(z_*z_\/4) $/;"	f	struct:boost::math::detail::cyl_bessel_i_small_z	access:public	signature:(T v_, T z_)
boost::math::detail::cyl_bessel_i_small_z::k	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   unsigned k;$/;"	m	struct:boost::math::detail::cyl_bessel_i_small_z	access:private
boost::math::detail::cyl_bessel_i_small_z::mult	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   T mult;$/;"	m	struct:boost::math::detail::cyl_bessel_i_small_z	access:private
boost::math::detail::cyl_bessel_i_small_z::operator ()	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::cyl_bessel_i_small_z	access:public	signature:()
boost::math::detail::cyl_bessel_i_small_z::result_type	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::cyl_bessel_i_small_z	access:public
boost::math::detail::cyl_bessel_i_small_z::term	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   T term;$/;"	m	struct:boost::math::detail::cyl_bessel_i_small_z	access:private
boost::math::detail::cyl_bessel_i_small_z::v	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   T v;$/;"	m	struct:boost::math::detail::cyl_bessel_i_small_z	access:private
boost::math::detail::cyl_bessel_j_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^T cyl_bessel_j_imp(T v, T x, const bessel_no_int_tag& t, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_no_int_tag& t, const Policy& pol)
boost::math::detail::cyl_bessel_j_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_bessel_j_imp(T v, T x, const bessel_maybe_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_maybe_int_tag&, const Policy& pol)
boost::math::detail::cyl_bessel_j_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_bessel_j_imp(int v, T x, const bessel_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int v, T x, const bessel_int_tag&, const Policy& pol)
boost::math::detail::cyl_bessel_k_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_bessel_k_imp(T v, T x, const bessel_maybe_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_maybe_int_tag&, const Policy& pol)
boost::math::detail::cyl_bessel_k_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_bessel_k_imp(T v, T x, const bessel_no_int_tag& \/* t *\/, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_no_int_tag& , const Policy& pol)
boost::math::detail::cyl_bessel_k_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_bessel_k_imp(int v, T x, const bessel_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int v, T x, const bessel_int_tag&, const Policy& pol)
boost::math::detail::cyl_neumann_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_neumann_imp(T v, T x, const bessel_maybe_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_maybe_int_tag&, const Policy& pol)
boost::math::detail::cyl_neumann_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_neumann_imp(T v, T x, const bessel_no_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_no_int_tag&, const Policy& pol)
boost::math::detail::cyl_neumann_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_neumann_imp(int v, T x, const bessel_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int v, T x, const bessel_int_tag&, const Policy& pol)
boost::math::detail::degrees_of_freedom_finder	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         struct degrees_of_freedom_finder$/;"	s	namespace:boost::math::detail
boost::math::detail::degrees_of_freedom_finder::comp	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            bool comp;$/;"	m	struct:boost::math::detail::degrees_of_freedom_finder	access:private
boost::math::detail::degrees_of_freedom_finder::degrees_of_freedom_finder	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            degrees_of_freedom_finder($/;"	f	struct:boost::math::detail::degrees_of_freedom_finder	access:public	signature:( RealType lam_, RealType x_, RealType p_, bool c)
boost::math::detail::degrees_of_freedom_finder::lam	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType lam;$/;"	m	struct:boost::math::detail::degrees_of_freedom_finder	access:private
boost::math::detail::degrees_of_freedom_finder::operator ()	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType operator()(const RealType& v)$/;"	f	struct:boost::math::detail::degrees_of_freedom_finder	access:public	signature:(const RealType& v)
boost::math::detail::degrees_of_freedom_finder::p	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType p;$/;"	m	struct:boost::math::detail::degrees_of_freedom_finder	access:private
boost::math::detail::degrees_of_freedom_finder::x	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType x;$/;"	m	struct:boost::math::detail::degrees_of_freedom_finder	access:private
boost::math::detail::df_estimator	/usr/include/boost/math/distributions/chi_squared.hpp	/^struct df_estimator$/;"	s	namespace:boost::math::detail
boost::math::detail::df_estimator::alpha	/usr/include/boost/math/distributions/chi_squared.hpp	/^   RealType alpha;$/;"	m	struct:boost::math::detail::df_estimator	access:private
boost::math::detail::df_estimator::beta	/usr/include/boost/math/distributions/chi_squared.hpp	/^   RealType beta;$/;"	m	struct:boost::math::detail::df_estimator	access:private
boost::math::detail::df_estimator::df_estimator	/usr/include/boost/math/distributions/chi_squared.hpp	/^   df_estimator(RealType a, RealType b, RealType variance, RealType delta)$/;"	f	struct:boost::math::detail::df_estimator	access:public	signature:(RealType a, RealType b, RealType variance, RealType delta)
boost::math::detail::df_estimator::operator ()	/usr/include/boost/math/distributions/chi_squared.hpp	/^   RealType operator()(const RealType& df)$/;"	f	struct:boost::math::detail::df_estimator	access:public	signature:(const RealType& df)
boost::math::detail::df_estimator::ratio	/usr/include/boost/math/distributions/chi_squared.hpp	/^   RealType ratio; \/\/ Difference from variance \/ variance, so fractional.$/;"	m	struct:boost::math::detail::df_estimator	access:private
boost::math::detail::didonato_FN	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^inline T didonato_FN(T p, T a, T x, unsigned N, T tolerance, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T p, T a, T x, unsigned N, T tolerance, const Policy& pol)
boost::math::detail::didonato_SN	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^T didonato_SN(T a, T x, unsigned N, T tolerance = 0)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, unsigned N, T tolerance = 0)
boost::math::detail::digamma_imp	/usr/include/boost/math/bindings/mpfr.hpp	/^mpfr_class digamma_imp(mpfr_class x, const mpl::int_<0>* , const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(mpfr_class x, const mpl::int_<0>* , const Policy& pol)
boost::math::detail::digamma_imp	/usr/include/boost/math/bindings/mpreal.hpp	/^mpfr::mpreal digamma_imp(mpfr::mpreal x, const mpl::int_<0>* , const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(mpfr::mpreal x, const mpl::int_<0>* , const Policy& pol)
boost::math::detail::digamma_imp	/usr/include/boost/math/bindings/rr.hpp	/^ntl::RR digamma_imp(ntl::RR x, const mpl::int_<0>* , const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(ntl::RR x, const mpl::int_<0>* , const Policy& pol)
boost::math::detail::digamma_imp	/usr/include/boost/math/special_functions/digamma.hpp	/^T digamma_imp(T x, const Tag* t, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Tag* t, const Policy& pol)
boost::math::detail::digamma_imp_1_2	/usr/include/boost/math/special_functions/digamma.hpp	/^T digamma_imp_1_2(T x, const mpl::int_<0>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<0>*)
boost::math::detail::digamma_imp_1_2	/usr/include/boost/math/special_functions/digamma.hpp	/^T digamma_imp_1_2(T x, const mpl::int_<53>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<53>*)
boost::math::detail::digamma_imp_1_2	/usr/include/boost/math/special_functions/digamma.hpp	/^T digamma_imp_1_2(T x, const mpl::int_<64>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<64>*)
boost::math::detail::digamma_imp_1_2	/usr/include/boost/math/special_functions/digamma.hpp	/^inline T digamma_imp_1_2(T x, const mpl::int_<24>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<24>*)
boost::math::detail::digamma_imp_large	/usr/include/boost/math/special_functions/digamma.hpp	/^inline T digamma_imp_large(T x, const mpl::int_<0>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<0>*)
boost::math::detail::digamma_imp_large	/usr/include/boost/math/special_functions/digamma.hpp	/^inline T digamma_imp_large(T x, const mpl::int_<24>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<24>*)
boost::math::detail::digamma_imp_large	/usr/include/boost/math/special_functions/digamma.hpp	/^inline T digamma_imp_large(T x, const mpl::int_<53>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<53>*)
boost::math::detail::digamma_imp_large	/usr/include/boost/math/special_functions/digamma.hpp	/^inline T digamma_imp_large(T x, const mpl::int_<64>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<64>*)
boost::math::detail::digamma_initializer	/usr/include/boost/math/special_functions/digamma.hpp	/^struct digamma_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::digamma_initializer::force_instantiate	/usr/include/boost/math/special_functions/digamma.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::digamma_initializer	access:public	signature:()
boost::math::detail::digamma_initializer::init	/usr/include/boost/math/special_functions/digamma.hpp	/^   struct init$/;"	s	struct:boost::math::detail::digamma_initializer	access:public
boost::math::detail::digamma_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/digamma.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::digamma_initializer::init	access:public	signature:() const
boost::math::detail::digamma_initializer::init::init	/usr/include/boost/math/special_functions/digamma.hpp	/^      init()$/;"	f	struct:boost::math::detail::digamma_initializer::init	access:public	signature:()
boost::math::detail::digamma_initializer::initializer	/usr/include/boost/math/special_functions/digamma.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::digamma_initializer	access:public
boost::math::detail::digamma_initializer::initializer	/usr/include/boost/math/special_functions/digamma.hpp	/^const typename digamma_initializer<T, Policy>::init digamma_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::digamma_initializer
boost::math::detail::digamma_large_lim	/usr/include/boost/math/special_functions/digamma.hpp	/^inline unsigned digamma_large_lim(const mpl::int_<0>*)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<0>*)
boost::math::detail::digamma_large_lim	/usr/include/boost/math/special_functions/digamma.hpp	/^inline unsigned digamma_large_lim(const void*)$/;"	f	namespace:boost::math::detail	signature:(const void*)
boost::math::detail::distribution_quantile_finder	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^struct distribution_quantile_finder$/;"	s	namespace:boost::math::detail
boost::math::detail::distribution_quantile_finder::comp	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   bool comp;$/;"	m	struct:boost::math::detail::distribution_quantile_finder	access:private
boost::math::detail::distribution_quantile_finder::dist	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   Dist dist;$/;"	m	struct:boost::math::detail::distribution_quantile_finder	access:private
boost::math::detail::distribution_quantile_finder::distribution_quantile_finder	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   distribution_quantile_finder(const Dist d, value_type p, value_type q)$/;"	f	struct:boost::math::detail::distribution_quantile_finder	access:public	signature:(const Dist d, value_type p, value_type q)
boost::math::detail::distribution_quantile_finder::operator ()	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   value_type operator()(value_type const& x)$/;"	f	struct:boost::math::detail::distribution_quantile_finder	access:public	signature:(value_type const& x)
boost::math::detail::distribution_quantile_finder::policy_type	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   typedef typename Dist::policy_type policy_type;$/;"	t	struct:boost::math::detail::distribution_quantile_finder	access:public
boost::math::detail::distribution_quantile_finder::target	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   value_type target;$/;"	m	struct:boost::math::detail::distribution_quantile_finder	access:private
boost::math::detail::distribution_quantile_finder::value_type	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   typedef typename Dist::value_type value_type;$/;"	t	struct:boost::math::detail::distribution_quantile_finder	access:public
boost::math::detail::do_inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   do_inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, typename Dist::value_type guess, const typename Dist::value_type& multiplier, typename Dist::value_type adder, const Tolerance& tol, boost::uintmax_t& max_iter)
boost::math::detail::double_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct double_precision {};$/;"	s	namespace:boost::math::detail
boost::math::detail::ellint_1	/usr/include/boost/math/special_functions/ellint_1.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_1(T1 k, T2 phi, const mpl::false_&)$/;"	f	namespace:boost::math::detail	signature:(T1 k, T2 phi, const mpl::false_&)
boost::math::detail::ellint_1	/usr/include/boost/math/special_functions/ellint_1.hpp	/^inline typename tools::promote_args<T>::type ellint_1(T k, const Policy& pol, const mpl::true_&)$/;"	f	namespace:boost::math::detail	signature:(T k, const Policy& pol, const mpl::true_&)
boost::math::detail::ellint_2	/usr/include/boost/math/special_functions/ellint_2.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_2(T1 k, T2 phi, const mpl::false_&)$/;"	f	namespace:boost::math::detail	signature:(T1 k, T2 phi, const mpl::false_&)
boost::math::detail::ellint_2	/usr/include/boost/math/special_functions/ellint_2.hpp	/^inline typename tools::promote_args<T>::type ellint_2(T k, const Policy& pol, const mpl::true_&)$/;"	f	namespace:boost::math::detail	signature:(T k, const Policy& pol, const mpl::true_&)
boost::math::detail::ellint_3	/usr/include/boost/math/special_functions/ellint_3.hpp	/^inline typename tools::promote_args<T1, T2, T3>::type ellint_3(T1 k, T2 v, T3 phi, const mpl::false_&)$/;"	f	namespace:boost::math::detail	signature:(T1 k, T2 v, T3 phi, const mpl::false_&)
boost::math::detail::ellint_3	/usr/include/boost/math/special_functions/ellint_3.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_3(T1 k, T2 v, const Policy& pol, const mpl::true_&)$/;"	f	namespace:boost::math::detail	signature:(T1 k, T2 v, const Policy& pol, const mpl::true_&)
boost::math::detail::ellint_3_result	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   struct ellint_3_result$/;"	s	namespace:boost::math::detail
boost::math::detail::ellint_3_result::type	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      >::type type;$/;"	t	struct:boost::math::detail::ellint_3_result	access:public
boost::math::detail::ellint_e_imp	/usr/include/boost/math/special_functions/ellint_2.hpp	/^T ellint_e_imp(T k, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T k, const Policy& pol)
boost::math::detail::ellint_e_imp	/usr/include/boost/math/special_functions/ellint_2.hpp	/^T ellint_e_imp(T k, const Policy& pol);$/;"	p	namespace:boost::math::detail	signature:(T k, const Policy& pol)
boost::math::detail::ellint_e_imp	/usr/include/boost/math/special_functions/ellint_2.hpp	/^T ellint_e_imp(T phi, T k, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T phi, T k, const Policy& pol)
boost::math::detail::ellint_f_imp	/usr/include/boost/math/special_functions/ellint_1.hpp	/^T ellint_f_imp(T phi, T k, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T phi, T k, const Policy& pol)
boost::math::detail::ellint_k_imp	/usr/include/boost/math/special_functions/ellint_1.hpp	/^T ellint_k_imp(T k, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T k, const Policy& pol)
boost::math::detail::ellint_k_imp	/usr/include/boost/math/special_functions/ellint_1.hpp	/^T ellint_k_imp(T k, const Policy& pol);$/;"	p	namespace:boost::math::detail	signature:(T k, const Policy& pol)
boost::math::detail::ellint_pi_imp	/usr/include/boost/math/special_functions/ellint_3.hpp	/^T ellint_pi_imp(T v, T k, T vc, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T k, T vc, const Policy& pol)
boost::math::detail::ellint_pi_imp	/usr/include/boost/math/special_functions/ellint_3.hpp	/^T ellint_pi_imp(T v, T k, T vc, const Policy& pol);$/;"	p	namespace:boost::math::detail	signature:(T v, T k, T vc, const Policy& pol)
boost::math::detail::ellint_pi_imp	/usr/include/boost/math/special_functions/ellint_3.hpp	/^T ellint_pi_imp(T v, T phi, T k, T vc, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T phi, T k, T vc, const Policy& pol)
boost::math::detail::ellint_rc_imp	/usr/include/boost/math/special_functions/ellint_rc.hpp	/^T ellint_rc_imp(T x, T y, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, T y, const Policy& pol)
boost::math::detail::ellint_rd_imp	/usr/include/boost/math/special_functions/ellint_rd.hpp	/^T ellint_rd_imp(T x, T y, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, T y, T z, const Policy& pol)
boost::math::detail::ellint_rf_imp	/usr/include/boost/math/special_functions/ellint_rf.hpp	/^T ellint_rf_imp(T x, T y, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, T y, T z, const Policy& pol)
boost::math::detail::ellint_rj_imp	/usr/include/boost/math/special_functions/ellint_rj.hpp	/^T ellint_rj_imp(T x, T y, T z, T p, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, T y, T z, T p, const Policy& pol)
boost::math::detail::erf_asympt_series_t	/usr/include/boost/math/special_functions/erf.hpp	/^struct erf_asympt_series_t$/;"	s	namespace:boost::math::detail
boost::math::detail::erf_asympt_series_t::erf_asympt_series_t	/usr/include/boost/math/special_functions/erf.hpp	/^   erf_asympt_series_t(T z) : xx(2 * -z * z), tk(1)$/;"	f	struct:boost::math::detail::erf_asympt_series_t	access:public	signature:(T z)
boost::math::detail::erf_asympt_series_t::operator ()	/usr/include/boost/math/special_functions/erf.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::erf_asympt_series_t	access:public	signature:()
boost::math::detail::erf_asympt_series_t::result	/usr/include/boost/math/special_functions/erf.hpp	/^   T result;$/;"	m	struct:boost::math::detail::erf_asympt_series_t	access:private
boost::math::detail::erf_asympt_series_t::result_type	/usr/include/boost/math/special_functions/erf.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::erf_asympt_series_t	access:public
boost::math::detail::erf_asympt_series_t::tk	/usr/include/boost/math/special_functions/erf.hpp	/^   int tk;$/;"	m	struct:boost::math::detail::erf_asympt_series_t	access:private
boost::math::detail::erf_asympt_series_t::xx	/usr/include/boost/math/special_functions/erf.hpp	/^   T xx;$/;"	m	struct:boost::math::detail::erf_asympt_series_t	access:private
boost::math::detail::erf_asymptotic_limit	/usr/include/boost/math/special_functions/erf.hpp	/^inline T erf_asymptotic_limit()$/;"	f	namespace:boost::math::detail	signature:()
boost::math::detail::erf_asymptotic_limit_N	/usr/include/boost/math/special_functions/erf.hpp	/^inline float erf_asymptotic_limit_N(const T&)$/;"	f	namespace:boost::math::detail	signature:(const T&)
boost::math::detail::erf_asymptotic_limit_N	/usr/include/boost/math/special_functions/erf.hpp	/^inline float erf_asymptotic_limit_N(const mpl::int_<106>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<106>&)
boost::math::detail::erf_asymptotic_limit_N	/usr/include/boost/math/special_functions/erf.hpp	/^inline float erf_asymptotic_limit_N(const mpl::int_<113>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<113>&)
boost::math::detail::erf_asymptotic_limit_N	/usr/include/boost/math/special_functions/erf.hpp	/^inline float erf_asymptotic_limit_N(const mpl::int_<24>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<24>&)
boost::math::detail::erf_asymptotic_limit_N	/usr/include/boost/math/special_functions/erf.hpp	/^inline float erf_asymptotic_limit_N(const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<53>&)
boost::math::detail::erf_asymptotic_limit_N	/usr/include/boost/math/special_functions/erf.hpp	/^inline float erf_asymptotic_limit_N(const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<64>&)
boost::math::detail::erf_imp	/usr/include/boost/math/special_functions/erf.hpp	/^T erf_imp(T z, bool invert, const Policy& pol, const Tag& t)$/;"	f	namespace:boost::math::detail	signature:(T z, bool invert, const Policy& pol, const Tag& t)
boost::math::detail::erf_imp	/usr/include/boost/math/special_functions/erf.hpp	/^T erf_imp(T z, bool invert, const Policy& pol, const mpl::int_<113>& t)$/;"	f	namespace:boost::math::detail	signature:(T z, bool invert, const Policy& pol, const mpl::int_<113>& t)
boost::math::detail::erf_imp	/usr/include/boost/math/special_functions/erf.hpp	/^T erf_imp(T z, bool invert, const Policy& pol, const mpl::int_<53>& t)$/;"	f	namespace:boost::math::detail	signature:(T z, bool invert, const Policy& pol, const mpl::int_<53>& t)
boost::math::detail::erf_imp	/usr/include/boost/math/special_functions/erf.hpp	/^T erf_imp(T z, bool invert, const Policy& pol, const mpl::int_<64>& t)$/;"	f	namespace:boost::math::detail	signature:(T z, bool invert, const Policy& pol, const mpl::int_<64>& t)
boost::math::detail::erf_initializer	/usr/include/boost/math/special_functions/erf.hpp	/^struct erf_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::erf_initializer::force_instantiate	/usr/include/boost/math/special_functions/erf.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::erf_initializer	access:public	signature:()
boost::math::detail::erf_initializer::init	/usr/include/boost/math/special_functions/erf.hpp	/^   struct init$/;"	s	struct:boost::math::detail::erf_initializer	access:public
boost::math::detail::erf_initializer::init::do_init	/usr/include/boost/math/special_functions/erf.hpp	/^      static void do_init(const mpl::int_<0>&){}$/;"	f	struct:boost::math::detail::erf_initializer::init	access:public	signature:(const mpl::int_<0>&)
boost::math::detail::erf_initializer::init::do_init	/usr/include/boost/math/special_functions/erf.hpp	/^      static void do_init(const mpl::int_<113>&)$/;"	f	struct:boost::math::detail::erf_initializer::init	access:public	signature:(const mpl::int_<113>&)
boost::math::detail::erf_initializer::init::do_init	/usr/include/boost/math/special_functions/erf.hpp	/^      static void do_init(const mpl::int_<53>&)$/;"	f	struct:boost::math::detail::erf_initializer::init	access:public	signature:(const mpl::int_<53>&)
boost::math::detail::erf_initializer::init::do_init	/usr/include/boost/math/special_functions/erf.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::erf_initializer::init	access:public	signature:(const mpl::int_<64>&)
boost::math::detail::erf_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/erf.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::erf_initializer::init	access:public	signature:() const
boost::math::detail::erf_initializer::init::init	/usr/include/boost/math/special_functions/erf.hpp	/^      init()$/;"	f	struct:boost::math::detail::erf_initializer::init	access:public	signature:()
boost::math::detail::erf_initializer::initializer	/usr/include/boost/math/special_functions/erf.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::erf_initializer	access:public
boost::math::detail::erf_initializer::initializer	/usr/include/boost/math/special_functions/erf.hpp	/^const typename erf_initializer<T, Policy, tag>::init erf_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::erf_initializer
boost::math::detail::erf_inv_imp	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class erf_inv_imp(const mpfr_class& p, const mpfr_class& q, const Policy&, const boost::mpl::int_<64>*)$/;"	f	namespace:boost::math::detail	signature:(const mpfr_class& p, const mpfr_class& q, const Policy&, const boost::mpl::int_<64>*)
boost::math::detail::erf_inv_imp	/usr/include/boost/math/bindings/mpreal.hpp	/^mpfr::mpreal erf_inv_imp(const mpfr::mpreal& p, const mpfr::mpreal& q, const Policy&, const boost::mpl::int_<64>*)$/;"	f	namespace:boost::math::detail	signature:(const mpfr::mpreal& p, const mpfr::mpreal& q, const Policy&, const boost::mpl::int_<64>*)
boost::math::detail::erf_inv_imp	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^T erf_inv_imp(const T& p, const T& q, const Policy& pol, const boost::mpl::int_<0>*)$/;"	f	namespace:boost::math::detail	signature:(const T& p, const T& q, const Policy& pol, const boost::mpl::int_<0>*)
boost::math::detail::erf_inv_imp	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^T erf_inv_imp(const T& p, const T& q, const Policy&, const boost::mpl::int_<64>*)$/;"	f	namespace:boost::math::detail	signature:(const T& p, const T& q, const Policy&, const boost::mpl::int_<64>*)
boost::math::detail::erf_inv_initializer	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^struct erf_inv_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::erf_inv_initializer::force_instantiate	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::erf_inv_initializer	access:public	signature:()
boost::math::detail::erf_inv_initializer::init	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   struct init$/;"	s	struct:boost::math::detail::erf_inv_initializer	access:public
boost::math::detail::erf_inv_initializer::init::do_init	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::erf_inv_initializer::init	access:public	signature:()
boost::math::detail::erf_inv_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::erf_inv_initializer::init	access:public	signature:() const
boost::math::detail::erf_inv_initializer::init::init	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^      init()$/;"	f	struct:boost::math::detail::erf_inv_initializer::init	access:public	signature:()
boost::math::detail::erf_inv_initializer::initializer	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::erf_inv_initializer	access:public
boost::math::detail::erf_inv_initializer::initializer	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^const typename erf_inv_initializer<T, Policy>::init erf_inv_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::erf_inv_initializer
boost::math::detail::erf_roots	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^struct erf_roots$/;"	s	namespace:boost::math::detail
boost::math::detail::erf_roots::erf_roots	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   erf_roots(T z, int s) : target(z), sign(s) {}$/;"	f	struct:boost::math::detail::erf_roots	access:public	signature:(T z, int s)
boost::math::detail::erf_roots::operator ()	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   boost::math::tuple<T,T,T> operator()(const T& guess)$/;"	f	struct:boost::math::detail::erf_roots	access:public	signature:(const T& guess)
boost::math::detail::erf_roots::sign	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   int sign;$/;"	m	struct:boost::math::detail::erf_roots	access:private
boost::math::detail::erf_roots::target	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   T target;$/;"	m	struct:boost::math::detail::erf_roots	access:private
boost::math::detail::expint_1_initializer	/usr/include/boost/math/special_functions/expint.hpp	/^struct expint_1_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::expint_1_initializer::force_instantiate	/usr/include/boost/math/special_functions/expint.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::expint_1_initializer	access:public	signature:()
boost::math::detail::expint_1_initializer::init	/usr/include/boost/math/special_functions/expint.hpp	/^   struct init$/;"	s	struct:boost::math::detail::expint_1_initializer	access:public
boost::math::detail::expint_1_initializer::init::do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<0>&){}$/;"	f	struct:boost::math::detail::expint_1_initializer::init	access:public	signature:(const mpl::int_<0>&)
boost::math::detail::expint_1_initializer::init::do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<113>&)$/;"	f	struct:boost::math::detail::expint_1_initializer::init	access:public	signature:(const mpl::int_<113>&)
boost::math::detail::expint_1_initializer::init::do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<53>&)$/;"	f	struct:boost::math::detail::expint_1_initializer::init	access:public	signature:(const mpl::int_<53>&)
boost::math::detail::expint_1_initializer::init::do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::expint_1_initializer::init	access:public	signature:(const mpl::int_<64>&)
boost::math::detail::expint_1_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/expint.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::expint_1_initializer::init	access:public	signature:() const
boost::math::detail::expint_1_initializer::init::init	/usr/include/boost/math/special_functions/expint.hpp	/^      init()$/;"	f	struct:boost::math::detail::expint_1_initializer::init	access:public	signature:()
boost::math::detail::expint_1_initializer::initializer	/usr/include/boost/math/special_functions/expint.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::expint_1_initializer	access:public
boost::math::detail::expint_1_initializer::initializer	/usr/include/boost/math/special_functions/expint.hpp	/^const typename expint_1_initializer<T, Policy, tag>::init expint_1_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::expint_1_initializer
boost::math::detail::expint_1_rational	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_1_rational(const T& z, const mpl::int_<113>&)$/;"	f	namespace:boost::math::detail	signature:(const T& z, const mpl::int_<113>&)
boost::math::detail::expint_1_rational	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_1_rational(const T& z, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const T& z, const mpl::int_<53>&)
boost::math::detail::expint_1_rational	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_1_rational(const T& z, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const T& z, const mpl::int_<64>&)
boost::math::detail::expint_1_rational	/usr/include/boost/math/special_functions/expint.hpp	/^inline T expint_1_rational(const T& z, const mpl::int_<0>&)$/;"	f	namespace:boost::math::detail	signature:(const T& z, const mpl::int_<0>&)
boost::math::detail::expint_as_fraction	/usr/include/boost/math/special_functions/expint.hpp	/^inline T expint_as_fraction(unsigned n, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T z, const Policy& pol)
boost::math::detail::expint_as_series	/usr/include/boost/math/special_functions/expint.hpp	/^inline T expint_as_series(unsigned n, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T z, const Policy& pol)
boost::math::detail::expint_forwarder	/usr/include/boost/math/special_functions/expint.hpp	/^   expint_forwarder(T z, const Policy& \/*pol*\/, mpl::true_ const&)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& , mpl::true_ const&)
boost::math::detail::expint_forwarder	/usr/include/boost/math/special_functions/expint.hpp	/^expint_forwarder(unsigned n, T z, const mpl::false_&)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T z, const mpl::false_&)
boost::math::detail::expint_fraction	/usr/include/boost/math/special_functions/expint.hpp	/^struct expint_fraction$/;"	s	namespace:boost::math::detail
boost::math::detail::expint_fraction::b	/usr/include/boost/math/special_functions/expint.hpp	/^   T b;$/;"	m	struct:boost::math::detail::expint_fraction	access:private
boost::math::detail::expint_fraction::expint_fraction	/usr/include/boost/math/special_functions/expint.hpp	/^   expint_fraction(unsigned n_, T z_) : b(n_ + z_), i(-1), n(n_){}$/;"	f	struct:boost::math::detail::expint_fraction	access:public	signature:(unsigned n_, T z_)
boost::math::detail::expint_fraction::i	/usr/include/boost/math/special_functions/expint.hpp	/^   int i;$/;"	m	struct:boost::math::detail::expint_fraction	access:private
boost::math::detail::expint_fraction::n	/usr/include/boost/math/special_functions/expint.hpp	/^   unsigned n;$/;"	m	struct:boost::math::detail::expint_fraction	access:private
boost::math::detail::expint_fraction::operator ()	/usr/include/boost/math/special_functions/expint.hpp	/^   std::pair<T,T> operator()()$/;"	f	struct:boost::math::detail::expint_fraction	access:public	signature:()
boost::math::detail::expint_fraction::result_type	/usr/include/boost/math/special_functions/expint.hpp	/^   typedef std::pair<T,T> result_type;$/;"	t	struct:boost::math::detail::expint_fraction	access:public
boost::math::detail::expint_i_113b	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113b(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
boost::math::detail::expint_i_113c	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113c(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
boost::math::detail::expint_i_113d	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113d(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
boost::math::detail::expint_i_113e	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113e(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
boost::math::detail::expint_i_113f	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113f(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
boost::math::detail::expint_i_113g	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113g(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
boost::math::detail::expint_i_113h	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113h(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
boost::math::detail::expint_i_as_series	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_i_as_series(T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol)
boost::math::detail::expint_i_imp	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_i_imp(T z, const Policy& pol, const Tag& tag)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const Tag& tag)
boost::math::detail::expint_i_imp	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_i_imp(T z, const Policy& pol, const mpl::int_<113>& tag)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const mpl::int_<113>& tag)
boost::math::detail::expint_i_imp	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_i_imp(T z, const Policy& pol, const mpl::int_<53>& tag)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const mpl::int_<53>& tag)
boost::math::detail::expint_i_imp	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_i_imp(T z, const Policy& pol, const mpl::int_<64>& tag)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const mpl::int_<64>& tag)
boost::math::detail::expint_i_imp_113a	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_imp_113a(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
boost::math::detail::expint_i_initializer	/usr/include/boost/math/special_functions/expint.hpp	/^struct expint_i_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::expint_i_initializer::force_instantiate	/usr/include/boost/math/special_functions/expint.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::expint_i_initializer	access:public	signature:()
boost::math::detail::expint_i_initializer::init	/usr/include/boost/math/special_functions/expint.hpp	/^   struct init$/;"	s	struct:boost::math::detail::expint_i_initializer	access:public
boost::math::detail::expint_i_initializer::init::do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<0>&){}$/;"	f	struct:boost::math::detail::expint_i_initializer::init	access:public	signature:(const mpl::int_<0>&)
boost::math::detail::expint_i_initializer::init::do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<113>&)$/;"	f	struct:boost::math::detail::expint_i_initializer::init	access:public	signature:(const mpl::int_<113>&)
boost::math::detail::expint_i_initializer::init::do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<53>&)$/;"	f	struct:boost::math::detail::expint_i_initializer::init	access:public	signature:(const mpl::int_<53>&)
boost::math::detail::expint_i_initializer::init::do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::expint_i_initializer::init	access:public	signature:(const mpl::int_<64>&)
boost::math::detail::expint_i_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/expint.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::expint_i_initializer::init	access:public	signature:() const
boost::math::detail::expint_i_initializer::init::init	/usr/include/boost/math/special_functions/expint.hpp	/^      init()$/;"	f	struct:boost::math::detail::expint_i_initializer::init	access:public	signature:()
boost::math::detail::expint_i_initializer::initializer	/usr/include/boost/math/special_functions/expint.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::expint_i_initializer	access:public
boost::math::detail::expint_i_initializer::initializer	/usr/include/boost/math/special_functions/expint.hpp	/^const typename expint_i_initializer<T, Policy, tag>::init expint_i_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::expint_i_initializer
boost::math::detail::expint_i_series	/usr/include/boost/math/special_functions/expint.hpp	/^struct expint_i_series$/;"	s	namespace:boost::math::detail
boost::math::detail::expint_i_series::expint_i_series	/usr/include/boost/math/special_functions/expint.hpp	/^   expint_i_series(T z_) : k(0), z_k(1), z(z_){}$/;"	f	struct:boost::math::detail::expint_i_series	access:public	signature:(T z_)
boost::math::detail::expint_i_series::k	/usr/include/boost/math/special_functions/expint.hpp	/^   unsigned k;$/;"	m	struct:boost::math::detail::expint_i_series	access:private
boost::math::detail::expint_i_series::operator ()	/usr/include/boost/math/special_functions/expint.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::expint_i_series	access:public	signature:()
boost::math::detail::expint_i_series::result_type	/usr/include/boost/math/special_functions/expint.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::expint_i_series	access:public
boost::math::detail::expint_i_series::z	/usr/include/boost/math/special_functions/expint.hpp	/^   T z;$/;"	m	struct:boost::math::detail::expint_i_series	access:private
boost::math::detail::expint_i_series::z_k	/usr/include/boost/math/special_functions/expint.hpp	/^   T z_k;$/;"	m	struct:boost::math::detail::expint_i_series	access:private
boost::math::detail::expint_imp	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_imp(unsigned n, T z, const Policy& pol, const Tag& tag)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T z, const Policy& pol, const Tag& tag)
boost::math::detail::expint_result	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   struct expint_result$/;"	s	namespace:boost::math::detail
boost::math::detail::expint_result::type	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      >::type type;$/;"	t	struct:boost::math::detail::expint_result	access:public
boost::math::detail::expint_series	/usr/include/boost/math/special_functions/expint.hpp	/^struct expint_series$/;"	s	namespace:boost::math::detail
boost::math::detail::expint_series::denom	/usr/include/boost/math/special_functions/expint.hpp	/^   T denom;$/;"	m	struct:boost::math::detail::expint_series	access:private
boost::math::detail::expint_series::expint_series	/usr/include/boost/math/special_functions/expint.hpp	/^   expint_series(unsigned k_, T z_, T x_k_, T denom_, T fact_) $/;"	f	struct:boost::math::detail::expint_series	access:public	signature:(unsigned k_, T z_, T x_k_, T denom_, T fact_)
boost::math::detail::expint_series::fact	/usr/include/boost/math/special_functions/expint.hpp	/^   T fact;$/;"	m	struct:boost::math::detail::expint_series	access:private
boost::math::detail::expint_series::k	/usr/include/boost/math/special_functions/expint.hpp	/^   unsigned k;$/;"	m	struct:boost::math::detail::expint_series	access:private
boost::math::detail::expint_series::operator ()	/usr/include/boost/math/special_functions/expint.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::expint_series	access:public	signature:()
boost::math::detail::expint_series::result_type	/usr/include/boost/math/special_functions/expint.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::expint_series	access:public
boost::math::detail::expint_series::x_k	/usr/include/boost/math/special_functions/expint.hpp	/^   T x_k;$/;"	m	struct:boost::math::detail::expint_series	access:private
boost::math::detail::expint_series::z	/usr/include/boost/math/special_functions/expint.hpp	/^   T z;$/;"	m	struct:boost::math::detail::expint_series	access:private
boost::math::detail::expm1_imp	/usr/include/boost/math/special_functions/expm1.hpp	/^T expm1_imp(T x, const mpl::int_<0>&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<0>&, const Policy& pol)
boost::math::detail::expm1_imp	/usr/include/boost/math/special_functions/expm1.hpp	/^T expm1_imp(T x, const mpl::int_<113>&, const P& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<113>&, const P& pol)
boost::math::detail::expm1_imp	/usr/include/boost/math/special_functions/expm1.hpp	/^T expm1_imp(T x, const mpl::int_<53>&, const P& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<53>&, const P& pol)
boost::math::detail::expm1_imp	/usr/include/boost/math/special_functions/expm1.hpp	/^T expm1_imp(T x, const mpl::int_<64>&, const P& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<64>&, const P& pol)
boost::math::detail::expm1_initializer	/usr/include/boost/math/special_functions/expm1.hpp	/^struct expm1_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::expm1_initializer::force_instantiate	/usr/include/boost/math/special_functions/expm1.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::expm1_initializer	access:public	signature:()
boost::math::detail::expm1_initializer::init	/usr/include/boost/math/special_functions/expm1.hpp	/^   struct init$/;"	s	struct:boost::math::detail::expm1_initializer	access:public
boost::math::detail::expm1_initializer::init::do_init	/usr/include/boost/math/special_functions/expm1.hpp	/^      static void do_init(const mpl::int_<113>&)$/;"	f	struct:boost::math::detail::expm1_initializer::init	access:public	signature:(const mpl::int_<113>&)
boost::math::detail::expm1_initializer::init::do_init	/usr/include/boost/math/special_functions/expm1.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::expm1_initializer::init	access:public	signature:(const mpl::int_<64>&)
boost::math::detail::expm1_initializer::init::do_init	/usr/include/boost/math/special_functions/expm1.hpp	/^      static void do_init(const mpl::int_<N>&){}$/;"	f	struct:boost::math::detail::expm1_initializer::init	access:public	signature:(const mpl::int_<N>&)
boost::math::detail::expm1_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/expm1.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::expm1_initializer::init	access:public	signature:() const
boost::math::detail::expm1_initializer::init::init	/usr/include/boost/math/special_functions/expm1.hpp	/^      init()$/;"	f	struct:boost::math::detail::expm1_initializer::init	access:public	signature:()
boost::math::detail::expm1_initializer::initializer	/usr/include/boost/math/special_functions/expm1.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::expm1_initializer	access:public
boost::math::detail::expm1_initializer::initializer	/usr/include/boost/math/special_functions/expm1.hpp	/^const typename expm1_initializer<T, Policy, tag>::init expm1_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::expm1_initializer
boost::math::detail::expm1_series	/usr/include/boost/math/special_functions/expm1.hpp	/^  struct expm1_series$/;"	s	namespace:boost::math::detail
boost::math::detail::expm1_series::count	/usr/include/boost/math/special_functions/expm1.hpp	/^     int count()const$/;"	f	struct:boost::math::detail::expm1_series	access:public	signature:() const
boost::math::detail::expm1_series::expm1_series	/usr/include/boost/math/special_functions/expm1.hpp	/^     expm1_series(T x)$/;"	f	struct:boost::math::detail::expm1_series	access:public	signature:(T x)
boost::math::detail::expm1_series::expm1_series	/usr/include/boost/math/special_functions/expm1.hpp	/^     expm1_series(const expm1_series&);$/;"	p	struct:boost::math::detail::expm1_series	access:private	signature:(const expm1_series&)
boost::math::detail::expm1_series::k	/usr/include/boost/math/special_functions/expm1.hpp	/^     int k;$/;"	m	struct:boost::math::detail::expm1_series	access:private
boost::math::detail::expm1_series::m_term	/usr/include/boost/math/special_functions/expm1.hpp	/^     T m_term;$/;"	m	struct:boost::math::detail::expm1_series	access:private
boost::math::detail::expm1_series::m_x	/usr/include/boost/math/special_functions/expm1.hpp	/^     const T m_x;$/;"	m	struct:boost::math::detail::expm1_series	access:private
boost::math::detail::expm1_series::operator ()	/usr/include/boost/math/special_functions/expm1.hpp	/^     T operator()()$/;"	f	struct:boost::math::detail::expm1_series	access:public	signature:()
boost::math::detail::expm1_series::operator =	/usr/include/boost/math/special_functions/expm1.hpp	/^     expm1_series& operator=(const expm1_series&);$/;"	p	struct:boost::math::detail::expm1_series	access:private	signature:(const expm1_series&)
boost::math::detail::expm1_series::result_type	/usr/include/boost/math/special_functions/expm1.hpp	/^     typedef T result_type;$/;"	t	struct:boost::math::detail::expm1_series	access:public
boost::math::detail::extended_double_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct extended_double_precision {};$/;"	s	namespace:boost::math::detail
boost::math::detail::falling_factorial_imp	/usr/include/boost/math/special_functions/factorials.hpp	/^inline T falling_factorial_imp(T x, unsigned n, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, unsigned n, const Policy& pol)
boost::math::detail::fast_students_t_quantile	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^inline T fast_students_t_quantile(T df, T p, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T df, T p, const Policy& pol)
boost::math::detail::fast_students_t_quantile_imp	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^T fast_students_t_quantile_imp(T df, T p, const Policy& pol, const mpl::true_*)$/;"	f	namespace:boost::math::detail	signature:(T df, T p, const Policy& pol, const mpl::true_*)
boost::math::detail::fast_students_t_quantile_imp	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^inline T fast_students_t_quantile_imp(T df, T p, const Policy& pol, const mpl::false_*)$/;"	f	namespace:boost::math::detail	signature:(T df, T p, const Policy& pol, const mpl::false_*)
boost::math::detail::find_degrees_of_freedom	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         inline RealType find_degrees_of_freedom($/;"	f	namespace:boost::math::detail	signature:( RealType lam, RealType x, RealType p, RealType q, const Policy& pol)
boost::math::detail::find_ibeta_inv_from_t_dist	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^inline T find_ibeta_inv_from_t_dist(T a, T p, T q, T* py, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T p, T q, T* py, const Policy& pol)
boost::math::detail::find_inverse_gamma	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^T find_inverse_gamma(T a, T p, T q, const Policy& pol, bool* p_has_10_digits)$/;"	f	namespace:boost::math::detail	signature:(T a, T p, T q, const Policy& pol, bool* p_has_10_digits)
boost::math::detail::find_inverse_s	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^T find_inverse_s(T p, T q)$/;"	f	namespace:boost::math::detail	signature:(T p, T q)
boost::math::detail::find_non_centrality	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         inline RealType find_non_centrality($/;"	f	namespace:boost::math::detail	signature:( RealType v, RealType x, RealType p, RealType q, const Policy& pol)
boost::math::detail::finite_gamma_q	/usr/include/boost/math/special_functions/gamma.hpp	/^inline T finite_gamma_q(T a, T x, Policy const& pol, T* pderivative = 0)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, Policy const& pol, T* pderivative = 0)
boost::math::detail::finite_half_gamma_q	/usr/include/boost/math/special_functions/gamma.hpp	/^T finite_half_gamma_q(T a, T x, T* p_derivative, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, T* p_derivative, const Policy& pol)
boost::math::detail::fp_traits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<class T> struct fp_traits$/;"	s	namespace:boost::math::detail
boost::math::detail::fp_traits::precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef BOOST_DEDUCED_TYPENAME size_to_precision<sizeof(T), ::boost::is_floating_point<T>::value>::type precision;$/;"	t	struct:boost::math::detail::fp_traits	access:public
boost::math::detail::fp_traits::sign_change_type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef fp_traits_non_native<T, precision> sign_change_type;$/;"	t	struct:boost::math::detail::fp_traits	access:public
boost::math::detail::fp_traits::type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef fp_traits_non_native<T, precision> type;$/;"	t	struct:boost::math::detail::fp_traits	access:public
boost::math::detail::fp_traits::type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef typename select_native<T>::type type;$/;"	t	struct:boost::math::detail::fp_traits	access:public
boost::math::detail::fp_traits_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<class T> struct fp_traits_native$/;"	s	namespace:boost::math::detail
boost::math::detail::fp_traits_native::method	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef native_tag method;$/;"	t	struct:boost::math::detail::fp_traits_native	access:public
boost::math::detail::fp_traits_non_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct fp_traits_non_native<long double, extended_double_precision>$/;"	s	namespace:boost::math::detail
boost::math::detail::fp_traits_non_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct fp_traits_non_native<double, double_precision>$/;"	s	namespace:boost::math::detail
boost::math::detail::fp_traits_non_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct fp_traits_non_native<float, single_precision>$/;"	s	namespace:boost::math::detail
boost::math::detail::fp_traits_non_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct fp_traits_non_native<long double, double_precision>$/;"	s	namespace:boost::math::detail
boost::math::detail::fp_traits_non_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<class T, class U> struct fp_traits_non_native$/;"	s	namespace:boost::math::detail
boost::math::detail::fp_traits_non_native::BOOST_STATIC_ASSERT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_ASSERT(false);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:private	signature:(false)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(int, offset_ = 0);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:private	signature:(int, offset_ = 0)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(int, offset_ = 12);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:private	signature:(int, offset_ = 12)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(int, offset_ = 4);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:private	signature:(int, offset_ = 4)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, exponent    = 0x7f800000);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, exponent = 0x7f800000)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, exponent    = 0x7ff00000);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, exponent = 0x7ff00000)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, exponent    = 0x7fff0000);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, exponent = 0x7fff0000)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, flag        = 0);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, flag = 0)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, flag        = 0x00000000);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, flag = 0x00000000)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, flag        = 0x00008000);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, flag = 0x00008000)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, sign        = 0x80000000u);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, sign = 0x80000000u)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, significand = 0x00007fff);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, significand = 0x00007fff)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, significand = 0x0000ffff);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, significand = 0x0000ffff)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, significand = 0x000fffff);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, significand = 0x000fffff)
boost::math::detail::fp_traits_non_native::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    BOOST_STATIC_CONSTANT(uint32_t, significand = 0x007fffff);$/;"	p	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(uint32_t, significand = 0x007fffff)
boost::math::detail::fp_traits_non_native::bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef uint32_t bits;$/;"	t	struct:boost::math::detail::fp_traits_non_native	access:public
boost::math::detail::fp_traits_non_native::bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef uint64_t bits;$/;"	t	struct:boost::math::detail::fp_traits_non_native	access:public
boost::math::detail::fp_traits_non_native::exponent	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static const uint64_t exponent = ((uint64_t)0x7ff00000) << 32;$/;"	m	struct:boost::math::detail::fp_traits_non_native	access:public
boost::math::detail::fp_traits_non_native::exponent	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static const uint64_t exponent = (uint64_t)0x7ff00000 << 32;$/;"	m	struct:boost::math::detail::fp_traits_non_native	access:public
boost::math::detail::fp_traits_non_native::flag	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static const uint64_t flag     = 0;$/;"	m	struct:boost::math::detail::fp_traits_non_native	access:public
boost::math::detail::fp_traits_non_native::get_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void get_bits(double x, uint32_t& a)$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(double x, uint32_t& a)
boost::math::detail::fp_traits_non_native::get_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void get_bits(double x, uint64_t& a) { std::memcpy(&a, &x, 8); }$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(double x, uint64_t& a)
boost::math::detail::fp_traits_non_native::get_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void get_bits(float x, uint32_t& a) { std::memcpy(&a, &x, 4); }$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(float x, uint32_t& a)
boost::math::detail::fp_traits_non_native::get_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void get_bits(long double x, uint32_t& a)$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(long double x, uint32_t& a)
boost::math::detail::fp_traits_non_native::get_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void get_bits(long double x, uint64_t& a) { std::memcpy(&a, &x, 8); }$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(long double x, uint64_t& a)
boost::math::detail::fp_traits_non_native::method	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef ieee_copy_all_bits_tag method;$/;"	t	struct:boost::math::detail::fp_traits_non_native	access:public
boost::math::detail::fp_traits_non_native::method	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef ieee_copy_leading_bits_tag method;$/;"	t	struct:boost::math::detail::fp_traits_non_native	access:public
boost::math::detail::fp_traits_non_native::method	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^   typedef generic_tag<std::numeric_limits<T>::is_specialized> method;$/;"	t	struct:boost::math::detail::fp_traits_non_native	access:public
boost::math::detail::fp_traits_non_native::set_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void set_bits(double& x, uint32_t a)$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(double& x, uint32_t a)
boost::math::detail::fp_traits_non_native::set_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void set_bits(double& x, uint64_t a) { std::memcpy(&x, &a, 8); }$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(double& x, uint64_t a)
boost::math::detail::fp_traits_non_native::set_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void set_bits(float& x, uint32_t a) { std::memcpy(&x, &a, 4); }$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(float& x, uint32_t a)
boost::math::detail::fp_traits_non_native::set_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void set_bits(long double& x, uint32_t a)$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(long double& x, uint32_t a)
boost::math::detail::fp_traits_non_native::set_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void set_bits(long double& x, uint64_t a) { std::memcpy(&x, &a, 8); }$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(long double& x, uint64_t a)
boost::math::detail::fp_traits_non_native::sign	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static const uint64_t sign     = ((uint64_t)0x80000000u) << 32;$/;"	m	struct:boost::math::detail::fp_traits_non_native	access:public
boost::math::detail::fp_traits_non_native::sign	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static const uint64_t sign     = (uint64_t)0x80000000u << 32;$/;"	m	struct:boost::math::detail::fp_traits_non_native	access:public
boost::math::detail::fp_traits_non_native::significand	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static const uint64_t significand$/;"	m	struct:boost::math::detail::fp_traits_non_native	access:public
boost::math::detail::fpu_guard	/usr/include/boost/math/tools/config.hpp	/^   struct fpu_guard$/;"	s	namespace:boost::math::detail
boost::math::detail::fpu_guard::fpu_guard	/usr/include/boost/math/tools/config.hpp	/^      fpu_guard()$/;"	f	struct:boost::math::detail::fpu_guard	access:public	signature:()
boost::math::detail::fpu_guard::m_flags	/usr/include/boost/math/tools/config.hpp	/^      fexcept_t m_flags;$/;"	m	struct:boost::math::detail::fpu_guard	access:private
boost::math::detail::fpu_guard::~fpu_guard	/usr/include/boost/math/tools/config.hpp	/^      ~fpu_guard()$/;"	f	struct:boost::math::detail::fpu_guard	access:public	signature:()
boost::math::detail::full_igamma_prefix	/usr/include/boost/math/special_functions/gamma.hpp	/^T full_igamma_prefix(T a, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T z, const Policy& pol)
boost::math::detail::gamma_imp	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^T gamma_imp(T z, const Policy& pol, const Lanczos& l);$/;"	p	namespace:boost::math::detail	signature:(T z, const Policy& pol, const Lanczos& l)
boost::math::detail::gamma_imp	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^T gamma_imp(T z, const Policy& pol, const lanczos::undefined_lanczos& l);$/;"	p	namespace:boost::math::detail	signature:(T z, const Policy& pol, const lanczos::undefined_lanczos& l)
boost::math::detail::gamma_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T gamma_imp(T z, const Policy& pol, const Lanczos& l)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const Lanczos& l)
boost::math::detail::gamma_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T gamma_imp(T z, const Policy& pol, const lanczos::undefined_lanczos& l)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const lanczos::undefined_lanczos& l)
boost::math::detail::gamma_incomplete_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T gamma_incomplete_imp(T a, T x, bool normalised, bool invert, $/;"	f	namespace:boost::math::detail	signature:(T a, T x, bool normalised, bool invert, const Policy& pol, T* p_derivative)
boost::math::detail::gamma_inva_imp	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^T gamma_inva_imp(const T& z, const T& p, const T& q, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T& z, const T& p, const T& q, const Policy& pol)
boost::math::detail::gamma_inva_t	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^struct gamma_inva_t$/;"	s	namespace:boost::math::detail
boost::math::detail::gamma_inva_t::gamma_inva_t	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   gamma_inva_t(T z_, T p_, bool invert_) : z(z_), p(p_), invert(invert_) {}$/;"	f	struct:boost::math::detail::gamma_inva_t	access:public	signature:(T z_, T p_, bool invert_)
boost::math::detail::gamma_inva_t::invert	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   bool invert;$/;"	m	struct:boost::math::detail::gamma_inva_t	access:private
boost::math::detail::gamma_inva_t::operator ()	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   T operator()(T a)$/;"	f	struct:boost::math::detail::gamma_inva_t	access:public	signature:(T a)
boost::math::detail::gamma_inva_t::p	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   T z, p;$/;"	m	struct:boost::math::detail::gamma_inva_t	access:private
boost::math::detail::gamma_inva_t::z	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   T z, p;$/;"	m	struct:boost::math::detail::gamma_inva_t	access:private
boost::math::detail::gamma_p_derivative_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T gamma_p_derivative_imp(T a, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, const Policy& pol)
boost::math::detail::gamma_p_inv_imp	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^T gamma_p_inv_imp(T a, T p, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T p, const Policy& pol)
boost::math::detail::gamma_p_inverse_func	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^struct gamma_p_inverse_func$/;"	s	namespace:boost::math::detail
boost::math::detail::gamma_p_inverse_func::a	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   T a, p;$/;"	m	struct:boost::math::detail::gamma_p_inverse_func	access:private
boost::math::detail::gamma_p_inverse_func::gamma_p_inverse_func	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   gamma_p_inverse_func(T a_, T p_, bool inv) : a(a_), p(p_), invert(inv)$/;"	f	struct:boost::math::detail::gamma_p_inverse_func	access:public	signature:(T a_, T p_, bool inv)
boost::math::detail::gamma_p_inverse_func::invert	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   bool invert;$/;"	m	struct:boost::math::detail::gamma_p_inverse_func	access:private
boost::math::detail::gamma_p_inverse_func::operator ()	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   boost::math::tuple<T, T, T> operator()(const T& x)const$/;"	f	struct:boost::math::detail::gamma_p_inverse_func	access:public	signature:(const T& x) const
boost::math::detail::gamma_p_inverse_func::p	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   T a, p;$/;"	m	struct:boost::math::detail::gamma_p_inverse_func	access:private
boost::math::detail::gamma_q_inv_imp	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^T gamma_q_inv_imp(T a, T q, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T q, const Policy& pol)
boost::math::detail::gcd_binary	/usr/include/boost/math/common_factor_rt.hpp	/^    gcd_binary$/;"	f	namespace:boost::math::detail	signature:( BuiltInUnsigned u, BuiltInUnsigned v )
boost::math::detail::gcd_euclidean	/usr/include/boost/math/common_factor_rt.hpp	/^    gcd_euclidean$/;"	f	namespace:boost::math::detail	signature:( RingType a, RingType b )
boost::math::detail::gcd_integer	/usr/include/boost/math/common_factor_rt.hpp	/^    gcd_integer$/;"	f	namespace:boost::math::detail	signature:( IntegerType const & a, IntegerType const & b )
boost::math::detail::gcd_optimal	/usr/include/boost/math/common_factor_rt.hpp	/^    gcd_optimal$/;"	f	namespace:boost::math::detail	signature:( T const & a, T const & b )
boost::math::detail::gcd_optimal_evaluator	/usr/include/boost/math/common_factor_rt.hpp	/^    struct gcd_optimal_evaluator$/;"	s	namespace:boost::math::detail
boost::math::detail::gcd_optimal_evaluator::operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^        T  operator ()( T const &a, T const &b )$/;"	f	struct:boost::math::detail::gcd_optimal_evaluator	access:public	signature:( T const &a, T const &b )
boost::math::detail::gcd_optimal_evaluator_helper2_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct gcd_optimal_evaluator_helper2_t$/;"	s	namespace:boost::math::detail
boost::math::detail::gcd_optimal_evaluator_helper2_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct gcd_optimal_evaluator_helper2_t< true, true >$/;"	s	namespace:boost::math::detail
boost::math::detail::gcd_optimal_evaluator_helper2_t::helper	/usr/include/boost/math/common_factor_rt.hpp	/^        struct helper$/;"	s	struct:boost::math::detail::gcd_optimal_evaluator_helper2_t	access:public
boost::math::detail::gcd_optimal_evaluator_helper2_t::helper::operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^            T  operator ()( T const &a, T const &b )$/;"	f	struct:boost::math::detail::gcd_optimal_evaluator_helper2_t::helper	access:public	signature:( T const &a, T const &b )
boost::math::detail::gcd_optimal_evaluator_helper_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct gcd_optimal_evaluator_helper_t$/;"	s	namespace:boost::math::detail
boost::math::detail::gcd_optimal_evaluator_helper_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct gcd_optimal_evaluator_helper_t$/;"	s	namespace:boost::math::detail	inherits:gcd_optimal_evaluator_helper2_t::BOOST_NESTED_TEMPLATEhelper
boost::math::detail::gcd_optimal_evaluator_helper_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct gcd_optimal_evaluator_helper_t< T, true, true >$/;"	s	namespace:boost::math::detail
boost::math::detail::gcd_optimal_evaluator_helper_t::operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^        T  operator ()( T const &a, T const &b )$/;"	f	struct:boost::math::detail::gcd_optimal_evaluator_helper_t	access:public	signature:( T const &a, T const &b )
boost::math::detail::generic_find_mode	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^typename Dist::value_type generic_find_mode(const Dist& dist, typename Dist::value_type guess, const char* function, typename Dist::value_type step = 0)$/;"	f	namespace:boost::math::detail	signature:(const Dist& dist, typename Dist::value_type guess, const char* function, typename Dist::value_type step = 0)
boost::math::detail::generic_find_mode_01	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^typename Dist::value_type generic_find_mode_01(const Dist& dist, typename Dist::value_type guess, const char* function)$/;"	f	namespace:boost::math::detail	signature:(const Dist& dist, typename Dist::value_type guess, const char* function)
boost::math::detail::generic_quantile	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^typename Dist::value_type generic_quantile(const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, bool comp, const char* function)$/;"	f	namespace:boost::math::detail	signature:(const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, bool comp, const char* function)
boost::math::detail::generic_quantile_finder	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^struct generic_quantile_finder$/;"	s	namespace:boost::math::detail
boost::math::detail::generic_quantile_finder::comp	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   bool comp;$/;"	m	struct:boost::math::detail::generic_quantile_finder	access:private
boost::math::detail::generic_quantile_finder::dist	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   Dist dist;$/;"	m	struct:boost::math::detail::generic_quantile_finder	access:private
boost::math::detail::generic_quantile_finder::generic_quantile_finder	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   generic_quantile_finder(const Dist& d, value_type t, bool c)$/;"	f	struct:boost::math::detail::generic_quantile_finder	access:public	signature:(const Dist& d, value_type t, bool c)
boost::math::detail::generic_quantile_finder::operator ()	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   value_type operator()(const value_type& x)$/;"	f	struct:boost::math::detail::generic_quantile_finder	access:public	signature:(const value_type& x)
boost::math::detail::generic_quantile_finder::policy_type	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   typedef typename Dist::policy_type policy_type;$/;"	t	struct:boost::math::detail::generic_quantile_finder	access:public
boost::math::detail::generic_quantile_finder::target	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   value_type target;$/;"	m	struct:boost::math::detail::generic_quantile_finder	access:private
boost::math::detail::generic_quantile_finder::value_type	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   typedef typename Dist::value_type value_type;$/;"	t	struct:boost::math::detail::generic_quantile_finder	access:public
boost::math::detail::generic_tag	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct generic_tag {};$/;"	s	namespace:boost::math::detail
boost::math::detail::get_min_shift_value	/usr/include/boost/math/special_functions/next.hpp	/^T get_min_shift_value();$/;"	p	namespace:boost::math::detail	signature:()
boost::math::detail::get_min_shift_value	/usr/include/boost/math/special_functions/next.hpp	/^inline T get_min_shift_value()$/;"	f	namespace:boost::math::detail	signature:()
boost::math::detail::get_smallest_value	/usr/include/boost/math/special_functions/next.hpp	/^inline T get_smallest_value()$/;"	f	namespace:boost::math::detail	signature:()
boost::math::detail::get_smallest_value	/usr/include/boost/math/special_functions/next.hpp	/^inline T get_smallest_value(mpl::false_ const&)$/;"	f	namespace:boost::math::detail	signature:(mpl::false_ const&)
boost::math::detail::get_smallest_value	/usr/include/boost/math/special_functions/next.hpp	/^inline T get_smallest_value(mpl::true_ const&)$/;"	f	namespace:boost::math::detail	signature:(mpl::true_ const&)
boost::math::detail::guess_ig	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  inline RealType guess_ig(RealType p, RealType mu = 1, RealType lambda = 1)$/;"	f	namespace:boost::math::detail	signature:(RealType p, RealType mu = 1, RealType lambda = 1)
boost::math::detail::hankel_PQ	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^bool hankel_PQ(T v, T x, T* p, T* q, const Policy& )$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* p, T* q, const Policy& )
boost::math::detail::hankel_imp	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<T> hankel_imp(T v, T x, const bessel_maybe_int_tag&, const Policy& pol, int sign)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_maybe_int_tag&, const Policy& pol, int sign)
boost::math::detail::hankel_imp	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<T> hankel_imp(int v, T x, const bessel_int_tag&, const Policy& pol, int sign)$/;"	f	namespace:boost::math::detail	signature:(int v, T x, const bessel_int_tag&, const Policy& pol, int sign)
boost::math::detail::hankel_imp	/usr/include/boost/math/special_functions/hankel.hpp	/^std::complex<T> hankel_imp(T v, T x, const bessel_no_int_tag&, const Policy& pol, int sign)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_no_int_tag&, const Policy& pol, int sign)
boost::math::detail::hankel_imp	/usr/include/boost/math/special_functions/hankel.hpp	/^std::complex<T> hankel_imp(int v, T x, const bessel_int_tag&, const Policy& pol, int sign);$/;"	p	namespace:boost::math::detail	signature:(int v, T x, const bessel_int_tag&, const Policy& pol, int sign)
boost::math::detail::hermite_imp	/usr/include/boost/math/special_functions/hermite.hpp	/^T hermite_imp(unsigned n, T x)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T x)
boost::math::detail::hypergeometric_2F2	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         T hypergeometric_2F2(T a1, T a2, T b1, T b2, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a1, T a2, T b1, T b2, T z, const Policy& pol)
boost::math::detail::hypergeometric_2F2_sum	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         struct hypergeometric_2F2_sum$/;"	s	namespace:boost::math::detail
boost::math::detail::hypergeometric_2F2_sum::a1	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
boost::math::detail::hypergeometric_2F2_sum::a2	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
boost::math::detail::hypergeometric_2F2_sum::b1	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
boost::math::detail::hypergeometric_2F2_sum::b2	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
boost::math::detail::hypergeometric_2F2_sum::hypergeometric_2F2_sum	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            hypergeometric_2F2_sum(T a1_, T a2_, T b1_, T b2_, T z_) : a1(a1_), a2(a2_), b1(b1_), b2(b2_), z(z_), term(1), k(0) {}$/;"	f	struct:boost::math::detail::hypergeometric_2F2_sum	access:public	signature:(T a1_, T a2_, T b1_, T b2_, T z_)
boost::math::detail::hypergeometric_2F2_sum::k	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
boost::math::detail::hypergeometric_2F2_sum::operator ()	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T operator()()$/;"	f	struct:boost::math::detail::hypergeometric_2F2_sum	access:public	signature:()
boost::math::detail::hypergeometric_2F2_sum::result_type	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            typedef T result_type;$/;"	t	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
boost::math::detail::hypergeometric_2F2_sum::term	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
boost::math::detail::hypergeometric_2F2_sum::z	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
boost::math::detail::hypergeometric_cdf	/usr/include/boost/math/distributions/detail/hypergeometric_cdf.hpp	/^   inline T hypergeometric_cdf(unsigned x, unsigned r, unsigned n, unsigned N, bool invert, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, unsigned r, unsigned n, unsigned N, bool invert, const Policy&)
boost::math::detail::hypergeometric_cdf_imp	/usr/include/boost/math/distributions/detail/hypergeometric_cdf.hpp	/^   T hypergeometric_cdf_imp(unsigned x, unsigned r, unsigned n, unsigned N, bool invert, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, unsigned r, unsigned n, unsigned N, bool invert, const Policy& pol)
boost::math::detail::hypergeometric_pdf	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   hypergeometric_pdf(unsigned x, unsigned r, unsigned n, unsigned N, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, unsigned r, unsigned n, unsigned N, const Policy&)
boost::math::detail::hypergeometric_pdf_factorial_imp	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^T hypergeometric_pdf_factorial_imp(unsigned x, unsigned r, unsigned n, unsigned N, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, unsigned r, unsigned n, unsigned N, const Policy&)
boost::math::detail::hypergeometric_pdf_lanczos_imp	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^T hypergeometric_pdf_lanczos_imp(T \/*dummy*\/, unsigned x, unsigned r, unsigned n, unsigned N, const Lanczos&, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(T , unsigned x, unsigned r, unsigned n, unsigned N, const Lanczos&, const Policy&)
boost::math::detail::hypergeometric_pdf_lanczos_imp	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^T hypergeometric_pdf_lanczos_imp(T \/*dummy*\/, unsigned x, unsigned r, unsigned n, unsigned N, const boost::math::lanczos::undefined_lanczos&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T , unsigned x, unsigned r, unsigned n, unsigned N, const boost::math::lanczos::undefined_lanczos&, const Policy& pol)
boost::math::detail::hypergeometric_pdf_prime_imp	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^inline T hypergeometric_pdf_prime_imp(unsigned x, unsigned r, unsigned n, unsigned N, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, unsigned r, unsigned n, unsigned N, const Policy&)
boost::math::detail::hypergeometric_pdf_prime_loop_data	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^struct hypergeometric_pdf_prime_loop_data$/;"	s	namespace:boost::math::detail
boost::math::detail::hypergeometric_pdf_prime_loop_data::N	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   const unsigned N;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_data	access:public
boost::math::detail::hypergeometric_pdf_prime_loop_data::current_prime	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   unsigned current_prime;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_data	access:public
boost::math::detail::hypergeometric_pdf_prime_loop_data::n	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   const unsigned n;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_data	access:public
boost::math::detail::hypergeometric_pdf_prime_loop_data::prime_index	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   unsigned prime_index;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_data	access:public
boost::math::detail::hypergeometric_pdf_prime_loop_data::r	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   const unsigned r;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_data	access:public
boost::math::detail::hypergeometric_pdf_prime_loop_data::x	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   const unsigned x;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_data	access:public
boost::math::detail::hypergeometric_pdf_prime_loop_imp	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^T hypergeometric_pdf_prime_loop_imp(hypergeometric_pdf_prime_loop_data& data, hypergeometric_pdf_prime_loop_result_entry<T>& result)$/;"	f	namespace:boost::math::detail	signature:(hypergeometric_pdf_prime_loop_data& data, hypergeometric_pdf_prime_loop_result_entry<T>& result)
boost::math::detail::hypergeometric_pdf_prime_loop_result_entry	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^struct hypergeometric_pdf_prime_loop_result_entry$/;"	s	namespace:boost::math::detail
boost::math::detail::hypergeometric_pdf_prime_loop_result_entry::next	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   const hypergeometric_pdf_prime_loop_result_entry* next;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_result_entry	access:public
boost::math::detail::hypergeometric_pdf_prime_loop_result_entry::value	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   T value;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_result_entry	access:public
boost::math::detail::hypergeometric_quantile	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned hypergeometric_quantile(T p, T q, unsigned r, unsigned n, unsigned N, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(T p, T q, unsigned r, unsigned n, unsigned N, const Policy&)
boost::math::detail::hypergeometric_quantile_imp	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^unsigned hypergeometric_quantile_imp(T p, T q, unsigned r, unsigned n, unsigned N, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T p, T q, unsigned r, unsigned n, unsigned N, const Policy& pol)
boost::math::detail::hypot_imp	/usr/include/boost/math/special_functions/hypot.hpp	/^T hypot_imp(T x, T y, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, T y, const Policy& pol)
boost::math::detail::ibeta_a_step	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_a_step(T a, T b, T x, T y, int k, const Policy& pol, bool normalised, T* p_derivative)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T y, int k, const Policy& pol, bool normalised, T* p_derivative)
boost::math::detail::ibeta_derivative_imp	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_derivative_imp(T a, T b, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, const Policy& pol)
boost::math::detail::ibeta_fraction2	/usr/include/boost/math/special_functions/beta.hpp	/^inline T ibeta_fraction2(T a, T b, T x, T y, const Policy& pol, bool normalised, T* p_derivative)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T y, const Policy& pol, bool normalised, T* p_derivative)
boost::math::detail::ibeta_fraction2_t	/usr/include/boost/math/special_functions/beta.hpp	/^struct ibeta_fraction2_t$/;"	s	namespace:boost::math::detail
boost::math::detail::ibeta_fraction2_t::a	/usr/include/boost/math/special_functions/beta.hpp	/^   T a, b, x, y;$/;"	m	struct:boost::math::detail::ibeta_fraction2_t	access:private
boost::math::detail::ibeta_fraction2_t::b	/usr/include/boost/math/special_functions/beta.hpp	/^   T a, b, x, y;$/;"	m	struct:boost::math::detail::ibeta_fraction2_t	access:private
boost::math::detail::ibeta_fraction2_t::ibeta_fraction2_t	/usr/include/boost/math/special_functions/beta.hpp	/^   ibeta_fraction2_t(T a_, T b_, T x_, T y_) : a(a_), b(b_), x(x_), y(y_), m(0) {}$/;"	f	struct:boost::math::detail::ibeta_fraction2_t	access:public	signature:(T a_, T b_, T x_, T y_)
boost::math::detail::ibeta_fraction2_t::m	/usr/include/boost/math/special_functions/beta.hpp	/^   int m;$/;"	m	struct:boost::math::detail::ibeta_fraction2_t	access:private
boost::math::detail::ibeta_fraction2_t::operator ()	/usr/include/boost/math/special_functions/beta.hpp	/^   result_type operator()()$/;"	f	struct:boost::math::detail::ibeta_fraction2_t	access:public	signature:()
boost::math::detail::ibeta_fraction2_t::result_type	/usr/include/boost/math/special_functions/beta.hpp	/^   typedef std::pair<T, T> result_type;$/;"	t	struct:boost::math::detail::ibeta_fraction2_t	access:public
boost::math::detail::ibeta_fraction2_t::x	/usr/include/boost/math/special_functions/beta.hpp	/^   T a, b, x, y;$/;"	m	struct:boost::math::detail::ibeta_fraction2_t	access:private
boost::math::detail::ibeta_fraction2_t::y	/usr/include/boost/math/special_functions/beta.hpp	/^   T a, b, x, y;$/;"	m	struct:boost::math::detail::ibeta_fraction2_t	access:private
boost::math::detail::ibeta_imp	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_imp(T a, T b, T x, const Policy& pol, bool inv, bool normalised, T* p_derivative)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, const Policy& pol, bool inv, bool normalised, T* p_derivative)
boost::math::detail::ibeta_imp	/usr/include/boost/math/special_functions/beta.hpp	/^inline T ibeta_imp(T a, T b, T x, const Policy& pol, bool inv, bool normalised)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, const Policy& pol, bool inv, bool normalised)
boost::math::detail::ibeta_inv_ab_imp	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^T ibeta_inv_ab_imp(const T& b, const T& z, const T& p, const T& q, bool swap_ab, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T& b, const T& z, const T& p, const T& q, bool swap_ab, const Policy& pol)
boost::math::detail::ibeta_inv_imp	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^T ibeta_inv_imp(T a, T b, T p, T q, const Policy& pol, T* py)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T p, T q, const Policy& pol, T* py)
boost::math::detail::ibeta_power_terms	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_power_terms(T a,$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T y, const Lanczos&, bool normalised, const Policy& pol)
boost::math::detail::ibeta_power_terms	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_power_terms(T a,$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T y, const boost::math::lanczos::undefined_lanczos&, bool normalised, const Policy& pol)
boost::math::detail::ibeta_roots	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^struct ibeta_roots$/;"	s	namespace:boost::math::detail
boost::math::detail::ibeta_roots::a	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   T a, b, target;$/;"	m	struct:boost::math::detail::ibeta_roots	access:private
boost::math::detail::ibeta_roots::b	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   T a, b, target;$/;"	m	struct:boost::math::detail::ibeta_roots	access:private
boost::math::detail::ibeta_roots::ibeta_roots	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibeta_roots(T _a, T _b, T t, bool inv = false)$/;"	f	struct:boost::math::detail::ibeta_roots	access:public	signature:(T _a, T _b, T t, bool inv = false)
boost::math::detail::ibeta_roots::invert	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   bool invert;$/;"	m	struct:boost::math::detail::ibeta_roots	access:private
boost::math::detail::ibeta_roots::operator ()	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   boost::math::tuple<T, T, T> operator()(T x)$/;"	f	struct:boost::math::detail::ibeta_roots	access:public	signature:(T x)
boost::math::detail::ibeta_roots::target	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   T a, b, target;$/;"	m	struct:boost::math::detail::ibeta_roots	access:private
boost::math::detail::ibeta_series	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_series(T a, T b, T x, T s0, const Lanczos&, bool normalised, T* p_derivative, T y, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T s0, const Lanczos&, bool normalised, T* p_derivative, T y, const Policy& pol)
boost::math::detail::ibeta_series	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_series(T a, T b, T x, T s0, const boost::math::lanczos::undefined_lanczos&, bool normalised, T* p_derivative, T y, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T s0, const boost::math::lanczos::undefined_lanczos&, bool normalised, T* p_derivative, T y, const Policy& pol)
boost::math::detail::ibeta_series_t	/usr/include/boost/math/special_functions/beta.hpp	/^struct ibeta_series_t$/;"	s	namespace:boost::math::detail
boost::math::detail::ibeta_series_t::apn	/usr/include/boost/math/special_functions/beta.hpp	/^   T result, x, apn, poch;$/;"	m	struct:boost::math::detail::ibeta_series_t	access:private
boost::math::detail::ibeta_series_t::ibeta_series_t	/usr/include/boost/math/special_functions/beta.hpp	/^   ibeta_series_t(T a_, T b_, T x_, T mult) : result(mult), x(x_), apn(a_), poch(1-b_), n(1) {}$/;"	f	struct:boost::math::detail::ibeta_series_t	access:public	signature:(T a_, T b_, T x_, T mult)
boost::math::detail::ibeta_series_t::n	/usr/include/boost/math/special_functions/beta.hpp	/^   int n;$/;"	m	struct:boost::math::detail::ibeta_series_t	access:private
boost::math::detail::ibeta_series_t::operator ()	/usr/include/boost/math/special_functions/beta.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::ibeta_series_t	access:public	signature:()
boost::math::detail::ibeta_series_t::poch	/usr/include/boost/math/special_functions/beta.hpp	/^   T result, x, apn, poch;$/;"	m	struct:boost::math::detail::ibeta_series_t	access:private
boost::math::detail::ibeta_series_t::result	/usr/include/boost/math/special_functions/beta.hpp	/^   T result, x, apn, poch;$/;"	m	struct:boost::math::detail::ibeta_series_t	access:private
boost::math::detail::ibeta_series_t::result_type	/usr/include/boost/math/special_functions/beta.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::ibeta_series_t	access:public
boost::math::detail::ibeta_series_t::x	/usr/include/boost/math/special_functions/beta.hpp	/^   T result, x, apn, poch;$/;"	m	struct:boost::math::detail::ibeta_series_t	access:private
boost::math::detail::iconv	/usr/include/boost/math/special_functions/detail/iconv.hpp	/^inline int iconv(T v, Policy const& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, Policy const& pol)
boost::math::detail::iconv_imp	/usr/include/boost/math/special_functions/detail/iconv.hpp	/^inline int iconv_imp(T v, Policy const& pol, mpl::false_ const&)$/;"	f	namespace:boost::math::detail	signature:(T v, Policy const& pol, mpl::false_ const&)
boost::math::detail::iconv_imp	/usr/include/boost/math/special_functions/detail/iconv.hpp	/^inline int iconv_imp(T v, Policy const&, mpl::true_ const&)$/;"	f	namespace:boost::math::detail	signature:(T v, Policy const&, mpl::true_ const&)
boost::math::detail::ieee_copy_all_bits_tag	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct ieee_copy_all_bits_tag : public ieee_tag {};$/;"	s	namespace:boost::math::detail	inherits:ieee_tag
boost::math::detail::ieee_copy_leading_bits_tag	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct ieee_copy_leading_bits_tag : public ieee_tag {};$/;"	s	namespace:boost::math::detail	inherits:ieee_tag
boost::math::detail::ieee_tag	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct ieee_tag {};$/;"	s	namespace:boost::math::detail
boost::math::detail::igamma_initializer	/usr/include/boost/math/special_functions/gamma.hpp	/^struct igamma_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::igamma_initializer::force_instantiate	/usr/include/boost/math/special_functions/gamma.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::igamma_initializer	access:public	signature:()
boost::math::detail::igamma_initializer::init	/usr/include/boost/math/special_functions/gamma.hpp	/^   struct init$/;"	s	struct:boost::math::detail::igamma_initializer	access:public
boost::math::detail::igamma_initializer::init::do_init	/usr/include/boost/math/special_functions/gamma.hpp	/^      static void do_init(const mpl::int_<53>&){}$/;"	f	struct:boost::math::detail::igamma_initializer::init	access:public	signature:(const mpl::int_<53>&)
boost::math::detail::igamma_initializer::init::do_init	/usr/include/boost/math/special_functions/gamma.hpp	/^      static void do_init(const mpl::int_<N>&)$/;"	f	struct:boost::math::detail::igamma_initializer::init	access:public	signature:(const mpl::int_<N>&)
boost::math::detail::igamma_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/gamma.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::igamma_initializer::init	access:public	signature:() const
boost::math::detail::igamma_initializer::init::init	/usr/include/boost/math/special_functions/gamma.hpp	/^      init()$/;"	f	struct:boost::math::detail::igamma_initializer::init	access:public	signature:()
boost::math::detail::igamma_initializer::initializer	/usr/include/boost/math/special_functions/gamma.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::igamma_initializer	access:public
boost::math::detail::igamma_initializer::initializer	/usr/include/boost/math/special_functions/gamma.hpp	/^const typename igamma_initializer<T, Policy>::init igamma_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::igamma_initializer
boost::math::detail::igamma_temme_large	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^T igamma_temme_large(T a, T x, const Policy& pol, mpl::int_<113> const *)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, const Policy& pol, mpl::int_<113> const *)
boost::math::detail::igamma_temme_large	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^T igamma_temme_large(T a, T x, const Policy& pol, mpl::int_<24> const *)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, const Policy& pol, mpl::int_<24> const *)
boost::math::detail::igamma_temme_large	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^T igamma_temme_large(T a, T x, const Policy& pol, mpl::int_<53> const *)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, const Policy& pol, mpl::int_<53> const *)
boost::math::detail::igamma_temme_large	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^T igamma_temme_large(T a, T x, const Policy& pol, mpl::int_<64> const *)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, const Policy& pol, mpl::int_<64> const *)
boost::math::detail::igamma_temme_large	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^inline T igamma_temme_large(T, T, const Policy& \/* pol *\/, mpl::int_<0> const *)$/;"	f	namespace:boost::math::detail	signature:(T, T, const Policy& , mpl::int_<0> const *)
boost::math::detail::integer_power	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^inline T integer_power(const T& x, int ex)$/;"	f	namespace:boost::math::detail	signature:(const T& x, int ex)
boost::math::detail::inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_down>&, boost::uintmax_t& max_iter)
boost::math::detail::inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_inwards>&, boost::uintmax_t& max_iter)
boost::math::detail::inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_nearest>&, boost::uintmax_t& max_iter)
boost::math::detail::inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_outwards>&, boost::uintmax_t& max_iter)
boost::math::detail::inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_up>&, boost::uintmax_t& max_iter)
boost::math::detail::inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::real>&, boost::uintmax_t& max_iter)
boost::math::detail::inverse_discrete_quantile	/usr/include/boost/math/distributions/poisson.hpp	/^         inverse_discrete_quantile($/;"	p	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_down>&, boost::uintmax_t& max_iter)
boost::math::detail::inverse_discrete_quantile	/usr/include/boost/math/distributions/poisson.hpp	/^         inverse_discrete_quantile($/;"	p	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_inwards>&, boost::uintmax_t& max_iter)
boost::math::detail::inverse_discrete_quantile	/usr/include/boost/math/distributions/poisson.hpp	/^         inverse_discrete_quantile($/;"	p	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_nearest>&, boost::uintmax_t& max_iter)
boost::math::detail::inverse_discrete_quantile	/usr/include/boost/math/distributions/poisson.hpp	/^         inverse_discrete_quantile($/;"	p	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_outwards>&, boost::uintmax_t& max_iter)
boost::math::detail::inverse_discrete_quantile	/usr/include/boost/math/distributions/poisson.hpp	/^         inverse_discrete_quantile($/;"	p	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_up>&, boost::uintmax_t& max_iter)
boost::math::detail::inverse_discrete_quantile	/usr/include/boost/math/distributions/poisson.hpp	/^         inverse_discrete_quantile($/;"	p	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::real>&, boost::uintmax_t& max_iter)
boost::math::detail::inverse_negative_binomial_cornish_fisher	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^T inverse_negative_binomial_cornish_fisher(T n, T sf, T sfc, T p, T q, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T n, T sf, T sfc, T p, T q, const Policy& pol)
boost::math::detail::inverse_poisson_cornish_fisher	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^T inverse_poisson_cornish_fisher(T lambda, T p, T q, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T lambda, T p, T q, const Policy& pol)
boost::math::detail::inverse_students_t	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^T inverse_students_t(T df, T u, T v, const Policy& pol, bool* pexact = 0)$/;"	f	namespace:boost::math::detail	signature:(T df, T u, T v, const Policy& pol, bool* pexact = 0)
boost::math::detail::inverse_students_t_body_series	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^T inverse_students_t_body_series(T df, T u, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T df, T u, const Policy& pol)
boost::math::detail::inverse_students_t_hill	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^T inverse_students_t_hill(T ndf, T u, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T ndf, T u, const Policy& pol)
boost::math::detail::inverse_students_t_tail_series	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^T inverse_students_t_tail_series(T df, T v, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T df, T v, const Policy& pol)
boost::math::detail::is_generic_tag_false	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^inline bool is_generic_tag_false(const generic_tag<false>*)$/;"	f	namespace:boost::math::detail	signature:(const generic_tag<false>*)
boost::math::detail::is_generic_tag_false	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^inline bool is_generic_tag_false(const void*)$/;"	f	namespace:boost::math::detail	signature:(const void*)
boost::math::detail::is_odd	/usr/include/boost/math/special_functions/gamma.hpp	/^inline bool is_odd(T v)$/;"	f	namespace:boost::math::detail	signature:(T v)
boost::math::detail::is_odd	/usr/include/boost/math/special_functions/gamma.hpp	/^inline bool is_odd(T v, const boost::false_type&)$/;"	f	namespace:boost::math::detail	signature:(T v, const boost::false_type&)
boost::math::detail::is_odd	/usr/include/boost/math/special_functions/gamma.hpp	/^inline bool is_odd(T v, const boost::true_type&)$/;"	f	namespace:boost::math::detail	signature:(T v, const boost::true_type&)
boost::math::detail::isfinite_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isfinite_impl(T x, generic_tag<false> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<false> const&)
boost::math::detail::isfinite_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isfinite_impl(T x, generic_tag<true> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<true> const&)
boost::math::detail::isfinite_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isfinite_impl(T x, ieee_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_tag const&)
boost::math::detail::isfinite_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isfinite_impl(T x, native_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, native_tag const&)
boost::math::detail::isinf_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isinf_impl(T x, generic_tag<false> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<false> const&)
boost::math::detail::isinf_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isinf_impl(T x, generic_tag<true> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<true> const&)
boost::math::detail::isinf_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isinf_impl(T x, ieee_copy_all_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_all_bits_tag const&)
boost::math::detail::isinf_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isinf_impl(T x, ieee_copy_leading_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_leading_bits_tag const&)
boost::math::detail::isinf_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isinf_impl(T x, native_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, native_tag const&)
boost::math::detail::isnan_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnan_impl(T x, generic_tag<false> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<false> const&)
boost::math::detail::isnan_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnan_impl(T x, generic_tag<true> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<true> const&)
boost::math::detail::isnan_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnan_impl(T x, ieee_copy_all_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_all_bits_tag const&)
boost::math::detail::isnan_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnan_impl(T x, ieee_copy_leading_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_leading_bits_tag const&)
boost::math::detail::isnan_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnan_impl(T x, native_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, native_tag const&)
boost::math::detail::isnormal_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnormal_impl(T x, generic_tag<false> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<false> const&)
boost::math::detail::isnormal_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnormal_impl(T x, generic_tag<true> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<true> const&)
boost::math::detail::isnormal_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnormal_impl(T x, ieee_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_tag const&)
boost::math::detail::isnormal_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnormal_impl(T x, native_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, native_tag const&)
boost::math::detail::jacobi_imp	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^T jacobi_imp(const T& x, const T& k, T* cn, T* dn, const Policy& pol, const char* function)$/;"	f	namespace:boost::math::detail	signature:(const T& x, const T& k, T* cn, T* dn, const Policy& pol, const char* function)
boost::math::detail::jacobi_recurse	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^T jacobi_recurse(const T& x, const T& k, T anm1, T bnm1, unsigned N, T* pTn, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T& x, const T& k, T anm1, T bnm1, unsigned N, T* pTn, const Policy& pol)
boost::math::detail::kurtosis_excess	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T kurtosis_excess(T v, T delta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, const Policy& pol)
boost::math::detail::laguerre	/usr/include/boost/math/special_functions/laguerre.hpp	/^   laguerre(unsigned n, unsigned m, T x, const mpl::false_&)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, unsigned m, T x, const mpl::false_&)
boost::math::detail::laguerre	/usr/include/boost/math/special_functions/laguerre.hpp	/^laguerre(unsigned n, T x, const Policy&, const mpl::true_&)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T x, const Policy&, const mpl::true_&)
boost::math::detail::laguerre_imp	/usr/include/boost/math/special_functions/laguerre.hpp	/^T laguerre_imp(unsigned n, T x)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T x)
boost::math::detail::laguerre_imp	/usr/include/boost/math/special_functions/laguerre.hpp	/^T laguerre_imp(unsigned n, unsigned m, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, unsigned m, T x, const Policy& pol)
boost::math::detail::largest_cbrt_int_type	/usr/include/boost/math/special_functions/cbrt.hpp	/^struct largest_cbrt_int_type$/;"	s	namespace:boost::math::detail
boost::math::detail::largest_cbrt_int_type::type	/usr/include/boost/math/special_functions/cbrt.hpp	/^   >::type type;$/;"	t	struct:boost::math::detail::largest_cbrt_int_type	access:public
boost::math::detail::lcm_euclidean	/usr/include/boost/math/common_factor_rt.hpp	/^    lcm_euclidean$/;"	f	namespace:boost::math::detail	signature:( RingType const & a, RingType const & b )
boost::math::detail::lcm_integer	/usr/include/boost/math/common_factor_rt.hpp	/^    lcm_integer$/;"	f	namespace:boost::math::detail	signature:( IntegerType const & a, IntegerType const & b )
boost::math::detail::lcm_optimal	/usr/include/boost/math/common_factor_rt.hpp	/^    lcm_optimal$/;"	f	namespace:boost::math::detail	signature:( T const & a, T const & b )
boost::math::detail::lcm_optimal_evaluator	/usr/include/boost/math/common_factor_rt.hpp	/^    struct lcm_optimal_evaluator$/;"	s	namespace:boost::math::detail
boost::math::detail::lcm_optimal_evaluator::operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^        T  operator ()( T const &a, T const &b )$/;"	f	struct:boost::math::detail::lcm_optimal_evaluator	access:public	signature:( T const &a, T const &b )
boost::math::detail::lcm_optimal_evaluator_helper2_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct lcm_optimal_evaluator_helper2_t$/;"	s	namespace:boost::math::detail
boost::math::detail::lcm_optimal_evaluator_helper2_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct lcm_optimal_evaluator_helper2_t< true, true >$/;"	s	namespace:boost::math::detail
boost::math::detail::lcm_optimal_evaluator_helper2_t::helper	/usr/include/boost/math/common_factor_rt.hpp	/^        struct helper$/;"	s	struct:boost::math::detail::lcm_optimal_evaluator_helper2_t	access:public
boost::math::detail::lcm_optimal_evaluator_helper2_t::helper::operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^            T  operator ()( T const &a, T const &b )$/;"	f	struct:boost::math::detail::lcm_optimal_evaluator_helper2_t::helper	access:public	signature:( T const &a, T const &b )
boost::math::detail::lcm_optimal_evaluator_helper_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct lcm_optimal_evaluator_helper_t$/;"	s	namespace:boost::math::detail
boost::math::detail::lcm_optimal_evaluator_helper_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct lcm_optimal_evaluator_helper_t$/;"	s	namespace:boost::math::detail	inherits:lcm_optimal_evaluator_helper2_t::BOOST_NESTED_TEMPLATEhelper
boost::math::detail::lcm_optimal_evaluator_helper_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct lcm_optimal_evaluator_helper_t< T, true, true >$/;"	s	namespace:boost::math::detail
boost::math::detail::lcm_optimal_evaluator_helper_t::operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^        T  operator ()( T const &a, T const &b )$/;"	f	struct:boost::math::detail::lcm_optimal_evaluator_helper_t	access:public	signature:( T const &a, T const &b )
boost::math::detail::legendre_imp	/usr/include/boost/math/special_functions/legendre.hpp	/^T legendre_imp(unsigned l, T x, const Policy& pol, bool second = false)$/;"	f	namespace:boost::math::detail	signature:(unsigned l, T x, const Policy& pol, bool second = false)
boost::math::detail::legendre_p_imp	/usr/include/boost/math/special_functions/legendre.hpp	/^T legendre_p_imp(int l, int m, T x, T sin_theta_power, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int l, int m, T x, T sin_theta_power, const Policy& pol)
boost::math::detail::legendre_p_imp	/usr/include/boost/math/special_functions/legendre.hpp	/^inline T legendre_p_imp(int l, int m, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int l, int m, T x, const Policy& pol)
boost::math::detail::lgamma_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T lgamma_imp(T z, const Policy& pol, const Lanczos& l, int* sign = 0)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const Lanczos& l, int* sign = 0)
boost::math::detail::lgamma_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T lgamma_imp(T z, const Policy& pol, const lanczos::undefined_lanczos& l, int*sign)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const lanczos::undefined_lanczos& l, int*sign)
boost::math::detail::lgamma_initializer	/usr/include/boost/math/special_functions/gamma.hpp	/^struct lgamma_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::lgamma_initializer::force_instantiate	/usr/include/boost/math/special_functions/gamma.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::lgamma_initializer	access:public	signature:()
boost::math::detail::lgamma_initializer::init	/usr/include/boost/math/special_functions/gamma.hpp	/^   struct init$/;"	s	struct:boost::math::detail::lgamma_initializer	access:public
boost::math::detail::lgamma_initializer::init::do_init	/usr/include/boost/math/special_functions/gamma.hpp	/^      static void do_init(const mpl::int_<0>&)$/;"	f	struct:boost::math::detail::lgamma_initializer::init	access:public	signature:(const mpl::int_<0>&)
boost::math::detail::lgamma_initializer::init::do_init	/usr/include/boost/math/special_functions/gamma.hpp	/^      static void do_init(const mpl::int_<113>&)$/;"	f	struct:boost::math::detail::lgamma_initializer::init	access:public	signature:(const mpl::int_<113>&)
boost::math::detail::lgamma_initializer::init::do_init	/usr/include/boost/math/special_functions/gamma.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::lgamma_initializer::init	access:public	signature:(const mpl::int_<64>&)
boost::math::detail::lgamma_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/gamma.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::lgamma_initializer::init	access:public	signature:() const
boost::math::detail::lgamma_initializer::init::init	/usr/include/boost/math/special_functions/gamma.hpp	/^      init()$/;"	f	struct:boost::math::detail::lgamma_initializer::init	access:public	signature:()
boost::math::detail::lgamma_initializer::initializer	/usr/include/boost/math/special_functions/gamma.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::lgamma_initializer	access:public
boost::math::detail::lgamma_initializer::initializer	/usr/include/boost/math/special_functions/gamma.hpp	/^const typename lgamma_initializer<T, Policy>::init lgamma_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::lgamma_initializer
boost::math::detail::lgamma_small_imp	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^T lgamma_small_imp(T z, T zm1, T zm2, const mpl::int_<0>&, const Policy& pol, const Lanczos&)$/;"	f	namespace:boost::math::detail	signature:(T z, T zm1, T zm2, const mpl::int_<0>&, const Policy& pol, const Lanczos&)
boost::math::detail::lgamma_small_imp	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^T lgamma_small_imp(T z, T zm1, T zm2, const mpl::int_<113>&, const Policy& \/* l *\/, const Lanczos&)$/;"	f	namespace:boost::math::detail	signature:(T z, T zm1, T zm2, const mpl::int_<113>&, const Policy& , const Lanczos&)
boost::math::detail::lgamma_small_imp	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^T lgamma_small_imp(T z, T zm1, T zm2, const mpl::int_<64>&, const Policy& \/* l *\/, const Lanczos&)$/;"	f	namespace:boost::math::detail	signature:(T z, T zm1, T zm2, const mpl::int_<64>&, const Policy& , const Lanczos&)
boost::math::detail::log1p_imp	/usr/include/boost/math/special_functions/log1p.hpp	/^T log1p_imp(T const & x, const Policy& pol, const mpl::int_<0>&)$/;"	f	namespace:boost::math::detail	signature:(T const & x, const Policy& pol, const mpl::int_<0>&)
boost::math::detail::log1p_imp	/usr/include/boost/math/special_functions/log1p.hpp	/^T log1p_imp(T const& x, const Policy& pol, const mpl::int_<24>&)$/;"	f	namespace:boost::math::detail	signature:(T const& x, const Policy& pol, const mpl::int_<24>&)
boost::math::detail::log1p_imp	/usr/include/boost/math/special_functions/log1p.hpp	/^T log1p_imp(T const& x, const Policy& pol, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(T const& x, const Policy& pol, const mpl::int_<53>&)
boost::math::detail::log1p_imp	/usr/include/boost/math/special_functions/log1p.hpp	/^T log1p_imp(T const& x, const Policy& pol, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(T const& x, const Policy& pol, const mpl::int_<64>&)
boost::math::detail::log1p_initializer	/usr/include/boost/math/special_functions/log1p.hpp	/^struct log1p_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::log1p_initializer::force_instantiate	/usr/include/boost/math/special_functions/log1p.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::log1p_initializer	access:public	signature:()
boost::math::detail::log1p_initializer::init	/usr/include/boost/math/special_functions/log1p.hpp	/^   struct init$/;"	s	struct:boost::math::detail::log1p_initializer	access:public
boost::math::detail::log1p_initializer::init::do_init	/usr/include/boost/math/special_functions/log1p.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::log1p_initializer::init	access:public	signature:(const mpl::int_<64>&)
boost::math::detail::log1p_initializer::init::do_init	/usr/include/boost/math/special_functions/log1p.hpp	/^      static void do_init(const mpl::int_<N>&){}$/;"	f	struct:boost::math::detail::log1p_initializer::init	access:public	signature:(const mpl::int_<N>&)
boost::math::detail::log1p_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/log1p.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::log1p_initializer::init	access:public	signature:() const
boost::math::detail::log1p_initializer::init::init	/usr/include/boost/math/special_functions/log1p.hpp	/^      init()$/;"	f	struct:boost::math::detail::log1p_initializer::init	access:public	signature:()
boost::math::detail::log1p_initializer::initializer	/usr/include/boost/math/special_functions/log1p.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::log1p_initializer	access:public
boost::math::detail::log1p_initializer::initializer	/usr/include/boost/math/special_functions/log1p.hpp	/^const typename log1p_initializer<T, Policy, tag>::init log1p_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::log1p_initializer
boost::math::detail::log1p_series	/usr/include/boost/math/special_functions/log1p.hpp	/^  struct log1p_series$/;"	s	namespace:boost::math::detail
boost::math::detail::log1p_series::count	/usr/include/boost/math/special_functions/log1p.hpp	/^     int count()const$/;"	f	struct:boost::math::detail::log1p_series	access:public	signature:() const
boost::math::detail::log1p_series::k	/usr/include/boost/math/special_functions/log1p.hpp	/^     int k;$/;"	m	struct:boost::math::detail::log1p_series	access:private
boost::math::detail::log1p_series::log1p_series	/usr/include/boost/math/special_functions/log1p.hpp	/^     log1p_series(T x)$/;"	f	struct:boost::math::detail::log1p_series	access:public	signature:(T x)
boost::math::detail::log1p_series::log1p_series	/usr/include/boost/math/special_functions/log1p.hpp	/^     log1p_series(const log1p_series&);$/;"	p	struct:boost::math::detail::log1p_series	access:private	signature:(const log1p_series&)
boost::math::detail::log1p_series::m_mult	/usr/include/boost/math/special_functions/log1p.hpp	/^     const T m_mult;$/;"	m	struct:boost::math::detail::log1p_series	access:private
boost::math::detail::log1p_series::m_prod	/usr/include/boost/math/special_functions/log1p.hpp	/^     T m_prod;$/;"	m	struct:boost::math::detail::log1p_series	access:private
boost::math::detail::log1p_series::operator ()	/usr/include/boost/math/special_functions/log1p.hpp	/^     T operator()()$/;"	f	struct:boost::math::detail::log1p_series	access:public	signature:()
boost::math::detail::log1p_series::operator =	/usr/include/boost/math/special_functions/log1p.hpp	/^     log1p_series& operator=(const log1p_series&);$/;"	p	struct:boost::math::detail::log1p_series	access:private	signature:(const log1p_series&)
boost::math::detail::log1p_series::result_type	/usr/include/boost/math/special_functions/log1p.hpp	/^     typedef T result_type;$/;"	t	struct:boost::math::detail::log1p_series	access:public
boost::math::detail::lower_gamma_series	/usr/include/boost/math/special_functions/gamma.hpp	/^inline T lower_gamma_series(T a, T z, const Policy& pol, T init_value = 0)$/;"	f	namespace:boost::math::detail	signature:(T a, T z, const Policy& pol, T init_value = 0)
boost::math::detail::lower_incomplete_gamma_series	/usr/include/boost/math/special_functions/gamma.hpp	/^struct lower_incomplete_gamma_series$/;"	s	namespace:boost::math::detail
boost::math::detail::lower_incomplete_gamma_series::a	/usr/include/boost/math/special_functions/gamma.hpp	/^   T a, z, result;$/;"	m	struct:boost::math::detail::lower_incomplete_gamma_series	access:private
boost::math::detail::lower_incomplete_gamma_series::lower_incomplete_gamma_series	/usr/include/boost/math/special_functions/gamma.hpp	/^   lower_incomplete_gamma_series(T a1, T z1) : a(a1), z(z1), result(1){}$/;"	f	struct:boost::math::detail::lower_incomplete_gamma_series	access:public	signature:(T a1, T z1)
boost::math::detail::lower_incomplete_gamma_series::operator ()	/usr/include/boost/math/special_functions/gamma.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::lower_incomplete_gamma_series	access:public	signature:()
boost::math::detail::lower_incomplete_gamma_series::result	/usr/include/boost/math/special_functions/gamma.hpp	/^   T a, z, result;$/;"	m	struct:boost::math::detail::lower_incomplete_gamma_series	access:private
boost::math::detail::lower_incomplete_gamma_series::result_type	/usr/include/boost/math/special_functions/gamma.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::lower_incomplete_gamma_series	access:public
boost::math::detail::lower_incomplete_gamma_series::z	/usr/include/boost/math/special_functions/gamma.hpp	/^   T a, z, result;$/;"	m	struct:boost::math::detail::lower_incomplete_gamma_series	access:private
boost::math::detail::mean	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T mean(T v, T delta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, const Policy& pol)
boost::math::detail::min_shift_initializer	/usr/include/boost/math/special_functions/next.hpp	/^struct min_shift_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::min_shift_initializer::force_instantiate	/usr/include/boost/math/special_functions/next.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::min_shift_initializer	access:public	signature:()
boost::math::detail::min_shift_initializer::init	/usr/include/boost/math/special_functions/next.hpp	/^   struct init$/;"	s	struct:boost::math::detail::min_shift_initializer	access:public
boost::math::detail::min_shift_initializer::init::do_init	/usr/include/boost/math/special_functions/next.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::min_shift_initializer::init	access:public	signature:()
boost::math::detail::min_shift_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/next.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::min_shift_initializer::init	access:public	signature:() const
boost::math::detail::min_shift_initializer::init::init	/usr/include/boost/math/special_functions/next.hpp	/^      init()$/;"	f	struct:boost::math::detail::min_shift_initializer::init	access:public	signature:()
boost::math::detail::min_shift_initializer::initializer	/usr/include/boost/math/special_functions/next.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::min_shift_initializer	access:public
boost::math::detail::min_shift_initializer::initializer	/usr/include/boost/math/special_functions/next.hpp	/^const typename min_shift_initializer<T>::init min_shift_initializer<T>::initializer;$/;"	m	class:boost::math::detail::min_shift_initializer
boost::math::detail::mode_fallback	/usr/include/boost/math/distributions/skew_normal.hpp	/^    inline RealType mode_fallback(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math::detail	signature:(const skew_normal_distribution<RealType, Policy>& dist)
boost::math::detail::mult_i	/usr/include/boost/math/complex/details.hpp	/^inline std::complex<T> mult_i(const std::complex<T>& t)$/;"	f	namespace:boost::math::detail	signature:(const std::complex<T>& t)
boost::math::detail::mult_minus_i	/usr/include/boost/math/complex/details.hpp	/^inline std::complex<T> mult_minus_i(const std::complex<T>& t)$/;"	f	namespace:boost::math::detail	signature:(const std::complex<T>& t)
boost::math::detail::mult_minus_one	/usr/include/boost/math/complex/details.hpp	/^inline T mult_minus_one(const T& t)$/;"	f	namespace:boost::math::detail	signature:(const T& t)
boost::math::detail::native_tag	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct native_tag {};$/;"	s	namespace:boost::math::detail
boost::math::detail::nc_beta_pdf	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType nc_beta_pdf(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math::detail	signature:(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::detail::nc_beta_quantile	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType nc_beta_quantile(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& p, bool comp)$/;"	f	namespace:boost::math::detail	signature:(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& p, bool comp)
boost::math::detail::nc_beta_quantile_functor	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         struct nc_beta_quantile_functor$/;"	s	namespace:boost::math::detail
boost::math::detail::nc_beta_quantile_functor::comp	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            bool comp;$/;"	m	struct:boost::math::detail::nc_beta_quantile_functor	access:private
boost::math::detail::nc_beta_quantile_functor::dist	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            non_central_beta_distribution<T,Policy> dist;$/;"	m	struct:boost::math::detail::nc_beta_quantile_functor	access:private
boost::math::detail::nc_beta_quantile_functor::nc_beta_quantile_functor	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            nc_beta_quantile_functor(const non_central_beta_distribution<T,Policy>& d, T t, bool c)$/;"	f	struct:boost::math::detail::nc_beta_quantile_functor	access:public	signature:(const non_central_beta_distribution<T,Policy>& d, T t, bool c)
boost::math::detail::nc_beta_quantile_functor::operator ()	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T operator()(const T& x)$/;"	f	struct:boost::math::detail::nc_beta_quantile_functor	access:public	signature:(const T& x)
boost::math::detail::nc_beta_quantile_functor::target	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T target;$/;"	m	struct:boost::math::detail::nc_beta_quantile_functor	access:private
boost::math::detail::nccs_pdf	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         RealType nccs_pdf(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math::detail	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::detail::nccs_quantile	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         RealType nccs_quantile(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& p, bool comp)$/;"	f	namespace:boost::math::detail	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& p, bool comp)
boost::math::detail::nccs_quantile_functor	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         struct nccs_quantile_functor$/;"	s	namespace:boost::math::detail
boost::math::detail::nccs_quantile_functor::comp	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            bool comp;$/;"	m	struct:boost::math::detail::nccs_quantile_functor	access:private
boost::math::detail::nccs_quantile_functor::dist	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            non_central_chi_squared_distribution<T,Policy> dist;$/;"	m	struct:boost::math::detail::nccs_quantile_functor	access:private
boost::math::detail::nccs_quantile_functor::nccs_quantile_functor	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            nccs_quantile_functor(const non_central_chi_squared_distribution<T,Policy>& d, T t, bool c)$/;"	f	struct:boost::math::detail::nccs_quantile_functor	access:public	signature:(const non_central_chi_squared_distribution<T,Policy>& d, T t, bool c)
boost::math::detail::nccs_quantile_functor::operator ()	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            T operator()(const T& x)$/;"	f	struct:boost::math::detail::nccs_quantile_functor	access:public	signature:(const T& x)
boost::math::detail::nccs_quantile_functor::target	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            T target;$/;"	m	struct:boost::math::detail::nccs_quantile_functor	access:private
boost::math::detail::need_i	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   need_i = 1,$/;"	e	enum:boost::math::detail::__anon1
boost::math::detail::need_j	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^static const int need_j = 1;$/;"	m	namespace:boost::math::detail
boost::math::detail::need_k	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   need_k = 2$/;"	e	enum:boost::math::detail::__anon1
boost::math::detail::need_y	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^static const int need_y = 2;$/;"	m	namespace:boost::math::detail
boost::math::detail::non_central_beta_cdf	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         inline RealType non_central_beta_cdf(RealType x, RealType y, RealType a, RealType b, RealType l, bool invert, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(RealType x, RealType y, RealType a, RealType b, RealType l, bool invert, const Policy&)
boost::math::detail::non_central_beta_p	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         T non_central_beta_p(T a, T b, T lam, T x, T y, const Policy& pol, T init_val = 0)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T lam, T x, T y, const Policy& pol, T init_val = 0)
boost::math::detail::non_central_beta_pdf	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         T non_central_beta_pdf(T a, T b, T lam, T x, T y, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T lam, T x, T y, const Policy& pol)
boost::math::detail::non_central_beta_q	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         T non_central_beta_q(T a, T b, T lam, T x, T y, const Policy& pol, T init_val = 0)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T lam, T x, T y, const Policy& pol, T init_val = 0)
boost::math::detail::non_central_chi_square_p	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         T non_central_chi_square_p(T y, T n, T lambda, const Policy& pol, T init_sum)$/;"	f	namespace:boost::math::detail	signature:(T y, T n, T lambda, const Policy& pol, T init_sum)
boost::math::detail::non_central_chi_square_p_ding	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         T non_central_chi_square_p_ding(T x, T f, T theta, const Policy& pol, T init_sum = 0)$/;"	f	namespace:boost::math::detail	signature:(T x, T f, T theta, const Policy& pol, T init_sum = 0)
boost::math::detail::non_central_chi_square_pdf	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         T non_central_chi_square_pdf(T x, T n, T lambda, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, T n, T lambda, const Policy& pol)
boost::math::detail::non_central_chi_square_q	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         T non_central_chi_square_q(T x, T f, T theta, const Policy& pol, T init_sum = 0)$/;"	f	namespace:boost::math::detail	signature:(T x, T f, T theta, const Policy& pol, T init_sum = 0)
boost::math::detail::non_central_chi_squared_cdf	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         inline RealType non_central_chi_squared_cdf(RealType x, RealType k, RealType l, bool invert, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(RealType x, RealType k, RealType l, bool invert, const Policy&)
boost::math::detail::non_central_t2_p	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T non_central_t2_p(T v, T delta, T x, T y, const Policy& pol, T init_val)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, T x, T y, const Policy& pol, T init_val)
boost::math::detail::non_central_t2_pdf	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T non_central_t2_pdf(T n, T delta, T x, T y, const Policy& pol, T init_val)$/;"	f	namespace:boost::math::detail	signature:(T n, T delta, T x, T y, const Policy& pol, T init_val)
boost::math::detail::non_central_t2_q	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T non_central_t2_q(T v, T delta, T x, T y, const Policy& pol, T init_val)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, T x, T y, const Policy& pol, T init_val)
boost::math::detail::non_central_t_cdf	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T non_central_t_cdf(T v, T delta, T t, bool invert, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, T t, bool invert, const Policy& pol)
boost::math::detail::non_central_t_pdf	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T non_central_t_pdf(T n, T delta, T t, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T n, T delta, T t, const Policy& pol)
boost::math::detail::non_central_t_quantile	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T non_central_t_quantile(const char* function, T v, T delta, T p, T q, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(const char* function, T v, T delta, T p, T q, const Policy&)
boost::math::detail::non_centrality_finder	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         struct non_centrality_finder$/;"	s	namespace:boost::math::detail
boost::math::detail::non_centrality_finder::comp	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            bool comp;$/;"	m	struct:boost::math::detail::non_centrality_finder	access:private
boost::math::detail::non_centrality_finder::non_centrality_finder	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            non_centrality_finder($/;"	f	struct:boost::math::detail::non_centrality_finder	access:public	signature:( RealType v_, RealType x_, RealType p_, bool c)
boost::math::detail::non_centrality_finder::operator ()	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType operator()(const RealType& lam)$/;"	f	struct:boost::math::detail::non_centrality_finder	access:public	signature:(const RealType& lam)
boost::math::detail::non_centrality_finder::p	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType p;$/;"	m	struct:boost::math::detail::non_centrality_finder	access:private
boost::math::detail::non_centrality_finder::v	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType v;$/;"	m	struct:boost::math::detail::non_centrality_finder	access:private
boost::math::detail::non_centrality_finder::x	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType x;$/;"	m	struct:boost::math::detail::non_centrality_finder	access:private
boost::math::detail::octonion_type_converter	/usr/include/boost/math/octonion.hpp	/^            octonion<T>    octonion_type_converter(octonion<U> const & rhs)$/;"	f	namespace:boost::math::detail	signature:(octonion<U> const & rhs)
boost::math::detail::octonion_type_converter	/usr/include/boost/math/octonion.hpp	/^            octonion<T>    octonion_type_converter(octonion<U> const & rhs);$/;"	p	namespace:boost::math::detail	signature:(octonion<U> const & rhs)
boost::math::detail::owens_t	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t(RealType h, RealType a, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(RealType h, RealType a, const Policy& pol)
boost::math::detail::owens_t_T1	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T1(const RealType h, const RealType a, const unsigned short m)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const unsigned short m)
boost::math::detail::owens_t_T1_accelerated	/usr/include/boost/math/special_functions/owens_t.hpp	/^         std::pair<T, T> owens_t_T1_accelerated(T h, T a, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T h, T a, const Policy& pol)
boost::math::detail::owens_t_T2	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T2(const RealType h, const RealType a, const unsigned short m, const RealType ah, const Policy&, const mpl::false_&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const unsigned short m, const RealType ah, const Policy&, const mpl::false_&)
boost::math::detail::owens_t_T2	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T2(const RealType h, const RealType a, const unsigned short m, const RealType ah, const Policy&, const mpl::true_&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const unsigned short m, const RealType ah, const Policy&, const mpl::true_&)
boost::math::detail::owens_t_T2_accelerated	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline std::pair<RealType, RealType> owens_t_T2_accelerated(const RealType h, const RealType a, const RealType ah, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const Policy&)
boost::math::detail::owens_t_T3	/usr/include/boost/math/special_functions/owens_t.hpp	/^        inline RealType owens_t_T3(const RealType h, const RealType a, const RealType ah, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const Policy&)
boost::math::detail::owens_t_T3_imp	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T3_imp(const RealType h, const RealType a, const RealType ah, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const mpl::int_<53>&)
boost::math::detail::owens_t_T3_imp	/usr/include/boost/math/special_functions/owens_t.hpp	/^        inline RealType owens_t_T3_imp(const RealType h, const RealType a, const RealType ah, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const mpl::int_<64>&)
boost::math::detail::owens_t_T4	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T4(const RealType h, const RealType a, const unsigned short m)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const unsigned short m)
boost::math::detail::owens_t_T5	/usr/include/boost/math/special_functions/owens_t.hpp	/^        inline RealType owens_t_T5(const RealType h, const RealType a, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const Policy&)
boost::math::detail::owens_t_T5_imp	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T5_imp(const RealType h, const RealType a, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const mpl::int_<53>&)
boost::math::detail::owens_t_T5_imp	/usr/include/boost/math/special_functions/owens_t.hpp	/^        inline RealType owens_t_T5_imp(const RealType h, const RealType a, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const mpl::int_<64>&)
boost::math::detail::owens_t_T6	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T6(const RealType h, const RealType a)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a)
boost::math::detail::owens_t_compute_code	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline unsigned short owens_t_compute_code(const RealType h, const RealType a)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a)
boost::math::detail::owens_t_dispatch	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_dispatch(const RealType h, const RealType a, const RealType ah, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const Policy& pol)
boost::math::detail::owens_t_dispatch	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_dispatch(const RealType h, const RealType a, const RealType ah, const Policy& pol, const mpl::int_<0>&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const Policy& pol, const mpl::int_<0>&)
boost::math::detail::owens_t_dispatch	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_dispatch(const RealType h, const RealType a, const RealType ah, const Policy& pol, const mpl::int_<65>&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const Policy& pol, const mpl::int_<65>&)
boost::math::detail::owens_t_dispatch	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_dispatch(const RealType h, const RealType a, const RealType ah, const Policy& pol, mpl::int_<64> const&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const Policy& pol, mpl::int_<64> const&)
boost::math::detail::owens_t_get_order	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline unsigned short owens_t_get_order(const unsigned short icode, RealType r, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(const unsigned short icode, RealType r, const Policy&)
boost::math::detail::owens_t_get_order_imp	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline unsigned short owens_t_get_order_imp(const unsigned short icode, RealType, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const unsigned short icode, RealType, const mpl::int_<53>&)
boost::math::detail::owens_t_get_order_imp	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline unsigned short owens_t_get_order_imp(const unsigned short icode, RealType, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const unsigned short icode, RealType, const mpl::int_<64>&)
boost::math::detail::owens_t_initializer	/usr/include/boost/math/special_functions/owens_t.hpp	/^         struct owens_t_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::owens_t_initializer::force_instantiate	/usr/include/boost/math/special_functions/owens_t.hpp	/^            static void force_instantiate()$/;"	f	struct:boost::math::detail::owens_t_initializer	access:public	signature:()
boost::math::detail::owens_t_initializer::init	/usr/include/boost/math/special_functions/owens_t.hpp	/^            struct init$/;"	s	struct:boost::math::detail::owens_t_initializer	access:public
boost::math::detail::owens_t_initializer::init::do_init	/usr/include/boost/math/special_functions/owens_t.hpp	/^               static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::owens_t_initializer::init	access:public	signature:(const mpl::int_<64>&)
boost::math::detail::owens_t_initializer::init::do_init	/usr/include/boost/math/special_functions/owens_t.hpp	/^               static void do_init(const mpl::int_<N>&){}$/;"	f	struct:boost::math::detail::owens_t_initializer::init	access:public	signature:(const mpl::int_<N>&)
boost::math::detail::owens_t_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/owens_t.hpp	/^               void force_instantiate()const{}$/;"	f	struct:boost::math::detail::owens_t_initializer::init	access:public	signature:() const
boost::math::detail::owens_t_initializer::init::init	/usr/include/boost/math/special_functions/owens_t.hpp	/^               init()$/;"	f	struct:boost::math::detail::owens_t_initializer::init	access:public	signature:()
boost::math::detail::owens_t_initializer::initializer	/usr/include/boost/math/special_functions/owens_t.hpp	/^            static const init initializer;$/;"	m	struct:boost::math::detail::owens_t_initializer	access:public
boost::math::detail::owens_t_initializer::initializer	/usr/include/boost/math/special_functions/owens_t.hpp	/^         const typename owens_t_initializer<T, Policy, tag>::init owens_t_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::owens_t_initializer
boost::math::detail::owens_t_znorm1	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_znorm1(const RealType x)$/;"	f	namespace:boost::math::detail	signature:(const RealType x)
boost::math::detail::owens_t_znorm2	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_znorm2(const RealType x)$/;"	f	namespace:boost::math::detail	signature:(const RealType x)
boost::math::detail::pdf_minimizer	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^struct pdf_minimizer$/;"	s	namespace:boost::math::detail
boost::math::detail::pdf_minimizer::dist	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^   Dist dist;$/;"	m	struct:boost::math::detail::pdf_minimizer	access:private
boost::math::detail::pdf_minimizer::operator ()	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^   typename Dist::value_type operator()(const typename Dist::value_type& x)$/;"	f	struct:boost::math::detail::pdf_minimizer	access:public	signature:(const typename Dist::value_type& x)
boost::math::detail::pdf_minimizer::pdf_minimizer	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^   pdf_minimizer(const Dist& d)$/;"	f	struct:boost::math::detail::pdf_minimizer	access:public	signature:(const Dist& d)
boost::math::detail::positive_power	/usr/include/boost/math/special_functions/pow.hpp	/^struct positive_power$/;"	s	namespace:boost::math::detail
boost::math::detail::positive_power	/usr/include/boost/math/special_functions/pow.hpp	/^struct positive_power<1, 1>$/;"	s	namespace:boost::math::detail
boost::math::detail::positive_power	/usr/include/boost/math/special_functions/pow.hpp	/^struct positive_power<N, 1>$/;"	s	namespace:boost::math::detail
boost::math::detail::positive_power::result	/usr/include/boost/math/special_functions/pow.hpp	/^    static T result(T base)$/;"	f	struct:boost::math::detail::positive_power	access:public	signature:(T base)
boost::math::detail::positive_power::result	/usr/include/boost/math/special_functions/pow.hpp	/^    static T result(T base){ return base; }$/;"	f	struct:boost::math::detail::positive_power	access:public	signature:(T base)
boost::math::detail::power_if_positive	/usr/include/boost/math/special_functions/pow.hpp	/^struct power_if_positive$/;"	s	namespace:boost::math::detail
boost::math::detail::power_if_positive	/usr/include/boost/math/special_functions/pow.hpp	/^struct power_if_positive<0, true>$/;"	s	namespace:boost::math::detail
boost::math::detail::power_if_positive	/usr/include/boost/math/special_functions/pow.hpp	/^struct power_if_positive<N, false>$/;"	s	namespace:boost::math::detail
boost::math::detail::power_if_positive::result	/usr/include/boost/math/special_functions/pow.hpp	/^    static T result(T base, const Policy& policy)$/;"	f	struct:boost::math::detail::power_if_positive	access:public	signature:(T base, const Policy& policy)
boost::math::detail::power_if_positive::result	/usr/include/boost/math/special_functions/pow.hpp	/^    static T result(T base, const Policy&)$/;"	f	struct:boost::math::detail::power_if_positive	access:public	signature:(T base, const Policy&)
boost::math::detail::powm1_imp	/usr/include/boost/math/special_functions/powm1.hpp	/^inline T powm1_imp(const T a, const T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T a, const T z, const Policy& pol)
boost::math::detail::quantile_imp	/usr/include/boost/math/distributions/cauchy.hpp	/^RealType quantile_imp($/;"	f	namespace:boost::math::detail	signature:( const cauchy_distribution<RealType, Policy>& dist, const RealType& p, bool complement)
boost::math::detail::quaternion_type_converter	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T>    quaternion_type_converter(quaternion<U> const & rhs)$/;"	f	namespace:boost::math::detail	signature:(quaternion<U> const & rhs)
boost::math::detail::quaternion_type_converter	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T>    quaternion_type_converter(quaternion<U> const & rhs);$/;"	p	namespace:boost::math::detail	signature:(quaternion<U> const & rhs)
boost::math::detail::regularised_gamma_prefix	/usr/include/boost/math/special_functions/gamma.hpp	/^T regularised_gamma_prefix(T a, T z, const Policy& pol, const Lanczos& l)$/;"	f	namespace:boost::math::detail	signature:(T a, T z, const Policy& pol, const Lanczos& l)
boost::math::detail::regularised_gamma_prefix	/usr/include/boost/math/special_functions/gamma.hpp	/^T regularised_gamma_prefix(T a, T z, const Policy& pol, const lanczos::undefined_lanczos&)$/;"	f	namespace:boost::math::detail	signature:(T a, T z, const Policy& pol, const lanczos::undefined_lanczos&)
boost::math::detail::rising_factorial_imp	/usr/include/boost/math/special_functions/factorials.hpp	/^T rising_factorial_imp(T x, int n, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, int n, const Policy& pol)
boost::math::detail::rising_factorial_ratio	/usr/include/boost/math/special_functions/beta.hpp	/^inline T rising_factorial_ratio(T a, T b, int k)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, int k)
boost::math::detail::round_x_from_p	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_p(unsigned x, T \/*p*\/, T \/*cum*\/, T \/*fudge_factor*\/, unsigned \/*lbound*\/, unsigned \/*ubound*\/, const policies::discrete_quantile<policies::integer_round_nearest>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T , T , T , unsigned , unsigned , const policies::discrete_quantile<policies::integer_round_nearest>&)
boost::math::detail::round_x_from_p	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_p(unsigned x, T p, T cum, T fudge_factor, unsigned \/*lbound*\/, unsigned ubound, const policies::discrete_quantile<policies::integer_round_up>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T p, T cum, T fudge_factor, unsigned , unsigned ubound, const policies::discrete_quantile<policies::integer_round_up>&)
boost::math::detail::round_x_from_p	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_p(unsigned x, T p, T cum, T fudge_factor, unsigned lbound, unsigned \/*ubound*\/, const policies::discrete_quantile<policies::integer_round_down>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T p, T cum, T fudge_factor, unsigned lbound, unsigned , const policies::discrete_quantile<policies::integer_round_down>&)
boost::math::detail::round_x_from_p	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_p(unsigned x, T p, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_inwards>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T p, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_inwards>&)
boost::math::detail::round_x_from_p	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_p(unsigned x, T p, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_outwards>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T p, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_outwards>&)
boost::math::detail::round_x_from_q	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_q(unsigned x, T \/*q*\/, T \/*cum*\/, T \/*fudge_factor*\/, unsigned \/*lbound*\/, unsigned \/*ubound*\/, const policies::discrete_quantile<policies::integer_round_nearest>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T , T , T , unsigned , unsigned , const policies::discrete_quantile<policies::integer_round_nearest>&)
boost::math::detail::round_x_from_q	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_q(unsigned x, T q, T cum, T fudge_factor, unsigned \/*lbound*\/, unsigned ubound, const policies::discrete_quantile<policies::integer_round_up>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T q, T cum, T fudge_factor, unsigned , unsigned ubound, const policies::discrete_quantile<policies::integer_round_up>&)
boost::math::detail::round_x_from_q	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_q(unsigned x, T q, T cum, T fudge_factor, unsigned lbound, unsigned \/*ubound*\/, const policies::discrete_quantile<policies::integer_round_down>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T q, T cum, T fudge_factor, unsigned lbound, unsigned , const policies::discrete_quantile<policies::integer_round_down>&)
boost::math::detail::round_x_from_q	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_q(unsigned x, T q, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_inwards>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T q, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_inwards>&)
boost::math::detail::round_x_from_q	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_q(unsigned x, T q, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_outwards>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T q, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_outwards>&)
boost::math::detail::safe_max	/usr/include/boost/math/complex/details.hpp	/^inline T safe_max(T t)$/;"	f	namespace:boost::math::detail	signature:(T t)
boost::math::detail::safe_max	/usr/include/boost/math/complex/details.hpp	/^inline double safe_max(double t)$/;"	f	namespace:boost::math::detail	signature:(double t)
boost::math::detail::safe_max	/usr/include/boost/math/complex/details.hpp	/^inline float safe_max(float t)$/;"	f	namespace:boost::math::detail	signature:(float t)
boost::math::detail::safe_max	/usr/include/boost/math/complex/details.hpp	/^inline long double safe_max(long double t)$/;"	f	namespace:boost::math::detail	signature:(long double t)
boost::math::detail::safe_min	/usr/include/boost/math/complex/details.hpp	/^inline T safe_min(T t)$/;"	f	namespace:boost::math::detail	signature:(T t)
boost::math::detail::safe_min	/usr/include/boost/math/complex/details.hpp	/^inline double safe_min(double t)$/;"	f	namespace:boost::math::detail	signature:(double t)
boost::math::detail::safe_min	/usr/include/boost/math/complex/details.hpp	/^inline float safe_min(float t)$/;"	f	namespace:boost::math::detail	signature:(float t)
boost::math::detail::safe_min	/usr/include/boost/math/complex/details.hpp	/^inline long double safe_min(long double t)$/;"	f	namespace:boost::math::detail	signature:(long double t)
boost::math::detail::sample_size_func	/usr/include/boost/math/distributions/students_t.hpp	/^struct sample_size_func$/;"	s	namespace:boost::math::detail
boost::math::detail::sample_size_func::alpha	/usr/include/boost/math/distributions/students_t.hpp	/^   RealType alpha, beta, ratio;$/;"	m	struct:boost::math::detail::sample_size_func	access:public
boost::math::detail::sample_size_func::beta	/usr/include/boost/math/distributions/students_t.hpp	/^   RealType alpha, beta, ratio;$/;"	m	struct:boost::math::detail::sample_size_func	access:public
boost::math::detail::sample_size_func::operator ()	/usr/include/boost/math/distributions/students_t.hpp	/^   RealType operator()(const RealType& df)$/;"	f	struct:boost::math::detail::sample_size_func	access:public	signature:(const RealType& df)
boost::math::detail::sample_size_func::ratio	/usr/include/boost/math/distributions/students_t.hpp	/^   RealType alpha, beta, ratio;$/;"	m	struct:boost::math::detail::sample_size_func	access:public
boost::math::detail::sample_size_func::sample_size_func	/usr/include/boost/math/distributions/students_t.hpp	/^   sample_size_func(RealType a, RealType b, RealType s, RealType d)$/;"	f	struct:boost::math::detail::sample_size_func	access:public	signature:(RealType a, RealType b, RealType s, RealType d)
boost::math::detail::select_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct select_native$/;"	s	namespace:boost::math::detail
boost::math::detail::select_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct select_native<double>$/;"	s	namespace:boost::math::detail
boost::math::detail::select_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct select_native<float>$/;"	s	namespace:boost::math::detail
boost::math::detail::select_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct select_native<long double>$/;"	s	namespace:boost::math::detail
boost::math::detail::select_native::precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef BOOST_DEDUCED_TYPENAME size_to_precision<sizeof(T), ::boost::is_floating_point<T>::value>::type precision;$/;"	t	struct:boost::math::detail::select_native	access:public
boost::math::detail::select_native::type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef fp_traits_native<double> type;$/;"	t	struct:boost::math::detail::select_native	access:public
boost::math::detail::select_native::type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef fp_traits_native<float> type;$/;"	t	struct:boost::math::detail::select_native	access:public
boost::math::detail::select_native::type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef fp_traits_native<long double> type;$/;"	t	struct:boost::math::detail::select_native	access:public
boost::math::detail::select_native::type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef fp_traits_non_native<T, precision> type;$/;"	t	struct:boost::math::detail::select_native	access:public
boost::math::detail::select_power_if_positive	/usr/include/boost/math/special_functions/pow.hpp	/^struct select_power_if_positive$/;"	s	namespace:boost::math::detail
boost::math::detail::select_power_if_positive::is_positive	/usr/include/boost/math/special_functions/pow.hpp	/^                     >::type is_positive;$/;"	t	struct:boost::math::detail::select_power_if_positive	access:public
boost::math::detail::select_power_if_positive::type	/usr/include/boost/math/special_functions/pow.hpp	/^    typedef power_if_positive<N, is_positive::value> type;$/;"	t	struct:boost::math::detail::select_power_if_positive	access:public
boost::math::detail::signbit_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline int signbit_impl(T x, generic_tag<false> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<false> const&)
boost::math::detail::signbit_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline int signbit_impl(T x, generic_tag<true> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<true> const&)
boost::math::detail::signbit_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline int signbit_impl(T x, ieee_copy_all_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_all_bits_tag const&)
boost::math::detail::signbit_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline int signbit_impl(T x, ieee_copy_leading_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_leading_bits_tag const&)
boost::math::detail::signbit_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline int signbit_impl(T x, native_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, native_tag const&)
boost::math::detail::sin_pi_imp	/usr/include/boost/math/special_functions/sin_pi.hpp	/^T sin_pi_imp(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
boost::math::detail::sinc_pi_imp	/usr/include/boost/math/special_functions/sinc.hpp	/^        inline T    sinc_pi_imp(const T x)$/;"	f	namespace:boost::math::detail	signature:(const T x)
boost::math::detail::single_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct single_precision {};$/;"	s	namespace:boost::math::detail
boost::math::detail::sinhc_pi_imp	/usr/include/boost/math/special_functions/sinhc.hpp	/^        inline T    sinhc_pi_imp(const T x)$/;"	f	namespace:boost::math::detail	signature:(const T x)
boost::math::detail::sinpx	/usr/include/boost/math/special_functions/gamma.hpp	/^T sinpx(T z)$/;"	f	namespace:boost::math::detail	signature:(T z)
boost::math::detail::size_to_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct size_to_precision<10, true>$/;"	s	namespace:boost::math::detail
boost::math::detail::size_to_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct size_to_precision<12, true>$/;"	s	namespace:boost::math::detail
boost::math::detail::size_to_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct size_to_precision<16, true>$/;"	s	namespace:boost::math::detail
boost::math::detail::size_to_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct size_to_precision<4, true>$/;"	s	namespace:boost::math::detail
boost::math::detail::size_to_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct size_to_precision<8, true>$/;"	s	namespace:boost::math::detail
boost::math::detail::size_to_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<int n, bool fp> struct size_to_precision$/;"	s	namespace:boost::math::detail
boost::math::detail::size_to_precision::type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef double_precision type;$/;"	t	struct:boost::math::detail::size_to_precision	access:public
boost::math::detail::size_to_precision::type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef extended_double_precision type;$/;"	t	struct:boost::math::detail::size_to_precision	access:public
boost::math::detail::size_to_precision::type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef single_precision type;$/;"	t	struct:boost::math::detail::size_to_precision	access:public
boost::math::detail::size_to_precision::type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^   typedef unknown_precision type;$/;"	t	struct:boost::math::detail::size_to_precision	access:public
boost::math::detail::skew_normal_mode_functor	/usr/include/boost/math/distributions/skew_normal.hpp	/^    struct skew_normal_mode_functor$/;"	s	namespace:boost::math::detail
boost::math::detail::skew_normal_mode_functor::distribution	/usr/include/boost/math/distributions/skew_normal.hpp	/^      const boost::math::skew_normal_distribution<RealType, Policy> distribution;$/;"	m	struct:boost::math::detail::skew_normal_mode_functor	access:private
boost::math::detail::skew_normal_mode_functor::operator ()	/usr/include/boost/math/distributions/skew_normal.hpp	/^      boost::math::tuple<RealType, RealType> operator()(RealType const& x)$/;"	f	struct:boost::math::detail::skew_normal_mode_functor	access:public	signature:(RealType const& x)
boost::math::detail::skew_normal_mode_functor::skew_normal_mode_functor	/usr/include/boost/math/distributions/skew_normal.hpp	/^      skew_normal_mode_functor(const boost::math::skew_normal_distribution<RealType, Policy> dist)$/;"	f	struct:boost::math::detail::skew_normal_mode_functor	access:public	signature:(const boost::math::skew_normal_distribution<RealType, Policy> dist)
boost::math::detail::skew_normal_quantile_functor	/usr/include/boost/math/distributions/skew_normal.hpp	/^    struct skew_normal_quantile_functor$/;"	s	namespace:boost::math::detail
boost::math::detail::skew_normal_quantile_functor::distribution	/usr/include/boost/math/distributions/skew_normal.hpp	/^      const boost::math::skew_normal_distribution<RealType, Policy> distribution;$/;"	m	struct:boost::math::detail::skew_normal_quantile_functor	access:private
boost::math::detail::skew_normal_quantile_functor::operator ()	/usr/include/boost/math/distributions/skew_normal.hpp	/^      boost::math::tuple<RealType, RealType> operator()(RealType const& x)$/;"	f	struct:boost::math::detail::skew_normal_quantile_functor	access:public	signature:(RealType const& x)
boost::math::detail::skew_normal_quantile_functor::prob	/usr/include/boost/math/distributions/skew_normal.hpp	/^      RealType prob; $/;"	m	struct:boost::math::detail::skew_normal_quantile_functor	access:private
boost::math::detail::skew_normal_quantile_functor::skew_normal_quantile_functor	/usr/include/boost/math/distributions/skew_normal.hpp	/^      skew_normal_quantile_functor(const boost::math::skew_normal_distribution<RealType, Policy> dist, RealType const& p)$/;"	f	struct:boost::math::detail::skew_normal_quantile_functor	access:public	signature:(const boost::math::skew_normal_distribution<RealType, Policy> dist, RealType const& p)
boost::math::detail::skewness	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T skewness(T v, T delta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, const Policy& pol)
boost::math::detail::small_gamma2_series	/usr/include/boost/math/special_functions/gamma.hpp	/^struct small_gamma2_series$/;"	s	namespace:boost::math::detail
boost::math::detail::small_gamma2_series::apn	/usr/include/boost/math/special_functions/gamma.hpp	/^   T result, x, apn;$/;"	m	struct:boost::math::detail::small_gamma2_series	access:private
boost::math::detail::small_gamma2_series::n	/usr/include/boost/math/special_functions/gamma.hpp	/^   int n;$/;"	m	struct:boost::math::detail::small_gamma2_series	access:private
boost::math::detail::small_gamma2_series::operator ()	/usr/include/boost/math/special_functions/gamma.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::small_gamma2_series	access:public	signature:()
boost::math::detail::small_gamma2_series::result	/usr/include/boost/math/special_functions/gamma.hpp	/^   T result, x, apn;$/;"	m	struct:boost::math::detail::small_gamma2_series	access:private
boost::math::detail::small_gamma2_series::result_type	/usr/include/boost/math/special_functions/gamma.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::small_gamma2_series	access:public
boost::math::detail::small_gamma2_series::small_gamma2_series	/usr/include/boost/math/special_functions/gamma.hpp	/^   small_gamma2_series(T a_, T x_) : result(-x_), x(-x_), apn(a_+1), n(1){}$/;"	f	struct:boost::math::detail::small_gamma2_series	access:public	signature:(T a_, T x_)
boost::math::detail::small_gamma2_series::x	/usr/include/boost/math/special_functions/gamma.hpp	/^   T result, x, apn;$/;"	m	struct:boost::math::detail::small_gamma2_series	access:private
boost::math::detail::sort_functor	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^struct sort_functor$/;"	s	namespace:boost::math::detail
boost::math::detail::sort_functor::m_exponents	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   const T* m_exponents;$/;"	m	struct:boost::math::detail::sort_functor	access:private
boost::math::detail::sort_functor::operator ()	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   bool operator()(int i, int j)$/;"	f	struct:boost::math::detail::sort_functor	access:public	signature:(int i, int j)
boost::math::detail::sort_functor::sort_functor	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   sort_functor(const T* exponents) : m_exponents(exponents){}$/;"	f	struct:boost::math::detail::sort_functor	access:public	signature:(const T* exponents)
boost::math::detail::sph_bessel_j_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T sph_bessel_j_imp(unsigned n, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T x, const Policy& pol)
boost::math::detail::sph_bessel_j_small_z_series	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T sph_bessel_j_small_z_series(unsigned v, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned v, T x, const Policy& pol)
boost::math::detail::sph_bessel_j_small_z_series_term	/usr/include/boost/math/special_functions/bessel.hpp	/^struct sph_bessel_j_small_z_series_term$/;"	s	namespace:boost::math::detail
boost::math::detail::sph_bessel_j_small_z_series_term::N	/usr/include/boost/math/special_functions/bessel.hpp	/^   unsigned N;$/;"	m	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:private
boost::math::detail::sph_bessel_j_small_z_series_term::mult	/usr/include/boost/math/special_functions/bessel.hpp	/^   T mult;$/;"	m	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:private
boost::math::detail::sph_bessel_j_small_z_series_term::operator ()	/usr/include/boost/math/special_functions/bessel.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:public	signature:()
boost::math::detail::sph_bessel_j_small_z_series_term::result_type	/usr/include/boost/math/special_functions/bessel.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:public
boost::math::detail::sph_bessel_j_small_z_series_term::sph_bessel_j_small_z_series_term	/usr/include/boost/math/special_functions/bessel.hpp	/^   sph_bessel_j_small_z_series_term(unsigned v_, T x)$/;"	f	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:public	signature:(unsigned v_, T x)
boost::math::detail::sph_bessel_j_small_z_series_term::term	/usr/include/boost/math/special_functions/bessel.hpp	/^   T term;$/;"	m	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:private
boost::math::detail::sph_bessel_j_small_z_series_term::v	/usr/include/boost/math/special_functions/bessel.hpp	/^   unsigned v;$/;"	m	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:private
boost::math::detail::sph_hankel_imp	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<T> sph_hankel_imp(T v, T x, const Policy& pol, int sign)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const Policy& pol, int sign)
boost::math::detail::sph_neumann_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T sph_neumann_imp(unsigned v, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned v, T x, const Policy& pol)
boost::math::detail::spherical_harmonic	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^std::complex<T> spherical_harmonic(unsigned n, int m, U theta, U phi, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, int m, U theta, U phi, const Policy& pol)
boost::math::detail::spherical_harmonic_i	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^T spherical_harmonic_i(unsigned n, int m, T theta, T phi, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, int m, T theta, T phi, const Policy& pol)
boost::math::detail::spherical_harmonic_prefix	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^inline T spherical_harmonic_prefix(unsigned n, unsigned m, T theta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, unsigned m, T theta, const Policy& pol)
boost::math::detail::spherical_harmonic_r	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^T spherical_harmonic_r(unsigned n, int m, T theta, T phi, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, int m, T theta, T phi, const Policy& pol)
boost::math::detail::static_gcd_helper_t	/usr/include/boost/math/common_factor_ct.hpp	/^    struct static_gcd_helper_t$/;"	s	namespace:boost::math::detail
boost::math::detail::static_gcd_helper_t	/usr/include/boost/math/common_factor_ct.hpp	/^    struct static_gcd_helper_t< Value1, 0UL >$/;"	s	namespace:boost::math::detail
boost::math::detail::static_gcd_helper_t::BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, new_value1 = Value2 );$/;"	p	struct:boost::math::detail::static_gcd_helper_t	access:private	signature:( static_gcd_type, new_value1 = Value2 )
boost::math::detail::static_gcd_helper_t::BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, new_value2 = Value1 % Value2 );$/;"	p	struct:boost::math::detail::static_gcd_helper_t	access:private	signature:( static_gcd_type, new_value2 = Value1 % Value2 )
boost::math::detail::static_gcd_helper_t::BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, value = Value1 );$/;"	p	struct:boost::math::detail::static_gcd_helper_t	access:public	signature:( static_gcd_type, value = Value1 )
boost::math::detail::static_gcd_helper_t::BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, value = next_step_type::value );$/;"	p	struct:boost::math::detail::static_gcd_helper_t	access:public	signature:( static_gcd_type, value = next_step_type::value )
boost::math::detail::static_gcd_helper_t::next_step_type	/usr/include/boost/math/common_factor_ct.hpp	/^         BOOST_DETAIL_GCD_HELPER_VAL(new_value2) >  next_step_type;$/;"	t	struct:boost::math::detail::static_gcd_helper_t	access:private
boost::math::detail::static_gcd_helper_t::self_type	/usr/include/boost/math/common_factor_ct.hpp	/^        typedef static_gcd_helper_t  self_type;$/;"	t	struct:boost::math::detail::static_gcd_helper_t	access:private
boost::math::detail::static_lcm_helper2_t	/usr/include/boost/math/common_factor_ct.hpp	/^    struct static_lcm_helper2_t$/;"	s	namespace:boost::math::detail
boost::math::detail::static_lcm_helper2_t	/usr/include/boost/math/common_factor_ct.hpp	/^    struct static_lcm_helper2_t< 0UL >$/;"	s	namespace:boost::math::detail
boost::math::detail::static_lcm_helper2_t::helper	/usr/include/boost/math/common_factor_ct.hpp	/^        struct helper$/;"	s	struct:boost::math::detail::static_lcm_helper2_t	access:public
boost::math::detail::static_lcm_helper2_t::helper	/usr/include/boost/math/common_factor_ct.hpp	/^        struct helper< 0UL >$/;"	s	struct:boost::math::detail::static_lcm_helper2_t	access:public
boost::math::detail::static_lcm_helper2_t::helper::BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^            BOOST_STATIC_CONSTANT( static_gcd_type, value = 0UL );$/;"	p	struct:boost::math::detail::static_lcm_helper2_t::helper	access:public	signature:( static_gcd_type, value = 0UL )
boost::math::detail::static_lcm_helper2_t::helper::BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^            BOOST_STATIC_CONSTANT( static_gcd_type, value = Value1$/;"	p	struct:boost::math::detail::static_lcm_helper2_t::helper	access:public	signature:( static_gcd_type, value = Value1 / gcd_type::value * Value2 )
boost::math::detail::static_lcm_helper2_t::helper::gcd_type	/usr/include/boost/math/common_factor_ct.hpp	/^            typedef static_gcd_helper_t<Value1, Value2>  gcd_type;$/;"	t	struct:boost::math::detail::static_lcm_helper2_t::helper	access:public
boost::math::detail::static_lcm_helper_t	/usr/include/boost/math/common_factor_ct.hpp	/^    struct static_lcm_helper_t$/;"	s	namespace:boost::math::detail
boost::math::detail::static_lcm_helper_t	/usr/include/boost/math/common_factor_ct.hpp	/^    struct static_lcm_helper_t< 0UL, 0UL >$/;"	s	namespace:boost::math::detail
boost::math::detail::static_lcm_helper_t::BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, value = 0UL );$/;"	p	struct:boost::math::detail::static_lcm_helper_t	access:public	signature:( static_gcd_type, value = 0UL )
boost::math::detail::static_lcm_helper_t::BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, value = Value1 \/ gcd_type::value$/;"	p	struct:boost::math::detail::static_lcm_helper_t	access:public	signature:( static_gcd_type, value = Value1 / gcd_type::value * Value2 )
boost::math::detail::static_lcm_helper_t::BOOST_STATIC_CONSTANT	/usr/include/boost/math/common_factor_ct.hpp	/^        BOOST_STATIC_CONSTANT( static_gcd_type, value$/;"	p	struct:boost::math::detail::static_lcm_helper_t	access:public	signature:( static_gcd_type, value = static_lcm_helper2_t<Value1>::BOOST_NESTED_TEMPLATE helper<Value2>::value )
boost::math::detail::static_lcm_helper_t::gcd_type	/usr/include/boost/math/common_factor_ct.hpp	/^        typedef static_gcd_helper_t<Value1, Value2>  gcd_type;$/;"	t	struct:boost::math::detail::static_lcm_helper_t	access:public
boost::math::detail::temme_asyptotic_y_small_x	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^void temme_asyptotic_y_small_x(T v, T x, T* Y, T* Y1, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* Y, T* Y1, const Policy& pol)
boost::math::detail::temme_ik	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^int temme_ik(T v, T x, T* K, T* K1, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* K, T* K1, const Policy& pol)
boost::math::detail::temme_jy	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^int temme_jy(T v, T x, T* Y, T* Y1, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* Y, T* Y1, const Policy& pol)
boost::math::detail::temme_method_1_ibeta_inverse	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^T temme_method_1_ibeta_inverse(T a, T b, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T z, const Policy& pol)
boost::math::detail::temme_method_2_ibeta_inverse	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^T temme_method_2_ibeta_inverse(T \/*a*\/, T \/*b*\/, T z, T r, T theta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T , T , T z, T r, T theta, const Policy& pol)
boost::math::detail::temme_method_3_ibeta_inverse	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^T temme_method_3_ibeta_inverse(T a, T b, T p, T q, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T p, T q, const Policy& pol)
boost::math::detail::temme_root_finder	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^struct temme_root_finder$/;"	s	namespace:boost::math::detail
boost::math::detail::temme_root_finder::a	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   T t, a;$/;"	m	struct:boost::math::detail::temme_root_finder	access:private
boost::math::detail::temme_root_finder::operator ()	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   boost::math::tuple<T, T> operator()(T x)$/;"	f	struct:boost::math::detail::temme_root_finder	access:public	signature:(T x)
boost::math::detail::temme_root_finder::t	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   T t, a;$/;"	m	struct:boost::math::detail::temme_root_finder	access:private
boost::math::detail::temme_root_finder::temme_root_finder	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   temme_root_finder(const T t_, const T a_) : t(t_), a(a_) {}$/;"	f	struct:boost::math::detail::temme_root_finder	access:public	signature:(const T t_, const T a_)
boost::math::detail::tgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma(T z, const Policy& \/* pol *\/, const mpl::true_)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& , const mpl::true_)
boost::math::detail::tgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma(T1 a, T2 z, const Policy&, const mpl::false_)$/;"	f	namespace:boost::math::detail	signature:(T1 a, T2 z, const Policy&, const mpl::false_)
boost::math::detail::tgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma(T1 a, T2 z, const mpl::false_ tag)$/;"	f	namespace:boost::math::detail	signature:(T1 a, T2 z, const mpl::false_ tag)
boost::math::detail::tgamma_delta_ratio_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T tgamma_delta_ratio_imp(T z, T delta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T z, T delta, const Policy& pol)
boost::math::detail::tgamma_delta_ratio_imp_lanczos	/usr/include/boost/math/special_functions/gamma.hpp	/^T tgamma_delta_ratio_imp_lanczos(T z, T delta, const Policy& pol, const Lanczos&)$/;"	f	namespace:boost::math::detail	signature:(T z, T delta, const Policy& pol, const Lanczos&)
boost::math::detail::tgamma_delta_ratio_imp_lanczos	/usr/include/boost/math/special_functions/gamma.hpp	/^T tgamma_delta_ratio_imp_lanczos(T z, T delta, const Policy& pol, const lanczos::undefined_lanczos&)$/;"	f	namespace:boost::math::detail	signature:(T z, T delta, const Policy& pol, const lanczos::undefined_lanczos&)
boost::math::detail::tgamma_small_upper_part	/usr/include/boost/math/special_functions/gamma.hpp	/^inline T tgamma_small_upper_part(T a, T x, const Policy& pol, T* pgam = 0, bool invert = false, T* pderivative = 0)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, const Policy& pol, T* pgam = 0, bool invert = false, T* pderivative = 0)
boost::math::detail::tgammap1m1_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T tgammap1m1_imp(T dz, Policy const& pol, const Lanczos& l)$/;"	f	namespace:boost::math::detail	signature:(T dz, Policy const& pol, const Lanczos& l)
boost::math::detail::tgammap1m1_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^inline T tgammap1m1_imp(T dz, Policy const& pol,$/;"	f	namespace:boost::math::detail	signature:(T dz, Policy const& pol, const ::boost::math::lanczos::undefined_lanczos& l)
boost::math::detail::unknown_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct unknown_precision{};$/;"	s	namespace:boost::math::detail
boost::math::detail::upper_gamma_fraction	/usr/include/boost/math/special_functions/gamma.hpp	/^inline T upper_gamma_fraction(T a, T z, T eps)$/;"	f	namespace:boost::math::detail	signature:(T a, T z, T eps)
boost::math::detail::upper_incomplete_gamma_fract	/usr/include/boost/math/special_functions/gamma.hpp	/^struct upper_incomplete_gamma_fract$/;"	s	namespace:boost::math::detail
boost::math::detail::upper_incomplete_gamma_fract::a	/usr/include/boost/math/special_functions/gamma.hpp	/^   T z, a;$/;"	m	struct:boost::math::detail::upper_incomplete_gamma_fract	access:private
boost::math::detail::upper_incomplete_gamma_fract::k	/usr/include/boost/math/special_functions/gamma.hpp	/^   int k;$/;"	m	struct:boost::math::detail::upper_incomplete_gamma_fract	access:private
boost::math::detail::upper_incomplete_gamma_fract::operator ()	/usr/include/boost/math/special_functions/gamma.hpp	/^   result_type operator()()$/;"	f	struct:boost::math::detail::upper_incomplete_gamma_fract	access:public	signature:()
boost::math::detail::upper_incomplete_gamma_fract::result_type	/usr/include/boost/math/special_functions/gamma.hpp	/^   typedef std::pair<T,T> result_type;$/;"	t	struct:boost::math::detail::upper_incomplete_gamma_fract	access:public
boost::math::detail::upper_incomplete_gamma_fract::upper_incomplete_gamma_fract	/usr/include/boost/math/special_functions/gamma.hpp	/^   upper_incomplete_gamma_fract(T a1, T z1)$/;"	f	struct:boost::math::detail::upper_incomplete_gamma_fract	access:public	signature:(T a1, T z1)
boost::math::detail::upper_incomplete_gamma_fract::z	/usr/include/boost/math/special_functions/gamma.hpp	/^   T z, a;$/;"	m	struct:boost::math::detail::upper_incomplete_gamma_fract	access:private
boost::math::detail::variance	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T variance(T v, T delta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, const Policy& pol)
boost::math::detail::verify_exp_x	/usr/include/boost/math/distributions/exponential.hpp	/^inline bool verify_exp_x(const char* function, RealType x, RealType* presult, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType x, RealType* presult, const Policy& pol)
boost::math::detail::verify_lambda	/usr/include/boost/math/distributions/exponential.hpp	/^inline bool verify_lambda(const char* function, RealType l, RealType* presult, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType l, RealType* presult, const Policy& pol)
boost::math::detail::verify_rayleigh_x	/usr/include/boost/math/distributions/rayleigh.hpp	/^  inline bool verify_rayleigh_x(const char* function, RealType x, RealType* presult, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType x, RealType* presult, const Policy& pol)
boost::math::detail::verify_scale_b	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline bool verify_scale_b(const char* function, RealType b, RealType* presult, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType b, RealType* presult, const Policy& pol)
boost::math::detail::verify_sigma	/usr/include/boost/math/distributions/rayleigh.hpp	/^  inline bool verify_sigma(const char* function, RealType sigma, RealType* presult, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType sigma, RealType* presult, const Policy& pol)
boost::math::detail::zeta_imp	/usr/include/boost/math/special_functions/zeta.hpp	/^T zeta_imp(T s, T sc, const Policy& pol, const Tag& tag)$/;"	f	namespace:boost::math::detail	signature:(T s, T sc, const Policy& pol, const Tag& tag)
boost::math::detail::zeta_imp_prec	/usr/include/boost/math/special_functions/zeta.hpp	/^T zeta_imp_prec(T s, T sc, const Policy& pol, const mpl::int_<0>&)$/;"	f	namespace:boost::math::detail	signature:(T s, T sc, const Policy& pol, const mpl::int_<0>&)
boost::math::detail::zeta_imp_prec	/usr/include/boost/math/special_functions/zeta.hpp	/^T zeta_imp_prec(T s, T sc, const Policy&, const mpl::int_<113>&)$/;"	f	namespace:boost::math::detail	signature:(T s, T sc, const Policy&, const mpl::int_<113>&)
boost::math::detail::zeta_imp_prec	/usr/include/boost/math/special_functions/zeta.hpp	/^T zeta_imp_prec(T s, T sc, const Policy&, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(T s, T sc, const Policy&, const mpl::int_<64>&)
boost::math::detail::zeta_imp_prec	/usr/include/boost/math/special_functions/zeta.hpp	/^inline T zeta_imp_prec(T s, T sc, const Policy&, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(T s, T sc, const Policy&, const mpl::int_<53>&)
boost::math::detail::zeta_initializer	/usr/include/boost/math/special_functions/zeta.hpp	/^struct zeta_initializer$/;"	s	namespace:boost::math::detail
boost::math::detail::zeta_initializer::force_instantiate	/usr/include/boost/math/special_functions/zeta.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::zeta_initializer	access:public	signature:()
boost::math::detail::zeta_initializer::init	/usr/include/boost/math/special_functions/zeta.hpp	/^   struct init$/;"	s	struct:boost::math::detail::zeta_initializer	access:public
boost::math::detail::zeta_initializer::init::do_init	/usr/include/boost/math/special_functions/zeta.hpp	/^      static void do_init(const mpl::int_<0>&){}$/;"	f	struct:boost::math::detail::zeta_initializer::init	access:public	signature:(const mpl::int_<0>&)
boost::math::detail::zeta_initializer::init::do_init	/usr/include/boost/math/special_functions/zeta.hpp	/^      static void do_init(const mpl::int_<113>&)$/;"	f	struct:boost::math::detail::zeta_initializer::init	access:public	signature:(const mpl::int_<113>&)
boost::math::detail::zeta_initializer::init::do_init	/usr/include/boost/math/special_functions/zeta.hpp	/^      static void do_init(const mpl::int_<53>&){}$/;"	f	struct:boost::math::detail::zeta_initializer::init	access:public	signature:(const mpl::int_<53>&)
boost::math::detail::zeta_initializer::init::do_init	/usr/include/boost/math/special_functions/zeta.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::zeta_initializer::init	access:public	signature:(const mpl::int_<64>&)
boost::math::detail::zeta_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/zeta.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::zeta_initializer::init	access:public	signature:() const
boost::math::detail::zeta_initializer::init::init	/usr/include/boost/math/special_functions/zeta.hpp	/^      init()$/;"	f	struct:boost::math::detail::zeta_initializer::init	access:public	signature:()
boost::math::detail::zeta_initializer::initializer	/usr/include/boost/math/special_functions/zeta.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::zeta_initializer	access:public
boost::math::detail::zeta_initializer::initializer	/usr/include/boost/math/special_functions/zeta.hpp	/^const typename zeta_initializer<T, Policy, tag>::init zeta_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::zeta_initializer
boost::math::detail::zeta_polynomial_series	/usr/include/boost/math/special_functions/zeta.hpp	/^T zeta_polynomial_series(T s, T sc, Policy const &)$/;"	f	namespace:boost::math::detail	signature:(T s, T sc, Policy const &)
boost::math::digamma	/usr/include/boost/math/special_functions/digamma.hpp	/^   digamma(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::digamma	/usr/include/boost/math/special_functions/digamma.hpp	/^   digamma(T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T x, const Policy& pol)
boost::math::digamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type digamma(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::digamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type digamma(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
boost::math::double_factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^T double_factorial(unsigned i, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned i, const Policy& pol)
boost::math::double_factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^inline T double_factorial(unsigned i)$/;"	f	namespace:boost::math	signature:(unsigned i)
boost::math::double_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   RT double_factorial(unsigned i);$/;"	p	namespace:boost::math	signature:(unsigned i)
boost::math::double_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   RT double_factorial(unsigned i, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned i, const Policy& pol)
boost::math::ef	/usr/include/boost/math/bindings/e_float.hpp	/^namespace boost{ namespace math{ namespace ef{$/;"	n	namespace:boost::math
boost::math::ef	/usr/include/boost/math/bindings/e_float.hpp	/^} namespace ef{$/;"	n	namespace:boost::math
boost::math::ef::abs	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float abs(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::acos	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float acos(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::acosh	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float acosh (const e_float& x)$/;"	f	namespace:boost::math::ef	signature:(const e_float& x)
boost::math::ef::asin	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float asin(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::asinh	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float asinh (const e_float& x)$/;"	f	namespace:boost::math::ef	signature:(const e_float& x)
boost::math::ef::atan	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float atan(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::atan2	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float atan2(const e_float& v, const e_float& u)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const e_float& u)
boost::math::ef::atanh	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float atanh (const e_float& x)$/;"	f	namespace:boost::math::ef	signature:(const e_float& x)
boost::math::ef::ceil	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float ceil(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::cos	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float cos(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::cosh	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float cosh (const e_float& x)$/;"	f	namespace:boost::math::ef	signature:(const e_float& x)
boost::math::ef::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^class e_float$/;"	c	namespace:boost::math::ef
boost::math::ef::e_float::assign_large_real	/usr/include/boost/math/bindings/e_float.hpp	/^   void assign_large_real(const V& a)$/;"	f	class:boost::math::ef::e_float	access:private	signature:(const V& a)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float() {}$/;"	f	class:boost::math::ef::e_float	access:public	signature:()
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(boost::long_long_type c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(boost::long_long_type c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(boost::ulong_long_type c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(boost::ulong_long_type c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(char c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(char c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(const ::e_float& c) : m_value(c){}$/;"	f	class:boost::math::ef::e_float	access:public	signature:(const ::e_float& c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(double c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(double c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(float c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(float c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(int c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(int c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(long c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(long c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(long double c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(long double c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(short c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(short c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(signed char c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(signed char c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(unsigned char c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned char c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(unsigned int c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned int c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(unsigned long c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned long c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(unsigned short c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned short c)
boost::math::ef::e_float::e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(wchar_t c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(wchar_t c)
boost::math::ef::e_float::m_value	/usr/include/boost/math/bindings/e_float.hpp	/^   ::e_float m_value;$/;"	m	class:boost::math::ef::e_float	access:private
boost::math::ef::e_float::operator *=	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator*=(const e_float& other)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(const e_float& other)
boost::math::ef::e_float::operator +	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float const& operator+()const$/;"	f	class:boost::math::ef::e_float	access:public	signature:() const
boost::math::ef::e_float::operator +=	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator+=(const e_float& other)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(const e_float& other)
boost::math::ef::e_float::operator -	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float operator-()const$/;"	f	class:boost::math::ef::e_float	access:public	signature:() const
boost::math::ef::e_float::operator -=	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator-=(const e_float& other)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(const e_float& other)
boost::math::ef::e_float::operator /=	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator\/=(const e_float& other)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(const e_float& other)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(boost::long_long_type c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(boost::long_long_type c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(boost::ulong_long_type c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(boost::ulong_long_type c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(char c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(char c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(double c) { assign_large_real(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(double c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(float c) { assign_large_real(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(float c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(int c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(int c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(long c) { m_value = ::e_float((INT64)c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(long c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(long double c) { assign_large_real(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(long double c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(short c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(short c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(signed char c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(signed char c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(unsigned char c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned char c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(unsigned int c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned int c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(unsigned long c) { m_value = ::e_float((UINT64)c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned long c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(unsigned short c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned short c)
boost::math::ef::e_float::operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(wchar_t c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(wchar_t c)
boost::math::ef::e_float::value	/usr/include/boost/math/bindings/e_float.hpp	/^   ::e_float const& value()const{ return m_value; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:() const
boost::math::ef::e_float::value	/usr/include/boost/math/bindings/e_float.hpp	/^   ::e_float& value(){ return m_value; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:()
boost::math::ef::exp	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float exp(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::fabs	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float fabs(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::floor	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float floor(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::fmod	/usr/include/boost/math/bindings/e_float.hpp	/^e_float fmod(const e_float& v1, const e_float& v2)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v1, const e_float& v2)
boost::math::ef::frexp	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float frexp(const e_float& v, int* expon)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, int* expon)
boost::math::ef::iround	/usr/include/boost/math/bindings/e_float.hpp	/^inline int iround(const e_float& v, const Policy& pol)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const Policy& pol)
boost::math::ef::itrunc	/usr/include/boost/math/bindings/e_float.hpp	/^inline int itrunc(const e_float& v, const Policy& pol)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const Policy& pol)
boost::math::ef::ldexp	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float ldexp(const e_float& v, int e)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, int e)
boost::math::ef::llround	/usr/include/boost/math/bindings/e_float.hpp	/^inline boost::long_long_type llround(const e_float& v, const Policy& pol)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const Policy& pol)
boost::math::ef::lltrunc	/usr/include/boost/math/bindings/e_float.hpp	/^inline boost::long_long_type lltrunc(const e_float& v, const Policy& pol)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const Policy& pol)
boost::math::ef::log	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float log(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::lround	/usr/include/boost/math/bindings/e_float.hpp	/^inline long lround(const e_float& v, const Policy& pol)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const Policy& pol)
boost::math::ef::ltrunc	/usr/include/boost/math/bindings/e_float.hpp	/^inline long ltrunc(const e_float& v, const Policy& pol)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const Policy& pol)
boost::math::ef::operator !=	/usr/include/boost/math/bindings/e_float.hpp	/^inline bool operator != (const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
boost::math::ef::operator *	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float operator*(const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
boost::math::ef::operator +	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float operator+(const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
boost::math::ef::operator -	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float operator-(const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
boost::math::ef::operator /	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float operator\/(const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
boost::math::ef::operator <	/usr/include/boost/math/bindings/e_float.hpp	/^inline bool operator < (const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
boost::math::ef::operator <<	/usr/include/boost/math/bindings/e_float.hpp	/^std::ostream& operator << (std::ostream& os, const e_float& f)$/;"	f	namespace:boost::math::ef	signature:(std::ostream& os, const e_float& f)
boost::math::ef::operator <=	/usr/include/boost/math/bindings/e_float.hpp	/^inline bool operator <= (const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
boost::math::ef::operator ==	/usr/include/boost/math/bindings/e_float.hpp	/^inline bool operator == (const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
boost::math::ef::operator >	/usr/include/boost/math/bindings/e_float.hpp	/^inline bool operator > (const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
boost::math::ef::operator >=	/usr/include/boost/math/bindings/e_float.hpp	/^inline bool operator >= (const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
boost::math::ef::operator >>	/usr/include/boost/math/bindings/e_float.hpp	/^std::istream& operator >> (std::istream& is, e_float& f)$/;"	f	namespace:boost::math::ef	signature:(std::istream& is, e_float& f)
boost::math::ef::pow	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float pow(const e_float& v, const e_float& w)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const e_float& w)
boost::math::ef::pow	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float pow(const e_float& v, int i)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, int i)
boost::math::ef::sin	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float sin(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::sinh	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float sinh (const e_float& x)$/;"	f	namespace:boost::math::ef	signature:(const e_float& x)
boost::math::ef::sqrt	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float sqrt(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::tan	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float tan(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
boost::math::ef::tanh	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float tanh (const e_float& x)$/;"	f	namespace:boost::math::ef	signature:(const e_float& x)
boost::math::ellint_1	/usr/include/boost/math/special_functions/ellint_1.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_1(T1 k, T2 phi)$/;"	f	namespace:boost::math	signature:(T1 k, T2 phi)
boost::math::ellint_1	/usr/include/boost/math/special_functions/ellint_1.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_1(T1 k, T2 phi, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 k, T2 phi, const Policy& pol)
boost::math::ellint_1	/usr/include/boost/math/special_functions/ellint_1.hpp	/^inline typename tools::promote_args<T>::type ellint_1(T k)$/;"	f	namespace:boost::math	signature:(T k)
boost::math::ellint_1	/usr/include/boost/math/special_functions/ellint_1.hpp	/^typename tools::promote_args<T1, T2>::type ellint_1(T1 k, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 k, T2 phi, const Policy& pol)
boost::math::ellint_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type ellint_1(T1 k, T2 phi);$/;"	p	namespace:boost::math	signature:(T1 k, T2 phi)
boost::math::ellint_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type ellint_1(T1 k, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 k, T2 phi, const Policy& pol)
boost::math::ellint_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type ellint_1(T k);$/;"	p	namespace:boost::math	signature:(T k)
boost::math::ellint_2	/usr/include/boost/math/special_functions/ellint_2.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_2(T1 k, T2 phi)$/;"	f	namespace:boost::math	signature:(T1 k, T2 phi)
boost::math::ellint_2	/usr/include/boost/math/special_functions/ellint_2.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_2(T1 k, T2 phi, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 k, T2 phi, const Policy& pol)
boost::math::ellint_2	/usr/include/boost/math/special_functions/ellint_2.hpp	/^inline typename tools::promote_args<T>::type ellint_2(T k)$/;"	f	namespace:boost::math	signature:(T k)
boost::math::ellint_2	/usr/include/boost/math/special_functions/ellint_2.hpp	/^typename tools::promote_args<T1, T2>::type ellint_2(T1 k, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 k, T2 phi, const Policy& pol)
boost::math::ellint_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type ellint_2(T1 k, T2 phi);$/;"	p	namespace:boost::math	signature:(T1 k, T2 phi)
boost::math::ellint_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type ellint_2(T1 k, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 k, T2 phi, const Policy& pol)
boost::math::ellint_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type ellint_2(T k);$/;"	p	namespace:boost::math	signature:(T k)
boost::math::ellint_3	/usr/include/boost/math/special_functions/ellint_3.hpp	/^inline typename tools::promote_args<T1, T2, T3>::type ellint_3(T1 k, T2 v, T3 phi, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 k, T2 v, T3 phi, const Policy& pol)
boost::math::ellint_3	/usr/include/boost/math/special_functions/ellint_3.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_3(T1 k, T2 v)$/;"	f	namespace:boost::math	signature:(T1 k, T2 v)
boost::math::ellint_3	/usr/include/boost/math/special_functions/ellint_3.hpp	/^typename detail::ellint_3_result<T1, T2, T3>::type ellint_3(T1 k, T2 v, T3 phi)$/;"	f	namespace:boost::math	signature:(T1 k, T2 v, T3 phi)
boost::math::ellint_3	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2, T3>::type ellint_3(T1 k, T2 v, T3 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 k, T2 v, T3 phi, const Policy& pol)
boost::math::ellint_3	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type ellint_3(T1 k, T2 v);$/;"	p	namespace:boost::math	signature:(T1 k, T2 v)
boost::math::ellint_rc	/usr/include/boost/math/special_functions/ellint_rc.hpp	/^   ellint_rc(T1 x, T2 y)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y)
boost::math::ellint_rc	/usr/include/boost/math/special_functions/ellint_rc.hpp	/^   ellint_rc(T1 x, T2 y, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, const Policy& pol)
boost::math::ellint_rc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rc(T1 x, T2 y);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y)
boost::math::ellint_rc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rc(T1 x, T2 y, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, const Policy& pol)
boost::math::ellint_rd	/usr/include/boost/math/special_functions/ellint_rd.hpp	/^   ellint_rd(T1 x, T2 y, T3 z)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, T3 z)
boost::math::ellint_rd	/usr/include/boost/math/special_functions/ellint_rd.hpp	/^   ellint_rd(T1 x, T2 y, T3 z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, T3 z, const Policy& pol)
boost::math::ellint_rd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rd(T1 x, T2 y, T3 z);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, T3 z)
boost::math::ellint_rd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rd(T1 x, T2 y, T3 z, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, T3 z, const Policy& pol)
boost::math::ellint_rf	/usr/include/boost/math/special_functions/ellint_rf.hpp	/^   ellint_rf(T1 x, T2 y, T3 z)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, T3 z)
boost::math::ellint_rf	/usr/include/boost/math/special_functions/ellint_rf.hpp	/^   ellint_rf(T1 x, T2 y, T3 z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, T3 z, const Policy& pol)
boost::math::ellint_rf	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rf(T1 x, T2 y, T3 z);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, T3 z)
boost::math::ellint_rf	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rf(T1 x, T2 y, T3 z, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, T3 z, const Policy& pol)
boost::math::ellint_rj	/usr/include/boost/math/special_functions/ellint_rj.hpp	/^   ellint_rj(T1 x, T2 y, T3 z, T4 p)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, T3 z, T4 p)
boost::math::ellint_rj	/usr/include/boost/math/special_functions/ellint_rj.hpp	/^   ellint_rj(T1 x, T2 y, T3 z, T4 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, T3 z, T4 p, const Policy& pol)
boost::math::ellint_rj	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rj(T1 x, T2 y, T3 z, T4 p);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, T3 z, T4 p)
boost::math::ellint_rj	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rj(T1 x, T2 y, T3 z, T4 p, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, T3 z, T4 p, const Policy& pol)
boost::math::erf	/usr/include/boost/math/special_functions/erf.hpp	/^inline typename tools::promote_args<T>::type erf(T z)$/;"	f	namespace:boost::math	signature:(T z)
boost::math::erf	/usr/include/boost/math/special_functions/erf.hpp	/^inline typename tools::promote_args<T>::type erf(T z, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math	signature:(T z, const Policy& )
boost::math::erf	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erf(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
boost::math::erf	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erf(RT z, const Policy&);$/;"	p	namespace:boost::math	signature:(RT z, const Policy&)
boost::math::erf_inv	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^inline typename tools::promote_args<T>::type erf_inv(T z)$/;"	f	namespace:boost::math	signature:(T z)
boost::math::erf_inv	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^typename tools::promote_args<T>::type erf_inv(T z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T z, const Policy& pol)
boost::math::erf_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erf_inv(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
boost::math::erf_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erf_inv(RT z, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT z, const Policy& pol)
boost::math::erfc	/usr/include/boost/math/special_functions/erf.hpp	/^inline typename tools::promote_args<T>::type erfc(T z)$/;"	f	namespace:boost::math	signature:(T z)
boost::math::erfc	/usr/include/boost/math/special_functions/erf.hpp	/^inline typename tools::promote_args<T>::type erfc(T z, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math	signature:(T z, const Policy& )
boost::math::erfc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erfc(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
boost::math::erfc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erfc(RT z, const Policy&);$/;"	p	namespace:boost::math	signature:(RT z, const Policy&)
boost::math::erfc_inv	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^inline typename tools::promote_args<T>::type erfc_inv(T z)$/;"	f	namespace:boost::math	signature:(T z)
boost::math::erfc_inv	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^typename tools::promote_args<T>::type erfc_inv(T z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T z, const Policy& pol)
boost::math::erfc_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erfc_inv(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
boost::math::erfc_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erfc_inv(RT z, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT z, const Policy& pol)
boost::math::evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^class evaluation_error : public std::runtime_error$/;"	c	namespace:boost::math	inherits:std::runtime_error
boost::math::evaluation_error::evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^   evaluation_error(const std::string& s) : std::runtime_error(s){}$/;"	f	class:boost::math::evaluation_error	access:public	signature:(const std::string& s)
boost::math::exp	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        exp(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::exp	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    exp(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::expint	/usr/include/boost/math/special_functions/expint.hpp	/^   expint(T const z, U const u)$/;"	f	namespace:boost::math	signature:(T const z, U const u)
boost::math::expint	/usr/include/boost/math/special_functions/expint.hpp	/^   expint(T z)$/;"	f	namespace:boost::math	signature:(T z)
boost::math::expint	/usr/include/boost/math/special_functions/expint.hpp	/^   expint(unsigned n, T z, const Policy& \/*pol*\/)$/;"	f	namespace:boost::math	signature:(unsigned n, T z, const Policy& )
boost::math::expint	/usr/include/boost/math/special_functions/expint.hpp	/^   expint(unsigned n, T z, const Policy& \/*pol*\/);$/;"	p	namespace:boost::math	signature:(unsigned n, T z, const Policy& )
boost::math::expint	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::expint_result<T, U>::type expint(T const z, U const u);$/;"	p	namespace:boost::math	signature:(T const z, U const u)
boost::math::expint	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type expint(T z);$/;"	p	namespace:boost::math	signature:(T z)
boost::math::expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline double expm1(double x, const policies::policy<>&){ return ::expm1(x); }$/;"	f	namespace:boost::math	signature:(double x, const policies::policy<>&)
boost::math::expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline double expm1(double z)$/;"	f	namespace:boost::math	signature:(double z)
boost::math::expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline float expm1(float x, const policies::policy<>&){ return ::expm1f(x); }$/;"	f	namespace:boost::math	signature:(float x, const policies::policy<>&)
boost::math::expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline float expm1(float x, const policies::policy<>&){ return static_cast<float>(::expm1(x)); }$/;"	f	namespace:boost::math	signature:(float x, const policies::policy<>&)
boost::math::expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline float expm1(float z)$/;"	f	namespace:boost::math	signature:(float z)
boost::math::expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline long double expm1(long double x, const policies::policy<>&){ return ::expm1l(x); }$/;"	f	namespace:boost::math	signature:(long double x, const policies::policy<>&)
boost::math::expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline long double expm1(long double z)$/;"	f	namespace:boost::math	signature:(long double z)
boost::math::expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline typename tools::promote_args<T>::type expm1(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline typename tools::promote_args<T>::type expm1(T x, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math	signature:(T x, const Policy& )
boost::math::expm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type expm1(T);$/;"	p	namespace:boost::math	signature:(T)
boost::math::expm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type expm1(T, const Policy&);$/;"	p	namespace:boost::math	signature:(T, const Policy&)
boost::math::exponential	/usr/include/boost/math/distributions/exponential.hpp	/^typedef exponential_distribution<double> exponential;$/;"	t	namespace:boost::math
boost::math::exponential_distribution	/usr/include/boost/math/distributions/exponential.hpp	/^class exponential_distribution$/;"	c	namespace:boost::math
boost::math::exponential_distribution::exponential_distribution	/usr/include/boost/math/distributions/exponential.hpp	/^   exponential_distribution(RealType lambda = 1)$/;"	f	class:boost::math::exponential_distribution	access:public	signature:(RealType lambda = 1)
boost::math::exponential_distribution::lambda	/usr/include/boost/math/distributions/exponential.hpp	/^   RealType lambda()const { return m_lambda; }$/;"	f	class:boost::math::exponential_distribution	access:public	signature:() const
boost::math::exponential_distribution::m_lambda	/usr/include/boost/math/distributions/exponential.hpp	/^   RealType m_lambda;$/;"	m	class:boost::math::exponential_distribution	access:private
boost::math::exponential_distribution::policy_type	/usr/include/boost/math/distributions/exponential.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::exponential_distribution	access:public
boost::math::exponential_distribution::value_type	/usr/include/boost/math/distributions/exponential.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::exponential_distribution	access:public
boost::math::extreme_value	/usr/include/boost/math/distributions/extreme_value.hpp	/^typedef extreme_value_distribution<double> extreme_value;$/;"	t	namespace:boost::math
boost::math::extreme_value_distribution	/usr/include/boost/math/distributions/extreme_value.hpp	/^class extreme_value_distribution$/;"	c	namespace:boost::math
boost::math::extreme_value_distribution::extreme_value_distribution	/usr/include/boost/math/distributions/extreme_value.hpp	/^   extreme_value_distribution(RealType a = 0, RealType b = 1)$/;"	f	class:boost::math::extreme_value_distribution	access:public	signature:(RealType a = 0, RealType b = 1)
boost::math::extreme_value_distribution::location	/usr/include/boost/math/distributions/extreme_value.hpp	/^   RealType location()const { return m_a; }$/;"	f	class:boost::math::extreme_value_distribution	access:public	signature:() const
boost::math::extreme_value_distribution::m_a	/usr/include/boost/math/distributions/extreme_value.hpp	/^   RealType m_a, m_b;$/;"	m	class:boost::math::extreme_value_distribution	access:private
boost::math::extreme_value_distribution::m_b	/usr/include/boost/math/distributions/extreme_value.hpp	/^   RealType m_a, m_b;$/;"	m	class:boost::math::extreme_value_distribution	access:private
boost::math::extreme_value_distribution::policy_type	/usr/include/boost/math/distributions/extreme_value.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::extreme_value_distribution	access:public
boost::math::extreme_value_distribution::scale	/usr/include/boost/math/distributions/extreme_value.hpp	/^   RealType scale()const { return m_b; }$/;"	f	class:boost::math::extreme_value_distribution	access:public	signature:() const
boost::math::extreme_value_distribution::value_type	/usr/include/boost/math/distributions/extreme_value.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::extreme_value_distribution	access:public
boost::math::fabs	/usr/include/boost/math/complex/fabs.hpp	/^inline T fabs(const std::complex<T>& z)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& z)
boost::math::factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^inline T factorial(unsigned i)$/;"	f	namespace:boost::math	signature:(unsigned i)
boost::math::factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^inline T factorial(unsigned i, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned i, const Policy& pol)
boost::math::factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   RT factorial(unsigned int);$/;"	p	namespace:boost::math	signature:(unsigned int)
boost::math::factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   RT factorial(unsigned int, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned int, const Policy& pol)
boost::math::falling_factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^   falling_factorial(RT x, unsigned n)$/;"	f	namespace:boost::math	signature:(RT x, unsigned n)
boost::math::falling_factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^   falling_factorial(RT x, unsigned n, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT x, unsigned n, const Policy& pol)
boost::math::falling_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type falling_factorial(RT x, unsigned n);$/;"	p	namespace:boost::math	signature:(RT x, unsigned n)
boost::math::falling_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type falling_factorial(RT x, unsigned n, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT x, unsigned n, const Policy& pol)
boost::math::find_location	/usr/include/boost/math/distributions/find_location.hpp	/^      typename Dist::value_type find_location( \/\/ For example, normal mean.$/;"	f	namespace:boost::math	signature:( typename Dist::value_type z, typename Dist::value_type p, typename Dist::value_type scale)
boost::math::find_location	/usr/include/boost/math/distributions/find_location.hpp	/^      typename Dist::value_type find_location( \/\/ For example, normal mean.$/;"	f	namespace:boost::math	signature:( typename Dist::value_type z, typename Dist::value_type p, typename Dist::value_type scale, const Policy& pol )
boost::math::find_location	/usr/include/boost/math/distributions/find_location.hpp	/^    inline typename Dist::value_type find_location( \/\/ Default policy.$/;"	f	namespace:boost::math	signature:( complemented3_type<Real1, Real2, Real3> const& c)
boost::math::find_location	/usr/include/boost/math/distributions/find_location.hpp	/^    inline typename Dist::value_type find_location( \/\/ Explicit policy.$/;"	f	namespace:boost::math	signature:( complemented4_type<Real1, Real2, Real3, Real4> const& c)
boost::math::find_scale	/usr/include/boost/math/distributions/find_scale.hpp	/^      typename Dist::value_type find_scale( \/\/ For example, normal mean.$/;"	f	namespace:boost::math	signature:( typename Dist::value_type z, typename Dist::value_type p, typename Dist::value_type location)
boost::math::find_scale	/usr/include/boost/math/distributions/find_scale.hpp	/^      typename Dist::value_type find_scale( \/\/ For example, normal mean.$/;"	f	namespace:boost::math	signature:( typename Dist::value_type z, typename Dist::value_type p, typename Dist::value_type location, const Policy& pol )
boost::math::find_scale	/usr/include/boost/math/distributions/find_scale.hpp	/^    inline typename Dist::value_type find_scale($/;"	f	namespace:boost::math	signature:( complemented3_type<Real1, Real2, Real3> const& c)
boost::math::find_scale	/usr/include/boost/math/distributions/find_scale.hpp	/^    inline typename Dist::value_type find_scale($/;"	f	namespace:boost::math	signature:( complemented4_type<Real1, Real2, Real3, Policy> const& c)
boost::math::fisher_f	/usr/include/boost/math/distributions/fisher_f.hpp	/^typedef fisher_f_distribution<double> fisher_f;$/;"	t	namespace:boost::math
boost::math::fisher_f_distribution	/usr/include/boost/math/distributions/fisher_f.hpp	/^class fisher_f_distribution$/;"	c	namespace:boost::math
boost::math::fisher_f_distribution::degrees_of_freedom1	/usr/include/boost/math/distributions/fisher_f.hpp	/^   RealType degrees_of_freedom1()const$/;"	f	class:boost::math::fisher_f_distribution	access:public	signature:() const
boost::math::fisher_f_distribution::degrees_of_freedom2	/usr/include/boost/math/distributions/fisher_f.hpp	/^   RealType degrees_of_freedom2()const$/;"	f	class:boost::math::fisher_f_distribution	access:public	signature:() const
boost::math::fisher_f_distribution::fisher_f_distribution	/usr/include/boost/math/distributions/fisher_f.hpp	/^   fisher_f_distribution(const RealType& i, const RealType& j) : m_df1(i), m_df2(j)$/;"	f	class:boost::math::fisher_f_distribution	access:public	signature:(const RealType& i, const RealType& j)
boost::math::fisher_f_distribution::m_df1	/usr/include/boost/math/distributions/fisher_f.hpp	/^   RealType m_df1;  \/\/ degrees of freedom are a real number.$/;"	m	class:boost::math::fisher_f_distribution	access:private
boost::math::fisher_f_distribution::m_df2	/usr/include/boost/math/distributions/fisher_f.hpp	/^   RealType m_df2;  \/\/ degrees of freedom are a real number.$/;"	m	class:boost::math::fisher_f_distribution	access:private
boost::math::fisher_f_distribution::policy_type	/usr/include/boost/math/distributions/fisher_f.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::fisher_f_distribution	access:public
boost::math::fisher_f_distribution::value_type	/usr/include/boost/math/distributions/fisher_f.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::fisher_f_distribution	access:public
boost::math::float_advance	/usr/include/boost/math/special_functions/next.hpp	/^T float_advance(T val, int distance, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T val, int distance, const Policy& pol)
boost::math::float_advance	/usr/include/boost/math/special_functions/next.hpp	/^inline T float_advance(const T& val, int distance)$/;"	f	namespace:boost::math	signature:(const T& val, int distance)
boost::math::float_distance	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T float_distance(const T&, const T&);$/;"	p	namespace:boost::math	signature:(const T&, const T&)
boost::math::float_distance	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T float_distance(const T&, const T&, const Policy&);$/;"	p	namespace:boost::math	signature:(const T&, const T&, const Policy&)
boost::math::float_distance	/usr/include/boost/math/special_functions/next.hpp	/^T float_distance(const T& a, const T& b)$/;"	f	namespace:boost::math	signature:(const T& a, const T& b)
boost::math::float_distance	/usr/include/boost/math/special_functions/next.hpp	/^T float_distance(const T& a, const T& b, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& a, const T& b, const Policy& pol)
boost::math::float_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T float_next(const T&);$/;"	p	namespace:boost::math	signature:(const T&)
boost::math::float_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T float_next(const T&, const Policy&);$/;"	p	namespace:boost::math	signature:(const T&, const Policy&)
boost::math::float_next	/usr/include/boost/math/special_functions/next.hpp	/^T float_next(const T& val, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& val, const Policy& pol)
boost::math::float_next	/usr/include/boost/math/special_functions/next.hpp	/^inline T float_next(const T& val)$/;"	f	namespace:boost::math	signature:(const T& val)
boost::math::float_prior	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T float_prior(const T&);$/;"	p	namespace:boost::math	signature:(const T&)
boost::math::float_prior	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T float_prior(const T&, const Policy&);$/;"	p	namespace:boost::math	signature:(const T&, const Policy&)
boost::math::float_prior	/usr/include/boost/math/special_functions/next.hpp	/^T float_prior(const T& val, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& val, const Policy& pol)
boost::math::float_prior	/usr/include/boost/math/special_functions/next.hpp	/^inline T float_prior(const T& val)$/;"	f	namespace:boost::math	signature:(const T& val)
boost::math::gamma_distribution	/usr/include/boost/math/distributions/gamma.hpp	/^class gamma_distribution$/;"	c	namespace:boost::math
boost::math::gamma_distribution::gamma_distribution	/usr/include/boost/math/distributions/gamma.hpp	/^   gamma_distribution(RealType shape, RealType scale = 1)$/;"	f	class:boost::math::gamma_distribution	access:public	signature:(RealType shape, RealType scale = 1)
boost::math::gamma_distribution::m_scale	/usr/include/boost/math/distributions/gamma.hpp	/^   RealType m_scale;     \/\/ distribution scale$/;"	m	class:boost::math::gamma_distribution	access:private
boost::math::gamma_distribution::m_shape	/usr/include/boost/math/distributions/gamma.hpp	/^   RealType m_shape;     \/\/ distribution shape$/;"	m	class:boost::math::gamma_distribution	access:private
boost::math::gamma_distribution::policy_type	/usr/include/boost/math/distributions/gamma.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::gamma_distribution	access:public
boost::math::gamma_distribution::scale	/usr/include/boost/math/distributions/gamma.hpp	/^   RealType scale()const$/;"	f	class:boost::math::gamma_distribution	access:public	signature:() const
boost::math::gamma_distribution::shape	/usr/include/boost/math/distributions/gamma.hpp	/^   RealType shape()const$/;"	f	class:boost::math::gamma_distribution	access:public	signature:() const
boost::math::gamma_distribution::value_type	/usr/include/boost/math/distributions/gamma.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::gamma_distribution	access:public
boost::math::gamma_p	/usr/include/boost/math/special_functions/gamma.hpp	/^   gamma_p(T1 a, T2 z)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z)
boost::math::gamma_p	/usr/include/boost/math/special_functions/gamma.hpp	/^   gamma_p(T1 a, T2 z, const Policy&)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z, const Policy&)
boost::math::gamma_p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type gamma_p(RT1 a, RT2 z);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z)
boost::math::gamma_p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type gamma_p(RT1 a, RT2 z, const Policy&);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z, const Policy&)
boost::math::gamma_p_derivative	/usr/include/boost/math/special_functions/gamma.hpp	/^   gamma_p_derivative(T1 a, T2 x)$/;"	f	namespace:boost::math	signature:(T1 a, T2 x)
boost::math::gamma_p_derivative	/usr/include/boost/math/special_functions/gamma.hpp	/^   gamma_p_derivative(T1 a, T2 x, const Policy&)$/;"	f	namespace:boost::math	signature:(T1 a, T2 x, const Policy&)
boost::math::gamma_p_derivative	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_p_derivative(T1 a, T2 x);$/;"	p	namespace:boost::math	signature:(T1 a, T2 x)
boost::math::gamma_p_derivative	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_p_derivative(T1 a, T2 x, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 a, T2 x, const Policy&)
boost::math::gamma_p_inv	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   gamma_p_inv(T1 a, T2 p)$/;"	f	namespace:boost::math	signature:(T1 a, T2 p)
boost::math::gamma_p_inv	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   gamma_p_inv(T1 a, T2 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 a, T2 p, const Policy& pol)
boost::math::gamma_p_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_p_inv(T1 a, T2 p);$/;"	p	namespace:boost::math	signature:(T1 a, T2 p)
boost::math::gamma_p_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_p_inv(T1 a, T2 p, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 a, T2 p, const Policy&)
boost::math::gamma_p_inva	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   gamma_p_inva(T1 x, T2 p)$/;"	f	namespace:boost::math	signature:(T1 x, T2 p)
boost::math::gamma_p_inva	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   gamma_p_inva(T1 x, T2 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 p, const Policy& pol)
boost::math::gamma_p_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_p_inva(T1 a, T2 p);$/;"	p	namespace:boost::math	signature:(T1 a, T2 p)
boost::math::gamma_p_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_p_inva(T1 a, T2 p, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 a, T2 p, const Policy&)
boost::math::gamma_q	/usr/include/boost/math/special_functions/gamma.hpp	/^   gamma_q(T1 a, T2 z)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z)
boost::math::gamma_q	/usr/include/boost/math/special_functions/gamma.hpp	/^   gamma_q(T1 a, T2 z, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z, const Policy& )
boost::math::gamma_q	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type gamma_q(RT1 a, RT2 z);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z)
boost::math::gamma_q	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type gamma_q(RT1 a, RT2 z, const Policy&);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z, const Policy&)
boost::math::gamma_q_inv	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   gamma_q_inv(T1 a, T2 p)$/;"	f	namespace:boost::math	signature:(T1 a, T2 p)
boost::math::gamma_q_inv	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   gamma_q_inv(T1 a, T2 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 a, T2 p, const Policy& pol)
boost::math::gamma_q_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_q_inv(T1 a, T2 q);$/;"	p	namespace:boost::math	signature:(T1 a, T2 q)
boost::math::gamma_q_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_q_inv(T1 a, T2 q, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 a, T2 q, const Policy&)
boost::math::gamma_q_inva	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   gamma_q_inva(T1 x, T2 q)$/;"	f	namespace:boost::math	signature:(T1 x, T2 q)
boost::math::gamma_q_inva	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   gamma_q_inva(T1 x, T2 q, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 q, const Policy& pol)
boost::math::gamma_q_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_q_inva(T1 a, T2 q);$/;"	p	namespace:boost::math	signature:(T1 a, T2 q)
boost::math::gamma_q_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_q_inva(T1 a, T2 q, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 a, T2 q, const Policy&)
boost::math::gcd	/usr/include/boost/math/common_factor_rt.hpp	/^    IntegerType  gcd( IntegerType const &a, IntegerType const &b );$/;"	p	namespace:boost::math	signature:( IntegerType const &a, IntegerType const &b )
boost::math::gcd	/usr/include/boost/math/common_factor_rt.hpp	/^gcd$/;"	f	namespace:boost::math	signature:( IntegerType const & a, IntegerType const & b )
boost::math::gcd_evaluator	/usr/include/boost/math/common_factor_rt.hpp	/^class gcd_evaluator$/;"	c	namespace:boost::math
boost::math::gcd_evaluator::first_argument_type	/usr/include/boost/math/common_factor_rt.hpp	/^    typedef IntegerType  result_type, first_argument_type, second_argument_type;$/;"	t	class:boost::math::gcd_evaluator	access:public
boost::math::gcd_evaluator::operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^    result_type  operator ()( first_argument_type const &a,$/;"	p	class:boost::math::gcd_evaluator	access:public	signature:( first_argument_type const &a, second_argument_type const &b ) const
boost::math::gcd_evaluator::operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^gcd_evaluator<IntegerType>::operator ()$/;"	f	class:boost::math::gcd_evaluator	signature:( first_argument_type const & a, second_argument_type const & b ) const
boost::math::gcd_evaluator::result_type	/usr/include/boost/math/common_factor_rt.hpp	/^    typedef IntegerType  result_type, first_argument_type, second_argument_type;$/;"	t	class:boost::math::gcd_evaluator	access:public
boost::math::gcd_evaluator::second_argument_type	/usr/include/boost/math/common_factor_rt.hpp	/^    typedef IntegerType  result_type, first_argument_type, second_argument_type;$/;"	t	class:boost::math::gcd_evaluator	access:public
boost::math::geometric	/usr/include/boost/math/distributions/geometric.hpp	/^    typedef geometric_distribution<double> geometric; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
boost::math::geometric_detail	/usr/include/boost/math/distributions/geometric.hpp	/^    namespace geometric_detail$/;"	n	namespace:boost::math
boost::math::geometric_detail::check_dist	/usr/include/boost/math/distributions/geometric.hpp	/^      inline bool check_dist(const char* function, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::geometric_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& pol)
boost::math::geometric_detail::check_dist_and_k	/usr/include/boost/math/distributions/geometric.hpp	/^      inline bool check_dist_and_k(const char* function,  const RealType& p, RealType k, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::geometric_detail	signature:(const char* function, const RealType& p, RealType k, RealType* result, const Policy& pol)
boost::math::geometric_detail::check_dist_and_prob	/usr/include/boost/math/distributions/geometric.hpp	/^      inline bool check_dist_and_prob(const char* function, RealType p, RealType prob, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::geometric_detail	signature:(const char* function, RealType p, RealType prob, RealType* result, const Policy& pol)
boost::math::geometric_detail::check_success_fraction	/usr/include/boost/math/distributions/geometric.hpp	/^      inline bool check_success_fraction(const char* function, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::geometric_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& pol)
boost::math::geometric_distribution	/usr/include/boost/math/distributions/geometric.hpp	/^    class geometric_distribution$/;"	c	namespace:boost::math
boost::math::geometric_distribution::find_lower_bound_on_p	/usr/include/boost/math/distributions/geometric.hpp	/^      static RealType find_lower_bound_on_p($/;"	f	class:boost::math::geometric_distribution	access:public	signature:( RealType trials, RealType alpha)
boost::math::geometric_distribution::find_maximum_number_of_trials	/usr/include/boost/math/distributions/geometric.hpp	/^      static RealType find_maximum_number_of_trials($/;"	f	class:boost::math::geometric_distribution	access:public	signature:( RealType k, RealType p, RealType alpha)
boost::math::geometric_distribution::find_minimum_number_of_trials	/usr/include/boost/math/distributions/geometric.hpp	/^      static RealType find_minimum_number_of_trials($/;"	f	class:boost::math::geometric_distribution	access:public	signature:( RealType k, RealType p, RealType alpha)
boost::math::geometric_distribution::find_upper_bound_on_p	/usr/include/boost/math/distributions/geometric.hpp	/^      static RealType find_upper_bound_on_p($/;"	f	class:boost::math::geometric_distribution	access:public	signature:( RealType trials, RealType alpha)
boost::math::geometric_distribution::geometric_distribution	/usr/include/boost/math/distributions/geometric.hpp	/^      geometric_distribution(RealType p) : m_p(p)$/;"	f	class:boost::math::geometric_distribution	access:public	signature:(RealType p)
boost::math::geometric_distribution::m_p	/usr/include/boost/math/distributions/geometric.hpp	/^      RealType m_p; \/\/ success_fraction$/;"	m	class:boost::math::geometric_distribution	access:private
boost::math::geometric_distribution::policy_type	/usr/include/boost/math/distributions/geometric.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::geometric_distribution	access:public
boost::math::geometric_distribution::success_fraction	/usr/include/boost/math/distributions/geometric.hpp	/^      RealType success_fraction() const$/;"	f	class:boost::math::geometric_distribution	access:public	signature:() const
boost::math::geometric_distribution::successes	/usr/include/boost/math/distributions/geometric.hpp	/^      RealType successes() const$/;"	f	class:boost::math::geometric_distribution	access:public	signature:() const
boost::math::geometric_distribution::value_type	/usr/include/boost/math/distributions/geometric.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::geometric_distribution	access:public
boost::math::hazard	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type hazard(const Distribution& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const Distribution& dist, const RealType& x)
boost::math::hermite	/usr/include/boost/math/special_functions/hermite.hpp	/^   hermite(unsigned n, T x)$/;"	f	namespace:boost::math	signature:(unsigned n, T x)
boost::math::hermite	/usr/include/boost/math/special_functions/hermite.hpp	/^   hermite(unsigned n, T x, const Policy&)$/;"	f	namespace:boost::math	signature:(unsigned n, T x, const Policy&)
boost::math::hermite	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      hermite(unsigned n, T x);$/;"	p	namespace:boost::math	signature:(unsigned n, T x)
boost::math::hermite	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      hermite(unsigned n, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned n, T x, const Policy& pol)
boost::math::hermite_next	/usr/include/boost/math/special_functions/hermite.hpp	/^   hermite_next(unsigned n, T1 x, T2 Hn, T3 Hnm1)$/;"	f	namespace:boost::math	signature:(unsigned n, T1 x, T2 Hn, T3 Hnm1)
boost::math::hermite_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      hermite_next(unsigned n, T1 x, T2 Hn, T3 Hnm1);$/;"	p	namespace:boost::math	signature:(unsigned n, T1 x, T2 Hn, T3 Hnm1)
boost::math::hypergeometric	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   typedef hypergeometric_distribution<double> hypergeometric;$/;"	t	namespace:boost::math
boost::math::hypergeometric_distribution	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   class hypergeometric_distribution$/;"	c	namespace:boost::math
boost::math::hypergeometric_distribution::check_params	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      bool check_params(const char* function, RealType* result)const$/;"	f	class:boost::math::hypergeometric_distribution	access:public	signature:(const char* function, RealType* result) const
boost::math::hypergeometric_distribution::check_x	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      bool check_x(unsigned x, const char* function, RealType* result)const$/;"	f	class:boost::math::hypergeometric_distribution	access:public	signature:(unsigned x, const char* function, RealType* result) const
boost::math::hypergeometric_distribution::defective	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      unsigned defective()const$/;"	f	class:boost::math::hypergeometric_distribution	access:public	signature:() const
boost::math::hypergeometric_distribution::hypergeometric_distribution	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      hypergeometric_distribution(unsigned r, unsigned n, unsigned N) \/\/ Constructor.$/;"	f	class:boost::math::hypergeometric_distribution	access:public	signature:(unsigned r, unsigned n, unsigned N)
boost::math::hypergeometric_distribution::m_N	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      unsigned m_N; \/\/ number of "total" items$/;"	m	class:boost::math::hypergeometric_distribution	access:private
boost::math::hypergeometric_distribution::m_n	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      unsigned m_n;  \/\/ number of "defective" items$/;"	m	class:boost::math::hypergeometric_distribution	access:private
boost::math::hypergeometric_distribution::m_r	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      unsigned m_r; \/\/ number of items picked$/;"	m	class:boost::math::hypergeometric_distribution	access:private
boost::math::hypergeometric_distribution::policy_type	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::hypergeometric_distribution	access:public
boost::math::hypergeometric_distribution::sample_count	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      unsigned sample_count()const$/;"	f	class:boost::math::hypergeometric_distribution	access:public	signature:() const
boost::math::hypergeometric_distribution::total	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      unsigned total()const$/;"	f	class:boost::math::hypergeometric_distribution	access:public	signature:() const
boost::math::hypergeometric_distribution::value_type	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::hypergeometric_distribution	access:public
boost::math::hypot	/usr/include/boost/math/special_functions/hypot.hpp	/^   hypot(T1 x, T2 y)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y)
boost::math::hypot	/usr/include/boost/math/special_functions/hypot.hpp	/^   hypot(T1 x, T2 y, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, const Policy& pol)
boost::math::hypot	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         hypot(T1 x, T2 y);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y)
boost::math::hypot	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         hypot(T1 x, T2 y, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, const Policy&)
boost::math::ibeta	/usr/include/boost/math/special_functions/beta.hpp	/^   ibeta(RT1 a, RT2 b, RT3 x)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
boost::math::ibeta	/usr/include/boost/math/special_functions/beta.hpp	/^   ibeta(RT1 a, RT2 b, RT3 x, const Policy&)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy&)
boost::math::ibeta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta(RT1 a, RT2 b, RT3 x); \/\/ Incomplete beta function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
boost::math::ibeta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta(RT1 a, RT2 b, RT3 x, const Policy& pol); \/\/ Incomplete beta function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy& pol)
boost::math::ibeta_derivative	/usr/include/boost/math/special_functions/beta.hpp	/^   ibeta_derivative(RT1 a, RT2 b, RT3 x)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
boost::math::ibeta_derivative	/usr/include/boost/math/special_functions/beta.hpp	/^   ibeta_derivative(RT1 a, RT2 b, RT3 x, const Policy&)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy&)
boost::math::ibeta_derivative	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_derivative(RT1 a, RT2 b, RT3 x);  \/\/ derivative of incomplete beta$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
boost::math::ibeta_derivative	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_derivative(RT1 a, RT2 b, RT3 x, const Policy& pol);  \/\/ derivative of incomplete beta$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy& pol)
boost::math::ibeta_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibeta_inv(T1 a, T2 b, T3 p)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, T3 p)
boost::math::ibeta_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibeta_inv(T1 a, T2 b, T3 p, T4* py)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, T3 p, T4* py)
boost::math::ibeta_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibeta_inv(T1 a, T2 b, T3 p, T4* py, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, T3 p, T4* py, const Policy& pol)
boost::math::ibeta_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibeta_inv(T1 a, T2 b, T3 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, T3 p, const Policy& pol)
boost::math::ibeta_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_inv(RT1 a, RT2 b, RT3 p); \/\/ Incomplete beta inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 p)
boost::math::ibeta_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_inv(RT1 a, RT2 b, RT3 p, const Policy&); \/\/ Incomplete beta inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 p, const Policy&)
boost::math::ibeta_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_inv(T1 a, T2 b, T3 p, T4* py);$/;"	p	namespace:boost::math	signature:(T1 a, T2 b, T3 p, T4* py)
boost::math::ibeta_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_inv(T1 a, T2 b, T3 p, T4* py, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 a, T2 b, T3 p, T4* py, const Policy& pol)
boost::math::ibeta_inva	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^         ibeta_inva(RT1 b, RT2 x, RT3 p)$/;"	f	namespace:boost::math	signature:(RT1 b, RT2 x, RT3 p)
boost::math::ibeta_inva	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^      ibeta_inva(RT1 b, RT2 x, RT3 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT1 b, RT2 x, RT3 p, const Policy& pol)
boost::math::ibeta_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_inva(RT1 a, RT2 b, RT3 p); \/\/ Incomplete beta inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 p)
boost::math::ibeta_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_inva(RT1 a, RT2 b, RT3 p, const Policy&); \/\/ Incomplete beta inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 p, const Policy&)
boost::math::ibeta_invb	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^         ibeta_invb(RT1 a, RT2 x, RT3 p)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 x, RT3 p)
boost::math::ibeta_invb	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^      ibeta_invb(RT1 a, RT2 x, RT3 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 x, RT3 p, const Policy& pol)
boost::math::ibeta_invb	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_invb(RT1 a, RT2 b, RT3 p); \/\/ Incomplete beta inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 p)
boost::math::ibeta_invb	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_invb(RT1 a, RT2 b, RT3 p, const Policy&); \/\/ Incomplete beta inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 p, const Policy&)
boost::math::ibetac	/usr/include/boost/math/special_functions/beta.hpp	/^   ibetac(RT1 a, RT2 b, RT3 x)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
boost::math::ibetac	/usr/include/boost/math/special_functions/beta.hpp	/^   ibetac(RT1 a, RT2 b, RT3 x, const Policy&)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy&)
boost::math::ibetac	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac(RT1 a, RT2 b, RT3 x); \/\/ Incomplete beta complement function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
boost::math::ibetac	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac(RT1 a, RT2 b, RT3 x, const Policy& pol); \/\/ Incomplete beta complement function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy& pol)
boost::math::ibetac_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibetac_inv(RT1 a, RT2 b, RT3 q)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q)
boost::math::ibetac_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibetac_inv(RT1 a, RT2 b, RT3 q, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q, const Policy& pol)
boost::math::ibetac_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibetac_inv(T1 a, T2 b, T3 q, T4* py)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, T3 q, T4* py)
boost::math::ibetac_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibetac_inv(T1 a, T2 b, T3 q, T4* py, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, T3 q, T4* py, const Policy& pol)
boost::math::ibetac_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_inv(RT1 a, RT2 b, RT3 q); \/\/ Incomplete beta complement inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q)
boost::math::ibetac_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_inv(RT1 a, RT2 b, RT3 q, const Policy&); \/\/ Incomplete beta complement inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q, const Policy&)
boost::math::ibetac_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_inv(T1 a, T2 b, T3 q, T4* py);$/;"	p	namespace:boost::math	signature:(T1 a, T2 b, T3 q, T4* py)
boost::math::ibetac_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_inv(T1 a, T2 b, T3 q, T4* py, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 a, T2 b, T3 q, T4* py, const Policy& pol)
boost::math::ibetac_inva	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^         ibetac_inva(RT1 b, RT2 x, RT3 q)$/;"	f	namespace:boost::math	signature:(RT1 b, RT2 x, RT3 q)
boost::math::ibetac_inva	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^      ibetac_inva(RT1 b, RT2 x, RT3 q, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT1 b, RT2 x, RT3 q, const Policy& pol)
boost::math::ibetac_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_inva(RT1 a, RT2 b, RT3 q); \/\/ Incomplete beta complement inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q)
boost::math::ibetac_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_inva(RT1 a, RT2 b, RT3 q, const Policy&); \/\/ Incomplete beta complement inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q, const Policy&)
boost::math::ibetac_invb	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^         ibetac_invb(RT1 a, RT2 x, RT3 q)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 x, RT3 q)
boost::math::ibetac_invb	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^      ibetac_invb(RT1 a, RT2 x, RT3 q, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 x, RT3 q, const Policy& pol)
boost::math::ibetac_invb	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_invb(RT1 a, RT2 b, RT3 q); \/\/ Incomplete beta complement inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q)
boost::math::ibetac_invb	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_invb(RT1 a, RT2 b, RT3 q, const Policy&); \/\/ Incomplete beta complement inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q, const Policy&)
boost::math::inverse_chi_squared	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^typedef inverse_chi_squared_distribution<double> inverse_chi_squared;$/;"	t	namespace:boost::math
boost::math::inverse_chi_squared_distribution	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^class inverse_chi_squared_distribution$/;"	c	namespace:boost::math
boost::math::inverse_chi_squared_distribution::degrees_of_freedom	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   RealType degrees_of_freedom()const$/;"	f	class:boost::math::inverse_chi_squared_distribution	access:public	signature:() const
boost::math::inverse_chi_squared_distribution::inverse_chi_squared_distribution	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   inverse_chi_squared_distribution(RealType df = 1) : m_df(df)$/;"	f	class:boost::math::inverse_chi_squared_distribution	access:public	signature:(RealType df = 1)
boost::math::inverse_chi_squared_distribution::inverse_chi_squared_distribution	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   inverse_chi_squared_distribution(RealType df, RealType scale) : m_df(df), m_scale (scale)$/;"	f	class:boost::math::inverse_chi_squared_distribution	access:public	signature:(RealType df, RealType scale)
boost::math::inverse_chi_squared_distribution::m_df	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   RealType m_df;  \/\/ degrees of freedom are treated as a real number.$/;"	m	class:boost::math::inverse_chi_squared_distribution	access:private
boost::math::inverse_chi_squared_distribution::m_scale	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   RealType m_scale;  \/\/ distribution scale.$/;"	m	class:boost::math::inverse_chi_squared_distribution	access:private
boost::math::inverse_chi_squared_distribution::policy_type	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::inverse_chi_squared_distribution	access:public
boost::math::inverse_chi_squared_distribution::scale	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   RealType scale()const$/;"	f	class:boost::math::inverse_chi_squared_distribution	access:public	signature:() const
boost::math::inverse_chi_squared_distribution::value_type	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::inverse_chi_squared_distribution	access:public
boost::math::inverse_gamma	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^typedef inverse_gamma_distribution<double> inverse_gamma;$/;"	t	namespace:boost::math
boost::math::inverse_gamma_distribution	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^class inverse_gamma_distribution$/;"	c	namespace:boost::math
boost::math::inverse_gamma_distribution::inverse_gamma_distribution	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   inverse_gamma_distribution(RealType shape = 1, RealType scale = 1)$/;"	f	class:boost::math::inverse_gamma_distribution	access:public	signature:(RealType shape = 1, RealType scale = 1)
boost::math::inverse_gamma_distribution::m_scale	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   RealType m_scale;     \/\/ distribution scale$/;"	m	class:boost::math::inverse_gamma_distribution	access:private
boost::math::inverse_gamma_distribution::m_shape	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   RealType m_shape;     \/\/ distribution shape$/;"	m	class:boost::math::inverse_gamma_distribution	access:private
boost::math::inverse_gamma_distribution::policy_type	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::inverse_gamma_distribution	access:public
boost::math::inverse_gamma_distribution::scale	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   RealType scale()const$/;"	f	class:boost::math::inverse_gamma_distribution	access:public	signature:() const
boost::math::inverse_gamma_distribution::shape	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   RealType shape()const$/;"	f	class:boost::math::inverse_gamma_distribution	access:public	signature:() const
boost::math::inverse_gamma_distribution::value_type	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::inverse_gamma_distribution	access:public
boost::math::inverse_gaussian	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^typedef inverse_gaussian_distribution<double> inverse_gaussian;$/;"	t	namespace:boost::math
boost::math::inverse_gaussian_distribution	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^class inverse_gaussian_distribution$/;"	c	namespace:boost::math
boost::math::inverse_gaussian_distribution::inverse_gaussian_distribution	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   inverse_gaussian_distribution(RealType mean = 1, RealType scale = 1)$/;"	f	class:boost::math::inverse_gaussian_distribution	access:public	signature:(RealType mean = 1, RealType scale = 1)
boost::math::inverse_gaussian_distribution::location	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   RealType location()const$/;"	f	class:boost::math::inverse_gaussian_distribution	access:public	signature:() const
boost::math::inverse_gaussian_distribution::m_mean	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   RealType m_mean;  \/\/ distribution mean or location, aka mu.$/;"	m	class:boost::math::inverse_gaussian_distribution	access:private
boost::math::inverse_gaussian_distribution::m_scale	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   RealType m_scale;    \/\/ distribution standard deviation or scale, aka lambda.$/;"	m	class:boost::math::inverse_gaussian_distribution	access:private
boost::math::inverse_gaussian_distribution::mean	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   RealType mean()const$/;"	f	class:boost::math::inverse_gaussian_distribution	access:public	signature:() const
boost::math::inverse_gaussian_distribution::policy_type	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::inverse_gaussian_distribution	access:public
boost::math::inverse_gaussian_distribution::scale	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   RealType scale()const$/;"	f	class:boost::math::inverse_gaussian_distribution	access:public	signature:() const
boost::math::inverse_gaussian_distribution::shape	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   RealType shape()const$/;"	f	class:boost::math::inverse_gaussian_distribution	access:public	signature:() const
boost::math::inverse_gaussian_distribution::value_type	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::inverse_gaussian_distribution	access:public
boost::math::inverse_gaussian_quantile_complement_functor	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^struct inverse_gaussian_quantile_complement_functor$/;"	s	namespace:boost::math
boost::math::inverse_gaussian_quantile_complement_functor::distribution	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  const boost::math::inverse_gaussian_distribution<RealType, Policy> distribution;$/;"	m	struct:boost::math::inverse_gaussian_quantile_complement_functor	access:private
boost::math::inverse_gaussian_quantile_complement_functor::inverse_gaussian_quantile_complement_functor	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^    inverse_gaussian_quantile_complement_functor(const boost::math::inverse_gaussian_distribution<RealType, Policy> dist, RealType const& p)$/;"	f	struct:boost::math::inverse_gaussian_quantile_complement_functor	access:public	signature:(const boost::math::inverse_gaussian_distribution<RealType, Policy> dist, RealType const& p)
boost::math::inverse_gaussian_quantile_complement_functor::operator ()	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  boost::math::tuple<RealType, RealType> operator()(RealType const& x)$/;"	f	struct:boost::math::inverse_gaussian_quantile_complement_functor	access:public	signature:(RealType const& x)
boost::math::inverse_gaussian_quantile_complement_functor::prob	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  RealType prob; $/;"	m	struct:boost::math::inverse_gaussian_quantile_complement_functor	access:private
boost::math::inverse_gaussian_quantile_functor	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^struct inverse_gaussian_quantile_functor$/;"	s	namespace:boost::math
boost::math::inverse_gaussian_quantile_functor::distribution	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  const boost::math::inverse_gaussian_distribution<RealType, Policy> distribution;$/;"	m	struct:boost::math::inverse_gaussian_quantile_functor	access:private
boost::math::inverse_gaussian_quantile_functor::inverse_gaussian_quantile_functor	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  inverse_gaussian_quantile_functor(const boost::math::inverse_gaussian_distribution<RealType, Policy> dist, RealType const& p)$/;"	f	struct:boost::math::inverse_gaussian_quantile_functor	access:public	signature:(const boost::math::inverse_gaussian_distribution<RealType, Policy> dist, RealType const& p)
boost::math::inverse_gaussian_quantile_functor::operator ()	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  boost::math::tuple<RealType, RealType> operator()(RealType const& x)$/;"	f	struct:boost::math::inverse_gaussian_quantile_functor	access:public	signature:(RealType const& x)
boost::math::inverse_gaussian_quantile_functor::prob	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  RealType prob; $/;"	m	struct:boost::math::inverse_gaussian_quantile_functor	access:private
boost::math::iround	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   int iround(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
boost::math::iround	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   int iround(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::iround	/usr/include/boost/math/special_functions/round.hpp	/^inline int iround(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
boost::math::iround	/usr/include/boost/math/special_functions/round.hpp	/^inline int iround(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::isfinite	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isfinite)(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::isfinite	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isfinite)(long double x)$/;"	f	namespace:boost::math	signature:(long double x)
boost::math::isinf	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isinf)(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::isinf	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isinf)(long double x)$/;"	f	namespace:boost::math	signature:(long double x)
boost::math::isnan	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isnan)(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::isnan	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isnan)(long double x)$/;"	f	namespace:boost::math	signature:(long double x)
boost::math::isnormal	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isnormal)(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::isnormal	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isnormal)(long double x)$/;"	f	namespace:boost::math	signature:(long double x)
boost::math::itrunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   int itrunc(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
boost::math::itrunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   int itrunc(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::itrunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline int itrunc(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
boost::math::itrunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline int itrunc(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::jacobi_cd	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_cd(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_cd	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_cd(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_cd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_cd(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_cd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_cd(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_cn	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_cn(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_cn	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_cn(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_cn	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_cn(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_cn	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_cn(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_cs	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_cs(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_cs	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_cs(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_cs	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_cs(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_cs	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_cs(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_dc	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_dc(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_dc	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_dc(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_dc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_dc(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_dc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_dc(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_dn	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_dn(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_dn	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_dn(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_dn	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_dn(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_dn	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_dn(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_ds	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_ds(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_ds	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_ds(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_ds	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_ds(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_ds	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_ds(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_elliptic	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T>::type jacobi_elliptic(T k, T theta, T* pcn, T* pdn)$/;"	f	namespace:boost::math	signature:(T k, T theta, T* pcn, T* pdn)
boost::math::jacobi_elliptic	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T>::type jacobi_elliptic(T k, T theta, T* pcn, T* pdn, const Policy&)$/;"	f	namespace:boost::math	signature:(T k, T theta, T* pcn, T* pdn, const Policy&)
boost::math::jacobi_elliptic	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type jacobi_elliptic(T k, T theta, T* pcn = 0, T* pdn = 0);$/;"	p	namespace:boost::math	signature:(T k, T theta, T* pcn = 0, T* pdn = 0)
boost::math::jacobi_elliptic	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type jacobi_elliptic(T k, T theta, T* pcn, T* pdn, const Policy&);$/;"	p	namespace:boost::math	signature:(T k, T theta, T* pcn, T* pdn, const Policy&)
boost::math::jacobi_nc	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_nc(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_nc	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_nc(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_nc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_nc(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_nc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_nc(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_nd	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_nd(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_nd	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_nd(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_nd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_nd(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_nd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_nd(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_ns	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_ns(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_ns	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_ns(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_ns	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_ns(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_ns	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_ns(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_sc	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_sc(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_sc	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_sc(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_sc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_sc(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_sc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_sc(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_sd	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_sd(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_sd	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_sd(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_sd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_sd(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
boost::math::jacobi_sd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_sd(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
boost::math::jacobi_sn	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_sn(U k, T theta)$/;"	f	namespace:boost::math	signature:(U k, T theta)
boost::math::jacobi_sn	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_sn(U k, T theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(U k, T theta, const Policy& pol)
boost::math::jacobi_sn	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_sn(U k, T theta);$/;"	p	namespace:boost::math	signature:(U k, T theta)
boost::math::jacobi_sn	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_sn(U k, T theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(U k, T theta, const Policy& pol)
boost::math::kurtosis	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class kurtosis(const rayleigh_distribution<mpfr_class, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<mpfr_class, Policy>& )
boost::math::kurtosis	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal kurtosis(const rayleigh_distribution<mpfr::mpreal, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<mpfr::mpreal, Policy>& )
boost::math::kurtosis	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType kurtosis(const bernoulli_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType kurtosis(const beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType kurtosis(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType kurtosis(const cauchy_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& )
boost::math::kurtosis	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType kurtosis(const chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType kurtosis(const exponential_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& )
boost::math::kurtosis	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType kurtosis(const extreme_value_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& )
boost::math::kurtosis	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType kurtosis(const fisher_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType kurtosis(const gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType kurtosis(const geometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType kurtosis(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType kurtosis(const inverse_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType kurtosis(const inverse_gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType kurtosis(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType kurtosis(const laplace_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& )
boost::math::kurtosis	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType kurtosis(const logistic_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType kurtosis(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType kurtosis(const negative_binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType kurtosis(const non_central_beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType kurtosis(const non_central_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType kurtosis(const non_central_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType kurtosis(const non_central_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType kurtosis(const normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& )
boost::math::kurtosis	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType kurtosis(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType kurtosis(const poisson_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType kurtosis(const rayleigh_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& )
boost::math::kurtosis	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType kurtosis(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType kurtosis(const students_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType kurtosis(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType kurtosis(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
boost::math::kurtosis	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType kurtosis(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class kurtosis_excess(const rayleigh_distribution<mpfr_class, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<mpfr_class, Policy>& )
boost::math::kurtosis_excess	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal kurtosis_excess(const rayleigh_distribution<mpfr::mpreal, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<mpfr::mpreal, Policy>& )
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType kurtosis_excess(const bernoulli_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType kurtosis_excess(const beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType kurtosis_excess(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType kurtosis_excess(const cauchy_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& )
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType kurtosis_excess(const chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType kurtosis_excess(const exponential_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& )
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType kurtosis_excess(const extreme_value_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& )
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/fisher_f.hpp	/^RealType kurtosis_excess(const fisher_f_distribution<RealType, Policy>& dist);$/;"	p	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType kurtosis_excess(const fisher_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType kurtosis_excess(const gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType kurtosis_excess(const geometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType kurtosis_excess(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType kurtosis_excess(const inverse_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType kurtosis_excess(const inverse_gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType kurtosis_excess(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType kurtosis_excess(const laplace_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& )
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType kurtosis_excess(const logistic_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& )
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType kurtosis_excess(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType kurtosis_excess(const negative_binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType kurtosis_excess(const non_central_beta_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& )
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType kurtosis_excess(const non_central_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType kurtosis_excess(const non_central_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType kurtosis_excess(const non_central_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType kurtosis_excess(const normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& )
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType kurtosis_excess(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType kurtosis_excess(const poisson_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType kurtosis_excess(const rayleigh_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& )
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType kurtosis_excess(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType kurtosis_excess(const students_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType kurtosis_excess(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType kurtosis_excess(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
boost::math::kurtosis_excess	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType kurtosis_excess(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
boost::math::l1	/usr/include/boost/math/octonion.hpp	/^        inline T                                l1(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::l1	/usr/include/boost/math/quaternion.hpp	/^        inline T                                l1(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::laguerre	/usr/include/boost/math/special_functions/laguerre.hpp	/^   laguerre(unsigned n, T x)$/;"	f	namespace:boost::math	signature:(unsigned n, T x)
boost::math::laguerre	/usr/include/boost/math/special_functions/laguerre.hpp	/^   laguerre(unsigned n, T1 m, T2 x)$/;"	f	namespace:boost::math	signature:(unsigned n, T1 m, T2 x)
boost::math::laguerre	/usr/include/boost/math/special_functions/laguerre.hpp	/^   laguerre(unsigned n, unsigned m, T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, unsigned m, T x, const Policy& pol)
boost::math::laguerre	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      laguerre(unsigned n, T x);$/;"	p	namespace:boost::math	signature:(unsigned n, T x)
boost::math::laguerre	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      laguerre(unsigned n, T1 m, T2 x);$/;"	p	namespace:boost::math	signature:(unsigned n, T1 m, T2 x)
boost::math::laguerre	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      laguerre(unsigned n, unsigned m, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned n, unsigned m, T x, const Policy& pol)
boost::math::laguerre_next	/usr/include/boost/math/special_functions/laguerre.hpp	/^   laguerre_next(unsigned n, T1 x, T2 Ln, T3 Lnm1)$/;"	f	namespace:boost::math	signature:(unsigned n, T1 x, T2 Ln, T3 Lnm1)
boost::math::laguerre_next	/usr/include/boost/math/special_functions/laguerre.hpp	/^   laguerre_next(unsigned n, unsigned l, T1 x, T2 Pl, T3 Plm1)$/;"	f	namespace:boost::math	signature:(unsigned n, unsigned l, T1 x, T2 Pl, T3 Plm1)
boost::math::laguerre_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         laguerre_next(unsigned n, T1 x, T2 Ln, T3 Lnm1);$/;"	p	namespace:boost::math	signature:(unsigned n, T1 x, T2 Ln, T3 Lnm1)
boost::math::laguerre_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      laguerre_next(unsigned n, unsigned l, T1 x, T2 Pl, T3 Plm1);$/;"	p	namespace:boost::math	signature:(unsigned n, unsigned l, T1 x, T2 Pl, T3 Plm1)
boost::math::laguerre_result	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   struct laguerre_result$/;"	s	namespace:boost::math
boost::math::laguerre_result::type	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      >::type type;$/;"	t	struct:boost::math::laguerre_result	access:public
boost::math::lanczos	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n	namespace:boost::math
boost::math::lanczos	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace lanczos{$/;"	n	namespace:boost::math
boost::math::lanczos	/usr/include/boost/math/bindings/mpreal.hpp	/^namespace lanczos{$/;"	n	namespace:boost::math
boost::math::lanczos	/usr/include/boost/math/bindings/rr.hpp	/^namespace lanczos{$/;"	n	namespace:boost::math
boost::math::lanczos	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n	namespace:boost::math
boost::math::lanczos	/usr/include/boost/math/special_functions/lanczos.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n	namespace:boost::math
boost::math::lanczos::lanczos	/usr/include/boost/math/bindings/mpfr.hpp	/^struct lanczos<mpfr_class, Policy>$/;"	s	namespace:boost::math::lanczos
boost::math::lanczos::lanczos	/usr/include/boost/math/bindings/mpreal.hpp	/^struct lanczos<mpfr::mpreal, Policy>$/;"	s	namespace:boost::math::lanczos
boost::math::lanczos::lanczos	/usr/include/boost/math/bindings/rr.hpp	/^struct lanczos<ntl::RR, Policy>$/;"	s	namespace:boost::math::lanczos
boost::math::lanczos::lanczos	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos$/;"	s	namespace:boost::math::lanczos
boost::math::lanczos::lanczos11	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos11 : public mpl::int_<60>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
boost::math::lanczos::lanczos11::g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 10.90051099999999983936049829935654997826; }$/;"	f	struct:boost::math::lanczos::lanczos11	access:public	signature:()
boost::math::lanczos::lanczos11::lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos11	access:public	signature:(const T& z)
boost::math::lanczos::lanczos11::lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos11	access:public	signature:(const T& z)
boost::math::lanczos::lanczos11::lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos11	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos11::lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos11	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos13	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos13 : public mpl::int_<72>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
boost::math::lanczos::lanczos13::g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 13.1445650000000000545696821063756942749; }$/;"	f	struct:boost::math::lanczos::lanczos13	access:public	signature:()
boost::math::lanczos::lanczos13::lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos13	access:public	signature:(const T& z)
boost::math::lanczos::lanczos13::lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos13	access:public	signature:(const T& z)
boost::math::lanczos::lanczos13::lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos13	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos13::lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos13	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos13UDT	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^typedef lanczos13 lanczos13UDT;$/;"	t	namespace:boost::math::lanczos
boost::math::lanczos::lanczos13m53	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos13m53 : public mpl::int_<53>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
boost::math::lanczos::lanczos13m53::g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 6.024680040776729583740234375; }$/;"	f	struct:boost::math::lanczos::lanczos13m53	access:public	signature:()
boost::math::lanczos::lanczos13m53::lanczos_sum	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	/^inline double lanczos13m53::lanczos_sum<double>(const double& x)$/;"	f	class:boost::math::lanczos::lanczos13m53	signature:(const double& x)
boost::math::lanczos::lanczos13m53::lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos13m53	access:public	signature:(const T& z)
boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	/^inline double lanczos13m53::lanczos_sum_expG_scaled<double>(const double& x)$/;"	f	class:boost::math::lanczos::lanczos13m53	signature:(const double& x)
boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos13m53	access:public	signature:(const T& z)
boost::math::lanczos::lanczos13m53::lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos13m53	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos13m53::lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos13m53	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos17m64	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos17m64 : public mpl::int_<64>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
boost::math::lanczos::lanczos17m64::g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 12.2252227365970611572265625; }$/;"	f	struct:boost::math::lanczos::lanczos17m64	access:public	signature:()
boost::math::lanczos::lanczos17m64::lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos17m64	access:public	signature:(const T& z)
boost::math::lanczos::lanczos17m64::lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos17m64	access:public	signature:(const T& z)
boost::math::lanczos::lanczos17m64::lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos17m64	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos17m64::lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos17m64	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos22	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos22 : public mpl::int_<120>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
boost::math::lanczos::lanczos22::g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 22.61890999999999962710717227309942245483; }$/;"	f	struct:boost::math::lanczos::lanczos22	access:public	signature:()
boost::math::lanczos::lanczos22::lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos22	access:public	signature:(const T& z)
boost::math::lanczos::lanczos22::lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos22	access:public	signature:(const T& z)
boost::math::lanczos::lanczos22::lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos22	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos22::lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos22	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos22UDT	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^struct lanczos22UDT : public mpl::int_<120>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
boost::math::lanczos::lanczos22UDT::g	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static double g(){ return 22.61890999999999962710717227309942245483; }$/;"	f	struct:boost::math::lanczos::lanczos22UDT	access:public	signature:()
boost::math::lanczos::lanczos22UDT::lanczos_sum	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos22UDT	access:public	signature:(const T& z)
boost::math::lanczos::lanczos22UDT::lanczos_sum_expG_scaled	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos22UDT	access:public	signature:(const T& z)
boost::math::lanczos::lanczos22UDT::lanczos_sum_near_1	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos22UDT	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos22UDT::lanczos_sum_near_2	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos22UDT	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos24m113	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos24m113 : public mpl::int_<113>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
boost::math::lanczos::lanczos24m113::g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 20.3209821879863739013671875; }$/;"	f	struct:boost::math::lanczos::lanczos24m113	access:public	signature:()
boost::math::lanczos::lanczos24m113::lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos24m113	access:public	signature:(const T& z)
boost::math::lanczos::lanczos24m113::lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos24m113	access:public	signature:(const T& z)
boost::math::lanczos::lanczos24m113::lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos24m113	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos24m113::lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos24m113	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos31UDT	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^struct lanczos31UDT$/;"	s	namespace:boost::math::lanczos
boost::math::lanczos::lanczos31UDT::g	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static double g(){ return 32.08066999999999779902282170951366424561; }$/;"	f	struct:boost::math::lanczos::lanczos31UDT	access:public	signature:()
boost::math::lanczos::lanczos31UDT::lanczos_sum	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos31UDT	access:public	signature:(const T& z)
boost::math::lanczos::lanczos31UDT::lanczos_sum_expG_scaled	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos31UDT	access:public	signature:(const T& z)
boost::math::lanczos::lanczos31UDT::lanczos_sum_near_1	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos31UDT	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos31UDT::lanczos_sum_near_2	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos31UDT	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos6	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos6 : public mpl::int_<35>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
boost::math::lanczos::lanczos61UDT	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^struct lanczos61UDT$/;"	s	namespace:boost::math::lanczos
boost::math::lanczos::lanczos61UDT::g	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static double g(){ return 63.19215200000000010049916454590857028961181640625; }$/;"	f	struct:boost::math::lanczos::lanczos61UDT	access:public	signature:()
boost::math::lanczos::lanczos61UDT::lanczos_sum	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos61UDT	access:public	signature:(const T& z)
boost::math::lanczos::lanczos61UDT::lanczos_sum_expG_scaled	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos61UDT	access:public	signature:(const T& z)
boost::math::lanczos::lanczos61UDT::lanczos_sum_near_1	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos61UDT	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos61UDT::lanczos_sum_near_2	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos61UDT	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos6::g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 5.581000000000000405009359383257105946541; }$/;"	f	struct:boost::math::lanczos::lanczos6	access:public	signature:()
boost::math::lanczos::lanczos6::lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos6	access:public	signature:(const T& z)
boost::math::lanczos::lanczos6::lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos6	access:public	signature:(const T& z)
boost::math::lanczos::lanczos6::lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos6	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos6::lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos6	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos6m24	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos6m24 : public mpl::int_<24>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
boost::math::lanczos::lanczos6m24::g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 1.428456135094165802001953125; }$/;"	f	struct:boost::math::lanczos::lanczos6m24	access:public	signature:()
boost::math::lanczos::lanczos6m24::lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos6m24	access:public	signature:(const T& z)
boost::math::lanczos::lanczos6m24::lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos6m24	access:public	signature:(const T& z)
boost::math::lanczos::lanczos6m24::lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos6m24	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos6m24::lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos6m24	access:public	signature:(const T& dz)
boost::math::lanczos::lanczos::target_precision	/usr/include/boost/math/special_functions/lanczos.hpp	/^   >::type target_precision;$/;"	t	struct:boost::math::lanczos::lanczos	access:public
boost::math::lanczos::lanczos::type	/usr/include/boost/math/bindings/mpfr.hpp	/^   typedef mpfr_lanczos type;$/;"	t	struct:boost::math::lanczos::lanczos	access:public
boost::math::lanczos::lanczos::type	/usr/include/boost/math/bindings/mpreal.hpp	/^   typedef mpreal_lanczos type;$/;"	t	struct:boost::math::lanczos::lanczos	access:public
boost::math::lanczos::lanczos::type	/usr/include/boost/math/bindings/rr.hpp	/^   typedef ntl_lanczos type;$/;"	t	struct:boost::math::lanczos::lanczos	access:public
boost::math::lanczos::lanczos::type	/usr/include/boost/math/special_functions/lanczos.hpp	/^      mpl::less_equal<target_precision, mpl::_1> >::type>::type type;$/;"	t	struct:boost::math::lanczos::lanczos	access:public
boost::math::lanczos::lanczos_initializer	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos_initializer$/;"	s	namespace:boost::math::lanczos
boost::math::lanczos::lanczos_initializer::force_instantiate	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::lanczos::lanczos_initializer	access:public	signature:()
boost::math::lanczos::lanczos_initializer::init	/usr/include/boost/math/special_functions/lanczos.hpp	/^   struct init$/;"	s	struct:boost::math::lanczos::lanczos_initializer	access:public
boost::math::lanczos::lanczos_initializer::init::force_instantiate	/usr/include/boost/math/special_functions/lanczos.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::lanczos::lanczos_initializer::init	access:public	signature:() const
boost::math::lanczos::lanczos_initializer::init::init	/usr/include/boost/math/special_functions/lanczos.hpp	/^      init()$/;"	f	struct:boost::math::lanczos::lanczos_initializer::init	access:public	signature:()
boost::math::lanczos::lanczos_initializer::initializer	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::lanczos::lanczos_initializer	access:public
boost::math::lanczos::lanczos_initializer::lanczos_initializer::initializer	/usr/include/boost/math/special_functions/lanczos.hpp	/^typename lanczos_initializer<Lanczos, T>::init const lanczos_initializer<Lanczos, T>::initializer;$/;"	m	class:boost::math::lanczos::lanczos_initializer::lanczos_initializer
boost::math::lanczos::lanczos_list	/usr/include/boost/math/special_functions/lanczos.hpp	/^   undefined_lanczos> lanczos_list;$/;"	t	namespace:boost::math::lanczos
boost::math::lanczos::mpfr_lanczos	/usr/include/boost/math/bindings/mpfr.hpp	/^struct mpfr_lanczos$/;"	s	namespace:boost::math::lanczos
boost::math::lanczos::mpfr_lanczos::g	/usr/include/boost/math/bindings/mpfr.hpp	/^   static mpfr_class g()$/;"	f	struct:boost::math::lanczos::mpfr_lanczos	access:public	signature:()
boost::math::lanczos::mpfr_lanczos::lanczos_sum	/usr/include/boost/math/bindings/mpfr.hpp	/^   static mpfr_class lanczos_sum(const mpfr_class& z)$/;"	f	struct:boost::math::lanczos::mpfr_lanczos	access:public	signature:(const mpfr_class& z)
boost::math::lanczos::mpfr_lanczos::lanczos_sum_expG_scaled	/usr/include/boost/math/bindings/mpfr.hpp	/^   static mpfr_class lanczos_sum_expG_scaled(const mpfr_class& z)$/;"	f	struct:boost::math::lanczos::mpfr_lanczos	access:public	signature:(const mpfr_class& z)
boost::math::lanczos::mpfr_lanczos::lanczos_sum_near_1	/usr/include/boost/math/bindings/mpfr.hpp	/^   static mpfr_class lanczos_sum_near_1(const mpfr_class& z)$/;"	f	struct:boost::math::lanczos::mpfr_lanczos	access:public	signature:(const mpfr_class& z)
boost::math::lanczos::mpfr_lanczos::lanczos_sum_near_2	/usr/include/boost/math/bindings/mpfr.hpp	/^   static mpfr_class lanczos_sum_near_2(const mpfr_class& z)$/;"	f	struct:boost::math::lanczos::mpfr_lanczos	access:public	signature:(const mpfr_class& z)
boost::math::lanczos::mpreal_lanczos	/usr/include/boost/math/bindings/mpreal.hpp	/^struct mpreal_lanczos$/;"	s	namespace:boost::math::lanczos
boost::math::lanczos::mpreal_lanczos::g	/usr/include/boost/math/bindings/mpreal.hpp	/^   static mpfr::mpreal g()$/;"	f	struct:boost::math::lanczos::mpreal_lanczos	access:public	signature:()
boost::math::lanczos::mpreal_lanczos::lanczos_sum	/usr/include/boost/math/bindings/mpreal.hpp	/^   static mpfr::mpreal lanczos_sum(const mpfr::mpreal& z)$/;"	f	struct:boost::math::lanczos::mpreal_lanczos	access:public	signature:(const mpfr::mpreal& z)
boost::math::lanczos::mpreal_lanczos::lanczos_sum_expG_scaled	/usr/include/boost/math/bindings/mpreal.hpp	/^   static mpfr::mpreal lanczos_sum_expG_scaled(const mpfr::mpreal& z)$/;"	f	struct:boost::math::lanczos::mpreal_lanczos	access:public	signature:(const mpfr::mpreal& z)
boost::math::lanczos::mpreal_lanczos::lanczos_sum_near_1	/usr/include/boost/math/bindings/mpreal.hpp	/^   static mpfr::mpreal lanczos_sum_near_1(const mpfr::mpreal& z)$/;"	f	struct:boost::math::lanczos::mpreal_lanczos	access:public	signature:(const mpfr::mpreal& z)
boost::math::lanczos::mpreal_lanczos::lanczos_sum_near_2	/usr/include/boost/math/bindings/mpreal.hpp	/^   static mpfr::mpreal lanczos_sum_near_2(const mpfr::mpreal& z)$/;"	f	struct:boost::math::lanczos::mpreal_lanczos	access:public	signature:(const mpfr::mpreal& z)
boost::math::lanczos::ntl_lanczos	/usr/include/boost/math/bindings/rr.hpp	/^struct ntl_lanczos$/;"	s	namespace:boost::math::lanczos
boost::math::lanczos::ntl_lanczos::g	/usr/include/boost/math/bindings/rr.hpp	/^   static ntl::RR g()$/;"	f	struct:boost::math::lanczos::ntl_lanczos	access:public	signature:()
boost::math::lanczos::ntl_lanczos::lanczos_sum	/usr/include/boost/math/bindings/rr.hpp	/^   static ntl::RR lanczos_sum(const ntl::RR& z)$/;"	f	struct:boost::math::lanczos::ntl_lanczos	access:public	signature:(const ntl::RR& z)
boost::math::lanczos::ntl_lanczos::lanczos_sum_expG_scaled	/usr/include/boost/math/bindings/rr.hpp	/^   static ntl::RR lanczos_sum_expG_scaled(const ntl::RR& z)$/;"	f	struct:boost::math::lanczos::ntl_lanczos	access:public	signature:(const ntl::RR& z)
boost::math::lanczos::ntl_lanczos::lanczos_sum_near_1	/usr/include/boost/math/bindings/rr.hpp	/^   static ntl::RR lanczos_sum_near_1(const ntl::RR& z)$/;"	f	struct:boost::math::lanczos::ntl_lanczos	access:public	signature:(const ntl::RR& z)
boost::math::lanczos::ntl_lanczos::lanczos_sum_near_2	/usr/include/boost/math/bindings/rr.hpp	/^   static ntl::RR lanczos_sum_near_2(const ntl::RR& z)$/;"	f	struct:boost::math::lanczos::ntl_lanczos	access:public	signature:(const ntl::RR& z)
boost::math::lanczos::undefined_lanczos	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct undefined_lanczos : public mpl::int_<INT_MAX - 1> { };$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
boost::math::laplace	/usr/include/boost/math/distributions/laplace.hpp	/^typedef laplace_distribution<double> laplace;$/;"	t	namespace:boost::math
boost::math::laplace_distribution	/usr/include/boost/math/distributions/laplace.hpp	/^class laplace_distribution$/;"	c	namespace:boost::math
boost::math::laplace_distribution::check_parameters	/usr/include/boost/math/distributions/laplace.hpp	/^   bool check_parameters(const char* function, RealType* result) const$/;"	f	class:boost::math::laplace_distribution	access:public	signature:(const char* function, RealType* result) const
boost::math::laplace_distribution::laplace_distribution	/usr/include/boost/math/distributions/laplace.hpp	/^   laplace_distribution(RealType location = 0, RealType scale = 1)$/;"	f	class:boost::math::laplace_distribution	access:public	signature:(RealType location = 0, RealType scale = 1)
boost::math::laplace_distribution::location	/usr/include/boost/math/distributions/laplace.hpp	/^   RealType location() const$/;"	f	class:boost::math::laplace_distribution	access:public	signature:() const
boost::math::laplace_distribution::m_location	/usr/include/boost/math/distributions/laplace.hpp	/^   RealType m_location;$/;"	m	class:boost::math::laplace_distribution	access:private
boost::math::laplace_distribution::m_scale	/usr/include/boost/math/distributions/laplace.hpp	/^   RealType m_scale;$/;"	m	class:boost::math::laplace_distribution	access:private
boost::math::laplace_distribution::policy_type	/usr/include/boost/math/distributions/laplace.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::laplace_distribution	access:public
boost::math::laplace_distribution::scale	/usr/include/boost/math/distributions/laplace.hpp	/^   RealType scale() const$/;"	f	class:boost::math::laplace_distribution	access:public	signature:() const
boost::math::laplace_distribution::value_type	/usr/include/boost/math/distributions/laplace.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::laplace_distribution	access:public
boost::math::lcm	/usr/include/boost/math/common_factor_rt.hpp	/^    IntegerType  lcm( IntegerType const &a, IntegerType const &b );$/;"	p	namespace:boost::math	signature:( IntegerType const &a, IntegerType const &b )
boost::math::lcm	/usr/include/boost/math/common_factor_rt.hpp	/^lcm$/;"	f	namespace:boost::math	signature:( IntegerType const & a, IntegerType const & b )
boost::math::lcm_evaluator	/usr/include/boost/math/common_factor_rt.hpp	/^class lcm_evaluator$/;"	c	namespace:boost::math
boost::math::lcm_evaluator::first_argument_type	/usr/include/boost/math/common_factor_rt.hpp	/^    typedef IntegerType  result_type, first_argument_type, second_argument_type;$/;"	t	class:boost::math::lcm_evaluator	access:public
boost::math::lcm_evaluator::operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^    result_type  operator ()( first_argument_type const &a,$/;"	p	class:boost::math::lcm_evaluator	access:public	signature:( first_argument_type const &a, second_argument_type const &b ) const
boost::math::lcm_evaluator::operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^lcm_evaluator<IntegerType>::operator ()$/;"	f	class:boost::math::lcm_evaluator	signature:( first_argument_type const & a, second_argument_type const & b ) const
boost::math::lcm_evaluator::result_type	/usr/include/boost/math/common_factor_rt.hpp	/^    typedef IntegerType  result_type, first_argument_type, second_argument_type;$/;"	t	class:boost::math::lcm_evaluator	access:public
boost::math::lcm_evaluator::second_argument_type	/usr/include/boost/math/common_factor_rt.hpp	/^    typedef IntegerType  result_type, first_argument_type, second_argument_type;$/;"	t	class:boost::math::lcm_evaluator	access:public
boost::math::legacy	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^    const int legacy = 0x1; \/\/!< get facet will recognize most string representations of infinity and NaN.$/;"	m	namespace:boost::math
boost::math::legendre_next	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_next(unsigned l, T1 x, T2 Pl, T3 Plm1)$/;"	f	namespace:boost::math	signature:(unsigned l, T1 x, T2 Pl, T3 Plm1)
boost::math::legendre_next	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_next(unsigned l, unsigned m, T1 x, T2 Pl, T3 Plm1)$/;"	f	namespace:boost::math	signature:(unsigned l, unsigned m, T1 x, T2 Pl, T3 Plm1)
boost::math::legendre_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_next(unsigned l, T1 x, T2 Pl, T3 Plm1);$/;"	p	namespace:boost::math	signature:(unsigned l, T1 x, T2 Pl, T3 Plm1)
boost::math::legendre_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_next(unsigned l, unsigned m, T1 x, T2 Pl, T3 Plm1);$/;"	p	namespace:boost::math	signature:(unsigned l, unsigned m, T1 x, T2 Pl, T3 Plm1)
boost::math::legendre_p	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_p(int l, T x)$/;"	f	namespace:boost::math	signature:(int l, T x)
boost::math::legendre_p	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_p(int l, T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(int l, T x, const Policy& pol)
boost::math::legendre_p	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_p(int l, int m, T x)$/;"	f	namespace:boost::math	signature:(int l, int m, T x)
boost::math::legendre_p	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_p(int l, int m, T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(int l, int m, T x, const Policy& pol)
boost::math::legendre_p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_p(int l, T x);$/;"	p	namespace:boost::math	signature:(int l, T x)
boost::math::legendre_p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_p(int l, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(int l, T x, const Policy& pol)
boost::math::legendre_p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_p(int l, int m, T x);$/;"	p	namespace:boost::math	signature:(int l, int m, T x)
boost::math::legendre_p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_p(int l, int m, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(int l, int m, T x, const Policy& pol)
boost::math::legendre_q	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_q(unsigned l, T x)$/;"	f	namespace:boost::math	signature:(unsigned l, T x)
boost::math::legendre_q	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_q(unsigned l, T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned l, T x, const Policy& pol)
boost::math::legendre_q	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_q(unsigned l, T x);$/;"	p	namespace:boost::math	signature:(unsigned l, T x)
boost::math::legendre_q	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_q(unsigned l, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned l, T x, const Policy& pol)
boost::math::lgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   lgamma(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::lgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   lgamma(T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T x, const Policy& pol)
boost::math::lgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   lgamma(T z, int* sign)$/;"	f	namespace:boost::math	signature:(T z, int* sign)
boost::math::lgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   lgamma(T z, int* sign, const Policy&)$/;"	f	namespace:boost::math	signature:(T z, int* sign, const Policy&)
boost::math::lgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type lgamma(RT x);$/;"	p	namespace:boost::math	signature:(RT x)
boost::math::lgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type lgamma(RT x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT x, const Policy& pol)
boost::math::lgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type lgamma(RT z, int* sign);$/;"	p	namespace:boost::math	signature:(RT z, int* sign)
boost::math::lgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type lgamma(RT z, int* sign, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT z, int* sign, const Policy& pol)
boost::math::llround	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   boost::long_long_type llround(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
boost::math::llround	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   boost::long_long_type llround(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::llround	/usr/include/boost/math/special_functions/round.hpp	/^inline boost::long_long_type llround(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
boost::math::llround	/usr/include/boost/math/special_functions/round.hpp	/^inline boost::long_long_type llround(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::lltrunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   boost::long_long_type lltrunc(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
boost::math::lltrunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   boost::long_long_type lltrunc(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::lltrunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline boost::long_long_type lltrunc(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
boost::math::lltrunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline boost::long_long_type lltrunc(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::location	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType location(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
boost::math::log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline double log1p(double x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(double x, const Policy& pol)
boost::math::log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline double log1p(double z)$/;"	f	namespace:boost::math	signature:(double z)
boost::math::log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline float log1p(float x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(float x, const Policy& pol)
boost::math::log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline float log1p(float z)$/;"	f	namespace:boost::math	signature:(float z)
boost::math::log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline long double log1p(long double x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(long double x, const Policy& pol)
boost::math::log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline long double log1p(long double z)$/;"	f	namespace:boost::math	signature:(long double z)
boost::math::log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline typename tools::promote_args<T>::type log1p(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline typename tools::promote_args<T>::type log1p(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
boost::math::log1p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type log1p(T);$/;"	p	namespace:boost::math	signature:(T)
boost::math::log1p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type log1p(T, const Policy&);$/;"	p	namespace:boost::math	signature:(T, const Policy&)
boost::math::log1pmx	/usr/include/boost/math/special_functions/log1p.hpp	/^   log1pmx(T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T x, const Policy& pol)
boost::math::log1pmx	/usr/include/boost/math/special_functions/log1p.hpp	/^inline typename tools::promote_args<T>::type log1pmx(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::log1pmx	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type log1pmx(T);$/;"	p	namespace:boost::math	signature:(T)
boost::math::log1pmx	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type log1pmx(T, const Policy&);$/;"	p	namespace:boost::math	signature:(T, const Policy&)
boost::math::logistic	/usr/include/boost/math/distributions/logistic.hpp	/^    typedef logistic_distribution<double> logistic;$/;"	t	namespace:boost::math
boost::math::logistic_distribution	/usr/include/boost/math/distributions/logistic.hpp	/^    class logistic_distribution$/;"	c	namespace:boost::math
boost::math::logistic_distribution::location	/usr/include/boost/math/distributions/logistic.hpp	/^      RealType location()const$/;"	f	class:boost::math::logistic_distribution	access:public	signature:() const
boost::math::logistic_distribution::logistic_distribution	/usr/include/boost/math/distributions/logistic.hpp	/^      logistic_distribution(RealType location=0, RealType scale=1) \/\/ Constructor.$/;"	f	class:boost::math::logistic_distribution	access:public	signature:(RealType location=0, RealType scale=1)
boost::math::logistic_distribution::m_location	/usr/include/boost/math/distributions/logistic.hpp	/^      RealType m_location;  \/\/ distribution location aka mu.$/;"	m	class:boost::math::logistic_distribution	access:private
boost::math::logistic_distribution::m_scale	/usr/include/boost/math/distributions/logistic.hpp	/^      RealType m_scale;  \/\/ distribution scale aka s.$/;"	m	class:boost::math::logistic_distribution	access:private
boost::math::logistic_distribution::policy_type	/usr/include/boost/math/distributions/logistic.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::logistic_distribution	access:public
boost::math::logistic_distribution::scale	/usr/include/boost/math/distributions/logistic.hpp	/^      RealType scale()const$/;"	f	class:boost::math::logistic_distribution	access:public	signature:() const
boost::math::logistic_distribution::value_type	/usr/include/boost/math/distributions/logistic.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::logistic_distribution	access:public
boost::math::lognormal	/usr/include/boost/math/distributions/lognormal.hpp	/^typedef lognormal_distribution<double> lognormal;$/;"	t	namespace:boost::math
boost::math::lognormal_distribution	/usr/include/boost/math/distributions/lognormal.hpp	/^class lognormal_distribution$/;"	c	namespace:boost::math
boost::math::lognormal_distribution::location	/usr/include/boost/math/distributions/lognormal.hpp	/^   RealType location()const$/;"	f	class:boost::math::lognormal_distribution	access:public	signature:() const
boost::math::lognormal_distribution::lognormal_distribution	/usr/include/boost/math/distributions/lognormal.hpp	/^   lognormal_distribution(RealType location = 0, RealType scale = 1)$/;"	f	class:boost::math::lognormal_distribution	access:public	signature:(RealType location = 0, RealType scale = 1)
boost::math::lognormal_distribution::m_location	/usr/include/boost/math/distributions/lognormal.hpp	/^   RealType m_location;  \/\/ distribution location.$/;"	m	class:boost::math::lognormal_distribution	access:private
boost::math::lognormal_distribution::m_scale	/usr/include/boost/math/distributions/lognormal.hpp	/^   RealType m_scale;     \/\/ distribution scale.$/;"	m	class:boost::math::lognormal_distribution	access:private
boost::math::lognormal_distribution::policy_type	/usr/include/boost/math/distributions/lognormal.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::lognormal_distribution	access:public
boost::math::lognormal_distribution::scale	/usr/include/boost/math/distributions/lognormal.hpp	/^   RealType scale()const$/;"	f	class:boost::math::lognormal_distribution	access:public	signature:() const
boost::math::lognormal_distribution::value_type	/usr/include/boost/math/distributions/lognormal.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::lognormal_distribution	access:public
boost::math::lround	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   long lround(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
boost::math::lround	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   long lround(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::lround	/usr/include/boost/math/special_functions/round.hpp	/^inline long lround(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
boost::math::lround	/usr/include/boost/math/special_functions/round.hpp	/^inline long lround(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::ltrunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   long ltrunc(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
boost::math::ltrunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   long ltrunc(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::ltrunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline long ltrunc(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
boost::math::ltrunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline long ltrunc(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::max_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^struct max_factorial$/;"	s	namespace:boost::math
boost::math::max_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^struct max_factorial<double>$/;"	s	namespace:boost::math
boost::math::max_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^struct max_factorial<float>$/;"	s	namespace:boost::math
boost::math::max_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^struct max_factorial<long double>$/;"	s	namespace:boost::math
boost::math::max_factorial::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 100);$/;"	p	struct:boost::math::max_factorial	access:public	signature:(unsigned, value = 100)
boost::math::max_factorial::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 170);$/;"	p	struct:boost::math::max_factorial	access:public	signature:(unsigned, value = 170)
boost::math::max_factorial::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^   BOOST_STATIC_CONSTANT(unsigned, value = 34);$/;"	p	struct:boost::math::max_factorial	access:public	signature:(unsigned, value = 34)
boost::math::max_factorial::BOOST_STATIC_CONSTANT	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^   BOOST_STATIC_CONSTANT(unsigned,$/;"	p	struct:boost::math::max_factorial	access:public	signature:(unsigned, value = ::boost::math::max_factorial<long double>::value)
boost::math::max_factorial::value	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^const unsigned max_factorial<T>::value;$/;"	m	class:boost::math::max_factorial
boost::math::max_prime	/usr/include/boost/math/special_functions/prime.hpp	/^   static const unsigned max_prime = 10000;$/;"	m	namespace:boost::math
boost::math::mean	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType mean(const bernoulli_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType mean(const beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType mean(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType mean(const cauchy_distribution<RealType, Policy>&)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>&)
boost::math::mean	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType mean(const chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType mean(const exponential_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType mean(const extreme_value_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType mean(const fisher_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType mean(const gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType mean(const geometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType mean(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType mean(const inverse_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType mean(const inverse_gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType mean(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType mean(const laplace_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType mean(const logistic_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType mean(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType mean(const negative_binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType mean(const non_central_beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType mean(const non_central_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType mean(const non_central_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType mean(const non_central_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType mean(const normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType mean(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType mean(const poisson_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType mean(const rayleigh_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType mean(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType mean(const students_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType mean(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType mean(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
boost::math::mean	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType mean(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType median(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType median(const cauchy_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Dist::value_type median(const Dist& d)$/;"	f	namespace:boost::math	signature:(const Dist& d)
boost::math::median	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType median(const exponential_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType median(const extreme_value_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType median(const laplace_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType median(const logistic_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType median(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType median(const normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType median(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType median(const rayleigh_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType median(const students_t_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& )
boost::math::median	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType median(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType median(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
boost::math::median	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType median(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType mode(const bernoulli_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType mode(const beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType mode(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType mode(const cauchy_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType mode(const chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType mode(const exponential_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& )
boost::math::mode	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType mode(const extreme_value_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType mode(const fisher_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType mode(const gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType mode(const geometric_distribution<RealType, Policy>&)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>&)
boost::math::mode	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType mode(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType mode(const inverse_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType mode(const inverse_gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType mode(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType mode(const laplace_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType mode(const logistic_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType mode(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType mode(const negative_binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType mode(const non_central_beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType mode(const non_central_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType mode(const non_central_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType mode(const non_central_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType mode(const normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType mode(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType mode(const poisson_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType mode(const rayleigh_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType mode(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType mode(const students_t_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& )
boost::math::mode	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType mode(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType mode(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
boost::math::mode	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType mode(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
boost::math::modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, T* ipart);$/;"	p	namespace:boost::math	signature:(const T& v, T* ipart)
boost::math::modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, T* ipart, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, T* ipart, const Policy& pol)
boost::math::modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, boost::long_long_type* ipart);$/;"	p	namespace:boost::math	signature:(const T& v, boost::long_long_type* ipart)
boost::math::modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, boost::long_long_type* ipart, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, boost::long_long_type* ipart, const Policy& pol)
boost::math::modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, int* ipart);$/;"	p	namespace:boost::math	signature:(const T& v, int* ipart)
boost::math::modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, int* ipart, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, int* ipart, const Policy& pol)
boost::math::modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, long* ipart);$/;"	p	namespace:boost::math	signature:(const T& v, long* ipart)
boost::math::modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, long* ipart, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, long* ipart, const Policy& pol)
boost::math::modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, T* ipart)$/;"	f	namespace:boost::math	signature:(const T& v, T* ipart)
boost::math::modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, T* ipart, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, T* ipart, const Policy& pol)
boost::math::modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, boost::long_long_type* ipart)$/;"	f	namespace:boost::math	signature:(const T& v, boost::long_long_type* ipart)
boost::math::modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, boost::long_long_type* ipart, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, boost::long_long_type* ipart, const Policy& pol)
boost::math::modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, int* ipart)$/;"	f	namespace:boost::math	signature:(const T& v, int* ipart)
boost::math::modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, int* ipart, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, int* ipart, const Policy& pol)
boost::math::modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, long* ipart)$/;"	f	namespace:boost::math	signature:(const T& v, long* ipart)
boost::math::modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, long* ipart, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, long* ipart, const Policy& pol)
boost::math::multipolar	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        multipolar(T const & rho1,$/;"	f	namespace:boost::math	signature:(T const & rho1, T const & theta1, T const & rho2, T const & theta2, T const & rho3, T const & theta3, T const & rho4, T const & theta4)
boost::math::multipolar	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    multipolar( T const & rho1,$/;"	f	namespace:boost::math	signature:( T const & rho1, T const & theta1, T const & rho2, T const & theta2)
boost::math::negative_binomial	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    typedef negative_binomial_distribution<double> negative_binomial; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
boost::math::negative_binomial_detail	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    namespace negative_binomial_detail$/;"	n	namespace:boost::math
boost::math::negative_binomial_detail::check_dist	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      inline bool check_dist(const char* function, const RealType& r, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::negative_binomial_detail	signature:(const char* function, const RealType& r, const RealType& p, RealType* result, const Policy& pol)
boost::math::negative_binomial_detail::check_dist_and_k	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      inline bool check_dist_and_k(const char* function, const RealType& r, const RealType& p, RealType k, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::negative_binomial_detail	signature:(const char* function, const RealType& r, const RealType& p, RealType k, RealType* result, const Policy& pol)
boost::math::negative_binomial_detail::check_dist_and_prob	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      inline bool check_dist_and_prob(const char* function, const RealType& r, RealType p, RealType prob, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::negative_binomial_detail	signature:(const char* function, const RealType& r, RealType p, RealType prob, RealType* result, const Policy& pol)
boost::math::negative_binomial_detail::check_success_fraction	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      inline bool check_success_fraction(const char* function, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::negative_binomial_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& pol)
boost::math::negative_binomial_detail::check_successes	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      inline bool check_successes(const char* function, const RealType& r, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::negative_binomial_detail	signature:(const char* function, const RealType& r, RealType* result, const Policy& pol)
boost::math::negative_binomial_distribution	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    class negative_binomial_distribution$/;"	c	namespace:boost::math
boost::math::negative_binomial_distribution::find_lower_bound_on_p	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      static RealType find_lower_bound_on_p($/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:( RealType trials, RealType successes, RealType alpha)
boost::math::negative_binomial_distribution::find_maximum_number_of_trials	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      static RealType find_maximum_number_of_trials($/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:( RealType k, RealType p, RealType alpha)
boost::math::negative_binomial_distribution::find_minimum_number_of_trials	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      static RealType find_minimum_number_of_trials($/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:( RealType k, RealType p, RealType alpha)
boost::math::negative_binomial_distribution::find_upper_bound_on_p	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      static RealType find_upper_bound_on_p($/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:( RealType trials, RealType successes, RealType alpha)
boost::math::negative_binomial_distribution::m_p	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      RealType m_p; \/\/ success_fraction$/;"	m	class:boost::math::negative_binomial_distribution	access:private
boost::math::negative_binomial_distribution::m_r	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      RealType m_r; \/\/ successes.$/;"	m	class:boost::math::negative_binomial_distribution	access:private
boost::math::negative_binomial_distribution::negative_binomial_distribution	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      negative_binomial_distribution(RealType r, RealType p) : m_r(r), m_p(p)$/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:(RealType r, RealType p)
boost::math::negative_binomial_distribution::policy_type	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::negative_binomial_distribution	access:public
boost::math::negative_binomial_distribution::success_fraction	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      RealType success_fraction() const$/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:() const
boost::math::negative_binomial_distribution::successes	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      RealType successes() const$/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:() const
boost::math::negative_binomial_distribution::value_type	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::negative_binomial_distribution	access:public
boost::math::nextafter	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T nextafter(const T&, const T&);$/;"	p	namespace:boost::math	signature:(const T&, const T&)
boost::math::nextafter	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T nextafter(const T&, const T&, const Policy&);$/;"	p	namespace:boost::math	signature:(const T&, const T&, const Policy&)
boost::math::nextafter	/usr/include/boost/math/special_functions/next.hpp	/^inline T nextafter(const T& val, const T& direction)$/;"	f	namespace:boost::math	signature:(const T& val, const T& direction)
boost::math::nextafter	/usr/include/boost/math/special_functions/next.hpp	/^inline T nextafter(const T& val, const T& direction, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& val, const T& direction, const Policy& pol)
boost::math::non_central_beta	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      typedef non_central_beta_distribution<double> non_central_beta; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
boost::math::non_central_beta_distribution	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      class non_central_beta_distribution$/;"	c	namespace:boost::math
boost::math::non_central_beta_distribution::a	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType a;   \/\/ alpha.$/;"	m	class:boost::math::non_central_beta_distribution	access:private
boost::math::non_central_beta_distribution::alpha	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType alpha() const$/;"	f	class:boost::math::non_central_beta_distribution	access:public	signature:() const
boost::math::non_central_beta_distribution::b	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType b;   \/\/ beta.$/;"	m	class:boost::math::non_central_beta_distribution	access:private
boost::math::non_central_beta_distribution::beta	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType beta() const$/;"	f	class:boost::math::non_central_beta_distribution	access:public	signature:() const
boost::math::non_central_beta_distribution::ncp	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType ncp; \/\/ non-centrality parameter$/;"	m	class:boost::math::non_central_beta_distribution	access:private
boost::math::non_central_beta_distribution::non_central_beta_distribution	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         non_central_beta_distribution(RealType a_, RealType b_, RealType lambda) : a(a_), b(b_), ncp(lambda)$/;"	f	class:boost::math::non_central_beta_distribution	access:public	signature:(RealType a_, RealType b_, RealType lambda)
boost::math::non_central_beta_distribution::non_centrality	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType non_centrality() const$/;"	f	class:boost::math::non_central_beta_distribution	access:public	signature:() const
boost::math::non_central_beta_distribution::policy_type	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         typedef Policy policy_type;$/;"	t	class:boost::math::non_central_beta_distribution	access:public
boost::math::non_central_beta_distribution::value_type	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         typedef RealType value_type;$/;"	t	class:boost::math::non_central_beta_distribution	access:public
boost::math::non_central_chi_squared	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      typedef non_central_chi_squared_distribution<double> non_central_chi_squared; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
boost::math::non_central_chi_squared_distribution	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      class non_central_chi_squared_distribution$/;"	c	namespace:boost::math
boost::math::non_central_chi_squared_distribution::degrees_of_freedom	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         RealType degrees_of_freedom() const$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:() const
boost::math::non_central_chi_squared_distribution::df	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         RealType df; \/\/ degrees of freedom.$/;"	m	class:boost::math::non_central_chi_squared_distribution	access:private
boost::math::non_central_chi_squared_distribution::find_degrees_of_freedom	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         static RealType find_degrees_of_freedom(RealType lam, RealType x, RealType p)$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:(RealType lam, RealType x, RealType p)
boost::math::non_central_chi_squared_distribution::find_degrees_of_freedom	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         static RealType find_degrees_of_freedom(const complemented3_type<A,B,C>& c)$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:(const complemented3_type<A,B,C>& c)
boost::math::non_central_chi_squared_distribution::find_non_centrality	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         static RealType find_non_centrality(RealType v, RealType x, RealType p)$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:(RealType v, RealType x, RealType p)
boost::math::non_central_chi_squared_distribution::find_non_centrality	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         static RealType find_non_centrality(const complemented3_type<A,B,C>& c)$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:(const complemented3_type<A,B,C>& c)
boost::math::non_central_chi_squared_distribution::ncp	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         RealType ncp; \/\/ non-centrality parameter$/;"	m	class:boost::math::non_central_chi_squared_distribution	access:private
boost::math::non_central_chi_squared_distribution::non_central_chi_squared_distribution	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         non_central_chi_squared_distribution(RealType df_, RealType lambda) : df(df_), ncp(lambda)$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:(RealType df_, RealType lambda)
boost::math::non_central_chi_squared_distribution::non_centrality	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         RealType non_centrality() const$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:() const
boost::math::non_central_chi_squared_distribution::policy_type	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         typedef Policy policy_type;$/;"	t	class:boost::math::non_central_chi_squared_distribution	access:public
boost::math::non_central_chi_squared_distribution::value_type	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         typedef RealType value_type;$/;"	t	class:boost::math::non_central_chi_squared_distribution	access:public
boost::math::non_central_f	/usr/include/boost/math/distributions/non_central_f.hpp	/^      typedef non_central_f_distribution<double> non_central_f; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
boost::math::non_central_f_distribution	/usr/include/boost/math/distributions/non_central_f.hpp	/^      class non_central_f_distribution$/;"	c	namespace:boost::math
boost::math::non_central_f_distribution::degrees_of_freedom1	/usr/include/boost/math/distributions/non_central_f.hpp	/^         RealType degrees_of_freedom1()const$/;"	f	class:boost::math::non_central_f_distribution	access:public	signature:() const
boost::math::non_central_f_distribution::degrees_of_freedom2	/usr/include/boost/math/distributions/non_central_f.hpp	/^         RealType degrees_of_freedom2()const$/;"	f	class:boost::math::non_central_f_distribution	access:public	signature:() const
boost::math::non_central_f_distribution::ncp	/usr/include/boost/math/distributions/non_central_f.hpp	/^         RealType ncp; \/\/ non-centrality parameter$/;"	m	class:boost::math::non_central_f_distribution	access:private
boost::math::non_central_f_distribution::non_central_f_distribution	/usr/include/boost/math/distributions/non_central_f.hpp	/^         non_central_f_distribution(RealType v1_, RealType v2_, RealType lambda) : v1(v1_), v2(v2_), ncp(lambda)$/;"	f	class:boost::math::non_central_f_distribution	access:public	signature:(RealType v1_, RealType v2_, RealType lambda)
boost::math::non_central_f_distribution::non_centrality	/usr/include/boost/math/distributions/non_central_f.hpp	/^         RealType non_centrality() const$/;"	f	class:boost::math::non_central_f_distribution	access:public	signature:() const
boost::math::non_central_f_distribution::policy_type	/usr/include/boost/math/distributions/non_central_f.hpp	/^         typedef Policy policy_type;$/;"	t	class:boost::math::non_central_f_distribution	access:public
boost::math::non_central_f_distribution::v1	/usr/include/boost/math/distributions/non_central_f.hpp	/^         RealType v1;   \/\/ alpha.$/;"	m	class:boost::math::non_central_f_distribution	access:private
boost::math::non_central_f_distribution::v2	/usr/include/boost/math/distributions/non_central_f.hpp	/^         RealType v2;   \/\/ beta.$/;"	m	class:boost::math::non_central_f_distribution	access:private
boost::math::non_central_f_distribution::value_type	/usr/include/boost/math/distributions/non_central_f.hpp	/^         typedef RealType value_type;$/;"	t	class:boost::math::non_central_f_distribution	access:public
boost::math::non_central_t	/usr/include/boost/math/distributions/non_central_t.hpp	/^      typedef non_central_t_distribution<double> non_central_t; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
boost::math::non_central_t_distribution	/usr/include/boost/math/distributions/non_central_t.hpp	/^      class non_central_t_distribution$/;"	c	namespace:boost::math
boost::math::non_central_t_distribution::degrees_of_freedom	/usr/include/boost/math/distributions/non_central_t.hpp	/^         RealType degrees_of_freedom() const$/;"	f	class:boost::math::non_central_t_distribution	access:public	signature:() const
boost::math::non_central_t_distribution::ncp	/usr/include/boost/math/distributions/non_central_t.hpp	/^         RealType ncp; \/\/ non-centrality parameter$/;"	m	class:boost::math::non_central_t_distribution	access:private
boost::math::non_central_t_distribution::non_central_t_distribution	/usr/include/boost/math/distributions/non_central_t.hpp	/^         non_central_t_distribution(RealType v_, RealType lambda) : v(v_), ncp(lambda)$/;"	f	class:boost::math::non_central_t_distribution	access:public	signature:(RealType v_, RealType lambda)
boost::math::non_central_t_distribution::non_centrality	/usr/include/boost/math/distributions/non_central_t.hpp	/^         RealType non_centrality() const$/;"	f	class:boost::math::non_central_t_distribution	access:public	signature:() const
boost::math::non_central_t_distribution::policy_type	/usr/include/boost/math/distributions/non_central_t.hpp	/^         typedef Policy policy_type;$/;"	t	class:boost::math::non_central_t_distribution	access:public
boost::math::non_central_t_distribution::v	/usr/include/boost/math/distributions/non_central_t.hpp	/^         RealType v;   \/\/ degrees of freedom$/;"	m	class:boost::math::non_central_t_distribution	access:private
boost::math::non_central_t_distribution::value_type	/usr/include/boost/math/distributions/non_central_t.hpp	/^         typedef RealType value_type;$/;"	t	class:boost::math::non_central_t_distribution	access:public
boost::math::nonfinite_num_get	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^    class nonfinite_num_get : public std::num_get<CharType, InputIterator>$/;"	c	namespace:boost::math	inherits:std::num_get
boost::math::nonfinite_num_get::do_get	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      virtual InputIterator do_get($/;"	f	class:boost::math::nonfinite_num_get	access:protected	signature:( InputIterator it, InputIterator end, std::ios_base& iosb, std::ios_base::iostate& state, double& val) const
boost::math::nonfinite_num_get::do_get	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      virtual InputIterator do_get($/;"	f	class:boost::math::nonfinite_num_get	access:protected	signature:( InputIterator it, InputIterator end, std::ios_base& iosb, std::ios_base::iostate& state, float& val) const
boost::math::nonfinite_num_get::do_get	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      virtual InputIterator do_get($/;"	f	class:boost::math::nonfinite_num_get	access:protected	signature:( InputIterator it, InputIterator end, std::ios_base& iosb, std::ios_base::iostate& state, long double& val) const
boost::math::nonfinite_num_get::flags_	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      const int flags_;$/;"	m	class:boost::math::nonfinite_num_get	access:private
boost::math::nonfinite_num_get::get_and_check_eof	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_and_check_eof$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, std::ios_base& iosb, std::ios_base::iostate& state, ValType& val ) const
boost::math::nonfinite_num_get::get_i	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_i$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct, std::ios_base::iostate& state, ValType& val ) const
boost::math::nonfinite_num_get::get_n	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_n$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct, std::ios_base::iostate& state, ValType& val ) const
boost::math::nonfinite_num_get::get_one_hash	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_one_hash$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct, std::ios_base::iostate& state, ValType& val ) const
boost::math::nonfinite_num_get::get_one_hash_i	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_one_hash_i$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct, std::ios_base::iostate& state, ValType& val ) const
boost::math::nonfinite_num_get::get_q	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_q$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct, std::ios_base::iostate& state, ValType& val ) const
boost::math::nonfinite_num_get::get_signed	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_signed$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, std::ios_base& iosb, std::ios_base::iostate& state, ValType& val ) const
boost::math::nonfinite_num_get::get_unsigned	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_unsigned$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, std::ios_base& iosb, const std::ctype<CharType>& ct, std::ios_base::iostate& state, ValType& val ) const
boost::math::nonfinite_num_get::match_string	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      bool match_string$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct, const char* s ) const
boost::math::nonfinite_num_get::nonfinite_num_get	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      explicit nonfinite_num_get(int flags = 0) : flags_(flags)$/;"	f	class:boost::math::nonfinite_num_get	access:public	signature:(int flags = 0)
boost::math::nonfinite_num_get::peek_char	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      char peek_char$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct ) const
boost::math::nonfinite_num_get::positive_nan	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> static ValType positive_nan()$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:()
boost::math::nonfinite_num_put	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^    class nonfinite_num_put : public std::num_put<CharType, OutputIterator>$/;"	c	namespace:boost::math	inherits:std::num_put
boost::math::nonfinite_num_put::do_put	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      virtual OutputIterator do_put($/;"	f	class:boost::math::nonfinite_num_put	access:protected	signature:( OutputIterator it, std::ios_base& iosb, CharType fill, double val) const
boost::math::nonfinite_num_put::do_put	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      virtual OutputIterator do_put($/;"	f	class:boost::math::nonfinite_num_put	access:protected	signature:( OutputIterator it, std::ios_base& iosb, CharType fill, long double val) const
boost::math::nonfinite_num_put::flags_	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      const int flags_;$/;"	m	class:boost::math::nonfinite_num_put	access:private
boost::math::nonfinite_num_put::nonfinite_num_put	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      explicit nonfinite_num_put(int flags = 0) : flags_(flags) {}$/;"	f	class:boost::math::nonfinite_num_put	access:public	signature:(int flags = 0)
boost::math::nonfinite_num_put::put_and_reset_width	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void put_and_reset_width($/;"	f	class:boost::math::nonfinite_num_put	access:private	signature:( OutputIterator& it, std::ios_base& iosb, CharType fill, ValType val) const
boost::math::nonfinite_num_put::put_fill	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      void put_fill($/;"	f	class:boost::math::nonfinite_num_put	access:private	signature:( OutputIterator& it, std::ios_base& iosb, CharType fill, int width) const
boost::math::nonfinite_num_put::put_impl	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void put_impl($/;"	f	class:boost::math::nonfinite_num_put	access:private	signature:( OutputIterator& it, std::ios_base& iosb, CharType fill, ValType val) const
boost::math::nonfinite_num_put::put_num_and_fill	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      void put_num_and_fill($/;"	f	class:boost::math::nonfinite_num_put	access:private	signature:( OutputIterator& it, std::ios_base& iosb, const CharType* prefix, const CharType* body, CharType fill, ValType val) const
boost::math::norm	/usr/include/boost/math/octonion.hpp	/^        inline T                                norm(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::norm	/usr/include/boost/math/quaternion.hpp	/^        inline T                                norm(quaternion<T>const  & q)$/;"	f	namespace:boost::math	signature:(quaternion<T>const & q)
boost::math::normal	/usr/include/boost/math/distributions/normal.hpp	/^typedef normal_distribution<double> normal;$/;"	t	namespace:boost::math
boost::math::normal_distribution	/usr/include/boost/math/distributions/normal.hpp	/^class normal_distribution$/;"	c	namespace:boost::math
boost::math::normal_distribution::location	/usr/include/boost/math/distributions/normal.hpp	/^   RealType location()const$/;"	f	class:boost::math::normal_distribution	access:public	signature:() const
boost::math::normal_distribution::m_mean	/usr/include/boost/math/distributions/normal.hpp	/^   RealType m_mean;  \/\/ distribution mean or location.$/;"	m	class:boost::math::normal_distribution	access:private
boost::math::normal_distribution::m_sd	/usr/include/boost/math/distributions/normal.hpp	/^   RealType m_sd;    \/\/ distribution standard deviation or scale.$/;"	m	class:boost::math::normal_distribution	access:private
boost::math::normal_distribution::mean	/usr/include/boost/math/distributions/normal.hpp	/^   RealType mean()const$/;"	f	class:boost::math::normal_distribution	access:public	signature:() const
boost::math::normal_distribution::normal_distribution	/usr/include/boost/math/distributions/normal.hpp	/^   normal_distribution(RealType mean = 0, RealType sd = 1)$/;"	f	class:boost::math::normal_distribution	access:public	signature:(RealType mean = 0, RealType sd = 1)
boost::math::normal_distribution::policy_type	/usr/include/boost/math/distributions/normal.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::normal_distribution	access:public
boost::math::normal_distribution::scale	/usr/include/boost/math/distributions/normal.hpp	/^   RealType scale()const$/;"	f	class:boost::math::normal_distribution	access:public	signature:() const
boost::math::normal_distribution::standard_deviation	/usr/include/boost/math/distributions/normal.hpp	/^   RealType standard_deviation()const$/;"	f	class:boost::math::normal_distribution	access:public	signature:() const
boost::math::normal_distribution::value_type	/usr/include/boost/math/distributions/normal.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::normal_distribution	access:public
boost::math::ntl	/usr/include/boost/math/bindings/rr.hpp	/^namespace ntl$/;"	n	namespace:boost::math
boost::math::ntl	/usr/include/boost/math/bindings/rr.hpp	/^namespace ntl{$/;"	n	namespace:boost::math
boost::math::ntl::RR	/usr/include/boost/math/bindings/rr.hpp	/^class RR$/;"	c	namespace:boost::math::ntl
boost::math::ntl::RR::NTL::value	/usr/include/boost/math/bindings/rr.hpp	/^   NTL::RR const& value()const{ return m_value; }$/;"	f	class:boost::math::ntl::RR::NTL	access:public	signature:() const
boost::math::ntl::RR::OutputPrecision	/usr/include/boost/math/bindings/rr.hpp	/^   static long OutputPrecision()$/;"	f	class:boost::math::ntl::RR	access:public	signature:()
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR() {}$/;"	f	class:boost::math::ntl::RR	access:public	signature:()
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(boost::long_long_type c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(boost::long_long_type c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(boost::ulong_long_type c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(boost::ulong_long_type c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(char c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(char c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(const ::NTL::RR& c) : m_value(c){}$/;"	f	class:boost::math::ntl::RR	access:public	signature:(const ::NTL::RR& c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(double c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(double c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(float c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(float c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(int c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(int c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(long c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(long c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(long double c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(long double c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(short c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(short c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(signed char c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(signed char c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(unsigned char c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned char c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(unsigned int c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned int c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(unsigned long c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned long c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(unsigned short c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned short c)
boost::math::ntl::RR::RR	/usr/include/boost/math/bindings/rr.hpp	/^   RR(wchar_t c)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(wchar_t c)
boost::math::ntl::RR::SetOutputPrecision	/usr/include/boost/math/bindings/rr.hpp	/^   static void SetOutputPrecision(long p)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(long p)
boost::math::ntl::RR::SetPrecision	/usr/include/boost/math/bindings/rr.hpp	/^   static void SetPrecision(long p)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(long p)
boost::math::ntl::RR::assign_large_int	/usr/include/boost/math/bindings/rr.hpp	/^   void assign_large_int(V a)$/;"	f	class:boost::math::ntl::RR	access:private	signature:(V a)
boost::math::ntl::RR::assign_large_real	/usr/include/boost/math/bindings/rr.hpp	/^   void assign_large_real(const V& a)$/;"	f	class:boost::math::ntl::RR	access:private	signature:(const V& a)
boost::math::ntl::RR::exponent	/usr/include/boost/math/bindings/rr.hpp	/^   long exponent() const$/;"	f	class:boost::math::ntl::RR	access:public	signature:() const
boost::math::ntl::RR::m_value	/usr/include/boost/math/bindings/rr.hpp	/^   ::NTL::RR m_value;$/;"	m	class:boost::math::ntl::RR	access:private
boost::math::ntl::RR::mantissa	/usr/include/boost/math/bindings/rr.hpp	/^   const ::NTL::ZZ& mantissa() const$/;"	f	class:boost::math::ntl::RR	access:public	signature:() const
boost::math::ntl::RR::operator *=	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator*=(const RR& other)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(const RR& other)
boost::math::ntl::RR::operator +	/usr/include/boost/math/bindings/rr.hpp	/^   RR const& operator+()const$/;"	f	class:boost::math::ntl::RR	access:public	signature:() const
boost::math::ntl::RR::operator +=	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator+=(const RR& other)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(const RR& other)
boost::math::ntl::RR::operator -	/usr/include/boost/math/bindings/rr.hpp	/^   RR operator-()const$/;"	f	class:boost::math::ntl::RR	access:public	signature:() const
boost::math::ntl::RR::operator -=	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator-=(const RR& other)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(const RR& other)
boost::math::ntl::RR::operator /=	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator\/=(const RR& other)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(const RR& other)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(boost::long_long_type c) { assign_large_int(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(boost::long_long_type c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(boost::ulong_long_type c) { assign_large_int(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(boost::ulong_long_type c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(char c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(char c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(double c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(double c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(float c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(float c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(int c) { assign_large_int(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(int c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(long c) { assign_large_int(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(long c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(long double c) { assign_large_real(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(long double c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(short c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(short c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(signed char c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(signed char c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(unsigned char c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned char c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(unsigned int c) { assign_large_int(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned int c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(unsigned long c) { assign_large_int(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned long c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(unsigned short c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned short c)
boost::math::ntl::RR::operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(wchar_t c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(wchar_t c)
boost::math::ntl::RR::precision	/usr/include/boost/math/bindings/rr.hpp	/^   static long precision()$/;"	f	class:boost::math::ntl::RR	access:public	signature:()
boost::math::ntl::RR::value	/usr/include/boost/math/bindings/rr.hpp	/^   NTL::RR& value(){ return m_value; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:()
boost::math::ntl::abs	/usr/include/boost/math/bindings/rr.hpp	/^inline RR abs(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
boost::math::ntl::acos	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR acos(RR z)$/;"	f	namespace:boost::math::ntl	signature:(RR z)
boost::math::ntl::acos_root	/usr/include/boost/math/bindings/rr.hpp	/^   struct acos_root$/;"	s	namespace:boost::math::ntl
boost::math::ntl::acos_root::acos_root	/usr/include/boost/math/bindings/rr.hpp	/^      acos_root(RR const& target) : t(target){}$/;"	f	struct:boost::math::ntl::acos_root	access:public	signature:(RR const& target)
boost::math::ntl::acos_root::operator ()	/usr/include/boost/math/bindings/rr.hpp	/^      boost::math::tuple<RR, RR, RR> operator()(RR const& p)$/;"	f	struct:boost::math::ntl::acos_root	access:public	signature:(RR const& p)
boost::math::ntl::acos_root::t	/usr/include/boost/math/bindings/rr.hpp	/^      RR t;$/;"	m	struct:boost::math::ntl::acos_root	access:private
boost::math::ntl::asin	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR asin(RR z)$/;"	f	namespace:boost::math::ntl	signature:(RR z)
boost::math::ntl::asin_root	/usr/include/boost/math/bindings/rr.hpp	/^   struct asin_root$/;"	s	namespace:boost::math::ntl
boost::math::ntl::asin_root::asin_root	/usr/include/boost/math/bindings/rr.hpp	/^      asin_root(RR const& target) : t(target){}$/;"	f	struct:boost::math::ntl::asin_root	access:public	signature:(RR const& target)
boost::math::ntl::asin_root::operator ()	/usr/include/boost/math/bindings/rr.hpp	/^      boost::math::tuple<RR, RR, RR> operator()(RR const& p)$/;"	f	struct:boost::math::ntl::asin_root	access:public	signature:(RR const& p)
boost::math::ntl::asin_root::t	/usr/include/boost/math/bindings/rr.hpp	/^      RR t;$/;"	m	struct:boost::math::ntl::asin_root	access:private
boost::math::ntl::atan	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR atan(RR z)$/;"	f	namespace:boost::math::ntl	signature:(RR z)
boost::math::ntl::atan2	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR atan2(RR y, RR x)$/;"	f	namespace:boost::math::ntl	signature:(RR y, RR x)
boost::math::ntl::atan_root	/usr/include/boost/math/bindings/rr.hpp	/^   struct atan_root$/;"	s	namespace:boost::math::ntl
boost::math::ntl::atan_root::atan_root	/usr/include/boost/math/bindings/rr.hpp	/^      atan_root(RR const& target) : t(target){}$/;"	f	struct:boost::math::ntl::atan_root	access:public	signature:(RR const& target)
boost::math::ntl::atan_root::operator ()	/usr/include/boost/math/bindings/rr.hpp	/^      boost::math::tuple<RR, RR, RR> operator()(RR const& p)$/;"	f	struct:boost::math::ntl::atan_root	access:public	signature:(RR const& p)
boost::math::ntl::atan_root::t	/usr/include/boost/math/bindings/rr.hpp	/^      RR t;$/;"	m	struct:boost::math::ntl::atan_root	access:private
boost::math::ntl::ceil	/usr/include/boost/math/bindings/rr.hpp	/^inline RR ceil(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
boost::math::ntl::cos	/usr/include/boost/math/bindings/rr.hpp	/^inline RR cos(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
boost::math::ntl::cosh	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR cosh(RR z)$/;"	f	namespace:boost::math::ntl	signature:(RR z)
boost::math::ntl::exp	/usr/include/boost/math/bindings/rr.hpp	/^inline RR exp(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
boost::math::ntl::fabs	/usr/include/boost/math/bindings/rr.hpp	/^inline RR fabs(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
boost::math::ntl::floor	/usr/include/boost/math/bindings/rr.hpp	/^inline RR floor(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
boost::math::ntl::fmod	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR fmod(RR x, RR y)$/;"	f	namespace:boost::math::ntl	signature:(RR x, RR y)
boost::math::ntl::frexp	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR frexp(RR r, int* exp)$/;"	f	namespace:boost::math::ntl	signature:(RR r, int* exp)
boost::math::ntl::frexp	/usr/include/boost/math/bindings/rr.hpp	/^RR frexp(RR r, int* exp);$/;"	p	namespace:boost::math::ntl	signature:(RR r, int* exp)
boost::math::ntl::iround	/usr/include/boost/math/bindings/rr.hpp	/^   inline int iround(RR const& x, const Policy& pol)$/;"	f	namespace:boost::math::ntl	signature:(RR const& x, const Policy& pol)
boost::math::ntl::itrunc	/usr/include/boost/math/bindings/rr.hpp	/^   inline int itrunc(RR const& x, const Policy& pol)$/;"	f	namespace:boost::math::ntl	signature:(RR const& x, const Policy& pol)
boost::math::ntl::ldexp	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR ldexp(RR r, int exp)$/;"	f	namespace:boost::math::ntl	signature:(RR r, int exp)
boost::math::ntl::ldexp	/usr/include/boost/math/bindings/rr.hpp	/^RR ldexp(RR r, int exp);$/;"	p	namespace:boost::math::ntl	signature:(RR r, int exp)
boost::math::ntl::llround	/usr/include/boost/math/bindings/rr.hpp	/^   inline long long llround(RR const& x, const Policy& pol)$/;"	f	namespace:boost::math::ntl	signature:(RR const& x, const Policy& pol)
boost::math::ntl::lltrunc	/usr/include/boost/math/bindings/rr.hpp	/^   inline long long lltrunc(RR const& x, const Policy& pol)$/;"	f	namespace:boost::math::ntl	signature:(RR const& x, const Policy& pol)
boost::math::ntl::log	/usr/include/boost/math/bindings/rr.hpp	/^inline RR log(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
boost::math::ntl::log10	/usr/include/boost/math/bindings/rr.hpp	/^inline RR log10(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
boost::math::ntl::lround	/usr/include/boost/math/bindings/rr.hpp	/^   inline long lround(RR const& x, const Policy& pol)$/;"	f	namespace:boost::math::ntl	signature:(RR const& x, const Policy& pol)
boost::math::ntl::ltrunc	/usr/include/boost/math/bindings/rr.hpp	/^   inline long ltrunc(RR const& x, const Policy& pol)$/;"	f	namespace:boost::math::ntl	signature:(RR const& x, const Policy& pol)
boost::math::ntl::operator !=	/usr/include/boost/math/bindings/rr.hpp	/^inline bool operator != (const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
boost::math::ntl::operator *	/usr/include/boost/math/bindings/rr.hpp	/^inline RR operator*(const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
boost::math::ntl::operator +	/usr/include/boost/math/bindings/rr.hpp	/^inline RR operator+(const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
boost::math::ntl::operator -	/usr/include/boost/math/bindings/rr.hpp	/^inline RR operator-(const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
boost::math::ntl::operator /	/usr/include/boost/math/bindings/rr.hpp	/^inline RR operator\/(const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
boost::math::ntl::operator <	/usr/include/boost/math/bindings/rr.hpp	/^inline bool operator < (const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
boost::math::ntl::operator <<	/usr/include/boost/math/bindings/rr.hpp	/^inline std::basic_ostream<charT, traits>& operator<<(std::basic_ostream<charT, traits>& os, const RR& a)$/;"	f	namespace:boost::math::ntl	signature:(std::basic_ostream<charT, traits>& os, const RR& a)
boost::math::ntl::operator <=	/usr/include/boost/math/bindings/rr.hpp	/^inline bool operator <= (const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
boost::math::ntl::operator ==	/usr/include/boost/math/bindings/rr.hpp	/^inline bool operator == (const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
boost::math::ntl::operator >	/usr/include/boost/math/bindings/rr.hpp	/^inline bool operator > (const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
boost::math::ntl::operator >=	/usr/include/boost/math/bindings/rr.hpp	/^inline bool operator >= (const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
boost::math::ntl::operator >>	/usr/include/boost/math/bindings/rr.hpp	/^inline std::basic_istream<charT, traits>& operator>>(std::basic_istream<charT, traits>& is, RR& a)$/;"	f	namespace:boost::math::ntl	signature:(std::basic_istream<charT, traits>& is, RR& a)
boost::math::ntl::pow	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR pow(const RR& r, long l)$/;"	f	namespace:boost::math::ntl	signature:(const RR& r, long l)
boost::math::ntl::pow	/usr/include/boost/math/bindings/rr.hpp	/^inline RR pow(RR a, RR b)$/;"	f	namespace:boost::math::ntl	signature:(RR a, RR b)
boost::math::ntl::pow	/usr/include/boost/math/bindings/rr.hpp	/^inline RR pow(RR a, int b)$/;"	f	namespace:boost::math::ntl	signature:(RR a, int b)
boost::math::ntl::sin	/usr/include/boost/math/bindings/rr.hpp	/^inline RR sin(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
boost::math::ntl::sinh	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR sinh(RR z)$/;"	f	namespace:boost::math::ntl	signature:(RR z)
boost::math::ntl::sqrt	/usr/include/boost/math/bindings/rr.hpp	/^inline RR sqrt(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
boost::math::ntl::tan	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR tan(const RR& a)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a)
boost::math::ntl::tanh	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR tanh(RR z)$/;"	f	namespace:boost::math::ntl	signature:(RR z)
boost::math::octonion	/usr/include/boost/math/octonion.hpp	/^        class octonion$/;"	c	namespace:boost::math
boost::math::octonion	/usr/include/boost/math/octonion.hpp	/^        class octonion<double>$/;"	c	namespace:boost::math
boost::math::octonion	/usr/include/boost/math/octonion.hpp	/^        class octonion<float>$/;"	c	namespace:boost::math
boost::math::octonion	/usr/include/boost/math/octonion.hpp	/^        class octonion<long double>$/;"	c	namespace:boost::math
boost::math::octonion::octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                            octonion(octonion<double> const & a_recopier)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<double> const & a_recopier)
boost::math::octonion::octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                            octonion(octonion<float> const & a_recopier)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<float> const & a_recopier)
boost::math::octonion::octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                    octonion(octonion<double> const & a_recopier)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<double> const & a_recopier)
boost::math::octonion::octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                    octonion(octonion<float> const & a_recopier)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<float> const & a_recopier)
boost::math::octonion::octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                    octonion(octonion<long double> const & a_recopier)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<long double> const & a_recopier)
boost::math::octonion::octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                octonion(   ::boost::math::quaternion<T> const & q0,$/;"	f	class:boost::math::octonion	access:public	signature:( ::boost::math::quaternion<T> const & q0, ::boost::math::quaternion<T> const & q1 = ::boost::math::quaternion<T>())
boost::math::octonion::octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                octonion(   ::std::complex<T> const & z0,$/;"	f	class:boost::math::octonion	access:public	signature:( ::std::complex<T> const & z0, ::std::complex<T> const & z1 = ::std::complex<T>(), ::std::complex<T> const & z2 = ::std::complex<T>(), ::std::complex<T> const & z3 = ::std::complex<T>())
boost::math::octonion::octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                octonion(   T const & requested_a = T(),$/;"	f	class:boost::math::octonion	access:public	signature:( T const & requested_a = T(), T const & requested_b = T(), T const & requested_c = T(), T const & requested_d = T(), T const & requested_e = T(), T const & requested_f = T(), T const & requested_g = T(), T const & requested_h = T())
boost::math::octonion::octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                octonion(octonion<X> const & a_recopier)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<X> const & a_recopier)
boost::math::octonion::operator *=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator *= (::boost::math::quaternion<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::boost::math::quaternion<T> const & rhs)
boost::math::octonion::operator *=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator *= (::std::complex<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::std::complex<T> const & rhs)
boost::math::octonion::operator *=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator *= (T const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(T const & rhs)
boost::math::octonion::operator *=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator *= (octonion<X> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<X> const & rhs)
boost::math::octonion::operator +=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator += (::boost::math::quaternion<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::boost::math::quaternion<T> const & rhs)
boost::math::octonion::operator +=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator += (::std::complex<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::std::complex<T> const & rhs)
boost::math::octonion::operator +=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator += (T const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(T const & rhs)
boost::math::octonion::operator +=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator += (octonion<X> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<X> const & rhs)
boost::math::octonion::operator -=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator -= (::boost::math::quaternion<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::boost::math::quaternion<T> const & rhs)
boost::math::octonion::operator -=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator -= (::std::complex<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::std::complex<T> const & rhs)
boost::math::octonion::operator -=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator -= (T const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(T const & rhs)
boost::math::octonion::operator -=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator -= (octonion<X> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<X> const & rhs)
boost::math::octonion::operator /=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator \/= (::boost::math::quaternion<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::boost::math::quaternion<T> const & rhs)
boost::math::octonion::operator /=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator \/= (::std::complex<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::std::complex<T> const & rhs)
boost::math::octonion::operator /=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator \/= (T const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(T const & rhs)
boost::math::octonion::operator /=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator \/= (octonion<X> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<X> const & rhs)
boost::math::octonion::value_type	/usr/include/boost/math/octonion.hpp	/^            typedef T value_type;$/;"	t	class:boost::math::octonion	access:public
boost::math::octonion::value_type	/usr/include/boost/math/octonion.hpp	/^            typedef double value_type;$/;"	t	class:boost::math::octonion	access:public
boost::math::octonion::value_type	/usr/include/boost/math/octonion.hpp	/^            typedef float value_type;$/;"	t	class:boost::math::octonion	access:public
boost::math::octonion::value_type	/usr/include/boost/math/octonion.hpp	/^            typedef long double value_type;$/;"	t	class:boost::math::octonion	access:public
boost::math::operator +	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        operator + (octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::operator +	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    operator + (quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::operator -	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        operator - (octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::operator -	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    operator - (quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::operator <<	/usr/include/boost/math/octonion.hpp	/^        ::std::ostream &                        operator << (    ::std::ostream & os,$/;"	f	namespace:boost::math	signature:( ::std::ostream & os, octonion<T> const & o)
boost::math::operator <<	/usr/include/boost/math/quaternion.hpp	/^        ::std::ostream &                         operator << (    ::std::ostream & os,$/;"	f	namespace:boost::math	signature:( ::std::ostream & os, quaternion<T> const & q)
boost::math::operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (::boost::math::quaternion<T> const & lhs, octonion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(::boost::math::quaternion<T> const & lhs, octonion<T> const & rhs)
boost::math::operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (::std::complex<T> const & lhs, octonion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(::std::complex<T> const & lhs, octonion<T> const & rhs)
boost::math::operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (T const & lhs, octonion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(T const & lhs, octonion<T> const & rhs)
boost::math::operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (octonion<T> const & lhs, ::boost::math::quaternion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(octonion<T> const & lhs, ::boost::math::quaternion<T> const & rhs)
boost::math::operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (octonion<T> const & lhs, ::std::complex<T> const & rhs)$/;"	f	namespace:boost::math	signature:(octonion<T> const & lhs, ::std::complex<T> const & rhs)
boost::math::operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (octonion<T> const & lhs, T const & rhs)$/;"	f	namespace:boost::math	signature:(octonion<T> const & lhs, T const & rhs)
boost::math::operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (octonion<T> const & lhs, octonion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(octonion<T> const & lhs, octonion<T> const & rhs)
boost::math::operator ==	/usr/include/boost/math/quaternion.hpp	/^        inline bool                                operator == (::std::complex<T> const & lhs, quaternion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(::std::complex<T> const & lhs, quaternion<T> const & rhs)
boost::math::operator ==	/usr/include/boost/math/quaternion.hpp	/^        inline bool                                operator == (T const & lhs, quaternion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(T const & lhs, quaternion<T> const & rhs)
boost::math::operator ==	/usr/include/boost/math/quaternion.hpp	/^        inline bool                                operator == (quaternion<T> const & lhs, ::std::complex<T> const & rhs)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & lhs, ::std::complex<T> const & rhs)
boost::math::operator ==	/usr/include/boost/math/quaternion.hpp	/^        inline bool                                operator == (quaternion<T> const & lhs, T const & rhs)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & lhs, T const & rhs)
boost::math::operator ==	/usr/include/boost/math/quaternion.hpp	/^        inline bool                                operator == (quaternion<T> const & lhs, quaternion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & lhs, quaternion<T> const & rhs)
boost::math::operator >>	/usr/include/boost/math/octonion.hpp	/^        ::std::istream &                        operator >> (    ::std::istream & is,$/;"	f	namespace:boost::math	signature:( ::std::istream & is, octonion<T>& o)
boost::math::operator >>	/usr/include/boost/math/quaternion.hpp	/^        std::istream &                            operator >> (    ::std::istream & is,$/;"	f	namespace:boost::math	signature:( ::std::istream & is, quaternion<T> & q)
boost::math::owens_t	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type owens_t(T1 h, T2 a);$/;"	p	namespace:boost::math	signature:(T1 h, T2 a)
boost::math::owens_t	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type owens_t(T1 h, T2 a, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 h, T2 a, const Policy& pol)
boost::math::owens_t	/usr/include/boost/math/special_functions/owens_t.hpp	/^      inline typename tools::promote_args<T1, T2>::type owens_t(T1 h, T2 a)$/;"	f	namespace:boost::math	signature:(T1 h, T2 a)
boost::math::owens_t	/usr/include/boost/math/special_functions/owens_t.hpp	/^      inline typename tools::promote_args<T1, T2>::type owens_t(T1 h, T2 a, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 h, T2 a, const Policy& pol)
boost::math::pareto	/usr/include/boost/math/distributions/pareto.hpp	/^    typedef pareto_distribution<double> pareto; \/\/ Convenience to allow pareto(2., 3.);$/;"	t	namespace:boost::math
boost::math::pareto_distribution	/usr/include/boost/math/distributions/pareto.hpp	/^    class pareto_distribution$/;"	c	namespace:boost::math
boost::math::pareto_distribution::m_scale	/usr/include/boost/math/distributions/pareto.hpp	/^      RealType m_scale;  \/\/ distribution scale (xm) or beta$/;"	m	class:boost::math::pareto_distribution	access:private
boost::math::pareto_distribution::m_shape	/usr/include/boost/math/distributions/pareto.hpp	/^      RealType m_shape;  \/\/ distribution shape (k) or alpha$/;"	m	class:boost::math::pareto_distribution	access:private
boost::math::pareto_distribution::pareto_distribution	/usr/include/boost/math/distributions/pareto.hpp	/^      pareto_distribution(RealType scale = 1, RealType shape = 1)$/;"	f	class:boost::math::pareto_distribution	access:public	signature:(RealType scale = 1, RealType shape = 1)
boost::math::pareto_distribution::policy_type	/usr/include/boost/math/distributions/pareto.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::pareto_distribution	access:public
boost::math::pareto_distribution::scale	/usr/include/boost/math/distributions/pareto.hpp	/^      RealType scale()const$/;"	f	class:boost::math::pareto_distribution	access:public	signature:() const
boost::math::pareto_distribution::shape	/usr/include/boost/math/distributions/pareto.hpp	/^      RealType shape()const$/;"	f	class:boost::math::pareto_distribution	access:public	signature:() const
boost::math::pareto_distribution::value_type	/usr/include/boost/math/distributions/pareto.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::pareto_distribution	access:public
boost::math::pdf	/usr/include/boost/math/distributions/bernoulli.hpp	/^    RealType pdf(const bernoulli_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist, const RealType& k)
boost::math::pdf	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType pdf(const beta_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/binomial.hpp	/^      RealType pdf(const binomial_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist, const RealType& k)
boost::math::pdf	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType pdf(const cauchy_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/chi_squared.hpp	/^RealType pdf(const chi_squared_distribution<RealType, Policy>& dist, const RealType& chi_square)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist, const RealType& chi_square)
boost::math::pdf	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type pdf(const Distribution& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const Distribution& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType pdf(const exponential_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType pdf(const extreme_value_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/fisher_f.hpp	/^RealType pdf(const fisher_f_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType pdf(const gamma_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType pdf(const geometric_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist, const RealType& k)
boost::math::pdf	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType pdf(const hypergeometric_distribution<RealType, Policy>& dist, const U& x)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist, const U& x)
boost::math::pdf	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType pdf(const hypergeometric_distribution<RealType, Policy>& dist, const unsigned& x)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist, const unsigned& x)
boost::math::pdf	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^RealType pdf(const inverse_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType pdf(const inverse_gamma_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType pdf(const inverse_gaussian_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType pdf(const laplace_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType pdf(const logistic_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/lognormal.hpp	/^RealType pdf(const lognormal_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType pdf(const negative_binomial_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist, const RealType& k)
boost::math::pdf	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType pdf(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType pdf(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType pdf(const non_central_f_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType pdf(const non_central_t_distribution<RealType, Policy>& dist, const RealType& t)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist, const RealType& t)
boost::math::pdf	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType pdf(const normal_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType pdf(const pareto_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/poisson.hpp	/^    RealType pdf(const poisson_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist, const RealType& k)
boost::math::pdf	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType pdf(const rayleigh_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType pdf(const skew_normal_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType pdf(const students_t_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/triangular.hpp	/^  RealType pdf(const triangular_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType pdf(const uniform_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::pdf	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType pdf(const weibull_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::poisson	/usr/include/boost/math/distributions/poisson.hpp	/^    typedef poisson_distribution<double> poisson; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
boost::math::poisson_detail	/usr/include/boost/math/distributions/poisson.hpp	/^    namespace poisson_detail$/;"	n	namespace:boost::math
boost::math::poisson_detail::check_dist	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_dist(const char* function, const RealType& mean, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, const RealType& mean, RealType* result, const Policy& pol)
boost::math::poisson_detail::check_dist_and_k	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_dist_and_k(const char* function, RealType mean, RealType k, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, RealType mean, RealType k, RealType* result, const Policy& pol)
boost::math::poisson_detail::check_dist_and_prob	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_dist_and_prob(const char* function, RealType mean,  RealType p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, RealType mean, RealType p, RealType* result, const Policy& pol)
boost::math::poisson_detail::check_k	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_k(const char* function, const RealType& k, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, const RealType& k, RealType* result, const Policy& pol)
boost::math::poisson_detail::check_mean	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_mean(const char* function, const RealType& mean, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, const RealType& mean, RealType* result, const Policy& pol)
boost::math::poisson_detail::check_mean_NZ	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_mean_NZ(const char* function, const RealType& mean, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, const RealType& mean, RealType* result, const Policy& pol)
boost::math::poisson_detail::check_prob	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_prob(const char* function, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& pol)
boost::math::poisson_distribution	/usr/include/boost/math/distributions/poisson.hpp	/^    class poisson_distribution$/;"	c	namespace:boost::math
boost::math::poisson_distribution::m_l	/usr/include/boost/math/distributions/poisson.hpp	/^      RealType m_l; \/\/ mean number of occurrences.$/;"	m	class:boost::math::poisson_distribution	access:private
boost::math::poisson_distribution::mean	/usr/include/boost/math/distributions/poisson.hpp	/^      RealType mean() const$/;"	f	class:boost::math::poisson_distribution	access:public	signature:() const
boost::math::poisson_distribution::poisson_distribution	/usr/include/boost/math/distributions/poisson.hpp	/^      poisson_distribution(RealType mean = 1) : m_l(mean) \/\/ mean (lambda).$/;"	f	class:boost::math::poisson_distribution	access:public	signature:(RealType mean = 1)
boost::math::poisson_distribution::policy_type	/usr/include/boost/math/distributions/poisson.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::poisson_distribution	access:public
boost::math::poisson_distribution::value_type	/usr/include/boost/math/distributions/poisson.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::poisson_distribution	access:public
boost::math::policies	/usr/include/boost/math/bindings/e_float.hpp	/^namespace policies{$/;"	n	namespace:boost::math
boost::math::policies	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace policies{$/;"	n	namespace:boost::math
boost::math::policies	/usr/include/boost/math/policies/error_handling.hpp	/^namespace policies{$/;"	n	namespace:boost::math
boost::math::policies	/usr/include/boost/math/policies/policy.hpp	/^namespace policies{$/;"	n	namespace:boost::math
boost::math::policies::basic_digits	/usr/include/boost/math/policies/policy.hpp	/^struct basic_digits : public mpl::int_<0>{ };$/;"	s	namespace:boost::math::policies	inherits:mpl::int_
boost::math::policies::basic_digits	/usr/include/boost/math/policies/policy.hpp	/^struct basic_digits<double> : public mpl::int_<DBL_MANT_DIG>{ };$/;"	s	namespace:boost::math::policies	inherits:mpl::int_
boost::math::policies::basic_digits	/usr/include/boost/math/policies/policy.hpp	/^struct basic_digits<float> : public mpl::int_<FLT_MANT_DIG>{ };$/;"	s	namespace:boost::math::policies	inherits:mpl::int_
boost::math::policies::basic_digits	/usr/include/boost/math/policies/policy.hpp	/^struct basic_digits<long double> : public mpl::int_<LDBL_MANT_DIG>{ };$/;"	s	namespace:boost::math::policies	inherits:mpl::int_
boost::math::policies::check_root_iterations	/usr/include/boost/math/policies/error_handling.hpp	/^inline void check_root_iterations(const char* function, boost::uintmax_t max_iter, const Policy& pol)$/;"	f	namespace:boost::math::policies	signature:(const char* function, boost::uintmax_t max_iter, const Policy& pol)
boost::math::policies::check_series_iterations	/usr/include/boost/math/policies/error_handling.hpp	/^inline void check_series_iterations(const char* function, boost::uintmax_t max_iter, const Policy& pol)$/;"	f	namespace:boost::math::policies	signature:(const char* function, boost::uintmax_t max_iter, const Policy& pol)
boost::math::policies::checked_narrowing_cast	/usr/include/boost/math/policies/error_handling.hpp	/^inline R checked_narrowing_cast(T val, const char* function)$/;"	f	namespace:boost::math::policies	signature:(T val, const char* function)
boost::math::policies::default_policy	/usr/include/boost/math/policies/policy.hpp	/^struct default_policy{};$/;"	s	namespace:boost::math::policies
boost::math::policies::detail	/usr/include/boost/math/policies/error_handling.hpp	/^namespace detail$/;"	n	namespace:boost::math::policies
boost::math::policies::detail	/usr/include/boost/math/policies/policy.hpp	/^namespace detail{$/;"	n	namespace:boost::math::policies
boost::math::policies::detail::append_N	/usr/include/boost/math/policies/policy.hpp	/^struct append_N$/;"	s	namespace:boost::math::policies::detail
boost::math::policies::detail::append_N	/usr/include/boost/math/policies/policy.hpp	/^struct append_N<Seq, T, 0>$/;"	s	namespace:boost::math::policies::detail
boost::math::policies::detail::append_N::new_seq	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::push_back<Seq, T>::type new_seq;$/;"	t	struct:boost::math::policies::detail::append_N	access:public
boost::math::policies::detail::append_N::type	/usr/include/boost/math/policies/policy.hpp	/^   typedef Seq type;$/;"	t	struct:boost::math::policies::detail::append_N	access:public
boost::math::policies::detail::append_N::type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename append_N<new_seq, T, N-1>::type type;$/;"	t	struct:boost::math::policies::detail::append_N	access:public
boost::math::policies::detail::check_denorm	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_denorm(T \/* val *\/, R* \/* result*\/, const char* \/* function *\/, const denorm_error<ignore_error>&){ return false; }$/;"	f	namespace:boost::math::policies::detail	signature:(T , R* , const char* , const denorm_error<ignore_error>&)
boost::math::policies::detail::check_denorm	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_denorm(T val, R* result, const char* function, const Policy& pol)$/;"	f	namespace:boost::math::policies::detail	signature:(T val, R* result, const char* function, const Policy& pol)
boost::math::policies::detail::check_denorm	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_denorm(std::complex<T> \/* val *\/, R* \/* result*\/, const char* \/* function *\/, const denorm_error<ignore_error>&){ return false; }$/;"	f	namespace:boost::math::policies::detail	signature:(std::complex<T> , R* , const char* , const denorm_error<ignore_error>&)
boost::math::policies::detail::check_denorm	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_denorm(std::complex<T> val, R* result, const char* function, const Policy& pol)$/;"	f	namespace:boost::math::policies::detail	signature:(std::complex<T> val, R* result, const char* function, const Policy& pol)
boost::math::policies::detail::check_overflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_overflow(T \/* val *\/, R* \/* result *\/, const char* \/* function *\/, const overflow_error<ignore_error>&){ return false; }$/;"	f	namespace:boost::math::policies::detail	signature:(T , R* , const char* , const overflow_error<ignore_error>&)
boost::math::policies::detail::check_overflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_overflow(T val, R* result, const char* function, const Policy& pol)$/;"	f	namespace:boost::math::policies::detail	signature:(T val, R* result, const char* function, const Policy& pol)
boost::math::policies::detail::check_overflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_overflow(std::complex<T> \/* val *\/, R* \/* result *\/, const char* \/* function *\/, const overflow_error<ignore_error>&){ return false; }$/;"	f	namespace:boost::math::policies::detail	signature:(std::complex<T> , R* , const char* , const overflow_error<ignore_error>&)
boost::math::policies::detail::check_overflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_overflow(std::complex<T> val, R* result, const char* function, const Policy& pol)$/;"	f	namespace:boost::math::policies::detail	signature:(std::complex<T> val, R* result, const char* function, const Policy& pol)
boost::math::policies::detail::check_underflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_underflow(T \/* val *\/, R* \/* result *\/, const char* \/* function *\/, const underflow_error<ignore_error>&){ return false; }$/;"	f	namespace:boost::math::policies::detail	signature:(T , R* , const char* , const underflow_error<ignore_error>&)
boost::math::policies::detail::check_underflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_underflow(T val, R* result, const char* function, const Policy& pol)$/;"	f	namespace:boost::math::policies::detail	signature:(T val, R* result, const char* function, const Policy& pol)
boost::math::policies::detail::check_underflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_underflow(std::complex<T> \/* val *\/, R* \/* result *\/, const char* \/* function *\/, const underflow_error<ignore_error>&){ return false; }$/;"	f	namespace:boost::math::policies::detail	signature:(std::complex<T> , R* , const char* , const underflow_error<ignore_error>&)
boost::math::policies::detail::check_underflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_underflow(std::complex<T> val, R* result, const char* function, const Policy& pol)$/;"	f	namespace:boost::math::policies::detail	signature:(std::complex<T> val, R* result, const char* function, const Policy& pol)
boost::math::policies::detail::default_args	/usr/include/boost/math/policies/policy.hpp	/^struct default_args$/;"	s	namespace:boost::math::policies::detail
boost::math::policies::detail::default_args	/usr/include/boost/math/policies/policy.hpp	/^struct default_args<false, false>$/;"	s	namespace:boost::math::policies::detail
boost::math::policies::detail::default_args	/usr/include/boost/math/policies/policy.hpp	/^struct default_args<false, true>$/;"	s	namespace:boost::math::policies::detail
boost::math::policies::detail::default_args	/usr/include/boost/math/policies/policy.hpp	/^struct default_args<true, false>$/;"	s	namespace:boost::math::policies::detail
boost::math::policies::detail::default_args::arg1	/usr/include/boost/math/policies/policy.hpp	/^   typedef default_policy arg1;$/;"	t	struct:boost::math::policies::detail::default_args	access:public
boost::math::policies::detail::default_args::arg1	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_double<false> arg1;$/;"	t	struct:boost::math::policies::detail::default_args	access:public
boost::math::policies::detail::default_args::arg1	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_float<false> arg1;$/;"	t	struct:boost::math::policies::detail::default_args	access:public
boost::math::policies::detail::default_args::arg2	/usr/include/boost/math/policies/policy.hpp	/^   typedef default_policy arg2;$/;"	t	struct:boost::math::policies::detail::default_args	access:public
boost::math::policies::detail::default_args::arg2	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_double<false> arg2;$/;"	t	struct:boost::math::policies::detail::default_args	access:public
boost::math::policies::detail::do_format	/usr/include/boost/math/policies/error_handling.hpp	/^inline std::string do_format(Formatter f, const Group& g)$/;"	f	namespace:boost::math::policies::detail	signature:(Formatter f, const Group& g)
boost::math::policies::detail::find_arg	/usr/include/boost/math/policies/policy.hpp	/^struct find_arg$/;"	s	namespace:boost::math::policies::detail
boost::math::policies::detail::find_arg::end_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::end<Seq>::type end_type;$/;"	t	struct:boost::math::policies::detail::find_arg	access:private
boost::math::policies::detail::find_arg::iter	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::find_if<Seq, Pred>::type iter;$/;"	t	struct:boost::math::policies::detail::find_arg	access:private
boost::math::policies::detail::find_arg::type	/usr/include/boost/math/policies/policy.hpp	/^      ::boost::is_same<iter, end_type>::value>::type type;$/;"	t	struct:boost::math::policies::detail::find_arg	access:public
boost::math::policies::detail::forwarding_arg1	/usr/include/boost/math/policies/policy.hpp	/^typedef default_args<BOOST_MATH_PROMOTE_FLOAT_POLICY, BOOST_MATH_PROMOTE_DOUBLE_POLICY>::arg1 forwarding_arg1;$/;"	t	namespace:boost::math::policies::detail
boost::math::policies::detail::forwarding_arg2	/usr/include/boost/math/policies/policy.hpp	/^typedef default_args<BOOST_MATH_PROMOTE_FLOAT_POLICY, BOOST_MATH_PROMOTE_DOUBLE_POLICY>::arg2 forwarding_arg2;$/;"	t	namespace:boost::math::policies::detail
boost::math::policies::detail::is_default_policy	/usr/include/boost/math/policies/policy.hpp	/^template <class T> struct is_default_policy $/;"	s	namespace:boost::math::policies::detail	inherits:mpl::bool_
boost::math::policies::detail::is_default_policy::apply	/usr/include/boost/math/policies/policy.hpp	/^   struct apply$/;"	s	struct:boost::math::policies::detail::is_default_policy	access:public
boost::math::policies::detail::is_default_policy::apply::type	/usr/include/boost/math/policies/policy.hpp	/^      typedef is_default_policy<U> type;$/;"	t	struct:boost::math::policies::detail::is_default_policy::apply	access:public
boost::math::policies::detail::is_default_policy_imp	/usr/include/boost/math/policies/policy.hpp	/^struct is_default_policy_imp$/;"	s	namespace:boost::math::policies::detail
boost::math::policies::detail::is_default_policy_imp::BOOST_STATIC_CONSTANT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = sizeof(::boost::math::policies::detail::test_is_default_arg(static_cast<T*>(0))) == 1);$/;"	p	struct:boost::math::policies::detail::is_default_policy_imp	access:public	signature:(bool, value = sizeof(::boost::math::policies::detail::test_is_default_arg(static_cast<T*>(0))) == 1)
boost::math::policies::detail::is_valid_policy	/usr/include/boost/math/policies/policy.hpp	/^template <class T> struct is_valid_policy $/;"	s	namespace:boost::math::policies::detail	inherits:mpl::bool_
boost::math::policies::detail::is_valid_policy_imp	/usr/include/boost/math/policies/policy.hpp	/^struct is_valid_policy_imp $/;"	s	namespace:boost::math::policies::detail
boost::math::policies::detail::is_valid_policy_imp::BOOST_STATIC_CONSTANT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = sizeof(::boost::math::policies::detail::test_is_valid_arg(static_cast<T*>(0))) == 1);$/;"	p	struct:boost::math::policies::detail::is_valid_policy_imp	access:public	signature:(bool, value = sizeof(::boost::math::policies::detail::test_is_valid_arg(static_cast<T*>(0))) == 1)
boost::math::policies::detail::precision	/usr/include/boost/math/policies/policy.hpp	/^struct precision$/;"	s	namespace:boost::math::policies::detail
boost::math::policies::detail::precision::Digits2	/usr/include/boost/math/policies/policy.hpp	/^      Digits2, digits2_type>::type type;$/;"	t	struct:boost::math::policies::detail::precision	access:public
boost::math::policies::detail::precision::digits2_type	/usr/include/boost/math/policies/policy.hpp	/^   >::type digits2_type;$/;"	t	struct:boost::math::policies::detail::precision	access:public
boost::math::policies::detail::precision::digits2_type::value	/usr/include/boost/math/policies/policy.hpp	/^      (Digits2::value > digits2_type::value),$/;"	t	class:boost::math::policies::detail::precision::digits2_type	access:public
boost::math::policies::detail::precision::mpl::if_c::boost::math::policies::detail::precision::digits2_type::value	/usr/include/boost/math/policies/policy.hpp	/^      (Digits2::value > ::boost::math::policies::detail::precision<Digits10,Digits2>::digits2_type::value),$/;"	t	class:boost::math::policies::detail::precision::mpl::if_c::boost::math::policies::detail::precision::digits2_type	access:public
boost::math::policies::detail::precision::type	/usr/include/boost/math/policies/policy.hpp	/^      Digits2, digits2_type>::type type;$/;"	t	struct:boost::math::policies::detail::precision	access:public
boost::math::policies::detail::raise_denorm_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_denorm_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& val, const ::boost::math::policies::denorm_error< ::boost::math::policies::errno_on_error>&)
boost::math::policies::detail::raise_denorm_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_denorm_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& val, const ::boost::math::policies::denorm_error< ::boost::math::policies::ignore_error>&)
boost::math::policies::detail::raise_denorm_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_denorm_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& , const ::boost::math::policies::denorm_error< ::boost::math::policies::throw_on_error>&)
boost::math::policies::detail::raise_denorm_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_denorm_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::denorm_error< ::boost::math::policies::user_error>&)
boost::math::policies::detail::raise_domain_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_domain_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& , const ::boost::math::policies::domain_error< ::boost::math::policies::errno_on_error>&)
boost::math::policies::detail::raise_domain_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_domain_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& , const ::boost::math::policies::domain_error< ::boost::math::policies::ignore_error>&)
boost::math::policies::detail::raise_domain_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_domain_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::domain_error< ::boost::math::policies::throw_on_error>&)
boost::math::policies::detail::raise_domain_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_domain_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::domain_error< ::boost::math::policies::user_error>&)
boost::math::policies::detail::raise_error	/usr/include/boost/math/policies/error_handling.hpp	/^void raise_error(const char* function, const char* message)$/;"	f	namespace:boost::math::policies::detail	signature:(const char* function, const char* message)
boost::math::policies::detail::raise_error	/usr/include/boost/math/policies/error_handling.hpp	/^void raise_error(const char* function, const char* message, const T& val)$/;"	f	namespace:boost::math::policies::detail	signature:(const char* function, const char* message, const T& val)
boost::math::policies::detail::raise_evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_evaluation_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& val, const ::boost::math::policies::evaluation_error< ::boost::math::policies::errno_on_error>&)
boost::math::policies::detail::raise_evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_evaluation_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& val, const ::boost::math::policies::evaluation_error< ::boost::math::policies::ignore_error>&)
boost::math::policies::detail::raise_evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_evaluation_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::evaluation_error< ::boost::math::policies::throw_on_error>&)
boost::math::policies::detail::raise_evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_evaluation_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::evaluation_error< ::boost::math::policies::user_error>&)
boost::math::policies::detail::raise_indeterminate_result_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_indeterminate_result_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& , const R& result, const ::boost::math::policies::indeterminate_result_error< ::boost::math::policies::errno_on_error>&)
boost::math::policies::detail::raise_indeterminate_result_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_indeterminate_result_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& , const R& result, const ::boost::math::policies::indeterminate_result_error< ::boost::math::policies::ignore_error>&)
boost::math::policies::detail::raise_indeterminate_result_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_indeterminate_result_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const R& , const ::boost::math::policies::indeterminate_result_error< ::boost::math::policies::throw_on_error>&)
boost::math::policies::detail::raise_indeterminate_result_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_indeterminate_result_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const R& , const ::boost::math::policies::indeterminate_result_error< ::boost::math::policies::user_error>&)
boost::math::policies::detail::raise_overflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_overflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const ::boost::math::policies::overflow_error< ::boost::math::policies::errno_on_error>&)
boost::math::policies::detail::raise_overflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_overflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const ::boost::math::policies::overflow_error< ::boost::math::policies::ignore_error>&)
boost::math::policies::detail::raise_overflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_overflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const ::boost::math::policies::overflow_error< ::boost::math::policies::throw_on_error>&)
boost::math::policies::detail::raise_overflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_overflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const ::boost::math::policies::overflow_error< ::boost::math::policies::user_error>&)
boost::math::policies::detail::raise_pole_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_pole_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::pole_error< ::boost::math::policies::errno_on_error>&)
boost::math::policies::detail::raise_pole_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_pole_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::pole_error< ::boost::math::policies::ignore_error>&)
boost::math::policies::detail::raise_pole_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_pole_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::pole_error< ::boost::math::policies::throw_on_error>&)
boost::math::policies::detail::raise_pole_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_pole_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::pole_error< ::boost::math::policies::user_error>&)
boost::math::policies::detail::raise_rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_rounding_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& val, const TargetType&, const ::boost::math::policies::rounding_error< ::boost::math::policies::errno_on_error>&)
boost::math::policies::detail::raise_rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_rounding_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& val, const TargetType&, const ::boost::math::policies::rounding_error< ::boost::math::policies::ignore_error>&)
boost::math::policies::detail::raise_rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_rounding_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const TargetType& t, const ::boost::math::policies::rounding_error< ::boost::math::policies::user_error>&)
boost::math::policies::detail::raise_rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_rounding_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const TargetType&, const ::boost::math::policies::rounding_error< ::boost::math::policies::throw_on_error>&)
boost::math::policies::detail::raise_underflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_underflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const ::boost::math::policies::underflow_error< ::boost::math::policies::errno_on_error>&)
boost::math::policies::detail::raise_underflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_underflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const ::boost::math::policies::underflow_error< ::boost::math::policies::ignore_error>&)
boost::math::policies::detail::raise_underflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_underflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const ::boost::math::policies::underflow_error< ::boost::math::policies::throw_on_error>&)
boost::math::policies::detail::raise_underflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_underflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const ::boost::math::policies::underflow_error< ::boost::math::policies::user_error>&)
boost::math::policies::detail::select_result	/usr/include/boost/math/policies/policy.hpp	/^struct select_result$/;"	s	namespace:boost::math::policies::detail
boost::math::policies::detail::select_result	/usr/include/boost/math/policies/policy.hpp	/^struct select_result<A, B, false>$/;"	s	namespace:boost::math::policies::detail
boost::math::policies::detail::select_result::type	/usr/include/boost/math/policies/policy.hpp	/^   typedef A type;$/;"	t	struct:boost::math::policies::detail::select_result	access:public
boost::math::policies::detail::select_result::type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::deref<B>::type type;$/;"	t	struct:boost::math::policies::detail::select_result	access:public
boost::math::policies::detail::test_is_default_arg	/usr/include/boost/math/policies/policy.hpp	/^char test_is_default_arg(const default_policy*);$/;"	p	namespace:boost::math::policies::detail	signature:(const default_policy*)
boost::math::policies::detail::test_is_default_arg	/usr/include/boost/math/policies/policy.hpp	/^double test_is_default_arg(...);$/;"	p	namespace:boost::math::policies::detail	signature:(....)
boost::math::policies::detail::test_is_valid_arg	/usr/include/boost/math/policies/policy.hpp	/^char test_is_valid_arg(const default_policy*);$/;"	p	namespace:boost::math::policies::detail	signature:(const default_policy*)
boost::math::policies::detail::test_is_valid_arg	/usr/include/boost/math/policies/policy.hpp	/^double test_is_valid_arg(...);$/;"	p	namespace:boost::math::policies::detail	signature:(....)
boost::math::policies::discrete_quantile_policy_type	/usr/include/boost/math/policies/policy.hpp	/^enum discrete_quantile_policy_type$/;"	g	namespace:boost::math::policies
boost::math::policies::errno_on_error	/usr/include/boost/math/policies/policy.hpp	/^   errno_on_error = 1,$/;"	e	enum:boost::math::policies::error_policy_type
boost::math::policies::error_policy_type	/usr/include/boost/math/policies/policy.hpp	/^enum error_policy_type$/;"	g	namespace:boost::math::policies
boost::math::policies::evaluation	/usr/include/boost/math/bindings/mpfr.hpp	/^struct evaluation<__gmp_expr<T, U>, Policy>$/;"	s	namespace:boost::math::policies
boost::math::policies::evaluation	/usr/include/boost/math/policies/policy.hpp	/^struct evaluation$/;"	s	namespace:boost::math::policies
boost::math::policies::evaluation	/usr/include/boost/math/policies/policy.hpp	/^struct evaluation<double, Policy>$/;"	s	namespace:boost::math::policies
boost::math::policies::evaluation	/usr/include/boost/math/policies/policy.hpp	/^struct evaluation<float, Policy>$/;"	s	namespace:boost::math::policies
boost::math::policies::evaluation::type	/usr/include/boost/math/bindings/mpfr.hpp	/^   typedef mpfr_class type;$/;"	t	struct:boost::math::policies::evaluation	access:public
boost::math::policies::evaluation::type	/usr/include/boost/math/policies/policy.hpp	/^   typedef Real type;$/;"	t	struct:boost::math::policies::evaluation	access:public
boost::math::policies::evaluation::type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::if_<typename Policy::promote_double_type, long double, double>::type type;$/;"	t	struct:boost::math::policies::evaluation	access:public
boost::math::policies::evaluation::type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::if_<typename Policy::promote_float_type, double, float>::type type;$/;"	t	struct:boost::math::policies::evaluation	access:public
boost::math::policies::ignore_error	/usr/include/boost/math/policies/policy.hpp	/^   ignore_error = 2,$/;"	e	enum:boost::math::policies::error_policy_type
boost::math::policies::integer_round_down	/usr/include/boost/math/policies/policy.hpp	/^   integer_round_down,$/;"	e	enum:boost::math::policies::discrete_quantile_policy_type
boost::math::policies::integer_round_inwards	/usr/include/boost/math/policies/policy.hpp	/^   integer_round_inwards,$/;"	e	enum:boost::math::policies::discrete_quantile_policy_type
boost::math::policies::integer_round_nearest	/usr/include/boost/math/policies/policy.hpp	/^   integer_round_nearest$/;"	e	enum:boost::math::policies::discrete_quantile_policy_type
boost::math::policies::integer_round_outwards	/usr/include/boost/math/policies/policy.hpp	/^   integer_round_outwards,$/;"	e	enum:boost::math::policies::discrete_quantile_policy_type
boost::math::policies::integer_round_up	/usr/include/boost/math/policies/policy.hpp	/^   integer_round_up,$/;"	e	enum:boost::math::policies::discrete_quantile_policy_type
boost::math::policies::make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline policy<> make_policy()$/;"	f	namespace:boost::math::policies	signature:()
boost::math::policies::make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&, const A9&, const A10&, const A11&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&, const A9&, const A10&, const A11&)
boost::math::policies::make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&, const A9&, const A10&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&, const A9&, const A10&)
boost::math::policies::make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5, A6, A7, A8, A9>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&, const A9&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&, const A9&)
boost::math::policies::make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5, A6, A7, A8>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&)
boost::math::policies::make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5, A6, A7>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&)
boost::math::policies::make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5, A6>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&)
boost::math::policies::make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&)
boost::math::policies::make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4>::type make_policy(const A1&, const A2&, const A3&, const A4&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&)
boost::math::policies::make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3>::type make_policy(const A1&, const A2&, const A3&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&)
boost::math::policies::make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2>::type make_policy(const A1&, const A2&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&)
boost::math::policies::make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1>::type make_policy(const A1&)$/;"	f	namespace:boost::math::policies	signature:(const A1&)
boost::math::policies::normalise	/usr/include/boost/math/policies/policy.hpp	/^struct normalise$/;"	s	namespace:boost::math::policies
boost::math::policies::normalise	/usr/include/boost/math/policies/policy.hpp	/^struct normalise<policy<>, $/;"	s	namespace:boost::math::policies
boost::math::policies::normalise	/usr/include/boost/math/policies/policy.hpp	/^struct normalise<policy<detail::forwarding_arg1, detail::forwarding_arg2>,$/;"	s	namespace:boost::math::policies
boost::math::policies::normalise::arg_list	/usr/include/boost/math/policies/policy.hpp	/^   typedef mpl::list<A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13> arg_list;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::assert_undefined_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_assert_undefined<mpl::_1>, typename Policy::assert_undefined_type >::type assert_undefined_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::bits_precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_digits2<mpl::_1>, typename Policy::precision_type >::type bits_precision_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::denorm_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_denorm_error<mpl::_1>, typename Policy::denorm_error_type >::type denorm_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::digits10_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_digits10<mpl::_1>, digits10<> >::type digits10_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::discrete_quantile_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_discrete_quantile<mpl::_1>, typename Policy::discrete_quantile_type >::type discrete_quantile_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::domain_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_domain_error<mpl::_1>, typename Policy::domain_error_type >::type domain_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::evaluation_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_evaluation_error<mpl::_1>, typename Policy::evaluation_error_type >::type evaluation_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::indeterminate_result_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_indeterminate_result_error<mpl::_1>, typename Policy::indeterminate_result_error_type >::type indeterminate_result_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::max_root_iterations_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_max_root_iterations<mpl::_1>, typename Policy::max_root_iterations_type>::type max_root_iterations_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::max_series_iterations_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_max_series_iterations<mpl::_1>, typename Policy::max_series_iterations_type>::type max_series_iterations_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::overflow_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_overflow_error<mpl::_1>, typename Policy::overflow_error_type >::type overflow_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::pole_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_pole_error<mpl::_1>, typename Policy::pole_error_type >::type pole_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::precision<digits10_type, bits_precision_type>::type precision_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::promote_double_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_promote_double<mpl::_1>, typename Policy::promote_double_type >::type promote_double_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::promote_float_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_promote_float<mpl::_1>, typename Policy::promote_float_type >::type promote_float_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::reduced_list	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::remove_if<result_list, detail::is_default_policy<mpl::_> >::type reduced_list;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::result_list	/usr/include/boost/math/policies/policy.hpp	/^      max_root_iterations_type> result_list;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::result_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::append_N<reduced_list, default_policy, (14 - ::boost::mpl::size<reduced_list>::value)>::type result_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::rounding_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_rounding_error<mpl::_1>, typename Policy::rounding_error_type >::type rounding_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::normalise::type	/usr/include/boost/math/policies/policy.hpp	/^      typename mpl::at<result_type, mpl::int_<12> >::type > type;$/;"	t	struct:boost::math::policies::normalise	access:public
boost::math::policies::normalise::type	/usr/include/boost/math/policies/policy.hpp	/^   typedef policy<detail::forwarding_arg1, detail::forwarding_arg2> type;$/;"	t	struct:boost::math::policies::normalise	access:public
boost::math::policies::normalise::underflow_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_underflow_error<mpl::_1>, typename Policy::underflow_error_type >::type underflow_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
boost::math::policies::policy	/usr/include/boost/math/policies/policy.hpp	/^struct policy$/;"	s	namespace:boost::math::policies
boost::math::policies::policy	/usr/include/boost/math/policies/policy.hpp	/^struct policy<default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy>$/;"	s	namespace:boost::math::policies
boost::math::policies::policy	/usr/include/boost/math/policies/policy.hpp	/^struct policy<detail::forwarding_arg1, detail::forwarding_arg2, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy>$/;"	s	namespace:boost::math::policies
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A10>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A10>::value)
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A11>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A11>::value)
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A12>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A12>::value)
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A13>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A13>::value)
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A1>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A1>::value)
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A2>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A2>::value)
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A3>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A3>::value)
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A4>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A4>::value)
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A5>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A5>::value)
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A6>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A6>::value)
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A7>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A7>::value)
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A8>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A8>::value)
boost::math::policies::policy::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT(::boost::math::policies::detail::is_valid_policy<A9>::value);$/;"	p	struct:boost::math::policies::policy	access:private	signature:(::boost::math::policies::detail::is_valid_policy<A9>::value)
boost::math::policies::policy::arg_list	/usr/include/boost/math/policies/policy.hpp	/^   typedef mpl::list<A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13> arg_list;$/;"	t	struct:boost::math::policies::policy	access:private
boost::math::policies::policy::assert_undefined_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef assert_undefined<> assert_undefined_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::assert_undefined_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_assert_undefined<mpl::_1>, assert_undefined<> >::type assert_undefined_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::bits_precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_digits2<mpl::_1>, digits2<> >::type bits_precision_type;$/;"	t	struct:boost::math::policies::policy	access:private
boost::math::policies::policy::denorm_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef denorm_error<> denorm_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::denorm_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_denorm_error<mpl::_1>, denorm_error<> >::type denorm_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::digits10_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_digits10<mpl::_1>, digits10<> >::type digits10_type;$/;"	t	struct:boost::math::policies::policy	access:private
boost::math::policies::policy::discrete_quantile_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef discrete_quantile<> discrete_quantile_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::discrete_quantile_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_discrete_quantile<mpl::_1>, discrete_quantile<> >::type discrete_quantile_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::domain_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef domain_error<> domain_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::domain_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_domain_error<mpl::_1>, domain_error<> >::type domain_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::evaluation_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef evaluation_error<> evaluation_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::evaluation_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_evaluation_error<mpl::_1>, evaluation_error<> >::type evaluation_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::indeterminate_result_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef indeterminate_result_error<> indeterminate_result_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::indeterminate_result_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_indeterminate_result_error<mpl::_1>, indeterminate_result_error<> >::type indeterminate_result_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::max_root_iterations_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef max_root_iterations<> max_root_iterations_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::max_root_iterations_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_max_root_iterations<mpl::_1>, max_root_iterations<> >::type max_root_iterations_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::max_series_iterations_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef max_series_iterations<> max_series_iterations_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::max_series_iterations_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_max_series_iterations<mpl::_1>, max_series_iterations<> >::type max_series_iterations_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::overflow_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef overflow_error<> overflow_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::overflow_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_overflow_error<mpl::_1>, overflow_error<> >::type overflow_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::pole_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef pole_error<> pole_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::pole_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_pole_error<mpl::_1>, pole_error<> >::type pole_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef detail::precision<digits10<>, digits2<> >::type precision_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef digits2<> precision_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::precision<digits10_type, bits_precision_type>::type precision_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::promote_double_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_double<> promote_double_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::promote_double_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_double<false> promote_double_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::promote_double_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_promote_double<mpl::_1>, promote_double<> >::type promote_double_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::promote_float_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_float<> promote_float_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::promote_float_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_float<false> promote_float_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::promote_float_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_promote_float<mpl::_1>, promote_float<> >::type promote_float_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::rounding_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef rounding_error<> rounding_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::rounding_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_rounding_error<mpl::_1>, rounding_error<> >::type rounding_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::underflow_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_underflow_error<mpl::_1>, underflow_error<> >::type underflow_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::policy::underflow_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef underflow_error<> underflow_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
boost::math::policies::precision	/usr/include/boost/math/bindings/e_float.hpp	/^struct precision< ::boost::math::ef::e_float, Policy>$/;"	s	namespace:boost::math::policies
boost::math::policies::precision	/usr/include/boost/math/policies/policy.hpp	/^struct precision$/;"	s	namespace:boost::math::policies
boost::math::policies::precision	/usr/include/boost/math/policies/policy.hpp	/^struct precision<double, Policy>$/;"	s	namespace:boost::math::policies
boost::math::policies::precision	/usr/include/boost/math/policies/policy.hpp	/^struct precision<float, Policy>$/;"	s	namespace:boost::math::policies
boost::math::policies::precision	/usr/include/boost/math/policies/policy.hpp	/^struct precision<long double, Policy>$/;"	s	namespace:boost::math::policies
boost::math::policies::precision::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT( ::std::numeric_limits<Real>::radix == 2);$/;"	p	struct:boost::math::policies::precision	access:public	signature:( ::std::numeric_limits<Real>::radix == 2)
boost::math::policies::precision::BOOST_STATIC_ASSERT	/usr/include/boost/math/policies/policy.hpp	/^   BOOST_STATIC_ASSERT((::std::numeric_limits<Real>::radix == 2) || ((::std::numeric_limits<Real>::is_specialized == 0) || (::std::numeric_limits<Real>::digits == 0)));$/;"	p	struct:boost::math::policies::precision	access:public	signature:(::std::numeric_limits<Real>::radix == 2) || ((::std::numeric_limits<Real>::is_specialized == 0) || (::std::numeric_limits<Real>::digits == 0))
boost::math::policies::precision::digits_2	/usr/include/boost/math/bindings/e_float.hpp	/^   typedef digits2<((::std::numeric_limits< ::boost::math::ef::e_float>::digits10 + 1) * 1000L) \/ 301L> digits_2;$/;"	t	struct:boost::math::policies::precision	access:public
boost::math::policies::precision::digits_t	/usr/include/boost/math/policies/policy.hpp	/^   typedef basic_digits<Real> digits_t;$/;"	t	struct:boost::math::policies::precision	access:public
boost::math::policies::precision::precision_type	/usr/include/boost/math/bindings/e_float.hpp	/^   typedef typename Policy::precision_type precision_type;$/;"	t	struct:boost::math::policies::precision	access:public
boost::math::policies::precision::precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename Policy::precision_type precision_type;$/;"	t	struct:boost::math::policies::precision	access:public
boost::math::policies::precision::type	/usr/include/boost/math/policies/policy.hpp	/^   >::type type;$/;"	t	struct:boost::math::policies::precision	access:public
boost::math::policies::precision::type	/usr/include/boost/math/policies/policy.hpp	/^   typedef digits2<DBL_MANT_DIG> type;$/;"	t	struct:boost::math::policies::precision	access:public
boost::math::policies::precision::type	/usr/include/boost/math/policies/policy.hpp	/^   typedef digits2<FLT_MANT_DIG> type;$/;"	t	struct:boost::math::policies::precision	access:public
boost::math::policies::precision::type	/usr/include/boost/math/policies/policy.hpp	/^   typedef digits2<LDBL_MANT_DIG> type;$/;"	t	struct:boost::math::policies::precision	access:public
boost::math::policies::raise_denorm_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_denorm_error(const char* function, const char* message, const T& val, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const Policy&)
boost::math::policies::raise_domain_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_domain_error(const char* function, const char* message, const T& val, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const Policy&)
boost::math::policies::raise_evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_evaluation_error(const char* function, const char* message, const T& val, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const Policy&)
boost::math::policies::raise_indeterminate_result_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_indeterminate_result_error(const char* function, const char* message, const T& val, const R& result, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const R& result, const Policy&)
boost::math::policies::raise_overflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_overflow_error(const char* function, const char* message, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const Policy&)
boost::math::policies::raise_pole_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_pole_error(const char* function, const char* message, const T& val, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const Policy&)
boost::math::policies::raise_rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_rounding_error(const char* function, const char* message, const T& val, const TargetType& t, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const TargetType& t, const Policy&)
boost::math::policies::raise_underflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_underflow_error(const char* function, const char* message, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const Policy&)
boost::math::policies::real	/usr/include/boost/math/policies/policy.hpp	/^   real,$/;"	e	enum:boost::math::policies::discrete_quantile_policy_type
boost::math::policies::throw_on_error	/usr/include/boost/math/policies/policy.hpp	/^   throw_on_error = 0,$/;"	e	enum:boost::math::policies::error_policy_type
boost::math::policies::user_denorm_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_denorm_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
boost::math::policies::user_domain_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_domain_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
boost::math::policies::user_error	/usr/include/boost/math/policies/policy.hpp	/^   user_error = 3$/;"	e	enum:boost::math::policies::error_policy_type
boost::math::policies::user_evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_evaluation_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
boost::math::policies::user_indeterminate_result_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_indeterminate_result_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
boost::math::policies::user_overflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_overflow_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
boost::math::policies::user_pole_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_pole_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
boost::math::policies::user_rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_rounding_error(const char* function, const char* message, const T& val, const TargetType& t);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const TargetType& t)
boost::math::policies::user_underflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_underflow_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
boost::math::pow	/usr/include/boost/math/octonion.hpp	/^        octonion<T>                                pow(octonion<T> const & o,$/;"	f	namespace:boost::math	signature:(octonion<T> const & o, int n)
boost::math::pow	/usr/include/boost/math/quaternion.hpp	/^        quaternion<T>                            pow(quaternion<T> const & q,$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q, int n)
boost::math::pow	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type pow(T base);$/;"	p	namespace:boost::math	signature:(T base)
boost::math::pow	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type pow(T base, const Policy& policy);$/;"	p	namespace:boost::math	signature:(T base, const Policy& policy)
boost::math::pow	/usr/include/boost/math/special_functions/pow.hpp	/^inline typename tools::promote_args<T>::type pow(T base)$/;"	f	namespace:boost::math	signature:(T base)
boost::math::pow	/usr/include/boost/math/special_functions/pow.hpp	/^inline typename tools::promote_args<T>::type pow(T base, const Policy& policy)$/;"	f	namespace:boost::math	signature:(T base, const Policy& policy)
boost::math::powm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         powm1(const T1 a, const T2 z);$/;"	p	namespace:boost::math	signature:(const T1 a, const T2 z)
boost::math::powm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         powm1(const T1 a, const T2 z, const Policy&);$/;"	p	namespace:boost::math	signature:(const T1 a, const T2 z, const Policy&)
boost::math::powm1	/usr/include/boost/math/special_functions/powm1.hpp	/^   powm1(const T1 a, const T2 z)$/;"	f	namespace:boost::math	signature:(const T1 a, const T2 z)
boost::math::powm1	/usr/include/boost/math/special_functions/powm1.hpp	/^   powm1(const T1 a, const T2 z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T1 a, const T2 z, const Policy& pol)
boost::math::prime	/usr/include/boost/math/special_functions/prime.hpp	/^   boost::uint32_t prime(unsigned n, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, const Policy& pol)
boost::math::prime	/usr/include/boost/math/special_functions/prime.hpp	/^   inline boost::uint32_t prime(unsigned n)$/;"	f	namespace:boost::math	signature:(unsigned n)
boost::math::quantile	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType quantile(const bernoulli_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType quantile(const complemented2_type<bernoulli_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<bernoulli_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType quantile(const beta_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType quantile(const complemented2_type<beta_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<beta_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/binomial.hpp	/^      RealType quantile(const complemented2_type<binomial_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<binomial_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType quantile(const binomial_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType quantile(const cauchy_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType quantile(const complemented2_type<cauchy_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<cauchy_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType quantile(const chi_squared_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType quantile(const complemented2_type<chi_squared_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<chi_squared_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type quantile(const Distribution& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const Distribution& dist, const RealType& x)
boost::math::quantile	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type quantile(const complemented2_type<Distribution, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<Distribution, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType quantile(const complemented2_type<exponential_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<exponential_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType quantile(const exponential_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/extreme_value.hpp	/^RealType quantile(const complemented2_type<extreme_value_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<extreme_value_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/extreme_value.hpp	/^RealType quantile(const extreme_value_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType quantile(const complemented2_type<fisher_f_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<fisher_f_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType quantile(const fisher_f_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType quantile(const complemented2_type<gamma_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<gamma_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType quantile(const gamma_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType quantile(const complemented2_type<geometric_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<geometric_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType quantile(const geometric_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist, const RealType& x)
boost::math::quantile	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType quantile(const complemented2_type<hypergeometric_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<hypergeometric_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType quantile(const hypergeometric_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType quantile(const complemented2_type<inverse_chi_squared_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<inverse_chi_squared_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType quantile(const inverse_chi_squared_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType quantile(const complemented2_type<inverse_gamma_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<inverse_gamma_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType quantile(const inverse_gamma_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType quantile(const complemented2_type<inverse_gaussian_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<inverse_gaussian_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType quantile(const inverse_gaussian_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType quantile(const complemented2_type<laplace_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<laplace_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType quantile(const laplace_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType quantile(const complemented2_type<logistic_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<logistic_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType quantile(const logistic_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType quantile(const complemented2_type<lognormal_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<lognormal_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType quantile(const lognormal_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType quantile(const complemented2_type<negative_binomial_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<negative_binomial_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType quantile(const negative_binomial_distribution<RealType, Policy>& dist, const RealType& P)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist, const RealType& P)
boost::math::quantile	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType quantile(const complemented2_type<non_central_beta_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_beta_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType quantile(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType quantile(const complemented2_type<non_central_chi_squared_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_chi_squared_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType quantile(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType quantile(const complemented2_type<non_central_f_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_f_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType quantile(const non_central_f_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType quantile(const complemented2_type<non_central_t_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_t_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType quantile(const non_central_t_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType quantile(const complemented2_type<normal_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<normal_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType quantile(const normal_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType quantile(const complemented2_type<pareto_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<pareto_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType quantile(const pareto_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType quantile(const complemented2_type<poisson_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<poisson_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType quantile(const poisson_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType quantile(const complemented2_type<rayleigh_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<rayleigh_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType quantile(const rayleigh_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType quantile(const complemented2_type<skew_normal_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<skew_normal_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType quantile(const skew_normal_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType quantile(const complemented2_type<students_t_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<students_t_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType quantile(const students_t_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/triangular.hpp	/^  RealType quantile(const complemented2_type<triangular_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<triangular_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/triangular.hpp	/^  RealType quantile(const triangular_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType quantile(const complemented2_type<uniform_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<uniform_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType quantile(const uniform_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quantile	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType quantile(const complemented2_type<weibull_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<weibull_distribution<RealType, Policy>, RealType>& c)
boost::math::quantile	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType quantile(const weibull_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist, const RealType& p)
boost::math::quaternion	/usr/include/boost/math/quaternion.hpp	/^        class quaternion$/;"	c	namespace:boost::math
boost::math::quaternion	/usr/include/boost/math/quaternion.hpp	/^        class quaternion<double>$/;"	c	namespace:boost::math
boost::math::quaternion	/usr/include/boost/math/quaternion.hpp	/^        class quaternion<float>$/;"	c	namespace:boost::math
boost::math::quaternion	/usr/include/boost/math/quaternion.hpp	/^        class quaternion<long double>$/;"	c	namespace:boost::math
boost::math::quaternion::operator *=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator *= (::std::complex<T> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(::std::complex<T> const & rhs)
boost::math::quaternion::operator *=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator *= (T const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(T const & rhs)
boost::math::quaternion::operator *=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator *= (quaternion<X> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<X> const & rhs)
boost::math::quaternion::operator +=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator += (::std::complex<T> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(::std::complex<T> const & rhs)
boost::math::quaternion::operator +=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator += (T const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(T const & rhs)
boost::math::quaternion::operator +=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator += (quaternion<X> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<X> const & rhs)
boost::math::quaternion::operator -=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator -= (::std::complex<T> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(::std::complex<T> const & rhs)
boost::math::quaternion::operator -=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator -= (T const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(T const & rhs)
boost::math::quaternion::operator -=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator -= (quaternion<X> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<X> const & rhs)
boost::math::quaternion::operator /=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator \/= (::std::complex<T> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(::std::complex<T> const & rhs)
boost::math::quaternion::operator /=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator \/= (T const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(T const & rhs)
boost::math::quaternion::operator /=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator \/= (quaternion<X> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<X> const & rhs)
boost::math::quaternion::quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit                    quaternion(quaternion<double> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<double> const & a_recopier)
boost::math::quaternion::quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit                    quaternion(quaternion<float> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<float> const & a_recopier)
boost::math::quaternion::quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit                quaternion(quaternion<float> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<float> const & a_recopier)
boost::math::quaternion::quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit                quaternion(quaternion<long double> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<long double> const & a_recopier)
boost::math::quaternion::quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit            quaternion( ::std::complex<T> const & z0,$/;"	f	class:boost::math::quaternion	access:public	signature:( ::std::complex<T> const & z0, ::std::complex<T> const & z1 = ::std::complex<T>())
boost::math::quaternion::quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit            quaternion( T const & requested_a = T(),$/;"	f	class:boost::math::quaternion	access:public	signature:( T const & requested_a = T(), T const & requested_b = T(), T const & requested_c = T(), T const & requested_d = T())
boost::math::quaternion::quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit            quaternion(quaternion<X> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<X> const & a_recopier)
boost::math::quaternion::quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit            quaternion(quaternion<double> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<double> const & a_recopier)
boost::math::quaternion::quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit            quaternion(quaternion<long double> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<long double> const & a_recopier)
boost::math::quaternion::value_type	/usr/include/boost/math/quaternion.hpp	/^            typedef T value_type;$/;"	t	class:boost::math::quaternion	access:public
boost::math::quaternion::value_type	/usr/include/boost/math/quaternion.hpp	/^            typedef double value_type;$/;"	t	class:boost::math::quaternion	access:public
boost::math::quaternion::value_type	/usr/include/boost/math/quaternion.hpp	/^            typedef float value_type;$/;"	t	class:boost::math::quaternion	access:public
boost::math::quaternion::value_type	/usr/include/boost/math/quaternion.hpp	/^            typedef long double value_type;$/;"	t	class:boost::math::quaternion	access:public
boost::math::range	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline const std::pair<RealType, RealType> range(const bernoulli_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/beta.hpp	/^    inline const std::pair<RealType, RealType> range(const beta_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/binomial.hpp	/^      const std::pair<RealType, RealType> range(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
boost::math::range	/usr/include/boost/math/distributions/cauchy.hpp	/^inline const std::pair<RealType, RealType> range(const cauchy_distribution<RealType, Policy>&)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>&)
boost::math::range	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline const std::pair<RealType, RealType> range(const chi_squared_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/exponential.hpp	/^inline const std::pair<RealType, RealType> range(const exponential_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline const std::pair<RealType, RealType> range(const extreme_value_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline const std::pair<RealType, RealType> range(const fisher_f_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/gamma.hpp	/^inline const std::pair<RealType, RealType> range(const gamma_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/geometric.hpp	/^    inline const std::pair<RealType, RealType> range(const geometric_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline const std::pair<unsigned, unsigned> range(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
boost::math::range	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline const std::pair<RealType, RealType> range(const inverse_chi_squared_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline const std::pair<RealType, RealType> range(const inverse_gamma_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline const std::pair<RealType, RealType> range(const inverse_gaussian_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/laplace.hpp	/^inline const std::pair<RealType, RealType> range(const laplace_distribution<RealType, Policy>&)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>&)
boost::math::range	/usr/include/boost/math/distributions/logistic.hpp	/^    inline const std::pair<RealType, RealType> range(const logistic_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/lognormal.hpp	/^inline const std::pair<RealType, RealType> range(const lognormal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline const std::pair<RealType, RealType> range(const negative_binomial_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline const std::pair<RealType, RealType> range(const non_central_beta_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline const std::pair<RealType, RealType> range(const non_central_chi_squared_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline const std::pair<RealType, RealType> range(const non_central_f_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline const std::pair<RealType, RealType> range(const non_central_t_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/normal.hpp	/^inline const std::pair<RealType, RealType> range(const normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/pareto.hpp	/^    inline const std::pair<RealType, RealType> range(const pareto_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/poisson.hpp	/^    inline const std::pair<RealType, RealType> range(const poisson_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline const std::pair<RealType, RealType> range(const rayleigh_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline const std::pair<RealType, RealType> range(const skew_normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/students_t.hpp	/^inline const std::pair<RealType, RealType> range(const students_t_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/triangular.hpp	/^  inline const std::pair<RealType, RealType> range(const triangular_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/uniform.hpp	/^  inline const std::pair<RealType, RealType> range(const uniform_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& )
boost::math::range	/usr/include/boost/math/distributions/weibull.hpp	/^inline const std::pair<RealType, RealType> range(const weibull_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& )
boost::math::rayleigh	/usr/include/boost/math/distributions/rayleigh.hpp	/^typedef rayleigh_distribution<double> rayleigh;$/;"	t	namespace:boost::math
boost::math::rayleigh_distribution	/usr/include/boost/math/distributions/rayleigh.hpp	/^class rayleigh_distribution$/;"	c	namespace:boost::math
boost::math::rayleigh_distribution::m_sigma	/usr/include/boost/math/distributions/rayleigh.hpp	/^   RealType m_sigma;$/;"	m	class:boost::math::rayleigh_distribution	access:private
boost::math::rayleigh_distribution::policy_type	/usr/include/boost/math/distributions/rayleigh.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::rayleigh_distribution	access:public
boost::math::rayleigh_distribution::rayleigh_distribution	/usr/include/boost/math/distributions/rayleigh.hpp	/^   rayleigh_distribution(RealType sigma = 1)$/;"	f	class:boost::math::rayleigh_distribution	access:public	signature:(RealType sigma = 1)
boost::math::rayleigh_distribution::sigma	/usr/include/boost/math/distributions/rayleigh.hpp	/^   RealType sigma()const$/;"	f	class:boost::math::rayleigh_distribution	access:public	signature:() const
boost::math::rayleigh_distribution::value_type	/usr/include/boost/math/distributions/rayleigh.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::rayleigh_distribution	access:public
boost::math::real	/usr/include/boost/math/octonion.hpp	/^        inline T                                real(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::real	/usr/include/boost/math/quaternion.hpp	/^        inline T                                real(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::rising_factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^   rising_factorial(RT x, int n)$/;"	f	namespace:boost::math	signature:(RT x, int n)
boost::math::rising_factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^   rising_factorial(RT x, int n, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT x, int n, const Policy& pol)
boost::math::rising_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type rising_factorial(RT x, int n);$/;"	p	namespace:boost::math	signature:(RT x, int n)
boost::math::rising_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type rising_factorial(RT x, int n, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT x, int n, const Policy& pol)
boost::math::round	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T round(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
boost::math::round	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T round(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::round	/usr/include/boost/math/special_functions/round.hpp	/^inline T round(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
boost::math::round	/usr/include/boost/math/special_functions/round.hpp	/^inline T round(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^class rounding_error : public std::runtime_error$/;"	c	namespace:boost::math	inherits:std::runtime_error
boost::math::rounding_error::rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^   rounding_error(const std::string& s) : std::runtime_error(s){}$/;"	f	class:boost::math::rounding_error	access:public	signature:(const std::string& s)
boost::math::scale	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType scale(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
boost::math::scale	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType scale(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
boost::math::semipolar	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    semipolar(  T const & rho,$/;"	f	namespace:boost::math	signature:( T const & rho, T const & alpha, T const & theta1, T const & theta2)
boost::math::shape	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType shape(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
boost::math::shape	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType shape(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
boost::math::signbit	/usr/include/boost/math/special_functions/sign.hpp	/^template<class T> int (signbit)(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::signed_zero	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^    const int signed_zero = 0x2; \/\/!< put facet will distinguish between positive and negative zero.$/;"	m	namespace:boost::math
boost::math::sin	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        sin(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::sin	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    sin(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::sin_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sin_pi(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::sin_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sin_pi(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
boost::math::sin_pi	/usr/include/boost/math/special_functions/sin_pi.hpp	/^inline typename tools::promote_args<T>::type sin_pi(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::sin_pi	/usr/include/boost/math/special_functions/sin_pi.hpp	/^inline typename tools::promote_args<T>::type sin_pi(T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T x, const Policy& pol)
boost::math::sinc_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sinc_pi(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::sinc_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sinc_pi(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
boost::math::sinc_pi	/usr/include/boost/math/special_functions/sinc.hpp	/^        inline U<T>    sinc_pi(const U<T> x)$/;"	f	namespace:boost::math	signature:(const U<T> x)
boost::math::sinc_pi	/usr/include/boost/math/special_functions/sinc.hpp	/^        inline U<T>    sinc_pi(const U<T> x, const Policy&)$/;"	f	namespace:boost::math	signature:(const U<T> x, const Policy&)
boost::math::sinc_pi	/usr/include/boost/math/special_functions/sinc.hpp	/^       inline typename tools::promote_args<T>::type sinc_pi(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::sinc_pi	/usr/include/boost/math/special_functions/sinc.hpp	/^       inline typename tools::promote_args<T>::type sinc_pi(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
boost::math::sinh	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        sinh(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::sinh	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    sinh(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::sinhc_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sinhc_pi(T x);$/;"	p	namespace:boost::math	signature:(T x)
boost::math::sinhc_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sinhc_pi(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
boost::math::sinhc_pi	/usr/include/boost/math/special_functions/sinhc.hpp	/^        inline U<T>    sinhc_pi(const U<T> x)$/;"	f	namespace:boost::math	signature:(const U<T> x)
boost::math::sinhc_pi	/usr/include/boost/math/special_functions/sinhc.hpp	/^       inline typename tools::promote_args<T>::type sinhc_pi(T x)$/;"	f	namespace:boost::math	signature:(T x)
boost::math::sinhc_pi	/usr/include/boost/math/special_functions/sinhc.hpp	/^       inline typename tools::promote_args<T>::type sinhc_pi(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
boost::math::skew_normal	/usr/include/boost/math/distributions/skew_normal.hpp	/^  typedef skew_normal_distribution<double> skew_normal;$/;"	t	namespace:boost::math
boost::math::skew_normal_distribution	/usr/include/boost/math/distributions/skew_normal.hpp	/^  class skew_normal_distribution$/;"	c	namespace:boost::math
boost::math::skew_normal_distribution::location	/usr/include/boost/math/distributions/skew_normal.hpp	/^    RealType location()const$/;"	f	class:boost::math::skew_normal_distribution	access:public	signature:() const
boost::math::skew_normal_distribution::location_	/usr/include/boost/math/distributions/skew_normal.hpp	/^    RealType location_;  \/\/ distribution location.$/;"	m	class:boost::math::skew_normal_distribution	access:private
boost::math::skew_normal_distribution::policy_type	/usr/include/boost/math/distributions/skew_normal.hpp	/^    typedef Policy policy_type;$/;"	t	class:boost::math::skew_normal_distribution	access:public
boost::math::skew_normal_distribution::scale	/usr/include/boost/math/distributions/skew_normal.hpp	/^    RealType scale()const$/;"	f	class:boost::math::skew_normal_distribution	access:public	signature:() const
boost::math::skew_normal_distribution::scale_	/usr/include/boost/math/distributions/skew_normal.hpp	/^    RealType scale_;    \/\/ distribution scale.$/;"	m	class:boost::math::skew_normal_distribution	access:private
boost::math::skew_normal_distribution::shape	/usr/include/boost/math/distributions/skew_normal.hpp	/^    RealType shape()const$/;"	f	class:boost::math::skew_normal_distribution	access:public	signature:() const
boost::math::skew_normal_distribution::shape_	/usr/include/boost/math/distributions/skew_normal.hpp	/^    RealType shape_;    \/\/ distribution shape.$/;"	m	class:boost::math::skew_normal_distribution	access:private
boost::math::skew_normal_distribution::skew_normal_distribution	/usr/include/boost/math/distributions/skew_normal.hpp	/^    skew_normal_distribution(RealType location = 0, RealType scale = 1, RealType shape = 0)$/;"	f	class:boost::math::skew_normal_distribution	access:public	signature:(RealType location = 0, RealType scale = 1, RealType shape = 0)
boost::math::skew_normal_distribution::value_type	/usr/include/boost/math/distributions/skew_normal.hpp	/^    typedef RealType value_type;$/;"	t	class:boost::math::skew_normal_distribution	access:public
boost::math::skewness	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class skewness(const extreme_value_distribution<mpfr_class, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<mpfr_class, Policy>& )
boost::math::skewness	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class skewness(const rayleigh_distribution<mpfr_class, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<mpfr_class, Policy>& )
boost::math::skewness	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal skewness(const extreme_value_distribution<mpfr::mpreal, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<mpfr::mpreal, Policy>& )
boost::math::skewness	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal skewness(const rayleigh_distribution<mpfr::mpreal, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<mpfr::mpreal, Policy>& )
boost::math::skewness	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType skewness(const bernoulli_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType skewness(const beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType skewness(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType skewness(const cauchy_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& )
boost::math::skewness	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType skewness(const chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType skewness(const exponential_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& )
boost::math::skewness	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType skewness(const extreme_value_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& )
boost::math::skewness	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType skewness(const fisher_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType skewness(const gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType skewness(const geometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType skewness(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType skewness(const inverse_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType skewness(const inverse_gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType skewness(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType skewness(const laplace_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& )
boost::math::skewness	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType skewness(const logistic_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& )
boost::math::skewness	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType skewness(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType skewness(const negative_binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType skewness(const non_central_beta_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& )
boost::math::skewness	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType skewness(const non_central_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType skewness(const non_central_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType skewness(const non_central_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType skewness(const normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& )
boost::math::skewness	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType skewness(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType skewness(const poisson_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType skewness(const rayleigh_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& )
boost::math::skewness	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType skewness(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType skewness(const students_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType skewness(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType skewness(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
boost::math::skewness	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType skewness(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
boost::math::sph_bessel	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T, T, Policy>::result_type sph_bessel(unsigned v, T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned v, T x, const Policy& pol)
boost::math::sph_bessel	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T, T, policies::policy<> >::result_type sph_bessel(unsigned v, T x)$/;"	f	namespace:boost::math	signature:(unsigned v, T x)
boost::math::sph_bessel	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T, T, Policy>::result_type sph_bessel(unsigned v, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned v, T x, const Policy& pol)
boost::math::sph_bessel	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T, T, policies::policy<> >::result_type sph_bessel(unsigned v, T x);$/;"	p	namespace:boost::math	signature:(unsigned v, T x)
boost::math::sph_hankel_1	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> sph_hankel_1(T1 v, T2 x, const Policy&)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy&)
boost::math::sph_hankel_1	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> sph_hankel_1(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::sph_hankel_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> sph_hankel_1(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::sph_hankel_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> sph_hankel_1(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::sph_hankel_2	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> sph_hankel_2(T1 v, T2 x, const Policy&)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy&)
boost::math::sph_hankel_2	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> sph_hankel_2(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::sph_hankel_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> sph_hankel_2(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
boost::math::sph_hankel_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> sph_hankel_2(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
boost::math::sph_neumann	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T, T, Policy>::result_type sph_neumann(unsigned v, T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned v, T x, const Policy& pol)
boost::math::sph_neumann	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T, T, policies::policy<> >::result_type sph_neumann(unsigned v, T x)$/;"	f	namespace:boost::math	signature:(unsigned v, T x)
boost::math::sph_neumann	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T, T, Policy>::result_type sph_neumann(unsigned v, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned v, T x, const Policy& pol)
boost::math::sph_neumann	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T, T, policies::policy<> >::result_type sph_neumann(unsigned v, T x);$/;"	p	namespace:boost::math	signature:(unsigned v, T x)
boost::math::spherical	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        spherical(T const & rho,$/;"	f	namespace:boost::math	signature:(T const & rho, T const & theta, T const & phi1, T const & phi2, T const & phi3, T const & phi4, T const & phi5, T const & phi6)
boost::math::spherical	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    spherical(  T const & rho,$/;"	f	namespace:boost::math	signature:( T const & rho, T const & theta, T const & phi1, T const & phi2)
boost::math::spherical_harmonic	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         spherical_harmonic(unsigned n, int m, T1 theta, T2 phi);$/;"	p	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi)
boost::math::spherical_harmonic	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      spherical_harmonic(unsigned n, int m, T1 theta, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)
boost::math::spherical_harmonic	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^   spherical_harmonic(unsigned n, int m, T1 theta, T2 phi)$/;"	f	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi)
boost::math::spherical_harmonic	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^   spherical_harmonic(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)
boost::math::spherical_harmonic_i	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         spherical_harmonic_i(unsigned n, int m, T1 theta, T2 phi);$/;"	p	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi)
boost::math::spherical_harmonic_i	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      spherical_harmonic_i(unsigned n, int m, T1 theta, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)
boost::math::spherical_harmonic_i	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^   spherical_harmonic_i(unsigned n, int m, T1 theta, T2 phi)$/;"	f	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi)
boost::math::spherical_harmonic_i	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^   spherical_harmonic_i(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)
boost::math::spherical_harmonic_r	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         spherical_harmonic_r(unsigned n, int m, T1 theta, T2 phi);$/;"	p	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi)
boost::math::spherical_harmonic_r	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      spherical_harmonic_r(unsigned n, int m, T1 theta, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)
boost::math::spherical_harmonic_r	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^   spherical_harmonic_r(unsigned n, int m, T1 theta, T2 phi)$/;"	f	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi)
boost::math::spherical_harmonic_r	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^   spherical_harmonic_r(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)
boost::math::sqrt1pm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sqrt1pm1(const T& val);$/;"	p	namespace:boost::math	signature:(const T& val)
boost::math::sqrt1pm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sqrt1pm1(const T& val, const Policy&);$/;"	p	namespace:boost::math	signature:(const T& val, const Policy&)
boost::math::sqrt1pm1	/usr/include/boost/math/special_functions/sqrt1pm1.hpp	/^inline typename tools::promote_args<T>::type sqrt1pm1(const T& val)$/;"	f	namespace:boost::math	signature:(const T& val)
boost::math::sqrt1pm1	/usr/include/boost/math/special_functions/sqrt1pm1.hpp	/^inline typename tools::promote_args<T>::type sqrt1pm1(const T& val, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& val, const Policy& pol)
boost::math::standard_deviation	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type standard_deviation(const Distribution& dist)$/;"	f	namespace:boost::math	signature:(const Distribution& dist)
boost::math::standard_deviation	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType standard_deviation(const exponential_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& dist)
boost::math::standard_deviation	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType standard_deviation(const extreme_value_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist)
boost::math::standard_deviation	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType standard_deviation(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
boost::math::standard_deviation	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType standard_deviation(const laplace_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist)
boost::math::standard_deviation	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType standard_deviation(const normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist)
boost::math::static_gcd	/usr/include/boost/math/common_factor_ct.hpp	/^struct static_gcd : public mpl::integral_c<static_gcd_type, (detail::static_gcd_helper_t<Value1, Value2>::value) >$/;"	s	namespace:boost::math	inherits:mpl::integral_c
boost::math::static_lcm	/usr/include/boost/math/common_factor_ct.hpp	/^struct static_lcm : public mpl::integral_c<static_gcd_type, (detail::static_lcm_helper_t<Value1, Value2>::value) >$/;"	s	namespace:boost::math	inherits:mpl::integral_c
boost::math::students_t	/usr/include/boost/math/distributions/students_t.hpp	/^typedef students_t_distribution<double> students_t; \/\/ Convenience typedef for double version.$/;"	t	namespace:boost::math
boost::math::students_t_distribution	/usr/include/boost/math/distributions/students_t.hpp	/^class students_t_distribution$/;"	c	namespace:boost::math
boost::math::students_t_distribution::degrees_of_freedom	/usr/include/boost/math/distributions/students_t.hpp	/^   RealType degrees_of_freedom()const$/;"	f	class:boost::math::students_t_distribution	access:public	signature:() const
boost::math::students_t_distribution::df_	/usr/include/boost/math/distributions/students_t.hpp	/^   RealType df_;  \/\/ degrees of freedom is a real number or +infinity.$/;"	m	class:boost::math::students_t_distribution	access:private
boost::math::students_t_distribution::find_degrees_of_freedom	/usr/include/boost/math/distributions/students_t.hpp	/^   static RealType find_degrees_of_freedom($/;"	p	class:boost::math::students_t_distribution	access:public	signature:( RealType difference_from_mean, RealType alpha, RealType beta, RealType sd, RealType hint = 100)
boost::math::students_t_distribution::find_degrees_of_freedom	/usr/include/boost/math/distributions/students_t.hpp	/^RealType students_t_distribution<RealType, Policy>::find_degrees_of_freedom($/;"	f	class:boost::math::students_t_distribution	signature:( RealType difference_from_mean, RealType alpha, RealType beta, RealType sd, RealType hint)
boost::math::students_t_distribution::policy_type	/usr/include/boost/math/distributions/students_t.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::students_t_distribution	access:public
boost::math::students_t_distribution::students_t_distribution	/usr/include/boost/math/distributions/students_t.hpp	/^   students_t_distribution(RealType df) : df_(df)$/;"	f	class:boost::math::students_t_distribution	access:public	signature:(RealType df)
boost::math::students_t_distribution::value_type	/usr/include/boost/math/distributions/students_t.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::students_t_distribution	access:public
boost::math::sup	/usr/include/boost/math/octonion.hpp	/^        inline T                                sup(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::sup	/usr/include/boost/math/quaternion.hpp	/^        inline T                                sup(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::support	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline const std::pair<RealType, RealType> support(const bernoulli_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/beta.hpp	/^    inline const std::pair<RealType, RealType> support(const beta_distribution<RealType, Policy>&  \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/binomial.hpp	/^      const std::pair<RealType, RealType> support(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
boost::math::support	/usr/include/boost/math/distributions/cauchy.hpp	/^inline const std::pair<RealType, RealType> support(const cauchy_distribution<RealType, Policy>& )$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline const std::pair<RealType, RealType> support(const chi_squared_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/exponential.hpp	/^inline const std::pair<RealType, RealType> support(const exponential_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline const std::pair<RealType, RealType> support(const extreme_value_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline const std::pair<RealType, RealType> support(const fisher_f_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/gamma.hpp	/^inline const std::pair<RealType, RealType> support(const gamma_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/geometric.hpp	/^    inline const std::pair<RealType, RealType> support(const geometric_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline const std::pair<unsigned, unsigned> support(const hypergeometric_distribution<RealType, Policy>& d)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& d)
boost::math::support	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline const std::pair<RealType, RealType> support(const inverse_chi_squared_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline const std::pair<RealType, RealType> support(const inverse_gamma_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline const std::pair<RealType, RealType> support(const inverse_gaussian_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/laplace.hpp	/^inline const std::pair<RealType, RealType> support(const laplace_distribution<RealType, Policy>&)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>&)
boost::math::support	/usr/include/boost/math/distributions/logistic.hpp	/^    inline const std::pair<RealType, RealType> support(const logistic_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/lognormal.hpp	/^inline const std::pair<RealType, RealType> support(const lognormal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline const std::pair<RealType, RealType> support(const negative_binomial_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline const std::pair<RealType, RealType> support(const non_central_beta_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline const std::pair<RealType, RealType> support(const non_central_chi_squared_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline const std::pair<RealType, RealType> support(const non_central_f_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline const std::pair<RealType, RealType> support(const non_central_t_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/normal.hpp	/^inline const std::pair<RealType, RealType> support(const normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/pareto.hpp	/^    inline const std::pair<RealType, RealType> support(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
boost::math::support	/usr/include/boost/math/distributions/poisson.hpp	/^    inline const std::pair<RealType, RealType> support(const poisson_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline const std::pair<RealType, RealType> support(const rayleigh_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline const std::pair<RealType, RealType> support(const skew_normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/students_t.hpp	/^inline const std::pair<RealType, RealType> support(const students_t_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& )
boost::math::support	/usr/include/boost/math/distributions/triangular.hpp	/^  inline const std::pair<RealType, RealType> support(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
boost::math::support	/usr/include/boost/math/distributions/uniform.hpp	/^  inline const std::pair<RealType, RealType> support(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
boost::math::support	/usr/include/boost/math/distributions/weibull.hpp	/^inline const std::pair<RealType, RealType> support(const weibull_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& )
boost::math::suppress_unused_variable_warning	/usr/include/boost/math/tools/config.hpp	/^void suppress_unused_variable_warning(const T&)$/;"	f	namespace:boost::math	signature:(const T&)
boost::math::tan	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        tan(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::tan	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    tan(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::tanh	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        tanh(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::tanh	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    tanh(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::tgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma(T z)$/;"	f	namespace:boost::math	signature:(T z)
boost::math::tgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma(T1 a, T2 z)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z)
boost::math::tgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma(T1 a, T2 z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z, const Policy& pol)
boost::math::tgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type tgamma(RT1 a, RT2 z);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z)
boost::math::tgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type tgamma(RT1 a, RT2 z, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z, const Policy& pol)
boost::math::tgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type tgamma(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
boost::math::tgamma1pm1	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma1pm1(T z)$/;"	f	namespace:boost::math	signature:(T z)
boost::math::tgamma1pm1	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma1pm1(T z, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math	signature:(T z, const Policy& )
boost::math::tgamma1pm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type tgamma1pm1(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
boost::math::tgamma1pm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type tgamma1pm1(RT z, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT z, const Policy& pol)
boost::math::tgamma_delta_ratio	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma_delta_ratio(T1 z, T2 delta)$/;"	f	namespace:boost::math	signature:(T1 z, T2 delta)
boost::math::tgamma_delta_ratio	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma_delta_ratio(T1 z, T2 delta, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math	signature:(T1 z, T2 delta, const Policy& )
boost::math::tgamma_delta_ratio	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type tgamma_delta_ratio(T1 z, T2 delta);$/;"	p	namespace:boost::math	signature:(T1 z, T2 delta)
boost::math::tgamma_delta_ratio	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type tgamma_delta_ratio(T1 z, T2 delta, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 z, T2 delta, const Policy&)
boost::math::tgamma_lower	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma_lower(T1 a, T2 z)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z)
boost::math::tgamma_lower	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma_lower(T1 a, T2 z, const Policy&)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z, const Policy&)
boost::math::tgamma_lower	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type tgamma_lower(RT1 a, RT2 z);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z)
boost::math::tgamma_lower	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type tgamma_lower(RT1 a, RT2 z, const Policy&);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z, const Policy&)
boost::math::tgamma_ratio	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma_ratio(T1 a, T2 b)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b)
boost::math::tgamma_ratio	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma_ratio(T1 a, T2 b, const Policy&)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, const Policy&)
boost::math::tgamma_ratio	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type tgamma_ratio(T1 a, T2 b);$/;"	p	namespace:boost::math	signature:(T1 a, T2 b)
boost::math::tgamma_ratio	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type tgamma_ratio(T1 a, T2 b, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 a, T2 b, const Policy&)
boost::math::tools	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace tools$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/bindings/mpreal.hpp	/^namespace tools$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/bindings/rr.hpp	/^namespace tools$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/concepts/real_concept.hpp	/^namespace tools$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace tools$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/policies/policy.hpp	/^namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/big_constant.hpp	/^namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/config.hpp	/^namespace tools$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/fraction.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/minima.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/polynomial.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/precision.hpp	/^namespace tools$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/promotion.hpp	/^    namespace tools$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/rational.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/real_cast.hpp	/^  namespace tools$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/remez.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/roots.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/series.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/solve.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/stats.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/test.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/test_data.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/toms748_solve.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/traits.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools	/usr/include/boost/math/tools/workaround.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/policies/policy.hpp	/^T epsilon(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE(T));$/;"	p	namespace:boost::math::tools	signature:(T)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/policies/policy.hpp	/^int digits(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE(T));$/;"	p	namespace:boost::math::tools	signature:(T)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_max_value(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools	signature:(T)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_min_value(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools	signature:(T)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T max_value(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools	signature:(T)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T min_value(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools	signature:(T)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpfr.hpp	/^inline int digits<mpfr_class>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr_class))$/;"	f	namespace:boost::math::tools	signature:(mpfr_class)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class epsilon<mpfr_class>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr_class))$/;"	f	namespace:boost::math::tools	signature:(mpfr_class)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class log_max_value<mpfr_class>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr_class))$/;"	f	namespace:boost::math::tools	signature:(mpfr_class)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class log_min_value<mpfr_class>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr_class))$/;"	f	namespace:boost::math::tools	signature:(mpfr_class)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class max_value<mpfr_class>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr_class))$/;"	f	namespace:boost::math::tools	signature:(mpfr_class)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class min_value<mpfr_class>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr_class))$/;"	f	namespace:boost::math::tools	signature:(mpfr_class)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpreal.hpp	/^inline int digits<mpfr::mpreal>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr::mpreal))$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal epsilon<mpfr::mpreal>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr::mpreal))$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal log_max_value<mpfr::mpreal>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr::mpreal))$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal log_min_value<mpfr::mpreal>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr::mpreal))$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal max_value<mpfr::mpreal>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr::mpreal))$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal min_value<mpfr::mpreal>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(mpfr::mpreal))$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^inline boost::math::ntl::RR epsilon<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^inline boost::math::ntl::RR log_max_value<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^inline boost::math::ntl::RR log_min_value<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^inline boost::math::ntl::RR max_value<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^inline boost::math::ntl::RR min_value<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/bindings/rr.hpp	/^inline int digits<boost::math::ntl::RR>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(boost::math::ntl::RR))$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/real_concept.hpp	/^inline concepts::real_concept epsilon<concepts::real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/real_concept.hpp	/^inline concepts::real_concept log_max_value<concepts::real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/real_concept.hpp	/^inline concepts::real_concept log_min_value<concepts::real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/real_concept.hpp	/^inline concepts::real_concept max_value<concepts::real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/real_concept.hpp	/^inline concepts::real_concept min_value<concepts::real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/real_concept.hpp	/^inline int digits<concepts::real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline concepts::std_real_concept epsilon(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::std_real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::std_real_concept)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline concepts::std_real_concept log_max_value<concepts::std_real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::std_real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::std_real_concept)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline concepts::std_real_concept log_min_value<concepts::std_real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::std_real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::std_real_concept)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline concepts::std_real_concept max_value<concepts::std_real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::std_real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::std_real_concept)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline concepts::std_real_concept min_value<concepts::std_real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::std_real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::std_real_concept)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline int digits<concepts::std_real_concept>(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(concepts::std_real_concept))$/;"	f	namespace:boost::math::tools	signature:(concepts::std_real_concept)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/tools/precision.hpp	/^inline T epsilon(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(T))$/;"	f	namespace:boost::math::tools	signature:(T)
boost::math::tools::BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC	/usr/include/boost/math/tools/precision.hpp	/^inline int digits(BOOST_MATH_EXPLICIT_TEMPLATE_TYPE_SPEC(T))$/;"	f	namespace:boost::math::tools	signature:(T)
boost::math::tools::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tools/config.hpp	/^inline T max BOOST_PREVENT_MACRO_SUBSTITUTION(T a, T b, T c)$/;"	f	namespace:boost::math::tools	signature:(T a, T b, T c)
boost::math::tools::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tools/config.hpp	/^inline T max BOOST_PREVENT_MACRO_SUBSTITUTION(T a, T b, T c, T d)$/;"	f	namespace:boost::math::tools	signature:(T a, T b, T c, T d)
boost::math::tools::T	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_even_polynomial(const T(&a)[N], const V& z)$/;"	m	namespace:boost::math::tools
boost::math::tools::T	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_odd_polynomial(const T(&a)[N], const V& z)$/;"	m	namespace:boost::math::tools
boost::math::tools::T	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_polynomial(const T(&a)[N], const V& val)$/;"	m	namespace:boost::math::tools
boost::math::tools::T	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_rational(const T(&a)[N], const U(&b)[N], const V& z)$/;"	m	namespace:boost::math::tools
boost::math::tools::b	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_rational(const T(&a)[N], const U(&b)[N], const V& z)$/;"	m	namespace:boost::math::tools
boost::math::tools::bisect	/usr/include/boost/math/tools/roots.hpp	/^inline std::pair<T, T> bisect(F f, T min, T max, Tol tol)$/;"	f	namespace:boost::math::tools	signature:(F f, T min, T max, Tol tol)
boost::math::tools::bisect	/usr/include/boost/math/tools/roots.hpp	/^inline std::pair<T, T> bisect(F f, T min, T max, Tol tol, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, T min, T max, Tol tol, boost::uintmax_t& max_iter)
boost::math::tools::bisect	/usr/include/boost/math/tools/roots.hpp	/^std::pair<T, T> bisect(F f, T min, T max, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)$/;"	f	namespace:boost::math::tools	signature:(F f, T min, T max, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)
boost::math::tools::bracket_and_solve_root	/usr/include/boost/math/tools/toms748_solve.hpp	/^inline std::pair<T, T> bracket_and_solve_root(F f, const T& guess, const T& factor, bool rising, Tol tol, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, const T& guess, const T& factor, bool rising, Tol tol, boost::uintmax_t& max_iter)
boost::math::tools::bracket_and_solve_root	/usr/include/boost/math/tools/toms748_solve.hpp	/^std::pair<T, T> bracket_and_solve_root(F f, const T& guess, T factor, bool rising, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)$/;"	f	namespace:boost::math::tools	signature:(F f, const T& guess, T factor, bool rising, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)
boost::math::tools::brent_find_minima	/usr/include/boost/math/tools/minima.hpp	/^inline std::pair<T, T> brent_find_minima(F f, T min, T max, int digits)$/;"	f	namespace:boost::math::tools	signature:(F f, T min, T max, int digits)
boost::math::tools::brent_find_minima	/usr/include/boost/math/tools/minima.hpp	/^std::pair<T, T> brent_find_minima(F f, T min, T max, int bits, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, T min, T max, int bits, boost::uintmax_t& max_iter)
boost::math::tools::calculate_result_type	/usr/include/boost/math/tools/test.hpp	/^struct calculate_result_type$/;"	s	namespace:boost::math::tools
boost::math::tools::calculate_result_type::row_type	/usr/include/boost/math/tools/test.hpp	/^   typedef typename T::value_type row_type;$/;"	t	struct:boost::math::tools::calculate_result_type	access:public
boost::math::tools::calculate_result_type::value_type	/usr/include/boost/math/tools/test.hpp	/^   typedef typename row_type::value_type value_type;$/;"	t	struct:boost::math::tools::calculate_result_type	access:public
boost::math::tools::chebyshev_coefficient	/usr/include/boost/math/tools/polynomial.hpp	/^T chebyshev_coefficient(unsigned n, unsigned m)$/;"	f	namespace:boost::math::tools	signature:(unsigned n, unsigned m)
boost::math::tools::continued_fraction_a	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_a(Gen& g, const U& factor)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, const U& factor)
boost::math::tools::continued_fraction_a	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_a(Gen& g, const U& factor, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, const U& factor, boost::uintmax_t& max_terms)
boost::math::tools::continued_fraction_a	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_a(Gen& g, int bits)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, int bits)
boost::math::tools::continued_fraction_a	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_a(Gen& g, int bits, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, int bits, boost::uintmax_t& max_terms)
boost::math::tools::continued_fraction_b	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_b(Gen& g, const U& factor)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, const U& factor)
boost::math::tools::continued_fraction_b	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_b(Gen& g, const U& factor, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, const U& factor, boost::uintmax_t& max_terms)
boost::math::tools::continued_fraction_b	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_b(Gen& g, int bits)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, int bits)
boost::math::tools::continued_fraction_b	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_b(Gen& g, int bits, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, int bits, boost::uintmax_t& max_terms)
boost::math::tools::detail	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/bindings/mpreal.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/bindings/rr.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/fraction.hpp	/^namespace detail$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/precision.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/rational.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/remez.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/roots.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/test_data.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/toms748_solve.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail	/usr/include/boost/math/tools/traits.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
boost::math::tools::detail::BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T epsilon(const mpl::false_& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
boost::math::tools::detail::BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T epsilon(const mpl::true_& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
boost::math::tools::detail::BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_max_value(const mpl::int_<0>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
boost::math::tools::detail::BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_max_value(const mpl::int_<1024>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
boost::math::tools::detail::BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_max_value(const mpl::int_<128>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
boost::math::tools::detail::BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_max_value(const mpl::int_<16384>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
boost::math::tools::detail::BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_min_value(const mpl::int_<0>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
boost::math::tools::detail::BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_min_value(const mpl::int_<1024>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
boost::math::tools::detail::BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_min_value(const mpl::int_<128>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
boost::math::tools::detail::BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline T log_min_value(const mpl::int_<16384>& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(T))$/;"	f	namespace:boost::math::tools::detail	signature:(T)
boost::math::tools::detail::BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE	/usr/include/boost/math/tools/precision.hpp	/^inline long double epsilon<long double>(const mpl::true_& BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(long double))$/;"	f	namespace:boost::math::tools::detail	signature:(long double)
boost::math::tools::detail::bracket	/usr/include/boost/math/tools/toms748_solve.hpp	/^void bracket(F f, T& a, T& b, T c, T& fa, T& fb, T& d, T& fd)$/;"	f	namespace:boost::math::tools::detail	signature:(F f, T& a, T& b, T c, T& fa, T& fb, T& d, T& fd)
boost::math::tools::detail::cdf	/usr/include/boost/math/tools/traits.hpp	/^char cdf(const D& ...);$/;"	p	namespace:boost::math::tools::detail	signature:(const D& ....)
boost::math::tools::detail::convert_to_long_result	/usr/include/boost/math/bindings/mpfr.hpp	/^void convert_to_long_result(mpfr_class const& r, I& result)$/;"	f	namespace:boost::math::tools::detail	signature:(mpfr_class const& r, I& result)
boost::math::tools::detail::convert_to_long_result	/usr/include/boost/math/bindings/mpreal.hpp	/^void convert_to_long_result(mpfr::mpreal const& r, I& result)$/;"	f	namespace:boost::math::tools::detail	signature:(mpfr::mpreal const& r, I& result)
boost::math::tools::detail::convert_to_long_result	/usr/include/boost/math/bindings/rr.hpp	/^void convert_to_long_result(NTL::RR const& r, I& result)$/;"	f	namespace:boost::math::tools::detail	signature:(NTL::RR const& r, I& result)
boost::math::tools::detail::cubic_interpolate	/usr/include/boost/math/tools/toms748_solve.hpp	/^T cubic_interpolate(const T& a, const T& b, const T& d, $/;"	f	namespace:boost::math::tools::detail	signature:(const T& a, const T& b, const T& d, const T& e, const T& fa, const T& fb, const T& fd, const T& fe)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<19>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<19>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<20>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<20>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<19>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<19>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<20>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<20>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<19>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<19>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<20>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<20>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_polynomial_c_imp	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& val, const Tag*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& val, const Tag*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<19>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<19>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<20>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<20>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<19>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<19>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<20>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<20>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<19>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<19>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<20>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<20>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
boost::math::tools::detail::evaluate_rational_c_imp	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_rational_c_imp(const T* num, const U* denom, const V& z, const Tag*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* num, const U* denom, const V& z, const Tag*)
boost::math::tools::detail::forth_root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T forth_root_epsilon_imp(const T*, const Tag&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const Tag&)
boost::math::tools::detail::forth_root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T forth_root_epsilon_imp(const T*, const mpl::int_<113>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<113>&)
boost::math::tools::detail::forth_root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T forth_root_epsilon_imp(const T*, const mpl::int_<24>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<24>&)
boost::math::tools::detail::forth_root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T forth_root_epsilon_imp(const T*, const mpl::int_<53>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<53>&)
boost::math::tools::detail::forth_root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T forth_root_epsilon_imp(const T*, const mpl::int_<64>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<64>&)
boost::math::tools::detail::fraction_traits	/usr/include/boost/math/tools/fraction.hpp	/^   struct fraction_traits$/;"	s	namespace:boost::math::tools::detail	inherits:boost::mpl::if_c::type
boost::math::tools::detail::fraction_traits_pair	/usr/include/boost/math/tools/fraction.hpp	/^   struct fraction_traits_pair$/;"	s	namespace:boost::math::tools::detail
boost::math::tools::detail::fraction_traits_pair::a	/usr/include/boost/math/tools/fraction.hpp	/^       static result_type a(const value_type& v)$/;"	f	struct:boost::math::tools::detail::fraction_traits_pair	access:public	signature:(const value_type& v)
boost::math::tools::detail::fraction_traits_pair::b	/usr/include/boost/math/tools/fraction.hpp	/^       static result_type b(const value_type& v)$/;"	f	struct:boost::math::tools::detail::fraction_traits_pair	access:public	signature:(const value_type& v)
boost::math::tools::detail::fraction_traits_pair::result_type	/usr/include/boost/math/tools/fraction.hpp	/^       typedef typename value_type::first_type result_type;$/;"	t	struct:boost::math::tools::detail::fraction_traits_pair	access:public
boost::math::tools::detail::fraction_traits_pair::value_type	/usr/include/boost/math/tools/fraction.hpp	/^       typedef typename Gen::result_type value_type;$/;"	t	struct:boost::math::tools::detail::fraction_traits_pair	access:public
boost::math::tools::detail::fraction_traits_simple	/usr/include/boost/math/tools/fraction.hpp	/^   struct fraction_traits_simple$/;"	s	namespace:boost::math::tools::detail
boost::math::tools::detail::fraction_traits_simple::a	/usr/include/boost/math/tools/fraction.hpp	/^       static result_type a(const value_type& v)$/;"	f	struct:boost::math::tools::detail::fraction_traits_simple	access:public	signature:(const value_type& v)
boost::math::tools::detail::fraction_traits_simple::b	/usr/include/boost/math/tools/fraction.hpp	/^       static result_type b(const value_type& v)$/;"	f	struct:boost::math::tools::detail::fraction_traits_simple	access:public	signature:(const value_type& v)
boost::math::tools::detail::fraction_traits_simple::result_type	/usr/include/boost/math/tools/fraction.hpp	/^       typedef typename Gen::result_type result_type;$/;"	t	struct:boost::math::tools::detail::fraction_traits_simple	access:public
boost::math::tools::detail::fraction_traits_simple::value_type	/usr/include/boost/math/tools/fraction.hpp	/^       typedef typename Gen::result_type value_type;$/;"	t	struct:boost::math::tools::detail::fraction_traits_simple	access:public
boost::math::tools::detail::handle_zero_derivative	/usr/include/boost/math/tools/roots.hpp	/^void handle_zero_derivative(F f,$/;"	f	namespace:boost::math::tools::detail	signature:(F f, T& last_f0, const T& f0, T& delta, T& result, T& guess, const T& min, const T& max)
boost::math::tools::detail::has_cdf	/usr/include/boost/math/tools/traits.hpp	/^struct has_cdf$/;"	s	namespace:boost::math::tools::detail
boost::math::tools::detail::has_cdf::BOOST_STATIC_CONSTANT	/usr/include/boost/math/tools/traits.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = sizeof(cdf(d, 0.0f)) != 1);$/;"	p	struct:boost::math::tools::detail::has_cdf	access:public	signature:(bool, value = sizeof(cdf(d, 0.0f)) != 1)
boost::math::tools::detail::has_cdf::d	/usr/include/boost/math/tools/traits.hpp	/^   static D d;$/;"	m	struct:boost::math::tools::detail::has_cdf	access:public
boost::math::tools::detail::has_quantile	/usr/include/boost/math/tools/traits.hpp	/^struct has_quantile$/;"	s	namespace:boost::math::tools::detail
boost::math::tools::detail::has_quantile::BOOST_STATIC_CONSTANT	/usr/include/boost/math/tools/traits.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = sizeof(quantile(d, 0.0f)) != 1);$/;"	p	struct:boost::math::tools::detail::has_quantile	access:public	signature:(bool, value = sizeof(quantile(d, 0.0f)) != 1)
boost::math::tools::detail::has_quantile::d	/usr/include/boost/math/tools/traits.hpp	/^   static D d;$/;"	m	struct:boost::math::tools::detail::has_quantile	access:public
boost::math::tools::detail::is_distribution_imp	/usr/include/boost/math/tools/traits.hpp	/^struct is_distribution_imp$/;"	s	namespace:boost::math::tools::detail
boost::math::tools::detail::is_distribution_imp::BOOST_STATIC_CONSTANT	/usr/include/boost/math/tools/traits.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = $/;"	p	struct:boost::math::tools::detail::is_distribution_imp	access:public	signature:(bool, value = has_quantile<D>::value && has_cdf<D>::value && has_value_type<D>::value && has_policy_type<D>::value)
boost::math::tools::detail::is_pair	/usr/include/boost/math/tools/fraction.hpp	/^   struct is_pair : public boost::false_type{};$/;"	s	namespace:boost::math::tools::detail	inherits:boost::false_type
boost::math::tools::detail::is_pair	/usr/include/boost/math/tools/fraction.hpp	/^   struct is_pair<std::pair<T,U> > : public boost::true_type{};$/;"	s	namespace:boost::math::tools::detail	inherits:boost::true_type
boost::math::tools::detail::is_scaled_distribution_helper	/usr/include/boost/math/tools/traits.hpp	/^struct is_scaled_distribution_helper$/;"	s	namespace:boost::math::tools::detail
boost::math::tools::detail::is_scaled_distribution_helper	/usr/include/boost/math/tools/traits.hpp	/^struct is_scaled_distribution_helper<D, true>$/;"	s	namespace:boost::math::tools::detail
boost::math::tools::detail::is_scaled_distribution_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/math/tools/traits.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = $/;"	p	struct:boost::math::tools::detail::is_scaled_distribution_helper	access:public	signature:(bool, value = (sizeof(test_has_location<D>(0)) != 1) && (sizeof(test_has_scale<D>(0)) != 1))
boost::math::tools::detail::is_scaled_distribution_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/math/tools/traits.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = false);$/;"	p	struct:boost::math::tools::detail::is_scaled_distribution_helper	access:public	signature:(bool, value = false)
boost::math::tools::detail::is_scaled_distribution_imp	/usr/include/boost/math/tools/traits.hpp	/^struct is_scaled_distribution_imp$/;"	s	namespace:boost::math::tools::detail
boost::math::tools::detail::is_scaled_distribution_imp::BOOST_STATIC_CONSTANT	/usr/include/boost/math/tools/traits.hpp	/^   BOOST_STATIC_CONSTANT(bool, value = (::boost::math::tools::detail::is_scaled_distribution_helper<D, ::boost::math::tools::detail::is_distribution_imp<D>::value>::value));$/;"	p	struct:boost::math::tools::detail::is_scaled_distribution_imp	access:public	signature:(bool, value = (::boost::math::tools::detail::is_scaled_distribution_helper<D, ::boost::math::tools::detail::is_distribution_imp<D>::value>::value))
boost::math::tools::detail::quadratic_interpolate	/usr/include/boost/math/tools/toms748_solve.hpp	/^T quadratic_interpolate(const T& a, const T& b, T const& d,$/;"	f	namespace:boost::math::tools::detail	signature:(const T& a, const T& b, T const& d, const T& fa, const T& fb, T const& fd, unsigned count)
boost::math::tools::detail::quantile	/usr/include/boost/math/tools/traits.hpp	/^char quantile(const D& ...);$/;"	p	namespace:boost::math::tools::detail	signature:(const D& ....)
boost::math::tools::detail::remez_error_function	/usr/include/boost/math/tools/remez.hpp	/^struct remez_error_function$/;"	s	namespace:boost::math::tools::detail
boost::math::tools::detail::remez_error_function::denominator	/usr/include/boost/math/tools/remez.hpp	/^   polynomial<T> denominator;$/;"	m	struct:boost::math::tools::detail::remez_error_function	access:private
boost::math::tools::detail::remez_error_function::f	/usr/include/boost/math/tools/remez.hpp	/^   function_type f;$/;"	m	struct:boost::math::tools::detail::remez_error_function	access:private
boost::math::tools::detail::remez_error_function::function_type	/usr/include/boost/math/tools/remez.hpp	/^   typedef boost::function1<T, T const &> function_type;$/;"	t	struct:boost::math::tools::detail::remez_error_function	access:public
boost::math::tools::detail::remez_error_function::numerator	/usr/include/boost/math/tools/remez.hpp	/^   polynomial<T> numerator;$/;"	m	struct:boost::math::tools::detail::remez_error_function	access:private
boost::math::tools::detail::remez_error_function::operator ()	/usr/include/boost/math/tools/remez.hpp	/^   T operator()(const T& z)const$/;"	f	struct:boost::math::tools::detail::remez_error_function	access:public	signature:(const T& z) const
boost::math::tools::detail::remez_error_function::rel_error	/usr/include/boost/math/tools/remez.hpp	/^   bool rel_error;$/;"	m	struct:boost::math::tools::detail::remez_error_function	access:private
boost::math::tools::detail::remez_error_function::remez_error_function	/usr/include/boost/math/tools/remez.hpp	/^   remez_error_function($/;"	f	struct:boost::math::tools::detail::remez_error_function	access:public	signature:( function_type f_, const polynomial<T>& n, const polynomial<T>& d, bool rel_err)
boost::math::tools::detail::remez_max_error_function	/usr/include/boost/math/tools/remez.hpp	/^struct remez_max_error_function$/;"	s	namespace:boost::math::tools::detail
boost::math::tools::detail::remez_max_error_function::func	/usr/include/boost/math/tools/remez.hpp	/^   remez_error_function<T> func;$/;"	m	struct:boost::math::tools::detail::remez_max_error_function	access:private
boost::math::tools::detail::remez_max_error_function::operator ()	/usr/include/boost/math/tools/remez.hpp	/^   T operator()(const T& x)$/;"	f	struct:boost::math::tools::detail::remez_max_error_function	access:public	signature:(const T& x)
boost::math::tools::detail::remez_max_error_function::remez_max_error_function	/usr/include/boost/math/tools/remez.hpp	/^   remez_max_error_function(const remez_error_function<T>& f)$/;"	f	struct:boost::math::tools::detail::remez_max_error_function	access:public	signature:(const remez_error_function<T>& f)
boost::math::tools::detail::result_tag	/usr/include/boost/math/tools/traits.hpp	/^struct result_tag{};$/;"	s	namespace:boost::math::tools::detail
boost::math::tools::detail::root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T root_epsilon_imp(const T*, const Tag&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const Tag&)
boost::math::tools::detail::root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T root_epsilon_imp(const T*, const mpl::int_<113>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<113>&)
boost::math::tools::detail::root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T root_epsilon_imp(const T*, const mpl::int_<53>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<53>&)
boost::math::tools::detail::root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T root_epsilon_imp(const T*, const mpl::int_<64>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<64>&)
boost::math::tools::detail::root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T root_epsilon_imp(const mpl::int_<24>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const mpl::int_<24>&)
boost::math::tools::detail::safe_div	/usr/include/boost/math/tools/toms748_solve.hpp	/^inline T safe_div(T num, T denom, T r)$/;"	f	namespace:boost::math::tools::detail	signature:(T num, T denom, T r)
boost::math::tools::detail::secant_interpolate	/usr/include/boost/math/tools/toms748_solve.hpp	/^inline T secant_interpolate(const T& a, const T& b, const T& fa, const T& fb)$/;"	f	namespace:boost::math::tools::detail	signature:(const T& a, const T& b, const T& fa, const T& fb)
boost::math::tools::detail::test_has_location	/usr/include/boost/math/tools/traits.hpp	/^char test_has_location(...);$/;"	p	namespace:boost::math::tools::detail	signature:(....)
boost::math::tools::detail::test_has_location	/usr/include/boost/math/tools/traits.hpp	/^double test_has_location(const volatile result_tag<typename D::value_type (D::*)()const, &D::location>*);$/;"	p	namespace:boost::math::tools::detail	signature:(const volatile result_tag<typename D::value_type (D::*)()const, &D::location>*)
boost::math::tools::detail::test_has_scale	/usr/include/boost/math/tools/traits.hpp	/^char test_has_scale(...);$/;"	p	namespace:boost::math::tools::detail	signature:(....)
boost::math::tools::detail::test_has_scale	/usr/include/boost/math/tools/traits.hpp	/^double test_has_scale(const volatile result_tag<typename D::value_type (D::*)()const, &D::scale>*);$/;"	p	namespace:boost::math::tools::detail	signature:(const volatile result_tag<typename D::value_type (D::*)()const, &D::scale>*)
boost::math::tools::detail::unpack_0	/usr/include/boost/math/tools/roots.hpp	/^inline void unpack_0(const Tuple& t, T& val)$/;"	f	namespace:boost::math::tools::detail	signature:(const Tuple& t, T& val)
boost::math::tools::detail::unpack_and_append	/usr/include/boost/math/tools/test_data.hpp	/^inline void unpack_and_append(Seq& s, const Item& data)$/;"	f	namespace:boost::math::tools::detail	signature:(Seq& s, const Item& data)
boost::math::tools::detail::unpack_and_append	/usr/include/boost/math/tools/test_data.hpp	/^inline void unpack_and_append(Seq& s, const Item& data, const boost::false_type&)$/;"	f	namespace:boost::math::tools::detail	signature:(Seq& s, const Item& data, const boost::false_type&)
boost::math::tools::detail::unpack_and_append	/usr/include/boost/math/tools/test_data.hpp	/^inline void unpack_and_append(Seq& s, const Item& data, const boost::true_type&)$/;"	f	namespace:boost::math::tools::detail	signature:(Seq& s, const Item& data, const boost::true_type&)
boost::math::tools::detail::unpack_and_append_tuple	/usr/include/boost/math/tools/test_data.hpp	/^inline void unpack_and_append_tuple(Seq& s,$/;"	f	namespace:boost::math::tools::detail	signature:(Seq& s, const Item& data, const boost::integral_constant<int, N>&, const boost::false_type&)
boost::math::tools::detail::unpack_and_append_tuple	/usr/include/boost/math/tools/test_data.hpp	/^inline void unpack_and_append_tuple(Seq& s,$/;"	f	namespace:boost::math::tools::detail	signature:(Seq& s, const Item& data, const boost::integral_constant<int, N>&, const boost::true_type&)
boost::math::tools::dummy_param	/usr/include/boost/math/tools/test_data.hpp	/^   dummy_param = 0x80$/;"	e	enum:boost::math::tools::parameter_type
boost::math::tools::eps_tolerance	/usr/include/boost/math/tools/toms748_solve.hpp	/^class eps_tolerance$/;"	c	namespace:boost::math::tools
boost::math::tools::eps_tolerance::eps	/usr/include/boost/math/tools/toms748_solve.hpp	/^   T eps;$/;"	m	class:boost::math::tools::eps_tolerance	access:private
boost::math::tools::eps_tolerance::eps_tolerance	/usr/include/boost/math/tools/toms748_solve.hpp	/^   eps_tolerance(unsigned bits)$/;"	f	class:boost::math::tools::eps_tolerance	access:public	signature:(unsigned bits)
boost::math::tools::eps_tolerance::operator ()	/usr/include/boost/math/tools/toms748_solve.hpp	/^   bool operator()(const T& a, const T& b)$/;"	f	class:boost::math::tools::eps_tolerance	access:public	signature:(const T& a, const T& b)
boost::math::tools::equal_ceil	/usr/include/boost/math/tools/toms748_solve.hpp	/^struct equal_ceil$/;"	s	namespace:boost::math::tools
boost::math::tools::equal_ceil::equal_ceil	/usr/include/boost/math/tools/toms748_solve.hpp	/^   equal_ceil(){}$/;"	f	struct:boost::math::tools::equal_ceil	access:public	signature:()
boost::math::tools::equal_ceil::operator ()	/usr/include/boost/math/tools/toms748_solve.hpp	/^   bool operator()(const T& a, const T& b)$/;"	f	struct:boost::math::tools::equal_ceil	access:public	signature:(const T& a, const T& b)
boost::math::tools::equal_floor	/usr/include/boost/math/tools/toms748_solve.hpp	/^struct equal_floor$/;"	s	namespace:boost::math::tools
boost::math::tools::equal_floor::equal_floor	/usr/include/boost/math/tools/toms748_solve.hpp	/^   equal_floor(){}$/;"	f	struct:boost::math::tools::equal_floor	access:public	signature:()
boost::math::tools::equal_floor::operator ()	/usr/include/boost/math/tools/toms748_solve.hpp	/^   bool operator()(const T& a, const T& b)$/;"	f	struct:boost::math::tools::equal_floor	access:public	signature:(const T& a, const T& b)
boost::math::tools::equal_nearest_integer	/usr/include/boost/math/tools/toms748_solve.hpp	/^struct equal_nearest_integer$/;"	s	namespace:boost::math::tools
boost::math::tools::equal_nearest_integer::equal_nearest_integer	/usr/include/boost/math/tools/toms748_solve.hpp	/^   equal_nearest_integer(){}$/;"	f	struct:boost::math::tools::equal_nearest_integer	access:public	signature:()
boost::math::tools::equal_nearest_integer::operator ()	/usr/include/boost/math/tools/toms748_solve.hpp	/^   bool operator()(const T& a, const T& b)$/;"	f	struct:boost::math::tools::equal_nearest_integer	access:public	signature:(const T& a, const T& b)
boost::math::tools::evaluate_chebyshev	/usr/include/boost/math/tools/polynomial.hpp	/^T evaluate_chebyshev(const Seq& a, const T& x)$/;"	f	namespace:boost::math::tools	signature:(const Seq& a, const T& x)
boost::math::tools::evaluate_even_polynomial	/usr/include/boost/math/tools/rational.hpp	/^inline U evaluate_even_polynomial(const T* poly, U z, std::size_t count)$/;"	f	namespace:boost::math::tools	signature:(const T* poly, U z, std::size_t count)
boost::math::tools::evaluate_even_polynomial	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_even_polynomial(const boost::array<T,N>& a, const V& z)$/;"	f	namespace:boost::math::tools	signature:(const boost::array<T,N>& a, const V& z)
boost::math::tools::evaluate_odd_polynomial	/usr/include/boost/math/tools/rational.hpp	/^inline U evaluate_odd_polynomial(const T* poly, U z, std::size_t count)$/;"	f	namespace:boost::math::tools	signature:(const T* poly, U z, std::size_t count)
boost::math::tools::evaluate_odd_polynomial	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_odd_polynomial(const boost::array<T,N>& a, const V& z)$/;"	f	namespace:boost::math::tools	signature:(const boost::array<T,N>& a, const V& z)
boost::math::tools::evaluate_polynomial	/usr/include/boost/math/tools/rational.hpp	/^U evaluate_polynomial(const T* poly, U const& z, std::size_t count);$/;"	p	namespace:boost::math::tools	signature:(const T* poly, U const& z, std::size_t count)
boost::math::tools::evaluate_polynomial	/usr/include/boost/math/tools/rational.hpp	/^inline U evaluate_polynomial(const T* poly, U const& z, std::size_t count)$/;"	f	namespace:boost::math::tools	signature:(const T* poly, U const& z, std::size_t count)
boost::math::tools::evaluate_polynomial	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_polynomial(const boost::array<T,N>& a, const V& val)$/;"	f	namespace:boost::math::tools	signature:(const boost::array<T,N>& a, const V& val)
boost::math::tools::evaluate_rational	/usr/include/boost/math/tools/rational.hpp	/^V evaluate_rational(const T* num, const U* denom, const V& z_, std::size_t count)$/;"	f	namespace:boost::math::tools	signature:(const T* num, const U* denom, const V& z_, std::size_t count)
boost::math::tools::evaluate_rational	/usr/include/boost/math/tools/rational.hpp	/^V evaluate_rational(const T* num, const U* denom, const V& z_, std::size_t count);$/;"	p	namespace:boost::math::tools	signature:(const T* num, const U* denom, const V& z_, std::size_t count)
boost::math::tools::evaluate_rational	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_rational(const boost::array<T,N>& a, const boost::array<U,N>& b, const V& z)$/;"	f	namespace:boost::math::tools	signature:(const boost::array<T,N>& a, const boost::array<U,N>& b, const V& z)
boost::math::tools::fmod_workaround	/usr/include/boost/math/tools/workaround.hpp	/^inline T fmod_workaround(T a, T b)$/;"	f	namespace:boost::math::tools	signature:(T a, T b)
boost::math::tools::fmod_workaround	/usr/include/boost/math/tools/workaround.hpp	/^inline long double fmod_workaround(long double a, long double b)$/;"	f	namespace:boost::math::tools	signature:(long double a, long double b)
boost::math::tools::forth_root_epsilon	/usr/include/boost/math/tools/precision.hpp	/^inline T forth_root_epsilon()$/;"	f	namespace:boost::math::tools	signature:()
boost::math::tools::get_user_parameter_info	/usr/include/boost/math/tools/test_data.hpp	/^bool get_user_parameter_info(parameter_info<T>& info, const char* param_name)$/;"	f	namespace:boost::math::tools	signature:(parameter_info<T>& info, const char* param_name)
boost::math::tools::halley_iterate	/usr/include/boost/math/tools/roots.hpp	/^T halley_iterate(F f, T guess, T min, T max, int digits, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, T guess, T min, T max, int digits, boost::uintmax_t& max_iter)
boost::math::tools::halley_iterate	/usr/include/boost/math/tools/roots.hpp	/^inline T halley_iterate(F f, T guess, T min, T max, int digits)$/;"	f	namespace:boost::math::tools	signature:(F f, T guess, T min, T max, int digits)
boost::math::tools::kahan_sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type kahan_sum_series(Functor& func, int bits)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, int bits)
boost::math::tools::kahan_sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type kahan_sum_series(Functor& func, int bits, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, int bits, boost::uintmax_t& max_terms)
boost::math::tools::make_big_value	/usr/include/boost/math/concepts/real_concept.hpp	/^inline concepts::real_concept make_big_value<concepts::real_concept>(long double val, const char* , mpl::false_ const&, mpl::false_ const&)$/;"	f	namespace:boost::math::tools	signature:(long double val, const char* , mpl::false_ const&, mpl::false_ const&)
boost::math::tools::make_big_value	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline concepts::std_real_concept make_big_value<concepts::std_real_concept>(long double val, const char* , mpl::false_ const&, mpl::false_ const&)$/;"	f	namespace:boost::math::tools	signature:(long double val, const char* , mpl::false_ const&, mpl::false_ const&)
boost::math::tools::make_big_value	/usr/include/boost/math/tools/big_constant.hpp	/^inline BOOST_CONSTEXPR const char* make_big_value(long double, const char* s, mpl::false_ const&, mpl::true_ const&)$/;"	f	namespace:boost::math::tools	signature:(long double, const char* s, mpl::false_ const&, mpl::true_ const&)
boost::math::tools::make_big_value	/usr/include/boost/math/tools/big_constant.hpp	/^inline BOOST_CONSTEXPR_OR_CONST T make_big_value(long double v, const char*, mpl::true_ const&, mpl::false_ const&)$/;"	f	namespace:boost::math::tools	signature:(long double v, const char*, mpl::true_ const&, mpl::false_ const&)
boost::math::tools::make_big_value	/usr/include/boost/math/tools/big_constant.hpp	/^inline BOOST_CONSTEXPR_OR_CONST T make_big_value(long double v, const char*, mpl::true_ const&, mpl::true_ const&)$/;"	f	namespace:boost::math::tools	signature:(long double v, const char*, mpl::true_ const&, mpl::true_ const&)
boost::math::tools::make_big_value	/usr/include/boost/math/tools/big_constant.hpp	/^inline T make_big_value(long double, const char* s, mpl::false_ const&, mpl::false_ const&)$/;"	f	namespace:boost::math::tools	signature:(long double, const char* s, mpl::false_ const&, mpl::false_ const&)
boost::math::tools::make_periodic_param	/usr/include/boost/math/tools/test_data.hpp	/^inline parameter_info<T> make_periodic_param(T start_range, T end_range, int n_points)$/;"	f	namespace:boost::math::tools	signature:(T start_range, T end_range, int n_points)
boost::math::tools::make_power_param	/usr/include/boost/math/tools/test_data.hpp	/^inline parameter_info<T> make_power_param(T basis, int start_exponent, int end_exponent)$/;"	f	namespace:boost::math::tools	signature:(T basis, int start_exponent, int end_exponent)
boost::math::tools::make_random_param	/usr/include/boost/math/tools/test_data.hpp	/^inline parameter_info<T> make_random_param(T start_range, T end_range, int n_points)$/;"	f	namespace:boost::math::tools	signature:(T start_range, T end_range, int n_points)
boost::math::tools::newton_raphson_iterate	/usr/include/boost/math/tools/roots.hpp	/^T newton_raphson_iterate(F f, T guess, T min, T max, int digits, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, T guess, T min, T max, int digits, boost::uintmax_t& max_iter)
boost::math::tools::newton_raphson_iterate	/usr/include/boost/math/tools/roots.hpp	/^inline T newton_raphson_iterate(F f, T guess, T min, T max, int digits)$/;"	f	namespace:boost::math::tools	signature:(F f, T guess, T min, T max, int digits)
boost::math::tools::operator *	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator * (const U& a, const polynomial<T>& b)$/;"	f	namespace:boost::math::tools	signature:(const U& a, const polynomial<T>& b)
boost::math::tools::operator *	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator * (const polynomial<T>& a, const U& b)$/;"	f	namespace:boost::math::tools	signature:(const polynomial<T>& a, const U& b)
boost::math::tools::operator *	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator * (const polynomial<T>& a, const polynomial<T>& b)$/;"	f	namespace:boost::math::tools	signature:(const polynomial<T>& a, const polynomial<T>& b)
boost::math::tools::operator +	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator + (const U& a, const polynomial<T>& b)$/;"	f	namespace:boost::math::tools	signature:(const U& a, const polynomial<T>& b)
boost::math::tools::operator +	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator + (const polynomial<T>& a, const U& b)$/;"	f	namespace:boost::math::tools	signature:(const polynomial<T>& a, const U& b)
boost::math::tools::operator +	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator + (const polynomial<T>& a, const polynomial<T>& b)$/;"	f	namespace:boost::math::tools	signature:(const polynomial<T>& a, const polynomial<T>& b)
boost::math::tools::operator -	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator - (const U& a, const polynomial<T>& b)$/;"	f	namespace:boost::math::tools	signature:(const U& a, const polynomial<T>& b)
boost::math::tools::operator -	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator - (const polynomial<T>& a, const U& b)$/;"	f	namespace:boost::math::tools	signature:(const polynomial<T>& a, const U& b)
boost::math::tools::operator -	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator - (const polynomial<T>& a, const polynomial<T>& b)$/;"	f	namespace:boost::math::tools	signature:(const polynomial<T>& a, const polynomial<T>& b)
boost::math::tools::operator <<	/usr/include/boost/math/tools/polynomial.hpp	/^inline std::basic_ostream<charT, traits>& operator << (std::basic_ostream<charT, traits>& os, const polynomial<T>& poly)$/;"	f	namespace:boost::math::tools	signature:(std::basic_ostream<charT, traits>& os, const polynomial<T>& poly)
boost::math::tools::operator |	/usr/include/boost/math/tools/test_data.hpp	/^parameter_type operator | (parameter_type a, parameter_type b)$/;"	f	namespace:boost::math::tools	signature:(parameter_type a, parameter_type b)
boost::math::tools::operator |=	/usr/include/boost/math/tools/test_data.hpp	/^parameter_type& operator |= (parameter_type& a, parameter_type b)$/;"	f	namespace:boost::math::tools	signature:(parameter_type& a, parameter_type b)
boost::math::tools::parameter_info	/usr/include/boost/math/tools/test_data.hpp	/^struct parameter_info$/;"	s	namespace:boost::math::tools
boost::math::tools::parameter_info::n1	/usr/include/boost/math/tools/test_data.hpp	/^   int n1, n2;$/;"	m	struct:boost::math::tools::parameter_info	access:public
boost::math::tools::parameter_info::n2	/usr/include/boost/math/tools/test_data.hpp	/^   int n1, n2;$/;"	m	struct:boost::math::tools::parameter_info	access:public
boost::math::tools::parameter_info::type	/usr/include/boost/math/tools/test_data.hpp	/^   parameter_type type;$/;"	m	struct:boost::math::tools::parameter_info	access:public
boost::math::tools::parameter_info::z1	/usr/include/boost/math/tools/test_data.hpp	/^   T z1, z2;$/;"	m	struct:boost::math::tools::parameter_info	access:public
boost::math::tools::parameter_info::z2	/usr/include/boost/math/tools/test_data.hpp	/^   T z1, z2;$/;"	m	struct:boost::math::tools::parameter_info	access:public
boost::math::tools::parameter_type	/usr/include/boost/math/tools/test_data.hpp	/^enum parameter_type$/;"	g	namespace:boost::math::tools
boost::math::tools::periodic_in_range	/usr/include/boost/math/tools/test_data.hpp	/^   periodic_in_range = 1,$/;"	e	enum:boost::math::tools::parameter_type
boost::math::tools::polynomial	/usr/include/boost/math/tools/polynomial.hpp	/^class polynomial$/;"	c	namespace:boost::math::tools
boost::math::tools::polynomial::chebyshev	/usr/include/boost/math/tools/polynomial.hpp	/^   std::vector<T> chebyshev()const$/;"	f	class:boost::math::tools::polynomial	access:public	signature:() const
boost::math::tools::polynomial::degree	/usr/include/boost/math/tools/polynomial.hpp	/^   size_type degree()const { return m_data.size() - 1; }$/;"	f	class:boost::math::tools::polynomial	access:public	signature:() const
boost::math::tools::polynomial::evaluate	/usr/include/boost/math/tools/polynomial.hpp	/^   T evaluate(T z)const$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(T z) const
boost::math::tools::polynomial::m_data	/usr/include/boost/math/tools/polynomial.hpp	/^   std::vector<T> m_data;$/;"	m	class:boost::math::tools::polynomial	access:private
boost::math::tools::polynomial::operator *=	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial& operator *=(const U& value)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const U& value)
boost::math::tools::polynomial::operator *=	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial& operator *=(const polynomial<U>& value)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const polynomial<U>& value)
boost::math::tools::polynomial::operator +=	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial& operator +=(const U& value)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const U& value)
boost::math::tools::polynomial::operator +=	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial& operator +=(const polynomial<U>& value)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const polynomial<U>& value)
boost::math::tools::polynomial::operator -=	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial& operator -=(const U& value)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const U& value)
boost::math::tools::polynomial::operator -=	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial& operator -=(const polynomial<U>& value)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const polynomial<U>& value)
boost::math::tools::polynomial::operator []	/usr/include/boost/math/tools/polynomial.hpp	/^   const value_type& operator[](size_type i)const$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(size_type i) const
boost::math::tools::polynomial::operator []	/usr/include/boost/math/tools/polynomial.hpp	/^   value_type& operator[](size_type i)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(size_type i)
boost::math::tools::polynomial::polynomial	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial(){}$/;"	f	class:boost::math::tools::polynomial	access:public	signature:()
boost::math::tools::polynomial::polynomial	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial(const U& point)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const U& point)
boost::math::tools::polynomial::polynomial	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial(const U* data, unsigned order)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const U* data, unsigned order)
boost::math::tools::polynomial::polynomial	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial(const polynomial& p)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const polynomial& p)
boost::math::tools::polynomial::polynomial	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial(const polynomial<U>& p)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const polynomial<U>& p)
boost::math::tools::polynomial::size	/usr/include/boost/math/tools/polynomial.hpp	/^   size_type size()const { return m_data.size(); }$/;"	f	class:boost::math::tools::polynomial	access:public	signature:() const
boost::math::tools::polynomial::size_type	/usr/include/boost/math/tools/polynomial.hpp	/^   typedef typename std::vector<T>::size_type size_type;$/;"	t	class:boost::math::tools::polynomial	access:public
boost::math::tools::polynomial::value_type	/usr/include/boost/math/tools/polynomial.hpp	/^   typedef typename std::vector<T>::value_type value_type;$/;"	t	class:boost::math::tools::polynomial	access:public
boost::math::tools::polynomial_to_chebyshev	/usr/include/boost/math/tools/polynomial.hpp	/^Seq polynomial_to_chebyshev(const Seq& s)$/;"	f	namespace:boost::math::tools	signature:(const Seq& s)
boost::math::tools::power_series	/usr/include/boost/math/tools/test_data.hpp	/^   power_series = 2,$/;"	e	enum:boost::math::tools::parameter_type
boost::math::tools::print_row	/usr/include/boost/math/tools/test.hpp	/^void print_row(const Seq& row)$/;"	f	namespace:boost::math::tools	signature:(const Seq& row)
boost::math::tools::promote_arg	/usr/include/boost/math/bindings/mpfr.hpp	/^struct promote_arg<__gmp_expr<T,U> >$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_arg	/usr/include/boost/math/tools/promotion.hpp	/^      struct promote_arg$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_arg	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<double>{ typedef double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_arg	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<float> { typedef float type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_arg	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<int> {  typedef double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_arg	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<long double> { typedef long double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_arg::type	/usr/include/boost/math/bindings/mpfr.hpp	/^  typedef mpfr_class type;$/;"	t	struct:boost::math::tools::promote_arg	access:public
boost::math::tools::promote_arg::type	/usr/include/boost/math/tools/promotion.hpp	/^        typedef typename mpl::if_<is_integral<T>, double, T>::type type;$/;"	t	struct:boost::math::tools::promote_arg	access:public
boost::math::tools::promote_arg::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<double>{ typedef double type; };$/;"	t	struct:boost::math::tools::promote_arg	access:public
boost::math::tools::promote_arg::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<float> { typedef float type; };$/;"	t	struct:boost::math::tools::promote_arg	access:public
boost::math::tools::promote_arg::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<int> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_arg	access:public
boost::math::tools::promote_arg::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<long double> { typedef long double type; };$/;"	t	struct:boost::math::tools::promote_arg	access:public
boost::math::tools::promote_args	/usr/include/boost/math/tools/promotion.hpp	/^      struct promote_args$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args::BOOST_STATIC_ASSERT	/usr/include/boost/math/tools/promotion.hpp	/^         BOOST_STATIC_ASSERT((0 == ::boost::is_same<type, long double>::value));$/;"	p	struct:boost::math::tools::promote_args	access:public	signature:(0 == ::boost::is_same<type, long double>::value)
boost::math::tools::promote_args::type	/usr/include/boost/math/tools/promotion.hpp	/^         >::type type;$/;"	t	struct:boost::math::tools::promote_args	access:public
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      struct promote_args_2$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, double>{ typedef double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, float> {  typedef double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, int> {  typedef double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, long double> {  typedef long double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, double> {  typedef double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, float> { typedef float type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, int> {  typedef double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, long double> {  typedef long double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, double> {  typedef double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, float> {  typedef double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, int> {  typedef double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, long double> {  typedef long double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, double> {  typedef long double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, float> {  typedef long double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, int> {  typedef long double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, long double> { typedef long double type; };$/;"	s	namespace:boost::math::tools
boost::math::tools::promote_args_2::T1P	/usr/include/boost/math/tools/promotion.hpp	/^        typedef typename promote_arg<T1>::type T1P; \/\/ T1 perhaps promoted.$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::T2P	/usr/include/boost/math/tools/promotion.hpp	/^        typedef typename promote_arg<T2>::type T2P; \/\/ T2 perhaps promoted.$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^          typename mpl::if_< typename mpl::and_<mpl::not_<is_floating_point<T2P> >, ::boost::is_convertible<T1P, T2P> >, T2P, T1P>::type>::type type;$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, double>{ typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, float> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, int> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, long double> {  typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, double> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, float> { typedef float type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, int> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, long double> {  typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, double> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, float> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, int> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, long double> {  typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, double> {  typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, float> {  typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, int> {  typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::promote_args_2::type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, long double> { typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
boost::math::tools::random_in_range	/usr/include/boost/math/tools/test_data.hpp	/^   random_in_range = 0,$/;"	e	enum:boost::math::tools::parameter_type
boost::math::tools::real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline double real_cast<double, mpfr_class>(mpfr_class t)$/;"	f	namespace:boost::math::tools	signature:(mpfr_class t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline float real_cast<float, mpfr_class>(mpfr_class t)$/;"	f	namespace:boost::math::tools	signature:(mpfr_class t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline int real_cast<int, mpfr_class>(mpfr_class t)$/;"	f	namespace:boost::math::tools	signature:(mpfr_class t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline long long real_cast<long long, mpfr_class>(mpfr_class t)$/;"	f	namespace:boost::math::tools	signature:(mpfr_class t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline long real_cast<long, mpfr_class>(mpfr_class t)$/;"	f	namespace:boost::math::tools	signature:(mpfr_class t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class real_cast<mpfr_class, long long>(long long t)$/;"	f	namespace:boost::math::tools	signature:(long long t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline unsigned real_cast<unsigned, mpfr_class>(mpfr_class t)$/;"	f	namespace:boost::math::tools	signature:(mpfr_class t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/mpreal.hpp	/^inline long long real_cast<long long, mpfr::mpreal>(mpfr::mpreal t)$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal real_cast<mpfr::mpreal, long long>(long long t)$/;"	f	namespace:boost::math::tools	signature:(long long t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline boost::math::ntl::RR real_cast<boost::math::ntl::RR, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline double real_cast<double, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline float real_cast<float, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline int real_cast<int, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline long double real_cast<long double, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline long long real_cast<long long, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline long real_cast<long, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
boost::math::tools::real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline unsigned real_cast<unsigned, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
boost::math::tools::real_cast	/usr/include/boost/math/concepts/real_concept.hpp	/^inline double real_cast<double, concepts::real_concept>(concepts::real_concept r)$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept r)
boost::math::tools::real_cast	/usr/include/boost/math/concepts/real_concept.hpp	/^inline float real_cast<float, concepts::real_concept>(concepts::real_concept r)$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept r)
boost::math::tools::real_cast	/usr/include/boost/math/concepts/real_concept.hpp	/^inline int real_cast<int, concepts::real_concept>(concepts::real_concept r)$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept r)
boost::math::tools::real_cast	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long double real_cast<long double, concepts::real_concept>(concepts::real_concept r)$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept r)
boost::math::tools::real_cast	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long real_cast<long, concepts::real_concept>(concepts::real_concept r)$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept r)
boost::math::tools::real_cast	/usr/include/boost/math/concepts/real_concept.hpp	/^inline unsigned int real_cast<unsigned int, concepts::real_concept>(concepts::real_concept r)$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept r)
boost::math::tools::real_cast	/usr/include/boost/math/tools/real_cast.hpp	/^    inline To real_cast(T t)$/;"	f	namespace:boost::math::tools	signature:(T t)
boost::math::tools::relative_error	/usr/include/boost/math/tools/test.hpp	/^T relative_error(T a, T b)$/;"	f	namespace:boost::math::tools	signature:(T a, T b)
boost::math::tools::relative_error	/usr/include/boost/math/tools/test.hpp	/^inline double relative_error<double>(double a, double b)$/;"	f	namespace:boost::math::tools	signature:(double a, double b)
boost::math::tools::remez_minimax	/usr/include/boost/math/tools/remez.hpp	/^class remez_minimax$/;"	c	namespace:boost::math::tools
boost::math::tools::remez_minimax::chebyshev_points	/usr/include/boost/math/tools/remez.hpp	/^   vector_type const& chebyshev_points()const$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:() const
boost::math::tools::remez_minimax::control_points	/usr/include/boost/math/tools/remez.hpp	/^   vector_type control_points;    \/\/ Current control points to be used for the next iteration.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::denominator	/usr/include/boost/math/tools/remez.hpp	/^   polynomial<T> denominator()const;$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:() const
boost::math::tools::remez_minimax::denominator	/usr/include/boost/math/tools/remez.hpp	/^polynomial<T> remez_minimax<T>::denominator()const$/;"	f	class:boost::math::tools::remez_minimax	signature:() const
boost::math::tools::remez_minimax::error_term	/usr/include/boost/math/tools/remez.hpp	/^   T error_term()const$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:() const
boost::math::tools::remez_minimax::func	/usr/include/boost/math/tools/remez.hpp	/^   function_type func;            \/\/ The function to approximate.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::function_type	/usr/include/boost/math/tools/remez.hpp	/^   typedef boost::function1<T, T const &> function_type;$/;"	t	class:boost::math::tools::remez_minimax	access:public
boost::math::tools::remez_minimax::init_chebyshev	/usr/include/boost/math/tools/remez.hpp	/^   void init_chebyshev();$/;"	p	class:boost::math::tools::remez_minimax	access:private	signature:()
boost::math::tools::remez_minimax::init_chebyshev	/usr/include/boost/math/tools/remez.hpp	/^void remez_minimax<T>::init_chebyshev()$/;"	f	class:boost::math::tools::remez_minimax	signature:()
boost::math::tools::remez_minimax::iterate	/usr/include/boost/math/tools/remez.hpp	/^   T iterate();$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:()
boost::math::tools::remez_minimax::iterate	/usr/include/boost/math/tools/remez.hpp	/^T remez_minimax<T>::iterate()$/;"	f	class:boost::math::tools::remez_minimax	signature:()
boost::math::tools::remez_minimax::m_brake	/usr/include/boost/math/tools/remez.hpp	/^   int m_brake;                     \/\/ amount to break by in percentage points.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::m_max_change	/usr/include/boost/math/tools/remez.hpp	/^   T m_max_change;                \/\/ Maximum change in location of control points after last iteration.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::m_max_change_history	/usr/include/boost/math/tools/remez.hpp	/^   T m_max_change_history[2];     \/\/ Past history of changes to control points.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::m_max_error	/usr/include/boost/math/tools/remez.hpp	/^   T m_max_error;                 \/\/ Maximum error found in last approximation.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::m_precision	/usr/include/boost/math/tools/remez.hpp	/^   int m_precision;               \/\/ Number of bits precision to which the zeros and maxima are found.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::m_skew	/usr/include/boost/math/tools/remez.hpp	/^   int m_skew;                      \/\/ amount to skew starting points by in percentage points: -100-100$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::matrix_type	/usr/include/boost/math/tools/remez.hpp	/^   typedef boost::numeric::ublas::matrix<T> matrix_type;$/;"	t	class:boost::math::tools::remez_minimax	access:public
boost::math::tools::remez_minimax::max	/usr/include/boost/math/tools/remez.hpp	/^   T min, max;                    \/\/ End points of the range to optimise over.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::max_change	/usr/include/boost/math/tools/remez.hpp	/^   T max_change()const$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:() const
boost::math::tools::remez_minimax::max_error	/usr/include/boost/math/tools/remez.hpp	/^   T max_error()const$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:() const
boost::math::tools::remez_minimax::maxima	/usr/include/boost/math/tools/remez.hpp	/^   vector_type maxima;            \/\/ Location of maxima of the error function, actually contains the control points used for the last iteration.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::min	/usr/include/boost/math/tools/remez.hpp	/^   T min, max;                    \/\/ End points of the range to optimise over.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::numerator	/usr/include/boost/math/tools/remez.hpp	/^   polynomial<T> numerator()const;$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:() const
boost::math::tools::remez_minimax::numerator	/usr/include/boost/math/tools/remez.hpp	/^polynomial<T> remez_minimax<T>::numerator()const$/;"	f	class:boost::math::tools::remez_minimax	signature:() const
boost::math::tools::remez_minimax::orderD	/usr/include/boost/math/tools/remez.hpp	/^   unsigned orderD;               \/\/ Order of the denominator polynomial.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::orderN	/usr/include/boost/math/tools/remez.hpp	/^   unsigned orderN;               \/\/ Order of the numerator polynomial.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::pinned	/usr/include/boost/math/tools/remez.hpp	/^   bool pinned;                   \/\/ If true the approximation is "pinned" to go through the origin.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::rel_error	/usr/include/boost/math/tools/remez.hpp	/^   bool rel_error;                \/\/ If true optimise for relative not absolute error.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::remez_minimax	/usr/include/boost/math/tools/remez.hpp	/^   remez_minimax(function_type f, unsigned oN, unsigned oD, T a, T b, bool pin = true, bool rel_err = false, int sk = 0, int bits = 0);$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:(function_type f, unsigned oN, unsigned oD, T a, T b, bool pin = true, bool rel_err = false, int sk = 0, int bits = 0)
boost::math::tools::remez_minimax::remez_minimax	/usr/include/boost/math/tools/remez.hpp	/^   remez_minimax(function_type f, unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits, const vector_type& points);$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:(function_type f, unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits, const vector_type& points)
boost::math::tools::remez_minimax::remez_minimax	/usr/include/boost/math/tools/remez.hpp	/^inline remez_minimax<T>::remez_minimax($/;"	f	class:boost::math::tools::remez_minimax	signature:( typename remez_minimax<T>::function_type f, unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits)
boost::math::tools::remez_minimax::remez_minimax	/usr/include/boost/math/tools/remez.hpp	/^inline remez_minimax<T>::remez_minimax($/;"	f	class:boost::math::tools::remez_minimax	signature:( typename remez_minimax<T>::function_type f, unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits, const vector_type& points)
boost::math::tools::remez_minimax::rescale	/usr/include/boost/math/tools/remez.hpp	/^   void rescale(T a, T b)$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:(T a, T b)
boost::math::tools::remez_minimax::reset	/usr/include/boost/math/tools/remez.hpp	/^   void reset(unsigned oN, unsigned oD, T a, T b, bool pin = true, bool rel_err = false, int sk = 0, int bits = 0);$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:(unsigned oN, unsigned oD, T a, T b, bool pin = true, bool rel_err = false, int sk = 0, int bits = 0)
boost::math::tools::remez_minimax::reset	/usr/include/boost/math/tools/remez.hpp	/^   void reset(unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits, const vector_type& points);$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:(unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits, const vector_type& points)
boost::math::tools::remez_minimax::reset	/usr/include/boost/math/tools/remez.hpp	/^void remez_minimax<T>::reset($/;"	f	class:boost::math::tools::remez_minimax	signature:( unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits)
boost::math::tools::remez_minimax::reset	/usr/include/boost/math/tools/remez.hpp	/^void remez_minimax<T>::reset($/;"	f	class:boost::math::tools::remez_minimax	signature:( unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits, const vector_type& points)
boost::math::tools::remez_minimax::rotate	/usr/include/boost/math/tools/remez.hpp	/^   void rotate()$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:()
boost::math::tools::remez_minimax::set_brake	/usr/include/boost/math/tools/remez.hpp	/^   void set_brake(int b)$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:(int b)
boost::math::tools::remez_minimax::solution	/usr/include/boost/math/tools/remez.hpp	/^   vector_type solution;          \/\/ Solution from the last iteration contains all unknowns including the error term.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::unknowns	/usr/include/boost/math/tools/remez.hpp	/^   unsigned unknowns;             \/\/ Total number of unknowns.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::remez_minimax::vector_type	/usr/include/boost/math/tools/remez.hpp	/^   typedef boost::numeric::ublas::vector<T> vector_type;$/;"	t	class:boost::math::tools::remez_minimax	access:public
boost::math::tools::remez_minimax::zero_points	/usr/include/boost/math/tools/remez.hpp	/^   vector_type const& zero_points()const$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:() const
boost::math::tools::remez_minimax::zeros	/usr/include/boost/math/tools/remez.hpp	/^   vector_type zeros;             \/\/ Location of points of zero error from last iteration, plus the two end points.$/;"	m	class:boost::math::tools::remez_minimax	access:private
boost::math::tools::root_epsilon	/usr/include/boost/math/tools/precision.hpp	/^inline T root_epsilon()$/;"	f	namespace:boost::math::tools	signature:()
boost::math::tools::schroeder_iterate	/usr/include/boost/math/tools/roots.hpp	/^T schroeder_iterate(F f, T guess, T min, T max, int digits, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, T guess, T min, T max, int digits, boost::uintmax_t& max_iter)
boost::math::tools::schroeder_iterate	/usr/include/boost/math/tools/roots.hpp	/^inline T schroeder_iterate(F f, T guess, T min, T max, int digits)$/;"	f	namespace:boost::math::tools	signature:(F f, T guess, T min, T max, int digits)
boost::math::tools::set_output_precision	/usr/include/boost/math/tools/test.hpp	/^void set_output_precision(T)$/;"	f	namespace:boost::math::tools	signature:(T)
boost::math::tools::solve	/usr/include/boost/math/tools/solve.hpp	/^boost::numeric::ublas::vector<T> solve($/;"	f	namespace:boost::math::tools	signature:( const boost::numeric::ublas::matrix<T>& A_, const boost::numeric::ublas::vector<T>& b_)
boost::math::tools::stats	/usr/include/boost/math/tools/stats.hpp	/^class stats$/;"	c	namespace:boost::math::tools
boost::math::tools::stats::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tools/stats.hpp	/^   T max BOOST_PREVENT_MACRO_SUBSTITUTION()const{ return m_max; }$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
boost::math::tools::stats::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tools/stats.hpp	/^   T min BOOST_PREVENT_MACRO_SUBSTITUTION()const{ return m_min; }$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
boost::math::tools::stats::add	/usr/include/boost/math/tools/stats.hpp	/^   void add(const T& val)$/;"	f	class:boost::math::tools::stats	access:public	signature:(const T& val)
boost::math::tools::stats::count	/usr/include/boost/math/tools/stats.hpp	/^   boost::uintmax_t count()const{ return m_count; }$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
boost::math::tools::stats::m_count	/usr/include/boost/math/tools/stats.hpp	/^   boost::uintmax_t m_count;$/;"	m	class:boost::math::tools::stats	access:private
boost::math::tools::stats::m_max	/usr/include/boost/math/tools/stats.hpp	/^   T m_min, m_max, m_total, m_squared_total;$/;"	m	class:boost::math::tools::stats	access:private
boost::math::tools::stats::m_min	/usr/include/boost/math/tools/stats.hpp	/^   T m_min, m_max, m_total, m_squared_total;$/;"	m	class:boost::math::tools::stats	access:private
boost::math::tools::stats::m_squared_total	/usr/include/boost/math/tools/stats.hpp	/^   T m_min, m_max, m_total, m_squared_total;$/;"	m	class:boost::math::tools::stats	access:private
boost::math::tools::stats::m_total	/usr/include/boost/math/tools/stats.hpp	/^   T m_min, m_max, m_total, m_squared_total;$/;"	m	class:boost::math::tools::stats	access:private
boost::math::tools::stats::mean	/usr/include/boost/math/tools/stats.hpp	/^   T mean()const{ return m_total \/ static_cast<T>(m_count); }$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
boost::math::tools::stats::operator +=	/usr/include/boost/math/tools/stats.hpp	/^   stats& operator+=(const stats& s)$/;"	f	class:boost::math::tools::stats	access:public	signature:(const stats& s)
boost::math::tools::stats::rms	/usr/include/boost/math/tools/stats.hpp	/^   T rms()const$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
boost::math::tools::stats::stats	/usr/include/boost/math/tools/stats.hpp	/^   stats()$/;"	f	class:boost::math::tools::stats	access:public	signature:()
boost::math::tools::stats::total	/usr/include/boost/math/tools/stats.hpp	/^   T total()const{ return m_total; }$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
boost::math::tools::stats::variance	/usr/include/boost/math/tools/stats.hpp	/^   T variance()const$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
boost::math::tools::stats::variance1	/usr/include/boost/math/tools/stats.hpp	/^   T variance1()const$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
boost::math::tools::sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type sum_series(Functor& func, const U& factor, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, const U& factor, boost::uintmax_t& max_terms)
boost::math::tools::sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type sum_series(Functor& func, const U& factor, boost::uintmax_t& max_terms, const V& init_value)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, const U& factor, boost::uintmax_t& max_terms, const V& init_value)
boost::math::tools::sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type sum_series(Functor& func, int bits)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, int bits)
boost::math::tools::sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type sum_series(Functor& func, int bits, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, int bits, boost::uintmax_t& max_terms)
boost::math::tools::sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type sum_series(Functor& func, int bits, boost::uintmax_t& max_terms, const U& init_value)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, int bits, boost::uintmax_t& max_terms, const U& init_value)
boost::math::tools::sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type sum_series(Functor& func, int bits, const U& init_value)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, int bits, const U& init_value)
boost::math::tools::test	/usr/include/boost/math/tools/test.hpp	/^test_result<typename calculate_result_type<A>::value_type> test(const A& a, F1 test_func, F2 expect_func)$/;"	f	namespace:boost::math::tools	signature:(const A& a, F1 test_func, F2 expect_func)
boost::math::tools::test_data	/usr/include/boost/math/tools/test_data.hpp	/^class test_data$/;"	c	namespace:boost::math::tools
boost::math::tools::test_data::begin	/usr/include/boost/math/tools/test_data.hpp	/^   const_iterator begin()const { return m_data.begin(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:() const
boost::math::tools::test_data::begin	/usr/include/boost/math/tools/test_data.hpp	/^   iterator begin() { return m_data.begin(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:()
boost::math::tools::test_data::clear	/usr/include/boost/math/tools/test_data.hpp	/^   void clear(){ m_data.clear(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:()
boost::math::tools::test_data::const_iterator	/usr/include/boost/math/tools/test_data.hpp	/^   typedef typename container_type::const_iterator const_iterator;$/;"	t	class:boost::math::tools::test_data	access:public
boost::math::tools::test_data::const_reference	/usr/include/boost/math/tools/test_data.hpp	/^   typedef typename container_type::const_reference const_reference;$/;"	t	class:boost::math::tools::test_data	access:public
boost::math::tools::test_data::container_type	/usr/include/boost/math/tools/test_data.hpp	/^   typedef std::set<row_type> container_type;$/;"	t	class:boost::math::tools::test_data	access:private
boost::math::tools::test_data::create_test_points	/usr/include/boost/math/tools/test_data.hpp	/^   void create_test_points(std::set<T>& points, const parameter_info<T>& arg1);$/;"	p	class:boost::math::tools::test_data	access:private	signature:(std::set<T>& points, const parameter_info<T>& arg1)
boost::math::tools::test_data::create_test_points	/usr/include/boost/math/tools/test_data.hpp	/^void test_data<T>::create_test_points(std::set<T>& points, const parameter_info<T>& arg1)$/;"	f	class:boost::math::tools::test_data	signature:(std::set<T>& points, const parameter_info<T>& arg1)
boost::math::tools::test_data::difference_type	/usr/include/boost/math/tools/test_data.hpp	/^   typedef typename container_type::difference_type difference_type;$/;"	t	class:boost::math::tools::test_data	access:public
boost::math::tools::test_data::empty	/usr/include/boost/math/tools/test_data.hpp	/^   bool empty()const{ return m_data.empty(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:() const
boost::math::tools::test_data::end	/usr/include/boost/math/tools/test_data.hpp	/^   const_iterator end()const { return m_data.end(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:() const
boost::math::tools::test_data::end	/usr/include/boost/math/tools/test_data.hpp	/^   iterator end() { return m_data.end(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:()
boost::math::tools::test_data::extern_val	/usr/include/boost/math/tools/test_data.hpp	/^   static float extern_val;$/;"	m	class:boost::math::tools::test_data	access:private
boost::math::tools::test_data::extern_val	/usr/include/boost/math/tools/test_data.hpp	/^float test_data<T>::extern_val = 0;$/;"	m	class:boost::math::tools::test_data
boost::math::tools::test_data::insert	/usr/include/boost/math/tools/test_data.hpp	/^   test_data& insert(F func, const parameter_info<T>& arg1)$/;"	f	class:boost::math::tools::test_data	access:public	signature:(F func, const parameter_info<T>& arg1)
boost::math::tools::test_data::insert	/usr/include/boost/math/tools/test_data.hpp	/^   test_data& insert(F func, const parameter_info<T>& arg1, const parameter_info<T>& arg2)$/;"	f	class:boost::math::tools::test_data	access:public	signature:(F func, const parameter_info<T>& arg1, const parameter_info<T>& arg2)
boost::math::tools::test_data::insert	/usr/include/boost/math/tools/test_data.hpp	/^   test_data& insert(F func, const parameter_info<T>& arg1, const parameter_info<T>& arg2, const parameter_info<T>& arg3)$/;"	f	class:boost::math::tools::test_data	access:public	signature:(F func, const parameter_info<T>& arg1, const parameter_info<T>& arg2, const parameter_info<T>& arg3)
boost::math::tools::test_data::iterator	/usr/include/boost/math/tools/test_data.hpp	/^   typedef typename container_type::iterator iterator;$/;"	t	class:boost::math::tools::test_data	access:public
boost::math::tools::test_data::m_data	/usr/include/boost/math/tools/test_data.hpp	/^   std::set<row_type> m_data;$/;"	m	class:boost::math::tools::test_data	access:private
boost::math::tools::test_data::max_size	/usr/include/boost/math/tools/test_data.hpp	/^   size_type max_size()const{ return m_data.max_size(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:() const
boost::math::tools::test_data::operator !=	/usr/include/boost/math/tools/test_data.hpp	/^   bool operator!=(const test_data& d)const{ return m_data != d.m_data; }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(const test_data& d) const
boost::math::tools::test_data::operator <	/usr/include/boost/math/tools/test_data.hpp	/^   bool operator < (const test_data& dat)const{ return m_data < dat.m_data; }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(const test_data& dat) const
boost::math::tools::test_data::operator <=	/usr/include/boost/math/tools/test_data.hpp	/^   bool operator <= (const test_data& dat)const{ return m_data <= dat.m_data; }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(const test_data& dat) const
boost::math::tools::test_data::operator ==	/usr/include/boost/math/tools/test_data.hpp	/^   bool operator==(const test_data& d)const{ return m_data == d.m_data; }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(const test_data& d) const
boost::math::tools::test_data::operator >	/usr/include/boost/math/tools/test_data.hpp	/^   bool operator > (const test_data& dat)const{ return m_data > dat.m_data; }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(const test_data& dat) const
boost::math::tools::test_data::operator >=	/usr/include/boost/math/tools/test_data.hpp	/^   bool operator >= (const test_data& dat)const{ return m_data >= dat.m_data; }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(const test_data& dat) const
boost::math::tools::test_data::reference	/usr/include/boost/math/tools/test_data.hpp	/^   typedef typename container_type::reference reference;$/;"	t	class:boost::math::tools::test_data	access:public
boost::math::tools::test_data::row_type	/usr/include/boost/math/tools/test_data.hpp	/^   typedef std::vector<T> row_type;$/;"	t	class:boost::math::tools::test_data	access:public
boost::math::tools::test_data::size	/usr/include/boost/math/tools/test_data.hpp	/^   size_type size()const{ return m_data.size(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:() const
boost::math::tools::test_data::size_type	/usr/include/boost/math/tools/test_data.hpp	/^   typedef typename container_type::size_type size_type;$/;"	t	class:boost::math::tools::test_data	access:public
boost::math::tools::test_data::swap	/usr/include/boost/math/tools/test_data.hpp	/^   void swap(test_data& other){ m_data.swap(other.m_data); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(test_data& other)
boost::math::tools::test_data::test_data	/usr/include/boost/math/tools/test_data.hpp	/^   test_data(){}$/;"	f	class:boost::math::tools::test_data	access:public	signature:()
boost::math::tools::test_data::test_data	/usr/include/boost/math/tools/test_data.hpp	/^   test_data(F func, const parameter_info<T>& arg1)$/;"	f	class:boost::math::tools::test_data	access:public	signature:(F func, const parameter_info<T>& arg1)
boost::math::tools::test_data::truncate_to_float	/usr/include/boost/math/tools/test_data.hpp	/^   static float truncate_to_float(float c){ return truncate_to_float(&c); }$/;"	f	class:boost::math::tools::test_data	access:private	signature:(float c)
boost::math::tools::test_data::truncate_to_float	/usr/include/boost/math/tools/test_data.hpp	/^   static float truncate_to_float(float const * pf);$/;"	p	class:boost::math::tools::test_data	access:private	signature:(float const * pf)
boost::math::tools::test_data::truncate_to_float	/usr/include/boost/math/tools/test_data.hpp	/^inline float test_data<T>::truncate_to_float(float const * pf)$/;"	f	class:boost::math::tools::test_data	signature:(float const * pf)
boost::math::tools::test_data::value_type	/usr/include/boost/math/tools/test_data.hpp	/^   typedef row_type value_type;$/;"	t	class:boost::math::tools::test_data	access:public
boost::math::tools::test_hetero	/usr/include/boost/math/tools/test.hpp	/^test_result<Real> test_hetero(const A& a, F1 test_func, F2 expect_func)$/;"	f	namespace:boost::math::tools	signature:(const A& a, F1 test_func, F2 expect_func)
boost::math::tools::test_result	/usr/include/boost/math/tools/test.hpp	/^struct test_result$/;"	s	namespace:boost::math::tools
boost::math::tools::test_result::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tools/test.hpp	/^   T max BOOST_PREVENT_MACRO_SUBSTITUTION()const{ return (stat.max)(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
boost::math::tools::test_result::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tools/test.hpp	/^   T min BOOST_PREVENT_MACRO_SUBSTITUTION()const{ return (stat.min)(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
boost::math::tools::test_result::add	/usr/include/boost/math/tools/test.hpp	/^   void add(const T& point){ stat.add(point); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:(const T& point)
boost::math::tools::test_result::count	/usr/include/boost/math/tools/test.hpp	/^   boost::uintmax_t count()const{ return stat.count(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
boost::math::tools::test_result::mean	/usr/include/boost/math/tools/test.hpp	/^   T mean()const{ return stat.mean(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
boost::math::tools::test_result::operator +=	/usr/include/boost/math/tools/test.hpp	/^   test_result& operator+=(const test_result& t)$/;"	f	struct:boost::math::tools::test_result	access:public	signature:(const test_result& t)
boost::math::tools::test_result::rms	/usr/include/boost/math/tools/test.hpp	/^   T rms()const{ return stat.rms(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
boost::math::tools::test_result::set_worst	/usr/include/boost/math/tools/test.hpp	/^   void set_worst(int i){ worst_case = i; }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:(int i)
boost::math::tools::test_result::stat	/usr/include/boost/math/tools/test.hpp	/^   boost::math::tools::stats<T> stat;   \/\/ Statistics for the test.$/;"	m	struct:boost::math::tools::test_result	access:private
boost::math::tools::test_result::test_result	/usr/include/boost/math/tools/test.hpp	/^   test_result() { worst_case = 0; }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:()
boost::math::tools::test_result::total	/usr/include/boost/math/tools/test.hpp	/^   T total()const{ return stat.total(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
boost::math::tools::test_result::variance	/usr/include/boost/math/tools/test.hpp	/^   T variance()const{ return stat.variance(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
boost::math::tools::test_result::variance1	/usr/include/boost/math/tools/test.hpp	/^   T variance1()const{ return stat.variance1(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
boost::math::tools::test_result::worst	/usr/include/boost/math/tools/test.hpp	/^   unsigned worst()const{ return worst_case; }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
boost::math::tools::test_result::worst_case	/usr/include/boost/math/tools/test.hpp	/^   unsigned worst_case;                 \/\/ Index of the worst case test.$/;"	m	struct:boost::math::tools::test_result	access:private
boost::math::tools::toms748_solve	/usr/include/boost/math/tools/toms748_solve.hpp	/^inline std::pair<T, T> toms748_solve(F f, const T& ax, const T& bx, Tol tol, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, const T& ax, const T& bx, Tol tol, boost::uintmax_t& max_iter)
boost::math::tools::toms748_solve	/usr/include/boost/math/tools/toms748_solve.hpp	/^inline std::pair<T, T> toms748_solve(F f, const T& ax, const T& bx, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)$/;"	f	namespace:boost::math::tools	signature:(F f, const T& ax, const T& bx, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)
boost::math::tools::toms748_solve	/usr/include/boost/math/tools/toms748_solve.hpp	/^inline std::pair<T, T> toms748_solve(F f, const T& ax, const T& bx, const T& fax, const T& fbx, Tol tol, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, const T& ax, const T& bx, const T& fax, const T& fbx, Tol tol, boost::uintmax_t& max_iter)
boost::math::tools::toms748_solve	/usr/include/boost/math/tools/toms748_solve.hpp	/^std::pair<T, T> toms748_solve(F f, const T& ax, const T& bx, const T& fax, const T& fbx, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)$/;"	f	namespace:boost::math::tools	signature:(F f, const T& ax, const T& bx, const T& fax, const T& fbx, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)
boost::math::tools::write_code	/usr/include/boost/math/tools/test_data.hpp	/^std::ostream& write_code(std::ostream& os,$/;"	f	namespace:boost::math::tools	signature:(std::ostream& os, const test_data<T>& data, const char* name)
boost::math::tools::write_csv	/usr/include/boost/math/tools/test_data.hpp	/^inline std::basic_ostream<charT, traits>& write_csv(std::basic_ostream<charT, traits>& os,$/;"	f	namespace:boost::math::tools	signature:(std::basic_ostream<charT, traits>& os, const test_data<T>& data)
boost::math::tools::write_csv	/usr/include/boost/math/tools/test_data.hpp	/^std::basic_ostream<charT, traits>& write_csv(std::basic_ostream<charT, traits>& os,$/;"	f	namespace:boost::math::tools	signature:(std::basic_ostream<charT, traits>& os, const test_data<T>& data, const charT* separator)
boost::math::tr1	/usr/include/boost/math/tr1.hpp	/^namespace boost{ namespace math{ namespace tr1{ extern "C"{$/;"	n	namespace:boost::math
boost::math::tr1	/usr/include/boost/math/tr1.hpp	/^namespace boost{ namespace math{ namespace tr1{$/;"	n	namespace:boost::math
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline ::boost::long_long_type llround BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline ::boost::long_long_type llround BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline ::boost::long_long_type llround BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline ::boost::long_long_type llround BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline ::boost::long_long_type llroundf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline ::boost::long_long_type llroundl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double acosh BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double asinh BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double assoc_laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, unsigned m, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, unsigned m, double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double assoc_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double atanh BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double beta BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double cbrt BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double comp_ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(double k)$/;"	f	namespace:boost::math::tr1	signature:(double k)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double copysign BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double cyl_bessel_i BOOST_PREVENT_MACRO_SUBSTITUTION(double nu, double x)$/;"	f	namespace:boost::math::tr1	signature:(double nu, double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double cyl_bessel_j BOOST_PREVENT_MACRO_SUBSTITUTION(double nu, double x)$/;"	f	namespace:boost::math::tr1	signature:(double nu, double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double cyl_bessel_k BOOST_PREVENT_MACRO_SUBSTITUTION(double nu, double x)$/;"	f	namespace:boost::math::tr1	signature:(double nu, double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double cyl_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(double nu, double x)$/;"	f	namespace:boost::math::tr1	signature:(double nu, double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(double k, double phi)$/;"	f	namespace:boost::math::tr1	signature:(double k, double phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double ellint_2 BOOST_PREVENT_MACRO_SUBSTITUTION(double k, double phi)$/;"	f	namespace:boost::math::tr1	signature:(double k, double phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double ellint_3 BOOST_PREVENT_MACRO_SUBSTITUTION(double k, double nu, double phi)$/;"	f	namespace:boost::math::tr1	signature:(double k, double nu, double phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double erf BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double erfc BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double expint BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double expm1 BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double fmax BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double fmin BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double hermite BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double hypot BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double lgamma BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double log1p BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double nextafter BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double nexttoward BOOST_PREVENT_MACRO_SUBSTITUTION(double x, double y)$/;"	f	namespace:boost::math::tr1	signature:(double x, double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double riemann_zeta BOOST_PREVENT_MACRO_SUBSTITUTION(double z)$/;"	f	namespace:boost::math::tr1	signature:(double z)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double round BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double sph_bessel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double sph_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, double theta)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, double theta)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double sph_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double tgamma BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline double trunc BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float acosh BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float acoshf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float asinh BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float asinhf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float assoc_laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, unsigned m, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, unsigned m, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float assoc_laguerref BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, unsigned m, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, unsigned m, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float assoc_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float assoc_legendref BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float atanh BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float atanhf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float beta BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float betaf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cbrt BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cbrtf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float comp_ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(float k)$/;"	f	namespace:boost::math::tr1	signature:(float k)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float comp_ellint_1f BOOST_PREVENT_MACRO_SUBSTITUTION(float k)$/;"	f	namespace:boost::math::tr1	signature:(float k)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float copysign BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float copysignf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_bessel_i BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_bessel_if BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_bessel_j BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_bessel_jf BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_bessel_k BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_bessel_kf BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float cyl_neumannf BOOST_PREVENT_MACRO_SUBSTITUTION(float nu, float x)$/;"	f	namespace:boost::math::tr1	signature:(float nu, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(float k, float phi)$/;"	f	namespace:boost::math::tr1	signature:(float k, float phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float ellint_1f BOOST_PREVENT_MACRO_SUBSTITUTION(float k, float phi)$/;"	f	namespace:boost::math::tr1	signature:(float k, float phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float ellint_2 BOOST_PREVENT_MACRO_SUBSTITUTION(float k, float phi)$/;"	f	namespace:boost::math::tr1	signature:(float k, float phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float ellint_2f BOOST_PREVENT_MACRO_SUBSTITUTION(float k, float phi)$/;"	f	namespace:boost::math::tr1	signature:(float k, float phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float ellint_3 BOOST_PREVENT_MACRO_SUBSTITUTION(float k, float nu, float phi)$/;"	f	namespace:boost::math::tr1	signature:(float k, float nu, float phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float ellint_3f BOOST_PREVENT_MACRO_SUBSTITUTION(float k, float nu, float phi)$/;"	f	namespace:boost::math::tr1	signature:(float k, float nu, float phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float erf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float erfc BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float erfcf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float erff BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float expint BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float expintf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float expm1 BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float expm1f BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float fmax BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float fmaxf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float fmin BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float fminf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float hermite BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float hermitef BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float hypot BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float hypotf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float laguerref BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float legendref BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float lgamma BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float lgammaf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float log1p BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float log1pf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float nextafter BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float nextafterf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float nexttoward BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float nexttowardf BOOST_PREVENT_MACRO_SUBSTITUTION(float x, float y)$/;"	f	namespace:boost::math::tr1	signature:(float x, float y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float riemann_zeta BOOST_PREVENT_MACRO_SUBSTITUTION(float z)$/;"	f	namespace:boost::math::tr1	signature:(float z)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float riemann_zetaf BOOST_PREVENT_MACRO_SUBSTITUTION(float z)$/;"	f	namespace:boost::math::tr1	signature:(float z)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float round BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float roundf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float sph_bessel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float sph_besself BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float sph_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, float theta)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, float theta)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float sph_legendref BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, float theta)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, float theta)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float sph_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float sph_neumannf BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, float x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float tgamma BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float tgammaf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float trunc BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline float truncf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double acosh BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double acoshl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double asinh BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double asinhl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double assoc_laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, unsigned m, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, unsigned m, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double assoc_laguerrel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, unsigned m, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, unsigned m, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double assoc_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double assoc_legendrel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double atanh BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double atanhl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double beta BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double betal BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cbrt BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cbrtl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double comp_ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(long double k)$/;"	f	namespace:boost::math::tr1	signature:(long double k)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double comp_ellint_1l BOOST_PREVENT_MACRO_SUBSTITUTION(long double k)$/;"	f	namespace:boost::math::tr1	signature:(long double k)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double copysign BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double copysignl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_bessel_i BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_bessel_il BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_bessel_j BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_bessel_jl BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_bessel_k BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_bessel_kl BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double cyl_neumannl BOOST_PREVENT_MACRO_SUBSTITUTION(long double nu, long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double nu, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(long double k, long double phi)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double ellint_1l BOOST_PREVENT_MACRO_SUBSTITUTION(long double k, long double phi)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double ellint_2 BOOST_PREVENT_MACRO_SUBSTITUTION(long double k, long double phi)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double ellint_2l BOOST_PREVENT_MACRO_SUBSTITUTION(long double k, long double phi)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double ellint_3 BOOST_PREVENT_MACRO_SUBSTITUTION(long double k, long double nu, long double phi)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double nu, long double phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double ellint_3l BOOST_PREVENT_MACRO_SUBSTITUTION(long double k, long double nu, long double phi)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double nu, long double phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double erf BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double erfc BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double erfcl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double erfl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double expint BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double expintl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double expm1 BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double expm1l BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double fmax BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double fmaxl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double fmin BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double fminl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double hermite BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double hermitel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double hypot BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double hypotl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double laguerrel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double legendrel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double lgamma BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double lgammal BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double log1p BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double log1pl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double nextafter BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double nextafterl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double nexttoward BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double nexttowardl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x, long double y)$/;"	f	namespace:boost::math::tr1	signature:(long double x, long double y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double riemann_zeta BOOST_PREVENT_MACRO_SUBSTITUTION(long double z)$/;"	f	namespace:boost::math::tr1	signature:(long double z)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double riemann_zetal BOOST_PREVENT_MACRO_SUBSTITUTION(long double z)$/;"	f	namespace:boost::math::tr1	signature:(long double z)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double round BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double roundl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double sph_bessel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double sph_bessell BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double sph_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, long double theta)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, long double theta)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double sph_legendrel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, long double theta)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, long double theta)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double sph_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double sph_neumannl BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, long double x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double tgamma BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double tgammal BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double trunc BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long double truncl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long lround BOOST_PREVENT_MACRO_SUBSTITUTION(double x)$/;"	f	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long lround BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long lround BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long lroundf BOOST_PREVENT_MACRO_SUBSTITUTION(float x)$/;"	f	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline long lroundl BOOST_PREVENT_MACRO_SUBSTITUTION(long double x)$/;"	f	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2, T3>::type ellint_3 BOOST_PREVENT_MACRO_SUBSTITUTION(T1 k, T2 nu, T3 phi)$/;"	f	namespace:boost::math::tr1	signature:(T1 k, T2 nu, T3 phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type beta BOOST_PREVENT_MACRO_SUBSTITUTION(T2 x, T1 y)$/;"	f	namespace:boost::math::tr1	signature:(T2 x, T1 y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type copysign BOOST_PREVENT_MACRO_SUBSTITUTION(T1 x, T2 y)$/;"	f	namespace:boost::math::tr1	signature:(T1 x, T2 y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type cyl_bessel_i BOOST_PREVENT_MACRO_SUBSTITUTION(T1 nu, T2 x)$/;"	f	namespace:boost::math::tr1	signature:(T1 nu, T2 x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type cyl_bessel_j BOOST_PREVENT_MACRO_SUBSTITUTION(T1 nu, T2 x)$/;"	f	namespace:boost::math::tr1	signature:(T1 nu, T2 x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type cyl_bessel_k BOOST_PREVENT_MACRO_SUBSTITUTION(T1 nu, T2 x)$/;"	f	namespace:boost::math::tr1	signature:(T1 nu, T2 x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type cyl_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(T1 nu, T2 x)$/;"	f	namespace:boost::math::tr1	signature:(T1 nu, T2 x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(T1 k, T2 phi)$/;"	f	namespace:boost::math::tr1	signature:(T1 k, T2 phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_2 BOOST_PREVENT_MACRO_SUBSTITUTION(T1 k, T2 phi)$/;"	f	namespace:boost::math::tr1	signature:(T1 k, T2 phi)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type fmax BOOST_PREVENT_MACRO_SUBSTITUTION(T1 x, T2 y)$/;"	f	namespace:boost::math::tr1	signature:(T1 x, T2 y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type fmin BOOST_PREVENT_MACRO_SUBSTITUTION(T1 x, T2 y)$/;"	f	namespace:boost::math::tr1	signature:(T1 x, T2 y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type hypot BOOST_PREVENT_MACRO_SUBSTITUTION(T1 x, T2 y)$/;"	f	namespace:boost::math::tr1	signature:(T1 x, T2 y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type nextafter BOOST_PREVENT_MACRO_SUBSTITUTION(T1 x, T2 y)$/;"	f	namespace:boost::math::tr1	signature:(T1 x, T2 y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type nexttoward BOOST_PREVENT_MACRO_SUBSTITUTION(T1 x, T2 y)$/;"	f	namespace:boost::math::tr1	signature:(T1 x, T2 y)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type acosh BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type asinh BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type assoc_laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, unsigned m, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, unsigned m, T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type assoc_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type atanh BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type cbrt BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type comp_ellint_1 BOOST_PREVENT_MACRO_SUBSTITUTION(T k)$/;"	f	namespace:boost::math::tr1	signature:(T k)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type erf BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type erfc BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type expint BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type expm1 BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type hermite BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type laguerre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type lgamma BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type log1p BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type riemann_zeta BOOST_PREVENT_MACRO_SUBSTITUTION(T z)$/;"	f	namespace:boost::math::tr1	signature:(T z)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type round BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type sph_bessel BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type sph_legendre BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned l, unsigned m, T theta)$/;"	f	namespace:boost::math::tr1	signature:(unsigned l, unsigned m, T theta)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type sph_neumann BOOST_PREVENT_MACRO_SUBSTITUTION(unsigned n, T x)$/;"	f	namespace:boost::math::tr1	signature:(unsigned n, T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type tgamma BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type trunc BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/math/tr1.hpp	/^long lround BOOST_PREVENT_MACRO_SUBSTITUTION(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isfinite<double> NO_MACRO_EXPAND(double x);$/;"	p	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isfinite<float> NO_MACRO_EXPAND(float x);$/;"	p	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isfinite<long double> NO_MACRO_EXPAND(long double x);$/;"	p	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isinf<double> NO_MACRO_EXPAND(double x);$/;"	p	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isinf<float> NO_MACRO_EXPAND(float x);$/;"	p	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isinf<long double> NO_MACRO_EXPAND(long double x);$/;"	p	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isnan<double> NO_MACRO_EXPAND(double x);$/;"	p	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isnan<float> NO_MACRO_EXPAND(float x);$/;"	p	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isnan<long double> NO_MACRO_EXPAND(long double x);$/;"	p	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isnormal<double> NO_MACRO_EXPAND(double x);$/;"	p	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isnormal<float> NO_MACRO_EXPAND(float x);$/;"	p	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL isnormal<long double> NO_MACRO_EXPAND(long double x);$/;"	p	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL signbit<double> NO_MACRO_EXPAND(double x);$/;"	p	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL signbit<float> NO_MACRO_EXPAND(float x);$/;"	p	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> bool BOOST_MATH_TR1_DECL signbit<long double> NO_MACRO_EXPAND(long double x);$/;"	p	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> int BOOST_MATH_TR1_DECL fpclassify<double> NO_MACRO_EXPAND(double x);$/;"	p	namespace:boost::math::tr1	signature:(double x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> int BOOST_MATH_TR1_DECL fpclassify<float> NO_MACRO_EXPAND(float x);$/;"	p	namespace:boost::math::tr1	signature:(float x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<> int BOOST_MATH_TR1_DECL fpclassify<long double> NO_MACRO_EXPAND(long double x);$/;"	p	namespace:boost::math::tr1	signature:(long double x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<class T> bool isfinite NO_MACRO_EXPAND(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<class T> bool isinf NO_MACRO_EXPAND(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<class T> bool isnan NO_MACRO_EXPAND(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<class T> bool isnormal NO_MACRO_EXPAND(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<class T> bool signbit NO_MACRO_EXPAND(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::NO_MACRO_EXPAND	/usr/include/boost/math/tr1.hpp	/^template<class T> int fpclassify NO_MACRO_EXPAND(T x)$/;"	f	namespace:boost::math::tr1	signature:(T x)
boost::math::tr1::comp_ellint_2	/usr/include/boost/math/tr1.hpp	/^inline double comp_ellint_2(double k)$/;"	f	namespace:boost::math::tr1	signature:(double k)
boost::math::tr1::comp_ellint_2	/usr/include/boost/math/tr1.hpp	/^inline float comp_ellint_2(float k)$/;"	f	namespace:boost::math::tr1	signature:(float k)
boost::math::tr1::comp_ellint_2	/usr/include/boost/math/tr1.hpp	/^inline long double comp_ellint_2(long double k)$/;"	f	namespace:boost::math::tr1	signature:(long double k)
boost::math::tr1::comp_ellint_2	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type comp_ellint_2(T k)$/;"	f	namespace:boost::math::tr1	signature:(T k)
boost::math::tr1::comp_ellint_2f	/usr/include/boost/math/tr1.hpp	/^inline float comp_ellint_2f(float k)$/;"	f	namespace:boost::math::tr1	signature:(float k)
boost::math::tr1::comp_ellint_2l	/usr/include/boost/math/tr1.hpp	/^inline long double comp_ellint_2l(long double k)$/;"	f	namespace:boost::math::tr1	signature:(long double k)
boost::math::tr1::comp_ellint_3	/usr/include/boost/math/tr1.hpp	/^inline double comp_ellint_3(double k, double nu)$/;"	f	namespace:boost::math::tr1	signature:(double k, double nu)
boost::math::tr1::comp_ellint_3	/usr/include/boost/math/tr1.hpp	/^inline float comp_ellint_3(float k, float nu)$/;"	f	namespace:boost::math::tr1	signature:(float k, float nu)
boost::math::tr1::comp_ellint_3	/usr/include/boost/math/tr1.hpp	/^inline long double comp_ellint_3(long double k, long double nu)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double nu)
boost::math::tr1::comp_ellint_3	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type comp_ellint_3(T1 k, T2 nu)$/;"	f	namespace:boost::math::tr1	signature:(T1 k, T2 nu)
boost::math::tr1::comp_ellint_3f	/usr/include/boost/math/tr1.hpp	/^inline float comp_ellint_3f(float k, float nu)$/;"	f	namespace:boost::math::tr1	signature:(float k, float nu)
boost::math::tr1::comp_ellint_3l	/usr/include/boost/math/tr1.hpp	/^inline long double comp_ellint_3l(long double k, long double nu)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double nu)
boost::math::tr1::double_t	/usr/include/boost/math/tr1.hpp	/^typedef double double_t;$/;"	t
boost::math::tr1::float_t	/usr/include/boost/math/tr1.hpp	/^typedef float float_t;$/;"	t
boost::math::trap_infinity	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^    const int trap_infinity = 0x4; \/*!< put facet will throw an exception of type std::ios_base::failure$/;"	m	namespace:boost::math
boost::math::trap_nan	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^    const int trap_nan = 0x8; \/*!< put facet will throw an exception of type std::ios_base::failure$/;"	m	namespace:boost::math
boost::math::triangular	/usr/include/boost/math/distributions/triangular.hpp	/^  typedef triangular_distribution<double> triangular;$/;"	t	namespace:boost::math
boost::math::triangular_distribution	/usr/include/boost/math/distributions/triangular.hpp	/^  class triangular_distribution$/;"	c	namespace:boost::math
boost::math::triangular_distribution::lower	/usr/include/boost/math/distributions/triangular.hpp	/^    RealType lower()const$/;"	f	class:boost::math::triangular_distribution	access:public	signature:() const
boost::math::triangular_distribution::m_lower	/usr/include/boost/math/distributions/triangular.hpp	/^    RealType m_lower;  \/\/ distribution lower aka a$/;"	m	class:boost::math::triangular_distribution	access:private
boost::math::triangular_distribution::m_mode	/usr/include/boost/math/distributions/triangular.hpp	/^    RealType m_mode;  \/\/ distribution mode aka c$/;"	m	class:boost::math::triangular_distribution	access:private
boost::math::triangular_distribution::m_upper	/usr/include/boost/math/distributions/triangular.hpp	/^    RealType m_upper;  \/\/ distribution upper aka b$/;"	m	class:boost::math::triangular_distribution	access:private
boost::math::triangular_distribution::mode	/usr/include/boost/math/distributions/triangular.hpp	/^    RealType mode()const$/;"	f	class:boost::math::triangular_distribution	access:public	signature:() const
boost::math::triangular_distribution::policy_type	/usr/include/boost/math/distributions/triangular.hpp	/^    typedef Policy policy_type;$/;"	t	class:boost::math::triangular_distribution	access:public
boost::math::triangular_distribution::triangular_distribution	/usr/include/boost/math/distributions/triangular.hpp	/^    triangular_distribution(RealType lower = -1, RealType mode = 0, RealType upper = 1)$/;"	f	class:boost::math::triangular_distribution	access:public	signature:(RealType lower = -1, RealType mode = 0, RealType upper = 1)
boost::math::triangular_distribution::upper	/usr/include/boost/math/distributions/triangular.hpp	/^    RealType upper()const$/;"	f	class:boost::math::triangular_distribution	access:public	signature:() const
boost::math::triangular_distribution::value_type	/usr/include/boost/math/distributions/triangular.hpp	/^    typedef RealType value_type;$/;"	t	class:boost::math::triangular_distribution	access:public
boost::math::trunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T trunc(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
boost::math::trunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T trunc(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::trunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline T trunc(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
boost::math::trunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline T trunc(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
boost::math::unchecked_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^inline T unchecked_factorial(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(T))$/;"	f	namespace:boost::math	signature:(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(T))
boost::math::unchecked_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^inline double unchecked_factorial<double>(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(double))$/;"	f	namespace:boost::math	signature:(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(double))
boost::math::unchecked_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^inline float unchecked_factorial<float>(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(float))$/;"	f	namespace:boost::math	signature:(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(float))
boost::math::unchecked_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^inline long double unchecked_factorial<long double>(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(long double))$/;"	f	namespace:boost::math	signature:(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(long double))
boost::math::unchecked_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   RT unchecked_factorial(unsigned int BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(RT)); $/;"	p	namespace:boost::math	signature:(unsigned int BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(RT))
boost::math::uniform	/usr/include/boost/math/distributions/uniform.hpp	/^  typedef uniform_distribution<double> uniform;$/;"	t	namespace:boost::math
boost::math::uniform_distribution	/usr/include/boost/math/distributions/uniform.hpp	/^  class uniform_distribution$/;"	c	namespace:boost::math
boost::math::uniform_distribution::lower	/usr/include/boost/math/distributions/uniform.hpp	/^    RealType lower()const$/;"	f	class:boost::math::uniform_distribution	access:public	signature:() const
boost::math::uniform_distribution::m_lower	/usr/include/boost/math/distributions/uniform.hpp	/^    RealType m_lower;  \/\/ distribution lower aka a.$/;"	m	class:boost::math::uniform_distribution	access:private
boost::math::uniform_distribution::m_upper	/usr/include/boost/math/distributions/uniform.hpp	/^    RealType m_upper;  \/\/ distribution upper aka b.$/;"	m	class:boost::math::uniform_distribution	access:private
boost::math::uniform_distribution::policy_type	/usr/include/boost/math/distributions/uniform.hpp	/^    typedef Policy policy_type;$/;"	t	class:boost::math::uniform_distribution	access:public
boost::math::uniform_distribution::uniform_distribution	/usr/include/boost/math/distributions/uniform.hpp	/^    uniform_distribution(RealType lower = 0, RealType upper = 1) \/\/ Constructor.$/;"	f	class:boost::math::uniform_distribution	access:public	signature:(RealType lower = 0, RealType upper = 1)
boost::math::uniform_distribution::upper	/usr/include/boost/math/distributions/uniform.hpp	/^    RealType upper()const$/;"	f	class:boost::math::uniform_distribution	access:public	signature:() const
boost::math::uniform_distribution::value_type	/usr/include/boost/math/distributions/uniform.hpp	/^    typedef RealType value_type;$/;"	t	class:boost::math::uniform_distribution	access:public
boost::math::unreal	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        unreal(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
boost::math::unreal	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    unreal(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
boost::math::variance	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType variance(const bernoulli_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType variance(const beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType variance(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType variance(const cauchy_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& )
boost::math::variance	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType variance(const chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type variance(const Distribution& dist)$/;"	f	namespace:boost::math	signature:(const Distribution& dist)
boost::math::variance	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^typename Distribution::value_type variance(const Distribution& dist);$/;"	p	namespace:boost::math	signature:(const Distribution& dist)
boost::math::variance	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType variance(const fisher_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType variance(const gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType variance(const geometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType variance(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType variance(const inverse_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType variance(const inverse_gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType variance(const logistic_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType variance(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType variance(const negative_binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType variance(const non_central_beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType variance(const non_central_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType variance(const non_central_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType variance(const non_central_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType variance(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType variance(const poisson_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType variance(const rayleigh_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType variance(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType variance(const students_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType variance(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType variance(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
boost::math::variance	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType variance(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
boost::math::weibull	/usr/include/boost/math/distributions/weibull.hpp	/^typedef weibull_distribution<double> weibull;$/;"	t	namespace:boost::math
boost::math::weibull_distribution	/usr/include/boost/math/distributions/weibull.hpp	/^class weibull_distribution$/;"	c	namespace:boost::math
boost::math::weibull_distribution::m_scale	/usr/include/boost/math/distributions/weibull.hpp	/^   RealType m_scale;     \/\/ distribution scale$/;"	m	class:boost::math::weibull_distribution	access:private
boost::math::weibull_distribution::m_shape	/usr/include/boost/math/distributions/weibull.hpp	/^   RealType m_shape;     \/\/ distribution shape$/;"	m	class:boost::math::weibull_distribution	access:private
boost::math::weibull_distribution::policy_type	/usr/include/boost/math/distributions/weibull.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::weibull_distribution	access:public
boost::math::weibull_distribution::scale	/usr/include/boost/math/distributions/weibull.hpp	/^   RealType scale()const$/;"	f	class:boost::math::weibull_distribution	access:public	signature:() const
boost::math::weibull_distribution::shape	/usr/include/boost/math/distributions/weibull.hpp	/^   RealType shape()const$/;"	f	class:boost::math::weibull_distribution	access:public	signature:() const
boost::math::weibull_distribution::value_type	/usr/include/boost/math/distributions/weibull.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::weibull_distribution	access:public
boost::math::weibull_distribution::weibull_distribution	/usr/include/boost/math/distributions/weibull.hpp	/^   weibull_distribution(RealType shape, RealType scale = 1)$/;"	f	class:boost::math::weibull_distribution	access:public	signature:(RealType shape, RealType scale = 1)
boost::math::zeta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type zeta(T s);$/;"	p	namespace:boost::math	signature:(T s)
boost::math::zeta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type zeta(T s, const Policy&);$/;"	p	namespace:boost::math	signature:(T s, const Policy&)
boost::math::zeta	/usr/include/boost/math/special_functions/zeta.hpp	/^inline typename tools::promote_args<T>::type zeta(T s)$/;"	f	namespace:boost::math	signature:(T s)
boost::math::zeta	/usr/include/boost/math/special_functions/zeta.hpp	/^inline typename tools::promote_args<T>::type zeta(T s, const Policy&)$/;"	f	namespace:boost::math	signature:(T s, const Policy&)
boost::math_detail	/usr/include/boost/math/special_functions/fpclassify.hpp	/^namespace math_detail{$/;"	n	namespace:boost
boost::math_detail::is_nan_helper	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool is_nan_helper(T t, const boost::true_type&)$/;"	f	namespace:boost::math_detail	signature:(T t, const boost::true_type&)
boost::math_detail::is_nan_helper	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool is_nan_helper(T, const boost::false_type&)$/;"	f	namespace:boost::math_detail	signature:(T, const boost::false_type&)
bracket	/usr/include/boost/math/tools/toms748_solve.hpp	/^void bracket(F f, T& a, T& b, T c, T& fa, T& fb, T& d, T& fd)$/;"	f	namespace:boost::math::tools::detail	signature:(F f, T& a, T& b, T c, T& fa, T& fb, T& d, T& fd)
bracket_and_solve_root	/usr/include/boost/math/tools/toms748_solve.hpp	/^inline std::pair<T, T> bracket_and_solve_root(F f, const T& guess, const T& factor, bool rising, Tol tol, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, const T& guess, const T& factor, bool rising, Tol tol, boost::uintmax_t& max_iter)
bracket_and_solve_root	/usr/include/boost/math/tools/toms748_solve.hpp	/^std::pair<T, T> bracket_and_solve_root(F f, const T& guess, T factor, bool rising, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)$/;"	f	namespace:boost::math::tools	signature:(F f, const T& guess, T factor, bool rising, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)
bracket_and_solve_root_01	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         std::pair<T, T> bracket_and_solve_root_01(F f, const T& guess, T factor, bool rising, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(F f, const T& guess, T factor, bool rising, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)
brent_find_minima	/usr/include/boost/math/tools/minima.hpp	/^inline std::pair<T, T> brent_find_minima(F f, T min, T max, int digits)$/;"	f	namespace:boost::math::tools	signature:(F f, T min, T max, int digits)
brent_find_minima	/usr/include/boost/math/tools/minima.hpp	/^std::pair<T, T> brent_find_minima(F f, T min, T max, int bits, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, T min, T max, int bits, boost::uintmax_t& max_iter)
bubble_down_one	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^void bubble_down_one(T* first, T* last, Func f)$/;"	f	namespace:boost::math::detail	signature:(T* first, T* last, Func f)
calculate_result_type	/usr/include/boost/math/tools/test.hpp	/^struct calculate_result_type$/;"	s	namespace:boost::math::tools
call_fmodl	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long double call_fmodl(long double a, long double b)$/;"	f	namespace:boost::math::concepts	signature:(long double a, long double b)
cauchy	/usr/include/boost/math/distributions/cauchy.hpp	/^typedef cauchy_distribution<double> cauchy;$/;"	t	namespace:boost::math
cauchy_distribution	/usr/include/boost/math/distributions/cauchy.hpp	/^   cauchy_distribution(RealType location = 0, RealType scale = 1)$/;"	f	class:boost::math::cauchy_distribution	access:public	signature:(RealType location = 0, RealType scale = 1)
cauchy_distribution	/usr/include/boost/math/distributions/cauchy.hpp	/^class cauchy_distribution$/;"	c	namespace:boost::math
cbrt	/usr/include/boost/math/special_functions/cbrt.hpp	/^inline typename tools::promote_args<T>::type cbrt(T z)$/;"	f	namespace:boost::math	signature:(T z)
cbrt	/usr/include/boost/math/special_functions/cbrt.hpp	/^inline typename tools::promote_args<T>::type cbrt(T z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T z, const Policy& pol)
cbrt	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type cbrt(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
cbrt	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type cbrt(RT z, const Policy&);$/;"	p	namespace:boost::math	signature:(RT z, const Policy&)
cbrt	/usr/include/boost/math/tr1_c_macros.ipp	51;"	d	file:
cbrt	/usr/include/boost/math/tr1_c_macros.ipp	53;"	d	file:
cbrt_imp	/usr/include/boost/math/special_functions/cbrt.hpp	/^T cbrt_imp(T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol)
cbrtf	/usr/include/boost/math/tr1_c_macros.ipp	55;"	d	file:
cbrtf	/usr/include/boost/math/tr1_c_macros.ipp	57;"	d	file:
cbrtl	/usr/include/boost/math/tr1_c_macros.ipp	59;"	d	file:
cbrtl	/usr/include/boost/math/tr1_c_macros.ipp	61;"	d	file:
cdf	/usr/include/boost/math/concepts/distributions.hpp	/^RealType cdf(const complemented2_type<distribution_archetype<RealType>, RealType>& c);$/;"	p	namespace:boost::math::concepts	signature:(const complemented2_type<distribution_archetype<RealType>, RealType>& c)
cdf	/usr/include/boost/math/concepts/distributions.hpp	/^RealType cdf(const distribution_archetype<RealType>& dist, const RealType& x);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType cdf(const bernoulli_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist, const RealType& k)
cdf	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType cdf(const complemented2_type<bernoulli_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<bernoulli_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType cdf(const beta_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType cdf(const complemented2_type<beta_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<beta_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType cdf(const binomial_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist, const RealType& k)
cdf	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType cdf(const complemented2_type<binomial_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<binomial_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType cdf(const cauchy_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType cdf(const complemented2_type<cauchy_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<cauchy_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType cdf(const chi_squared_distribution<RealType, Policy>& dist, const RealType& chi_square)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist, const RealType& chi_square)
cdf	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType cdf(const complemented2_type<chi_squared_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<chi_squared_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type cdf(const Distribution& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const Distribution& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type cdf(const complemented2_type<Distribution, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<Distribution, RealType>& c)
cdf	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType cdf(const complemented2_type<exponential_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<exponential_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType cdf(const exponential_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType cdf(const complemented2_type<extreme_value_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<extreme_value_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType cdf(const extreme_value_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType cdf(const complemented2_type<fisher_f_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<fisher_f_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType cdf(const fisher_f_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType cdf(const complemented2_type<gamma_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<gamma_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType cdf(const gamma_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/geometric.hpp	/^      inline RealType cdf(const complemented2_type<geometric_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<geometric_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType cdf(const geometric_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist, const RealType& k)
cdf	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType cdf(const complemented2_type<hypergeometric_distribution<RealType, Policy>, U>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<hypergeometric_distribution<RealType, Policy>, U>& c)
cdf	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType cdf(const complemented2_type<hypergeometric_distribution<RealType, Policy>, unsigned>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<hypergeometric_distribution<RealType, Policy>, unsigned>& c)
cdf	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType cdf(const hypergeometric_distribution<RealType, Policy>& dist, const U& x)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist, const U& x)
cdf	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType cdf(const hypergeometric_distribution<RealType, Policy>& dist, const unsigned& x)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist, const unsigned& x)
cdf	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType cdf(const complemented2_type<inverse_chi_squared_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<inverse_chi_squared_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType cdf(const inverse_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType cdf(const complemented2_type<inverse_gamma_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<inverse_gamma_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType cdf(const inverse_gamma_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType cdf(const complemented2_type<inverse_gaussian_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<inverse_gaussian_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType cdf(const inverse_gaussian_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType cdf(const complemented2_type<laplace_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<laplace_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType cdf(const laplace_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType cdf(const complemented2_type<logistic_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<logistic_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType cdf(const logistic_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType cdf(const complemented2_type<lognormal_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<lognormal_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType cdf(const lognormal_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      inline RealType cdf(const complemented2_type<negative_binomial_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<negative_binomial_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType cdf(const negative_binomial_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist, const RealType& k)
cdf	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      RealType cdf(const complemented2_type<non_central_beta_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_beta_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      RealType cdf(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      RealType cdf(const complemented2_type<non_central_chi_squared_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_chi_squared_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      RealType cdf(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/non_central_f.hpp	/^      RealType cdf(const complemented2_type<non_central_f_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_f_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/non_central_f.hpp	/^      RealType cdf(const non_central_f_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/non_central_t.hpp	/^      RealType cdf(const complemented2_type<non_central_t_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_t_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/non_central_t.hpp	/^      RealType cdf(const non_central_t_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType cdf(const complemented2_type<normal_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<normal_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType cdf(const normal_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType cdf(const complemented2_type<pareto_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<pareto_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType cdf(const pareto_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/poisson.hpp	/^    RealType cdf(const complemented2_type<poisson_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<poisson_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/poisson.hpp	/^    RealType cdf(const poisson_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist, const RealType& k)
cdf	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType cdf(const complemented2_type<rayleigh_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<rayleigh_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType cdf(const rayleigh_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType cdf(const complemented2_type<skew_normal_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<skew_normal_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType cdf(const skew_normal_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType cdf(const complemented2_type<students_t_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<students_t_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType cdf(const students_t_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/triangular.hpp	/^  RealType cdf(const complemented2_type<triangular_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<triangular_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType cdf(const triangular_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType cdf(const complemented2_type<uniform_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<uniform_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType cdf(const uniform_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType cdf(const complemented2_type<weibull_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<weibull_distribution<RealType, Policy>, RealType>& c)
cdf	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType cdf(const weibull_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist, const RealType& x)
cdf	/usr/include/boost/math/tools/traits.hpp	/^char cdf(const D& ...);$/;"	p	namespace:boost::math::tools::detail	signature:(const D& ....)
cdf_imp	/usr/include/boost/math/distributions/cauchy.hpp	/^RealType cdf_imp(const cauchy_distribution<RealType, Policy>& dist, const RealType& x, bool complement)$/;"	f	namespace:boost::math::detail	signature:(const cauchy_distribution<RealType, Policy>& dist, const RealType& x, bool complement)
ceil	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float ceil(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
ceil	/usr/include/boost/math/bindings/rr.hpp	/^inline RR ceil(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
ceil	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept ceil(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
ceil	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept ceil(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
changesign	/usr/include/boost/math/special_functions/sign.hpp	/^template<class T> T (changesign)(const T& x)$/;"	f	namespace:boost::math	signature:(const T& x)
changesign_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline T (changesign_impl)(T x, generic_tag<false> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<false> const&)
changesign_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline T (changesign_impl)(T x, generic_tag<true> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<true> const&)
changesign_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline T (changesign_impl)(T x, ieee_copy_leading_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_leading_bits_tag const&)
changesign_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline T changesign_impl(T x, ieee_copy_all_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_all_bits_tag const&)
chebyshev	/usr/include/boost/math/tools/polynomial.hpp	/^   std::vector<T> chebyshev()const$/;"	f	class:boost::math::tools::polynomial	access:public	signature:() const
chebyshev_coefficient	/usr/include/boost/math/tools/polynomial.hpp	/^T chebyshev_coefficient(unsigned n, unsigned m)$/;"	f	namespace:boost::math::tools	signature:(unsigned n, unsigned m)
chebyshev_points	/usr/include/boost/math/tools/remez.hpp	/^   vector_type const& chebyshev_points()const$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:() const
check_N	/usr/include/boost/math/distributions/binomial.hpp	/^        inline bool check_N(const char* function, const RealType& N, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::binomial_detail	signature:(const char* function, const RealType& N, RealType* result, const Policy& pol)
check_alpha	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_alpha(const char* function, const RealType& alpha, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& alpha, RealType* result, const Policy& pol)
check_beta	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_beta(const char* function, const RealType& beta, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& beta, RealType* result, const Policy& pol)
check_binary_ops	/usr/include/boost/math/concepts/real_type_concept.hpp	/^   void check_binary_ops(Other o)$/;"	f	struct:boost::math::concepts::RealTypeConcept	access:public	signature:(Other o)
check_denorm	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_denorm(T \/* val *\/, R* \/* result*\/, const char* \/* function *\/, const denorm_error<ignore_error>&){ return false; }$/;"	f	namespace:boost::math::policies::detail	signature:(T , R* , const char* , const denorm_error<ignore_error>&)
check_denorm	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_denorm(T val, R* result, const char* function, const Policy& pol)$/;"	f	namespace:boost::math::policies::detail	signature:(T val, R* result, const char* function, const Policy& pol)
check_denorm	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_denorm(std::complex<T> \/* val *\/, R* \/* result*\/, const char* \/* function *\/, const denorm_error<ignore_error>&){ return false; }$/;"	f	namespace:boost::math::policies::detail	signature:(std::complex<T> , R* , const char* , const denorm_error<ignore_error>&)
check_denorm	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_denorm(std::complex<T> val, R* result, const char* function, const Policy& pol)$/;"	f	namespace:boost::math::policies::detail	signature:(std::complex<T> val, R* result, const char* function, const Policy& pol)
check_df	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_df(const char* function, RealType const& df, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType const& df, RealType* result, const Policy& pol)
check_df_gt0_to_inf	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_df_gt0_to_inf(const char* function, RealType const& df, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType const& df, RealType* result, const Policy& pol)
check_dist	/usr/include/boost/math/distributions/bernoulli.hpp	/^      inline bool check_dist(const char* , const RealType& , RealType* , const Policy& \/* pol *\/, const mpl::false_&)$/;"	f	namespace:boost::math::bernoulli_detail	signature:(const char* , const RealType& , RealType* , const Policy& , const mpl::false_&)
check_dist	/usr/include/boost/math/distributions/bernoulli.hpp	/^      inline bool check_dist(const char* function, const RealType& p, RealType* result, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math::bernoulli_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& )
check_dist	/usr/include/boost/math/distributions/bernoulli.hpp	/^      inline bool check_dist(const char* function, const RealType& p, RealType* result, const Policy& \/* pol *\/, const mpl::true_&)$/;"	f	namespace:boost::math::bernoulli_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& , const mpl::true_&)
check_dist	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_dist(const char* function, const RealType& alpha, const RealType& beta, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& alpha, const RealType& beta, RealType* result, const Policy& pol)
check_dist	/usr/include/boost/math/distributions/binomial.hpp	/^        inline bool check_dist(const char* function, const RealType& N, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::binomial_detail	signature:(const char* function, const RealType& N, const RealType& p, RealType* result, const Policy& pol)
check_dist	/usr/include/boost/math/distributions/geometric.hpp	/^      inline bool check_dist(const char* function, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::geometric_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& pol)
check_dist	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      inline bool check_dist(const char* function, const RealType& r, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::negative_binomial_detail	signature:(const char* function, const RealType& r, const RealType& p, RealType* result, const Policy& pol)
check_dist	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_dist(const char* function, const RealType& mean, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, const RealType& mean, RealType* result, const Policy& pol)
check_dist_and_k	/usr/include/boost/math/distributions/bernoulli.hpp	/^      inline bool check_dist_and_k(const char* function, const RealType& p, RealType k, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::bernoulli_detail	signature:(const char* function, const RealType& p, RealType k, RealType* result, const Policy& pol)
check_dist_and_k	/usr/include/boost/math/distributions/binomial.hpp	/^        inline bool check_dist_and_k(const char* function, const RealType& N, const RealType& p, RealType k, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::binomial_detail	signature:(const char* function, const RealType& N, const RealType& p, RealType k, RealType* result, const Policy& pol)
check_dist_and_k	/usr/include/boost/math/distributions/geometric.hpp	/^      inline bool check_dist_and_k(const char* function,  const RealType& p, RealType k, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::geometric_detail	signature:(const char* function, const RealType& p, RealType k, RealType* result, const Policy& pol)
check_dist_and_k	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      inline bool check_dist_and_k(const char* function, const RealType& r, const RealType& p, RealType k, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::negative_binomial_detail	signature:(const char* function, const RealType& r, const RealType& p, RealType k, RealType* result, const Policy& pol)
check_dist_and_k	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_dist_and_k(const char* function, RealType mean, RealType k, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, RealType mean, RealType k, RealType* result, const Policy& pol)
check_dist_and_prob	/usr/include/boost/math/distributions/bernoulli.hpp	/^      inline bool check_dist_and_prob(const char* function, RealType p, RealType prob, RealType* result, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math::bernoulli_detail	signature:(const char* function, RealType p, RealType prob, RealType* result, const Policy& )
check_dist_and_prob	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_dist_and_prob(const char* function, const RealType& alpha, const RealType& beta, RealType p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& alpha, const RealType& beta, RealType p, RealType* result, const Policy& pol)
check_dist_and_prob	/usr/include/boost/math/distributions/binomial.hpp	/^        inline bool check_dist_and_prob(const char* function, const RealType& N, RealType p, RealType prob, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::binomial_detail	signature:(const char* function, const RealType& N, RealType p, RealType prob, RealType* result, const Policy& pol)
check_dist_and_prob	/usr/include/boost/math/distributions/geometric.hpp	/^      inline bool check_dist_and_prob(const char* function, RealType p, RealType prob, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::geometric_detail	signature:(const char* function, RealType p, RealType prob, RealType* result, const Policy& pol)
check_dist_and_prob	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      inline bool check_dist_and_prob(const char* function, const RealType& r, RealType p, RealType prob, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::negative_binomial_detail	signature:(const char* function, const RealType& r, RealType p, RealType prob, RealType* result, const Policy& pol)
check_dist_and_prob	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_dist_and_prob(const char* function, RealType mean,  RealType p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, RealType mean, RealType p, RealType* result, const Policy& pol)
check_dist_and_x	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_dist_and_x(const char* function, const RealType& alpha, const RealType& beta, RealType x, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& alpha, const RealType& beta, RealType x, RealType* result, const Policy& pol)
check_finite	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_finite($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType x, RealType* result, const Policy& pol)
check_gamma	/usr/include/boost/math/distributions/gamma.hpp	/^inline bool check_gamma($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType scale, RealType shape, RealType* result, const Policy& pol)
check_gamma_shape	/usr/include/boost/math/distributions/gamma.hpp	/^inline bool check_gamma_shape($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType shape, RealType* result, const Policy& pol)
check_gamma_x	/usr/include/boost/math/distributions/gamma.hpp	/^inline bool check_gamma_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
check_inverse_chi_squared	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^  inline bool check_inverse_chi_squared( \/\/ Check both distribution parameters.$/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType degrees_of_freedom, RealType scale, RealType* result, const Policy& pol)
check_inverse_gamma	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline bool check_inverse_gamma($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType scale, RealType shape, RealType* result, const Policy& pol)
check_inverse_gamma_shape	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline bool check_inverse_gamma_shape($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType shape, RealType* result, const Policy& pol)
check_inverse_gamma_x	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline bool check_inverse_gamma_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
check_k	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_k(const char* function, const RealType& k, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, const RealType& k, RealType* result, const Policy& pol)
check_location	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_location($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType location, RealType* result, const Policy& pol)
check_lognormal_x	/usr/include/boost/math/distributions/lognormal.hpp	/^  inline bool check_lognormal_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
check_mean	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_mean(const char* function, const RealType& mean, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& mean, RealType* result, const Policy& pol)
check_mean	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_mean(const char* function, const RealType& mean, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, const RealType& mean, RealType* result, const Policy& pol)
check_mean_NZ	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_mean_NZ(const char* function, const RealType& mean, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, const RealType& mean, RealType* result, const Policy& pol)
check_non_centrality	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_non_centrality($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType ncp, RealType* result, const Policy& pol)
check_overflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_overflow(T \/* val *\/, R* \/* result *\/, const char* \/* function *\/, const overflow_error<ignore_error>&){ return false; }$/;"	f	namespace:boost::math::policies::detail	signature:(T , R* , const char* , const overflow_error<ignore_error>&)
check_overflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_overflow(T val, R* result, const char* function, const Policy& pol)$/;"	f	namespace:boost::math::policies::detail	signature:(T val, R* result, const char* function, const Policy& pol)
check_overflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_overflow(std::complex<T> \/* val *\/, R* \/* result *\/, const char* \/* function *\/, const overflow_error<ignore_error>&){ return false; }$/;"	f	namespace:boost::math::policies::detail	signature:(std::complex<T> , R* , const char* , const overflow_error<ignore_error>&)
check_overflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_overflow(std::complex<T> val, R* result, const char* function, const Policy& pol)$/;"	f	namespace:boost::math::policies::detail	signature:(std::complex<T> val, R* result, const char* function, const Policy& pol)
check_parameters	/usr/include/boost/math/distributions/laplace.hpp	/^   bool check_parameters(const char* function, RealType* result) const$/;"	f	class:boost::math::laplace_distribution	access:public	signature:(const char* function, RealType* result) const
check_params	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      bool check_params(const char* function, RealType* result)const$/;"	f	class:boost::math::hypergeometric_distribution	access:public	signature:(const char* function, RealType* result) const
check_pareto	/usr/include/boost/math/distributions/pareto.hpp	/^      inline bool check_pareto( \/\/ distribution parameters.$/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType scale, RealType shape, RealType* result, const Policy& pol)
check_pareto_scale	/usr/include/boost/math/distributions/pareto.hpp	/^      inline bool check_pareto_scale($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType scale, RealType* result, const Policy& pol)
check_pareto_shape	/usr/include/boost/math/distributions/pareto.hpp	/^      inline bool check_pareto_shape($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType shape, RealType* result, const Policy& pol)
check_pareto_x	/usr/include/boost/math/distributions/pareto.hpp	/^      inline bool check_pareto_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
check_positive_x	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_positive_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType x, RealType* result, const Policy& pol)
check_prob	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_prob(const char* function, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& pol)
check_prob	/usr/include/boost/math/distributions/poisson.hpp	/^      inline bool check_prob(const char* function, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::poisson_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& pol)
check_probability	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_probability(const char* function, RealType const& prob, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType const& prob, RealType* result, const Policy& pol)
check_range_result	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^inline T check_range_result(const T& x, const Policy& pol, const char* function)$/;"	f	namespace:boost::math::detail	signature:(const T& x, const Policy& pol, const char* function)
check_root_iterations	/usr/include/boost/math/policies/error_handling.hpp	/^inline void check_root_iterations(const char* function, boost::uintmax_t max_iter, const Policy& pol)$/;"	f	namespace:boost::math::policies	signature:(const char* function, boost::uintmax_t max_iter, const Policy& pol)
check_scale	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_scale($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType scale, RealType* result, const Policy& pol)
check_series_iterations	/usr/include/boost/math/policies/error_handling.hpp	/^inline void check_series_iterations(const char* function, boost::uintmax_t max_iter, const Policy& pol)$/;"	f	namespace:boost::math::policies	signature:(const char* function, boost::uintmax_t max_iter, const Policy& pol)
check_skew_normal_shape	/usr/include/boost/math/distributions/skew_normal.hpp	/^    inline bool check_skew_normal_shape($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType shape, RealType* result, const Policy& pol)
check_success_fraction	/usr/include/boost/math/distributions/bernoulli.hpp	/^      inline bool check_success_fraction(const char* function, const RealType& p, RealType* result, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math::bernoulli_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& )
check_success_fraction	/usr/include/boost/math/distributions/binomial.hpp	/^        inline bool check_success_fraction(const char* function, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::binomial_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& pol)
check_success_fraction	/usr/include/boost/math/distributions/geometric.hpp	/^      inline bool check_success_fraction(const char* function, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::geometric_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& pol)
check_success_fraction	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      inline bool check_success_fraction(const char* function, const RealType& p, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::negative_binomial_detail	signature:(const char* function, const RealType& p, RealType* result, const Policy& pol)
check_successes	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      inline bool check_successes(const char* function, const RealType& r, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::negative_binomial_detail	signature:(const char* function, const RealType& r, RealType* result, const Policy& pol)
check_triangular	/usr/include/boost/math/distributions/triangular.hpp	/^    inline bool check_triangular($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType lower, RealType mode, RealType upper, RealType* result, const Policy& pol)
check_triangular_lower	/usr/include/boost/math/distributions/triangular.hpp	/^    inline bool check_triangular_lower($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType lower, RealType* result, const Policy& pol)
check_triangular_mode	/usr/include/boost/math/distributions/triangular.hpp	/^    inline bool check_triangular_mode($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType mode, RealType* result, const Policy& pol)
check_triangular_upper	/usr/include/boost/math/distributions/triangular.hpp	/^    inline bool check_triangular_upper($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType upper, RealType* result, const Policy& pol)
check_triangular_x	/usr/include/boost/math/distributions/triangular.hpp	/^    inline bool check_triangular_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
check_underflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_underflow(T \/* val *\/, R* \/* result *\/, const char* \/* function *\/, const underflow_error<ignore_error>&){ return false; }$/;"	f	namespace:boost::math::policies::detail	signature:(T , R* , const char* , const underflow_error<ignore_error>&)
check_underflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_underflow(T val, R* result, const char* function, const Policy& pol)$/;"	f	namespace:boost::math::policies::detail	signature:(T val, R* result, const char* function, const Policy& pol)
check_underflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_underflow(std::complex<T> \/* val *\/, R* \/* result *\/, const char* \/* function *\/, const underflow_error<ignore_error>&){ return false; }$/;"	f	namespace:boost::math::policies::detail	signature:(std::complex<T> , R* , const char* , const underflow_error<ignore_error>&)
check_underflow	/usr/include/boost/math/policies/error_handling.hpp	/^inline bool check_underflow(std::complex<T> val, R* result, const char* function, const Policy& pol)$/;"	f	namespace:boost::math::policies::detail	signature:(std::complex<T> val, R* result, const char* function, const Policy& pol)
check_uniform	/usr/include/boost/math/distributions/uniform.hpp	/^    inline bool check_uniform($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType lower, RealType upper, RealType* result, const Policy& pol)
check_uniform_lower	/usr/include/boost/math/distributions/uniform.hpp	/^    inline bool check_uniform_lower($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType lower, RealType* result, const Policy& pol)
check_uniform_upper	/usr/include/boost/math/distributions/uniform.hpp	/^    inline bool check_uniform_upper($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType upper, RealType* result, const Policy& pol)
check_uniform_x	/usr/include/boost/math/distributions/uniform.hpp	/^    inline bool check_uniform_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
check_variance	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_variance(const char* function, const RealType& variance, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& variance, RealType* result, const Policy& pol)
check_weibull	/usr/include/boost/math/distributions/weibull.hpp	/^inline bool check_weibull($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType scale, RealType shape, RealType* result, const Policy& pol)
check_weibull_shape	/usr/include/boost/math/distributions/weibull.hpp	/^inline bool check_weibull_shape($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType shape, RealType* result, const Policy& pol)
check_weibull_x	/usr/include/boost/math/distributions/weibull.hpp	/^inline bool check_weibull_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType const& x, RealType* result, const Policy& pol)
check_x	/usr/include/boost/math/distributions/beta.hpp	/^      inline bool check_x(const char* function, const RealType& x, RealType* result, const Policy& pol)$/;"	f	namespace:boost::math::beta_detail	signature:(const char* function, const RealType& x, RealType* result, const Policy& pol)
check_x	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_x($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType x, RealType* result, const Policy& pol)
check_x	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      bool check_x(unsigned x, const char* function, RealType* result)const$/;"	f	class:boost::math::hypergeometric_distribution	access:public	signature:(unsigned x, const char* function, RealType* result) const
check_x_gt0	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^inline bool check_x_gt0($/;"	f	namespace:boost::math::detail	signature:( const char* function, RealType x, RealType* result, const Policy& pol)
checked_narrowing_cast	/usr/include/boost/math/policies/error_handling.hpp	/^inline R checked_narrowing_cast(T val, const char* function)$/;"	f	namespace:boost::math::policies	signature:(T val, const char* function)
chf	/usr/include/boost/math/concepts/distributions.hpp	/^RealType chf(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
chf	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type chf(const Distribution& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const Distribution& dist, const RealType& x)
chi_squared	/usr/include/boost/math/distributions/chi_squared.hpp	/^typedef chi_squared_distribution<double> chi_squared;$/;"	t	namespace:boost::math
chi_squared_distribution	/usr/include/boost/math/distributions/chi_squared.hpp	/^   chi_squared_distribution(RealType i) : m_df(i)$/;"	f	class:boost::math::chi_squared_distribution	access:public	signature:(RealType i)
chi_squared_distribution	/usr/include/boost/math/distributions/chi_squared.hpp	/^class chi_squared_distribution$/;"	c	namespace:boost::math
clear	/usr/include/boost/math/tools/test_data.hpp	/^   void clear(){ m_data.clear(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:()
clopper_pearson_exact_interval	/usr/include/boost/math/distributions/binomial.hpp	/^         clopper_pearson_exact_interval,$/;"	e	enum:boost::math::binomial_distribution::interval_type
coefficient_of_variation	/usr/include/boost/math/concepts/distributions.hpp	/^RealType coefficient_of_variation(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
coefficient_of_variation	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type coefficient_of_variation(const Distribution& dist)$/;"	f	namespace:boost::math	signature:(const Distribution& dist)
comp	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   bool comp;$/;"	m	struct:boost::math::detail::generic_quantile_finder	access:private
comp	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   bool comp;$/;"	m	struct:boost::math::detail::distribution_quantile_finder	access:private
comp	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            bool comp;$/;"	m	struct:boost::math::detail::nc_beta_quantile_functor	access:private
comp	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            bool comp;$/;"	m	struct:boost::math::detail::degrees_of_freedom_finder	access:private
comp	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            bool comp;$/;"	m	struct:boost::math::detail::nccs_quantile_functor	access:private
comp	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            bool comp;$/;"	m	struct:boost::math::detail::non_centrality_finder	access:private
comp_ellint_1	/usr/include/boost/math/tr1_c_macros.ipp	526;"	d	file:
comp_ellint_1	/usr/include/boost/math/tr1_c_macros.ipp	528;"	d	file:
comp_ellint_1f	/usr/include/boost/math/tr1_c_macros.ipp	530;"	d	file:
comp_ellint_1f	/usr/include/boost/math/tr1_c_macros.ipp	532;"	d	file:
comp_ellint_1l	/usr/include/boost/math/tr1_c_macros.ipp	534;"	d	file:
comp_ellint_1l	/usr/include/boost/math/tr1_c_macros.ipp	536;"	d	file:
comp_ellint_2	/usr/include/boost/math/tr1.hpp	/^inline double comp_ellint_2(double k)$/;"	f	namespace:boost::math::tr1	signature:(double k)
comp_ellint_2	/usr/include/boost/math/tr1.hpp	/^inline float comp_ellint_2(float k)$/;"	f	namespace:boost::math::tr1	signature:(float k)
comp_ellint_2	/usr/include/boost/math/tr1.hpp	/^inline long double comp_ellint_2(long double k)$/;"	f	namespace:boost::math::tr1	signature:(long double k)
comp_ellint_2	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T>::type comp_ellint_2(T k)$/;"	f	namespace:boost::math::tr1	signature:(T k)
comp_ellint_2	/usr/include/boost/math/tr1_c_macros.ipp	540;"	d	file:
comp_ellint_2	/usr/include/boost/math/tr1_c_macros.ipp	542;"	d	file:
comp_ellint_2f	/usr/include/boost/math/tr1.hpp	/^inline float comp_ellint_2f(float k)$/;"	f	namespace:boost::math::tr1	signature:(float k)
comp_ellint_2f	/usr/include/boost/math/tr1_c_macros.ipp	544;"	d	file:
comp_ellint_2f	/usr/include/boost/math/tr1_c_macros.ipp	546;"	d	file:
comp_ellint_2l	/usr/include/boost/math/tr1.hpp	/^inline long double comp_ellint_2l(long double k)$/;"	f	namespace:boost::math::tr1	signature:(long double k)
comp_ellint_2l	/usr/include/boost/math/tr1_c_macros.ipp	548;"	d	file:
comp_ellint_2l	/usr/include/boost/math/tr1_c_macros.ipp	550;"	d	file:
comp_ellint_3	/usr/include/boost/math/tr1.hpp	/^inline double comp_ellint_3(double k, double nu)$/;"	f	namespace:boost::math::tr1	signature:(double k, double nu)
comp_ellint_3	/usr/include/boost/math/tr1.hpp	/^inline float comp_ellint_3(float k, float nu)$/;"	f	namespace:boost::math::tr1	signature:(float k, float nu)
comp_ellint_3	/usr/include/boost/math/tr1.hpp	/^inline long double comp_ellint_3(long double k, long double nu)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double nu)
comp_ellint_3	/usr/include/boost/math/tr1.hpp	/^inline typename tools::promote_args<T1, T2>::type comp_ellint_3(T1 k, T2 nu)$/;"	f	namespace:boost::math::tr1	signature:(T1 k, T2 nu)
comp_ellint_3	/usr/include/boost/math/tr1_c_macros.ipp	554;"	d	file:
comp_ellint_3	/usr/include/boost/math/tr1_c_macros.ipp	556;"	d	file:
comp_ellint_3f	/usr/include/boost/math/tr1.hpp	/^inline float comp_ellint_3f(float k, float nu)$/;"	f	namespace:boost::math::tr1	signature:(float k, float nu)
comp_ellint_3f	/usr/include/boost/math/tr1_c_macros.ipp	558;"	d	file:
comp_ellint_3f	/usr/include/boost/math/tr1_c_macros.ipp	560;"	d	file:
comp_ellint_3l	/usr/include/boost/math/tr1.hpp	/^inline long double comp_ellint_3l(long double k, long double nu)$/;"	f	namespace:boost::math::tr1	signature:(long double k, long double nu)
comp_ellint_3l	/usr/include/boost/math/tr1_c_macros.ipp	562;"	d	file:
comp_ellint_3l	/usr/include/boost/math/tr1_c_macros.ipp	564;"	d	file:
complement	/usr/include/boost/math/distributions/complement.hpp	/^inline complemented2_type<Dist, RealType> complement(const Dist& d, const RealType& r)$/;"	f	namespace:boost::math	signature:(const Dist& d, const RealType& r)
complement	/usr/include/boost/math/distributions/complement.hpp	/^inline complemented3_type<Dist, RealType1, RealType2> complement(const Dist& d, const RealType1& r1, const RealType2& r2)$/;"	f	namespace:boost::math	signature:(const Dist& d, const RealType1& r1, const RealType2& r2)
complement	/usr/include/boost/math/distributions/complement.hpp	/^inline complemented4_type<Dist, RealType1, RealType2, RealType3> complement(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3)$/;"	f	namespace:boost::math	signature:(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3)
complement	/usr/include/boost/math/distributions/complement.hpp	/^inline complemented5_type<Dist, RealType1, RealType2, RealType3, RealType4> complement(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3, const RealType4& r4)$/;"	f	namespace:boost::math	signature:(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3, const RealType4& r4)
complement	/usr/include/boost/math/distributions/complement.hpp	/^inline complemented6_type<Dist, RealType1, RealType2, RealType3, RealType4, RealType5> complement(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3, const RealType4& r4, const RealType5& r5)$/;"	f	namespace:boost::math	signature:(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3, const RealType4& r4, const RealType5& r5)
complement	/usr/include/boost/math/distributions/complement.hpp	/^inline complemented7_type<Dist, RealType1, RealType2, RealType3, RealType4, RealType5, RealType6> complement(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3, const RealType4& r4, const RealType5& r5, const RealType6& r6)$/;"	f	namespace:boost::math	signature:(const Dist& d, const RealType1& r1, const RealType2& r2, const RealType3& r3, const RealType4& r4, const RealType5& r5, const RealType6& r6)
complemented2_type	/usr/include/boost/math/distributions/complement.hpp	/^   complemented2_type($/;"	f	struct:boost::math::complemented2_type	access:public	signature:( const Dist& d, const RealType& p1)
complemented2_type	/usr/include/boost/math/distributions/complement.hpp	/^struct complemented2_type$/;"	s	namespace:boost::math
complemented3_type	/usr/include/boost/math/distributions/complement.hpp	/^   complemented3_type($/;"	f	struct:boost::math::complemented3_type	access:public	signature:( const Dist& d, const RealType1& p1, const RealType2& p2)
complemented3_type	/usr/include/boost/math/distributions/complement.hpp	/^struct complemented3_type$/;"	s	namespace:boost::math
complemented4_type	/usr/include/boost/math/distributions/complement.hpp	/^   complemented4_type($/;"	f	struct:boost::math::complemented4_type	access:public	signature:( const Dist& d, const RealType1& p1, const RealType2& p2, const RealType3& p3)
complemented4_type	/usr/include/boost/math/distributions/complement.hpp	/^struct complemented4_type$/;"	s	namespace:boost::math
complemented5_type	/usr/include/boost/math/distributions/complement.hpp	/^   complemented5_type($/;"	f	struct:boost::math::complemented5_type	access:public	signature:( const Dist& d, const RealType1& p1, const RealType2& p2, const RealType3& p3, const RealType4& p4)
complemented5_type	/usr/include/boost/math/distributions/complement.hpp	/^struct complemented5_type$/;"	s	namespace:boost::math
complemented6_type	/usr/include/boost/math/distributions/complement.hpp	/^   complemented6_type($/;"	f	struct:boost::math::complemented6_type	access:public	signature:( const Dist& d, const RealType1& p1, const RealType2& p2, const RealType3& p3, const RealType4& p4, const RealType5& p5)
complemented6_type	/usr/include/boost/math/distributions/complement.hpp	/^struct complemented6_type$/;"	s	namespace:boost::math
complemented7_type	/usr/include/boost/math/distributions/complement.hpp	/^   complemented7_type($/;"	f	struct:boost::math::complemented7_type	access:public	signature:( const Dist& d, const RealType1& p1, const RealType2& p2, const RealType3& p3, const RealType4& p4, const RealType5& p5, const RealType6& p6)
complemented7_type	/usr/include/boost/math/distributions/complement.hpp	/^struct complemented7_type$/;"	s	namespace:boost::math
concepts	/usr/include/boost/math/concepts/distributions.hpp	/^namespace concepts$/;"	n	namespace:boost::math
concepts	/usr/include/boost/math/concepts/real_concept.hpp	/^namespace concepts$/;"	n	namespace:boost::math
concepts	/usr/include/boost/math/concepts/real_type_concept.hpp	/^namespace boost{ namespace math{ namespace concepts{$/;"	n	namespace:boost::math
concepts	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace boost{ namespace math{ namespace concepts{$/;"	n	namespace:boost::math
concepts	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace concepts$/;"	n	namespace:boost::math
conj	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        conj(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
conj	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    conj(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
const_iterator	/usr/include/boost/math/tools/test_data.hpp	/^   typedef typename container_type::const_iterator const_iterator;$/;"	t	class:boost::math::tools::test_data	access:public
const_reference	/usr/include/boost/math/tools/test_data.hpp	/^   typedef typename container_type::const_reference const_reference;$/;"	t	class:boost::math::tools::test_data	access:public
constants	/usr/include/boost/math/bindings/rr.hpp	/^namespace constants{$/;"	n	namespace:boost::math
constants	/usr/include/boost/math/constants/calculate_constants.hpp	/^namespace boost{ namespace math{ namespace constants{ namespace detail{$/;"	n	namespace:boost::math
constants	/usr/include/boost/math/constants/constants.hpp	/^  namespace constants$/;"	n	namespace:boost::math
constants	/usr/include/boost/math/constants/generate.hpp	/^namespace boost{ namespace math{ namespace constants{ $/;"	n	namespace:boost::math
constants	/usr/include/boost/math/constants/info.hpp	/^namespace boost{ namespace math{ namespace constants{$/;"	n	namespace:boost::math
constraints	/usr/include/boost/math/concepts/distributions.hpp	/^   void constraints()$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:()
constraints	/usr/include/boost/math/concepts/real_type_concept.hpp	/^   void constraints()$/;"	f	struct:boost::math::concepts::RealTypeConcept	access:public	signature:()
construct_from_double	/usr/include/boost/math/constants/constants.hpp	/^      construct_from_double = 2,$/;"	e	enum:boost::math::constants::construction_method
construct_from_float	/usr/include/boost/math/constants/constants.hpp	/^      construct_from_float = 1,$/;"	e	enum:boost::math::constants::construction_method
construct_from_long_double	/usr/include/boost/math/constants/constants.hpp	/^      construct_from_long_double = 3,$/;"	e	enum:boost::math::constants::construction_method
construct_from_string	/usr/include/boost/math/constants/constants.hpp	/^      construct_from_string = 4$/;"	e	enum:boost::math::constants::construction_method
construction_method	/usr/include/boost/math/constants/constants.hpp	/^   enum construction_method$/;"	g	namespace:boost::math::constants
construction_traits	/usr/include/boost/math/constants/constants.hpp	/^   struct construction_traits$/;"	s	namespace:boost::math::constants
container_type	/usr/include/boost/math/tools/test_data.hpp	/^   typedef std::set<row_type> container_type;$/;"	t	class:boost::math::tools::test_data	access:private
continued_fraction_a	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_a(Gen& g, const U& factor)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, const U& factor)
continued_fraction_a	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_a(Gen& g, const U& factor, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, const U& factor, boost::uintmax_t& max_terms)
continued_fraction_a	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_a(Gen& g, int bits)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, int bits)
continued_fraction_a	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_a(Gen& g, int bits, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, int bits, boost::uintmax_t& max_terms)
continued_fraction_b	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_b(Gen& g, const U& factor)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, const U& factor)
continued_fraction_b	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_b(Gen& g, const U& factor, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, const U& factor, boost::uintmax_t& max_terms)
continued_fraction_b	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_b(Gen& g, int bits)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, int bits)
continued_fraction_b	/usr/include/boost/math/tools/fraction.hpp	/^inline typename detail::fraction_traits<Gen>::result_type continued_fraction_b(Gen& g, int bits, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Gen& g, int bits, boost::uintmax_t& max_terms)
control_points	/usr/include/boost/math/tools/remez.hpp	/^   vector_type control_points;    \/\/ Current control points to be used for the next iteration.$/;"	m	class:boost::math::tools::remez_minimax	access:private
convert_to_long_result	/usr/include/boost/math/bindings/mpfr.hpp	/^void convert_to_long_result(mpfr_class const& r, I& result)$/;"	f	namespace:boost::math::tools::detail	signature:(mpfr_class const& r, I& result)
convert_to_long_result	/usr/include/boost/math/bindings/mpreal.hpp	/^void convert_to_long_result(mpfr::mpreal const& r, I& result)$/;"	f	namespace:boost::math::tools::detail	signature:(mpfr::mpreal const& r, I& result)
convert_to_long_result	/usr/include/boost/math/bindings/rr.hpp	/^void convert_to_long_result(NTL::RR const& r, I& result)$/;"	f	namespace:boost::math::tools::detail	signature:(NTL::RR const& r, I& result)
copysign	/usr/include/boost/math/tr1_c_macros.ipp	64;"	d	file:
copysign	/usr/include/boost/math/tr1_c_macros.ipp	66;"	d	file:
copysignf	/usr/include/boost/math/tr1_c_macros.ipp	68;"	d	file:
copysignf	/usr/include/boost/math/tr1_c_macros.ipp	70;"	d	file:
copysignl	/usr/include/boost/math/tr1_c_macros.ipp	72;"	d	file:
copysignl	/usr/include/boost/math/tr1_c_macros.ipp	74;"	d	file:
cos	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float cos(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
cos	/usr/include/boost/math/bindings/rr.hpp	/^inline RR cos(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
cos	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept cos(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
cos	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept cos(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
cos	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        cos(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
cos	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    cos(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
cos_pi	/usr/include/boost/math/special_functions/cos_pi.hpp	/^inline typename tools::promote_args<T>::type cos_pi(T x)$/;"	f	namespace:boost::math	signature:(T x)
cos_pi	/usr/include/boost/math/special_functions/cos_pi.hpp	/^inline typename tools::promote_args<T>::type cos_pi(T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T x, const Policy& pol)
cos_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type cos_pi(T x);$/;"	p	namespace:boost::math	signature:(T x)
cos_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type cos_pi(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
cos_pi_imp	/usr/include/boost/math/special_functions/cos_pi.hpp	/^T cos_pi_imp(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
cosh	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float cosh (const e_float& x)$/;"	f	namespace:boost::math::ef	signature:(const e_float& x)
cosh	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR cosh(RR z)$/;"	f	namespace:boost::math::ntl	signature:(RR z)
cosh	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept cosh(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
cosh	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept cosh(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
cosh	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        cosh(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
cosh	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    cosh(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
count	/usr/include/boost/math/special_functions/expm1.hpp	/^     int count()const$/;"	f	struct:boost::math::detail::expm1_series	access:public	signature:() const
count	/usr/include/boost/math/special_functions/log1p.hpp	/^     int count()const$/;"	f	struct:boost::math::detail::log1p_series	access:public	signature:() const
count	/usr/include/boost/math/tools/stats.hpp	/^   boost::uintmax_t count()const{ return m_count; }$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
count	/usr/include/boost/math/tools/test.hpp	/^   boost::uintmax_t count()const{ return stat.count(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
create_test_points	/usr/include/boost/math/tools/test_data.hpp	/^   void create_test_points(std::set<T>& points, const parameter_info<T>& arg1);$/;"	p	class:boost::math::tools::test_data	access:private	signature:(std::set<T>& points, const parameter_info<T>& arg1)
create_test_points	/usr/include/boost/math/tools/test_data.hpp	/^void test_data<T>::create_test_points(std::set<T>& points, const parameter_info<T>& arg1)$/;"	f	class:boost::math::tools::test_data	signature:(std::set<T>& points, const parameter_info<T>& arg1)
cubic_interpolate	/usr/include/boost/math/tools/toms748_solve.hpp	/^T cubic_interpolate(const T& a, const T& b, const T& d, $/;"	f	namespace:boost::math::tools::detail	signature:(const T& a, const T& b, const T& d, const T& e, const T& fa, const T& fb, const T& fd, const T& fe)
current_prime	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   unsigned current_prime;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_data	access:public
cyl_bessel_i	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_bessel_i(T1 v, T2 x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
cyl_bessel_i	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_bessel_i(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
cyl_bessel_i	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_bessel_i(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
cyl_bessel_i	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_bessel_i(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
cyl_bessel_i	/usr/include/boost/math/tr1_c_macros.ipp	584;"	d	file:
cyl_bessel_i	/usr/include/boost/math/tr1_c_macros.ipp	586;"	d	file:
cyl_bessel_i_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^T cyl_bessel_i_imp(T v, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const Policy& pol)
cyl_bessel_i_small_z	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   cyl_bessel_i_small_z(T v_, T z_) : k(0), v(v_), mult(z_*z_\/4) $/;"	f	struct:boost::math::detail::cyl_bessel_i_small_z	access:public	signature:(T v_, T z_)
cyl_bessel_i_small_z	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^struct cyl_bessel_i_small_z$/;"	s	namespace:boost::math::detail
cyl_bessel_if	/usr/include/boost/math/tr1_c_macros.ipp	588;"	d	file:
cyl_bessel_if	/usr/include/boost/math/tr1_c_macros.ipp	590;"	d	file:
cyl_bessel_il	/usr/include/boost/math/tr1_c_macros.ipp	592;"	d	file:
cyl_bessel_il	/usr/include/boost/math/tr1_c_macros.ipp	594;"	d	file:
cyl_bessel_j	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_bessel_j(T1 v, T2 x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
cyl_bessel_j	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_bessel_j(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
cyl_bessel_j	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_bessel_j(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
cyl_bessel_j	/usr/include/boost/math/tr1_c_macros.ipp	598;"	d	file:
cyl_bessel_j	/usr/include/boost/math/tr1_c_macros.ipp	600;"	d	file:
cyl_bessel_j_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^T cyl_bessel_j_imp(T v, T x, const bessel_no_int_tag& t, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_no_int_tag& t, const Policy& pol)
cyl_bessel_j_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_bessel_j_imp(T v, T x, const bessel_maybe_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_maybe_int_tag&, const Policy& pol)
cyl_bessel_j_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_bessel_j_imp(int v, T x, const bessel_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int v, T x, const bessel_int_tag&, const Policy& pol)
cyl_bessel_jf	/usr/include/boost/math/tr1_c_macros.ipp	602;"	d	file:
cyl_bessel_jf	/usr/include/boost/math/tr1_c_macros.ipp	604;"	d	file:
cyl_bessel_jl	/usr/include/boost/math/tr1_c_macros.ipp	606;"	d	file:
cyl_bessel_jl	/usr/include/boost/math/tr1_c_macros.ipp	608;"	d	file:
cyl_bessel_k	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_bessel_k(T1 v, T2 x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
cyl_bessel_k	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_bessel_k(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
cyl_bessel_k	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_bessel_k(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
cyl_bessel_k	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_bessel_k(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
cyl_bessel_k	/usr/include/boost/math/tr1_c_macros.ipp	612;"	d	file:
cyl_bessel_k	/usr/include/boost/math/tr1_c_macros.ipp	614;"	d	file:
cyl_bessel_k_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_bessel_k_imp(T v, T x, const bessel_maybe_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_maybe_int_tag&, const Policy& pol)
cyl_bessel_k_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_bessel_k_imp(T v, T x, const bessel_no_int_tag& \/* t *\/, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_no_int_tag& , const Policy& pol)
cyl_bessel_k_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_bessel_k_imp(int v, T x, const bessel_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int v, T x, const bessel_int_tag&, const Policy& pol)
cyl_bessel_kf	/usr/include/boost/math/tr1_c_macros.ipp	616;"	d	file:
cyl_bessel_kf	/usr/include/boost/math/tr1_c_macros.ipp	618;"	d	file:
cyl_bessel_kl	/usr/include/boost/math/tr1_c_macros.ipp	620;"	d	file:
cyl_bessel_kl	/usr/include/boost/math/tr1_c_macros.ipp	622;"	d	file:
cyl_hankel_1	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> cyl_hankel_1(T1 v, T2 x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
cyl_hankel_1	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> cyl_hankel_1(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
cyl_hankel_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> cyl_hankel_1(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
cyl_hankel_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> cyl_hankel_1(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
cyl_hankel_2	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> cyl_hankel_2(T1 v, T2 x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
cyl_hankel_2	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> cyl_hankel_2(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
cyl_hankel_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> cyl_hankel_2(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
cyl_hankel_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> cyl_hankel_2(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
cyl_neumann	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_neumann(T1 v, T2 x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
cyl_neumann	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_neumann(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
cyl_neumann	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, Policy>::result_type cyl_neumann(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
cyl_neumann	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type cyl_neumann(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
cyl_neumann	/usr/include/boost/math/tr1_c_macros.ipp	627;"	d	file:
cyl_neumann	/usr/include/boost/math/tr1_c_macros.ipp	629;"	d	file:
cyl_neumann_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_neumann_imp(T v, T x, const bessel_maybe_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_maybe_int_tag&, const Policy& pol)
cyl_neumann_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_neumann_imp(T v, T x, const bessel_no_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_no_int_tag&, const Policy& pol)
cyl_neumann_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T cyl_neumann_imp(int v, T x, const bessel_int_tag&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int v, T x, const bessel_int_tag&, const Policy& pol)
cyl_neumannf	/usr/include/boost/math/tr1_c_macros.ipp	631;"	d	file:
cyl_neumannf	/usr/include/boost/math/tr1_c_macros.ipp	633;"	d	file:
cyl_neumannl	/usr/include/boost/math/tr1_c_macros.ipp	635;"	d	file:
cyl_neumannl	/usr/include/boost/math/tr1_c_macros.ipp	637;"	d	file:
cylindrical	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        cylindrical(T const & r,$/;"	f	namespace:boost::math	signature:(T const & r, T const & angle, T const & h1, T const & h2, T const & h3, T const & h4, T const & h5, T const & h6)
cylindrical	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    cylindrical(T const & r,$/;"	f	namespace:boost::math	signature:(T const & r, T const & angle, T const & h1, T const & h2)
cylindrospherical	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    cylindrospherical(  T const & t,$/;"	f	namespace:boost::math	signature:( T const & t, T const & radius, T const & longitude, T const & latitude)
d	/usr/include/boost/math/tools/traits.hpp	/^   static D d;$/;"	m	struct:boost::math::tools::detail::has_cdf	access:public
d	/usr/include/boost/math/tools/traits.hpp	/^   static D d;$/;"	m	struct:boost::math::tools::detail::has_quantile	access:public
default_args	/usr/include/boost/math/policies/policy.hpp	/^struct default_args$/;"	s	namespace:boost::math::policies::detail
default_args	/usr/include/boost/math/policies/policy.hpp	/^struct default_args<false, false>$/;"	s	namespace:boost::math::policies::detail
default_args	/usr/include/boost/math/policies/policy.hpp	/^struct default_args<false, true>$/;"	s	namespace:boost::math::policies::detail
default_args	/usr/include/boost/math/policies/policy.hpp	/^struct default_args<true, false>$/;"	s	namespace:boost::math::policies::detail
default_policy	/usr/include/boost/math/policies/policy.hpp	/^struct default_policy{};$/;"	s	namespace:boost::math::policies
defective	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      unsigned defective()const$/;"	f	class:boost::math::hypergeometric_distribution	access:public	signature:() const
degree	/usr/include/boost/math/tools/polynomial.hpp	/^   size_type degree()const { return m_data.size() - 1; }$/;"	f	class:boost::math::tools::polynomial	access:public	signature:() const
degrees_of_freedom	/usr/include/boost/math/distributions/chi_squared.hpp	/^   RealType degrees_of_freedom()const$/;"	f	class:boost::math::chi_squared_distribution	access:public	signature:() const
degrees_of_freedom	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   RealType degrees_of_freedom()const$/;"	f	class:boost::math::inverse_chi_squared_distribution	access:public	signature:() const
degrees_of_freedom	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         RealType degrees_of_freedom() const$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:() const
degrees_of_freedom	/usr/include/boost/math/distributions/non_central_t.hpp	/^         RealType degrees_of_freedom() const$/;"	f	class:boost::math::non_central_t_distribution	access:public	signature:() const
degrees_of_freedom	/usr/include/boost/math/distributions/students_t.hpp	/^   RealType degrees_of_freedom()const$/;"	f	class:boost::math::students_t_distribution	access:public	signature:() const
degrees_of_freedom1	/usr/include/boost/math/distributions/fisher_f.hpp	/^   RealType degrees_of_freedom1()const$/;"	f	class:boost::math::fisher_f_distribution	access:public	signature:() const
degrees_of_freedom1	/usr/include/boost/math/distributions/non_central_f.hpp	/^         RealType degrees_of_freedom1()const$/;"	f	class:boost::math::non_central_f_distribution	access:public	signature:() const
degrees_of_freedom2	/usr/include/boost/math/distributions/fisher_f.hpp	/^   RealType degrees_of_freedom2()const$/;"	f	class:boost::math::fisher_f_distribution	access:public	signature:() const
degrees_of_freedom2	/usr/include/boost/math/distributions/non_central_f.hpp	/^         RealType degrees_of_freedom2()const$/;"	f	class:boost::math::non_central_f_distribution	access:public	signature:() const
degrees_of_freedom_finder	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            degrees_of_freedom_finder($/;"	f	struct:boost::math::detail::degrees_of_freedom_finder	access:public	signature:( RealType lam_, RealType x_, RealType p_, bool c)
degrees_of_freedom_finder	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         struct degrees_of_freedom_finder$/;"	s	namespace:boost::math::detail
denom	/usr/include/boost/math/special_functions/expint.hpp	/^   T denom;$/;"	m	struct:boost::math::detail::expint_series	access:private
denominator	/usr/include/boost/math/tools/remez.hpp	/^   polynomial<T> denominator()const;$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:() const
denominator	/usr/include/boost/math/tools/remez.hpp	/^   polynomial<T> denominator;$/;"	m	struct:boost::math::tools::detail::remez_error_function	access:private
denominator	/usr/include/boost/math/tools/remez.hpp	/^polynomial<T> remez_minimax<T>::denominator()const$/;"	f	class:boost::math::tools::remez_minimax	signature:() const
denorm_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef denorm_error<> denorm_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
denorm_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_denorm_error<mpl::_1>, denorm_error<> >::type denorm_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
denorm_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_denorm_error<mpl::_1>, typename Policy::denorm_error_type >::type denorm_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
detail	/usr/include/boost/math/bindings/detail/big_digamma.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/bindings/e_float.hpp	/^} namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/bindings/mpreal.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/bindings/mpreal.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/bindings/rr.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/bindings/rr.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/common_factor_ct.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/common_factor_rt.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/complex/details.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/constants/calculate_constants.hpp	/^namespace boost{ namespace math{ namespace constants{ namespace detail{$/;"	n	namespace:boost::math::constants
detail	/usr/include/boost/math/constants/calculate_constants.hpp	/^namespace detail{$/;"	n	namespace:boost::math::constants::detail
detail	/usr/include/boost/math/constants/info.hpp	/^   namespace detail{$/;"	n	namespace:boost::math::constants
detail	/usr/include/boost/math/distributions/cauchy.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/chi_squared.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^namespace boost{ namespace math{ namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/detail/hypergeometric_cdf.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/exponential.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/extreme_value.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/gamma.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/lognormal.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/non_central_t.hpp	/^      namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/pareto.hpp	/^    namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/poisson.hpp	/^     namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/rayleigh.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/skew_normal.hpp	/^  namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/students_t.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/triangular.hpp	/^  namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/uniform.hpp	/^  namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/distributions/weibull.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/octonion.hpp	/^        namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/policies/error_handling.hpp	/^namespace detail$/;"	n	namespace:boost::math::policies
detail	/usr/include/boost/math/policies/policy.hpp	/^namespace detail{$/;"	n	namespace:boost::math::policies
detail	/usr/include/boost/math/quaternion.hpp	/^        namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/acosh.hpp	/^       namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/airy.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/asinh.hpp	/^       namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/atanh.hpp	/^       namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/bessel.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/beta.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/cbrt.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/cos_pi.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^namespace detail {$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^namespace boost { namespace math{  namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_jn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^namespace detail {$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_kn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/bessel_yn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^namespace detail {$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/iconv.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/digamma.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/ellint_1.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/ellint_2.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/ellint_3.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/ellint_rc.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/ellint_rd.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/ellint_rf.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/ellint_rj.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/erf.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/expint.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/expm1.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/factorials.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/fpclassify.hpp	/^namespace detail {$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/fpclassify.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/gamma.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/hankel.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/hermite.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/hypot.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/laguerre.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/legendre.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/log1p.hpp	/^namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/next.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/owens_t.hpp	/^      namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/pow.hpp	/^namespace detail {$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/powm1.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/sign.hpp	/^namespace detail {$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/sin_pi.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/sinc.hpp	/^       namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/sinhc.hpp	/^       namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/special_functions/zeta.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/tools/config.hpp	/^   namespace detail$/;"	n	namespace:boost::math
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/fraction.hpp	/^namespace detail$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/precision.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/rational.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/remez.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/roots.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/test_data.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/toms748_solve.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
detail	/usr/include/boost/math/tools/traits.hpp	/^namespace detail{$/;"	n	namespace:boost::math::tools
df	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         RealType df; \/\/ degrees of freedom.$/;"	m	class:boost::math::non_central_chi_squared_distribution	access:private
df_	/usr/include/boost/math/distributions/students_t.hpp	/^   RealType df_;  \/\/ degrees of freedom is a real number or +infinity.$/;"	m	class:boost::math::students_t_distribution	access:private
df_estimator	/usr/include/boost/math/distributions/chi_squared.hpp	/^   df_estimator(RealType a, RealType b, RealType variance, RealType delta)$/;"	f	struct:boost::math::detail::df_estimator	access:public	signature:(RealType a, RealType b, RealType variance, RealType delta)
df_estimator	/usr/include/boost/math/distributions/chi_squared.hpp	/^struct df_estimator$/;"	s	namespace:boost::math::detail
didonato_FN	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^inline T didonato_FN(T p, T a, T x, unsigned N, T tolerance, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T p, T a, T x, unsigned N, T tolerance, const Policy& pol)
didonato_SN	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^T didonato_SN(T a, T x, unsigned N, T tolerance = 0)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, unsigned N, T tolerance = 0)
difference_type	/usr/include/boost/math/tools/test_data.hpp	/^   typedef typename container_type::difference_type difference_type;$/;"	t	class:boost::math::tools::test_data	access:public
digamma	/usr/include/boost/math/special_functions/digamma.hpp	/^   digamma(T x)$/;"	f	namespace:boost::math	signature:(T x)
digamma	/usr/include/boost/math/special_functions/digamma.hpp	/^   digamma(T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T x, const Policy& pol)
digamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type digamma(T x);$/;"	p	namespace:boost::math	signature:(T x)
digamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type digamma(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
digamma_imp	/usr/include/boost/math/bindings/mpfr.hpp	/^mpfr_class digamma_imp(mpfr_class x, const mpl::int_<0>* , const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(mpfr_class x, const mpl::int_<0>* , const Policy& pol)
digamma_imp	/usr/include/boost/math/bindings/mpreal.hpp	/^mpfr::mpreal digamma_imp(mpfr::mpreal x, const mpl::int_<0>* , const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(mpfr::mpreal x, const mpl::int_<0>* , const Policy& pol)
digamma_imp	/usr/include/boost/math/bindings/rr.hpp	/^ntl::RR digamma_imp(ntl::RR x, const mpl::int_<0>* , const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(ntl::RR x, const mpl::int_<0>* , const Policy& pol)
digamma_imp	/usr/include/boost/math/special_functions/digamma.hpp	/^T digamma_imp(T x, const Tag* t, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Tag* t, const Policy& pol)
digamma_imp_1_2	/usr/include/boost/math/special_functions/digamma.hpp	/^T digamma_imp_1_2(T x, const mpl::int_<0>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<0>*)
digamma_imp_1_2	/usr/include/boost/math/special_functions/digamma.hpp	/^T digamma_imp_1_2(T x, const mpl::int_<53>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<53>*)
digamma_imp_1_2	/usr/include/boost/math/special_functions/digamma.hpp	/^T digamma_imp_1_2(T x, const mpl::int_<64>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<64>*)
digamma_imp_1_2	/usr/include/boost/math/special_functions/digamma.hpp	/^inline T digamma_imp_1_2(T x, const mpl::int_<24>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<24>*)
digamma_imp_large	/usr/include/boost/math/special_functions/digamma.hpp	/^inline T digamma_imp_large(T x, const mpl::int_<0>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<0>*)
digamma_imp_large	/usr/include/boost/math/special_functions/digamma.hpp	/^inline T digamma_imp_large(T x, const mpl::int_<24>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<24>*)
digamma_imp_large	/usr/include/boost/math/special_functions/digamma.hpp	/^inline T digamma_imp_large(T x, const mpl::int_<53>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<53>*)
digamma_imp_large	/usr/include/boost/math/special_functions/digamma.hpp	/^inline T digamma_imp_large(T x, const mpl::int_<64>*)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<64>*)
digamma_initializer	/usr/include/boost/math/special_functions/digamma.hpp	/^struct digamma_initializer$/;"	s	namespace:boost::math::detail
digamma_large_lim	/usr/include/boost/math/special_functions/digamma.hpp	/^inline unsigned digamma_large_lim(const mpl::int_<0>*)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<0>*)
digamma_large_lim	/usr/include/boost/math/special_functions/digamma.hpp	/^inline unsigned digamma_large_lim(const void*)$/;"	f	namespace:boost::math::detail	signature:(const void*)
digits	/usr/include/boost/math/bindings/e_float.hpp	/^      static const int digits = digits10;$/;"	m	class:std::numeric_limits	access:public
digits10_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_digits10<mpl::_1>, digits10<> >::type digits10_type;$/;"	t	struct:boost::math::policies::normalise	access:private
digits10_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_digits10<mpl::_1>, digits10<> >::type digits10_type;$/;"	t	struct:boost::math::policies::policy	access:private
digits2_type	/usr/include/boost/math/policies/policy.hpp	/^   >::type digits2_type;$/;"	t	struct:boost::math::policies::detail::precision	access:public
digits_2	/usr/include/boost/math/bindings/e_float.hpp	/^   typedef digits2<((::std::numeric_limits< ::boost::math::ef::e_float>::digits10 + 1) * 1000L) \/ 301L> digits_2;$/;"	t	struct:boost::math::policies::precision	access:public
digits_t	/usr/include/boost/math/policies/policy.hpp	/^   typedef basic_digits<Real> digits_t;$/;"	t	struct:boost::math::policies::precision	access:public
discrete_quantile_policy_type	/usr/include/boost/math/policies/policy.hpp	/^enum discrete_quantile_policy_type$/;"	g	namespace:boost::math::policies
discrete_quantile_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef discrete_quantile<> discrete_quantile_type;$/;"	t	struct:boost::math::policies::policy	access:public
discrete_quantile_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_discrete_quantile<mpl::_1>, discrete_quantile<> >::type discrete_quantile_type;$/;"	t	struct:boost::math::policies::policy	access:public
discrete_quantile_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_discrete_quantile<mpl::_1>, typename Policy::discrete_quantile_type >::type discrete_quantile_type;$/;"	t	struct:boost::math::policies::normalise	access:private
dist	/usr/include/boost/math/distributions/complement.hpp	/^   const Dist& dist;$/;"	m	struct:boost::math::complemented2_type	access:public
dist	/usr/include/boost/math/distributions/complement.hpp	/^   const Dist& dist;$/;"	m	struct:boost::math::complemented3_type	access:public
dist	/usr/include/boost/math/distributions/complement.hpp	/^   const Dist& dist;$/;"	m	struct:boost::math::complemented4_type	access:public
dist	/usr/include/boost/math/distributions/complement.hpp	/^   const Dist& dist;$/;"	m	struct:boost::math::complemented5_type	access:public
dist	/usr/include/boost/math/distributions/complement.hpp	/^   const Dist& dist;$/;"	m	struct:boost::math::complemented6_type	access:public
dist	/usr/include/boost/math/distributions/complement.hpp	/^   const Dist& dist;$/;"	m	struct:boost::math::complemented7_type	access:public
dist	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^   Dist dist;$/;"	m	struct:boost::math::detail::pdf_minimizer	access:private
dist	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   Dist dist;$/;"	m	struct:boost::math::detail::generic_quantile_finder	access:private
dist	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   Dist dist;$/;"	m	struct:boost::math::detail::distribution_quantile_finder	access:private
dist	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            non_central_beta_distribution<T,Policy> dist;$/;"	m	struct:boost::math::detail::nc_beta_quantile_functor	access:private
dist	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            non_central_chi_squared_distribution<T,Policy> dist;$/;"	m	struct:boost::math::detail::nccs_quantile_functor	access:private
distribution	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  const boost::math::inverse_gaussian_distribution<RealType, Policy> distribution;$/;"	m	struct:boost::math::inverse_gaussian_quantile_complement_functor	access:private
distribution	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  const boost::math::inverse_gaussian_distribution<RealType, Policy> distribution;$/;"	m	struct:boost::math::inverse_gaussian_quantile_functor	access:private
distribution	/usr/include/boost/math/distributions/skew_normal.hpp	/^      const boost::math::skew_normal_distribution<RealType, Policy> distribution;$/;"	m	struct:boost::math::detail::skew_normal_mode_functor	access:private
distribution	/usr/include/boost/math/distributions/skew_normal.hpp	/^      const boost::math::skew_normal_distribution<RealType, Policy> distribution;$/;"	m	struct:boost::math::detail::skew_normal_quantile_functor	access:private
distribution_archetype	/usr/include/boost/math/concepts/distributions.hpp	/^   distribution_archetype(const distribution_archetype&); \/\/ Copy constructible.$/;"	p	class:boost::math::concepts::distribution_archetype	access:public	signature:(const distribution_archetype&)
distribution_archetype	/usr/include/boost/math/concepts/distributions.hpp	/^class distribution_archetype$/;"	c	namespace:boost::math::concepts
distribution_quantile_finder	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   distribution_quantile_finder(const Dist d, value_type p, value_type q)$/;"	f	struct:boost::math::detail::distribution_quantile_finder	access:public	signature:(const Dist d, value_type p, value_type q)
distribution_quantile_finder	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^struct distribution_quantile_finder$/;"	s	namespace:boost::math::detail
do_format	/usr/include/boost/math/policies/error_handling.hpp	/^inline std::string do_format(Formatter f, const Group& g)$/;"	f	namespace:boost::math::policies::detail	signature:(Formatter f, const Group& g)
do_get	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      virtual InputIterator do_get($/;"	f	class:boost::math::nonfinite_num_get	access:protected	signature:( InputIterator it, InputIterator end, std::ios_base& iosb, std::ios_base::iostate& state, double& val) const
do_get	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      virtual InputIterator do_get($/;"	f	class:boost::math::nonfinite_num_get	access:protected	signature:( InputIterator it, InputIterator end, std::ios_base& iosb, std::ios_base::iostate& state, float& val) const
do_get	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      virtual InputIterator do_get($/;"	f	class:boost::math::nonfinite_num_get	access:protected	signature:( InputIterator it, InputIterator end, std::ios_base& iosb, std::ios_base::iostate& state, long double& val) const
do_init	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_i0_initializer::init	access:public	signature:()
do_init	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_i1_initializer::init	access:public	signature:()
do_init	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_j0_initializer::init	access:public	signature:()
do_init	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_j1_initializer::init	access:public	signature:()
do_init	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_k0_initializer::init	access:public	signature:()
do_init	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_k1_initializer::init	access:public	signature:()
do_init	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_y0_initializer::init	access:public	signature:()
do_init	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::bessel_y1_initializer::init	access:public	signature:()
do_init	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::erf_inv_initializer::init	access:public	signature:()
do_init	/usr/include/boost/math/special_functions/erf.hpp	/^      static void do_init(const mpl::int_<0>&){}$/;"	f	struct:boost::math::detail::erf_initializer::init	access:public	signature:(const mpl::int_<0>&)
do_init	/usr/include/boost/math/special_functions/erf.hpp	/^      static void do_init(const mpl::int_<113>&)$/;"	f	struct:boost::math::detail::erf_initializer::init	access:public	signature:(const mpl::int_<113>&)
do_init	/usr/include/boost/math/special_functions/erf.hpp	/^      static void do_init(const mpl::int_<53>&)$/;"	f	struct:boost::math::detail::erf_initializer::init	access:public	signature:(const mpl::int_<53>&)
do_init	/usr/include/boost/math/special_functions/erf.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::erf_initializer::init	access:public	signature:(const mpl::int_<64>&)
do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<0>&){}$/;"	f	struct:boost::math::detail::expint_1_initializer::init	access:public	signature:(const mpl::int_<0>&)
do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<0>&){}$/;"	f	struct:boost::math::detail::expint_i_initializer::init	access:public	signature:(const mpl::int_<0>&)
do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<113>&)$/;"	f	struct:boost::math::detail::expint_1_initializer::init	access:public	signature:(const mpl::int_<113>&)
do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<113>&)$/;"	f	struct:boost::math::detail::expint_i_initializer::init	access:public	signature:(const mpl::int_<113>&)
do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<53>&)$/;"	f	struct:boost::math::detail::expint_1_initializer::init	access:public	signature:(const mpl::int_<53>&)
do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<53>&)$/;"	f	struct:boost::math::detail::expint_i_initializer::init	access:public	signature:(const mpl::int_<53>&)
do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::expint_1_initializer::init	access:public	signature:(const mpl::int_<64>&)
do_init	/usr/include/boost/math/special_functions/expint.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::expint_i_initializer::init	access:public	signature:(const mpl::int_<64>&)
do_init	/usr/include/boost/math/special_functions/expm1.hpp	/^      static void do_init(const mpl::int_<113>&)$/;"	f	struct:boost::math::detail::expm1_initializer::init	access:public	signature:(const mpl::int_<113>&)
do_init	/usr/include/boost/math/special_functions/expm1.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::expm1_initializer::init	access:public	signature:(const mpl::int_<64>&)
do_init	/usr/include/boost/math/special_functions/expm1.hpp	/^      static void do_init(const mpl::int_<N>&){}$/;"	f	struct:boost::math::detail::expm1_initializer::init	access:public	signature:(const mpl::int_<N>&)
do_init	/usr/include/boost/math/special_functions/gamma.hpp	/^      static void do_init(const mpl::int_<0>&)$/;"	f	struct:boost::math::detail::lgamma_initializer::init	access:public	signature:(const mpl::int_<0>&)
do_init	/usr/include/boost/math/special_functions/gamma.hpp	/^      static void do_init(const mpl::int_<113>&)$/;"	f	struct:boost::math::detail::lgamma_initializer::init	access:public	signature:(const mpl::int_<113>&)
do_init	/usr/include/boost/math/special_functions/gamma.hpp	/^      static void do_init(const mpl::int_<53>&){}$/;"	f	struct:boost::math::detail::igamma_initializer::init	access:public	signature:(const mpl::int_<53>&)
do_init	/usr/include/boost/math/special_functions/gamma.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::lgamma_initializer::init	access:public	signature:(const mpl::int_<64>&)
do_init	/usr/include/boost/math/special_functions/gamma.hpp	/^      static void do_init(const mpl::int_<N>&)$/;"	f	struct:boost::math::detail::igamma_initializer::init	access:public	signature:(const mpl::int_<N>&)
do_init	/usr/include/boost/math/special_functions/log1p.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::log1p_initializer::init	access:public	signature:(const mpl::int_<64>&)
do_init	/usr/include/boost/math/special_functions/log1p.hpp	/^      static void do_init(const mpl::int_<N>&){}$/;"	f	struct:boost::math::detail::log1p_initializer::init	access:public	signature:(const mpl::int_<N>&)
do_init	/usr/include/boost/math/special_functions/next.hpp	/^      static void do_init()$/;"	f	struct:boost::math::detail::min_shift_initializer::init	access:public	signature:()
do_init	/usr/include/boost/math/special_functions/owens_t.hpp	/^               static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::owens_t_initializer::init	access:public	signature:(const mpl::int_<64>&)
do_init	/usr/include/boost/math/special_functions/owens_t.hpp	/^               static void do_init(const mpl::int_<N>&){}$/;"	f	struct:boost::math::detail::owens_t_initializer::init	access:public	signature:(const mpl::int_<N>&)
do_init	/usr/include/boost/math/special_functions/zeta.hpp	/^      static void do_init(const mpl::int_<0>&){}$/;"	f	struct:boost::math::detail::zeta_initializer::init	access:public	signature:(const mpl::int_<0>&)
do_init	/usr/include/boost/math/special_functions/zeta.hpp	/^      static void do_init(const mpl::int_<113>&)$/;"	f	struct:boost::math::detail::zeta_initializer::init	access:public	signature:(const mpl::int_<113>&)
do_init	/usr/include/boost/math/special_functions/zeta.hpp	/^      static void do_init(const mpl::int_<53>&){}$/;"	f	struct:boost::math::detail::zeta_initializer::init	access:public	signature:(const mpl::int_<53>&)
do_init	/usr/include/boost/math/special_functions/zeta.hpp	/^      static void do_init(const mpl::int_<64>&)$/;"	f	struct:boost::math::detail::zeta_initializer::init	access:public	signature:(const mpl::int_<64>&)
do_inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   do_inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, typename Dist::value_type guess, const typename Dist::value_type& multiplier, typename Dist::value_type adder, const Tolerance& tol, boost::uintmax_t& max_iter)
do_put	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      virtual OutputIterator do_put($/;"	f	class:boost::math::nonfinite_num_put	access:protected	signature:( OutputIterator it, std::ios_base& iosb, CharType fill, double val) const
do_put	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      virtual OutputIterator do_put($/;"	f	class:boost::math::nonfinite_num_put	access:protected	signature:( OutputIterator it, std::ios_base& iosb, CharType fill, long double val) const
domain_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef domain_error<> domain_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
domain_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_domain_error<mpl::_1>, domain_error<> >::type domain_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
domain_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_domain_error<mpl::_1>, typename Policy::domain_error_type >::type domain_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
double_factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^T double_factorial(unsigned i, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned i, const Policy& pol)
double_factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^inline T double_factorial(unsigned i)$/;"	f	namespace:boost::math	signature:(unsigned i)
double_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   RT double_factorial(unsigned i);$/;"	p	namespace:boost::math	signature:(unsigned i)
double_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   RT double_factorial(unsigned i, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned i, const Policy& pol)
double_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct double_precision {};$/;"	s	namespace:boost::math::detail
double_t	/usr/include/boost/math/tr1.hpp	/^typedef double double_t;$/;"	t
dummy_param	/usr/include/boost/math/tools/test_data.hpp	/^   dummy_param = 0x80$/;"	e	enum:boost::math::tools::parameter_type
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float() {}$/;"	f	class:boost::math::ef::e_float	access:public	signature:()
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(boost::long_long_type c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(boost::long_long_type c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(boost::ulong_long_type c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(boost::ulong_long_type c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(char c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(char c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(const ::e_float& c) : m_value(c){}$/;"	f	class:boost::math::ef::e_float	access:public	signature:(const ::e_float& c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(double c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(double c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(float c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(float c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(int c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(int c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(long c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(long c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(long double c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(long double c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(short c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(short c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(signed char c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(signed char c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(unsigned char c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned char c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(unsigned int c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned int c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(unsigned long c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned long c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(unsigned short c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned short c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float(wchar_t c)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(wchar_t c)
e_float	/usr/include/boost/math/bindings/e_float.hpp	/^class e_float$/;"	c	namespace:boost::math::ef
ef	/usr/include/boost/math/bindings/e_float.hpp	/^namespace boost{ namespace math{ namespace ef{$/;"	n	namespace:boost::math
ef	/usr/include/boost/math/bindings/e_float.hpp	/^} namespace ef{$/;"	n	namespace:boost::math
ellint_1	/usr/include/boost/math/special_functions/ellint_1.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_1(T1 k, T2 phi)$/;"	f	namespace:boost::math	signature:(T1 k, T2 phi)
ellint_1	/usr/include/boost/math/special_functions/ellint_1.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_1(T1 k, T2 phi, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 k, T2 phi, const Policy& pol)
ellint_1	/usr/include/boost/math/special_functions/ellint_1.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_1(T1 k, T2 phi, const mpl::false_&)$/;"	f	namespace:boost::math::detail	signature:(T1 k, T2 phi, const mpl::false_&)
ellint_1	/usr/include/boost/math/special_functions/ellint_1.hpp	/^inline typename tools::promote_args<T>::type ellint_1(T k)$/;"	f	namespace:boost::math	signature:(T k)
ellint_1	/usr/include/boost/math/special_functions/ellint_1.hpp	/^inline typename tools::promote_args<T>::type ellint_1(T k, const Policy& pol, const mpl::true_&)$/;"	f	namespace:boost::math::detail	signature:(T k, const Policy& pol, const mpl::true_&)
ellint_1	/usr/include/boost/math/special_functions/ellint_1.hpp	/^typename tools::promote_args<T1, T2>::type ellint_1(T1 k, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 k, T2 phi, const Policy& pol)
ellint_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type ellint_1(T1 k, T2 phi);$/;"	p	namespace:boost::math	signature:(T1 k, T2 phi)
ellint_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type ellint_1(T1 k, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 k, T2 phi, const Policy& pol)
ellint_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type ellint_1(T k);$/;"	p	namespace:boost::math	signature:(T k)
ellint_1	/usr/include/boost/math/tr1_c_macros.ipp	641;"	d	file:
ellint_1	/usr/include/boost/math/tr1_c_macros.ipp	643;"	d	file:
ellint_1f	/usr/include/boost/math/tr1_c_macros.ipp	645;"	d	file:
ellint_1f	/usr/include/boost/math/tr1_c_macros.ipp	647;"	d	file:
ellint_1l	/usr/include/boost/math/tr1_c_macros.ipp	649;"	d	file:
ellint_1l	/usr/include/boost/math/tr1_c_macros.ipp	651;"	d	file:
ellint_2	/usr/include/boost/math/special_functions/ellint_2.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_2(T1 k, T2 phi)$/;"	f	namespace:boost::math	signature:(T1 k, T2 phi)
ellint_2	/usr/include/boost/math/special_functions/ellint_2.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_2(T1 k, T2 phi, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 k, T2 phi, const Policy& pol)
ellint_2	/usr/include/boost/math/special_functions/ellint_2.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_2(T1 k, T2 phi, const mpl::false_&)$/;"	f	namespace:boost::math::detail	signature:(T1 k, T2 phi, const mpl::false_&)
ellint_2	/usr/include/boost/math/special_functions/ellint_2.hpp	/^inline typename tools::promote_args<T>::type ellint_2(T k)$/;"	f	namespace:boost::math	signature:(T k)
ellint_2	/usr/include/boost/math/special_functions/ellint_2.hpp	/^inline typename tools::promote_args<T>::type ellint_2(T k, const Policy& pol, const mpl::true_&)$/;"	f	namespace:boost::math::detail	signature:(T k, const Policy& pol, const mpl::true_&)
ellint_2	/usr/include/boost/math/special_functions/ellint_2.hpp	/^typename tools::promote_args<T1, T2>::type ellint_2(T1 k, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 k, T2 phi, const Policy& pol)
ellint_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type ellint_2(T1 k, T2 phi);$/;"	p	namespace:boost::math	signature:(T1 k, T2 phi)
ellint_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type ellint_2(T1 k, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 k, T2 phi, const Policy& pol)
ellint_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type ellint_2(T k);$/;"	p	namespace:boost::math	signature:(T k)
ellint_2	/usr/include/boost/math/tr1_c_macros.ipp	655;"	d	file:
ellint_2	/usr/include/boost/math/tr1_c_macros.ipp	657;"	d	file:
ellint_2f	/usr/include/boost/math/tr1_c_macros.ipp	659;"	d	file:
ellint_2f	/usr/include/boost/math/tr1_c_macros.ipp	661;"	d	file:
ellint_2l	/usr/include/boost/math/tr1_c_macros.ipp	663;"	d	file:
ellint_2l	/usr/include/boost/math/tr1_c_macros.ipp	665;"	d	file:
ellint_3	/usr/include/boost/math/special_functions/ellint_3.hpp	/^inline typename tools::promote_args<T1, T2, T3>::type ellint_3(T1 k, T2 v, T3 phi, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 k, T2 v, T3 phi, const Policy& pol)
ellint_3	/usr/include/boost/math/special_functions/ellint_3.hpp	/^inline typename tools::promote_args<T1, T2, T3>::type ellint_3(T1 k, T2 v, T3 phi, const mpl::false_&)$/;"	f	namespace:boost::math::detail	signature:(T1 k, T2 v, T3 phi, const mpl::false_&)
ellint_3	/usr/include/boost/math/special_functions/ellint_3.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_3(T1 k, T2 v)$/;"	f	namespace:boost::math	signature:(T1 k, T2 v)
ellint_3	/usr/include/boost/math/special_functions/ellint_3.hpp	/^inline typename tools::promote_args<T1, T2>::type ellint_3(T1 k, T2 v, const Policy& pol, const mpl::true_&)$/;"	f	namespace:boost::math::detail	signature:(T1 k, T2 v, const Policy& pol, const mpl::true_&)
ellint_3	/usr/include/boost/math/special_functions/ellint_3.hpp	/^typename detail::ellint_3_result<T1, T2, T3>::type ellint_3(T1 k, T2 v, T3 phi)$/;"	f	namespace:boost::math	signature:(T1 k, T2 v, T3 phi)
ellint_3	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2, T3>::type ellint_3(T1 k, T2 v, T3 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 k, T2 v, T3 phi, const Policy& pol)
ellint_3	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type ellint_3(T1 k, T2 v);$/;"	p	namespace:boost::math	signature:(T1 k, T2 v)
ellint_3	/usr/include/boost/math/tr1_c_macros.ipp	669;"	d	file:
ellint_3	/usr/include/boost/math/tr1_c_macros.ipp	671;"	d	file:
ellint_3_result	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   struct ellint_3_result$/;"	s	namespace:boost::math::detail
ellint_3f	/usr/include/boost/math/tr1_c_macros.ipp	673;"	d	file:
ellint_3f	/usr/include/boost/math/tr1_c_macros.ipp	675;"	d	file:
ellint_3l	/usr/include/boost/math/tr1_c_macros.ipp	677;"	d	file:
ellint_3l	/usr/include/boost/math/tr1_c_macros.ipp	679;"	d	file:
ellint_e_imp	/usr/include/boost/math/special_functions/ellint_2.hpp	/^T ellint_e_imp(T k, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T k, const Policy& pol)
ellint_e_imp	/usr/include/boost/math/special_functions/ellint_2.hpp	/^T ellint_e_imp(T k, const Policy& pol);$/;"	p	namespace:boost::math::detail	signature:(T k, const Policy& pol)
ellint_e_imp	/usr/include/boost/math/special_functions/ellint_2.hpp	/^T ellint_e_imp(T phi, T k, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T phi, T k, const Policy& pol)
ellint_f_imp	/usr/include/boost/math/special_functions/ellint_1.hpp	/^T ellint_f_imp(T phi, T k, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T phi, T k, const Policy& pol)
ellint_k_imp	/usr/include/boost/math/special_functions/ellint_1.hpp	/^T ellint_k_imp(T k, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T k, const Policy& pol)
ellint_k_imp	/usr/include/boost/math/special_functions/ellint_1.hpp	/^T ellint_k_imp(T k, const Policy& pol);$/;"	p	namespace:boost::math::detail	signature:(T k, const Policy& pol)
ellint_pi_imp	/usr/include/boost/math/special_functions/ellint_3.hpp	/^T ellint_pi_imp(T v, T k, T vc, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T k, T vc, const Policy& pol)
ellint_pi_imp	/usr/include/boost/math/special_functions/ellint_3.hpp	/^T ellint_pi_imp(T v, T k, T vc, const Policy& pol);$/;"	p	namespace:boost::math::detail	signature:(T v, T k, T vc, const Policy& pol)
ellint_pi_imp	/usr/include/boost/math/special_functions/ellint_3.hpp	/^T ellint_pi_imp(T v, T phi, T k, T vc, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T phi, T k, T vc, const Policy& pol)
ellint_rc	/usr/include/boost/math/special_functions/ellint_rc.hpp	/^   ellint_rc(T1 x, T2 y)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y)
ellint_rc	/usr/include/boost/math/special_functions/ellint_rc.hpp	/^   ellint_rc(T1 x, T2 y, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, const Policy& pol)
ellint_rc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rc(T1 x, T2 y);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y)
ellint_rc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rc(T1 x, T2 y, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, const Policy& pol)
ellint_rc_imp	/usr/include/boost/math/special_functions/ellint_rc.hpp	/^T ellint_rc_imp(T x, T y, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, T y, const Policy& pol)
ellint_rd	/usr/include/boost/math/special_functions/ellint_rd.hpp	/^   ellint_rd(T1 x, T2 y, T3 z)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, T3 z)
ellint_rd	/usr/include/boost/math/special_functions/ellint_rd.hpp	/^   ellint_rd(T1 x, T2 y, T3 z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, T3 z, const Policy& pol)
ellint_rd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rd(T1 x, T2 y, T3 z);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, T3 z)
ellint_rd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rd(T1 x, T2 y, T3 z, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, T3 z, const Policy& pol)
ellint_rd_imp	/usr/include/boost/math/special_functions/ellint_rd.hpp	/^T ellint_rd_imp(T x, T y, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, T y, T z, const Policy& pol)
ellint_rf	/usr/include/boost/math/special_functions/ellint_rf.hpp	/^   ellint_rf(T1 x, T2 y, T3 z)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, T3 z)
ellint_rf	/usr/include/boost/math/special_functions/ellint_rf.hpp	/^   ellint_rf(T1 x, T2 y, T3 z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, T3 z, const Policy& pol)
ellint_rf	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rf(T1 x, T2 y, T3 z);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, T3 z)
ellint_rf	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rf(T1 x, T2 y, T3 z, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, T3 z, const Policy& pol)
ellint_rf_imp	/usr/include/boost/math/special_functions/ellint_rf.hpp	/^T ellint_rf_imp(T x, T y, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, T y, T z, const Policy& pol)
ellint_rj	/usr/include/boost/math/special_functions/ellint_rj.hpp	/^   ellint_rj(T1 x, T2 y, T3 z, T4 p)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, T3 z, T4 p)
ellint_rj	/usr/include/boost/math/special_functions/ellint_rj.hpp	/^   ellint_rj(T1 x, T2 y, T3 z, T4 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, T3 z, T4 p, const Policy& pol)
ellint_rj	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rj(T1 x, T2 y, T3 z, T4 p);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, T3 z, T4 p)
ellint_rj	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ellint_rj(T1 x, T2 y, T3 z, T4 p, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, T3 z, T4 p, const Policy& pol)
ellint_rj_imp	/usr/include/boost/math/special_functions/ellint_rj.hpp	/^T ellint_rj_imp(T x, T y, T z, T p, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, T y, T z, T p, const Policy& pol)
empty	/usr/include/boost/math/tools/test_data.hpp	/^   bool empty()const{ return m_data.empty(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:() const
end	/usr/include/boost/math/tools/test_data.hpp	/^   const_iterator end()const { return m_data.end(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:() const
end	/usr/include/boost/math/tools/test_data.hpp	/^   iterator end() { return m_data.end(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:()
end_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::end<Seq>::type end_type;$/;"	t	struct:boost::math::policies::detail::find_arg	access:private
eps	/usr/include/boost/math/tools/toms748_solve.hpp	/^   T eps;$/;"	m	class:boost::math::tools::eps_tolerance	access:private
eps_tolerance	/usr/include/boost/math/tools/toms748_solve.hpp	/^   eps_tolerance(unsigned bits)$/;"	f	class:boost::math::tools::eps_tolerance	access:public	signature:(unsigned bits)
eps_tolerance	/usr/include/boost/math/tools/toms748_solve.hpp	/^class eps_tolerance$/;"	c	namespace:boost::math::tools
epsilon	/usr/include/boost/math/bindings/e_float.hpp	/^      static const ::boost::math::ef::e_float epsilon (void)$/;"	f	class:std::numeric_limits	access:public	signature:(void)
equal_ceil	/usr/include/boost/math/tools/toms748_solve.hpp	/^   equal_ceil(){}$/;"	f	struct:boost::math::tools::equal_ceil	access:public	signature:()
equal_ceil	/usr/include/boost/math/tools/toms748_solve.hpp	/^struct equal_ceil$/;"	s	namespace:boost::math::tools
equal_floor	/usr/include/boost/math/tools/toms748_solve.hpp	/^   equal_floor(){}$/;"	f	struct:boost::math::tools::equal_floor	access:public	signature:()
equal_floor	/usr/include/boost/math/tools/toms748_solve.hpp	/^struct equal_floor$/;"	s	namespace:boost::math::tools
equal_nearest_integer	/usr/include/boost/math/tools/toms748_solve.hpp	/^   equal_nearest_integer(){}$/;"	f	struct:boost::math::tools::equal_nearest_integer	access:public	signature:()
equal_nearest_integer	/usr/include/boost/math/tools/toms748_solve.hpp	/^struct equal_nearest_integer$/;"	s	namespace:boost::math::tools
erf	/usr/include/boost/math/special_functions/erf.hpp	/^inline typename tools::promote_args<T>::type erf(T z)$/;"	f	namespace:boost::math	signature:(T z)
erf	/usr/include/boost/math/special_functions/erf.hpp	/^inline typename tools::promote_args<T>::type erf(T z, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math	signature:(T z, const Policy& )
erf	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erf(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
erf	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erf(RT z, const Policy&);$/;"	p	namespace:boost::math	signature:(RT z, const Policy&)
erf	/usr/include/boost/math/tr1_c_macros.ipp	77;"	d	file:
erf	/usr/include/boost/math/tr1_c_macros.ipp	79;"	d	file:
erf_asympt_series_t	/usr/include/boost/math/special_functions/erf.hpp	/^   erf_asympt_series_t(T z) : xx(2 * -z * z), tk(1)$/;"	f	struct:boost::math::detail::erf_asympt_series_t	access:public	signature:(T z)
erf_asympt_series_t	/usr/include/boost/math/special_functions/erf.hpp	/^struct erf_asympt_series_t$/;"	s	namespace:boost::math::detail
erf_asymptotic_limit	/usr/include/boost/math/special_functions/erf.hpp	/^inline T erf_asymptotic_limit()$/;"	f	namespace:boost::math::detail	signature:()
erf_asymptotic_limit_N	/usr/include/boost/math/special_functions/erf.hpp	/^inline float erf_asymptotic_limit_N(const T&)$/;"	f	namespace:boost::math::detail	signature:(const T&)
erf_asymptotic_limit_N	/usr/include/boost/math/special_functions/erf.hpp	/^inline float erf_asymptotic_limit_N(const mpl::int_<106>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<106>&)
erf_asymptotic_limit_N	/usr/include/boost/math/special_functions/erf.hpp	/^inline float erf_asymptotic_limit_N(const mpl::int_<113>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<113>&)
erf_asymptotic_limit_N	/usr/include/boost/math/special_functions/erf.hpp	/^inline float erf_asymptotic_limit_N(const mpl::int_<24>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<24>&)
erf_asymptotic_limit_N	/usr/include/boost/math/special_functions/erf.hpp	/^inline float erf_asymptotic_limit_N(const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<53>&)
erf_asymptotic_limit_N	/usr/include/boost/math/special_functions/erf.hpp	/^inline float erf_asymptotic_limit_N(const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const mpl::int_<64>&)
erf_imp	/usr/include/boost/math/special_functions/erf.hpp	/^T erf_imp(T z, bool invert, const Policy& pol, const Tag& t)$/;"	f	namespace:boost::math::detail	signature:(T z, bool invert, const Policy& pol, const Tag& t)
erf_imp	/usr/include/boost/math/special_functions/erf.hpp	/^T erf_imp(T z, bool invert, const Policy& pol, const mpl::int_<113>& t)$/;"	f	namespace:boost::math::detail	signature:(T z, bool invert, const Policy& pol, const mpl::int_<113>& t)
erf_imp	/usr/include/boost/math/special_functions/erf.hpp	/^T erf_imp(T z, bool invert, const Policy& pol, const mpl::int_<53>& t)$/;"	f	namespace:boost::math::detail	signature:(T z, bool invert, const Policy& pol, const mpl::int_<53>& t)
erf_imp	/usr/include/boost/math/special_functions/erf.hpp	/^T erf_imp(T z, bool invert, const Policy& pol, const mpl::int_<64>& t)$/;"	f	namespace:boost::math::detail	signature:(T z, bool invert, const Policy& pol, const mpl::int_<64>& t)
erf_initializer	/usr/include/boost/math/special_functions/erf.hpp	/^struct erf_initializer$/;"	s	namespace:boost::math::detail
erf_inv	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^inline typename tools::promote_args<T>::type erf_inv(T z)$/;"	f	namespace:boost::math	signature:(T z)
erf_inv	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^typename tools::promote_args<T>::type erf_inv(T z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T z, const Policy& pol)
erf_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erf_inv(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
erf_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erf_inv(RT z, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT z, const Policy& pol)
erf_inv_imp	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class erf_inv_imp(const mpfr_class& p, const mpfr_class& q, const Policy&, const boost::mpl::int_<64>*)$/;"	f	namespace:boost::math::detail	signature:(const mpfr_class& p, const mpfr_class& q, const Policy&, const boost::mpl::int_<64>*)
erf_inv_imp	/usr/include/boost/math/bindings/mpreal.hpp	/^mpfr::mpreal erf_inv_imp(const mpfr::mpreal& p, const mpfr::mpreal& q, const Policy&, const boost::mpl::int_<64>*)$/;"	f	namespace:boost::math::detail	signature:(const mpfr::mpreal& p, const mpfr::mpreal& q, const Policy&, const boost::mpl::int_<64>*)
erf_inv_imp	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^T erf_inv_imp(const T& p, const T& q, const Policy& pol, const boost::mpl::int_<0>*)$/;"	f	namespace:boost::math::detail	signature:(const T& p, const T& q, const Policy& pol, const boost::mpl::int_<0>*)
erf_inv_imp	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^T erf_inv_imp(const T& p, const T& q, const Policy&, const boost::mpl::int_<64>*)$/;"	f	namespace:boost::math::detail	signature:(const T& p, const T& q, const Policy&, const boost::mpl::int_<64>*)
erf_inv_initializer	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^struct erf_inv_initializer$/;"	s	namespace:boost::math::detail
erf_roots	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   erf_roots(T z, int s) : target(z), sign(s) {}$/;"	f	struct:boost::math::detail::erf_roots	access:public	signature:(T z, int s)
erf_roots	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^struct erf_roots$/;"	s	namespace:boost::math::detail
erfc	/usr/include/boost/math/special_functions/erf.hpp	/^inline typename tools::promote_args<T>::type erfc(T z)$/;"	f	namespace:boost::math	signature:(T z)
erfc	/usr/include/boost/math/special_functions/erf.hpp	/^inline typename tools::promote_args<T>::type erfc(T z, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math	signature:(T z, const Policy& )
erfc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erfc(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
erfc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erfc(RT z, const Policy&);$/;"	p	namespace:boost::math	signature:(RT z, const Policy&)
erfc	/usr/include/boost/math/tr1_c_macros.ipp	90;"	d	file:
erfc	/usr/include/boost/math/tr1_c_macros.ipp	92;"	d	file:
erfc_inv	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^inline typename tools::promote_args<T>::type erfc_inv(T z)$/;"	f	namespace:boost::math	signature:(T z)
erfc_inv	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^typename tools::promote_args<T>::type erfc_inv(T z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T z, const Policy& pol)
erfc_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erfc_inv(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
erfc_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type erfc_inv(RT z, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT z, const Policy& pol)
erfcf	/usr/include/boost/math/tr1_c_macros.ipp	94;"	d	file:
erfcf	/usr/include/boost/math/tr1_c_macros.ipp	96;"	d	file:
erfcl	/usr/include/boost/math/tr1_c_macros.ipp	100;"	d	file:
erfcl	/usr/include/boost/math/tr1_c_macros.ipp	98;"	d	file:
erff	/usr/include/boost/math/tr1_c_macros.ipp	81;"	d	file:
erff	/usr/include/boost/math/tr1_c_macros.ipp	83;"	d	file:
erfl	/usr/include/boost/math/tr1_c_macros.ipp	85;"	d	file:
erfl	/usr/include/boost/math/tr1_c_macros.ipp	87;"	d	file:
errno_on_error	/usr/include/boost/math/policies/policy.hpp	/^   errno_on_error = 1,$/;"	e	enum:boost::math::policies::error_policy_type
error_policy_type	/usr/include/boost/math/policies/policy.hpp	/^enum error_policy_type$/;"	g	namespace:boost::math::policies
error_term	/usr/include/boost/math/tools/remez.hpp	/^   T error_term()const$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:() const
evaluate	/usr/include/boost/math/tools/polynomial.hpp	/^   T evaluate(T z)const$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(T z) const
evaluate_chebyshev	/usr/include/boost/math/tools/polynomial.hpp	/^T evaluate_chebyshev(const Seq& a, const T& x)$/;"	f	namespace:boost::math::tools	signature:(const Seq& a, const T& x)
evaluate_even_polynomial	/usr/include/boost/math/tools/rational.hpp	/^inline U evaluate_even_polynomial(const T* poly, U z, std::size_t count)$/;"	f	namespace:boost::math::tools	signature:(const T* poly, U z, std::size_t count)
evaluate_even_polynomial	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_even_polynomial(const boost::array<T,N>& a, const V& z)$/;"	f	namespace:boost::math::tools	signature:(const boost::array<T,N>& a, const V& z)
evaluate_odd_polynomial	/usr/include/boost/math/tools/rational.hpp	/^inline U evaluate_odd_polynomial(const T* poly, U z, std::size_t count)$/;"	f	namespace:boost::math::tools	signature:(const T* poly, U z, std::size_t count)
evaluate_odd_polynomial	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_odd_polynomial(const boost::array<T,N>& a, const V& z)$/;"	f	namespace:boost::math::tools	signature:(const boost::array<T,N>& a, const V& z)
evaluate_polynomial	/usr/include/boost/math/tools/rational.hpp	/^U evaluate_polynomial(const T* poly, U const& z, std::size_t count);$/;"	p	namespace:boost::math::tools	signature:(const T* poly, U const& z, std::size_t count)
evaluate_polynomial	/usr/include/boost/math/tools/rational.hpp	/^inline U evaluate_polynomial(const T* poly, U const& z, std::size_t count)$/;"	f	namespace:boost::math::tools	signature:(const T* poly, U const& z, std::size_t count)
evaluate_polynomial	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_polynomial(const boost::array<T,N>& a, const V& val)$/;"	f	namespace:boost::math::tools	signature:(const boost::array<T,N>& a, const V& val)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<19>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<19>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<20>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<20>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<19>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<19>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<20>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<20>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<19>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<10>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<11>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<12>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<13>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<14>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<15>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<16>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<17>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<18>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<19>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<20>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<20>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<2>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<3>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<4>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<5>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<6>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<7>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<8>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& x, const mpl::int_<9>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V&, const mpl::int_<1>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^inline V evaluate_polynomial_c_imp(const T*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const V&, const mpl::int_<0>*)
evaluate_polynomial_c_imp	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_polynomial_c_imp(const T* a, const V& val, const Tag*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const V& val, const Tag*)
evaluate_rational	/usr/include/boost/math/tools/rational.hpp	/^V evaluate_rational(const T* num, const U* denom, const V& z_, std::size_t count)$/;"	f	namespace:boost::math::tools	signature:(const T* num, const U* denom, const V& z_, std::size_t count)
evaluate_rational	/usr/include/boost/math/tools/rational.hpp	/^V evaluate_rational(const T* num, const U* denom, const V& z_, std::size_t count);$/;"	p	namespace:boost::math::tools	signature:(const T* num, const U* denom, const V& z_, std::size_t count)
evaluate_rational	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_rational(const boost::array<T,N>& a, const boost::array<U,N>& b, const V& z)$/;"	f	namespace:boost::math::tools	signature:(const boost::array<T,N>& a, const boost::array<U,N>& b, const V& z)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<19>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<19>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<20>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<20>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<19>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<19>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<20>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<20>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<19>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<10>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<10>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<11>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<11>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<12>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<12>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<13>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<13>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<14>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<14>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<15>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<15>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<16>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<16>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<17>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<17>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<18>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<18>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<19>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<19>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<20>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<20>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<2>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<2>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<3>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<3>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<4>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<4>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<5>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<5>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<6>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<6>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<7>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<7>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<8>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<8>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const mpl::int_<9>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V& x, const mpl::int_<9>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const mpl::int_<1>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* a, const U* b, const V&, const mpl::int_<1>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^inline V evaluate_rational_c_imp(const T*, const U*, const V&, const mpl::int_<0>*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const U*, const V&, const mpl::int_<0>*)
evaluate_rational_c_imp	/usr/include/boost/math/tools/rational.hpp	/^inline V evaluate_rational_c_imp(const T* num, const U* denom, const V& z, const Tag*)$/;"	f	namespace:boost::math::tools::detail	signature:(const T* num, const U* denom, const V& z, const Tag*)
evaluation	/usr/include/boost/math/bindings/mpfr.hpp	/^struct evaluation<__gmp_expr<T, U>, Policy>$/;"	s	namespace:boost::math::policies
evaluation	/usr/include/boost/math/policies/policy.hpp	/^struct evaluation$/;"	s	namespace:boost::math::policies
evaluation	/usr/include/boost/math/policies/policy.hpp	/^struct evaluation<double, Policy>$/;"	s	namespace:boost::math::policies
evaluation	/usr/include/boost/math/policies/policy.hpp	/^struct evaluation<float, Policy>$/;"	s	namespace:boost::math::policies
evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^   evaluation_error(const std::string& s) : std::runtime_error(s){}$/;"	f	class:boost::math::evaluation_error	access:public	signature:(const std::string& s)
evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^class evaluation_error : public std::runtime_error$/;"	c	namespace:boost::math	inherits:std::runtime_error
evaluation_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef evaluation_error<> evaluation_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
evaluation_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_evaluation_error<mpl::_1>, evaluation_error<> >::type evaluation_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
evaluation_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_evaluation_error<mpl::_1>, typename Policy::evaluation_error_type >::type evaluation_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
exp	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float exp(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
exp	/usr/include/boost/math/bindings/rr.hpp	/^inline RR exp(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
exp	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept exp(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
exp	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept exp(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
exp	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        exp(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
exp	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    exp(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
expint	/usr/include/boost/math/special_functions/expint.hpp	/^   expint(T const z, U const u)$/;"	f	namespace:boost::math	signature:(T const z, U const u)
expint	/usr/include/boost/math/special_functions/expint.hpp	/^   expint(T z)$/;"	f	namespace:boost::math	signature:(T z)
expint	/usr/include/boost/math/special_functions/expint.hpp	/^   expint(unsigned n, T z, const Policy& \/*pol*\/)$/;"	f	namespace:boost::math	signature:(unsigned n, T z, const Policy& )
expint	/usr/include/boost/math/special_functions/expint.hpp	/^   expint(unsigned n, T z, const Policy& \/*pol*\/);$/;"	p	namespace:boost::math	signature:(unsigned n, T z, const Policy& )
expint	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::expint_result<T, U>::type expint(T const z, U const u);$/;"	p	namespace:boost::math	signature:(T const z, U const u)
expint	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type expint(T z);$/;"	p	namespace:boost::math	signature:(T z)
expint	/usr/include/boost/math/tr1_c_macros.ipp	683;"	d	file:
expint	/usr/include/boost/math/tr1_c_macros.ipp	685;"	d	file:
expint_1_initializer	/usr/include/boost/math/special_functions/expint.hpp	/^struct expint_1_initializer$/;"	s	namespace:boost::math::detail
expint_1_rational	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_1_rational(const T& z, const mpl::int_<113>&)$/;"	f	namespace:boost::math::detail	signature:(const T& z, const mpl::int_<113>&)
expint_1_rational	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_1_rational(const T& z, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const T& z, const mpl::int_<53>&)
expint_1_rational	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_1_rational(const T& z, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const T& z, const mpl::int_<64>&)
expint_1_rational	/usr/include/boost/math/special_functions/expint.hpp	/^inline T expint_1_rational(const T& z, const mpl::int_<0>&)$/;"	f	namespace:boost::math::detail	signature:(const T& z, const mpl::int_<0>&)
expint_as_fraction	/usr/include/boost/math/special_functions/expint.hpp	/^inline T expint_as_fraction(unsigned n, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T z, const Policy& pol)
expint_as_series	/usr/include/boost/math/special_functions/expint.hpp	/^inline T expint_as_series(unsigned n, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T z, const Policy& pol)
expint_forwarder	/usr/include/boost/math/special_functions/expint.hpp	/^   expint_forwarder(T z, const Policy& \/*pol*\/, mpl::true_ const&)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& , mpl::true_ const&)
expint_forwarder	/usr/include/boost/math/special_functions/expint.hpp	/^expint_forwarder(unsigned n, T z, const mpl::false_&)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T z, const mpl::false_&)
expint_fraction	/usr/include/boost/math/special_functions/expint.hpp	/^   expint_fraction(unsigned n_, T z_) : b(n_ + z_), i(-1), n(n_){}$/;"	f	struct:boost::math::detail::expint_fraction	access:public	signature:(unsigned n_, T z_)
expint_fraction	/usr/include/boost/math/special_functions/expint.hpp	/^struct expint_fraction$/;"	s	namespace:boost::math::detail
expint_i_113b	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113b(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
expint_i_113c	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113c(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
expint_i_113d	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113d(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
expint_i_113e	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113e(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
expint_i_113f	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113f(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
expint_i_113g	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113g(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
expint_i_113h	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_113h(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
expint_i_as_series	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_i_as_series(T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol)
expint_i_imp	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_i_imp(T z, const Policy& pol, const Tag& tag)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const Tag& tag)
expint_i_imp	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_i_imp(T z, const Policy& pol, const mpl::int_<113>& tag)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const mpl::int_<113>& tag)
expint_i_imp	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_i_imp(T z, const Policy& pol, const mpl::int_<53>& tag)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const mpl::int_<53>& tag)
expint_i_imp	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_i_imp(T z, const Policy& pol, const mpl::int_<64>& tag)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const mpl::int_<64>& tag)
expint_i_imp_113a	/usr/include/boost/math/special_functions/expint.hpp	/^void expint_i_imp_113a(T& result, const T& z)$/;"	f	namespace:boost::math::detail	signature:(T& result, const T& z)
expint_i_initializer	/usr/include/boost/math/special_functions/expint.hpp	/^struct expint_i_initializer$/;"	s	namespace:boost::math::detail
expint_i_series	/usr/include/boost/math/special_functions/expint.hpp	/^   expint_i_series(T z_) : k(0), z_k(1), z(z_){}$/;"	f	struct:boost::math::detail::expint_i_series	access:public	signature:(T z_)
expint_i_series	/usr/include/boost/math/special_functions/expint.hpp	/^struct expint_i_series$/;"	s	namespace:boost::math::detail
expint_imp	/usr/include/boost/math/special_functions/expint.hpp	/^T expint_imp(unsigned n, T z, const Policy& pol, const Tag& tag)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T z, const Policy& pol, const Tag& tag)
expint_result	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   struct expint_result$/;"	s	namespace:boost::math::detail
expint_series	/usr/include/boost/math/special_functions/expint.hpp	/^   expint_series(unsigned k_, T z_, T x_k_, T denom_, T fact_) $/;"	f	struct:boost::math::detail::expint_series	access:public	signature:(unsigned k_, T z_, T x_k_, T denom_, T fact_)
expint_series	/usr/include/boost/math/special_functions/expint.hpp	/^struct expint_series$/;"	s	namespace:boost::math::detail
expintf	/usr/include/boost/math/tr1_c_macros.ipp	687;"	d	file:
expintf	/usr/include/boost/math/tr1_c_macros.ipp	689;"	d	file:
expintl	/usr/include/boost/math/tr1_c_macros.ipp	691;"	d	file:
expintl	/usr/include/boost/math/tr1_c_macros.ipp	693;"	d	file:
expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline double expm1(double x, const policies::policy<>&){ return ::expm1(x); }$/;"	f	namespace:boost::math	signature:(double x, const policies::policy<>&)
expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline double expm1(double z)$/;"	f	namespace:boost::math	signature:(double z)
expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline float expm1(float x, const policies::policy<>&){ return ::expm1f(x); }$/;"	f	namespace:boost::math	signature:(float x, const policies::policy<>&)
expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline float expm1(float x, const policies::policy<>&){ return static_cast<float>(::expm1(x)); }$/;"	f	namespace:boost::math	signature:(float x, const policies::policy<>&)
expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline float expm1(float z)$/;"	f	namespace:boost::math	signature:(float z)
expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline long double expm1(long double x, const policies::policy<>&){ return ::expm1l(x); }$/;"	f	namespace:boost::math	signature:(long double x, const policies::policy<>&)
expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline long double expm1(long double z)$/;"	f	namespace:boost::math	signature:(long double z)
expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline typename tools::promote_args<T>::type expm1(T x)$/;"	f	namespace:boost::math	signature:(T x)
expm1	/usr/include/boost/math/special_functions/expm1.hpp	/^inline typename tools::promote_args<T>::type expm1(T x, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math	signature:(T x, const Policy& )
expm1	/usr/include/boost/math/special_functions/expm1.hpp	298;"	d
expm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type expm1(T);$/;"	p	namespace:boost::math	signature:(T)
expm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type expm1(T, const Policy&);$/;"	p	namespace:boost::math	signature:(T, const Policy&)
expm1	/usr/include/boost/math/tr1_c_macros.ipp	118;"	d	file:
expm1	/usr/include/boost/math/tr1_c_macros.ipp	120;"	d	file:
expm1_imp	/usr/include/boost/math/special_functions/expm1.hpp	/^T expm1_imp(T x, const mpl::int_<0>&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<0>&, const Policy& pol)
expm1_imp	/usr/include/boost/math/special_functions/expm1.hpp	/^T expm1_imp(T x, const mpl::int_<113>&, const P& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<113>&, const P& pol)
expm1_imp	/usr/include/boost/math/special_functions/expm1.hpp	/^T expm1_imp(T x, const mpl::int_<53>&, const P& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<53>&, const P& pol)
expm1_imp	/usr/include/boost/math/special_functions/expm1.hpp	/^T expm1_imp(T x, const mpl::int_<64>&, const P& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const mpl::int_<64>&, const P& pol)
expm1_initializer	/usr/include/boost/math/special_functions/expm1.hpp	/^struct expm1_initializer$/;"	s	namespace:boost::math::detail
expm1_series	/usr/include/boost/math/special_functions/expm1.hpp	/^     expm1_series(T x)$/;"	f	struct:boost::math::detail::expm1_series	access:public	signature:(T x)
expm1_series	/usr/include/boost/math/special_functions/expm1.hpp	/^     expm1_series(const expm1_series&);$/;"	p	struct:boost::math::detail::expm1_series	access:private	signature:(const expm1_series&)
expm1_series	/usr/include/boost/math/special_functions/expm1.hpp	/^  struct expm1_series$/;"	s	namespace:boost::math::detail
expm1f	/usr/include/boost/math/tr1_c_macros.ipp	122;"	d	file:
expm1f	/usr/include/boost/math/tr1_c_macros.ipp	124;"	d	file:
expm1l	/usr/include/boost/math/tr1_c_macros.ipp	126;"	d	file:
expm1l	/usr/include/boost/math/tr1_c_macros.ipp	128;"	d	file:
exponent	/usr/include/boost/math/bindings/rr.hpp	/^   long exponent() const$/;"	f	class:boost::math::ntl::RR	access:public	signature:() const
exponent	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static const uint64_t exponent = ((uint64_t)0x7ff00000) << 32;$/;"	m	struct:boost::math::detail::fp_traits_non_native	access:public
exponent	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static const uint64_t exponent = (uint64_t)0x7ff00000 << 32;$/;"	m	struct:boost::math::detail::fp_traits_non_native	access:public
exponential	/usr/include/boost/math/distributions/exponential.hpp	/^typedef exponential_distribution<double> exponential;$/;"	t	namespace:boost::math
exponential_distribution	/usr/include/boost/math/distributions/exponential.hpp	/^   exponential_distribution(RealType lambda = 1)$/;"	f	class:boost::math::exponential_distribution	access:public	signature:(RealType lambda = 1)
exponential_distribution	/usr/include/boost/math/distributions/exponential.hpp	/^class exponential_distribution$/;"	c	namespace:boost::math
extended_double_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct extended_double_precision {};$/;"	s	namespace:boost::math::detail
extern_val	/usr/include/boost/math/tools/test_data.hpp	/^   static float extern_val;$/;"	m	class:boost::math::tools::test_data	access:private
extern_val	/usr/include/boost/math/tools/test_data.hpp	/^float test_data<T>::extern_val = 0;$/;"	m	class:boost::math::tools::test_data
extreme_value	/usr/include/boost/math/distributions/extreme_value.hpp	/^typedef extreme_value_distribution<double> extreme_value;$/;"	t	namespace:boost::math
extreme_value_distribution	/usr/include/boost/math/distributions/extreme_value.hpp	/^   extreme_value_distribution(RealType a = 0, RealType b = 1)$/;"	f	class:boost::math::extreme_value_distribution	access:public	signature:(RealType a = 0, RealType b = 1)
extreme_value_distribution	/usr/include/boost/math/distributions/extreme_value.hpp	/^class extreme_value_distribution$/;"	c	namespace:boost::math
f	/usr/include/boost/math/tools/remez.hpp	/^   function_type f;$/;"	m	struct:boost::math::tools::detail::remez_error_function	access:private
fabs	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float fabs(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
fabs	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class fabs(const mpfr_class& v)$/;"	f	signature:(const mpfr_class& v)
fabs	/usr/include/boost/math/bindings/rr.hpp	/^inline RR fabs(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
fabs	/usr/include/boost/math/complex/fabs.hpp	/^inline T fabs(const std::complex<T>& z)$/;"	f	namespace:boost::math	signature:(const std::complex<T>& z)
fabs	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept fabs(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
fabs	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept fabs(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
fact	/usr/include/boost/math/special_functions/expint.hpp	/^   T fact;$/;"	m	struct:boost::math::detail::expint_series	access:private
factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^inline T factorial(unsigned i)$/;"	f	namespace:boost::math	signature:(unsigned i)
factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^inline T factorial(unsigned i, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned i, const Policy& pol)
factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   RT factorial(unsigned int);$/;"	p	namespace:boost::math	signature:(unsigned int)
factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   RT factorial(unsigned int, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned int, const Policy& pol)
falling_factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^   falling_factorial(RT x, unsigned n)$/;"	f	namespace:boost::math	signature:(RT x, unsigned n)
falling_factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^   falling_factorial(RT x, unsigned n, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT x, unsigned n, const Policy& pol)
falling_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type falling_factorial(RT x, unsigned n);$/;"	p	namespace:boost::math	signature:(RT x, unsigned n)
falling_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type falling_factorial(RT x, unsigned n, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT x, unsigned n, const Policy& pol)
falling_factorial_imp	/usr/include/boost/math/special_functions/factorials.hpp	/^inline T falling_factorial_imp(T x, unsigned n, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, unsigned n, const Policy& pol)
fast_students_t_quantile	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^inline T fast_students_t_quantile(T df, T p, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T df, T p, const Policy& pol)
fast_students_t_quantile_imp	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^T fast_students_t_quantile_imp(T df, T p, const Policy& pol, const mpl::true_*)$/;"	f	namespace:boost::math::detail	signature:(T df, T p, const Policy& pol, const mpl::true_*)
fast_students_t_quantile_imp	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^inline T fast_students_t_quantile_imp(T df, T p, const Policy& pol, const mpl::false_*)$/;"	f	namespace:boost::math::detail	signature:(T df, T p, const Policy& pol, const mpl::false_*)
find_alpha	/usr/include/boost/math/distributions/beta.hpp	/^      static RealType find_alpha($/;"	f	class:boost::math::beta_distribution	access:public	signature:( RealType beta, RealType x, RealType probability)
find_alpha	/usr/include/boost/math/distributions/beta.hpp	/^      static RealType find_alpha($/;"	f	class:boost::math::beta_distribution	access:public	signature:( RealType mean, RealType variance)
find_arg	/usr/include/boost/math/policies/policy.hpp	/^struct find_arg$/;"	s	namespace:boost::math::policies::detail
find_beta	/usr/include/boost/math/distributions/beta.hpp	/^      static RealType find_beta($/;"	f	class:boost::math::beta_distribution	access:public	signature:( RealType alpha, RealType x, RealType probability)
find_beta	/usr/include/boost/math/distributions/beta.hpp	/^      static RealType find_beta($/;"	f	class:boost::math::beta_distribution	access:public	signature:( RealType mean, RealType variance)
find_degrees_of_freedom	/usr/include/boost/math/distributions/chi_squared.hpp	/^   static RealType find_degrees_of_freedom($/;"	p	class:boost::math::chi_squared_distribution	access:public	signature:( RealType difference_from_variance, RealType alpha, RealType beta, RealType variance, RealType hint = 100)
find_degrees_of_freedom	/usr/include/boost/math/distributions/chi_squared.hpp	/^RealType chi_squared_distribution<RealType, Policy>::find_degrees_of_freedom($/;"	f	class:boost::math::chi_squared_distribution	signature:( RealType difference_from_variance, RealType alpha, RealType beta, RealType variance, RealType hint)
find_degrees_of_freedom	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         inline RealType find_degrees_of_freedom($/;"	f	namespace:boost::math::detail	signature:( RealType lam, RealType x, RealType p, RealType q, const Policy& pol)
find_degrees_of_freedom	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         static RealType find_degrees_of_freedom(RealType lam, RealType x, RealType p)$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:(RealType lam, RealType x, RealType p)
find_degrees_of_freedom	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         static RealType find_degrees_of_freedom(const complemented3_type<A,B,C>& c)$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:(const complemented3_type<A,B,C>& c)
find_degrees_of_freedom	/usr/include/boost/math/distributions/students_t.hpp	/^   static RealType find_degrees_of_freedom($/;"	p	class:boost::math::students_t_distribution	access:public	signature:( RealType difference_from_mean, RealType alpha, RealType beta, RealType sd, RealType hint = 100)
find_degrees_of_freedom	/usr/include/boost/math/distributions/students_t.hpp	/^RealType students_t_distribution<RealType, Policy>::find_degrees_of_freedom($/;"	f	class:boost::math::students_t_distribution	signature:( RealType difference_from_mean, RealType alpha, RealType beta, RealType sd, RealType hint)
find_ibeta_inv_from_t_dist	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^inline T find_ibeta_inv_from_t_dist(T a, T p, T q, T* py, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T p, T q, T* py, const Policy& pol)
find_inverse_gamma	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^T find_inverse_gamma(T a, T p, T q, const Policy& pol, bool* p_has_10_digits)$/;"	f	namespace:boost::math::detail	signature:(T a, T p, T q, const Policy& pol, bool* p_has_10_digits)
find_inverse_s	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^T find_inverse_s(T p, T q)$/;"	f	namespace:boost::math::detail	signature:(T p, T q)
find_location	/usr/include/boost/math/distributions/find_location.hpp	/^      typename Dist::value_type find_location( \/\/ For example, normal mean.$/;"	f	namespace:boost::math	signature:( typename Dist::value_type z, typename Dist::value_type p, typename Dist::value_type scale)
find_location	/usr/include/boost/math/distributions/find_location.hpp	/^      typename Dist::value_type find_location( \/\/ For example, normal mean.$/;"	f	namespace:boost::math	signature:( typename Dist::value_type z, typename Dist::value_type p, typename Dist::value_type scale, const Policy& pol )
find_location	/usr/include/boost/math/distributions/find_location.hpp	/^    inline typename Dist::value_type find_location( \/\/ Default policy.$/;"	f	namespace:boost::math	signature:( complemented3_type<Real1, Real2, Real3> const& c)
find_location	/usr/include/boost/math/distributions/find_location.hpp	/^    inline typename Dist::value_type find_location( \/\/ Explicit policy.$/;"	f	namespace:boost::math	signature:( complemented4_type<Real1, Real2, Real3, Real4> const& c)
find_lower_bound_on_p	/usr/include/boost/math/distributions/binomial.hpp	/^      static RealType find_lower_bound_on_p($/;"	f	class:boost::math::binomial_distribution	access:public	signature:( RealType trials, RealType successes, RealType probability, interval_type t = clopper_pearson_exact_interval)
find_lower_bound_on_p	/usr/include/boost/math/distributions/geometric.hpp	/^      static RealType find_lower_bound_on_p($/;"	f	class:boost::math::geometric_distribution	access:public	signature:( RealType trials, RealType alpha)
find_lower_bound_on_p	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      static RealType find_lower_bound_on_p($/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:( RealType trials, RealType successes, RealType alpha)
find_maximum_number_of_trials	/usr/include/boost/math/distributions/binomial.hpp	/^      static RealType find_maximum_number_of_trials($/;"	f	class:boost::math::binomial_distribution	access:public	signature:( RealType k, RealType p, RealType alpha)
find_maximum_number_of_trials	/usr/include/boost/math/distributions/geometric.hpp	/^      static RealType find_maximum_number_of_trials($/;"	f	class:boost::math::geometric_distribution	access:public	signature:( RealType k, RealType p, RealType alpha)
find_maximum_number_of_trials	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      static RealType find_maximum_number_of_trials($/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:( RealType k, RealType p, RealType alpha)
find_minimum_number_of_trials	/usr/include/boost/math/distributions/binomial.hpp	/^      static RealType find_minimum_number_of_trials($/;"	f	class:boost::math::binomial_distribution	access:public	signature:( RealType k, RealType p, RealType alpha)
find_minimum_number_of_trials	/usr/include/boost/math/distributions/geometric.hpp	/^      static RealType find_minimum_number_of_trials($/;"	f	class:boost::math::geometric_distribution	access:public	signature:( RealType k, RealType p, RealType alpha)
find_minimum_number_of_trials	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      static RealType find_minimum_number_of_trials($/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:( RealType k, RealType p, RealType alpha)
find_non_centrality	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         inline RealType find_non_centrality($/;"	f	namespace:boost::math::detail	signature:( RealType v, RealType x, RealType p, RealType q, const Policy& pol)
find_non_centrality	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         static RealType find_non_centrality(RealType v, RealType x, RealType p)$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:(RealType v, RealType x, RealType p)
find_non_centrality	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         static RealType find_non_centrality(const complemented3_type<A,B,C>& c)$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:(const complemented3_type<A,B,C>& c)
find_scale	/usr/include/boost/math/distributions/find_scale.hpp	/^      typename Dist::value_type find_scale( \/\/ For example, normal mean.$/;"	f	namespace:boost::math	signature:( typename Dist::value_type z, typename Dist::value_type p, typename Dist::value_type location)
find_scale	/usr/include/boost/math/distributions/find_scale.hpp	/^      typename Dist::value_type find_scale( \/\/ For example, normal mean.$/;"	f	namespace:boost::math	signature:( typename Dist::value_type z, typename Dist::value_type p, typename Dist::value_type location, const Policy& pol )
find_scale	/usr/include/boost/math/distributions/find_scale.hpp	/^    inline typename Dist::value_type find_scale($/;"	f	namespace:boost::math	signature:( complemented3_type<Real1, Real2, Real3> const& c)
find_scale	/usr/include/boost/math/distributions/find_scale.hpp	/^    inline typename Dist::value_type find_scale($/;"	f	namespace:boost::math	signature:( complemented4_type<Real1, Real2, Real3, Policy> const& c)
find_upper_bound_on_p	/usr/include/boost/math/distributions/binomial.hpp	/^      static RealType find_upper_bound_on_p($/;"	f	class:boost::math::binomial_distribution	access:public	signature:( RealType trials, RealType successes, RealType probability, interval_type t = clopper_pearson_exact_interval)
find_upper_bound_on_p	/usr/include/boost/math/distributions/geometric.hpp	/^      static RealType find_upper_bound_on_p($/;"	f	class:boost::math::geometric_distribution	access:public	signature:( RealType trials, RealType alpha)
find_upper_bound_on_p	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      static RealType find_upper_bound_on_p($/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:( RealType trials, RealType successes, RealType alpha)
finite_gamma_q	/usr/include/boost/math/special_functions/gamma.hpp	/^inline T finite_gamma_q(T a, T x, Policy const& pol, T* pderivative = 0)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, Policy const& pol, T* pderivative = 0)
finite_half_gamma_q	/usr/include/boost/math/special_functions/gamma.hpp	/^T finite_half_gamma_q(T a, T x, T* p_derivative, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, T* p_derivative, const Policy& pol)
first_argument_type	/usr/include/boost/math/common_factor_rt.hpp	/^    typedef IntegerType  result_type, first_argument_type, second_argument_type;$/;"	t	class:boost::math::gcd_evaluator	access:public
first_argument_type	/usr/include/boost/math/common_factor_rt.hpp	/^    typedef IntegerType  result_type, first_argument_type, second_argument_type;$/;"	t	class:boost::math::lcm_evaluator	access:public
fisher_f	/usr/include/boost/math/distributions/fisher_f.hpp	/^typedef fisher_f_distribution<double> fisher_f;$/;"	t	namespace:boost::math
fisher_f_distribution	/usr/include/boost/math/distributions/fisher_f.hpp	/^   fisher_f_distribution(const RealType& i, const RealType& j) : m_df1(i), m_df2(j)$/;"	f	class:boost::math::fisher_f_distribution	access:public	signature:(const RealType& i, const RealType& j)
fisher_f_distribution	/usr/include/boost/math/distributions/fisher_f.hpp	/^class fisher_f_distribution$/;"	c	namespace:boost::math
flag	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static const uint64_t flag     = 0;$/;"	m	struct:boost::math::detail::fp_traits_non_native	access:public
flags_	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      const int flags_;$/;"	m	class:boost::math::nonfinite_num_get	access:private
flags_	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      const int flags_;$/;"	m	class:boost::math::nonfinite_num_put	access:private
float_advance	/usr/include/boost/math/special_functions/next.hpp	/^T float_advance(T val, int distance, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T val, int distance, const Policy& pol)
float_advance	/usr/include/boost/math/special_functions/next.hpp	/^inline T float_advance(const T& val, int distance)$/;"	f	namespace:boost::math	signature:(const T& val, int distance)
float_distance	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T float_distance(const T&, const T&);$/;"	p	namespace:boost::math	signature:(const T&, const T&)
float_distance	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T float_distance(const T&, const T&, const Policy&);$/;"	p	namespace:boost::math	signature:(const T&, const T&, const Policy&)
float_distance	/usr/include/boost/math/special_functions/next.hpp	/^T float_distance(const T& a, const T& b)$/;"	f	namespace:boost::math	signature:(const T& a, const T& b)
float_distance	/usr/include/boost/math/special_functions/next.hpp	/^T float_distance(const T& a, const T& b, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& a, const T& b, const Policy& pol)
float_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T float_next(const T&);$/;"	p	namespace:boost::math	signature:(const T&)
float_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T float_next(const T&, const Policy&);$/;"	p	namespace:boost::math	signature:(const T&, const Policy&)
float_next	/usr/include/boost/math/special_functions/next.hpp	/^T float_next(const T& val, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& val, const Policy& pol)
float_next	/usr/include/boost/math/special_functions/next.hpp	/^inline T float_next(const T& val)$/;"	f	namespace:boost::math	signature:(const T& val)
float_prior	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T float_prior(const T&);$/;"	p	namespace:boost::math	signature:(const T&)
float_prior	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T float_prior(const T&, const Policy&);$/;"	p	namespace:boost::math	signature:(const T&, const Policy&)
float_prior	/usr/include/boost/math/special_functions/next.hpp	/^T float_prior(const T& val, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& val, const Policy& pol)
float_prior	/usr/include/boost/math/special_functions/next.hpp	/^inline T float_prior(const T& val)$/;"	f	namespace:boost::math	signature:(const T& val)
float_t	/usr/include/boost/math/tr1.hpp	/^typedef float float_t;$/;"	t
floor	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float floor(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
floor	/usr/include/boost/math/bindings/rr.hpp	/^inline RR floor(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
floor	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept floor(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
floor	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept floor(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
fmax	/usr/include/boost/math/tr1_c_macros.ipp	158;"	d	file:
fmax	/usr/include/boost/math/tr1_c_macros.ipp	160;"	d	file:
fmaxf	/usr/include/boost/math/tr1_c_macros.ipp	162;"	d	file:
fmaxf	/usr/include/boost/math/tr1_c_macros.ipp	164;"	d	file:
fmaxl	/usr/include/boost/math/tr1_c_macros.ipp	166;"	d	file:
fmaxl	/usr/include/boost/math/tr1_c_macros.ipp	168;"	d	file:
fmin	/usr/include/boost/math/tr1_c_macros.ipp	171;"	d	file:
fmin	/usr/include/boost/math/tr1_c_macros.ipp	173;"	d	file:
fminf	/usr/include/boost/math/tr1_c_macros.ipp	175;"	d	file:
fminf	/usr/include/boost/math/tr1_c_macros.ipp	177;"	d	file:
fminl	/usr/include/boost/math/tr1_c_macros.ipp	179;"	d	file:
fminl	/usr/include/boost/math/tr1_c_macros.ipp	181;"	d	file:
fmod	/usr/include/boost/math/bindings/e_float.hpp	/^e_float fmod(const e_float& v1, const e_float& v2)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v1, const e_float& v2)
fmod	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class fmod(const mpfr_class& v1, const mpfr_class& v2)$/;"	f	signature:(const mpfr_class& v1, const mpfr_class& v2)
fmod	/usr/include/boost/math/bindings/mpreal.hpp	/^mpfr::mpreal fmod(const mpfr::mpreal& v1, const mpfr::mpreal& v2)$/;"	f	namespace:mpfr	signature:(const mpfr::mpreal& v1, const mpfr::mpreal& v2)
fmod	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR fmod(RR x, RR y)$/;"	f	namespace:boost::math::ntl	signature:(RR x, RR y)
fmod	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept fmod(real_concept a, real_concept b)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, real_concept b)
fmod	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept fmod(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept b)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept b)
fmod_workaround	/usr/include/boost/math/tools/workaround.hpp	/^inline T fmod_workaround(T a, T b)$/;"	f	namespace:boost::math::tools	signature:(T a, T b)
fmod_workaround	/usr/include/boost/math/tools/workaround.hpp	/^inline long double fmod_workaround(long double a, long double b)$/;"	f	namespace:boost::math::tools	signature:(long double a, long double b)
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_i0_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_i0_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_i1_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_i1_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_j0_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_j0_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_j1_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_j1_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_k0_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_k0_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_k1_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_k1_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_y0_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_y0_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::bessel_y1_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::bessel_y1_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::erf_inv_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::erf_inv_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/digamma.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::digamma_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/digamma.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::digamma_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/erf.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::erf_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/erf.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::erf_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/expint.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::expint_1_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/expint.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::expint_i_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/expint.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::expint_1_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/expint.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::expint_i_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/expm1.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::expm1_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/expm1.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::expm1_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/gamma.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::igamma_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/gamma.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::lgamma_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/gamma.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::igamma_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/gamma.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::lgamma_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/lanczos.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::lanczos::lanczos_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::lanczos::lanczos_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/log1p.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::log1p_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/log1p.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::log1p_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/next.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::min_shift_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/next.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::min_shift_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/owens_t.hpp	/^               void force_instantiate()const{}$/;"	f	struct:boost::math::detail::owens_t_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/owens_t.hpp	/^            static void force_instantiate()$/;"	f	struct:boost::math::detail::owens_t_initializer	access:public	signature:()
force_instantiate	/usr/include/boost/math/special_functions/zeta.hpp	/^      void force_instantiate()const{}$/;"	f	struct:boost::math::detail::zeta_initializer::init	access:public	signature:() const
force_instantiate	/usr/include/boost/math/special_functions/zeta.hpp	/^   static void force_instantiate()$/;"	f	struct:boost::math::detail::zeta_initializer	access:public	signature:()
forth_root_epsilon	/usr/include/boost/math/tools/precision.hpp	/^inline T forth_root_epsilon()$/;"	f	namespace:boost::math::tools	signature:()
forth_root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T forth_root_epsilon_imp(const T*, const Tag&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const Tag&)
forth_root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T forth_root_epsilon_imp(const T*, const mpl::int_<113>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<113>&)
forth_root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T forth_root_epsilon_imp(const T*, const mpl::int_<24>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<24>&)
forth_root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T forth_root_epsilon_imp(const T*, const mpl::int_<53>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<53>&)
forth_root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T forth_root_epsilon_imp(const T*, const mpl::int_<64>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<64>&)
forwarding_arg1	/usr/include/boost/math/policies/policy.hpp	/^typedef default_args<BOOST_MATH_PROMOTE_FLOAT_POLICY, BOOST_MATH_PROMOTE_DOUBLE_POLICY>::arg1 forwarding_arg1;$/;"	t	namespace:boost::math::policies::detail
forwarding_arg2	/usr/include/boost/math/policies/policy.hpp	/^typedef default_args<BOOST_MATH_PROMOTE_FLOAT_POLICY, BOOST_MATH_PROMOTE_DOUBLE_POLICY>::arg2 forwarding_arg2;$/;"	t	namespace:boost::math::policies::detail
fp_traits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<class T> struct fp_traits$/;"	s	namespace:boost::math::detail
fp_traits_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<class T> struct fp_traits_native$/;"	s	namespace:boost::math::detail
fp_traits_non_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct fp_traits_non_native<long double, extended_double_precision>$/;"	s	namespace:boost::math::detail
fp_traits_non_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct fp_traits_non_native<double, double_precision>$/;"	s	namespace:boost::math::detail
fp_traits_non_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct fp_traits_non_native<float, single_precision>$/;"	s	namespace:boost::math::detail
fp_traits_non_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct fp_traits_non_native<long double, double_precision>$/;"	s	namespace:boost::math::detail
fp_traits_non_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<class T, class U> struct fp_traits_non_native$/;"	s	namespace:boost::math::detail
fpu_guard	/usr/include/boost/math/tools/config.hpp	/^      fpu_guard()$/;"	f	struct:boost::math::detail::fpu_guard	access:public	signature:()
fpu_guard	/usr/include/boost/math/tools/config.hpp	/^   struct fpu_guard$/;"	s	namespace:boost::math::detail
fraction_traits	/usr/include/boost/math/tools/fraction.hpp	/^   struct fraction_traits$/;"	s	namespace:boost::math::tools::detail	inherits:boost::mpl::if_c::type
fraction_traits_pair	/usr/include/boost/math/tools/fraction.hpp	/^   struct fraction_traits_pair$/;"	s	namespace:boost::math::tools::detail
fraction_traits_simple	/usr/include/boost/math/tools/fraction.hpp	/^   struct fraction_traits_simple$/;"	s	namespace:boost::math::tools::detail
frexp	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float frexp(const e_float& v, int* expon)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, int* expon)
frexp	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class frexp(const mpfr_class& v, int* expon)$/;"	f	signature:(const mpfr_class& v, int* expon)
frexp	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal frexp(const mpfr::mpreal& v, int* expon)$/;"	f	namespace:mpfr	signature:(const mpfr::mpreal& v, int* expon)
frexp	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR frexp(RR r, int* exp)$/;"	f	namespace:boost::math::ntl	signature:(RR r, int* exp)
frexp	/usr/include/boost/math/bindings/rr.hpp	/^RR frexp(RR r, int* exp);$/;"	p	namespace:boost::math::ntl	signature:(RR r, int* exp)
frexp	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept frexp(real_concept a, int* expon)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, int* expon)
frexp	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept frexp(boost::math::concepts::std_real_concept a, int* expon)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, int* expon)
full_igamma_prefix	/usr/include/boost/math/special_functions/gamma.hpp	/^T full_igamma_prefix(T a, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T z, const Policy& pol)
func	/usr/include/boost/math/tools/remez.hpp	/^   function_type func;            \/\/ The function to approximate.$/;"	m	class:boost::math::tools::remez_minimax	access:private
func	/usr/include/boost/math/tools/remez.hpp	/^   remez_error_function<T> func;$/;"	m	struct:boost::math::tools::detail::remez_max_error_function	access:private
function_type	/usr/include/boost/math/tools/remez.hpp	/^   typedef boost::function1<T, T const &> function_type;$/;"	t	class:boost::math::tools::remez_minimax	access:public
function_type	/usr/include/boost/math/tools/remez.hpp	/^   typedef boost::function1<T, T const &> function_type;$/;"	t	struct:boost::math::tools::detail::remez_error_function	access:public
g	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static double g(){ return 22.61890999999999962710717227309942245483; }$/;"	f	struct:boost::math::lanczos::lanczos22UDT	access:public	signature:()
g	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static double g(){ return 32.08066999999999779902282170951366424561; }$/;"	f	struct:boost::math::lanczos::lanczos31UDT	access:public	signature:()
g	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static double g(){ return 63.19215200000000010049916454590857028961181640625; }$/;"	f	struct:boost::math::lanczos::lanczos61UDT	access:public	signature:()
g	/usr/include/boost/math/bindings/mpfr.hpp	/^   static mpfr_class g()$/;"	f	struct:boost::math::lanczos::mpfr_lanczos	access:public	signature:()
g	/usr/include/boost/math/bindings/mpreal.hpp	/^   static mpfr::mpreal g()$/;"	f	struct:boost::math::lanczos::mpreal_lanczos	access:public	signature:()
g	/usr/include/boost/math/bindings/rr.hpp	/^   static ntl::RR g()$/;"	f	struct:boost::math::lanczos::ntl_lanczos	access:public	signature:()
g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 1.428456135094165802001953125; }$/;"	f	struct:boost::math::lanczos::lanczos6m24	access:public	signature:()
g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 10.90051099999999983936049829935654997826; }$/;"	f	struct:boost::math::lanczos::lanczos11	access:public	signature:()
g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 12.2252227365970611572265625; }$/;"	f	struct:boost::math::lanczos::lanczos17m64	access:public	signature:()
g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 13.1445650000000000545696821063756942749; }$/;"	f	struct:boost::math::lanczos::lanczos13	access:public	signature:()
g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 20.3209821879863739013671875; }$/;"	f	struct:boost::math::lanczos::lanczos24m113	access:public	signature:()
g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 22.61890999999999962710717227309942245483; }$/;"	f	struct:boost::math::lanczos::lanczos22	access:public	signature:()
g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 5.581000000000000405009359383257105946541; }$/;"	f	struct:boost::math::lanczos::lanczos6	access:public	signature:()
g	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static double g(){ return 6.024680040776729583740234375; }$/;"	f	struct:boost::math::lanczos::lanczos13m53	access:public	signature:()
gamma_distribution	/usr/include/boost/math/distributions/gamma.hpp	/^   gamma_distribution(RealType shape, RealType scale = 1)$/;"	f	class:boost::math::gamma_distribution	access:public	signature:(RealType shape, RealType scale = 1)
gamma_distribution	/usr/include/boost/math/distributions/gamma.hpp	/^class gamma_distribution$/;"	c	namespace:boost::math
gamma_imp	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^T gamma_imp(T z, const Policy& pol, const Lanczos& l);$/;"	p	namespace:boost::math::detail	signature:(T z, const Policy& pol, const Lanczos& l)
gamma_imp	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^T gamma_imp(T z, const Policy& pol, const lanczos::undefined_lanczos& l);$/;"	p	namespace:boost::math::detail	signature:(T z, const Policy& pol, const lanczos::undefined_lanczos& l)
gamma_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T gamma_imp(T z, const Policy& pol, const Lanczos& l)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const Lanczos& l)
gamma_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T gamma_imp(T z, const Policy& pol, const lanczos::undefined_lanczos& l)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const lanczos::undefined_lanczos& l)
gamma_incomplete_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T gamma_incomplete_imp(T a, T x, bool normalised, bool invert, $/;"	f	namespace:boost::math::detail	signature:(T a, T x, bool normalised, bool invert, const Policy& pol, T* p_derivative)
gamma_inva_imp	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^T gamma_inva_imp(const T& z, const T& p, const T& q, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T& z, const T& p, const T& q, const Policy& pol)
gamma_inva_t	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   gamma_inva_t(T z_, T p_, bool invert_) : z(z_), p(p_), invert(invert_) {}$/;"	f	struct:boost::math::detail::gamma_inva_t	access:public	signature:(T z_, T p_, bool invert_)
gamma_inva_t	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^struct gamma_inva_t$/;"	s	namespace:boost::math::detail
gamma_p	/usr/include/boost/math/special_functions/gamma.hpp	/^   gamma_p(T1 a, T2 z)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z)
gamma_p	/usr/include/boost/math/special_functions/gamma.hpp	/^   gamma_p(T1 a, T2 z, const Policy&)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z, const Policy&)
gamma_p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type gamma_p(RT1 a, RT2 z);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z)
gamma_p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type gamma_p(RT1 a, RT2 z, const Policy&);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z, const Policy&)
gamma_p_derivative	/usr/include/boost/math/special_functions/gamma.hpp	/^   gamma_p_derivative(T1 a, T2 x)$/;"	f	namespace:boost::math	signature:(T1 a, T2 x)
gamma_p_derivative	/usr/include/boost/math/special_functions/gamma.hpp	/^   gamma_p_derivative(T1 a, T2 x, const Policy&)$/;"	f	namespace:boost::math	signature:(T1 a, T2 x, const Policy&)
gamma_p_derivative	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_p_derivative(T1 a, T2 x);$/;"	p	namespace:boost::math	signature:(T1 a, T2 x)
gamma_p_derivative	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_p_derivative(T1 a, T2 x, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 a, T2 x, const Policy&)
gamma_p_derivative_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T gamma_p_derivative_imp(T a, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, const Policy& pol)
gamma_p_inv	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   gamma_p_inv(T1 a, T2 p)$/;"	f	namespace:boost::math	signature:(T1 a, T2 p)
gamma_p_inv	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   gamma_p_inv(T1 a, T2 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 a, T2 p, const Policy& pol)
gamma_p_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_p_inv(T1 a, T2 p);$/;"	p	namespace:boost::math	signature:(T1 a, T2 p)
gamma_p_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_p_inv(T1 a, T2 p, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 a, T2 p, const Policy&)
gamma_p_inv_imp	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^T gamma_p_inv_imp(T a, T p, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T p, const Policy& pol)
gamma_p_inva	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   gamma_p_inva(T1 x, T2 p)$/;"	f	namespace:boost::math	signature:(T1 x, T2 p)
gamma_p_inva	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   gamma_p_inva(T1 x, T2 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 p, const Policy& pol)
gamma_p_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_p_inva(T1 a, T2 p);$/;"	p	namespace:boost::math	signature:(T1 a, T2 p)
gamma_p_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_p_inva(T1 a, T2 p, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 a, T2 p, const Policy&)
gamma_p_inverse_func	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   gamma_p_inverse_func(T a_, T p_, bool inv) : a(a_), p(p_), invert(inv)$/;"	f	struct:boost::math::detail::gamma_p_inverse_func	access:public	signature:(T a_, T p_, bool inv)
gamma_p_inverse_func	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^struct gamma_p_inverse_func$/;"	s	namespace:boost::math::detail
gamma_q	/usr/include/boost/math/special_functions/gamma.hpp	/^   gamma_q(T1 a, T2 z)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z)
gamma_q	/usr/include/boost/math/special_functions/gamma.hpp	/^   gamma_q(T1 a, T2 z, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z, const Policy& )
gamma_q	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type gamma_q(RT1 a, RT2 z);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z)
gamma_q	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type gamma_q(RT1 a, RT2 z, const Policy&);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z, const Policy&)
gamma_q_inv	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   gamma_q_inv(T1 a, T2 p)$/;"	f	namespace:boost::math	signature:(T1 a, T2 p)
gamma_q_inv	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   gamma_q_inv(T1 a, T2 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 a, T2 p, const Policy& pol)
gamma_q_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_q_inv(T1 a, T2 q);$/;"	p	namespace:boost::math	signature:(T1 a, T2 q)
gamma_q_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_q_inv(T1 a, T2 q, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 a, T2 q, const Policy&)
gamma_q_inv_imp	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^T gamma_q_inv_imp(T a, T q, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T q, const Policy& pol)
gamma_q_inva	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   gamma_q_inva(T1 x, T2 q)$/;"	f	namespace:boost::math	signature:(T1 x, T2 q)
gamma_q_inva	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   gamma_q_inva(T1 x, T2 q, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 q, const Policy& pol)
gamma_q_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_q_inva(T1 a, T2 q);$/;"	p	namespace:boost::math	signature:(T1 a, T2 q)
gamma_q_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type gamma_q_inva(T1 a, T2 q, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 a, T2 q, const Policy&)
gcd	/usr/include/boost/math/common_factor_rt.hpp	/^    IntegerType  gcd( IntegerType const &a, IntegerType const &b );$/;"	p	namespace:boost::math	signature:( IntegerType const &a, IntegerType const &b )
gcd	/usr/include/boost/math/common_factor_rt.hpp	/^gcd$/;"	f	namespace:boost::math	signature:( IntegerType const & a, IntegerType const & b )
gcd_binary	/usr/include/boost/math/common_factor_rt.hpp	/^    gcd_binary$/;"	f	namespace:boost::math::detail	signature:( BuiltInUnsigned u, BuiltInUnsigned v )
gcd_euclidean	/usr/include/boost/math/common_factor_rt.hpp	/^    gcd_euclidean$/;"	f	namespace:boost::math::detail	signature:( RingType a, RingType b )
gcd_evaluator	/usr/include/boost/math/common_factor_rt.hpp	/^class gcd_evaluator$/;"	c	namespace:boost::math
gcd_integer	/usr/include/boost/math/common_factor_rt.hpp	/^    gcd_integer$/;"	f	namespace:boost::math::detail	signature:( IntegerType const & a, IntegerType const & b )
gcd_optimal	/usr/include/boost/math/common_factor_rt.hpp	/^    gcd_optimal$/;"	f	namespace:boost::math::detail	signature:( T const & a, T const & b )
gcd_optimal_evaluator	/usr/include/boost/math/common_factor_rt.hpp	/^    struct gcd_optimal_evaluator$/;"	s	namespace:boost::math::detail
gcd_optimal_evaluator_helper2_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct gcd_optimal_evaluator_helper2_t$/;"	s	namespace:boost::math::detail
gcd_optimal_evaluator_helper2_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct gcd_optimal_evaluator_helper2_t< true, true >$/;"	s	namespace:boost::math::detail
gcd_optimal_evaluator_helper_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct gcd_optimal_evaluator_helper_t$/;"	s	namespace:boost::math::detail
gcd_optimal_evaluator_helper_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct gcd_optimal_evaluator_helper_t$/;"	s	namespace:boost::math::detail	inherits:gcd_optimal_evaluator_helper2_t::BOOST_NESTED_TEMPLATEhelper
gcd_optimal_evaluator_helper_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct gcd_optimal_evaluator_helper_t< T, true, true >$/;"	s	namespace:boost::math::detail
gcd_type	/usr/include/boost/math/common_factor_ct.hpp	/^            typedef static_gcd_helper_t<Value1, Value2>  gcd_type;$/;"	t	struct:boost::math::detail::static_lcm_helper2_t::helper	access:public
gcd_type	/usr/include/boost/math/common_factor_ct.hpp	/^        typedef static_gcd_helper_t<Value1, Value2>  gcd_type;$/;"	t	struct:boost::math::detail::static_lcm_helper_t	access:public
generator_type	/usr/include/boost/math/constants/generate.hpp	/^typedef mpfr_class generator_type;$/;"	t	namespace:boost::math::constants
generic_find_mode	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^typename Dist::value_type generic_find_mode(const Dist& dist, typename Dist::value_type guess, const char* function, typename Dist::value_type step = 0)$/;"	f	namespace:boost::math::detail	signature:(const Dist& dist, typename Dist::value_type guess, const char* function, typename Dist::value_type step = 0)
generic_find_mode_01	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^typename Dist::value_type generic_find_mode_01(const Dist& dist, typename Dist::value_type guess, const char* function)$/;"	f	namespace:boost::math::detail	signature:(const Dist& dist, typename Dist::value_type guess, const char* function)
generic_quantile	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^typename Dist::value_type generic_quantile(const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, bool comp, const char* function)$/;"	f	namespace:boost::math::detail	signature:(const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, bool comp, const char* function)
generic_quantile_finder	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   generic_quantile_finder(const Dist& d, value_type t, bool c)$/;"	f	struct:boost::math::detail::generic_quantile_finder	access:public	signature:(const Dist& d, value_type t, bool c)
generic_quantile_finder	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^struct generic_quantile_finder$/;"	s	namespace:boost::math::detail
generic_tag	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct generic_tag {};$/;"	s	namespace:boost::math::detail
geometric	/usr/include/boost/math/distributions/geometric.hpp	/^    typedef geometric_distribution<double> geometric; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
geometric_detail	/usr/include/boost/math/distributions/geometric.hpp	/^    namespace geometric_detail$/;"	n	namespace:boost::math
geometric_distribution	/usr/include/boost/math/distributions/geometric.hpp	/^      geometric_distribution(RealType p) : m_p(p)$/;"	f	class:boost::math::geometric_distribution	access:public	signature:(RealType p)
geometric_distribution	/usr/include/boost/math/distributions/geometric.hpp	/^    class geometric_distribution$/;"	c	namespace:boost::math
get_and_check_eof	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_and_check_eof$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, std::ios_base& iosb, std::ios_base::iostate& state, ValType& val ) const
get_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void get_bits(double x, uint32_t& a)$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(double x, uint32_t& a)
get_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void get_bits(double x, uint64_t& a) { std::memcpy(&a, &x, 8); }$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(double x, uint64_t& a)
get_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void get_bits(float x, uint32_t& a) { std::memcpy(&a, &x, 4); }$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(float x, uint32_t& a)
get_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void get_bits(long double x, uint32_t& a)$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(long double x, uint32_t& a)
get_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void get_bits(long double x, uint64_t& a) { std::memcpy(&a, &x, 8); }$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(long double x, uint64_t& a)
get_i	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_i$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct, std::ios_base::iostate& state, ValType& val ) const
get_min_shift_value	/usr/include/boost/math/special_functions/next.hpp	/^T get_min_shift_value();$/;"	p	namespace:boost::math::detail	signature:()
get_min_shift_value	/usr/include/boost/math/special_functions/next.hpp	/^inline T get_min_shift_value()$/;"	f	namespace:boost::math::detail	signature:()
get_n	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_n$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct, std::ios_base::iostate& state, ValType& val ) const
get_object	/usr/include/boost/math/concepts/distributions.hpp	/^   static Distribution& get_object()$/;"	f	struct:boost::math::concepts::DistributionConcept	access:private	signature:()
get_object	/usr/include/boost/math/concepts/distributions.hpp	/^   static distribution_archetype& get_object()$/;"	f	class:boost::math::concepts::distribution_archetype	access:public	signature:()
get_one_hash	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_one_hash$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct, std::ios_base::iostate& state, ValType& val ) const
get_one_hash_i	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_one_hash_i$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct, std::ios_base::iostate& state, ValType& val ) const
get_q	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_q$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct, std::ios_base::iostate& state, ValType& val ) const
get_signed	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_signed$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, std::ios_base& iosb, std::ios_base::iostate& state, ValType& val ) const
get_smallest_value	/usr/include/boost/math/special_functions/next.hpp	/^inline T get_smallest_value()$/;"	f	namespace:boost::math::detail	signature:()
get_smallest_value	/usr/include/boost/math/special_functions/next.hpp	/^inline T get_smallest_value(mpl::false_ const&)$/;"	f	namespace:boost::math::detail	signature:(mpl::false_ const&)
get_smallest_value	/usr/include/boost/math/special_functions/next.hpp	/^inline T get_smallest_value(mpl::true_ const&)$/;"	f	namespace:boost::math::detail	signature:(mpl::true_ const&)
get_unsigned	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void get_unsigned$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, std::ios_base& iosb, const std::ctype<CharType>& ct, std::ios_base::iostate& state, ValType& val ) const
get_user_parameter_info	/usr/include/boost/math/tools/test_data.hpp	/^bool get_user_parameter_info(parameter_info<T>& info, const char* param_name)$/;"	f	namespace:boost::math::tools	signature:(parameter_info<T>& info, const char* param_name)
guess_ig	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  inline RealType guess_ig(RealType p, RealType mu = 1, RealType lambda = 1)$/;"	f	namespace:boost::math::detail	signature:(RealType p, RealType mu = 1, RealType lambda = 1)
halley_iterate	/usr/include/boost/math/tools/roots.hpp	/^T halley_iterate(F f, T guess, T min, T max, int digits, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, T guess, T min, T max, int digits, boost::uintmax_t& max_iter)
halley_iterate	/usr/include/boost/math/tools/roots.hpp	/^inline T halley_iterate(F f, T guess, T min, T max, int digits)$/;"	f	namespace:boost::math::tools	signature:(F f, T guess, T min, T max, int digits)
handle_zero_derivative	/usr/include/boost/math/tools/roots.hpp	/^void handle_zero_derivative(F f,$/;"	f	namespace:boost::math::tools::detail	signature:(F f, T& last_f0, const T& f0, T& delta, T& result, T& guess, const T& min, const T& max)
hankel_PQ	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^bool hankel_PQ(T v, T x, T* p, T* q, const Policy& )$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* p, T* q, const Policy& )
hankel_imp	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<T> hankel_imp(T v, T x, const bessel_maybe_int_tag&, const Policy& pol, int sign)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_maybe_int_tag&, const Policy& pol, int sign)
hankel_imp	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<T> hankel_imp(int v, T x, const bessel_int_tag&, const Policy& pol, int sign)$/;"	f	namespace:boost::math::detail	signature:(int v, T x, const bessel_int_tag&, const Policy& pol, int sign)
hankel_imp	/usr/include/boost/math/special_functions/hankel.hpp	/^std::complex<T> hankel_imp(T v, T x, const bessel_no_int_tag&, const Policy& pol, int sign)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const bessel_no_int_tag&, const Policy& pol, int sign)
hankel_imp	/usr/include/boost/math/special_functions/hankel.hpp	/^std::complex<T> hankel_imp(int v, T x, const bessel_int_tag&, const Policy& pol, int sign);$/;"	p	namespace:boost::math::detail	signature:(int v, T x, const bessel_int_tag&, const Policy& pol, int sign)
has_cdf	/usr/include/boost/math/tools/traits.hpp	/^struct has_cdf$/;"	s	namespace:boost::math::tools::detail
has_quantile	/usr/include/boost/math/tools/traits.hpp	/^struct has_quantile$/;"	s	namespace:boost::math::tools::detail
hazard	/usr/include/boost/math/concepts/distributions.hpp	/^RealType hazard(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
hazard	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type hazard(const Distribution& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const Distribution& dist, const RealType& x)
helper	/usr/include/boost/math/common_factor_ct.hpp	/^        struct helper$/;"	s	struct:boost::math::detail::static_lcm_helper2_t	access:public
helper	/usr/include/boost/math/common_factor_ct.hpp	/^        struct helper< 0UL >$/;"	s	struct:boost::math::detail::static_lcm_helper2_t	access:public
helper	/usr/include/boost/math/common_factor_rt.hpp	/^        struct helper$/;"	s	struct:boost::math::detail::gcd_optimal_evaluator_helper2_t	access:public
helper	/usr/include/boost/math/common_factor_rt.hpp	/^        struct helper$/;"	s	struct:boost::math::detail::lcm_optimal_evaluator_helper2_t	access:public
hermite	/usr/include/boost/math/special_functions/hermite.hpp	/^   hermite(unsigned n, T x)$/;"	f	namespace:boost::math	signature:(unsigned n, T x)
hermite	/usr/include/boost/math/special_functions/hermite.hpp	/^   hermite(unsigned n, T x, const Policy&)$/;"	f	namespace:boost::math	signature:(unsigned n, T x, const Policy&)
hermite	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      hermite(unsigned n, T x);$/;"	p	namespace:boost::math	signature:(unsigned n, T x)
hermite	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      hermite(unsigned n, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned n, T x, const Policy& pol)
hermite	/usr/include/boost/math/tr1_c_macros.ipp	697;"	d	file:
hermite	/usr/include/boost/math/tr1_c_macros.ipp	699;"	d	file:
hermite_imp	/usr/include/boost/math/special_functions/hermite.hpp	/^T hermite_imp(unsigned n, T x)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T x)
hermite_next	/usr/include/boost/math/special_functions/hermite.hpp	/^   hermite_next(unsigned n, T1 x, T2 Hn, T3 Hnm1)$/;"	f	namespace:boost::math	signature:(unsigned n, T1 x, T2 Hn, T3 Hnm1)
hermite_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      hermite_next(unsigned n, T1 x, T2 Hn, T3 Hnm1);$/;"	p	namespace:boost::math	signature:(unsigned n, T1 x, T2 Hn, T3 Hnm1)
hermitef	/usr/include/boost/math/tr1_c_macros.ipp	701;"	d	file:
hermitef	/usr/include/boost/math/tr1_c_macros.ipp	703;"	d	file:
hermitel	/usr/include/boost/math/tr1_c_macros.ipp	705;"	d	file:
hermitel	/usr/include/boost/math/tr1_c_macros.ipp	707;"	d	file:
hypergeometric	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   typedef hypergeometric_distribution<double> hypergeometric;$/;"	t	namespace:boost::math
hypergeometric_2F2	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         T hypergeometric_2F2(T a1, T a2, T b1, T b2, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a1, T a2, T b1, T b2, T z, const Policy& pol)
hypergeometric_2F2_sum	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            hypergeometric_2F2_sum(T a1_, T a2_, T b1_, T b2_, T z_) : a1(a1_), a2(a2_), b1(b1_), b2(b2_), z(z_), term(1), k(0) {}$/;"	f	struct:boost::math::detail::hypergeometric_2F2_sum	access:public	signature:(T a1_, T a2_, T b1_, T b2_, T z_)
hypergeometric_2F2_sum	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         struct hypergeometric_2F2_sum$/;"	s	namespace:boost::math::detail
hypergeometric_cdf	/usr/include/boost/math/distributions/detail/hypergeometric_cdf.hpp	/^   inline T hypergeometric_cdf(unsigned x, unsigned r, unsigned n, unsigned N, bool invert, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, unsigned r, unsigned n, unsigned N, bool invert, const Policy&)
hypergeometric_cdf_imp	/usr/include/boost/math/distributions/detail/hypergeometric_cdf.hpp	/^   T hypergeometric_cdf_imp(unsigned x, unsigned r, unsigned n, unsigned N, bool invert, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, unsigned r, unsigned n, unsigned N, bool invert, const Policy& pol)
hypergeometric_distribution	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      hypergeometric_distribution(unsigned r, unsigned n, unsigned N) \/\/ Constructor.$/;"	f	class:boost::math::hypergeometric_distribution	access:public	signature:(unsigned r, unsigned n, unsigned N)
hypergeometric_distribution	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   class hypergeometric_distribution$/;"	c	namespace:boost::math
hypergeometric_pdf	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   hypergeometric_pdf(unsigned x, unsigned r, unsigned n, unsigned N, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, unsigned r, unsigned n, unsigned N, const Policy&)
hypergeometric_pdf_factorial_imp	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^T hypergeometric_pdf_factorial_imp(unsigned x, unsigned r, unsigned n, unsigned N, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, unsigned r, unsigned n, unsigned N, const Policy&)
hypergeometric_pdf_lanczos_imp	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^T hypergeometric_pdf_lanczos_imp(T \/*dummy*\/, unsigned x, unsigned r, unsigned n, unsigned N, const Lanczos&, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(T , unsigned x, unsigned r, unsigned n, unsigned N, const Lanczos&, const Policy&)
hypergeometric_pdf_lanczos_imp	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^T hypergeometric_pdf_lanczos_imp(T \/*dummy*\/, unsigned x, unsigned r, unsigned n, unsigned N, const boost::math::lanczos::undefined_lanczos&, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T , unsigned x, unsigned r, unsigned n, unsigned N, const boost::math::lanczos::undefined_lanczos&, const Policy& pol)
hypergeometric_pdf_prime_imp	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^inline T hypergeometric_pdf_prime_imp(unsigned x, unsigned r, unsigned n, unsigned N, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, unsigned r, unsigned n, unsigned N, const Policy&)
hypergeometric_pdf_prime_loop_data	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^struct hypergeometric_pdf_prime_loop_data$/;"	s	namespace:boost::math::detail
hypergeometric_pdf_prime_loop_imp	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^T hypergeometric_pdf_prime_loop_imp(hypergeometric_pdf_prime_loop_data& data, hypergeometric_pdf_prime_loop_result_entry<T>& result)$/;"	f	namespace:boost::math::detail	signature:(hypergeometric_pdf_prime_loop_data& data, hypergeometric_pdf_prime_loop_result_entry<T>& result)
hypergeometric_pdf_prime_loop_result_entry	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^struct hypergeometric_pdf_prime_loop_result_entry$/;"	s	namespace:boost::math::detail
hypergeometric_quantile	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned hypergeometric_quantile(T p, T q, unsigned r, unsigned n, unsigned N, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(T p, T q, unsigned r, unsigned n, unsigned N, const Policy&)
hypergeometric_quantile_imp	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^unsigned hypergeometric_quantile_imp(T p, T q, unsigned r, unsigned n, unsigned N, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T p, T q, unsigned r, unsigned n, unsigned N, const Policy& pol)
hypot	/usr/include/boost/math/special_functions/hypot.hpp	/^   hypot(T1 x, T2 y)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y)
hypot	/usr/include/boost/math/special_functions/hypot.hpp	/^   hypot(T1 x, T2 y, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 x, T2 y, const Policy& pol)
hypot	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         hypot(T1 x, T2 y);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y)
hypot	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         hypot(T1 x, T2 y, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 x, T2 y, const Policy&)
hypot	/usr/include/boost/math/tr1_c_macros.ipp	184;"	d	file:
hypot	/usr/include/boost/math/tr1_c_macros.ipp	186;"	d	file:
hypot_imp	/usr/include/boost/math/special_functions/hypot.hpp	/^T hypot_imp(T x, T y, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, T y, const Policy& pol)
hypotf	/usr/include/boost/math/tr1_c_macros.ipp	188;"	d	file:
hypotf	/usr/include/boost/math/tr1_c_macros.ipp	190;"	d	file:
hypotl	/usr/include/boost/math/tr1_c_macros.ipp	192;"	d	file:
hypotl	/usr/include/boost/math/tr1_c_macros.ipp	194;"	d	file:
i	/usr/include/boost/math/special_functions/expint.hpp	/^   int i;$/;"	m	struct:boost::math::detail::expint_fraction	access:private
ibeta	/usr/include/boost/math/special_functions/beta.hpp	/^   ibeta(RT1 a, RT2 b, RT3 x)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
ibeta	/usr/include/boost/math/special_functions/beta.hpp	/^   ibeta(RT1 a, RT2 b, RT3 x, const Policy&)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy&)
ibeta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta(RT1 a, RT2 b, RT3 x); \/\/ Incomplete beta function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
ibeta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta(RT1 a, RT2 b, RT3 x, const Policy& pol); \/\/ Incomplete beta function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy& pol)
ibeta_a_step	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_a_step(T a, T b, T x, T y, int k, const Policy& pol, bool normalised, T* p_derivative)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T y, int k, const Policy& pol, bool normalised, T* p_derivative)
ibeta_derivative	/usr/include/boost/math/special_functions/beta.hpp	/^   ibeta_derivative(RT1 a, RT2 b, RT3 x)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
ibeta_derivative	/usr/include/boost/math/special_functions/beta.hpp	/^   ibeta_derivative(RT1 a, RT2 b, RT3 x, const Policy&)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy&)
ibeta_derivative	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_derivative(RT1 a, RT2 b, RT3 x);  \/\/ derivative of incomplete beta$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
ibeta_derivative	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_derivative(RT1 a, RT2 b, RT3 x, const Policy& pol);  \/\/ derivative of incomplete beta$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy& pol)
ibeta_derivative_imp	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_derivative_imp(T a, T b, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, const Policy& pol)
ibeta_fraction2	/usr/include/boost/math/special_functions/beta.hpp	/^inline T ibeta_fraction2(T a, T b, T x, T y, const Policy& pol, bool normalised, T* p_derivative)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T y, const Policy& pol, bool normalised, T* p_derivative)
ibeta_fraction2_t	/usr/include/boost/math/special_functions/beta.hpp	/^   ibeta_fraction2_t(T a_, T b_, T x_, T y_) : a(a_), b(b_), x(x_), y(y_), m(0) {}$/;"	f	struct:boost::math::detail::ibeta_fraction2_t	access:public	signature:(T a_, T b_, T x_, T y_)
ibeta_fraction2_t	/usr/include/boost/math/special_functions/beta.hpp	/^struct ibeta_fraction2_t$/;"	s	namespace:boost::math::detail
ibeta_imp	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_imp(T a, T b, T x, const Policy& pol, bool inv, bool normalised, T* p_derivative)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, const Policy& pol, bool inv, bool normalised, T* p_derivative)
ibeta_imp	/usr/include/boost/math/special_functions/beta.hpp	/^inline T ibeta_imp(T a, T b, T x, const Policy& pol, bool inv, bool normalised)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, const Policy& pol, bool inv, bool normalised)
ibeta_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibeta_inv(T1 a, T2 b, T3 p)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, T3 p)
ibeta_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibeta_inv(T1 a, T2 b, T3 p, T4* py)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, T3 p, T4* py)
ibeta_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibeta_inv(T1 a, T2 b, T3 p, T4* py, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, T3 p, T4* py, const Policy& pol)
ibeta_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibeta_inv(T1 a, T2 b, T3 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, T3 p, const Policy& pol)
ibeta_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_inv(RT1 a, RT2 b, RT3 p); \/\/ Incomplete beta inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 p)
ibeta_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_inv(RT1 a, RT2 b, RT3 p, const Policy&); \/\/ Incomplete beta inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 p, const Policy&)
ibeta_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_inv(T1 a, T2 b, T3 p, T4* py);$/;"	p	namespace:boost::math	signature:(T1 a, T2 b, T3 p, T4* py)
ibeta_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_inv(T1 a, T2 b, T3 p, T4* py, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 a, T2 b, T3 p, T4* py, const Policy& pol)
ibeta_inv_ab_imp	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^T ibeta_inv_ab_imp(const T& b, const T& z, const T& p, const T& q, bool swap_ab, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T& b, const T& z, const T& p, const T& q, bool swap_ab, const Policy& pol)
ibeta_inv_imp	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^T ibeta_inv_imp(T a, T b, T p, T q, const Policy& pol, T* py)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T p, T q, const Policy& pol, T* py)
ibeta_inva	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^         ibeta_inva(RT1 b, RT2 x, RT3 p)$/;"	f	namespace:boost::math	signature:(RT1 b, RT2 x, RT3 p)
ibeta_inva	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^      ibeta_inva(RT1 b, RT2 x, RT3 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT1 b, RT2 x, RT3 p, const Policy& pol)
ibeta_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_inva(RT1 a, RT2 b, RT3 p); \/\/ Incomplete beta inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 p)
ibeta_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_inva(RT1 a, RT2 b, RT3 p, const Policy&); \/\/ Incomplete beta inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 p, const Policy&)
ibeta_invb	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^         ibeta_invb(RT1 a, RT2 x, RT3 p)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 x, RT3 p)
ibeta_invb	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^      ibeta_invb(RT1 a, RT2 x, RT3 p, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 x, RT3 p, const Policy& pol)
ibeta_invb	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_invb(RT1 a, RT2 b, RT3 p); \/\/ Incomplete beta inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 p)
ibeta_invb	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibeta_invb(RT1 a, RT2 b, RT3 p, const Policy&); \/\/ Incomplete beta inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 p, const Policy&)
ibeta_power_terms	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_power_terms(T a,$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T y, const Lanczos&, bool normalised, const Policy& pol)
ibeta_power_terms	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_power_terms(T a,$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T y, const boost::math::lanczos::undefined_lanczos&, bool normalised, const Policy& pol)
ibeta_roots	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibeta_roots(T _a, T _b, T t, bool inv = false)$/;"	f	struct:boost::math::detail::ibeta_roots	access:public	signature:(T _a, T _b, T t, bool inv = false)
ibeta_roots	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^struct ibeta_roots$/;"	s	namespace:boost::math::detail
ibeta_series	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_series(T a, T b, T x, T s0, const Lanczos&, bool normalised, T* p_derivative, T y, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T s0, const Lanczos&, bool normalised, T* p_derivative, T y, const Policy& pol)
ibeta_series	/usr/include/boost/math/special_functions/beta.hpp	/^T ibeta_series(T a, T b, T x, T s0, const boost::math::lanczos::undefined_lanczos&, bool normalised, T* p_derivative, T y, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T x, T s0, const boost::math::lanczos::undefined_lanczos&, bool normalised, T* p_derivative, T y, const Policy& pol)
ibeta_series_t	/usr/include/boost/math/special_functions/beta.hpp	/^   ibeta_series_t(T a_, T b_, T x_, T mult) : result(mult), x(x_), apn(a_), poch(1-b_), n(1) {}$/;"	f	struct:boost::math::detail::ibeta_series_t	access:public	signature:(T a_, T b_, T x_, T mult)
ibeta_series_t	/usr/include/boost/math/special_functions/beta.hpp	/^struct ibeta_series_t$/;"	s	namespace:boost::math::detail
ibetac	/usr/include/boost/math/special_functions/beta.hpp	/^   ibetac(RT1 a, RT2 b, RT3 x)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
ibetac	/usr/include/boost/math/special_functions/beta.hpp	/^   ibetac(RT1 a, RT2 b, RT3 x, const Policy&)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy&)
ibetac	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac(RT1 a, RT2 b, RT3 x); \/\/ Incomplete beta complement function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x)
ibetac	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac(RT1 a, RT2 b, RT3 x, const Policy& pol); \/\/ Incomplete beta complement function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 x, const Policy& pol)
ibetac_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibetac_inv(RT1 a, RT2 b, RT3 q)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q)
ibetac_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibetac_inv(RT1 a, RT2 b, RT3 q, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q, const Policy& pol)
ibetac_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibetac_inv(T1 a, T2 b, T3 q, T4* py)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, T3 q, T4* py)
ibetac_inv	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   ibetac_inv(T1 a, T2 b, T3 q, T4* py, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, T3 q, T4* py, const Policy& pol)
ibetac_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_inv(RT1 a, RT2 b, RT3 q); \/\/ Incomplete beta complement inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q)
ibetac_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_inv(RT1 a, RT2 b, RT3 q, const Policy&); \/\/ Incomplete beta complement inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q, const Policy&)
ibetac_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_inv(T1 a, T2 b, T3 q, T4* py);$/;"	p	namespace:boost::math	signature:(T1 a, T2 b, T3 q, T4* py)
ibetac_inv	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_inv(T1 a, T2 b, T3 q, T4* py, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 a, T2 b, T3 q, T4* py, const Policy& pol)
ibetac_inva	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^         ibetac_inva(RT1 b, RT2 x, RT3 q)$/;"	f	namespace:boost::math	signature:(RT1 b, RT2 x, RT3 q)
ibetac_inva	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^      ibetac_inva(RT1 b, RT2 x, RT3 q, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT1 b, RT2 x, RT3 q, const Policy& pol)
ibetac_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_inva(RT1 a, RT2 b, RT3 q); \/\/ Incomplete beta complement inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q)
ibetac_inva	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_inva(RT1 a, RT2 b, RT3 q, const Policy&); \/\/ Incomplete beta complement inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q, const Policy&)
ibetac_invb	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^         ibetac_invb(RT1 a, RT2 x, RT3 q)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 x, RT3 q)
ibetac_invb	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^      ibetac_invb(RT1 a, RT2 x, RT3 q, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT1 a, RT2 x, RT3 q, const Policy& pol)
ibetac_invb	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_invb(RT1 a, RT2 b, RT3 q); \/\/ Incomplete beta complement inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q)
ibetac_invb	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         ibetac_invb(RT1 a, RT2 b, RT3 q, const Policy&); \/\/ Incomplete beta complement inverse function.$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 b, RT3 q, const Policy&)
iconv	/usr/include/boost/math/special_functions/detail/iconv.hpp	/^inline int iconv(T v, Policy const& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, Policy const& pol)
iconv_imp	/usr/include/boost/math/special_functions/detail/iconv.hpp	/^inline int iconv_imp(T v, Policy const& pol, mpl::false_ const&)$/;"	f	namespace:boost::math::detail	signature:(T v, Policy const& pol, mpl::false_ const&)
iconv_imp	/usr/include/boost/math/special_functions/detail/iconv.hpp	/^inline int iconv_imp(T v, Policy const&, mpl::true_ const&)$/;"	f	namespace:boost::math::detail	signature:(T v, Policy const&, mpl::true_ const&)
ieee_copy_all_bits_tag	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct ieee_copy_all_bits_tag : public ieee_tag {};$/;"	s	namespace:boost::math::detail	inherits:ieee_tag
ieee_copy_leading_bits_tag	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct ieee_copy_leading_bits_tag : public ieee_tag {};$/;"	s	namespace:boost::math::detail	inherits:ieee_tag
ieee_tag	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct ieee_tag {};$/;"	s	namespace:boost::math::detail
igamma_initializer	/usr/include/boost/math/special_functions/gamma.hpp	/^struct igamma_initializer$/;"	s	namespace:boost::math::detail
igamma_temme_large	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^T igamma_temme_large(T a, T x, const Policy& pol, mpl::int_<113> const *)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, const Policy& pol, mpl::int_<113> const *)
igamma_temme_large	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^T igamma_temme_large(T a, T x, const Policy& pol, mpl::int_<24> const *)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, const Policy& pol, mpl::int_<24> const *)
igamma_temme_large	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^T igamma_temme_large(T a, T x, const Policy& pol, mpl::int_<53> const *)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, const Policy& pol, mpl::int_<53> const *)
igamma_temme_large	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^T igamma_temme_large(T a, T x, const Policy& pol, mpl::int_<64> const *)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, const Policy& pol, mpl::int_<64> const *)
igamma_temme_large	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^inline T igamma_temme_large(T, T, const Policy& \/* pol *\/, mpl::int_<0> const *)$/;"	f	namespace:boost::math::detail	signature:(T, T, const Policy& , mpl::int_<0> const *)
ignore_error	/usr/include/boost/math/policies/policy.hpp	/^   ignore_error = 2,$/;"	e	enum:boost::math::policies::error_policy_type
indeterminate_result_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef indeterminate_result_error<> indeterminate_result_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
indeterminate_result_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_indeterminate_result_error<mpl::_1>, indeterminate_result_error<> >::type indeterminate_result_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
indeterminate_result_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_indeterminate_result_error<mpl::_1>, typename Policy::indeterminate_result_error_type >::type indeterminate_result_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
infinity	/usr/include/boost/math/bindings/e_float.hpp	/^      static const ::boost::math::ef::e_float infinity (void)$/;"	f	class:std::numeric_limits	access:public	signature:(void)
init	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_i0_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_i0_initializer	access:public
init	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_i1_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_i1_initializer	access:public
init	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_j0_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_j0_initializer	access:public
init	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_j1_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_j1_initializer	access:public
init	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_k0_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_k0_initializer	access:public
init	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_k1_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_k1_initializer	access:public
init	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_y0_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_y0_initializer	access:public
init	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^      init()$/;"	f	struct:boost::math::detail::bessel_y1_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^   struct init$/;"	s	struct:boost::math::detail::bessel_y1_initializer	access:public
init	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^      init()$/;"	f	struct:boost::math::detail::erf_inv_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   struct init$/;"	s	struct:boost::math::detail::erf_inv_initializer	access:public
init	/usr/include/boost/math/special_functions/digamma.hpp	/^      init()$/;"	f	struct:boost::math::detail::digamma_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/digamma.hpp	/^   struct init$/;"	s	struct:boost::math::detail::digamma_initializer	access:public
init	/usr/include/boost/math/special_functions/erf.hpp	/^      init()$/;"	f	struct:boost::math::detail::erf_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/erf.hpp	/^   struct init$/;"	s	struct:boost::math::detail::erf_initializer	access:public
init	/usr/include/boost/math/special_functions/expint.hpp	/^      init()$/;"	f	struct:boost::math::detail::expint_1_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/expint.hpp	/^      init()$/;"	f	struct:boost::math::detail::expint_i_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/expint.hpp	/^   struct init$/;"	s	struct:boost::math::detail::expint_1_initializer	access:public
init	/usr/include/boost/math/special_functions/expint.hpp	/^   struct init$/;"	s	struct:boost::math::detail::expint_i_initializer	access:public
init	/usr/include/boost/math/special_functions/expm1.hpp	/^      init()$/;"	f	struct:boost::math::detail::expm1_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/expm1.hpp	/^   struct init$/;"	s	struct:boost::math::detail::expm1_initializer	access:public
init	/usr/include/boost/math/special_functions/gamma.hpp	/^      init()$/;"	f	struct:boost::math::detail::igamma_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/gamma.hpp	/^      init()$/;"	f	struct:boost::math::detail::lgamma_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/gamma.hpp	/^   struct init$/;"	s	struct:boost::math::detail::igamma_initializer	access:public
init	/usr/include/boost/math/special_functions/gamma.hpp	/^   struct init$/;"	s	struct:boost::math::detail::lgamma_initializer	access:public
init	/usr/include/boost/math/special_functions/lanczos.hpp	/^      init()$/;"	f	struct:boost::math::lanczos::lanczos_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/lanczos.hpp	/^   struct init$/;"	s	struct:boost::math::lanczos::lanczos_initializer	access:public
init	/usr/include/boost/math/special_functions/log1p.hpp	/^      init()$/;"	f	struct:boost::math::detail::log1p_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/log1p.hpp	/^   struct init$/;"	s	struct:boost::math::detail::log1p_initializer	access:public
init	/usr/include/boost/math/special_functions/next.hpp	/^      init()$/;"	f	struct:boost::math::detail::min_shift_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/next.hpp	/^   struct init$/;"	s	struct:boost::math::detail::min_shift_initializer	access:public
init	/usr/include/boost/math/special_functions/owens_t.hpp	/^               init()$/;"	f	struct:boost::math::detail::owens_t_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/owens_t.hpp	/^            struct init$/;"	s	struct:boost::math::detail::owens_t_initializer	access:public
init	/usr/include/boost/math/special_functions/zeta.hpp	/^      init()$/;"	f	struct:boost::math::detail::zeta_initializer::init	access:public	signature:()
init	/usr/include/boost/math/special_functions/zeta.hpp	/^   struct init$/;"	s	struct:boost::math::detail::zeta_initializer	access:public
init_chebyshev	/usr/include/boost/math/tools/remez.hpp	/^   void init_chebyshev();$/;"	p	class:boost::math::tools::remez_minimax	access:private	signature:()
init_chebyshev	/usr/include/boost/math/tools/remez.hpp	/^void remez_minimax<T>::init_chebyshev()$/;"	f	class:boost::math::tools::remez_minimax	signature:()
initializer	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_i0_initializer	access:public
initializer	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^const typename bessel_i0_initializer<T>::init bessel_i0_initializer<T>::initializer;$/;"	m	class:boost::math::detail::bessel_i0_initializer
initializer	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_i1_initializer	access:public
initializer	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^const typename bessel_i1_initializer<T>::init bessel_i1_initializer<T>::initializer;$/;"	m	class:boost::math::detail::bessel_i1_initializer
initializer	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_j0_initializer	access:public
initializer	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^const typename bessel_j0_initializer<T>::init bessel_j0_initializer<T>::initializer;$/;"	m	class:boost::math::detail::bessel_j0_initializer
initializer	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_j1_initializer	access:public
initializer	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^const typename bessel_j1_initializer<T>::init bessel_j1_initializer<T>::initializer;$/;"	m	class:boost::math::detail::bessel_j1_initializer
initializer	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_k0_initializer	access:public
initializer	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^const typename bessel_k0_initializer<T, Policy>::init bessel_k0_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::bessel_k0_initializer
initializer	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_k1_initializer	access:public
initializer	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^const typename bessel_k1_initializer<T, Policy>::init bessel_k1_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::bessel_k1_initializer
initializer	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_y0_initializer	access:public
initializer	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^const typename bessel_y0_initializer<T, Policy>::init bessel_y0_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::bessel_y0_initializer
initializer	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::bessel_y1_initializer	access:public
initializer	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^const typename bessel_y1_initializer<T, Policy>::init bessel_y1_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::bessel_y1_initializer
initializer	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::erf_inv_initializer	access:public
initializer	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^const typename erf_inv_initializer<T, Policy>::init erf_inv_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::erf_inv_initializer
initializer	/usr/include/boost/math/special_functions/digamma.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::digamma_initializer	access:public
initializer	/usr/include/boost/math/special_functions/digamma.hpp	/^const typename digamma_initializer<T, Policy>::init digamma_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::digamma_initializer
initializer	/usr/include/boost/math/special_functions/erf.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::erf_initializer	access:public
initializer	/usr/include/boost/math/special_functions/erf.hpp	/^const typename erf_initializer<T, Policy, tag>::init erf_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::erf_initializer
initializer	/usr/include/boost/math/special_functions/expint.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::expint_1_initializer	access:public
initializer	/usr/include/boost/math/special_functions/expint.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::expint_i_initializer	access:public
initializer	/usr/include/boost/math/special_functions/expint.hpp	/^const typename expint_1_initializer<T, Policy, tag>::init expint_1_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::expint_1_initializer
initializer	/usr/include/boost/math/special_functions/expint.hpp	/^const typename expint_i_initializer<T, Policy, tag>::init expint_i_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::expint_i_initializer
initializer	/usr/include/boost/math/special_functions/expm1.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::expm1_initializer	access:public
initializer	/usr/include/boost/math/special_functions/expm1.hpp	/^const typename expm1_initializer<T, Policy, tag>::init expm1_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::expm1_initializer
initializer	/usr/include/boost/math/special_functions/gamma.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::igamma_initializer	access:public
initializer	/usr/include/boost/math/special_functions/gamma.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::lgamma_initializer	access:public
initializer	/usr/include/boost/math/special_functions/gamma.hpp	/^const typename igamma_initializer<T, Policy>::init igamma_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::igamma_initializer
initializer	/usr/include/boost/math/special_functions/gamma.hpp	/^const typename lgamma_initializer<T, Policy>::init lgamma_initializer<T, Policy>::initializer;$/;"	m	class:boost::math::detail::lgamma_initializer
initializer	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::lanczos::lanczos_initializer	access:public
initializer	/usr/include/boost/math/special_functions/lanczos.hpp	/^typename lanczos_initializer<Lanczos, T>::init const lanczos_initializer<Lanczos, T>::initializer;$/;"	m	class:boost::math::lanczos::lanczos_initializer::lanczos_initializer
initializer	/usr/include/boost/math/special_functions/log1p.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::log1p_initializer	access:public
initializer	/usr/include/boost/math/special_functions/log1p.hpp	/^const typename log1p_initializer<T, Policy, tag>::init log1p_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::log1p_initializer
initializer	/usr/include/boost/math/special_functions/next.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::min_shift_initializer	access:public
initializer	/usr/include/boost/math/special_functions/next.hpp	/^const typename min_shift_initializer<T>::init min_shift_initializer<T>::initializer;$/;"	m	class:boost::math::detail::min_shift_initializer
initializer	/usr/include/boost/math/special_functions/owens_t.hpp	/^            static const init initializer;$/;"	m	struct:boost::math::detail::owens_t_initializer	access:public
initializer	/usr/include/boost/math/special_functions/owens_t.hpp	/^         const typename owens_t_initializer<T, Policy, tag>::init owens_t_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::owens_t_initializer
initializer	/usr/include/boost/math/special_functions/zeta.hpp	/^   static const init initializer;$/;"	m	struct:boost::math::detail::zeta_initializer	access:public
initializer	/usr/include/boost/math/special_functions/zeta.hpp	/^const typename zeta_initializer<T, Policy, tag>::init zeta_initializer<T, Policy, tag>::initializer;$/;"	m	class:boost::math::detail::zeta_initializer
insert	/usr/include/boost/math/tools/test_data.hpp	/^   test_data& insert(F func, const parameter_info<T>& arg1)$/;"	f	class:boost::math::tools::test_data	access:public	signature:(F func, const parameter_info<T>& arg1)
insert	/usr/include/boost/math/tools/test_data.hpp	/^   test_data& insert(F func, const parameter_info<T>& arg1, const parameter_info<T>& arg2)$/;"	f	class:boost::math::tools::test_data	access:public	signature:(F func, const parameter_info<T>& arg1, const parameter_info<T>& arg2)
insert	/usr/include/boost/math/tools/test_data.hpp	/^   test_data& insert(F func, const parameter_info<T>& arg1, const parameter_info<T>& arg2, const parameter_info<T>& arg3)$/;"	f	class:boost::math::tools::test_data	access:public	signature:(F func, const parameter_info<T>& arg1, const parameter_info<T>& arg2, const parameter_info<T>& arg3)
integer_power	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^inline T integer_power(const T& x, int ex)$/;"	f	namespace:boost::math::detail	signature:(const T& x, int ex)
integer_round_down	/usr/include/boost/math/policies/policy.hpp	/^   integer_round_down,$/;"	e	enum:boost::math::policies::discrete_quantile_policy_type
integer_round_inwards	/usr/include/boost/math/policies/policy.hpp	/^   integer_round_inwards,$/;"	e	enum:boost::math::policies::discrete_quantile_policy_type
integer_round_nearest	/usr/include/boost/math/policies/policy.hpp	/^   integer_round_nearest$/;"	e	enum:boost::math::policies::discrete_quantile_policy_type
integer_round_outwards	/usr/include/boost/math/policies/policy.hpp	/^   integer_round_outwards,$/;"	e	enum:boost::math::policies::discrete_quantile_policy_type
integer_round_up	/usr/include/boost/math/policies/policy.hpp	/^   integer_round_up,$/;"	e	enum:boost::math::policies::discrete_quantile_policy_type
interval_type	/usr/include/boost/math/distributions/binomial.hpp	/^      enum interval_type{$/;"	g	class:boost::math::binomial_distribution	access:public
inverse_binomial_cornish_fisher	/usr/include/boost/math/distributions/binomial.hpp	/^         T inverse_binomial_cornish_fisher(T n, T sf, T p, T q, const Policy& pol)$/;"	f	namespace:boost::math::binomial_detail	signature:(T n, T sf, T p, T q, const Policy& pol)
inverse_chi_squared	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^typedef inverse_chi_squared_distribution<double> inverse_chi_squared;$/;"	t	namespace:boost::math
inverse_chi_squared_distribution	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   inverse_chi_squared_distribution(RealType df = 1) : m_df(df)$/;"	f	class:boost::math::inverse_chi_squared_distribution	access:public	signature:(RealType df = 1)
inverse_chi_squared_distribution	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   inverse_chi_squared_distribution(RealType df, RealType scale) : m_df(df), m_scale (scale)$/;"	f	class:boost::math::inverse_chi_squared_distribution	access:public	signature:(RealType df, RealType scale)
inverse_chi_squared_distribution	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^class inverse_chi_squared_distribution$/;"	c	namespace:boost::math
inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_down>&, boost::uintmax_t& max_iter)
inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_inwards>&, boost::uintmax_t& max_iter)
inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_nearest>&, boost::uintmax_t& max_iter)
inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_outwards>&, boost::uintmax_t& max_iter)
inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_up>&, boost::uintmax_t& max_iter)
inverse_discrete_quantile	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   inverse_discrete_quantile($/;"	f	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& q, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::real>&, boost::uintmax_t& max_iter)
inverse_discrete_quantile	/usr/include/boost/math/distributions/poisson.hpp	/^         inverse_discrete_quantile($/;"	p	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_down>&, boost::uintmax_t& max_iter)
inverse_discrete_quantile	/usr/include/boost/math/distributions/poisson.hpp	/^         inverse_discrete_quantile($/;"	p	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_inwards>&, boost::uintmax_t& max_iter)
inverse_discrete_quantile	/usr/include/boost/math/distributions/poisson.hpp	/^         inverse_discrete_quantile($/;"	p	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_nearest>&, boost::uintmax_t& max_iter)
inverse_discrete_quantile	/usr/include/boost/math/distributions/poisson.hpp	/^         inverse_discrete_quantile($/;"	p	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_outwards>&, boost::uintmax_t& max_iter)
inverse_discrete_quantile	/usr/include/boost/math/distributions/poisson.hpp	/^         inverse_discrete_quantile($/;"	p	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::integer_round_up>&, boost::uintmax_t& max_iter)
inverse_discrete_quantile	/usr/include/boost/math/distributions/poisson.hpp	/^         inverse_discrete_quantile($/;"	p	namespace:boost::math::detail	signature:( const Dist& dist, const typename Dist::value_type& p, const typename Dist::value_type& guess, const typename Dist::value_type& multiplier, const typename Dist::value_type& adder, const policies::discrete_quantile<policies::real>&, boost::uintmax_t& max_iter)
inverse_gamma	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^typedef inverse_gamma_distribution<double> inverse_gamma;$/;"	t	namespace:boost::math
inverse_gamma_distribution	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   inverse_gamma_distribution(RealType shape = 1, RealType scale = 1)$/;"	f	class:boost::math::inverse_gamma_distribution	access:public	signature:(RealType shape = 1, RealType scale = 1)
inverse_gamma_distribution	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^class inverse_gamma_distribution$/;"	c	namespace:boost::math
inverse_gaussian	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^typedef inverse_gaussian_distribution<double> inverse_gaussian;$/;"	t	namespace:boost::math
inverse_gaussian_distribution	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   inverse_gaussian_distribution(RealType mean = 1, RealType scale = 1)$/;"	f	class:boost::math::inverse_gaussian_distribution	access:public	signature:(RealType mean = 1, RealType scale = 1)
inverse_gaussian_distribution	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^class inverse_gaussian_distribution$/;"	c	namespace:boost::math
inverse_gaussian_quantile_complement_functor	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^    inverse_gaussian_quantile_complement_functor(const boost::math::inverse_gaussian_distribution<RealType, Policy> dist, RealType const& p)$/;"	f	struct:boost::math::inverse_gaussian_quantile_complement_functor	access:public	signature:(const boost::math::inverse_gaussian_distribution<RealType, Policy> dist, RealType const& p)
inverse_gaussian_quantile_complement_functor	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^struct inverse_gaussian_quantile_complement_functor$/;"	s	namespace:boost::math
inverse_gaussian_quantile_functor	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  inverse_gaussian_quantile_functor(const boost::math::inverse_gaussian_distribution<RealType, Policy> dist, RealType const& p)$/;"	f	struct:boost::math::inverse_gaussian_quantile_functor	access:public	signature:(const boost::math::inverse_gaussian_distribution<RealType, Policy> dist, RealType const& p)
inverse_gaussian_quantile_functor	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^struct inverse_gaussian_quantile_functor$/;"	s	namespace:boost::math
inverse_negative_binomial_cornish_fisher	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^T inverse_negative_binomial_cornish_fisher(T n, T sf, T sfc, T p, T q, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T n, T sf, T sfc, T p, T q, const Policy& pol)
inverse_poisson_cornish_fisher	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^T inverse_poisson_cornish_fisher(T lambda, T p, T q, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T lambda, T p, T q, const Policy& pol)
inverse_students_t	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^T inverse_students_t(T df, T u, T v, const Policy& pol, bool* pexact = 0)$/;"	f	namespace:boost::math::detail	signature:(T df, T u, T v, const Policy& pol, bool* pexact = 0)
inverse_students_t_body_series	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^T inverse_students_t_body_series(T df, T u, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T df, T u, const Policy& pol)
inverse_students_t_hill	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^T inverse_students_t_hill(T ndf, T u, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T ndf, T u, const Policy& pol)
inverse_students_t_tail_series	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^T inverse_students_t_tail_series(T df, T v, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T df, T v, const Policy& pol)
invert	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   bool invert;$/;"	m	struct:boost::math::detail::gamma_inva_t	access:private
invert	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   bool invert, swap_ab;$/;"	m	struct:boost::math::detail::beta_inv_ab_t	access:private
invert	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   bool invert;$/;"	m	struct:boost::math::detail::ibeta_roots	access:private
invert	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   bool invert;$/;"	m	struct:boost::math::detail::gamma_p_inverse_func	access:private
iround	/usr/include/boost/math/bindings/e_float.hpp	/^inline int iround(const e_float& v, const Policy& pol)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const Policy& pol)
iround	/usr/include/boost/math/bindings/mpfr.hpp	/^inline int iround(mpfr_class const& x, const Policy& pol)$/;"	f	signature:(mpfr_class const& x, const Policy& pol)
iround	/usr/include/boost/math/bindings/mpreal.hpp	/^inline int iround(mpfr::mpreal const& x, const Policy& pol)$/;"	f	namespace:mpfr	signature:(mpfr::mpreal const& x, const Policy& pol)
iround	/usr/include/boost/math/bindings/rr.hpp	/^   inline int iround(RR const& x, const Policy& pol)$/;"	f	namespace:boost::math::ntl	signature:(RR const& x, const Policy& pol)
iround	/usr/include/boost/math/concepts/real_concept.hpp	/^inline int iround(const concepts::real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v)
iround	/usr/include/boost/math/concepts/real_concept.hpp	/^inline int iround(const concepts::real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v, const Policy& pol)
iround	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline int iround(const concepts::std_real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v)
iround	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline int iround(const concepts::std_real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v, const Policy& pol)
iround	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   int iround(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
iround	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   int iround(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
iround	/usr/include/boost/math/special_functions/round.hpp	/^inline int iround(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
iround	/usr/include/boost/math/special_functions/round.hpp	/^inline int iround(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
is_convertible	/usr/include/boost/math/bindings/mpfr.hpp	/^template<> struct is_convertible<long double, mpfr_class> : public mpl::false_{};$/;"	s	namespace:boost	inherits:mpl::false_
is_default_policy	/usr/include/boost/math/policies/policy.hpp	/^template <class T> struct is_default_policy $/;"	s	namespace:boost::math::policies::detail	inherits:mpl::bool_
is_default_policy_imp	/usr/include/boost/math/policies/policy.hpp	/^struct is_default_policy_imp$/;"	s	namespace:boost::math::policies::detail
is_distribution_imp	/usr/include/boost/math/tools/traits.hpp	/^struct is_distribution_imp$/;"	s	namespace:boost::math::tools::detail
is_generic_tag_false	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^inline bool is_generic_tag_false(const generic_tag<false>*)$/;"	f	namespace:boost::math::detail	signature:(const generic_tag<false>*)
is_generic_tag_false	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^inline bool is_generic_tag_false(const void*)$/;"	f	namespace:boost::math::detail	signature:(const void*)
is_nan_helper	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool is_nan_helper(T t, const boost::true_type&)$/;"	f	namespace:boost::math_detail	signature:(T t, const boost::true_type&)
is_nan_helper	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool is_nan_helper(T, const boost::false_type&)$/;"	f	namespace:boost::math_detail	signature:(T, const boost::false_type&)
is_odd	/usr/include/boost/math/special_functions/gamma.hpp	/^inline bool is_odd(T v)$/;"	f	namespace:boost::math::detail	signature:(T v)
is_odd	/usr/include/boost/math/special_functions/gamma.hpp	/^inline bool is_odd(T v, const boost::false_type&)$/;"	f	namespace:boost::math::detail	signature:(T v, const boost::false_type&)
is_odd	/usr/include/boost/math/special_functions/gamma.hpp	/^inline bool is_odd(T v, const boost::true_type&)$/;"	f	namespace:boost::math::detail	signature:(T v, const boost::true_type&)
is_pair	/usr/include/boost/math/tools/fraction.hpp	/^   struct is_pair : public boost::false_type{};$/;"	s	namespace:boost::math::tools::detail	inherits:boost::false_type
is_pair	/usr/include/boost/math/tools/fraction.hpp	/^   struct is_pair<std::pair<T,U> > : public boost::true_type{};$/;"	s	namespace:boost::math::tools::detail	inherits:boost::true_type
is_positive	/usr/include/boost/math/special_functions/pow.hpp	/^                     >::type is_positive;$/;"	t	struct:boost::math::detail::select_power_if_positive	access:public
is_scaled_distribution_helper	/usr/include/boost/math/tools/traits.hpp	/^struct is_scaled_distribution_helper$/;"	s	namespace:boost::math::tools::detail
is_scaled_distribution_helper	/usr/include/boost/math/tools/traits.hpp	/^struct is_scaled_distribution_helper<D, true>$/;"	s	namespace:boost::math::tools::detail
is_scaled_distribution_imp	/usr/include/boost/math/tools/traits.hpp	/^struct is_scaled_distribution_imp$/;"	s	namespace:boost::math::tools::detail
is_valid_policy	/usr/include/boost/math/policies/policy.hpp	/^template <class T> struct is_valid_policy $/;"	s	namespace:boost::math::policies::detail	inherits:mpl::bool_
is_valid_policy_imp	/usr/include/boost/math/policies/policy.hpp	/^struct is_valid_policy_imp $/;"	s	namespace:boost::math::policies::detail
isfinite	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isfinite)(T x)$/;"	f	namespace:boost::math	signature:(T x)
isfinite	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isfinite)(long double x)$/;"	f	namespace:boost::math	signature:(long double x)
isfinite_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isfinite_impl(T x, generic_tag<false> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<false> const&)
isfinite_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isfinite_impl(T x, generic_tag<true> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<true> const&)
isfinite_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isfinite_impl(T x, ieee_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_tag const&)
isfinite_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isfinite_impl(T x, native_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, native_tag const&)
isinf	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isinf)(T x)$/;"	f	namespace:boost::math	signature:(T x)
isinf	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isinf)(long double x)$/;"	f	namespace:boost::math	signature:(long double x)
isinf_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isinf_impl(T x, generic_tag<false> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<false> const&)
isinf_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isinf_impl(T x, generic_tag<true> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<true> const&)
isinf_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isinf_impl(T x, ieee_copy_all_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_all_bits_tag const&)
isinf_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isinf_impl(T x, ieee_copy_leading_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_leading_bits_tag const&)
isinf_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isinf_impl(T x, native_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, native_tag const&)
isnan	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isnan)(T x)$/;"	f	namespace:boost::math	signature:(T x)
isnan	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isnan)(long double x)$/;"	f	namespace:boost::math	signature:(long double x)
isnan_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnan_impl(T x, generic_tag<false> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<false> const&)
isnan_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnan_impl(T x, generic_tag<true> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<true> const&)
isnan_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnan_impl(T x, ieee_copy_all_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_all_bits_tag const&)
isnan_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnan_impl(T x, ieee_copy_leading_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_leading_bits_tag const&)
isnan_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnan_impl(T x, native_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, native_tag const&)
isnormal	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isnormal)(T x)$/;"	f	namespace:boost::math	signature:(T x)
isnormal	/usr/include/boost/math/special_functions/fpclassify.hpp	/^inline bool (isnormal)(long double x)$/;"	f	namespace:boost::math	signature:(long double x)
isnormal_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnormal_impl(T x, generic_tag<false> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<false> const&)
isnormal_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnormal_impl(T x, generic_tag<true> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<true> const&)
isnormal_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnormal_impl(T x, ieee_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_tag const&)
isnormal_impl	/usr/include/boost/math/special_functions/fpclassify.hpp	/^    inline bool isnormal_impl(T x, native_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, native_tag const&)
iter	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::find_if<Seq, Pred>::type iter;$/;"	t	struct:boost::math::policies::detail::find_arg	access:private
iterate	/usr/include/boost/math/tools/remez.hpp	/^   T iterate();$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:()
iterate	/usr/include/boost/math/tools/remez.hpp	/^T remez_minimax<T>::iterate()$/;"	f	class:boost::math::tools::remez_minimax	signature:()
iterator	/usr/include/boost/math/tools/test_data.hpp	/^   typedef typename container_type::iterator iterator;$/;"	t	class:boost::math::tools::test_data	access:public
itrunc	/usr/include/boost/math/bindings/e_float.hpp	/^inline int itrunc(const e_float& v, const Policy& pol)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const Policy& pol)
itrunc	/usr/include/boost/math/bindings/mpfr.hpp	/^inline int itrunc(mpfr_class const& x, const Policy& pol)$/;"	f	signature:(mpfr_class const& x, const Policy& pol)
itrunc	/usr/include/boost/math/bindings/mpreal.hpp	/^inline int itrunc(mpfr::mpreal const& x, const Policy& pol)$/;"	f	namespace:mpfr	signature:(mpfr::mpreal const& x, const Policy& pol)
itrunc	/usr/include/boost/math/bindings/rr.hpp	/^   inline int itrunc(RR const& x, const Policy& pol)$/;"	f	namespace:boost::math::ntl	signature:(RR const& x, const Policy& pol)
itrunc	/usr/include/boost/math/concepts/real_concept.hpp	/^inline int itrunc(const concepts::real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v)
itrunc	/usr/include/boost/math/concepts/real_concept.hpp	/^inline int itrunc(const concepts::real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v, const Policy& pol)
itrunc	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline int itrunc(const concepts::std_real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v)
itrunc	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline int itrunc(const concepts::std_real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v, const Policy& pol)
itrunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   int itrunc(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
itrunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   int itrunc(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
itrunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline int itrunc(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
itrunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline int itrunc(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
jacobi_cd	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_cd(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
jacobi_cd	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_cd(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_cd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_cd(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
jacobi_cd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_cd(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_cn	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_cn(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
jacobi_cn	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_cn(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_cn	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_cn(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
jacobi_cn	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_cn(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_cs	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_cs(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
jacobi_cs	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_cs(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_cs	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_cs(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
jacobi_cs	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_cs(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_dc	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_dc(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
jacobi_dc	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_dc(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_dc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_dc(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
jacobi_dc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_dc(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_dn	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_dn(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
jacobi_dn	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_dn(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_dn	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_dn(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
jacobi_dn	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_dn(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_ds	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_ds(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
jacobi_ds	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_ds(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_ds	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_ds(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
jacobi_ds	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_ds(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_elliptic	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T>::type jacobi_elliptic(T k, T theta, T* pcn, T* pdn)$/;"	f	namespace:boost::math	signature:(T k, T theta, T* pcn, T* pdn)
jacobi_elliptic	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T>::type jacobi_elliptic(T k, T theta, T* pcn, T* pdn, const Policy&)$/;"	f	namespace:boost::math	signature:(T k, T theta, T* pcn, T* pdn, const Policy&)
jacobi_elliptic	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type jacobi_elliptic(T k, T theta, T* pcn = 0, T* pdn = 0);$/;"	p	namespace:boost::math	signature:(T k, T theta, T* pcn = 0, T* pdn = 0)
jacobi_elliptic	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type jacobi_elliptic(T k, T theta, T* pcn, T* pdn, const Policy&);$/;"	p	namespace:boost::math	signature:(T k, T theta, T* pcn, T* pdn, const Policy&)
jacobi_imp	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^T jacobi_imp(const T& x, const T& k, T* cn, T* dn, const Policy& pol, const char* function)$/;"	f	namespace:boost::math::detail	signature:(const T& x, const T& k, T* cn, T* dn, const Policy& pol, const char* function)
jacobi_nc	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_nc(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
jacobi_nc	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_nc(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_nc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_nc(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
jacobi_nc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_nc(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_nd	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_nd(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
jacobi_nd	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_nd(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_nd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_nd(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
jacobi_nd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_nd(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_ns	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_ns(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
jacobi_ns	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_ns(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_ns	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_ns(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
jacobi_ns	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_ns(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_recurse	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^T jacobi_recurse(const T& x, const T& k, T anm1, T bnm1, unsigned N, T* pTn, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T& x, const T& k, T anm1, T bnm1, unsigned N, T* pTn, const Policy& pol)
jacobi_sc	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_sc(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
jacobi_sc	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_sc(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_sc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_sc(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
jacobi_sc	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_sc(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_sd	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_sd(T k, U theta)$/;"	f	namespace:boost::math	signature:(T k, U theta)
jacobi_sd	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_sd(T k, U theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_sd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_sd(T k, U theta);$/;"	p	namespace:boost::math	signature:(T k, U theta)
jacobi_sd	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_sd(T k, U theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T k, U theta, const Policy& pol)
jacobi_sn	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_sn(U k, T theta)$/;"	f	namespace:boost::math	signature:(U k, T theta)
jacobi_sn	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^inline typename tools::promote_args<T, U>::type jacobi_sn(U k, T theta, const Policy& pol)$/;"	f	namespace:boost::math	signature:(U k, T theta, const Policy& pol)
jacobi_sn	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_sn(U k, T theta);$/;"	p	namespace:boost::math	signature:(U k, T theta)
jacobi_sn	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T, U>::type jacobi_sn(U k, T theta, const Policy& pol);$/;"	p	namespace:boost::math	signature:(U k, T theta, const Policy& pol)
jeffreys_prior_interval	/usr/include/boost/math/distributions/binomial.hpp	/^         jeffreys_prior_interval$/;"	e	enum:boost::math::binomial_distribution::interval_type
k	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
k	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   unsigned k;$/;"	m	struct:boost::math::detail::cyl_bessel_i_small_z	access:private
k	/usr/include/boost/math/special_functions/expint.hpp	/^   unsigned k;$/;"	m	struct:boost::math::detail::expint_i_series	access:private
k	/usr/include/boost/math/special_functions/expint.hpp	/^   unsigned k;$/;"	m	struct:boost::math::detail::expint_series	access:private
k	/usr/include/boost/math/special_functions/expm1.hpp	/^     int k;$/;"	m	struct:boost::math::detail::expm1_series	access:private
k	/usr/include/boost/math/special_functions/gamma.hpp	/^   int k;$/;"	m	struct:boost::math::detail::upper_incomplete_gamma_fract	access:private
k	/usr/include/boost/math/special_functions/log1p.hpp	/^     int k;$/;"	m	struct:boost::math::detail::log1p_series	access:private
kahan_sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type kahan_sum_series(Functor& func, int bits)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, int bits)
kahan_sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type kahan_sum_series(Functor& func, int bits, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, int bits, boost::uintmax_t& max_terms)
khinchin	/usr/include/boost/math/constants/calculate_constants.hpp	/^T khinchin(int digits)$/;"	f	namespace:boost::math::constants::detail::khinchin_detail	signature:(int digits)
khinchin_detail	/usr/include/boost/math/constants/calculate_constants.hpp	/^namespace khinchin_detail{$/;"	n	namespace:boost::math::constants::detail
kurtosis	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class kurtosis(const rayleigh_distribution<mpfr_class, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<mpfr_class, Policy>& )
kurtosis	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal kurtosis(const rayleigh_distribution<mpfr::mpreal, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<mpfr::mpreal, Policy>& )
kurtosis	/usr/include/boost/math/concepts/distributions.hpp	/^RealType kurtosis(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
kurtosis	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType kurtosis(const bernoulli_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType kurtosis(const beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType kurtosis(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType kurtosis(const cauchy_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& )
kurtosis	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType kurtosis(const chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType kurtosis(const exponential_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& )
kurtosis	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType kurtosis(const extreme_value_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& )
kurtosis	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType kurtosis(const fisher_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType kurtosis(const gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType kurtosis(const geometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType kurtosis(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType kurtosis(const inverse_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType kurtosis(const inverse_gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType kurtosis(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType kurtosis(const laplace_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& )
kurtosis	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType kurtosis(const logistic_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType kurtosis(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType kurtosis(const negative_binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType kurtosis(const non_central_beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType kurtosis(const non_central_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType kurtosis(const non_central_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType kurtosis(const non_central_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType kurtosis(const normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& )
kurtosis	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType kurtosis(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType kurtosis(const poisson_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType kurtosis(const rayleigh_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& )
kurtosis	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType kurtosis(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType kurtosis(const students_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType kurtosis(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType kurtosis(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
kurtosis	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType kurtosis(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class kurtosis_excess(const rayleigh_distribution<mpfr_class, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<mpfr_class, Policy>& )
kurtosis_excess	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal kurtosis_excess(const rayleigh_distribution<mpfr::mpreal, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<mpfr::mpreal, Policy>& )
kurtosis_excess	/usr/include/boost/math/concepts/distributions.hpp	/^RealType kurtosis_excess(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType kurtosis_excess(const bernoulli_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType kurtosis_excess(const beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType kurtosis_excess(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType kurtosis_excess(const cauchy_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& )
kurtosis_excess	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType kurtosis_excess(const chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType kurtosis_excess(const exponential_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& )
kurtosis_excess	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType kurtosis_excess(const extreme_value_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& )
kurtosis_excess	/usr/include/boost/math/distributions/fisher_f.hpp	/^RealType kurtosis_excess(const fisher_f_distribution<RealType, Policy>& dist);$/;"	p	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType kurtosis_excess(const fisher_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType kurtosis_excess(const gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType kurtosis_excess(const geometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType kurtosis_excess(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType kurtosis_excess(const inverse_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType kurtosis_excess(const inverse_gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType kurtosis_excess(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType kurtosis_excess(const laplace_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& )
kurtosis_excess	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType kurtosis_excess(const logistic_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& )
kurtosis_excess	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType kurtosis_excess(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType kurtosis_excess(const negative_binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType kurtosis_excess(const non_central_beta_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& )
kurtosis_excess	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType kurtosis_excess(const non_central_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType kurtosis_excess(const non_central_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T kurtosis_excess(T v, T delta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, const Policy& pol)
kurtosis_excess	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType kurtosis_excess(const non_central_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType kurtosis_excess(const normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& )
kurtosis_excess	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType kurtosis_excess(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType kurtosis_excess(const poisson_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType kurtosis_excess(const rayleigh_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& )
kurtosis_excess	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType kurtosis_excess(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType kurtosis_excess(const students_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType kurtosis_excess(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType kurtosis_excess(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
kurtosis_excess	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType kurtosis_excess(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
l1	/usr/include/boost/math/octonion.hpp	/^        inline T                                l1(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
l1	/usr/include/boost/math/quaternion.hpp	/^        inline T                                l1(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
laguerre	/usr/include/boost/math/special_functions/laguerre.hpp	/^   laguerre(unsigned n, T x)$/;"	f	namespace:boost::math	signature:(unsigned n, T x)
laguerre	/usr/include/boost/math/special_functions/laguerre.hpp	/^   laguerre(unsigned n, T1 m, T2 x)$/;"	f	namespace:boost::math	signature:(unsigned n, T1 m, T2 x)
laguerre	/usr/include/boost/math/special_functions/laguerre.hpp	/^   laguerre(unsigned n, unsigned m, T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, unsigned m, T x, const Policy& pol)
laguerre	/usr/include/boost/math/special_functions/laguerre.hpp	/^   laguerre(unsigned n, unsigned m, T x, const mpl::false_&)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, unsigned m, T x, const mpl::false_&)
laguerre	/usr/include/boost/math/special_functions/laguerre.hpp	/^laguerre(unsigned n, T x, const Policy&, const mpl::true_&)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T x, const Policy&, const mpl::true_&)
laguerre	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      laguerre(unsigned n, T x);$/;"	p	namespace:boost::math	signature:(unsigned n, T x)
laguerre	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      laguerre(unsigned n, T1 m, T2 x);$/;"	p	namespace:boost::math	signature:(unsigned n, T1 m, T2 x)
laguerre	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      laguerre(unsigned n, unsigned m, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned n, unsigned m, T x, const Policy& pol)
laguerre	/usr/include/boost/math/tr1_c_macros.ipp	727;"	d	file:
laguerre	/usr/include/boost/math/tr1_c_macros.ipp	729;"	d	file:
laguerre_imp	/usr/include/boost/math/special_functions/laguerre.hpp	/^T laguerre_imp(unsigned n, T x)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T x)
laguerre_imp	/usr/include/boost/math/special_functions/laguerre.hpp	/^T laguerre_imp(unsigned n, unsigned m, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, unsigned m, T x, const Policy& pol)
laguerre_next	/usr/include/boost/math/special_functions/laguerre.hpp	/^   laguerre_next(unsigned n, T1 x, T2 Ln, T3 Lnm1)$/;"	f	namespace:boost::math	signature:(unsigned n, T1 x, T2 Ln, T3 Lnm1)
laguerre_next	/usr/include/boost/math/special_functions/laguerre.hpp	/^   laguerre_next(unsigned n, unsigned l, T1 x, T2 Pl, T3 Plm1)$/;"	f	namespace:boost::math	signature:(unsigned n, unsigned l, T1 x, T2 Pl, T3 Plm1)
laguerre_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         laguerre_next(unsigned n, T1 x, T2 Ln, T3 Lnm1);$/;"	p	namespace:boost::math	signature:(unsigned n, T1 x, T2 Ln, T3 Lnm1)
laguerre_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      laguerre_next(unsigned n, unsigned l, T1 x, T2 Pl, T3 Plm1);$/;"	p	namespace:boost::math	signature:(unsigned n, unsigned l, T1 x, T2 Pl, T3 Plm1)
laguerre_result	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   struct laguerre_result$/;"	s	namespace:boost::math
laguerref	/usr/include/boost/math/tr1_c_macros.ipp	731;"	d	file:
laguerref	/usr/include/boost/math/tr1_c_macros.ipp	733;"	d	file:
laguerrel	/usr/include/boost/math/tr1_c_macros.ipp	735;"	d	file:
laguerrel	/usr/include/boost/math/tr1_c_macros.ipp	737;"	d	file:
lam	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType lam;$/;"	m	struct:boost::math::detail::degrees_of_freedom_finder	access:private
lambda	/usr/include/boost/math/distributions/exponential.hpp	/^   RealType lambda()const { return m_lambda; }$/;"	f	class:boost::math::exponential_distribution	access:public	signature:() const
lanczos	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n	namespace:boost::math
lanczos	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace lanczos{$/;"	n	namespace:boost::math
lanczos	/usr/include/boost/math/bindings/mpfr.hpp	/^struct lanczos<mpfr_class, Policy>$/;"	s	namespace:boost::math::lanczos
lanczos	/usr/include/boost/math/bindings/mpreal.hpp	/^namespace lanczos{$/;"	n	namespace:boost::math
lanczos	/usr/include/boost/math/bindings/mpreal.hpp	/^struct lanczos<mpfr::mpreal, Policy>$/;"	s	namespace:boost::math::lanczos
lanczos	/usr/include/boost/math/bindings/rr.hpp	/^namespace lanczos{$/;"	n	namespace:boost::math
lanczos	/usr/include/boost/math/bindings/rr.hpp	/^struct lanczos<ntl::RR, Policy>$/;"	s	namespace:boost::math::lanczos
lanczos	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n	namespace:boost::math
lanczos	/usr/include/boost/math/special_functions/lanczos.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n	namespace:boost::math
lanczos	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos$/;"	s	namespace:boost::math::lanczos
lanczos11	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos11 : public mpl::int_<60>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
lanczos13	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos13 : public mpl::int_<72>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
lanczos13UDT	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^typedef lanczos13 lanczos13UDT;$/;"	t	namespace:boost::math::lanczos
lanczos13m53	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos13m53 : public mpl::int_<53>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
lanczos17m64	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos17m64 : public mpl::int_<64>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
lanczos22	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos22 : public mpl::int_<120>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
lanczos22UDT	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^struct lanczos22UDT : public mpl::int_<120>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
lanczos24m113	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos24m113 : public mpl::int_<113>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
lanczos31UDT	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^struct lanczos31UDT$/;"	s	namespace:boost::math::lanczos
lanczos6	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos6 : public mpl::int_<35>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
lanczos61UDT	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^struct lanczos61UDT$/;"	s	namespace:boost::math::lanczos
lanczos6m24	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos6m24 : public mpl::int_<24>$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
lanczos_initializer	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct lanczos_initializer$/;"	s	namespace:boost::math::lanczos
lanczos_list	/usr/include/boost/math/special_functions/lanczos.hpp	/^   undefined_lanczos> lanczos_list;$/;"	t	namespace:boost::math::lanczos
lanczos_sum	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos22UDT	access:public	signature:(const T& z)
lanczos_sum	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos31UDT	access:public	signature:(const T& z)
lanczos_sum	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos61UDT	access:public	signature:(const T& z)
lanczos_sum	/usr/include/boost/math/bindings/mpfr.hpp	/^   static mpfr_class lanczos_sum(const mpfr_class& z)$/;"	f	struct:boost::math::lanczos::mpfr_lanczos	access:public	signature:(const mpfr_class& z)
lanczos_sum	/usr/include/boost/math/bindings/mpreal.hpp	/^   static mpfr::mpreal lanczos_sum(const mpfr::mpreal& z)$/;"	f	struct:boost::math::lanczos::mpreal_lanczos	access:public	signature:(const mpfr::mpreal& z)
lanczos_sum	/usr/include/boost/math/bindings/rr.hpp	/^   static ntl::RR lanczos_sum(const ntl::RR& z)$/;"	f	struct:boost::math::lanczos::ntl_lanczos	access:public	signature:(const ntl::RR& z)
lanczos_sum	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	/^inline double lanczos13m53::lanczos_sum<double>(const double& x)$/;"	f	class:boost::math::lanczos::lanczos13m53	signature:(const double& x)
lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos11	access:public	signature:(const T& z)
lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos13	access:public	signature:(const T& z)
lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos13m53	access:public	signature:(const T& z)
lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos17m64	access:public	signature:(const T& z)
lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos22	access:public	signature:(const T& z)
lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos24m113	access:public	signature:(const T& z)
lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos6	access:public	signature:(const T& z)
lanczos_sum	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos6m24	access:public	signature:(const T& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos22UDT	access:public	signature:(const T& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos31UDT	access:public	signature:(const T& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos61UDT	access:public	signature:(const T& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/bindings/mpfr.hpp	/^   static mpfr_class lanczos_sum_expG_scaled(const mpfr_class& z)$/;"	f	struct:boost::math::lanczos::mpfr_lanczos	access:public	signature:(const mpfr_class& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/bindings/mpreal.hpp	/^   static mpfr::mpreal lanczos_sum_expG_scaled(const mpfr::mpreal& z)$/;"	f	struct:boost::math::lanczos::mpreal_lanczos	access:public	signature:(const mpfr::mpreal& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/bindings/rr.hpp	/^   static ntl::RR lanczos_sum_expG_scaled(const ntl::RR& z)$/;"	f	struct:boost::math::lanczos::ntl_lanczos	access:public	signature:(const ntl::RR& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	/^inline double lanczos13m53::lanczos_sum_expG_scaled<double>(const double& x)$/;"	f	class:boost::math::lanczos::lanczos13m53	signature:(const double& x)
lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos11	access:public	signature:(const T& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos13	access:public	signature:(const T& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos13m53	access:public	signature:(const T& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos17m64	access:public	signature:(const T& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos22	access:public	signature:(const T& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos24m113	access:public	signature:(const T& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos6	access:public	signature:(const T& z)
lanczos_sum_expG_scaled	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_expG_scaled(const T& z)$/;"	f	struct:boost::math::lanczos::lanczos6m24	access:public	signature:(const T& z)
lanczos_sum_near_1	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos22UDT	access:public	signature:(const T& dz)
lanczos_sum_near_1	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos31UDT	access:public	signature:(const T& dz)
lanczos_sum_near_1	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos61UDT	access:public	signature:(const T& dz)
lanczos_sum_near_1	/usr/include/boost/math/bindings/mpfr.hpp	/^   static mpfr_class lanczos_sum_near_1(const mpfr_class& z)$/;"	f	struct:boost::math::lanczos::mpfr_lanczos	access:public	signature:(const mpfr_class& z)
lanczos_sum_near_1	/usr/include/boost/math/bindings/mpreal.hpp	/^   static mpfr::mpreal lanczos_sum_near_1(const mpfr::mpreal& z)$/;"	f	struct:boost::math::lanczos::mpreal_lanczos	access:public	signature:(const mpfr::mpreal& z)
lanczos_sum_near_1	/usr/include/boost/math/bindings/rr.hpp	/^   static ntl::RR lanczos_sum_near_1(const ntl::RR& z)$/;"	f	struct:boost::math::lanczos::ntl_lanczos	access:public	signature:(const ntl::RR& z)
lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos11	access:public	signature:(const T& dz)
lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos13	access:public	signature:(const T& dz)
lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos13m53	access:public	signature:(const T& dz)
lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos17m64	access:public	signature:(const T& dz)
lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos22	access:public	signature:(const T& dz)
lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos24m113	access:public	signature:(const T& dz)
lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos6	access:public	signature:(const T& dz)
lanczos_sum_near_1	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_1(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos6m24	access:public	signature:(const T& dz)
lanczos_sum_near_2	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos22UDT	access:public	signature:(const T& dz)
lanczos_sum_near_2	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos31UDT	access:public	signature:(const T& dz)
lanczos_sum_near_2	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos61UDT	access:public	signature:(const T& dz)
lanczos_sum_near_2	/usr/include/boost/math/bindings/mpfr.hpp	/^   static mpfr_class lanczos_sum_near_2(const mpfr_class& z)$/;"	f	struct:boost::math::lanczos::mpfr_lanczos	access:public	signature:(const mpfr_class& z)
lanczos_sum_near_2	/usr/include/boost/math/bindings/mpreal.hpp	/^   static mpfr::mpreal lanczos_sum_near_2(const mpfr::mpreal& z)$/;"	f	struct:boost::math::lanczos::mpreal_lanczos	access:public	signature:(const mpfr::mpreal& z)
lanczos_sum_near_2	/usr/include/boost/math/bindings/rr.hpp	/^   static ntl::RR lanczos_sum_near_2(const ntl::RR& z)$/;"	f	struct:boost::math::lanczos::ntl_lanczos	access:public	signature:(const ntl::RR& z)
lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos11	access:public	signature:(const T& dz)
lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos13	access:public	signature:(const T& dz)
lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos13m53	access:public	signature:(const T& dz)
lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos17m64	access:public	signature:(const T& dz)
lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos22	access:public	signature:(const T& dz)
lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos24m113	access:public	signature:(const T& dz)
lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos6	access:public	signature:(const T& dz)
lanczos_sum_near_2	/usr/include/boost/math/special_functions/lanczos.hpp	/^   static T lanczos_sum_near_2(const T& dz)$/;"	f	struct:boost::math::lanczos::lanczos6m24	access:public	signature:(const T& dz)
laplace	/usr/include/boost/math/distributions/laplace.hpp	/^typedef laplace_distribution<double> laplace;$/;"	t	namespace:boost::math
laplace_distribution	/usr/include/boost/math/distributions/laplace.hpp	/^   laplace_distribution(RealType location = 0, RealType scale = 1)$/;"	f	class:boost::math::laplace_distribution	access:public	signature:(RealType location = 0, RealType scale = 1)
laplace_distribution	/usr/include/boost/math/distributions/laplace.hpp	/^class laplace_distribution$/;"	c	namespace:boost::math
largest_cbrt_int_type	/usr/include/boost/math/special_functions/cbrt.hpp	/^struct largest_cbrt_int_type$/;"	s	namespace:boost::math::detail
lcm	/usr/include/boost/math/common_factor_rt.hpp	/^    IntegerType  lcm( IntegerType const &a, IntegerType const &b );$/;"	p	namespace:boost::math	signature:( IntegerType const &a, IntegerType const &b )
lcm	/usr/include/boost/math/common_factor_rt.hpp	/^lcm$/;"	f	namespace:boost::math	signature:( IntegerType const & a, IntegerType const & b )
lcm_euclidean	/usr/include/boost/math/common_factor_rt.hpp	/^    lcm_euclidean$/;"	f	namespace:boost::math::detail	signature:( RingType const & a, RingType const & b )
lcm_evaluator	/usr/include/boost/math/common_factor_rt.hpp	/^class lcm_evaluator$/;"	c	namespace:boost::math
lcm_integer	/usr/include/boost/math/common_factor_rt.hpp	/^    lcm_integer$/;"	f	namespace:boost::math::detail	signature:( IntegerType const & a, IntegerType const & b )
lcm_optimal	/usr/include/boost/math/common_factor_rt.hpp	/^    lcm_optimal$/;"	f	namespace:boost::math::detail	signature:( T const & a, T const & b )
lcm_optimal_evaluator	/usr/include/boost/math/common_factor_rt.hpp	/^    struct lcm_optimal_evaluator$/;"	s	namespace:boost::math::detail
lcm_optimal_evaluator_helper2_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct lcm_optimal_evaluator_helper2_t$/;"	s	namespace:boost::math::detail
lcm_optimal_evaluator_helper2_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct lcm_optimal_evaluator_helper2_t< true, true >$/;"	s	namespace:boost::math::detail
lcm_optimal_evaluator_helper_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct lcm_optimal_evaluator_helper_t$/;"	s	namespace:boost::math::detail
lcm_optimal_evaluator_helper_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct lcm_optimal_evaluator_helper_t$/;"	s	namespace:boost::math::detail	inherits:lcm_optimal_evaluator_helper2_t::BOOST_NESTED_TEMPLATEhelper
lcm_optimal_evaluator_helper_t	/usr/include/boost/math/common_factor_rt.hpp	/^    struct lcm_optimal_evaluator_helper_t< T, true, true >$/;"	s	namespace:boost::math::detail
ldexp	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float ldexp(const e_float& v, int e)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, int e)
ldexp	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class ldexp(const mpfr_class& v, int e)$/;"	f	signature:(const mpfr_class& v, int e)
ldexp	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal ldexp(const mpfr::mpreal& v, int e)$/;"	f	namespace:mpfr	signature:(const mpfr::mpreal& v, int e)
ldexp	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR ldexp(RR r, int exp)$/;"	f	namespace:boost::math::ntl	signature:(RR r, int exp)
ldexp	/usr/include/boost/math/bindings/rr.hpp	/^RR ldexp(RR r, int exp);$/;"	p	namespace:boost::math::ntl	signature:(RR r, int exp)
ldexp	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept ldexp(real_concept a, int expon)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, int expon)
ldexp	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept ldexp(boost::math::concepts::std_real_concept a, int expon)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, int expon)
legacy	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^    const int legacy = 0x1; \/\/!< get facet will recognize most string representations of infinity and NaN.$/;"	m	namespace:boost::math
legendre	/usr/include/boost/math/tr1_c_macros.ipp	741;"	d	file:
legendre	/usr/include/boost/math/tr1_c_macros.ipp	743;"	d	file:
legendre_imp	/usr/include/boost/math/special_functions/legendre.hpp	/^T legendre_imp(unsigned l, T x, const Policy& pol, bool second = false)$/;"	f	namespace:boost::math::detail	signature:(unsigned l, T x, const Policy& pol, bool second = false)
legendre_next	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_next(unsigned l, T1 x, T2 Pl, T3 Plm1)$/;"	f	namespace:boost::math	signature:(unsigned l, T1 x, T2 Pl, T3 Plm1)
legendre_next	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_next(unsigned l, unsigned m, T1 x, T2 Pl, T3 Plm1)$/;"	f	namespace:boost::math	signature:(unsigned l, unsigned m, T1 x, T2 Pl, T3 Plm1)
legendre_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_next(unsigned l, T1 x, T2 Pl, T3 Plm1);$/;"	p	namespace:boost::math	signature:(unsigned l, T1 x, T2 Pl, T3 Plm1)
legendre_next	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_next(unsigned l, unsigned m, T1 x, T2 Pl, T3 Plm1);$/;"	p	namespace:boost::math	signature:(unsigned l, unsigned m, T1 x, T2 Pl, T3 Plm1)
legendre_p	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_p(int l, T x)$/;"	f	namespace:boost::math	signature:(int l, T x)
legendre_p	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_p(int l, T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(int l, T x, const Policy& pol)
legendre_p	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_p(int l, int m, T x)$/;"	f	namespace:boost::math	signature:(int l, int m, T x)
legendre_p	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_p(int l, int m, T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(int l, int m, T x, const Policy& pol)
legendre_p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_p(int l, T x);$/;"	p	namespace:boost::math	signature:(int l, T x)
legendre_p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_p(int l, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(int l, T x, const Policy& pol)
legendre_p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_p(int l, int m, T x);$/;"	p	namespace:boost::math	signature:(int l, int m, T x)
legendre_p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_p(int l, int m, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(int l, int m, T x, const Policy& pol)
legendre_p_imp	/usr/include/boost/math/special_functions/legendre.hpp	/^T legendre_p_imp(int l, int m, T x, T sin_theta_power, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int l, int m, T x, T sin_theta_power, const Policy& pol)
legendre_p_imp	/usr/include/boost/math/special_functions/legendre.hpp	/^inline T legendre_p_imp(int l, int m, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(int l, int m, T x, const Policy& pol)
legendre_q	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_q(unsigned l, T x)$/;"	f	namespace:boost::math	signature:(unsigned l, T x)
legendre_q	/usr/include/boost/math/special_functions/legendre.hpp	/^   legendre_q(unsigned l, T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned l, T x, const Policy& pol)
legendre_q	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_q(unsigned l, T x);$/;"	p	namespace:boost::math	signature:(unsigned l, T x)
legendre_q	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         legendre_q(unsigned l, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned l, T x, const Policy& pol)
legendref	/usr/include/boost/math/tr1_c_macros.ipp	745;"	d	file:
legendref	/usr/include/boost/math/tr1_c_macros.ipp	747;"	d	file:
legendrel	/usr/include/boost/math/tr1_c_macros.ipp	749;"	d	file:
legendrel	/usr/include/boost/math/tr1_c_macros.ipp	751;"	d	file:
lgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   lgamma(T x)$/;"	f	namespace:boost::math	signature:(T x)
lgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   lgamma(T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T x, const Policy& pol)
lgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   lgamma(T z, int* sign)$/;"	f	namespace:boost::math	signature:(T z, int* sign)
lgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   lgamma(T z, int* sign, const Policy&)$/;"	f	namespace:boost::math	signature:(T z, int* sign, const Policy&)
lgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type lgamma(RT x);$/;"	p	namespace:boost::math	signature:(RT x)
lgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type lgamma(RT x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT x, const Policy& pol)
lgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type lgamma(RT z, int* sign);$/;"	p	namespace:boost::math	signature:(RT z, int* sign)
lgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type lgamma(RT z, int* sign, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT z, int* sign, const Policy& pol)
lgamma	/usr/include/boost/math/tr1_c_macros.ipp	212;"	d	file:
lgamma	/usr/include/boost/math/tr1_c_macros.ipp	214;"	d	file:
lgamma_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T lgamma_imp(T z, const Policy& pol, const Lanczos& l, int* sign = 0)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const Lanczos& l, int* sign = 0)
lgamma_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T lgamma_imp(T z, const Policy& pol, const lanczos::undefined_lanczos& l, int*sign)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& pol, const lanczos::undefined_lanczos& l, int*sign)
lgamma_initializer	/usr/include/boost/math/special_functions/gamma.hpp	/^struct lgamma_initializer$/;"	s	namespace:boost::math::detail
lgamma_small_imp	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^T lgamma_small_imp(T z, T zm1, T zm2, const mpl::int_<0>&, const Policy& pol, const Lanczos&)$/;"	f	namespace:boost::math::detail	signature:(T z, T zm1, T zm2, const mpl::int_<0>&, const Policy& pol, const Lanczos&)
lgamma_small_imp	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^T lgamma_small_imp(T z, T zm1, T zm2, const mpl::int_<113>&, const Policy& \/* l *\/, const Lanczos&)$/;"	f	namespace:boost::math::detail	signature:(T z, T zm1, T zm2, const mpl::int_<113>&, const Policy& , const Lanczos&)
lgamma_small_imp	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^T lgamma_small_imp(T z, T zm1, T zm2, const mpl::int_<64>&, const Policy& \/* l *\/, const Lanczos&)$/;"	f	namespace:boost::math::detail	signature:(T z, T zm1, T zm2, const mpl::int_<64>&, const Policy& , const Lanczos&)
lgammaf	/usr/include/boost/math/tr1_c_macros.ipp	216;"	d	file:
lgammaf	/usr/include/boost/math/tr1_c_macros.ipp	218;"	d	file:
lgammal	/usr/include/boost/math/tr1_c_macros.ipp	220;"	d	file:
lgammal	/usr/include/boost/math/tr1_c_macros.ipp	222;"	d	file:
llround	/usr/include/boost/math/bindings/e_float.hpp	/^inline boost::long_long_type llround(const e_float& v, const Policy& pol)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const Policy& pol)
llround	/usr/include/boost/math/bindings/mpfr.hpp	/^inline long long llround(mpfr_class const& x, const Policy& pol)$/;"	f	signature:(mpfr_class const& x, const Policy& pol)
llround	/usr/include/boost/math/bindings/mpreal.hpp	/^inline long long llround(mpfr::mpreal const& x, const Policy& pol)$/;"	f	namespace:mpfr	signature:(mpfr::mpreal const& x, const Policy& pol)
llround	/usr/include/boost/math/bindings/rr.hpp	/^   inline long long llround(RR const& x, const Policy& pol)$/;"	f	namespace:boost::math::ntl	signature:(RR const& x, const Policy& pol)
llround	/usr/include/boost/math/concepts/real_concept.hpp	/^inline boost::long_long_type llround(const concepts::real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v)
llround	/usr/include/boost/math/concepts/real_concept.hpp	/^inline boost::long_long_type llround(const concepts::real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v, const Policy& pol)
llround	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::long_long_type llround(const concepts::std_real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v)
llround	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::long_long_type llround(const concepts::std_real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v, const Policy& pol)
llround	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   boost::long_long_type llround(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
llround	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   boost::long_long_type llround(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
llround	/usr/include/boost/math/special_functions/round.hpp	/^inline boost::long_long_type llround(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
llround	/usr/include/boost/math/special_functions/round.hpp	/^inline boost::long_long_type llround(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
llround	/usr/include/boost/math/tr1_c_macros.ipp	240;"	d	file:
llround	/usr/include/boost/math/tr1_c_macros.ipp	242;"	d	file:
llroundf	/usr/include/boost/math/tr1_c_macros.ipp	244;"	d	file:
llroundf	/usr/include/boost/math/tr1_c_macros.ipp	246;"	d	file:
llroundl	/usr/include/boost/math/tr1_c_macros.ipp	248;"	d	file:
llroundl	/usr/include/boost/math/tr1_c_macros.ipp	250;"	d	file:
lltrunc	/usr/include/boost/math/bindings/e_float.hpp	/^inline boost::long_long_type lltrunc(const e_float& v, const Policy& pol)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const Policy& pol)
lltrunc	/usr/include/boost/math/bindings/mpfr.hpp	/^inline long long lltrunc(mpfr_class const& x, const Policy& pol)$/;"	f	signature:(mpfr_class const& x, const Policy& pol)
lltrunc	/usr/include/boost/math/bindings/mpreal.hpp	/^inline long long lltrunc(mpfr::mpreal const& x, const Policy& pol)$/;"	f	namespace:mpfr	signature:(mpfr::mpreal const& x, const Policy& pol)
lltrunc	/usr/include/boost/math/bindings/rr.hpp	/^   inline long long lltrunc(RR const& x, const Policy& pol)$/;"	f	namespace:boost::math::ntl	signature:(RR const& x, const Policy& pol)
lltrunc	/usr/include/boost/math/concepts/real_concept.hpp	/^inline boost::long_long_type lltrunc(const concepts::real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v)
lltrunc	/usr/include/boost/math/concepts/real_concept.hpp	/^inline boost::long_long_type lltrunc(const concepts::real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v, const Policy& pol)
lltrunc	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::long_long_type lltrunc(const concepts::std_real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v)
lltrunc	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::long_long_type lltrunc(const concepts::std_real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v, const Policy& pol)
lltrunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   boost::long_long_type lltrunc(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
lltrunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   boost::long_long_type lltrunc(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
lltrunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline boost::long_long_type lltrunc(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
lltrunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline boost::long_long_type lltrunc(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
location	/usr/include/boost/math/distributions/cauchy.hpp	/^   RealType location()const$/;"	f	class:boost::math::cauchy_distribution	access:public	signature:() const
location	/usr/include/boost/math/distributions/extreme_value.hpp	/^   RealType location()const { return m_a; }$/;"	f	class:boost::math::extreme_value_distribution	access:public	signature:() const
location	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   RealType location()const$/;"	f	class:boost::math::inverse_gaussian_distribution	access:public	signature:() const
location	/usr/include/boost/math/distributions/laplace.hpp	/^   RealType location() const$/;"	f	class:boost::math::laplace_distribution	access:public	signature:() const
location	/usr/include/boost/math/distributions/logistic.hpp	/^      RealType location()const$/;"	f	class:boost::math::logistic_distribution	access:public	signature:() const
location	/usr/include/boost/math/distributions/lognormal.hpp	/^   RealType location()const$/;"	f	class:boost::math::lognormal_distribution	access:public	signature:() const
location	/usr/include/boost/math/distributions/normal.hpp	/^   RealType location()const$/;"	f	class:boost::math::normal_distribution	access:public	signature:() const
location	/usr/include/boost/math/distributions/skew_normal.hpp	/^    RealType location()const$/;"	f	class:boost::math::skew_normal_distribution	access:public	signature:() const
location	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType location(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
location_	/usr/include/boost/math/distributions/skew_normal.hpp	/^    RealType location_;  \/\/ distribution location.$/;"	m	class:boost::math::skew_normal_distribution	access:private
log	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float log(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
log	/usr/include/boost/math/bindings/rr.hpp	/^inline RR log(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
log	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept log(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
log	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept log(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
log10	/usr/include/boost/math/bindings/rr.hpp	/^inline RR log10(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
log10	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept log10(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
log10	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept log10(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline double log1p(double x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(double x, const Policy& pol)
log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline double log1p(double z)$/;"	f	namespace:boost::math	signature:(double z)
log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline float log1p(float x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(float x, const Policy& pol)
log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline float log1p(float z)$/;"	f	namespace:boost::math	signature:(float z)
log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline long double log1p(long double x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(long double x, const Policy& pol)
log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline long double log1p(long double z)$/;"	f	namespace:boost::math	signature:(long double z)
log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline typename tools::promote_args<T>::type log1p(T x)$/;"	f	namespace:boost::math	signature:(T x)
log1p	/usr/include/boost/math/special_functions/log1p.hpp	/^inline typename tools::promote_args<T>::type log1p(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
log1p	/usr/include/boost/math/special_functions/log1p.hpp	346;"	d
log1p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type log1p(T);$/;"	p	namespace:boost::math	signature:(T)
log1p	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type log1p(T, const Policy&);$/;"	p	namespace:boost::math	signature:(T, const Policy&)
log1p	/usr/include/boost/math/tr1_c_macros.ipp	254;"	d	file:
log1p	/usr/include/boost/math/tr1_c_macros.ipp	256;"	d	file:
log1p_imp	/usr/include/boost/math/special_functions/log1p.hpp	/^T log1p_imp(T const & x, const Policy& pol, const mpl::int_<0>&)$/;"	f	namespace:boost::math::detail	signature:(T const & x, const Policy& pol, const mpl::int_<0>&)
log1p_imp	/usr/include/boost/math/special_functions/log1p.hpp	/^T log1p_imp(T const& x, const Policy& pol, const mpl::int_<24>&)$/;"	f	namespace:boost::math::detail	signature:(T const& x, const Policy& pol, const mpl::int_<24>&)
log1p_imp	/usr/include/boost/math/special_functions/log1p.hpp	/^T log1p_imp(T const& x, const Policy& pol, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(T const& x, const Policy& pol, const mpl::int_<53>&)
log1p_imp	/usr/include/boost/math/special_functions/log1p.hpp	/^T log1p_imp(T const& x, const Policy& pol, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(T const& x, const Policy& pol, const mpl::int_<64>&)
log1p_initializer	/usr/include/boost/math/special_functions/log1p.hpp	/^struct log1p_initializer$/;"	s	namespace:boost::math::detail
log1p_series	/usr/include/boost/math/special_functions/log1p.hpp	/^     log1p_series(T x)$/;"	f	struct:boost::math::detail::log1p_series	access:public	signature:(T x)
log1p_series	/usr/include/boost/math/special_functions/log1p.hpp	/^     log1p_series(const log1p_series&);$/;"	p	struct:boost::math::detail::log1p_series	access:private	signature:(const log1p_series&)
log1p_series	/usr/include/boost/math/special_functions/log1p.hpp	/^  struct log1p_series$/;"	s	namespace:boost::math::detail
log1pf	/usr/include/boost/math/tr1_c_macros.ipp	258;"	d	file:
log1pf	/usr/include/boost/math/tr1_c_macros.ipp	260;"	d	file:
log1pl	/usr/include/boost/math/tr1_c_macros.ipp	262;"	d	file:
log1pl	/usr/include/boost/math/tr1_c_macros.ipp	264;"	d	file:
log1pmx	/usr/include/boost/math/special_functions/log1p.hpp	/^   log1pmx(T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T x, const Policy& pol)
log1pmx	/usr/include/boost/math/special_functions/log1p.hpp	/^inline typename tools::promote_args<T>::type log1pmx(T x)$/;"	f	namespace:boost::math	signature:(T x)
log1pmx	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type log1pmx(T);$/;"	p	namespace:boost::math	signature:(T)
log1pmx	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type log1pmx(T, const Policy&);$/;"	p	namespace:boost::math	signature:(T, const Policy&)
logistic	/usr/include/boost/math/distributions/logistic.hpp	/^    typedef logistic_distribution<double> logistic;$/;"	t	namespace:boost::math
logistic_distribution	/usr/include/boost/math/distributions/logistic.hpp	/^      logistic_distribution(RealType location=0, RealType scale=1) \/\/ Constructor.$/;"	f	class:boost::math::logistic_distribution	access:public	signature:(RealType location=0, RealType scale=1)
logistic_distribution	/usr/include/boost/math/distributions/logistic.hpp	/^    class logistic_distribution$/;"	c	namespace:boost::math
lognormal	/usr/include/boost/math/distributions/lognormal.hpp	/^typedef lognormal_distribution<double> lognormal;$/;"	t	namespace:boost::math
lognormal_distribution	/usr/include/boost/math/distributions/lognormal.hpp	/^   lognormal_distribution(RealType location = 0, RealType scale = 1)$/;"	f	class:boost::math::lognormal_distribution	access:public	signature:(RealType location = 0, RealType scale = 1)
lognormal_distribution	/usr/include/boost/math/distributions/lognormal.hpp	/^class lognormal_distribution$/;"	c	namespace:boost::math
lower	/usr/include/boost/math/distributions/triangular.hpp	/^    RealType lower()const$/;"	f	class:boost::math::triangular_distribution	access:public	signature:() const
lower	/usr/include/boost/math/distributions/uniform.hpp	/^    RealType lower()const$/;"	f	class:boost::math::uniform_distribution	access:public	signature:() const
lower_gamma_series	/usr/include/boost/math/special_functions/gamma.hpp	/^inline T lower_gamma_series(T a, T z, const Policy& pol, T init_value = 0)$/;"	f	namespace:boost::math::detail	signature:(T a, T z, const Policy& pol, T init_value = 0)
lower_incomplete_gamma_series	/usr/include/boost/math/special_functions/gamma.hpp	/^   lower_incomplete_gamma_series(T a1, T z1) : a(a1), z(z1), result(1){}$/;"	f	struct:boost::math::detail::lower_incomplete_gamma_series	access:public	signature:(T a1, T z1)
lower_incomplete_gamma_series	/usr/include/boost/math/special_functions/gamma.hpp	/^struct lower_incomplete_gamma_series$/;"	s	namespace:boost::math::detail
lround	/usr/include/boost/math/bindings/e_float.hpp	/^inline long lround(const e_float& v, const Policy& pol)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const Policy& pol)
lround	/usr/include/boost/math/bindings/mpfr.hpp	/^inline long lround(mpfr_class const& x, const Policy& pol)$/;"	f	signature:(mpfr_class const& x, const Policy& pol)
lround	/usr/include/boost/math/bindings/mpreal.hpp	/^inline long lround(mpfr::mpreal const& x, const Policy& pol)$/;"	f	namespace:mpfr	signature:(mpfr::mpreal const& x, const Policy& pol)
lround	/usr/include/boost/math/bindings/rr.hpp	/^   inline long lround(RR const& x, const Policy& pol)$/;"	f	namespace:boost::math::ntl	signature:(RR const& x, const Policy& pol)
lround	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long lround(const concepts::real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v)
lround	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long lround(const concepts::real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v, const Policy& pol)
lround	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline long lround(const concepts::std_real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v)
lround	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline long lround(const concepts::std_real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v, const Policy& pol)
lround	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   long lround(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
lround	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   long lround(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
lround	/usr/include/boost/math/special_functions/round.hpp	/^inline long lround(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
lround	/usr/include/boost/math/special_functions/round.hpp	/^inline long lround(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
lround	/usr/include/boost/math/tr1_c_macros.ipp	308;"	d	file:
lround	/usr/include/boost/math/tr1_c_macros.ipp	310;"	d	file:
lroundf	/usr/include/boost/math/tr1_c_macros.ipp	312;"	d	file:
lroundf	/usr/include/boost/math/tr1_c_macros.ipp	314;"	d	file:
lroundl	/usr/include/boost/math/tr1_c_macros.ipp	316;"	d	file:
lroundl	/usr/include/boost/math/tr1_c_macros.ipp	318;"	d	file:
ltrunc	/usr/include/boost/math/bindings/e_float.hpp	/^inline long ltrunc(const e_float& v, const Policy& pol)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const Policy& pol)
ltrunc	/usr/include/boost/math/bindings/mpfr.hpp	/^inline long ltrunc(mpfr_class const& x, const Policy& pol)$/;"	f	signature:(mpfr_class const& x, const Policy& pol)
ltrunc	/usr/include/boost/math/bindings/mpreal.hpp	/^inline long ltrunc(mpfr::mpreal const& x, const Policy& pol)$/;"	f	namespace:mpfr	signature:(mpfr::mpreal const& x, const Policy& pol)
ltrunc	/usr/include/boost/math/bindings/rr.hpp	/^   inline long ltrunc(RR const& x, const Policy& pol)$/;"	f	namespace:boost::math::ntl	signature:(RR const& x, const Policy& pol)
ltrunc	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long ltrunc(const concepts::real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v)
ltrunc	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long ltrunc(const concepts::real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::real_concept& v, const Policy& pol)
ltrunc	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline long ltrunc(const concepts::std_real_concept& v)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v)
ltrunc	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline long ltrunc(const concepts::std_real_concept& v, const Policy& pol)$/;"	f	namespace:boost::math::concepts	signature:(const concepts::std_real_concept& v, const Policy& pol)
ltrunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   long ltrunc(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
ltrunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   long ltrunc(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
ltrunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline long ltrunc(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
ltrunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline long ltrunc(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
m	/usr/include/boost/math/special_functions/beta.hpp	/^   int m;$/;"	m	struct:boost::math::detail::ibeta_fraction2_t	access:private
m_N	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      unsigned m_N; \/\/ number of "total" items$/;"	m	class:boost::math::hypergeometric_distribution	access:private
m_a	/usr/include/boost/math/distributions/cauchy.hpp	/^   RealType m_a;    \/\/ The location, this is the median of the distribution.$/;"	m	class:boost::math::cauchy_distribution	access:private
m_a	/usr/include/boost/math/distributions/extreme_value.hpp	/^   RealType m_a, m_b;$/;"	m	class:boost::math::extreme_value_distribution	access:private
m_alpha	/usr/include/boost/math/distributions/beta.hpp	/^      RealType m_alpha; \/\/ Two parameters of the beta distribution.$/;"	m	class:boost::math::beta_distribution	access:private
m_b	/usr/include/boost/math/distributions/extreme_value.hpp	/^   RealType m_a, m_b;$/;"	m	class:boost::math::extreme_value_distribution	access:private
m_beta	/usr/include/boost/math/distributions/beta.hpp	/^      RealType m_beta;$/;"	m	class:boost::math::beta_distribution	access:private
m_brake	/usr/include/boost/math/tools/remez.hpp	/^   int m_brake;                     \/\/ amount to break by in percentage points.$/;"	m	class:boost::math::tools::remez_minimax	access:private
m_count	/usr/include/boost/math/tools/stats.hpp	/^   boost::uintmax_t m_count;$/;"	m	class:boost::math::tools::stats	access:private
m_data	/usr/include/boost/math/tools/polynomial.hpp	/^   std::vector<T> m_data;$/;"	m	class:boost::math::tools::polynomial	access:private
m_data	/usr/include/boost/math/tools/test_data.hpp	/^   std::set<row_type> m_data;$/;"	m	class:boost::math::tools::test_data	access:private
m_df	/usr/include/boost/math/distributions/chi_squared.hpp	/^   RealType m_df; \/\/ degrees of freedom is a positive real number.$/;"	m	class:boost::math::chi_squared_distribution	access:private
m_df	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   RealType m_df;  \/\/ degrees of freedom are treated as a real number.$/;"	m	class:boost::math::inverse_chi_squared_distribution	access:private
m_df1	/usr/include/boost/math/distributions/fisher_f.hpp	/^   RealType m_df1;  \/\/ degrees of freedom are a real number.$/;"	m	class:boost::math::fisher_f_distribution	access:private
m_df2	/usr/include/boost/math/distributions/fisher_f.hpp	/^   RealType m_df2;  \/\/ degrees of freedom are a real number.$/;"	m	class:boost::math::fisher_f_distribution	access:private
m_exponents	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   const T* m_exponents;$/;"	m	struct:boost::math::detail::sort_functor	access:private
m_flags	/usr/include/boost/math/tools/config.hpp	/^      fexcept_t m_flags;$/;"	m	struct:boost::math::detail::fpu_guard	access:private
m_hg	/usr/include/boost/math/distributions/cauchy.hpp	/^   RealType m_hg;   \/\/ The scale )or shape), this is the half width at half height.$/;"	m	class:boost::math::cauchy_distribution	access:private
m_l	/usr/include/boost/math/distributions/poisson.hpp	/^      RealType m_l; \/\/ mean number of occurrences.$/;"	m	class:boost::math::poisson_distribution	access:private
m_lambda	/usr/include/boost/math/distributions/exponential.hpp	/^   RealType m_lambda;$/;"	m	class:boost::math::exponential_distribution	access:private
m_location	/usr/include/boost/math/distributions/laplace.hpp	/^   RealType m_location;$/;"	m	class:boost::math::laplace_distribution	access:private
m_location	/usr/include/boost/math/distributions/logistic.hpp	/^      RealType m_location;  \/\/ distribution location aka mu.$/;"	m	class:boost::math::logistic_distribution	access:private
m_location	/usr/include/boost/math/distributions/lognormal.hpp	/^   RealType m_location;  \/\/ distribution location.$/;"	m	class:boost::math::lognormal_distribution	access:private
m_lower	/usr/include/boost/math/distributions/triangular.hpp	/^    RealType m_lower;  \/\/ distribution lower aka a$/;"	m	class:boost::math::triangular_distribution	access:private
m_lower	/usr/include/boost/math/distributions/uniform.hpp	/^    RealType m_lower;  \/\/ distribution lower aka a.$/;"	m	class:boost::math::uniform_distribution	access:private
m_max	/usr/include/boost/math/tools/stats.hpp	/^   T m_min, m_max, m_total, m_squared_total;$/;"	m	class:boost::math::tools::stats	access:private
m_max_change	/usr/include/boost/math/tools/remez.hpp	/^   T m_max_change;                \/\/ Maximum change in location of control points after last iteration.$/;"	m	class:boost::math::tools::remez_minimax	access:private
m_max_change_history	/usr/include/boost/math/tools/remez.hpp	/^   T m_max_change_history[2];     \/\/ Past history of changes to control points.$/;"	m	class:boost::math::tools::remez_minimax	access:private
m_max_error	/usr/include/boost/math/tools/remez.hpp	/^   T m_max_error;                 \/\/ Maximum error found in last approximation.$/;"	m	class:boost::math::tools::remez_minimax	access:private
m_mean	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   RealType m_mean;  \/\/ distribution mean or location, aka mu.$/;"	m	class:boost::math::inverse_gaussian_distribution	access:private
m_mean	/usr/include/boost/math/distributions/normal.hpp	/^   RealType m_mean;  \/\/ distribution mean or location.$/;"	m	class:boost::math::normal_distribution	access:private
m_min	/usr/include/boost/math/tools/stats.hpp	/^   T m_min, m_max, m_total, m_squared_total;$/;"	m	class:boost::math::tools::stats	access:private
m_mode	/usr/include/boost/math/distributions/triangular.hpp	/^    RealType m_mode;  \/\/ distribution mode aka c$/;"	m	class:boost::math::triangular_distribution	access:private
m_mult	/usr/include/boost/math/special_functions/log1p.hpp	/^     const T m_mult;$/;"	m	struct:boost::math::detail::log1p_series	access:private
m_n	/usr/include/boost/math/distributions/binomial.hpp	/^        RealType m_n; \/\/ Not sure if this shouldn't be an int?$/;"	m	class:boost::math::binomial_distribution	access:private
m_n	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      unsigned m_n;  \/\/ number of "defective" items$/;"	m	class:boost::math::hypergeometric_distribution	access:private
m_p	/usr/include/boost/math/distributions/bernoulli.hpp	/^      RealType m_p; \/\/ success_fraction$/;"	m	class:boost::math::bernoulli_distribution	access:private
m_p	/usr/include/boost/math/distributions/binomial.hpp	/^        RealType m_p; \/\/ success_fraction$/;"	m	class:boost::math::binomial_distribution	access:private
m_p	/usr/include/boost/math/distributions/geometric.hpp	/^      RealType m_p; \/\/ success_fraction$/;"	m	class:boost::math::geometric_distribution	access:private
m_p	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      RealType m_p; \/\/ success_fraction$/;"	m	class:boost::math::negative_binomial_distribution	access:private
m_precision	/usr/include/boost/math/tools/remez.hpp	/^   int m_precision;               \/\/ Number of bits precision to which the zeros and maxima are found.$/;"	m	class:boost::math::tools::remez_minimax	access:private
m_prod	/usr/include/boost/math/special_functions/log1p.hpp	/^     T m_prod;$/;"	m	struct:boost::math::detail::log1p_series	access:private
m_r	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      unsigned m_r; \/\/ number of items picked$/;"	m	class:boost::math::hypergeometric_distribution	access:private
m_r	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      RealType m_r; \/\/ successes.$/;"	m	class:boost::math::negative_binomial_distribution	access:private
m_scale	/usr/include/boost/math/distributions/gamma.hpp	/^   RealType m_scale;     \/\/ distribution scale$/;"	m	class:boost::math::gamma_distribution	access:private
m_scale	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   RealType m_scale;  \/\/ distribution scale.$/;"	m	class:boost::math::inverse_chi_squared_distribution	access:private
m_scale	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   RealType m_scale;     \/\/ distribution scale$/;"	m	class:boost::math::inverse_gamma_distribution	access:private
m_scale	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   RealType m_scale;    \/\/ distribution standard deviation or scale, aka lambda.$/;"	m	class:boost::math::inverse_gaussian_distribution	access:private
m_scale	/usr/include/boost/math/distributions/laplace.hpp	/^   RealType m_scale;$/;"	m	class:boost::math::laplace_distribution	access:private
m_scale	/usr/include/boost/math/distributions/logistic.hpp	/^      RealType m_scale;  \/\/ distribution scale aka s.$/;"	m	class:boost::math::logistic_distribution	access:private
m_scale	/usr/include/boost/math/distributions/lognormal.hpp	/^   RealType m_scale;     \/\/ distribution scale.$/;"	m	class:boost::math::lognormal_distribution	access:private
m_scale	/usr/include/boost/math/distributions/pareto.hpp	/^      RealType m_scale;  \/\/ distribution scale (xm) or beta$/;"	m	class:boost::math::pareto_distribution	access:private
m_scale	/usr/include/boost/math/distributions/weibull.hpp	/^   RealType m_scale;     \/\/ distribution scale$/;"	m	class:boost::math::weibull_distribution	access:private
m_sd	/usr/include/boost/math/distributions/normal.hpp	/^   RealType m_sd;    \/\/ distribution standard deviation or scale.$/;"	m	class:boost::math::normal_distribution	access:private
m_shape	/usr/include/boost/math/distributions/gamma.hpp	/^   RealType m_shape;     \/\/ distribution shape$/;"	m	class:boost::math::gamma_distribution	access:private
m_shape	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   RealType m_shape;     \/\/ distribution shape$/;"	m	class:boost::math::inverse_gamma_distribution	access:private
m_shape	/usr/include/boost/math/distributions/pareto.hpp	/^      RealType m_shape;  \/\/ distribution shape (k) or alpha$/;"	m	class:boost::math::pareto_distribution	access:private
m_shape	/usr/include/boost/math/distributions/weibull.hpp	/^   RealType m_shape;     \/\/ distribution shape$/;"	m	class:boost::math::weibull_distribution	access:private
m_sigma	/usr/include/boost/math/distributions/rayleigh.hpp	/^   RealType m_sigma;$/;"	m	class:boost::math::rayleigh_distribution	access:private
m_skew	/usr/include/boost/math/tools/remez.hpp	/^   int m_skew;                      \/\/ amount to skew starting points by in percentage points: -100-100$/;"	m	class:boost::math::tools::remez_minimax	access:private
m_squared_total	/usr/include/boost/math/tools/stats.hpp	/^   T m_min, m_max, m_total, m_squared_total;$/;"	m	class:boost::math::tools::stats	access:private
m_term	/usr/include/boost/math/special_functions/expm1.hpp	/^     T m_term;$/;"	m	struct:boost::math::detail::expm1_series	access:private
m_total	/usr/include/boost/math/tools/stats.hpp	/^   T m_min, m_max, m_total, m_squared_total;$/;"	m	class:boost::math::tools::stats	access:private
m_upper	/usr/include/boost/math/distributions/triangular.hpp	/^    RealType m_upper;  \/\/ distribution upper aka b$/;"	m	class:boost::math::triangular_distribution	access:private
m_upper	/usr/include/boost/math/distributions/uniform.hpp	/^    RealType m_upper;  \/\/ distribution upper aka b.$/;"	m	class:boost::math::uniform_distribution	access:private
m_value	/usr/include/boost/math/bindings/e_float.hpp	/^   ::e_float m_value;$/;"	m	class:boost::math::ef::e_float	access:private
m_value	/usr/include/boost/math/bindings/rr.hpp	/^   ::NTL::RR m_value;$/;"	m	class:boost::math::ntl::RR	access:private
m_value	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept_base_type m_value;$/;"	m	class:boost::math::concepts::real_concept	access:private
m_value	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept_base_type m_value;$/;"	m	class:boost::math::concepts::std_real_concept	access:private
m_x	/usr/include/boost/math/special_functions/expm1.hpp	/^     const T m_x;$/;"	m	struct:boost::math::detail::expm1_series	access:private
make_big_value	/usr/include/boost/math/concepts/real_concept.hpp	/^inline concepts::real_concept make_big_value<concepts::real_concept>(long double val, const char* , mpl::false_ const&, mpl::false_ const&)$/;"	f	namespace:boost::math::tools	signature:(long double val, const char* , mpl::false_ const&, mpl::false_ const&)
make_big_value	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline concepts::std_real_concept make_big_value<concepts::std_real_concept>(long double val, const char* , mpl::false_ const&, mpl::false_ const&)$/;"	f	namespace:boost::math::tools	signature:(long double val, const char* , mpl::false_ const&, mpl::false_ const&)
make_big_value	/usr/include/boost/math/tools/big_constant.hpp	/^inline BOOST_CONSTEXPR const char* make_big_value(long double, const char* s, mpl::false_ const&, mpl::true_ const&)$/;"	f	namespace:boost::math::tools	signature:(long double, const char* s, mpl::false_ const&, mpl::true_ const&)
make_big_value	/usr/include/boost/math/tools/big_constant.hpp	/^inline BOOST_CONSTEXPR_OR_CONST T make_big_value(long double v, const char*, mpl::true_ const&, mpl::false_ const&)$/;"	f	namespace:boost::math::tools	signature:(long double v, const char*, mpl::true_ const&, mpl::false_ const&)
make_big_value	/usr/include/boost/math/tools/big_constant.hpp	/^inline BOOST_CONSTEXPR_OR_CONST T make_big_value(long double v, const char*, mpl::true_ const&, mpl::true_ const&)$/;"	f	namespace:boost::math::tools	signature:(long double v, const char*, mpl::true_ const&, mpl::true_ const&)
make_big_value	/usr/include/boost/math/tools/big_constant.hpp	/^inline T make_big_value(long double, const char* s, mpl::false_ const&, mpl::false_ const&)$/;"	f	namespace:boost::math::tools	signature:(long double, const char* s, mpl::false_ const&, mpl::false_ const&)
make_periodic_param	/usr/include/boost/math/tools/test_data.hpp	/^inline parameter_info<T> make_periodic_param(T start_range, T end_range, int n_points)$/;"	f	namespace:boost::math::tools	signature:(T start_range, T end_range, int n_points)
make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline policy<> make_policy()$/;"	f	namespace:boost::math::policies	signature:()
make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&, const A9&, const A10&, const A11&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&, const A9&, const A10&, const A11&)
make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&, const A9&, const A10&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&, const A9&, const A10&)
make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5, A6, A7, A8, A9>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&, const A9&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&, const A9&)
make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5, A6, A7, A8>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&, const A8&)
make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5, A6, A7>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&, const A7&)
make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5, A6>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&, const A6&)
make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4, A5>::type make_policy(const A1&, const A2&, const A3&, const A4&, const A5&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&, const A5&)
make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3, A4>::type make_policy(const A1&, const A2&, const A3&, const A4&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&, const A4&)
make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2, A3>::type make_policy(const A1&, const A2&, const A3&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&, const A3&)
make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1, A2>::type make_policy(const A1&, const A2&)$/;"	f	namespace:boost::math::policies	signature:(const A1&, const A2&)
make_policy	/usr/include/boost/math/policies/policy.hpp	/^inline typename normalise<policy<>, A1>::type make_policy(const A1&)$/;"	f	namespace:boost::math::policies	signature:(const A1&)
make_power_param	/usr/include/boost/math/tools/test_data.hpp	/^inline parameter_info<T> make_power_param(T basis, int start_exponent, int end_exponent)$/;"	f	namespace:boost::math::tools	signature:(T basis, int start_exponent, int end_exponent)
make_random_param	/usr/include/boost/math/tools/test_data.hpp	/^inline parameter_info<T> make_random_param(T start_range, T end_range, int n_points)$/;"	f	namespace:boost::math::tools	signature:(T start_range, T end_range, int n_points)
mantissa	/usr/include/boost/math/bindings/rr.hpp	/^   const ::NTL::ZZ& mantissa() const$/;"	f	class:boost::math::ntl::RR	access:public	signature:() const
match_string	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      bool match_string$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct, const char* s ) const
math	/usr/include/boost/math/bindings/detail/big_digamma.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/bindings/detail/big_lanczos.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n	namespace:boost
math	/usr/include/boost/math/bindings/e_float.hpp	/^namespace boost{ namespace math{ namespace ef{$/;"	n	namespace:boost
math	/usr/include/boost/math/bindings/e_float.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/bindings/mpreal.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/bindings/rr.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/common_factor_ct.hpp	/^namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/common_factor_rt.hpp	/^namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/complex/acos.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/complex/acosh.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/complex/asin.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/complex/asinh.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/complex/atan.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/complex/atanh.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/complex/details.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/complex/fabs.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/concepts/distributions.hpp	/^namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/concepts/real_concept.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/concepts/real_type_concept.hpp	/^namespace boost{ namespace math{ namespace concepts{$/;"	n	namespace:boost
math	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace boost{ namespace math{ namespace concepts{$/;"	n	namespace:boost
math	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/constants/calculate_constants.hpp	/^namespace boost{ namespace math{ namespace constants{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/constants/constants.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/constants/generate.hpp	/^namespace boost{ namespace math{ namespace constants{ $/;"	n	namespace:boost
math	/usr/include/boost/math/constants/info.hpp	/^namespace boost{ namespace math{ namespace constants{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/bernoulli.hpp	/^  namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/beta.hpp	/^  namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/binomial.hpp	/^  namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/cauchy.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/chi_squared.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/complement.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/detail/common_error_handling.hpp	/^namespace boost{ namespace math{ namespace detail$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/detail/hypergeometric_cdf.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/exponential.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/extreme_value.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/find_location.hpp	/^  namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/find_scale.hpp	/^  namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/fisher_f.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/fwd.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/gamma.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/geometric.hpp	/^  namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/hypergeometric.hpp	/^namespace boost { namespace math {$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/laplace.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/logistic.hpp	/^namespace boost { namespace math { $/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/lognormal.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/negative_binomial.hpp	/^  namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/non_central_beta.hpp	/^   namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^   namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/non_central_f.hpp	/^   namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/non_central_t.hpp	/^   namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/normal.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/pareto.hpp	/^  namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/poisson.hpp	/^  namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/rayleigh.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/skew_normal.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/students_t.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/triangular.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/uniform.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/distributions/weibull.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/octonion.hpp	/^    namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/policies/error_handling.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/policies/policy.hpp	/^namespace boost{ namespace math{ $/;"	n	namespace:boost
math	/usr/include/boost/math/quaternion.hpp	/^    namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/acosh.hpp	/^    namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/airy.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/asinh.hpp	/^    namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/atanh.hpp	/^    namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/bessel.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/beta.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/binomial.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/cbrt.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/cos_pi.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_i0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_i1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^namespace boost { namespace math {$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_j0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_j1.hpp	/^namespace boost { namespace math{  namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_jn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^namespace boost { namespace math {$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_k0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_k1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_kn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_y0.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_y1.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/bessel_yn.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^namespace boost{ namespace math{ $/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^namespace math {$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/iconv.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/igamma_large.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/lanczos_sse2.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/lgamma_small.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/t_distribution_inv.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^namespace boost { namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/digamma.hpp	/^namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/ellint_1.hpp	/^namespace boost { namespace math {$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/ellint_2.hpp	/^namespace boost { namespace math { $/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/ellint_3.hpp	/^namespace boost { namespace math { $/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/ellint_rc.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/ellint_rd.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/ellint_rf.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/ellint_rj.hpp	/^namespace boost { namespace math { namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/erf.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/expint.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/expm1.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/factorials.hpp	/^namespace boost { namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/fpclassify.hpp	/^namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/gamma.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/hankel.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/hermite.hpp	/^namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/hypot.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/jacobi_elliptic.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/laguerre.hpp	/^namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/lanczos.hpp	/^namespace boost{ namespace math{ namespace lanczos{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/legendre.hpp	/^namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/log1p.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/modf.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/next.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^  namespace math {$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/owens_t.hpp	/^   namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/pow.hpp	/^namespace math {$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/powm1.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/prime.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/round.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/sign.hpp	/^namespace boost{ namespace math{ $/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/sin_pi.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/sinc.hpp	/^    namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/sinhc.hpp	/^    namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/sqrt1pm1.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/trunc.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/special_functions/zeta.hpp	/^namespace boost{ namespace math{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/big_constant.hpp	/^namespace boost{ namespace math{ $/;"	n	namespace:boost
math	/usr/include/boost/math/tools/config.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/fraction.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/minima.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/polynomial.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/precision.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/promotion.hpp	/^  namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/rational.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/real_cast.hpp	/^namespace boost{ namespace math$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/remez.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/roots.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/series.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/solve.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/stats.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/test.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/test_data.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/toms748_solve.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/traits.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/tuple.hpp	/^namespace boost{ namespace math{$/;"	n	namespace:boost
math	/usr/include/boost/math/tools/workaround.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost
math	/usr/include/boost/math/tr1.hpp	/^namespace boost{ namespace math{ namespace tr1{ extern "C"{$/;"	n	namespace:boost
math	/usr/include/boost/math/tr1.hpp	/^namespace boost{ namespace math{ namespace tr1{$/;"	n	namespace:boost
math_detail	/usr/include/boost/math/special_functions/fpclassify.hpp	/^namespace math_detail{$/;"	n	namespace:boost
matrix_type	/usr/include/boost/math/tools/remez.hpp	/^   typedef boost::numeric::ublas::matrix<T> matrix_type;$/;"	t	class:boost::math::tools::remez_minimax	access:public
max	/usr/include/boost/math/bindings/e_float.hpp	/^      static const ::boost::math::ef::e_float (max) (void)$/;"	f	class:std::numeric_limits::boost::math::ef	access:public	signature:(void)
max	/usr/include/boost/math/tools/remez.hpp	/^   T min, max;                    \/\/ End points of the range to optimise over.$/;"	m	class:boost::math::tools::remez_minimax	access:private
max_change	/usr/include/boost/math/tools/remez.hpp	/^   T max_change()const$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:() const
max_error	/usr/include/boost/math/tools/remez.hpp	/^   T max_error()const$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:() const
max_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^struct max_factorial$/;"	s	namespace:boost::math
max_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^struct max_factorial<double>$/;"	s	namespace:boost::math
max_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^struct max_factorial<float>$/;"	s	namespace:boost::math
max_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^struct max_factorial<long double>$/;"	s	namespace:boost::math
max_prime	/usr/include/boost/math/special_functions/prime.hpp	/^   static const unsigned max_prime = 10000;$/;"	m	namespace:boost::math
max_root_iterations_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef max_root_iterations<> max_root_iterations_type;$/;"	t	struct:boost::math::policies::policy	access:public
max_root_iterations_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_max_root_iterations<mpl::_1>, max_root_iterations<> >::type max_root_iterations_type;$/;"	t	struct:boost::math::policies::policy	access:public
max_root_iterations_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_max_root_iterations<mpl::_1>, typename Policy::max_root_iterations_type>::type max_root_iterations_type;$/;"	t	struct:boost::math::policies::normalise	access:private
max_series_iterations_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef max_series_iterations<> max_series_iterations_type;$/;"	t	struct:boost::math::policies::policy	access:public
max_series_iterations_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_max_series_iterations<mpl::_1>, max_series_iterations<> >::type max_series_iterations_type;$/;"	t	struct:boost::math::policies::policy	access:public
max_series_iterations_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_max_series_iterations<mpl::_1>, typename Policy::max_series_iterations_type>::type max_series_iterations_type;$/;"	t	struct:boost::math::policies::normalise	access:private
max_size	/usr/include/boost/math/tools/test_data.hpp	/^   size_type max_size()const{ return m_data.max_size(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:() const
maxima	/usr/include/boost/math/tools/remez.hpp	/^   vector_type maxima;            \/\/ Location of maxima of the error function, actually contains the control points used for the last iteration.$/;"	m	class:boost::math::tools::remez_minimax	access:private
mean	/usr/include/boost/math/concepts/distributions.hpp	/^RealType mean(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
mean	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType mean(const bernoulli_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType mean(const beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType mean(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType mean(const cauchy_distribution<RealType, Policy>&)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>&)
mean	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType mean(const chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType mean(const exponential_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType mean(const extreme_value_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType mean(const fisher_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType mean(const gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType mean(const geometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType mean(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType mean(const inverse_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType mean(const inverse_gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   RealType mean()const$/;"	f	class:boost::math::inverse_gaussian_distribution	access:public	signature:() const
mean	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType mean(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType mean(const laplace_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType mean(const logistic_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType mean(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType mean(const negative_binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType mean(const non_central_beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType mean(const non_central_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType mean(const non_central_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T mean(T v, T delta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, const Policy& pol)
mean	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType mean(const non_central_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/normal.hpp	/^   RealType mean()const$/;"	f	class:boost::math::normal_distribution	access:public	signature:() const
mean	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType mean(const normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType mean(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/poisson.hpp	/^      RealType mean() const$/;"	f	class:boost::math::poisson_distribution	access:public	signature:() const
mean	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType mean(const poisson_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType mean(const rayleigh_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType mean(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType mean(const students_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType mean(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType mean(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType mean(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
mean	/usr/include/boost/math/tools/stats.hpp	/^   T mean()const{ return m_total \/ static_cast<T>(m_count); }$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
mean	/usr/include/boost/math/tools/test.hpp	/^   T mean()const{ return stat.mean(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
median	/usr/include/boost/math/concepts/distributions.hpp	/^RealType median(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
median	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType median(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
median	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType median(const cauchy_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& dist)
median	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Dist::value_type median(const Dist& d)$/;"	f	namespace:boost::math	signature:(const Dist& d)
median	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType median(const exponential_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& dist)
median	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType median(const extreme_value_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist)
median	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType median(const laplace_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist)
median	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType median(const logistic_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist)
median	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType median(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
median	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType median(const normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist)
median	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType median(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
median	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType median(const rayleigh_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist)
median	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType median(const students_t_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& )
median	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType median(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
median	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType median(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
median	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType median(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
method	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef ieee_copy_all_bits_tag method;$/;"	t	struct:boost::math::detail::fp_traits_non_native	access:public
method	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef ieee_copy_leading_bits_tag method;$/;"	t	struct:boost::math::detail::fp_traits_non_native	access:public
method	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef native_tag method;$/;"	t	struct:boost::math::detail::fp_traits_native	access:public
method	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^   typedef generic_tag<std::numeric_limits<T>::is_specialized> method;$/;"	t	struct:boost::math::detail::fp_traits_non_native	access:public
min	/usr/include/boost/math/bindings/e_float.hpp	/^      static const ::boost::math::ef::e_float (min) (void)$/;"	f	class:std::numeric_limits::boost::math::ef	access:public	signature:(void)
min	/usr/include/boost/math/tools/remez.hpp	/^   T min, max;                    \/\/ End points of the range to optimise over.$/;"	m	class:boost::math::tools::remez_minimax	access:private
min_shift_initializer	/usr/include/boost/math/special_functions/next.hpp	/^struct min_shift_initializer$/;"	s	namespace:boost::math::detail
mode	/usr/include/boost/math/concepts/distributions.hpp	/^RealType mode(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
mode	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType mode(const bernoulli_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType mode(const beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType mode(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType mode(const cauchy_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType mode(const chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType mode(const exponential_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& )
mode	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType mode(const extreme_value_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType mode(const fisher_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType mode(const gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType mode(const geometric_distribution<RealType, Policy>&)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>&)
mode	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType mode(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType mode(const inverse_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType mode(const inverse_gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType mode(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType mode(const laplace_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType mode(const logistic_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType mode(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType mode(const negative_binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType mode(const non_central_beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType mode(const non_central_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType mode(const non_central_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType mode(const non_central_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType mode(const normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType mode(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType mode(const poisson_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType mode(const rayleigh_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType mode(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType mode(const students_t_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& )
mode	/usr/include/boost/math/distributions/triangular.hpp	/^    RealType mode()const$/;"	f	class:boost::math::triangular_distribution	access:public	signature:() const
mode	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType mode(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType mode(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
mode	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType mode(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
mode_fallback	/usr/include/boost/math/distributions/skew_normal.hpp	/^    inline RealType mode_fallback(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math::detail	signature:(const skew_normal_distribution<RealType, Policy>& dist)
modf	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class modf(const mpfr_class& v, long long* ipart, const Policy& pol)$/;"	f	signature:(const mpfr_class& v, long long* ipart, const Policy& pol)
modf	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal modf(const mpfr::mpreal& v, long long* ipart, const Policy& pol)$/;"	f	namespace:mpfr	signature:(const mpfr::mpreal& v, long long* ipart, const Policy& pol)
modf	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept modf(real_concept a, real_concept* ipart)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, real_concept* ipart)
modf	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept modf(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept* ipart)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept* ipart)
modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, T* ipart);$/;"	p	namespace:boost::math	signature:(const T& v, T* ipart)
modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, T* ipart, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, T* ipart, const Policy& pol)
modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, boost::long_long_type* ipart);$/;"	p	namespace:boost::math	signature:(const T& v, boost::long_long_type* ipart)
modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, boost::long_long_type* ipart, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, boost::long_long_type* ipart, const Policy& pol)
modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, int* ipart);$/;"	p	namespace:boost::math	signature:(const T& v, int* ipart)
modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, int* ipart, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, int* ipart, const Policy& pol)
modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, long* ipart);$/;"	p	namespace:boost::math	signature:(const T& v, long* ipart)
modf	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T modf(const T& v, long* ipart, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, long* ipart, const Policy& pol)
modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, T* ipart)$/;"	f	namespace:boost::math	signature:(const T& v, T* ipart)
modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, T* ipart, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, T* ipart, const Policy& pol)
modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, boost::long_long_type* ipart)$/;"	f	namespace:boost::math	signature:(const T& v, boost::long_long_type* ipart)
modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, boost::long_long_type* ipart, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, boost::long_long_type* ipart, const Policy& pol)
modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, int* ipart)$/;"	f	namespace:boost::math	signature:(const T& v, int* ipart)
modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, int* ipart, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, int* ipart, const Policy& pol)
modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, long* ipart)$/;"	f	namespace:boost::math	signature:(const T& v, long* ipart)
modf	/usr/include/boost/math/special_functions/modf.hpp	/^inline T modf(const T& v, long* ipart, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, long* ipart, const Policy& pol)
mpfr	/usr/include/boost/math/bindings/mpreal.hpp	/^namespace mpfr{$/;"	n
mpfr::fmod	/usr/include/boost/math/bindings/mpreal.hpp	/^mpfr::mpreal fmod(const mpfr::mpreal& v1, const mpfr::mpreal& v2)$/;"	f	namespace:mpfr	signature:(const mpfr::mpreal& v1, const mpfr::mpreal& v2)
mpfr::frexp	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal frexp(const mpfr::mpreal& v, int* expon)$/;"	f	namespace:mpfr	signature:(const mpfr::mpreal& v, int* expon)
mpfr::iround	/usr/include/boost/math/bindings/mpreal.hpp	/^inline int iround(mpfr::mpreal const& x, const Policy& pol)$/;"	f	namespace:mpfr	signature:(mpfr::mpreal const& x, const Policy& pol)
mpfr::itrunc	/usr/include/boost/math/bindings/mpreal.hpp	/^inline int itrunc(mpfr::mpreal const& x, const Policy& pol)$/;"	f	namespace:mpfr	signature:(mpfr::mpreal const& x, const Policy& pol)
mpfr::ldexp	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal ldexp(const mpfr::mpreal& v, int e)$/;"	f	namespace:mpfr	signature:(const mpfr::mpreal& v, int e)
mpfr::llround	/usr/include/boost/math/bindings/mpreal.hpp	/^inline long long llround(mpfr::mpreal const& x, const Policy& pol)$/;"	f	namespace:mpfr	signature:(mpfr::mpreal const& x, const Policy& pol)
mpfr::lltrunc	/usr/include/boost/math/bindings/mpreal.hpp	/^inline long long lltrunc(mpfr::mpreal const& x, const Policy& pol)$/;"	f	namespace:mpfr	signature:(mpfr::mpreal const& x, const Policy& pol)
mpfr::lround	/usr/include/boost/math/bindings/mpreal.hpp	/^inline long lround(mpfr::mpreal const& x, const Policy& pol)$/;"	f	namespace:mpfr	signature:(mpfr::mpreal const& x, const Policy& pol)
mpfr::ltrunc	/usr/include/boost/math/bindings/mpreal.hpp	/^inline long ltrunc(mpfr::mpreal const& x, const Policy& pol)$/;"	f	namespace:mpfr	signature:(mpfr::mpreal const& x, const Policy& pol)
mpfr::modf	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal modf(const mpfr::mpreal& v, long long* ipart, const Policy& pol)$/;"	f	namespace:mpfr	signature:(const mpfr::mpreal& v, long long* ipart, const Policy& pol)
mpfr::operator !=	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator != (const T& t, const mpreal& r){ return mpreal(t) != r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
mpfr::operator !=	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator != (const mpreal& r, const T& t){ return r != mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
mpfr::operator *	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator * (const T& t, const mpreal& r){ return mpreal(t) * r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
mpfr::operator *	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator * (const mpreal& r, const T& t){ return r * mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
mpfr::operator +	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator + (const T& t, const mpreal& r){ return mpreal(t) + r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
mpfr::operator +	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator + (const mpreal& r, const T& t){ return r + mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
mpfr::operator -	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator - (const T& t, const mpreal& r){ return mpreal(t) - r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
mpfr::operator -	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator - (const mpreal& r, const T& t){ return r - mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
mpfr::operator /	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator \/ (const T& t, const mpreal& r){ return mpreal(t) \/ r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
mpfr::operator /	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator \/ (const mpreal& r, const T& t){ return r \/ mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
mpfr::operator <	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator < (const T& t, const mpreal& r){ return mpreal(t) < r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
mpfr::operator <	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator < (const mpreal& r, const T& t){ return r < mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
mpfr::operator <=	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator <= (const T& t, const mpreal& r){ return mpreal(t) <= r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
mpfr::operator <=	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator <= (const mpreal& r, const T& t){ return r <= mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
mpfr::operator ==	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator == (const T& t, const mpreal& r){ return mpreal(t) == r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
mpfr::operator ==	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator == (const mpreal& r, const T& t){ return r == mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
mpfr::operator >	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator > (const T& t, const mpreal& r){ return mpreal(t) > r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
mpfr::operator >	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator > (const mpreal& r, const T& t){ return r > mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
mpfr::operator >=	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator >= (const T& t, const mpreal& r){ return mpreal(t) >= r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
mpfr::operator >=	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator >= (const mpreal& r, const T& t){ return r >= mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
mpfr_lanczos	/usr/include/boost/math/bindings/mpfr.hpp	/^struct mpfr_lanczos$/;"	s	namespace:boost::math::lanczos
mpreal_lanczos	/usr/include/boost/math/bindings/mpreal.hpp	/^struct mpreal_lanczos$/;"	s	namespace:boost::math::lanczos
mult	/usr/include/boost/math/special_functions/bessel.hpp	/^   T mult;$/;"	m	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:private
mult	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   T mult;$/;"	m	struct:boost::math::detail::cyl_bessel_i_small_z	access:private
mult	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T mult;$/;"	m	struct:boost::math::detail::bessel_j_small_z_series_term	access:private
mult	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T mult;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:private
mult	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T mult;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:private
mult_i	/usr/include/boost/math/complex/details.hpp	/^inline std::complex<T> mult_i(const std::complex<T>& t)$/;"	f	namespace:boost::math::detail	signature:(const std::complex<T>& t)
mult_minus_i	/usr/include/boost/math/complex/details.hpp	/^inline std::complex<T> mult_minus_i(const std::complex<T>& t)$/;"	f	namespace:boost::math::detail	signature:(const std::complex<T>& t)
mult_minus_one	/usr/include/boost/math/complex/details.hpp	/^inline T mult_minus_one(const T& t)$/;"	f	namespace:boost::math::detail	signature:(const T& t)
multipolar	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        multipolar(T const & rho1,$/;"	f	namespace:boost::math	signature:(T const & rho1, T const & theta1, T const & rho2, T const & theta2, T const & rho3, T const & theta3, T const & rho4, T const & theta4)
multipolar	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    multipolar( T const & rho1,$/;"	f	namespace:boost::math	signature:( T const & rho1, T const & theta1, T const & rho2, T const & theta2)
n	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   const unsigned n;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_data	access:public
n	/usr/include/boost/math/special_functions/beta.hpp	/^   int n;$/;"	m	struct:boost::math::detail::ibeta_series_t	access:private
n	/usr/include/boost/math/special_functions/expint.hpp	/^   unsigned n;$/;"	m	struct:boost::math::detail::expint_fraction	access:private
n	/usr/include/boost/math/special_functions/gamma.hpp	/^   int n;$/;"	m	struct:boost::math::detail::small_gamma2_series	access:private
n1	/usr/include/boost/math/tools/test_data.hpp	/^   int n1, n2;$/;"	m	struct:boost::math::tools::parameter_info	access:public
n2	/usr/include/boost/math/tools/test_data.hpp	/^   int n1, n2;$/;"	m	struct:boost::math::tools::parameter_info	access:public
native_tag	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct native_tag {};$/;"	s	namespace:boost::math::detail
nc_beta_pdf	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType nc_beta_pdf(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math::detail	signature:(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& x)
nc_beta_quantile	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType nc_beta_quantile(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& p, bool comp)$/;"	f	namespace:boost::math::detail	signature:(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& p, bool comp)
nc_beta_quantile_functor	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            nc_beta_quantile_functor(const non_central_beta_distribution<T,Policy>& d, T t, bool c)$/;"	f	struct:boost::math::detail::nc_beta_quantile_functor	access:public	signature:(const non_central_beta_distribution<T,Policy>& d, T t, bool c)
nc_beta_quantile_functor	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         struct nc_beta_quantile_functor$/;"	s	namespace:boost::math::detail
nccs_pdf	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         RealType nccs_pdf(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math::detail	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)
nccs_quantile	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         RealType nccs_quantile(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& p, bool comp)$/;"	f	namespace:boost::math::detail	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& p, bool comp)
nccs_quantile_functor	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            nccs_quantile_functor(const non_central_chi_squared_distribution<T,Policy>& d, T t, bool c)$/;"	f	struct:boost::math::detail::nccs_quantile_functor	access:public	signature:(const non_central_chi_squared_distribution<T,Policy>& d, T t, bool c)
nccs_quantile_functor	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         struct nccs_quantile_functor$/;"	s	namespace:boost::math::detail
ncp	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType ncp; \/\/ non-centrality parameter$/;"	m	class:boost::math::non_central_beta_distribution	access:private
ncp	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         RealType ncp; \/\/ non-centrality parameter$/;"	m	class:boost::math::non_central_chi_squared_distribution	access:private
ncp	/usr/include/boost/math/distributions/non_central_f.hpp	/^         RealType ncp; \/\/ non-centrality parameter$/;"	m	class:boost::math::non_central_f_distribution	access:private
ncp	/usr/include/boost/math/distributions/non_central_t.hpp	/^         RealType ncp; \/\/ non-centrality parameter$/;"	m	class:boost::math::non_central_t_distribution	access:private
need_i	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   need_i = 1,$/;"	e	enum:boost::math::detail::__anon1
need_j	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^static const int need_j = 1;$/;"	m	namespace:boost::math::detail
need_k	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   need_k = 2$/;"	e	enum:boost::math::detail::__anon1
need_y	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^static const int need_y = 2;$/;"	m	namespace:boost::math::detail
negative_binomial	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    typedef negative_binomial_distribution<double> negative_binomial; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
negative_binomial_detail	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    namespace negative_binomial_detail$/;"	n	namespace:boost::math
negative_binomial_distribution	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      negative_binomial_distribution(RealType r, RealType p) : m_r(r), m_p(p)$/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:(RealType r, RealType p)
negative_binomial_distribution	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    class negative_binomial_distribution$/;"	c	namespace:boost::math
new_seq	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::push_back<Seq, T>::type new_seq;$/;"	t	struct:boost::math::policies::detail::append_N	access:public
newton_raphson_iterate	/usr/include/boost/math/tools/roots.hpp	/^T newton_raphson_iterate(F f, T guess, T min, T max, int digits, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, T guess, T min, T max, int digits, boost::uintmax_t& max_iter)
newton_raphson_iterate	/usr/include/boost/math/tools/roots.hpp	/^inline T newton_raphson_iterate(F f, T guess, T min, T max, int digits)$/;"	f	namespace:boost::math::tools	signature:(F f, T guess, T min, T max, int digits)
next	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   const hypergeometric_pdf_prime_loop_result_entry* next;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_result_entry	access:public
next_step_type	/usr/include/boost/math/common_factor_ct.hpp	/^         BOOST_DETAIL_GCD_HELPER_VAL(new_value2) >  next_step_type;$/;"	t	struct:boost::math::detail::static_gcd_helper_t	access:private
nextafter	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T nextafter(const T&, const T&);$/;"	p	namespace:boost::math	signature:(const T&, const T&)
nextafter	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   T nextafter(const T&, const T&, const Policy&);$/;"	p	namespace:boost::math	signature:(const T&, const T&, const Policy&)
nextafter	/usr/include/boost/math/special_functions/next.hpp	/^inline T nextafter(const T& val, const T& direction)$/;"	f	namespace:boost::math	signature:(const T& val, const T& direction)
nextafter	/usr/include/boost/math/special_functions/next.hpp	/^inline T nextafter(const T& val, const T& direction, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& val, const T& direction, const Policy& pol)
nextafter	/usr/include/boost/math/tr1_c_macros.ipp	349;"	d	file:
nextafter	/usr/include/boost/math/tr1_c_macros.ipp	351;"	d	file:
nextafterf	/usr/include/boost/math/tr1_c_macros.ipp	353;"	d	file:
nextafterf	/usr/include/boost/math/tr1_c_macros.ipp	355;"	d	file:
nextafterl	/usr/include/boost/math/tr1_c_macros.ipp	357;"	d	file:
nextafterl	/usr/include/boost/math/tr1_c_macros.ipp	359;"	d	file:
nexttoward	/usr/include/boost/math/tr1_c_macros.ipp	362;"	d	file:
nexttoward	/usr/include/boost/math/tr1_c_macros.ipp	364;"	d	file:
nexttowardf	/usr/include/boost/math/tr1_c_macros.ipp	366;"	d	file:
nexttowardf	/usr/include/boost/math/tr1_c_macros.ipp	368;"	d	file:
nexttowardl	/usr/include/boost/math/tr1_c_macros.ipp	370;"	d	file:
nexttowardl	/usr/include/boost/math/tr1_c_macros.ipp	372;"	d	file:
non_central_beta	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      typedef non_central_beta_distribution<double> non_central_beta; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
non_central_beta_cdf	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         inline RealType non_central_beta_cdf(RealType x, RealType y, RealType a, RealType b, RealType l, bool invert, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(RealType x, RealType y, RealType a, RealType b, RealType l, bool invert, const Policy&)
non_central_beta_distribution	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         non_central_beta_distribution(RealType a_, RealType b_, RealType lambda) : a(a_), b(b_), ncp(lambda)$/;"	f	class:boost::math::non_central_beta_distribution	access:public	signature:(RealType a_, RealType b_, RealType lambda)
non_central_beta_distribution	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      class non_central_beta_distribution$/;"	c	namespace:boost::math
non_central_beta_p	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         T non_central_beta_p(T a, T b, T lam, T x, T y, const Policy& pol, T init_val = 0)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T lam, T x, T y, const Policy& pol, T init_val = 0)
non_central_beta_pdf	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         T non_central_beta_pdf(T a, T b, T lam, T x, T y, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T lam, T x, T y, const Policy& pol)
non_central_beta_q	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         T non_central_beta_q(T a, T b, T lam, T x, T y, const Policy& pol, T init_val = 0)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T lam, T x, T y, const Policy& pol, T init_val = 0)
non_central_chi_square_p	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         T non_central_chi_square_p(T y, T n, T lambda, const Policy& pol, T init_sum)$/;"	f	namespace:boost::math::detail	signature:(T y, T n, T lambda, const Policy& pol, T init_sum)
non_central_chi_square_p_ding	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         T non_central_chi_square_p_ding(T x, T f, T theta, const Policy& pol, T init_sum = 0)$/;"	f	namespace:boost::math::detail	signature:(T x, T f, T theta, const Policy& pol, T init_sum = 0)
non_central_chi_square_pdf	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         T non_central_chi_square_pdf(T x, T n, T lambda, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, T n, T lambda, const Policy& pol)
non_central_chi_square_q	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         T non_central_chi_square_q(T x, T f, T theta, const Policy& pol, T init_sum = 0)$/;"	f	namespace:boost::math::detail	signature:(T x, T f, T theta, const Policy& pol, T init_sum = 0)
non_central_chi_squared	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      typedef non_central_chi_squared_distribution<double> non_central_chi_squared; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
non_central_chi_squared_cdf	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         inline RealType non_central_chi_squared_cdf(RealType x, RealType k, RealType l, bool invert, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(RealType x, RealType k, RealType l, bool invert, const Policy&)
non_central_chi_squared_distribution	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         non_central_chi_squared_distribution(RealType df_, RealType lambda) : df(df_), ncp(lambda)$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:(RealType df_, RealType lambda)
non_central_chi_squared_distribution	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      class non_central_chi_squared_distribution$/;"	c	namespace:boost::math
non_central_f	/usr/include/boost/math/distributions/non_central_f.hpp	/^      typedef non_central_f_distribution<double> non_central_f; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
non_central_f_distribution	/usr/include/boost/math/distributions/non_central_f.hpp	/^         non_central_f_distribution(RealType v1_, RealType v2_, RealType lambda) : v1(v1_), v2(v2_), ncp(lambda)$/;"	f	class:boost::math::non_central_f_distribution	access:public	signature:(RealType v1_, RealType v2_, RealType lambda)
non_central_f_distribution	/usr/include/boost/math/distributions/non_central_f.hpp	/^      class non_central_f_distribution$/;"	c	namespace:boost::math
non_central_t	/usr/include/boost/math/distributions/non_central_t.hpp	/^      typedef non_central_t_distribution<double> non_central_t; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
non_central_t2_p	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T non_central_t2_p(T v, T delta, T x, T y, const Policy& pol, T init_val)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, T x, T y, const Policy& pol, T init_val)
non_central_t2_pdf	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T non_central_t2_pdf(T n, T delta, T x, T y, const Policy& pol, T init_val)$/;"	f	namespace:boost::math::detail	signature:(T n, T delta, T x, T y, const Policy& pol, T init_val)
non_central_t2_q	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T non_central_t2_q(T v, T delta, T x, T y, const Policy& pol, T init_val)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, T x, T y, const Policy& pol, T init_val)
non_central_t_cdf	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T non_central_t_cdf(T v, T delta, T t, bool invert, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, T t, bool invert, const Policy& pol)
non_central_t_distribution	/usr/include/boost/math/distributions/non_central_t.hpp	/^         non_central_t_distribution(RealType v_, RealType lambda) : v(v_), ncp(lambda)$/;"	f	class:boost::math::non_central_t_distribution	access:public	signature:(RealType v_, RealType lambda)
non_central_t_distribution	/usr/include/boost/math/distributions/non_central_t.hpp	/^      class non_central_t_distribution$/;"	c	namespace:boost::math
non_central_t_pdf	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T non_central_t_pdf(T n, T delta, T t, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T n, T delta, T t, const Policy& pol)
non_central_t_quantile	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T non_central_t_quantile(const char* function, T v, T delta, T p, T q, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(const char* function, T v, T delta, T p, T q, const Policy&)
non_centrality	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         RealType non_centrality() const$/;"	f	class:boost::math::non_central_beta_distribution	access:public	signature:() const
non_centrality	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         RealType non_centrality() const$/;"	f	class:boost::math::non_central_chi_squared_distribution	access:public	signature:() const
non_centrality	/usr/include/boost/math/distributions/non_central_f.hpp	/^         RealType non_centrality() const$/;"	f	class:boost::math::non_central_f_distribution	access:public	signature:() const
non_centrality	/usr/include/boost/math/distributions/non_central_t.hpp	/^         RealType non_centrality() const$/;"	f	class:boost::math::non_central_t_distribution	access:public	signature:() const
non_centrality_finder	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            non_centrality_finder($/;"	f	struct:boost::math::detail::non_centrality_finder	access:public	signature:( RealType v_, RealType x_, RealType p_, bool c)
non_centrality_finder	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         struct non_centrality_finder$/;"	s	namespace:boost::math::detail
nonfinite_num_get	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      explicit nonfinite_num_get(int flags = 0) : flags_(flags)$/;"	f	class:boost::math::nonfinite_num_get	access:public	signature:(int flags = 0)
nonfinite_num_get	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^    class nonfinite_num_get : public std::num_get<CharType, InputIterator>$/;"	c	namespace:boost::math	inherits:std::num_get
nonfinite_num_put	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      explicit nonfinite_num_put(int flags = 0) : flags_(flags) {}$/;"	f	class:boost::math::nonfinite_num_put	access:public	signature:(int flags = 0)
nonfinite_num_put	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^    class nonfinite_num_put : public std::num_put<CharType, OutputIterator>$/;"	c	namespace:boost::math	inherits:std::num_put
norm	/usr/include/boost/math/octonion.hpp	/^        inline T                                norm(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
norm	/usr/include/boost/math/quaternion.hpp	/^        inline T                                norm(quaternion<T>const  & q)$/;"	f	namespace:boost::math	signature:(quaternion<T>const & q)
normal	/usr/include/boost/math/distributions/normal.hpp	/^typedef normal_distribution<double> normal;$/;"	t	namespace:boost::math
normal_distribution	/usr/include/boost/math/distributions/normal.hpp	/^   normal_distribution(RealType mean = 0, RealType sd = 1)$/;"	f	class:boost::math::normal_distribution	access:public	signature:(RealType mean = 0, RealType sd = 1)
normal_distribution	/usr/include/boost/math/distributions/normal.hpp	/^class normal_distribution$/;"	c	namespace:boost::math
normalise	/usr/include/boost/math/policies/policy.hpp	/^struct normalise$/;"	s	namespace:boost::math::policies
normalise	/usr/include/boost/math/policies/policy.hpp	/^struct normalise<policy<>, $/;"	s	namespace:boost::math::policies
normalise	/usr/include/boost/math/policies/policy.hpp	/^struct normalise<policy<detail::forwarding_arg1, detail::forwarding_arg2>,$/;"	s	namespace:boost::math::policies
ntl	/usr/include/boost/math/bindings/rr.hpp	/^namespace ntl$/;"	n	namespace:boost::math
ntl	/usr/include/boost/math/bindings/rr.hpp	/^namespace ntl{$/;"	n	namespace:boost::math
ntl_lanczos	/usr/include/boost/math/bindings/rr.hpp	/^struct ntl_lanczos$/;"	s	namespace:boost::math::lanczos
numerator	/usr/include/boost/math/tools/remez.hpp	/^   polynomial<T> numerator()const;$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:() const
numerator	/usr/include/boost/math/tools/remez.hpp	/^   polynomial<T> numerator;$/;"	m	struct:boost::math::tools::detail::remez_error_function	access:private
numerator	/usr/include/boost/math/tools/remez.hpp	/^polynomial<T> remez_minimax<T>::numerator()const$/;"	f	class:boost::math::tools::remez_minimax	signature:() const
numeric_limits	/usr/include/boost/math/bindings/e_float.hpp	/^   class numeric_limits< ::boost::math::ef::e_float> : public numeric_limits< ::e_float>$/;"	c	namespace:std	inherits:numeric_limits
octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                            octonion(octonion<double> const & a_recopier)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<double> const & a_recopier)
octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                            octonion(octonion<float> const & a_recopier)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<float> const & a_recopier)
octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                    octonion(octonion<double> const & a_recopier)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<double> const & a_recopier)
octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                    octonion(octonion<float> const & a_recopier)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<float> const & a_recopier)
octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                    octonion(octonion<long double> const & a_recopier)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<long double> const & a_recopier)
octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                octonion(   ::boost::math::quaternion<T> const & q0,$/;"	f	class:boost::math::octonion	access:public	signature:( ::boost::math::quaternion<T> const & q0, ::boost::math::quaternion<T> const & q1 = ::boost::math::quaternion<T>())
octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                octonion(   ::std::complex<T> const & z0,$/;"	f	class:boost::math::octonion	access:public	signature:( ::std::complex<T> const & z0, ::std::complex<T> const & z1 = ::std::complex<T>(), ::std::complex<T> const & z2 = ::std::complex<T>(), ::std::complex<T> const & z3 = ::std::complex<T>())
octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                octonion(   T const & requested_a = T(),$/;"	f	class:boost::math::octonion	access:public	signature:( T const & requested_a = T(), T const & requested_b = T(), T const & requested_c = T(), T const & requested_d = T(), T const & requested_e = T(), T const & requested_f = T(), T const & requested_g = T(), T const & requested_h = T())
octonion	/usr/include/boost/math/octonion.hpp	/^            explicit                octonion(octonion<X> const & a_recopier)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<X> const & a_recopier)
octonion	/usr/include/boost/math/octonion.hpp	/^        class octonion$/;"	c	namespace:boost::math
octonion	/usr/include/boost/math/octonion.hpp	/^        class octonion<double>$/;"	c	namespace:boost::math
octonion	/usr/include/boost/math/octonion.hpp	/^        class octonion<float>$/;"	c	namespace:boost::math
octonion	/usr/include/boost/math/octonion.hpp	/^        class octonion<long double>$/;"	c	namespace:boost::math
octonion_type_converter	/usr/include/boost/math/octonion.hpp	/^            octonion<T>    octonion_type_converter(octonion<U> const & rhs)$/;"	f	namespace:boost::math::detail	signature:(octonion<U> const & rhs)
octonion_type_converter	/usr/include/boost/math/octonion.hpp	/^            octonion<T>    octonion_type_converter(octonion<U> const & rhs);$/;"	p	namespace:boost::math::detail	signature:(octonion<U> const & rhs)
operator !=	/usr/include/boost/math/bindings/e_float.hpp	/^inline bool operator != (const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
operator !=	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator != (const T& t, const mpreal& r){ return mpreal(t) != r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
operator !=	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator != (const mpreal& r, const T& t){ return r != mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
operator !=	/usr/include/boost/math/bindings/rr.hpp	/^inline bool operator != (const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
operator !=	/usr/include/boost/math/concepts/real_concept.hpp	/^inline bool operator != (const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
operator !=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline bool operator != (const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
operator !=	/usr/include/boost/math/tools/test_data.hpp	/^   bool operator!=(const test_data& d)const{ return m_data != d.m_data; }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(const test_data& d) const
operator ()	/usr/include/boost/math/bindings/rr.hpp	/^      boost::math::tuple<RR, RR, RR> operator()(RR const& p)$/;"	f	struct:boost::math::ntl::acos_root	access:public	signature:(RR const& p)
operator ()	/usr/include/boost/math/bindings/rr.hpp	/^      boost::math::tuple<RR, RR, RR> operator()(RR const& p)$/;"	f	struct:boost::math::ntl::asin_root	access:public	signature:(RR const& p)
operator ()	/usr/include/boost/math/bindings/rr.hpp	/^      boost::math::tuple<RR, RR, RR> operator()(RR const& p)$/;"	f	struct:boost::math::ntl::atan_root	access:public	signature:(RR const& p)
operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^            T  operator ()( T const &a, T const &b )$/;"	f	struct:boost::math::detail::gcd_optimal_evaluator_helper2_t::helper	access:public	signature:( T const &a, T const &b )
operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^            T  operator ()( T const &a, T const &b )$/;"	f	struct:boost::math::detail::lcm_optimal_evaluator_helper2_t::helper	access:public	signature:( T const &a, T const &b )
operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^        T  operator ()( T const &a, T const &b )$/;"	f	struct:boost::math::detail::gcd_optimal_evaluator	access:public	signature:( T const &a, T const &b )
operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^        T  operator ()( T const &a, T const &b )$/;"	f	struct:boost::math::detail::gcd_optimal_evaluator_helper_t	access:public	signature:( T const &a, T const &b )
operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^        T  operator ()( T const &a, T const &b )$/;"	f	struct:boost::math::detail::lcm_optimal_evaluator	access:public	signature:( T const &a, T const &b )
operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^        T  operator ()( T const &a, T const &b )$/;"	f	struct:boost::math::detail::lcm_optimal_evaluator_helper_t	access:public	signature:( T const &a, T const &b )
operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^    result_type  operator ()( first_argument_type const &a,$/;"	p	class:boost::math::gcd_evaluator	access:public	signature:( first_argument_type const &a, second_argument_type const &b ) const
operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^    result_type  operator ()( first_argument_type const &a,$/;"	p	class:boost::math::lcm_evaluator	access:public	signature:( first_argument_type const &a, second_argument_type const &b ) const
operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^gcd_evaluator<IntegerType>::operator ()$/;"	f	class:boost::math::gcd_evaluator	signature:( first_argument_type const & a, second_argument_type const & b ) const
operator ()	/usr/include/boost/math/common_factor_rt.hpp	/^lcm_evaluator<IntegerType>::operator ()$/;"	f	class:boost::math::lcm_evaluator	signature:( first_argument_type const & a, second_argument_type const & b ) const
operator ()	/usr/include/boost/math/distributions/chi_squared.hpp	/^   RealType operator()(const RealType& df)$/;"	f	struct:boost::math::detail::df_estimator	access:public	signature:(const RealType& df)
operator ()	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^   typename Dist::value_type operator()(const typename Dist::value_type& x)$/;"	f	struct:boost::math::detail::pdf_minimizer	access:public	signature:(const typename Dist::value_type& x)
operator ()	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   value_type operator()(const value_type& x)$/;"	f	struct:boost::math::detail::generic_quantile_finder	access:public	signature:(const value_type& x)
operator ()	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   bool operator()(int i, int j)$/;"	f	struct:boost::math::detail::sort_functor	access:public	signature:(int i, int j)
operator ()	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   value_type operator()(value_type const& x)$/;"	f	struct:boost::math::detail::distribution_quantile_finder	access:public	signature:(value_type const& x)
operator ()	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  boost::math::tuple<RealType, RealType> operator()(RealType const& x)$/;"	f	struct:boost::math::inverse_gaussian_quantile_complement_functor	access:public	signature:(RealType const& x)
operator ()	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  boost::math::tuple<RealType, RealType> operator()(RealType const& x)$/;"	f	struct:boost::math::inverse_gaussian_quantile_functor	access:public	signature:(RealType const& x)
operator ()	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T operator()()$/;"	f	struct:boost::math::detail::hypergeometric_2F2_sum	access:public	signature:()
operator ()	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T operator()(const T& x)$/;"	f	struct:boost::math::detail::nc_beta_quantile_functor	access:public	signature:(const T& x)
operator ()	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType operator()(const RealType& lam)$/;"	f	struct:boost::math::detail::non_centrality_finder	access:public	signature:(const RealType& lam)
operator ()	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType operator()(const RealType& v)$/;"	f	struct:boost::math::detail::degrees_of_freedom_finder	access:public	signature:(const RealType& v)
operator ()	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            T operator()(const T& x)$/;"	f	struct:boost::math::detail::nccs_quantile_functor	access:public	signature:(const T& x)
operator ()	/usr/include/boost/math/distributions/skew_normal.hpp	/^      boost::math::tuple<RealType, RealType> operator()(RealType const& x)$/;"	f	struct:boost::math::detail::skew_normal_mode_functor	access:public	signature:(RealType const& x)
operator ()	/usr/include/boost/math/distributions/skew_normal.hpp	/^      boost::math::tuple<RealType, RealType> operator()(RealType const& x)$/;"	f	struct:boost::math::detail::skew_normal_quantile_functor	access:public	signature:(RealType const& x)
operator ()	/usr/include/boost/math/distributions/students_t.hpp	/^   RealType operator()(const RealType& df)$/;"	f	struct:boost::math::detail::sample_size_func	access:public	signature:(const RealType& df)
operator ()	/usr/include/boost/math/special_functions/bessel.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/beta.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::ibeta_series_t	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/beta.hpp	/^   result_type operator()()$/;"	f	struct:boost::math::detail::ibeta_fraction2_t	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::cyl_bessel_i_small_z	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::bessel_j_small_z_series_term	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   boost::math::tuple<T,T,T> operator()(const T& guess)$/;"	f	struct:boost::math::detail::erf_roots	access:public	signature:(const T& guess)
operator ()	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   T operator()(T a)$/;"	f	struct:boost::math::detail::gamma_inva_t	access:public	signature:(T a)
operator ()	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   T operator()(T a)$/;"	f	struct:boost::math::detail::beta_inv_ab_t	access:public	signature:(T a)
operator ()	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   boost::math::tuple<T, T, T> operator()(T x)$/;"	f	struct:boost::math::detail::ibeta_roots	access:public	signature:(T x)
operator ()	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   boost::math::tuple<T, T> operator()(T x)$/;"	f	struct:boost::math::detail::temme_root_finder	access:public	signature:(T x)
operator ()	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   boost::math::tuple<T, T, T> operator()(const T& x)const$/;"	f	struct:boost::math::detail::gamma_p_inverse_func	access:public	signature:(const T& x) const
operator ()	/usr/include/boost/math/special_functions/erf.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::erf_asympt_series_t	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/expint.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::expint_i_series	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/expint.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::expint_series	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/expint.hpp	/^   std::pair<T,T> operator()()$/;"	f	struct:boost::math::detail::expint_fraction	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/expm1.hpp	/^     T operator()()$/;"	f	struct:boost::math::detail::expm1_series	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/gamma.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::lower_incomplete_gamma_series	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/gamma.hpp	/^   T operator()()$/;"	f	struct:boost::math::detail::small_gamma2_series	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/gamma.hpp	/^   result_type operator()()$/;"	f	struct:boost::math::detail::upper_incomplete_gamma_fract	access:public	signature:()
operator ()	/usr/include/boost/math/special_functions/log1p.hpp	/^     T operator()()$/;"	f	struct:boost::math::detail::log1p_series	access:public	signature:()
operator ()	/usr/include/boost/math/tools/remez.hpp	/^   T operator()(const T& x)$/;"	f	struct:boost::math::tools::detail::remez_max_error_function	access:public	signature:(const T& x)
operator ()	/usr/include/boost/math/tools/remez.hpp	/^   T operator()(const T& z)const$/;"	f	struct:boost::math::tools::detail::remez_error_function	access:public	signature:(const T& z) const
operator ()	/usr/include/boost/math/tools/toms748_solve.hpp	/^   bool operator()(const T& a, const T& b)$/;"	f	class:boost::math::tools::eps_tolerance	access:public	signature:(const T& a, const T& b)
operator ()	/usr/include/boost/math/tools/toms748_solve.hpp	/^   bool operator()(const T& a, const T& b)$/;"	f	struct:boost::math::tools::equal_ceil	access:public	signature:(const T& a, const T& b)
operator ()	/usr/include/boost/math/tools/toms748_solve.hpp	/^   bool operator()(const T& a, const T& b)$/;"	f	struct:boost::math::tools::equal_floor	access:public	signature:(const T& a, const T& b)
operator ()	/usr/include/boost/math/tools/toms748_solve.hpp	/^   bool operator()(const T& a, const T& b)$/;"	f	struct:boost::math::tools::equal_nearest_integer	access:public	signature:(const T& a, const T& b)
operator *	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float operator*(const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
operator *	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator * (const T& t, const mpreal& r){ return mpreal(t) * r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
operator *	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator * (const mpreal& r, const T& t){ return r * mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
operator *	/usr/include/boost/math/bindings/rr.hpp	/^inline RR operator*(const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
operator *	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept operator*(const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
operator *	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline std_real_concept operator*(const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
operator *	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator * (const U& a, const polynomial<T>& b)$/;"	f	namespace:boost::math::tools	signature:(const U& a, const polynomial<T>& b)
operator *	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator * (const polynomial<T>& a, const U& b)$/;"	f	namespace:boost::math::tools	signature:(const polynomial<T>& a, const U& b)
operator *	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator * (const polynomial<T>& a, const polynomial<T>& b)$/;"	f	namespace:boost::math::tools	signature:(const polynomial<T>& a, const polynomial<T>& b)
operator *=	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator*=(const e_float& other)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(const e_float& other)
operator *=	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator*=(const RR& other)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(const RR& other)
operator *=	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator*=(const real_concept& other)$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(const real_concept& other)
operator *=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator*=(const std_real_concept& other)$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(const std_real_concept& other)
operator *=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator *= (::boost::math::quaternion<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::boost::math::quaternion<T> const & rhs)
operator *=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator *= (::std::complex<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::std::complex<T> const & rhs)
operator *=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator *= (T const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(T const & rhs)
operator *=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator *= (octonion<X> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<X> const & rhs)
operator *=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator *= (::std::complex<T> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(::std::complex<T> const & rhs)
operator *=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator *= (T const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(T const & rhs)
operator *=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator *= (quaternion<X> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<X> const & rhs)
operator *=	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial& operator *=(const U& value)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const U& value)
operator *=	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial& operator *=(const polynomial<U>& value)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const polynomial<U>& value)
operator +	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float const& operator+()const$/;"	f	class:boost::math::ef::e_float	access:public	signature:() const
operator +	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float operator+(const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
operator +	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator + (const T& t, const mpreal& r){ return mpreal(t) + r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
operator +	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator + (const mpreal& r, const T& t){ return r + mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
operator +	/usr/include/boost/math/bindings/rr.hpp	/^   RR const& operator+()const$/;"	f	class:boost::math::ntl::RR	access:public	signature:() const
operator +	/usr/include/boost/math/bindings/rr.hpp	/^inline RR operator+(const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
operator +	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept const& operator+()const$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:() const
operator +	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept operator+(const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
operator +	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept const& operator+()const$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:() const
operator +	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline std_real_concept operator+(const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
operator +	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        operator + (octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
operator +	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    operator + (quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
operator +	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator + (const U& a, const polynomial<T>& b)$/;"	f	namespace:boost::math::tools	signature:(const U& a, const polynomial<T>& b)
operator +	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator + (const polynomial<T>& a, const U& b)$/;"	f	namespace:boost::math::tools	signature:(const polynomial<T>& a, const U& b)
operator +	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator + (const polynomial<T>& a, const polynomial<T>& b)$/;"	f	namespace:boost::math::tools	signature:(const polynomial<T>& a, const polynomial<T>& b)
operator ++	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator++()$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:()
operator +=	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator+=(const e_float& other)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(const e_float& other)
operator +=	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator+=(const RR& other)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(const RR& other)
operator +=	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator+=(const real_concept& other)$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(const real_concept& other)
operator +=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator+=(const std_real_concept& other)$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(const std_real_concept& other)
operator +=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator += (::boost::math::quaternion<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::boost::math::quaternion<T> const & rhs)
operator +=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator += (::std::complex<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::std::complex<T> const & rhs)
operator +=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator += (T const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(T const & rhs)
operator +=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator += (octonion<X> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<X> const & rhs)
operator +=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator += (::std::complex<T> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(::std::complex<T> const & rhs)
operator +=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator += (T const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(T const & rhs)
operator +=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator += (quaternion<X> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<X> const & rhs)
operator +=	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial& operator +=(const U& value)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const U& value)
operator +=	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial& operator +=(const polynomial<U>& value)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const polynomial<U>& value)
operator +=	/usr/include/boost/math/tools/stats.hpp	/^   stats& operator+=(const stats& s)$/;"	f	class:boost::math::tools::stats	access:public	signature:(const stats& s)
operator +=	/usr/include/boost/math/tools/test.hpp	/^   test_result& operator+=(const test_result& t)$/;"	f	struct:boost::math::tools::test_result	access:public	signature:(const test_result& t)
operator -	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float operator-()const$/;"	f	class:boost::math::ef::e_float	access:public	signature:() const
operator -	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float operator-(const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
operator -	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator - (const T& t, const mpreal& r){ return mpreal(t) - r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
operator -	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator - (const mpreal& r, const T& t){ return r - mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
operator -	/usr/include/boost/math/bindings/rr.hpp	/^   RR operator-()const$/;"	f	class:boost::math::ntl::RR	access:public	signature:() const
operator -	/usr/include/boost/math/bindings/rr.hpp	/^inline RR operator-(const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
operator -	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept operator-()const$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:() const
operator -	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept operator-(const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
operator -	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept operator-()const$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:() const
operator -	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline std_real_concept operator-(const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
operator -	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        operator - (octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
operator -	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    operator - (quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
operator -	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator - (const U& a, const polynomial<T>& b)$/;"	f	namespace:boost::math::tools	signature:(const U& a, const polynomial<T>& b)
operator -	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator - (const polynomial<T>& a, const U& b)$/;"	f	namespace:boost::math::tools	signature:(const polynomial<T>& a, const U& b)
operator -	/usr/include/boost/math/tools/polynomial.hpp	/^inline polynomial<T> operator - (const polynomial<T>& a, const polynomial<T>& b)$/;"	f	namespace:boost::math::tools	signature:(const polynomial<T>& a, const polynomial<T>& b)
operator --	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator--()$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:()
operator -=	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator-=(const e_float& other)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(const e_float& other)
operator -=	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator-=(const RR& other)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(const RR& other)
operator -=	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator-=(const real_concept& other)$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(const real_concept& other)
operator -=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator-=(const std_real_concept& other)$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(const std_real_concept& other)
operator -=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator -= (::boost::math::quaternion<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::boost::math::quaternion<T> const & rhs)
operator -=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator -= (::std::complex<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::std::complex<T> const & rhs)
operator -=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator -= (T const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(T const & rhs)
operator -=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator -= (octonion<X> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<X> const & rhs)
operator -=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator -= (::std::complex<T> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(::std::complex<T> const & rhs)
operator -=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator -= (T const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(T const & rhs)
operator -=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator -= (quaternion<X> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<X> const & rhs)
operator -=	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial& operator -=(const U& value)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const U& value)
operator -=	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial& operator -=(const polynomial<U>& value)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const polynomial<U>& value)
operator /	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float operator\/(const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
operator /	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator \/ (const T& t, const mpreal& r){ return mpreal(t) \/ r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
operator /	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpreal operator \/ (const mpreal& r, const T& t){ return r \/ mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
operator /	/usr/include/boost/math/bindings/rr.hpp	/^inline RR operator\/(const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
operator /	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept operator\/(const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
operator /	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline std_real_concept operator\/(const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
operator /=	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator\/=(const e_float& other)$/;"	f	class:boost::math::ef::e_float	access:public	signature:(const e_float& other)
operator /=	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator\/=(const RR& other)$/;"	f	class:boost::math::ntl::RR	access:public	signature:(const RR& other)
operator /=	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator\/=(const real_concept& other)$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(const real_concept& other)
operator /=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator\/=(const std_real_concept& other)$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(const std_real_concept& other)
operator /=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator \/= (::boost::math::quaternion<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::boost::math::quaternion<T> const & rhs)
operator /=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator \/= (::std::complex<T> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(::std::complex<T> const & rhs)
operator /=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator \/= (T const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(T const & rhs)
operator /=	/usr/include/boost/math/octonion.hpp	/^            octonion<T> &            operator \/= (octonion<X> const & rhs)$/;"	f	class:boost::math::octonion	access:public	signature:(octonion<X> const & rhs)
operator /=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator \/= (::std::complex<T> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(::std::complex<T> const & rhs)
operator /=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator \/= (T const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(T const & rhs)
operator /=	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T> &        operator \/= (quaternion<X> const & rhs)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<X> const & rhs)
operator <	/usr/include/boost/math/bindings/e_float.hpp	/^inline bool operator < (const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
operator <	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator < (const T& t, const mpreal& r){ return mpreal(t) < r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
operator <	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator < (const mpreal& r, const T& t){ return r < mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
operator <	/usr/include/boost/math/bindings/rr.hpp	/^inline bool operator < (const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
operator <	/usr/include/boost/math/concepts/real_concept.hpp	/^inline bool operator < (const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
operator <	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline bool operator < (const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
operator <	/usr/include/boost/math/tools/test_data.hpp	/^   bool operator < (const test_data& dat)const{ return m_data < dat.m_data; }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(const test_data& dat) const
operator <<	/usr/include/boost/math/bindings/e_float.hpp	/^std::ostream& operator << (std::ostream& os, const e_float& f)$/;"	f	namespace:boost::math::ef	signature:(std::ostream& os, const e_float& f)
operator <<	/usr/include/boost/math/bindings/rr.hpp	/^inline std::basic_ostream<charT, traits>& operator<<(std::basic_ostream<charT, traits>& os, const RR& a)$/;"	f	namespace:boost::math::ntl	signature:(std::basic_ostream<charT, traits>& os, const RR& a)
operator <<	/usr/include/boost/math/concepts/real_concept.hpp	/^inline std::basic_ostream<charT, traits>& operator<<(std::basic_ostream<charT, traits>& os, const real_concept& a)$/;"	f	namespace:boost::math::concepts	signature:(std::basic_ostream<charT, traits>& os, const real_concept& a)
operator <<	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline std::basic_ostream<charT, traits>& operator<<(std::basic_ostream<charT, traits>& os, const std_real_concept& a)$/;"	f	namespace:boost::math::concepts	signature:(std::basic_ostream<charT, traits>& os, const std_real_concept& a)
operator <<	/usr/include/boost/math/octonion.hpp	/^        ::std::ostream &                        operator << (    ::std::ostream & os,$/;"	f	namespace:boost::math	signature:( ::std::ostream & os, octonion<T> const & o)
operator <<	/usr/include/boost/math/quaternion.hpp	/^        ::std::ostream &                         operator << (    ::std::ostream & os,$/;"	f	namespace:boost::math	signature:( ::std::ostream & os, quaternion<T> const & q)
operator <<	/usr/include/boost/math/tools/polynomial.hpp	/^inline std::basic_ostream<charT, traits>& operator << (std::basic_ostream<charT, traits>& os, const polynomial<T>& poly)$/;"	f	namespace:boost::math::tools	signature:(std::basic_ostream<charT, traits>& os, const polynomial<T>& poly)
operator <=	/usr/include/boost/math/bindings/e_float.hpp	/^inline bool operator <= (const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
operator <=	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator <= (const T& t, const mpreal& r){ return mpreal(t) <= r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
operator <=	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator <= (const mpreal& r, const T& t){ return r <= mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
operator <=	/usr/include/boost/math/bindings/rr.hpp	/^inline bool operator <= (const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
operator <=	/usr/include/boost/math/concepts/real_concept.hpp	/^inline bool operator <= (const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
operator <=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline bool operator <= (const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
operator <=	/usr/include/boost/math/tools/test_data.hpp	/^   bool operator <= (const test_data& dat)const{ return m_data <= dat.m_data; }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(const test_data& dat) const
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(boost::long_long_type c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(boost::long_long_type c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(boost::ulong_long_type c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(boost::ulong_long_type c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(char c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(char c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(double c) { assign_large_real(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(double c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(float c) { assign_large_real(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(float c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(int c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(int c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(long c) { m_value = ::e_float((INT64)c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(long c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(long double c) { assign_large_real(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(long double c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(short c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(short c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(signed char c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(signed char c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(unsigned char c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned char c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(unsigned int c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned int c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(unsigned long c) { m_value = ::e_float((UINT64)c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned long c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(unsigned short c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(unsigned short c)
operator =	/usr/include/boost/math/bindings/e_float.hpp	/^   e_float& operator=(wchar_t c) { m_value = ::e_float(c); return *this; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:(wchar_t c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(boost::long_long_type c) { assign_large_int(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(boost::long_long_type c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(boost::ulong_long_type c) { assign_large_int(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(boost::ulong_long_type c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(char c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(char c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(double c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(double c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(float c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(float c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(int c) { assign_large_int(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(int c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(long c) { assign_large_int(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(long c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(long double c) { assign_large_real(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(long double c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(short c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(short c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(signed char c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(signed char c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(unsigned char c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned char c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(unsigned int c) { assign_large_int(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned int c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(unsigned long c) { assign_large_int(c); return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned long c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(unsigned short c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(unsigned short c)
operator =	/usr/include/boost/math/bindings/rr.hpp	/^   RR& operator=(wchar_t c) { m_value = c; return *this; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:(wchar_t c)
operator =	/usr/include/boost/math/concepts/distributions.hpp	/^   distribution_archetype& operator=(const distribution_archetype&); \/\/ Assignable.$/;"	p	class:boost::math::concepts::distribution_archetype	access:public	signature:(const distribution_archetype&)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(boost::long_long_type c) { m_value = static_cast<real_concept_base_type>(c); return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(boost::long_long_type c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(boost::ulong_long_type c) { m_value = static_cast<real_concept_base_type>(c); return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(boost::ulong_long_type c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(char c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(char c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(double c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(double c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(float c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(float c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(int c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(int c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(long c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(long c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(long double c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(long double c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(short c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(short c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(signed char c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(signed char c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(unsigned char c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned char c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(unsigned int c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned int c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(unsigned long c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned long c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(unsigned short c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned short c)
operator =	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept& operator=(wchar_t c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(wchar_t c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(boost::long_long_type c) { m_value = static_cast<std_real_concept_base_type>(c); return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(boost::long_long_type c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(boost::ulong_long_type c) { m_value = static_cast<std_real_concept_base_type>(c); return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(boost::ulong_long_type c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(char c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(char c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(double c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(double c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(float c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(float c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(int c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(int c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(long c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(long c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(long double c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(long double c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(long long c) { m_value = static_cast<std_real_concept_base_type>(c); return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(long long c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(short c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(short c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(signed char c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(signed char c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(unsigned char c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned char c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(unsigned int c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned int c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(unsigned long c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned long c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(unsigned long long c) { m_value = static_cast<std_real_concept_base_type>(c); return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned long long c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(unsigned short c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned short c)
operator =	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept& operator=(wchar_t c) { m_value = c; return *this; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(wchar_t c)
operator =	/usr/include/boost/math/distributions/complement.hpp	/^   complemented2_type& operator=(const complemented2_type&);$/;"	p	struct:boost::math::complemented2_type	access:private	signature:(const complemented2_type&)
operator =	/usr/include/boost/math/distributions/complement.hpp	/^   complemented3_type& operator=(const complemented3_type&);$/;"	p	struct:boost::math::complemented3_type	access:private	signature:(const complemented3_type&)
operator =	/usr/include/boost/math/distributions/complement.hpp	/^   complemented4_type& operator=(const complemented4_type&);$/;"	p	struct:boost::math::complemented4_type	access:private	signature:(const complemented4_type&)
operator =	/usr/include/boost/math/distributions/complement.hpp	/^   complemented5_type& operator=(const complemented5_type&);$/;"	p	struct:boost::math::complemented5_type	access:private	signature:(const complemented5_type&)
operator =	/usr/include/boost/math/distributions/complement.hpp	/^   complemented6_type& operator=(const complemented6_type&);$/;"	p	struct:boost::math::complemented6_type	access:private	signature:(const complemented6_type&)
operator =	/usr/include/boost/math/distributions/complement.hpp	/^   complemented7_type& operator=(const complemented7_type&);$/;"	p	struct:boost::math::complemented7_type	access:private	signature:(const complemented7_type&)
operator =	/usr/include/boost/math/special_functions/expm1.hpp	/^     expm1_series& operator=(const expm1_series&);$/;"	p	struct:boost::math::detail::expm1_series	access:private	signature:(const expm1_series&)
operator =	/usr/include/boost/math/special_functions/log1p.hpp	/^     log1p_series& operator=(const log1p_series&);$/;"	p	struct:boost::math::detail::log1p_series	access:private	signature:(const log1p_series&)
operator ==	/usr/include/boost/math/bindings/e_float.hpp	/^inline bool operator == (const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
operator ==	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator == (const T& t, const mpreal& r){ return mpreal(t) == r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
operator ==	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator == (const mpreal& r, const T& t){ return r == mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
operator ==	/usr/include/boost/math/bindings/rr.hpp	/^inline bool operator == (const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
operator ==	/usr/include/boost/math/concepts/real_concept.hpp	/^inline bool operator == (const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
operator ==	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline bool operator == (const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (::boost::math::quaternion<T> const & lhs, octonion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(::boost::math::quaternion<T> const & lhs, octonion<T> const & rhs)
operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (::std::complex<T> const & lhs, octonion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(::std::complex<T> const & lhs, octonion<T> const & rhs)
operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (T const & lhs, octonion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(T const & lhs, octonion<T> const & rhs)
operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (octonion<T> const & lhs, ::boost::math::quaternion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(octonion<T> const & lhs, ::boost::math::quaternion<T> const & rhs)
operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (octonion<T> const & lhs, ::std::complex<T> const & rhs)$/;"	f	namespace:boost::math	signature:(octonion<T> const & lhs, ::std::complex<T> const & rhs)
operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (octonion<T> const & lhs, T const & rhs)$/;"	f	namespace:boost::math	signature:(octonion<T> const & lhs, T const & rhs)
operator ==	/usr/include/boost/math/octonion.hpp	/^        inline bool                                operator == (octonion<T> const & lhs, octonion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(octonion<T> const & lhs, octonion<T> const & rhs)
operator ==	/usr/include/boost/math/quaternion.hpp	/^        inline bool                                operator == (::std::complex<T> const & lhs, quaternion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(::std::complex<T> const & lhs, quaternion<T> const & rhs)
operator ==	/usr/include/boost/math/quaternion.hpp	/^        inline bool                                operator == (T const & lhs, quaternion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(T const & lhs, quaternion<T> const & rhs)
operator ==	/usr/include/boost/math/quaternion.hpp	/^        inline bool                                operator == (quaternion<T> const & lhs, ::std::complex<T> const & rhs)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & lhs, ::std::complex<T> const & rhs)
operator ==	/usr/include/boost/math/quaternion.hpp	/^        inline bool                                operator == (quaternion<T> const & lhs, T const & rhs)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & lhs, T const & rhs)
operator ==	/usr/include/boost/math/quaternion.hpp	/^        inline bool                                operator == (quaternion<T> const & lhs, quaternion<T> const & rhs)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & lhs, quaternion<T> const & rhs)
operator ==	/usr/include/boost/math/tools/test_data.hpp	/^   bool operator==(const test_data& d)const{ return m_data == d.m_data; }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(const test_data& d) const
operator >	/usr/include/boost/math/bindings/e_float.hpp	/^inline bool operator > (const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
operator >	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator > (const T& t, const mpreal& r){ return mpreal(t) > r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
operator >	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator > (const mpreal& r, const T& t){ return r > mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
operator >	/usr/include/boost/math/bindings/rr.hpp	/^inline bool operator > (const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
operator >	/usr/include/boost/math/concepts/real_concept.hpp	/^inline bool operator > (const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
operator >	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline bool operator > (const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
operator >	/usr/include/boost/math/tools/test_data.hpp	/^   bool operator > (const test_data& dat)const{ return m_data > dat.m_data; }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(const test_data& dat) const
operator >=	/usr/include/boost/math/bindings/e_float.hpp	/^inline bool operator >= (const e_float& a, const e_float& b)$/;"	f	namespace:boost::math::ef	signature:(const e_float& a, const e_float& b)
operator >=	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator >= (const T& t, const mpreal& r){ return mpreal(t) >= r; }$/;"	f	namespace:mpfr	signature:(const T& t, const mpreal& r)
operator >=	/usr/include/boost/math/bindings/mpreal.hpp	/^inline bool operator >= (const mpreal& r, const T& t){ return r >= mpreal(t); }$/;"	f	namespace:mpfr	signature:(const mpreal& r, const T& t)
operator >=	/usr/include/boost/math/bindings/rr.hpp	/^inline bool operator >= (const RR& a, const RR& b)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a, const RR& b)
operator >=	/usr/include/boost/math/concepts/real_concept.hpp	/^inline bool operator >= (const real_concept& a, const real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const real_concept& a, const real_concept& b)
operator >=	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline bool operator >= (const std_real_concept& a, const std_real_concept& b)$/;"	f	namespace:boost::math::concepts	signature:(const std_real_concept& a, const std_real_concept& b)
operator >=	/usr/include/boost/math/tools/test_data.hpp	/^   bool operator >= (const test_data& dat)const{ return m_data >= dat.m_data; }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(const test_data& dat) const
operator >>	/usr/include/boost/math/bindings/e_float.hpp	/^std::istream& operator >> (std::istream& is, e_float& f)$/;"	f	namespace:boost::math::ef	signature:(std::istream& is, e_float& f)
operator >>	/usr/include/boost/math/bindings/rr.hpp	/^inline std::basic_istream<charT, traits>& operator>>(std::basic_istream<charT, traits>& is, RR& a)$/;"	f	namespace:boost::math::ntl	signature:(std::basic_istream<charT, traits>& is, RR& a)
operator >>	/usr/include/boost/math/concepts/real_concept.hpp	/^inline std::basic_istream<charT, traits>& operator>>(std::basic_istream<charT, traits>& is, real_concept& a)$/;"	f	namespace:boost::math::concepts	signature:(std::basic_istream<charT, traits>& is, real_concept& a)
operator >>	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline std::basic_istream<charT, traits>& operator>>(std::basic_istream<charT, traits>& is, std_real_concept& a)$/;"	f	namespace:boost::math::concepts	signature:(std::basic_istream<charT, traits>& is, std_real_concept& a)
operator >>	/usr/include/boost/math/octonion.hpp	/^        ::std::istream &                        operator >> (    ::std::istream & is,$/;"	f	namespace:boost::math	signature:( ::std::istream & is, octonion<T>& o)
operator >>	/usr/include/boost/math/quaternion.hpp	/^        std::istream &                            operator >> (    ::std::istream & is,$/;"	f	namespace:boost::math	signature:( ::std::istream & is, quaternion<T> & q)
operator []	/usr/include/boost/math/tools/polynomial.hpp	/^   const value_type& operator[](size_type i)const$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(size_type i) const
operator []	/usr/include/boost/math/tools/polynomial.hpp	/^   value_type& operator[](size_type i)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(size_type i)
operator boost::uintmax_t	/usr/include/boost/math/special_functions/cbrt.hpp	/^   operator boost::uintmax_t()const;$/;"	p	struct:boost::math::detail::big_int_type	access:public	signature:() const
operator |	/usr/include/boost/math/tools/test_data.hpp	/^parameter_type operator | (parameter_type a, parameter_type b)$/;"	f	namespace:boost::math::tools	signature:(parameter_type a, parameter_type b)
operator |=	/usr/include/boost/math/tools/test_data.hpp	/^parameter_type& operator |= (parameter_type& a, parameter_type b)$/;"	f	namespace:boost::math::tools	signature:(parameter_type& a, parameter_type b)
optimisation_tag	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         >::type optimisation_tag;$/;"	t	struct:boost::math::detail::bessel_traits	access:public
orderD	/usr/include/boost/math/tools/remez.hpp	/^   unsigned orderD;               \/\/ Order of the denominator polynomial.$/;"	m	class:boost::math::tools::remez_minimax	access:private
orderN	/usr/include/boost/math/tools/remez.hpp	/^   unsigned orderN;               \/\/ Order of the numerator polynomial.$/;"	m	class:boost::math::tools::remez_minimax	access:private
overflow_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef overflow_error<> overflow_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
overflow_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_overflow_error<mpl::_1>, overflow_error<> >::type overflow_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
overflow_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_overflow_error<mpl::_1>, typename Policy::overflow_error_type >::type overflow_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
owens_t	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type owens_t(T1 h, T2 a);$/;"	p	namespace:boost::math	signature:(T1 h, T2 a)
owens_t	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type owens_t(T1 h, T2 a, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 h, T2 a, const Policy& pol)
owens_t	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t(RealType h, RealType a, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(RealType h, RealType a, const Policy& pol)
owens_t	/usr/include/boost/math/special_functions/owens_t.hpp	/^      inline typename tools::promote_args<T1, T2>::type owens_t(T1 h, T2 a)$/;"	f	namespace:boost::math	signature:(T1 h, T2 a)
owens_t	/usr/include/boost/math/special_functions/owens_t.hpp	/^      inline typename tools::promote_args<T1, T2>::type owens_t(T1 h, T2 a, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 h, T2 a, const Policy& pol)
owens_t_T1	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T1(const RealType h, const RealType a, const unsigned short m)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const unsigned short m)
owens_t_T1_accelerated	/usr/include/boost/math/special_functions/owens_t.hpp	/^         std::pair<T, T> owens_t_T1_accelerated(T h, T a, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T h, T a, const Policy& pol)
owens_t_T2	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T2(const RealType h, const RealType a, const unsigned short m, const RealType ah, const Policy&, const mpl::false_&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const unsigned short m, const RealType ah, const Policy&, const mpl::false_&)
owens_t_T2	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T2(const RealType h, const RealType a, const unsigned short m, const RealType ah, const Policy&, const mpl::true_&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const unsigned short m, const RealType ah, const Policy&, const mpl::true_&)
owens_t_T2_accelerated	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline std::pair<RealType, RealType> owens_t_T2_accelerated(const RealType h, const RealType a, const RealType ah, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const Policy&)
owens_t_T3	/usr/include/boost/math/special_functions/owens_t.hpp	/^        inline RealType owens_t_T3(const RealType h, const RealType a, const RealType ah, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const Policy&)
owens_t_T3_imp	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T3_imp(const RealType h, const RealType a, const RealType ah, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const mpl::int_<53>&)
owens_t_T3_imp	/usr/include/boost/math/special_functions/owens_t.hpp	/^        inline RealType owens_t_T3_imp(const RealType h, const RealType a, const RealType ah, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const mpl::int_<64>&)
owens_t_T4	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T4(const RealType h, const RealType a, const unsigned short m)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const unsigned short m)
owens_t_T5	/usr/include/boost/math/special_functions/owens_t.hpp	/^        inline RealType owens_t_T5(const RealType h, const RealType a, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const Policy&)
owens_t_T5_imp	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T5_imp(const RealType h, const RealType a, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const mpl::int_<53>&)
owens_t_T5_imp	/usr/include/boost/math/special_functions/owens_t.hpp	/^        inline RealType owens_t_T5_imp(const RealType h, const RealType a, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const mpl::int_<64>&)
owens_t_T6	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_T6(const RealType h, const RealType a)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a)
owens_t_compute_code	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline unsigned short owens_t_compute_code(const RealType h, const RealType a)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a)
owens_t_dispatch	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_dispatch(const RealType h, const RealType a, const RealType ah, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const Policy& pol)
owens_t_dispatch	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_dispatch(const RealType h, const RealType a, const RealType ah, const Policy& pol, const mpl::int_<0>&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const Policy& pol, const mpl::int_<0>&)
owens_t_dispatch	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_dispatch(const RealType h, const RealType a, const RealType ah, const Policy& pol, const mpl::int_<65>&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const Policy& pol, const mpl::int_<65>&)
owens_t_dispatch	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_dispatch(const RealType h, const RealType a, const RealType ah, const Policy& pol, mpl::int_<64> const&)$/;"	f	namespace:boost::math::detail	signature:(const RealType h, const RealType a, const RealType ah, const Policy& pol, mpl::int_<64> const&)
owens_t_get_order	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline unsigned short owens_t_get_order(const unsigned short icode, RealType r, const Policy&)$/;"	f	namespace:boost::math::detail	signature:(const unsigned short icode, RealType r, const Policy&)
owens_t_get_order_imp	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline unsigned short owens_t_get_order_imp(const unsigned short icode, RealType, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(const unsigned short icode, RealType, const mpl::int_<53>&)
owens_t_get_order_imp	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline unsigned short owens_t_get_order_imp(const unsigned short icode, RealType, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(const unsigned short icode, RealType, const mpl::int_<64>&)
owens_t_initializer	/usr/include/boost/math/special_functions/owens_t.hpp	/^         struct owens_t_initializer$/;"	s	namespace:boost::math::detail
owens_t_znorm1	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_znorm1(const RealType x)$/;"	f	namespace:boost::math::detail	signature:(const RealType x)
owens_t_znorm2	/usr/include/boost/math/special_functions/owens_t.hpp	/^         inline RealType owens_t_znorm2(const RealType x)$/;"	f	namespace:boost::math::detail	signature:(const RealType x)
p	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType p;$/;"	m	struct:boost::math::detail::degrees_of_freedom_finder	access:private
p	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType p;$/;"	m	struct:boost::math::detail::non_centrality_finder	access:private
p	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   T z, p;$/;"	m	struct:boost::math::detail::gamma_inva_t	access:private
p	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   T b, z, p;$/;"	m	struct:boost::math::detail::beta_inv_ab_t	access:private
p	/usr/include/boost/math/special_functions/detail/igamma_inverse.hpp	/^   T a, p;$/;"	m	struct:boost::math::detail::gamma_p_inverse_func	access:private
param	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType& param;$/;"	m	struct:boost::math::complemented2_type	access:public
param1	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType1& param1;$/;"	m	struct:boost::math::complemented3_type	access:public
param1	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType1& param1;$/;"	m	struct:boost::math::complemented4_type	access:public
param1	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType1& param1;$/;"	m	struct:boost::math::complemented5_type	access:public
param1	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType1& param1;$/;"	m	struct:boost::math::complemented6_type	access:public
param1	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType1& param1;$/;"	m	struct:boost::math::complemented7_type	access:public
param2	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType2& param2;$/;"	m	struct:boost::math::complemented3_type	access:public
param2	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType2& param2;$/;"	m	struct:boost::math::complemented4_type	access:public
param2	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType2& param2;$/;"	m	struct:boost::math::complemented5_type	access:public
param2	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType2& param2;$/;"	m	struct:boost::math::complemented6_type	access:public
param2	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType2& param2;$/;"	m	struct:boost::math::complemented7_type	access:public
param3	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType3& param3;$/;"	m	struct:boost::math::complemented4_type	access:public
param3	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType3& param3;$/;"	m	struct:boost::math::complemented5_type	access:public
param3	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType3& param3;$/;"	m	struct:boost::math::complemented6_type	access:public
param3	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType3& param3;$/;"	m	struct:boost::math::complemented7_type	access:public
param4	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType4& param4;$/;"	m	struct:boost::math::complemented5_type	access:public
param4	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType4& param4;$/;"	m	struct:boost::math::complemented6_type	access:public
param4	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType4& param4;$/;"	m	struct:boost::math::complemented7_type	access:public
param5	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType5& param5;$/;"	m	struct:boost::math::complemented6_type	access:public
param5	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType5& param5;$/;"	m	struct:boost::math::complemented7_type	access:public
param6	/usr/include/boost/math/distributions/complement.hpp	/^   const RealType6& param6;$/;"	m	struct:boost::math::complemented7_type	access:public
parameter_info	/usr/include/boost/math/tools/test_data.hpp	/^struct parameter_info$/;"	s	namespace:boost::math::tools
parameter_type	/usr/include/boost/math/tools/test_data.hpp	/^enum parameter_type$/;"	g	namespace:boost::math::tools
pareto	/usr/include/boost/math/distributions/pareto.hpp	/^    typedef pareto_distribution<double> pareto; \/\/ Convenience to allow pareto(2., 3.);$/;"	t	namespace:boost::math
pareto_distribution	/usr/include/boost/math/distributions/pareto.hpp	/^      pareto_distribution(RealType scale = 1, RealType shape = 1)$/;"	f	class:boost::math::pareto_distribution	access:public	signature:(RealType scale = 1, RealType shape = 1)
pareto_distribution	/usr/include/boost/math/distributions/pareto.hpp	/^    class pareto_distribution$/;"	c	namespace:boost::math
pd	/usr/include/boost/math/concepts/distributions.hpp	/^   static Distribution* pd;$/;"	m	struct:boost::math::concepts::DistributionConcept	access:private
pd	/usr/include/boost/math/concepts/distributions.hpp	/^Distribution* DistributionConcept<Distribution>::pd = 0;$/;"	m	class:boost::math::concepts::DistributionConcept
pdf	/usr/include/boost/math/concepts/distributions.hpp	/^RealType pdf(const distribution_archetype<RealType>& dist, const RealType& x);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/bernoulli.hpp	/^    RealType pdf(const bernoulli_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist, const RealType& k)
pdf	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType pdf(const beta_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/binomial.hpp	/^      RealType pdf(const binomial_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist, const RealType& k)
pdf	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType pdf(const cauchy_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/chi_squared.hpp	/^RealType pdf(const chi_squared_distribution<RealType, Policy>& dist, const RealType& chi_square)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist, const RealType& chi_square)
pdf	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type pdf(const Distribution& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const Distribution& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType pdf(const exponential_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType pdf(const extreme_value_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/fisher_f.hpp	/^RealType pdf(const fisher_f_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType pdf(const gamma_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType pdf(const geometric_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist, const RealType& k)
pdf	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType pdf(const hypergeometric_distribution<RealType, Policy>& dist, const U& x)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist, const U& x)
pdf	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType pdf(const hypergeometric_distribution<RealType, Policy>& dist, const unsigned& x)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist, const unsigned& x)
pdf	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^RealType pdf(const inverse_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType pdf(const inverse_gamma_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType pdf(const inverse_gaussian_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType pdf(const laplace_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType pdf(const logistic_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/lognormal.hpp	/^RealType pdf(const lognormal_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType pdf(const negative_binomial_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist, const RealType& k)
pdf	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType pdf(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType pdf(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType pdf(const non_central_f_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType pdf(const non_central_t_distribution<RealType, Policy>& dist, const RealType& t)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist, const RealType& t)
pdf	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType pdf(const normal_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType pdf(const pareto_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/poisson.hpp	/^    RealType pdf(const poisson_distribution<RealType, Policy>& dist, const RealType& k)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist, const RealType& k)
pdf	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType pdf(const rayleigh_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType pdf(const skew_normal_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType pdf(const students_t_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/triangular.hpp	/^  RealType pdf(const triangular_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType pdf(const uniform_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist, const RealType& x)
pdf	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType pdf(const weibull_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist, const RealType& x)
pdf_minimizer	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^   pdf_minimizer(const Dist& d)$/;"	f	struct:boost::math::detail::pdf_minimizer	access:public	signature:(const Dist& d)
pdf_minimizer	/usr/include/boost/math/distributions/detail/generic_mode.hpp	/^struct pdf_minimizer$/;"	s	namespace:boost::math::detail
peek_char	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      char peek_char$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:( InputIterator& it, InputIterator end, const std::ctype<CharType>& ct ) const
periodic_in_range	/usr/include/boost/math/tools/test_data.hpp	/^   periodic_in_range = 1,$/;"	e	enum:boost::math::tools::parameter_type
pinned	/usr/include/boost/math/tools/remez.hpp	/^   bool pinned;                   \/\/ If true the approximation is "pinned" to go through the origin.$/;"	m	class:boost::math::tools::remez_minimax	access:private
poch	/usr/include/boost/math/special_functions/beta.hpp	/^   T result, x, apn, poch;$/;"	m	struct:boost::math::detail::ibeta_series_t	access:private
poisson	/usr/include/boost/math/distributions/poisson.hpp	/^    typedef poisson_distribution<double> poisson; \/\/ Reserved name of type double.$/;"	t	namespace:boost::math
poisson_detail	/usr/include/boost/math/distributions/poisson.hpp	/^    namespace poisson_detail$/;"	n	namespace:boost::math
poisson_distribution	/usr/include/boost/math/distributions/poisson.hpp	/^      poisson_distribution(RealType mean = 1) : m_l(mean) \/\/ mean (lambda).$/;"	f	class:boost::math::poisson_distribution	access:public	signature:(RealType mean = 1)
poisson_distribution	/usr/include/boost/math/distributions/poisson.hpp	/^    class poisson_distribution$/;"	c	namespace:boost::math
pole_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef pole_error<> pole_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
pole_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_pole_error<mpl::_1>, pole_error<> >::type pole_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
pole_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_pole_error<mpl::_1>, typename Policy::pole_error_type >::type pole_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
policies	/usr/include/boost/math/bindings/e_float.hpp	/^namespace policies{$/;"	n	namespace:boost::math
policies	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace policies{$/;"	n	namespace:boost::math
policies	/usr/include/boost/math/policies/error_handling.hpp	/^namespace policies{$/;"	n	namespace:boost::math
policies	/usr/include/boost/math/policies/policy.hpp	/^namespace policies{$/;"	n	namespace:boost::math
policy	/usr/include/boost/math/policies/policy.hpp	/^struct policy$/;"	s	namespace:boost::math::policies
policy	/usr/include/boost/math/policies/policy.hpp	/^struct policy<default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy>$/;"	s	namespace:boost::math::policies
policy	/usr/include/boost/math/policies/policy.hpp	/^struct policy<detail::forwarding_arg1, detail::forwarding_arg2, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy, default_policy>$/;"	s	namespace:boost::math::policies
policy_type	/usr/include/boost/math/distributions/bernoulli.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::bernoulli_distribution	access:public
policy_type	/usr/include/boost/math/distributions/beta.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::beta_distribution	access:public
policy_type	/usr/include/boost/math/distributions/binomial.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::binomial_distribution	access:public
policy_type	/usr/include/boost/math/distributions/cauchy.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::cauchy_distribution	access:public
policy_type	/usr/include/boost/math/distributions/chi_squared.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::chi_squared_distribution	access:public
policy_type	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   typedef typename Dist::policy_type policy_type;$/;"	t	struct:boost::math::detail::generic_quantile_finder	access:public
policy_type	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   typedef typename Dist::policy_type policy_type;$/;"	t	struct:boost::math::detail::distribution_quantile_finder	access:public
policy_type	/usr/include/boost/math/distributions/exponential.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::exponential_distribution	access:public
policy_type	/usr/include/boost/math/distributions/extreme_value.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::extreme_value_distribution	access:public
policy_type	/usr/include/boost/math/distributions/fisher_f.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::fisher_f_distribution	access:public
policy_type	/usr/include/boost/math/distributions/gamma.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::gamma_distribution	access:public
policy_type	/usr/include/boost/math/distributions/geometric.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::geometric_distribution	access:public
policy_type	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::hypergeometric_distribution	access:public
policy_type	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::inverse_chi_squared_distribution	access:public
policy_type	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::inverse_gamma_distribution	access:public
policy_type	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::inverse_gaussian_distribution	access:public
policy_type	/usr/include/boost/math/distributions/laplace.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::laplace_distribution	access:public
policy_type	/usr/include/boost/math/distributions/logistic.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::logistic_distribution	access:public
policy_type	/usr/include/boost/math/distributions/lognormal.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::lognormal_distribution	access:public
policy_type	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::negative_binomial_distribution	access:public
policy_type	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         typedef Policy policy_type;$/;"	t	class:boost::math::non_central_beta_distribution	access:public
policy_type	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         typedef Policy policy_type;$/;"	t	class:boost::math::non_central_chi_squared_distribution	access:public
policy_type	/usr/include/boost/math/distributions/non_central_f.hpp	/^         typedef Policy policy_type;$/;"	t	class:boost::math::non_central_f_distribution	access:public
policy_type	/usr/include/boost/math/distributions/non_central_t.hpp	/^         typedef Policy policy_type;$/;"	t	class:boost::math::non_central_t_distribution	access:public
policy_type	/usr/include/boost/math/distributions/normal.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::normal_distribution	access:public
policy_type	/usr/include/boost/math/distributions/pareto.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::pareto_distribution	access:public
policy_type	/usr/include/boost/math/distributions/poisson.hpp	/^      typedef Policy policy_type;$/;"	t	class:boost::math::poisson_distribution	access:public
policy_type	/usr/include/boost/math/distributions/rayleigh.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::rayleigh_distribution	access:public
policy_type	/usr/include/boost/math/distributions/skew_normal.hpp	/^    typedef Policy policy_type;$/;"	t	class:boost::math::skew_normal_distribution	access:public
policy_type	/usr/include/boost/math/distributions/students_t.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::students_t_distribution	access:public
policy_type	/usr/include/boost/math/distributions/triangular.hpp	/^    typedef Policy policy_type;$/;"	t	class:boost::math::triangular_distribution	access:public
policy_type	/usr/include/boost/math/distributions/uniform.hpp	/^    typedef Policy policy_type;$/;"	t	class:boost::math::uniform_distribution	access:public
policy_type	/usr/include/boost/math/distributions/weibull.hpp	/^   typedef Policy policy_type;$/;"	t	class:boost::math::weibull_distribution	access:public
polynomial	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial(){}$/;"	f	class:boost::math::tools::polynomial	access:public	signature:()
polynomial	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial(const U& point)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const U& point)
polynomial	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial(const U* data, unsigned order)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const U* data, unsigned order)
polynomial	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial(const polynomial& p)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const polynomial& p)
polynomial	/usr/include/boost/math/tools/polynomial.hpp	/^   polynomial(const polynomial<U>& p)$/;"	f	class:boost::math::tools::polynomial	access:public	signature:(const polynomial<U>& p)
polynomial	/usr/include/boost/math/tools/polynomial.hpp	/^class polynomial$/;"	c	namespace:boost::math::tools
polynomial_to_chebyshev	/usr/include/boost/math/tools/polynomial.hpp	/^Seq polynomial_to_chebyshev(const Seq& s)$/;"	f	namespace:boost::math::tools	signature:(const Seq& s)
positive_nan	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> static ValType positive_nan()$/;"	f	class:boost::math::nonfinite_num_get	access:private	signature:()
positive_power	/usr/include/boost/math/special_functions/pow.hpp	/^struct positive_power$/;"	s	namespace:boost::math::detail
positive_power	/usr/include/boost/math/special_functions/pow.hpp	/^struct positive_power<1, 1>$/;"	s	namespace:boost::math::detail
positive_power	/usr/include/boost/math/special_functions/pow.hpp	/^struct positive_power<N, 1>$/;"	s	namespace:boost::math::detail
pow	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float pow(const e_float& v, const e_float& w)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, const e_float& w)
pow	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float pow(const e_float& v, int i)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v, int i)
pow	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class pow(const mpfr_class& b, const mpfr_class e)$/;"	f	signature:(const mpfr_class& b, const mpfr_class e)
pow	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR pow(const RR& r, long l)$/;"	f	namespace:boost::math::ntl	signature:(const RR& r, long l)
pow	/usr/include/boost/math/bindings/rr.hpp	/^inline RR pow(RR a, RR b)$/;"	f	namespace:boost::math::ntl	signature:(RR a, RR b)
pow	/usr/include/boost/math/bindings/rr.hpp	/^inline RR pow(RR a, int b)$/;"	f	namespace:boost::math::ntl	signature:(RR a, int b)
pow	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept pow(real_concept a, int b)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, int b)
pow	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept pow(real_concept a, real_concept b)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a, real_concept b)
pow	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept pow(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept b)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept b)
pow	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept pow(boost::math::concepts::std_real_concept a, int b)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, int b)
pow	/usr/include/boost/math/octonion.hpp	/^        octonion<T>                                pow(octonion<T> const & o,$/;"	f	namespace:boost::math	signature:(octonion<T> const & o, int n)
pow	/usr/include/boost/math/quaternion.hpp	/^        quaternion<T>                            pow(quaternion<T> const & q,$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q, int n)
pow	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type pow(T base);$/;"	p	namespace:boost::math	signature:(T base)
pow	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type pow(T base, const Policy& policy);$/;"	p	namespace:boost::math	signature:(T base, const Policy& policy)
pow	/usr/include/boost/math/special_functions/pow.hpp	/^inline typename tools::promote_args<T>::type pow(T base)$/;"	f	namespace:boost::math	signature:(T base)
pow	/usr/include/boost/math/special_functions/pow.hpp	/^inline typename tools::promote_args<T>::type pow(T base, const Policy& policy)$/;"	f	namespace:boost::math	signature:(T base, const Policy& policy)
power_if_positive	/usr/include/boost/math/special_functions/pow.hpp	/^struct power_if_positive$/;"	s	namespace:boost::math::detail
power_if_positive	/usr/include/boost/math/special_functions/pow.hpp	/^struct power_if_positive<0, true>$/;"	s	namespace:boost::math::detail
power_if_positive	/usr/include/boost/math/special_functions/pow.hpp	/^struct power_if_positive<N, false>$/;"	s	namespace:boost::math::detail
power_series	/usr/include/boost/math/tools/test_data.hpp	/^   power_series = 2,$/;"	e	enum:boost::math::tools::parameter_type
powm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         powm1(const T1 a, const T2 z);$/;"	p	namespace:boost::math	signature:(const T1 a, const T2 z)
powm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         powm1(const T1 a, const T2 z, const Policy&);$/;"	p	namespace:boost::math	signature:(const T1 a, const T2 z, const Policy&)
powm1	/usr/include/boost/math/special_functions/powm1.hpp	/^   powm1(const T1 a, const T2 z)$/;"	f	namespace:boost::math	signature:(const T1 a, const T2 z)
powm1	/usr/include/boost/math/special_functions/powm1.hpp	/^   powm1(const T1 a, const T2 z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T1 a, const T2 z, const Policy& pol)
powm1_imp	/usr/include/boost/math/special_functions/powm1.hpp	/^inline T powm1_imp(const T a, const T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const T a, const T z, const Policy& pol)
precision	/usr/include/boost/math/bindings/e_float.hpp	/^struct precision< ::boost::math::ef::e_float, Policy>$/;"	s	namespace:boost::math::policies
precision	/usr/include/boost/math/bindings/rr.hpp	/^   static long precision()$/;"	f	class:boost::math::ntl::RR	access:public	signature:()
precision	/usr/include/boost/math/policies/policy.hpp	/^struct precision$/;"	s	namespace:boost::math::policies
precision	/usr/include/boost/math/policies/policy.hpp	/^struct precision$/;"	s	namespace:boost::math::policies::detail
precision	/usr/include/boost/math/policies/policy.hpp	/^struct precision<double, Policy>$/;"	s	namespace:boost::math::policies
precision	/usr/include/boost/math/policies/policy.hpp	/^struct precision<float, Policy>$/;"	s	namespace:boost::math::policies
precision	/usr/include/boost/math/policies/policy.hpp	/^struct precision<long double, Policy>$/;"	s	namespace:boost::math::policies
precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef BOOST_DEDUCED_TYPENAME size_to_precision<sizeof(T), ::boost::is_floating_point<T>::value>::type precision;$/;"	t	struct:boost::math::detail::fp_traits	access:public
precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef BOOST_DEDUCED_TYPENAME size_to_precision<sizeof(T), ::boost::is_floating_point<T>::value>::type precision;$/;"	t	struct:boost::math::detail::select_native	access:public
precision_type	/usr/include/boost/math/bindings/e_float.hpp	/^   typedef typename Policy::precision_type precision_type;$/;"	t	struct:boost::math::policies::precision	access:public
precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef detail::precision<digits10<>, digits2<> >::type precision_type;$/;"	t	struct:boost::math::policies::policy	access:public
precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef digits2<> precision_type;$/;"	t	struct:boost::math::policies::policy	access:public
precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename Policy::precision_type precision_type;$/;"	t	struct:boost::math::policies::precision	access:public
precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::precision<digits10_type, bits_precision_type>::type precision_type;$/;"	t	struct:boost::math::policies::normalise	access:private
precision_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::precision<digits10_type, bits_precision_type>::type precision_type;$/;"	t	struct:boost::math::policies::policy	access:public
precision_type	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^   typedef typename policies::precision<T, Policy>::type precision_type;$/;"	t	struct:boost::math::detail::bessel_asymptotic_tag	access:public
precision_type	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         typedef typename policies::precision<result_type, Policy>::type precision_type;$/;"	t	struct:boost::math::detail::bessel_traits	access:public
prime	/usr/include/boost/math/special_functions/prime.hpp	/^   boost::uint32_t prime(unsigned n, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, const Policy& pol)
prime	/usr/include/boost/math/special_functions/prime.hpp	/^   inline boost::uint32_t prime(unsigned n)$/;"	f	namespace:boost::math	signature:(unsigned n)
prime_index	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   unsigned prime_index;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_data	access:public
print_constant	/usr/include/boost/math/constants/generate.hpp	/^inline void print_constant(const char* name, generator_type(*f)(const mpl::int_<0>&))$/;"	f	namespace:boost::math::constants	signature:(const char* name, generator_type(*f)(const mpl::int_<0>&))
print_info_on_type	/usr/include/boost/math/constants/info.hpp	/^void print_info_on_type(std::ostream& os = std::cout BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(T) BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(Policy))$/;"	f	namespace:boost::math::constants	signature:(std::ostream& os = std::cout BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(T) BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(Policy))
print_info_on_type	/usr/include/boost/math/constants/info.hpp	/^void print_info_on_type(std::ostream& os = std::cout BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(T))$/;"	f	namespace:boost::math::constants	signature:(std::ostream& os = std::cout BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(T))
print_row	/usr/include/boost/math/tools/test.hpp	/^void print_row(const Seq& row)$/;"	f	namespace:boost::math::tools	signature:(const Seq& row)
prob	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  RealType prob; $/;"	m	struct:boost::math::inverse_gaussian_quantile_complement_functor	access:private
prob	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^  RealType prob; $/;"	m	struct:boost::math::inverse_gaussian_quantile_functor	access:private
prob	/usr/include/boost/math/distributions/skew_normal.hpp	/^      RealType prob; $/;"	m	struct:boost::math::detail::skew_normal_quantile_functor	access:private
promote_arg	/usr/include/boost/math/bindings/mpfr.hpp	/^struct promote_arg<__gmp_expr<T,U> >$/;"	s	namespace:boost::math::tools
promote_arg	/usr/include/boost/math/tools/promotion.hpp	/^      struct promote_arg$/;"	s	namespace:boost::math::tools
promote_arg	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<double>{ typedef double type; };$/;"	s	namespace:boost::math::tools
promote_arg	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<float> { typedef float type; };$/;"	s	namespace:boost::math::tools
promote_arg	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<int> {  typedef double type; };$/;"	s	namespace:boost::math::tools
promote_arg	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<long double> { typedef long double type; };$/;"	s	namespace:boost::math::tools
promote_args	/usr/include/boost/math/tools/promotion.hpp	/^      struct promote_args$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      struct promote_args_2$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, double>{ typedef double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, float> {  typedef double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, int> {  typedef double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, long double> {  typedef long double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, double> {  typedef double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, float> { typedef float type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, int> {  typedef double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, long double> {  typedef long double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, double> {  typedef double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, float> {  typedef double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, int> {  typedef double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, long double> {  typedef long double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, double> {  typedef long double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, float> {  typedef long double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, int> {  typedef long double type; };$/;"	s	namespace:boost::math::tools
promote_args_2	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, long double> { typedef long double type; };$/;"	s	namespace:boost::math::tools
promote_double_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_double<> promote_double_type;$/;"	t	struct:boost::math::policies::policy	access:public
promote_double_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_double<false> promote_double_type;$/;"	t	struct:boost::math::policies::policy	access:public
promote_double_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_promote_double<mpl::_1>, promote_double<> >::type promote_double_type;$/;"	t	struct:boost::math::policies::policy	access:public
promote_double_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_promote_double<mpl::_1>, typename Policy::promote_double_type >::type promote_double_type;$/;"	t	struct:boost::math::policies::normalise	access:private
promote_float_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_float<> promote_float_type;$/;"	t	struct:boost::math::policies::policy	access:public
promote_float_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef promote_float<false> promote_float_type;$/;"	t	struct:boost::math::policies::policy	access:public
promote_float_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_promote_float<mpl::_1>, promote_float<> >::type promote_float_type;$/;"	t	struct:boost::math::policies::policy	access:public
promote_float_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_promote_float<mpl::_1>, typename Policy::promote_float_type >::type promote_float_type;$/;"	t	struct:boost::math::policies::normalise	access:private
put_and_reset_width	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void put_and_reset_width($/;"	f	class:boost::math::nonfinite_num_put	access:private	signature:( OutputIterator& it, std::ios_base& iosb, CharType fill, ValType val) const
put_fill	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      void put_fill($/;"	f	class:boost::math::nonfinite_num_put	access:private	signature:( OutputIterator& it, std::ios_base& iosb, CharType fill, int width) const
put_impl	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      template<class ValType> void put_impl($/;"	f	class:boost::math::nonfinite_num_put	access:private	signature:( OutputIterator& it, std::ios_base& iosb, CharType fill, ValType val) const
put_num_and_fill	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^      void put_num_and_fill($/;"	f	class:boost::math::nonfinite_num_put	access:private	signature:( OutputIterator& it, std::ios_base& iosb, const CharType* prefix, const CharType* body, CharType fill, ValType val) const
quadratic_interpolate	/usr/include/boost/math/tools/toms748_solve.hpp	/^T quadratic_interpolate(const T& a, const T& b, T const& d,$/;"	f	namespace:boost::math::tools::detail	signature:(const T& a, const T& b, T const& d, const T& fa, const T& fb, T const& fd, unsigned count)
quantile	/usr/include/boost/math/concepts/distributions.hpp	/^RealType quantile(const complemented2_type<distribution_archetype<RealType>, RealType>& c);$/;"	p	namespace:boost::math::concepts	signature:(const complemented2_type<distribution_archetype<RealType>, RealType>& c)
quantile	/usr/include/boost/math/concepts/distributions.hpp	/^RealType quantile(const distribution_archetype<RealType>& dist, const RealType& p);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType quantile(const bernoulli_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType quantile(const complemented2_type<bernoulli_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<bernoulli_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType quantile(const beta_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType quantile(const complemented2_type<beta_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<beta_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/binomial.hpp	/^      RealType quantile(const complemented2_type<binomial_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<binomial_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType quantile(const binomial_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType quantile(const cauchy_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType quantile(const complemented2_type<cauchy_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<cauchy_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType quantile(const chi_squared_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType quantile(const complemented2_type<chi_squared_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<chi_squared_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type quantile(const Distribution& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const Distribution& dist, const RealType& x)
quantile	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type quantile(const complemented2_type<Distribution, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<Distribution, RealType>& c)
quantile	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType quantile(const complemented2_type<exponential_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<exponential_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType quantile(const exponential_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/extreme_value.hpp	/^RealType quantile(const complemented2_type<extreme_value_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<extreme_value_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/extreme_value.hpp	/^RealType quantile(const extreme_value_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType quantile(const complemented2_type<fisher_f_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<fisher_f_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType quantile(const fisher_f_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType quantile(const complemented2_type<gamma_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<gamma_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType quantile(const gamma_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType quantile(const complemented2_type<geometric_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<geometric_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType quantile(const geometric_distribution<RealType, Policy>& dist, const RealType& x)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist, const RealType& x)
quantile	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType quantile(const complemented2_type<hypergeometric_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<hypergeometric_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType quantile(const hypergeometric_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType quantile(const complemented2_type<inverse_chi_squared_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<inverse_chi_squared_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType quantile(const inverse_chi_squared_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType quantile(const complemented2_type<inverse_gamma_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<inverse_gamma_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType quantile(const inverse_gamma_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType quantile(const complemented2_type<inverse_gaussian_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<inverse_gaussian_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType quantile(const inverse_gaussian_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType quantile(const complemented2_type<laplace_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<laplace_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType quantile(const laplace_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType quantile(const complemented2_type<logistic_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<logistic_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType quantile(const logistic_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType quantile(const complemented2_type<lognormal_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<lognormal_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType quantile(const lognormal_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType quantile(const complemented2_type<negative_binomial_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<negative_binomial_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType quantile(const negative_binomial_distribution<RealType, Policy>& dist, const RealType& P)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist, const RealType& P)
quantile	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType quantile(const complemented2_type<non_central_beta_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_beta_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType quantile(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType quantile(const complemented2_type<non_central_chi_squared_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_chi_squared_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType quantile(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType quantile(const complemented2_type<non_central_f_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_f_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType quantile(const non_central_f_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType quantile(const complemented2_type<non_central_t_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<non_central_t_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType quantile(const non_central_t_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType quantile(const complemented2_type<normal_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<normal_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType quantile(const normal_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType quantile(const complemented2_type<pareto_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<pareto_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType quantile(const pareto_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType quantile(const complemented2_type<poisson_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<poisson_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType quantile(const poisson_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType quantile(const complemented2_type<rayleigh_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<rayleigh_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType quantile(const rayleigh_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType quantile(const complemented2_type<skew_normal_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<skew_normal_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType quantile(const skew_normal_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType quantile(const complemented2_type<students_t_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<students_t_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType quantile(const students_t_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/triangular.hpp	/^  RealType quantile(const complemented2_type<triangular_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<triangular_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/triangular.hpp	/^  RealType quantile(const triangular_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType quantile(const complemented2_type<uniform_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<uniform_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType quantile(const uniform_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType quantile(const complemented2_type<weibull_distribution<RealType, Policy>, RealType>& c)$/;"	f	namespace:boost::math	signature:(const complemented2_type<weibull_distribution<RealType, Policy>, RealType>& c)
quantile	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType quantile(const weibull_distribution<RealType, Policy>& dist, const RealType& p)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist, const RealType& p)
quantile	/usr/include/boost/math/tools/traits.hpp	/^char quantile(const D& ...);$/;"	p	namespace:boost::math::tools::detail	signature:(const D& ....)
quantile_imp	/usr/include/boost/math/distributions/binomial.hpp	/^      RealType quantile_imp(const binomial_distribution<RealType, Policy>& dist, const RealType& p, const RealType& q)$/;"	f	namespace:boost::math::binomial_detail	signature:(const binomial_distribution<RealType, Policy>& dist, const RealType& p, const RealType& q)
quantile_imp	/usr/include/boost/math/distributions/cauchy.hpp	/^RealType quantile_imp($/;"	f	namespace:boost::math::detail	signature:( const cauchy_distribution<RealType, Policy>& dist, const RealType& p, bool complement)
quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit                    quaternion(quaternion<double> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<double> const & a_recopier)
quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit                    quaternion(quaternion<float> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<float> const & a_recopier)
quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit                quaternion(quaternion<float> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<float> const & a_recopier)
quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit                quaternion(quaternion<long double> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<long double> const & a_recopier)
quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit            quaternion( ::std::complex<T> const & z0,$/;"	f	class:boost::math::quaternion	access:public	signature:( ::std::complex<T> const & z0, ::std::complex<T> const & z1 = ::std::complex<T>())
quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit            quaternion( T const & requested_a = T(),$/;"	f	class:boost::math::quaternion	access:public	signature:( T const & requested_a = T(), T const & requested_b = T(), T const & requested_c = T(), T const & requested_d = T())
quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit            quaternion(quaternion<X> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<X> const & a_recopier)
quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit            quaternion(quaternion<double> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<double> const & a_recopier)
quaternion	/usr/include/boost/math/quaternion.hpp	/^            explicit            quaternion(quaternion<long double> const & a_recopier)$/;"	f	class:boost::math::quaternion	access:public	signature:(quaternion<long double> const & a_recopier)
quaternion	/usr/include/boost/math/quaternion.hpp	/^        class quaternion$/;"	c	namespace:boost::math
quaternion	/usr/include/boost/math/quaternion.hpp	/^        class quaternion<double>$/;"	c	namespace:boost::math
quaternion	/usr/include/boost/math/quaternion.hpp	/^        class quaternion<float>$/;"	c	namespace:boost::math
quaternion	/usr/include/boost/math/quaternion.hpp	/^        class quaternion<long double>$/;"	c	namespace:boost::math
quaternion_type_converter	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T>    quaternion_type_converter(quaternion<U> const & rhs)$/;"	f	namespace:boost::math::detail	signature:(quaternion<U> const & rhs)
quaternion_type_converter	/usr/include/boost/math/quaternion.hpp	/^            quaternion<T>    quaternion_type_converter(quaternion<U> const & rhs);$/;"	p	namespace:boost::math::detail	signature:(quaternion<U> const & rhs)
quiet_NaN	/usr/include/boost/math/bindings/e_float.hpp	/^      static const ::boost::math::ef::e_float quiet_NaN (void)$/;"	f	class:std::numeric_limits	access:public	signature:(void)
r	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   const unsigned r;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_data	access:public
raise_denorm_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_denorm_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& val, const ::boost::math::policies::denorm_error< ::boost::math::policies::errno_on_error>&)
raise_denorm_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_denorm_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& val, const ::boost::math::policies::denorm_error< ::boost::math::policies::ignore_error>&)
raise_denorm_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_denorm_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& , const ::boost::math::policies::denorm_error< ::boost::math::policies::throw_on_error>&)
raise_denorm_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_denorm_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::denorm_error< ::boost::math::policies::user_error>&)
raise_denorm_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_denorm_error(const char* function, const char* message, const T& val, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const Policy&)
raise_domain_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_domain_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& , const ::boost::math::policies::domain_error< ::boost::math::policies::errno_on_error>&)
raise_domain_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_domain_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& , const ::boost::math::policies::domain_error< ::boost::math::policies::ignore_error>&)
raise_domain_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_domain_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::domain_error< ::boost::math::policies::throw_on_error>&)
raise_domain_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_domain_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::domain_error< ::boost::math::policies::user_error>&)
raise_domain_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_domain_error(const char* function, const char* message, const T& val, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const Policy&)
raise_error	/usr/include/boost/math/policies/error_handling.hpp	/^void raise_error(const char* function, const char* message)$/;"	f	namespace:boost::math::policies::detail	signature:(const char* function, const char* message)
raise_error	/usr/include/boost/math/policies/error_handling.hpp	/^void raise_error(const char* function, const char* message, const T& val)$/;"	f	namespace:boost::math::policies::detail	signature:(const char* function, const char* message, const T& val)
raise_evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_evaluation_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& val, const ::boost::math::policies::evaluation_error< ::boost::math::policies::errno_on_error>&)
raise_evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_evaluation_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& val, const ::boost::math::policies::evaluation_error< ::boost::math::policies::ignore_error>&)
raise_evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_evaluation_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::evaluation_error< ::boost::math::policies::throw_on_error>&)
raise_evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_evaluation_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::evaluation_error< ::boost::math::policies::user_error>&)
raise_evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_evaluation_error(const char* function, const char* message, const T& val, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const Policy&)
raise_indeterminate_result_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_indeterminate_result_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& , const R& result, const ::boost::math::policies::indeterminate_result_error< ::boost::math::policies::errno_on_error>&)
raise_indeterminate_result_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_indeterminate_result_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& , const R& result, const ::boost::math::policies::indeterminate_result_error< ::boost::math::policies::ignore_error>&)
raise_indeterminate_result_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_indeterminate_result_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const R& , const ::boost::math::policies::indeterminate_result_error< ::boost::math::policies::throw_on_error>&)
raise_indeterminate_result_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_indeterminate_result_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const R& , const ::boost::math::policies::indeterminate_result_error< ::boost::math::policies::user_error>&)
raise_indeterminate_result_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_indeterminate_result_error(const char* function, const char* message, const T& val, const R& result, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const R& result, const Policy&)
raise_overflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_overflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const ::boost::math::policies::overflow_error< ::boost::math::policies::errno_on_error>&)
raise_overflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_overflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const ::boost::math::policies::overflow_error< ::boost::math::policies::ignore_error>&)
raise_overflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_overflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const ::boost::math::policies::overflow_error< ::boost::math::policies::throw_on_error>&)
raise_overflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_overflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const ::boost::math::policies::overflow_error< ::boost::math::policies::user_error>&)
raise_overflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_overflow_error(const char* function, const char* message, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const Policy&)
raise_pole_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_pole_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::pole_error< ::boost::math::policies::errno_on_error>&)
raise_pole_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_pole_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::pole_error< ::boost::math::policies::ignore_error>&)
raise_pole_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_pole_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::pole_error< ::boost::math::policies::throw_on_error>&)
raise_pole_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_pole_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const ::boost::math::policies::pole_error< ::boost::math::policies::user_error>&)
raise_pole_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_pole_error(const char* function, const char* message, const T& val, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const Policy&)
raise_rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_rounding_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& val, const TargetType&, const ::boost::math::policies::rounding_error< ::boost::math::policies::errno_on_error>&)
raise_rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_rounding_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const T& val, const TargetType&, const ::boost::math::policies::rounding_error< ::boost::math::policies::ignore_error>&)
raise_rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_rounding_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const TargetType& t, const ::boost::math::policies::rounding_error< ::boost::math::policies::user_error>&)
raise_rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_rounding_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const T& val, const TargetType&, const ::boost::math::policies::rounding_error< ::boost::math::policies::throw_on_error>&)
raise_rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_rounding_error(const char* function, const char* message, const T& val, const TargetType& t, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const TargetType& t, const Policy&)
raise_underflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_underflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const ::boost::math::policies::underflow_error< ::boost::math::policies::errno_on_error>&)
raise_underflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_underflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* , const char* , const ::boost::math::policies::underflow_error< ::boost::math::policies::ignore_error>&)
raise_underflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_underflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const ::boost::math::policies::underflow_error< ::boost::math::policies::throw_on_error>&)
raise_underflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_underflow_error($/;"	f	namespace:boost::math::policies::detail	signature:( const char* function, const char* message, const ::boost::math::policies::underflow_error< ::boost::math::policies::user_error>&)
raise_underflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^inline T raise_underflow_error(const char* function, const char* message, const Policy&)$/;"	f	namespace:boost::math::policies	signature:(const char* function, const char* message, const Policy&)
random_in_range	/usr/include/boost/math/tools/test_data.hpp	/^   random_in_range = 0,$/;"	e	enum:boost::math::tools::parameter_type
range	/usr/include/boost/math/concepts/distributions.hpp	/^std::pair<RealType, RealType> range(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
range	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline const std::pair<RealType, RealType> range(const bernoulli_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/beta.hpp	/^    inline const std::pair<RealType, RealType> range(const beta_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/binomial.hpp	/^      const std::pair<RealType, RealType> range(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
range	/usr/include/boost/math/distributions/cauchy.hpp	/^inline const std::pair<RealType, RealType> range(const cauchy_distribution<RealType, Policy>&)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>&)
range	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline const std::pair<RealType, RealType> range(const chi_squared_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/exponential.hpp	/^inline const std::pair<RealType, RealType> range(const exponential_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline const std::pair<RealType, RealType> range(const extreme_value_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline const std::pair<RealType, RealType> range(const fisher_f_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/gamma.hpp	/^inline const std::pair<RealType, RealType> range(const gamma_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/geometric.hpp	/^    inline const std::pair<RealType, RealType> range(const geometric_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline const std::pair<unsigned, unsigned> range(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
range	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline const std::pair<RealType, RealType> range(const inverse_chi_squared_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline const std::pair<RealType, RealType> range(const inverse_gamma_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline const std::pair<RealType, RealType> range(const inverse_gaussian_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/laplace.hpp	/^inline const std::pair<RealType, RealType> range(const laplace_distribution<RealType, Policy>&)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>&)
range	/usr/include/boost/math/distributions/logistic.hpp	/^    inline const std::pair<RealType, RealType> range(const logistic_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/lognormal.hpp	/^inline const std::pair<RealType, RealType> range(const lognormal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline const std::pair<RealType, RealType> range(const negative_binomial_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline const std::pair<RealType, RealType> range(const non_central_beta_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline const std::pair<RealType, RealType> range(const non_central_chi_squared_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline const std::pair<RealType, RealType> range(const non_central_f_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline const std::pair<RealType, RealType> range(const non_central_t_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/normal.hpp	/^inline const std::pair<RealType, RealType> range(const normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/pareto.hpp	/^    inline const std::pair<RealType, RealType> range(const pareto_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/poisson.hpp	/^    inline const std::pair<RealType, RealType> range(const poisson_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline const std::pair<RealType, RealType> range(const rayleigh_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline const std::pair<RealType, RealType> range(const skew_normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/students_t.hpp	/^inline const std::pair<RealType, RealType> range(const students_t_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/triangular.hpp	/^  inline const std::pair<RealType, RealType> range(const triangular_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/uniform.hpp	/^  inline const std::pair<RealType, RealType> range(const uniform_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& )
range	/usr/include/boost/math/distributions/weibull.hpp	/^inline const std::pair<RealType, RealType> range(const weibull_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& )
ratio	/usr/include/boost/math/distributions/chi_squared.hpp	/^   RealType ratio; \/\/ Difference from variance \/ variance, so fractional.$/;"	m	struct:boost::math::detail::df_estimator	access:private
ratio	/usr/include/boost/math/distributions/students_t.hpp	/^   RealType alpha, beta, ratio;$/;"	m	struct:boost::math::detail::sample_size_func	access:public
rayleigh	/usr/include/boost/math/distributions/rayleigh.hpp	/^typedef rayleigh_distribution<double> rayleigh;$/;"	t	namespace:boost::math
rayleigh_distribution	/usr/include/boost/math/distributions/rayleigh.hpp	/^   rayleigh_distribution(RealType sigma = 1)$/;"	f	class:boost::math::rayleigh_distribution	access:public	signature:(RealType sigma = 1)
rayleigh_distribution	/usr/include/boost/math/distributions/rayleigh.hpp	/^class rayleigh_distribution$/;"	c	namespace:boost::math
real	/usr/include/boost/math/octonion.hpp	/^        inline T                                real(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
real	/usr/include/boost/math/policies/policy.hpp	/^   real,$/;"	e	enum:boost::math::policies::discrete_quantile_policy_type
real	/usr/include/boost/math/quaternion.hpp	/^        inline T                                real(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline double real_cast<double, mpfr_class>(mpfr_class t)$/;"	f	namespace:boost::math::tools	signature:(mpfr_class t)
real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline float real_cast<float, mpfr_class>(mpfr_class t)$/;"	f	namespace:boost::math::tools	signature:(mpfr_class t)
real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline int real_cast<int, mpfr_class>(mpfr_class t)$/;"	f	namespace:boost::math::tools	signature:(mpfr_class t)
real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline long long real_cast<long long, mpfr_class>(mpfr_class t)$/;"	f	namespace:boost::math::tools	signature:(mpfr_class t)
real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline long real_cast<long, mpfr_class>(mpfr_class t)$/;"	f	namespace:boost::math::tools	signature:(mpfr_class t)
real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class real_cast<mpfr_class, long long>(long long t)$/;"	f	namespace:boost::math::tools	signature:(long long t)
real_cast	/usr/include/boost/math/bindings/mpfr.hpp	/^inline unsigned real_cast<unsigned, mpfr_class>(mpfr_class t)$/;"	f	namespace:boost::math::tools	signature:(mpfr_class t)
real_cast	/usr/include/boost/math/bindings/mpreal.hpp	/^inline long long real_cast<long long, mpfr::mpreal>(mpfr::mpreal t)$/;"	f	namespace:boost::math::tools	signature:(mpfr::mpreal t)
real_cast	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal real_cast<mpfr::mpreal, long long>(long long t)$/;"	f	namespace:boost::math::tools	signature:(long long t)
real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline boost::math::ntl::RR real_cast<boost::math::ntl::RR, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline double real_cast<double, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline float real_cast<float, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline int real_cast<int, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline long double real_cast<long double, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline long long real_cast<long long, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline long real_cast<long, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
real_cast	/usr/include/boost/math/bindings/rr.hpp	/^inline unsigned real_cast<unsigned, boost::math::ntl::RR>(boost::math::ntl::RR t)$/;"	f	namespace:boost::math::tools	signature:(boost::math::ntl::RR t)
real_cast	/usr/include/boost/math/concepts/real_concept.hpp	/^inline double real_cast<double, concepts::real_concept>(concepts::real_concept r)$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept r)
real_cast	/usr/include/boost/math/concepts/real_concept.hpp	/^inline float real_cast<float, concepts::real_concept>(concepts::real_concept r)$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept r)
real_cast	/usr/include/boost/math/concepts/real_concept.hpp	/^inline int real_cast<int, concepts::real_concept>(concepts::real_concept r)$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept r)
real_cast	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long double real_cast<long double, concepts::real_concept>(concepts::real_concept r)$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept r)
real_cast	/usr/include/boost/math/concepts/real_concept.hpp	/^inline long real_cast<long, concepts::real_concept>(concepts::real_concept r)$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept r)
real_cast	/usr/include/boost/math/concepts/real_concept.hpp	/^inline unsigned int real_cast<unsigned int, concepts::real_concept>(concepts::real_concept r)$/;"	f	namespace:boost::math::tools	signature:(concepts::real_concept r)
real_cast	/usr/include/boost/math/tools/real_cast.hpp	/^    inline To real_cast(T t)$/;"	f	namespace:boost::math::tools	signature:(T t)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept() : m_value(0){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:()
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(__int64 c) : m_value(static_cast<real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(__int64 c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(boost::long_long_type c) : m_value(static_cast<real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(boost::long_long_type c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(boost::ulong_long_type c) : m_value(static_cast<real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(boost::ulong_long_type c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(char c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(char c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(double c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(double c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(float c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(float c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(int c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(int c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(long c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(long c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(long double c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(long double c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(long long c) : m_value(static_cast<real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(long long c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(short c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(short c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(signed char c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(signed char c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(unsigned __int64 c) : m_value(static_cast<real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned __int64 c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(unsigned char c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned char c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(unsigned int c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned int c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(unsigned long c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned long c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(unsigned long long c) : m_value(static_cast<real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned long long c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(unsigned short c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(unsigned short c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept(wchar_t c) : m_value(c){}$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:(wchar_t c)
real_concept	/usr/include/boost/math/concepts/real_concept.hpp	/^class real_concept$/;"	c	namespace:boost::math::concepts
real_concept_base_type	/usr/include/boost/math/concepts/real_concept.hpp	/^   typedef double real_concept_base_type;$/;"	t	namespace:boost::math::concepts
reduced_list	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::remove_if<result_list, detail::is_default_policy<mpl::_> >::type reduced_list;$/;"	t	struct:boost::math::policies::normalise	access:private
reference	/usr/include/boost/math/tools/test_data.hpp	/^   typedef typename container_type::reference reference;$/;"	t	class:boost::math::tools::test_data	access:public
regularised_gamma_prefix	/usr/include/boost/math/special_functions/gamma.hpp	/^T regularised_gamma_prefix(T a, T z, const Policy& pol, const Lanczos& l)$/;"	f	namespace:boost::math::detail	signature:(T a, T z, const Policy& pol, const Lanczos& l)
regularised_gamma_prefix	/usr/include/boost/math/special_functions/gamma.hpp	/^T regularised_gamma_prefix(T a, T z, const Policy& pol, const lanczos::undefined_lanczos&)$/;"	f	namespace:boost::math::detail	signature:(T a, T z, const Policy& pol, const lanczos::undefined_lanczos&)
rel_error	/usr/include/boost/math/tools/remez.hpp	/^   bool rel_error;                \/\/ If true optimise for relative not absolute error.$/;"	m	class:boost::math::tools::remez_minimax	access:private
rel_error	/usr/include/boost/math/tools/remez.hpp	/^   bool rel_error;$/;"	m	struct:boost::math::tools::detail::remez_error_function	access:private
relative_error	/usr/include/boost/math/tools/test.hpp	/^T relative_error(T a, T b)$/;"	f	namespace:boost::math::tools	signature:(T a, T b)
relative_error	/usr/include/boost/math/tools/test.hpp	/^inline double relative_error<double>(double a, double b)$/;"	f	namespace:boost::math::tools	signature:(double a, double b)
remez_error_function	/usr/include/boost/math/tools/remez.hpp	/^   remez_error_function($/;"	f	struct:boost::math::tools::detail::remez_error_function	access:public	signature:( function_type f_, const polynomial<T>& n, const polynomial<T>& d, bool rel_err)
remez_error_function	/usr/include/boost/math/tools/remez.hpp	/^struct remez_error_function$/;"	s	namespace:boost::math::tools::detail
remez_max_error_function	/usr/include/boost/math/tools/remez.hpp	/^   remez_max_error_function(const remez_error_function<T>& f)$/;"	f	struct:boost::math::tools::detail::remez_max_error_function	access:public	signature:(const remez_error_function<T>& f)
remez_max_error_function	/usr/include/boost/math/tools/remez.hpp	/^struct remez_max_error_function$/;"	s	namespace:boost::math::tools::detail
remez_minimax	/usr/include/boost/math/tools/remez.hpp	/^   remez_minimax(function_type f, unsigned oN, unsigned oD, T a, T b, bool pin = true, bool rel_err = false, int sk = 0, int bits = 0);$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:(function_type f, unsigned oN, unsigned oD, T a, T b, bool pin = true, bool rel_err = false, int sk = 0, int bits = 0)
remez_minimax	/usr/include/boost/math/tools/remez.hpp	/^   remez_minimax(function_type f, unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits, const vector_type& points);$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:(function_type f, unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits, const vector_type& points)
remez_minimax	/usr/include/boost/math/tools/remez.hpp	/^class remez_minimax$/;"	c	namespace:boost::math::tools
remez_minimax	/usr/include/boost/math/tools/remez.hpp	/^inline remez_minimax<T>::remez_minimax($/;"	f	class:boost::math::tools::remez_minimax	signature:( typename remez_minimax<T>::function_type f, unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits)
remez_minimax	/usr/include/boost/math/tools/remez.hpp	/^inline remez_minimax<T>::remez_minimax($/;"	f	class:boost::math::tools::remez_minimax	signature:( typename remez_minimax<T>::function_type f, unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits, const vector_type& points)
rescale	/usr/include/boost/math/tools/remez.hpp	/^   void rescale(T a, T b)$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:(T a, T b)
reset	/usr/include/boost/math/tools/remez.hpp	/^   void reset(unsigned oN, unsigned oD, T a, T b, bool pin = true, bool rel_err = false, int sk = 0, int bits = 0);$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:(unsigned oN, unsigned oD, T a, T b, bool pin = true, bool rel_err = false, int sk = 0, int bits = 0)
reset	/usr/include/boost/math/tools/remez.hpp	/^   void reset(unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits, const vector_type& points);$/;"	p	class:boost::math::tools::remez_minimax	access:public	signature:(unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits, const vector_type& points)
reset	/usr/include/boost/math/tools/remez.hpp	/^void remez_minimax<T>::reset($/;"	f	class:boost::math::tools::remez_minimax	signature:( unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits)
reset	/usr/include/boost/math/tools/remez.hpp	/^void remez_minimax<T>::reset($/;"	f	class:boost::math::tools::remez_minimax	signature:( unsigned oN, unsigned oD, T a, T b, bool pin, bool rel_err, int sk, int bits, const vector_type& points)
result	/usr/include/boost/math/special_functions/beta.hpp	/^   T result, x, apn, poch;$/;"	m	struct:boost::math::detail::ibeta_series_t	access:private
result	/usr/include/boost/math/special_functions/erf.hpp	/^   T result;$/;"	m	struct:boost::math::detail::erf_asympt_series_t	access:private
result	/usr/include/boost/math/special_functions/gamma.hpp	/^   T a, z, result;$/;"	m	struct:boost::math::detail::lower_incomplete_gamma_series	access:private
result	/usr/include/boost/math/special_functions/gamma.hpp	/^   T result, x, apn;$/;"	m	struct:boost::math::detail::small_gamma2_series	access:private
result	/usr/include/boost/math/special_functions/pow.hpp	/^    static T result(T base)$/;"	f	struct:boost::math::detail::positive_power	access:public	signature:(T base)
result	/usr/include/boost/math/special_functions/pow.hpp	/^    static T result(T base){ return base; }$/;"	f	struct:boost::math::detail::positive_power	access:public	signature:(T base)
result	/usr/include/boost/math/special_functions/pow.hpp	/^    static T result(T base, const Policy& policy)$/;"	f	struct:boost::math::detail::power_if_positive	access:public	signature:(T base, const Policy& policy)
result	/usr/include/boost/math/special_functions/pow.hpp	/^    static T result(T base, const Policy&)$/;"	f	struct:boost::math::detail::power_if_positive	access:public	signature:(T base, const Policy&)
result_list	/usr/include/boost/math/policies/policy.hpp	/^      max_root_iterations_type> result_list;$/;"	t	struct:boost::math::policies::normalise	access:private
result_tag	/usr/include/boost/math/tools/traits.hpp	/^struct result_tag{};$/;"	s	namespace:boost::math::tools::detail
result_type	/usr/include/boost/math/common_factor_rt.hpp	/^    typedef IntegerType  result_type, first_argument_type, second_argument_type;$/;"	t	class:boost::math::gcd_evaluator	access:public
result_type	/usr/include/boost/math/common_factor_rt.hpp	/^    typedef IntegerType  result_type, first_argument_type, second_argument_type;$/;"	t	class:boost::math::lcm_evaluator	access:public
result_type	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            typedef T result_type;$/;"	t	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
result_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::append_N<reduced_list, default_policy, (14 - ::boost::mpl::size<reduced_list>::value)>::type result_type;$/;"	t	struct:boost::math::policies::normalise	access:private
result_type	/usr/include/boost/math/special_functions/bessel.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:public
result_type	/usr/include/boost/math/special_functions/beta.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::ibeta_series_t	access:public
result_type	/usr/include/boost/math/special_functions/beta.hpp	/^   typedef std::pair<T, T> result_type;$/;"	t	struct:boost::math::detail::ibeta_fraction2_t	access:public
result_type	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::cyl_bessel_i_small_z	access:public
result_type	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::bessel_j_small_z_series_term	access:public
result_type	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:public
result_type	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:public
result_type	/usr/include/boost/math/special_functions/erf.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::erf_asympt_series_t	access:public
result_type	/usr/include/boost/math/special_functions/expint.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::expint_i_series	access:public
result_type	/usr/include/boost/math/special_functions/expint.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::expint_series	access:public
result_type	/usr/include/boost/math/special_functions/expint.hpp	/^   typedef std::pair<T,T> result_type;$/;"	t	struct:boost::math::detail::expint_fraction	access:public
result_type	/usr/include/boost/math/special_functions/expm1.hpp	/^     typedef T result_type;$/;"	t	struct:boost::math::detail::expm1_series	access:public
result_type	/usr/include/boost/math/special_functions/gamma.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::lower_incomplete_gamma_series	access:public
result_type	/usr/include/boost/math/special_functions/gamma.hpp	/^   typedef T result_type;$/;"	t	struct:boost::math::detail::small_gamma2_series	access:public
result_type	/usr/include/boost/math/special_functions/gamma.hpp	/^   typedef std::pair<T,T> result_type;$/;"	t	struct:boost::math::detail::upper_incomplete_gamma_fract	access:public
result_type	/usr/include/boost/math/special_functions/log1p.hpp	/^     typedef T result_type;$/;"	t	struct:boost::math::detail::log1p_series	access:public
result_type	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         >::type result_type;$/;"	t	struct:boost::math::detail::bessel_traits	access:public
result_type	/usr/include/boost/math/tools/fraction.hpp	/^       typedef typename Gen::result_type result_type;$/;"	t	struct:boost::math::tools::detail::fraction_traits_simple	access:public
result_type	/usr/include/boost/math/tools/fraction.hpp	/^       typedef typename value_type::first_type result_type;$/;"	t	struct:boost::math::tools::detail::fraction_traits_pair	access:public
riemann_zeta	/usr/include/boost/math/tr1_c_macros.ipp	755;"	d	file:
riemann_zeta	/usr/include/boost/math/tr1_c_macros.ipp	757;"	d	file:
riemann_zetaf	/usr/include/boost/math/tr1_c_macros.ipp	759;"	d	file:
riemann_zetaf	/usr/include/boost/math/tr1_c_macros.ipp	761;"	d	file:
riemann_zetal	/usr/include/boost/math/tr1_c_macros.ipp	763;"	d	file:
riemann_zetal	/usr/include/boost/math/tr1_c_macros.ipp	765;"	d	file:
rising_factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^   rising_factorial(RT x, int n)$/;"	f	namespace:boost::math	signature:(RT x, int n)
rising_factorial	/usr/include/boost/math/special_functions/factorials.hpp	/^   rising_factorial(RT x, int n, const Policy& pol)$/;"	f	namespace:boost::math	signature:(RT x, int n, const Policy& pol)
rising_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type rising_factorial(RT x, int n);$/;"	p	namespace:boost::math	signature:(RT x, int n)
rising_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type rising_factorial(RT x, int n, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT x, int n, const Policy& pol)
rising_factorial_imp	/usr/include/boost/math/special_functions/factorials.hpp	/^T rising_factorial_imp(T x, int n, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, int n, const Policy& pol)
rising_factorial_ratio	/usr/include/boost/math/special_functions/beta.hpp	/^inline T rising_factorial_ratio(T a, T b, int k)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, int k)
rms	/usr/include/boost/math/tools/stats.hpp	/^   T rms()const$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
rms	/usr/include/boost/math/tools/test.hpp	/^   T rms()const{ return stat.rms(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
root_epsilon	/usr/include/boost/math/tools/precision.hpp	/^inline T root_epsilon()$/;"	f	namespace:boost::math::tools	signature:()
root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T root_epsilon_imp(const T*, const Tag&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const Tag&)
root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T root_epsilon_imp(const T*, const mpl::int_<113>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<113>&)
root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T root_epsilon_imp(const T*, const mpl::int_<53>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<53>&)
root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T root_epsilon_imp(const T*, const mpl::int_<64>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const T*, const mpl::int_<64>&)
root_epsilon_imp	/usr/include/boost/math/tools/precision.hpp	/^inline T root_epsilon_imp(const mpl::int_<24>&)$/;"	f	namespace:boost::math::tools::detail	signature:(const mpl::int_<24>&)
rotate	/usr/include/boost/math/tools/remez.hpp	/^   void rotate()$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:()
round	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T round(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
round	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T round(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
round	/usr/include/boost/math/special_functions/round.hpp	/^inline T round(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
round	/usr/include/boost/math/special_functions/round.hpp	/^inline T round(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
round	/usr/include/boost/math/tr1_c_macros.ipp	416;"	d	file:
round	/usr/include/boost/math/tr1_c_macros.ipp	418;"	d	file:
round_error	/usr/include/boost/math/bindings/e_float.hpp	/^      static const ::boost::math::ef::e_float round_error(void)$/;"	f	class:std::numeric_limits	access:public	signature:(void)
round_x_from_p	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_p(unsigned x, T \/*p*\/, T \/*cum*\/, T \/*fudge_factor*\/, unsigned \/*lbound*\/, unsigned \/*ubound*\/, const policies::discrete_quantile<policies::integer_round_nearest>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T , T , T , unsigned , unsigned , const policies::discrete_quantile<policies::integer_round_nearest>&)
round_x_from_p	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_p(unsigned x, T p, T cum, T fudge_factor, unsigned \/*lbound*\/, unsigned ubound, const policies::discrete_quantile<policies::integer_round_up>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T p, T cum, T fudge_factor, unsigned , unsigned ubound, const policies::discrete_quantile<policies::integer_round_up>&)
round_x_from_p	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_p(unsigned x, T p, T cum, T fudge_factor, unsigned lbound, unsigned \/*ubound*\/, const policies::discrete_quantile<policies::integer_round_down>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T p, T cum, T fudge_factor, unsigned lbound, unsigned , const policies::discrete_quantile<policies::integer_round_down>&)
round_x_from_p	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_p(unsigned x, T p, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_inwards>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T p, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_inwards>&)
round_x_from_p	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_p(unsigned x, T p, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_outwards>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T p, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_outwards>&)
round_x_from_q	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_q(unsigned x, T \/*q*\/, T \/*cum*\/, T \/*fudge_factor*\/, unsigned \/*lbound*\/, unsigned \/*ubound*\/, const policies::discrete_quantile<policies::integer_round_nearest>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T , T , T , unsigned , unsigned , const policies::discrete_quantile<policies::integer_round_nearest>&)
round_x_from_q	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_q(unsigned x, T q, T cum, T fudge_factor, unsigned \/*lbound*\/, unsigned ubound, const policies::discrete_quantile<policies::integer_round_up>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T q, T cum, T fudge_factor, unsigned , unsigned ubound, const policies::discrete_quantile<policies::integer_round_up>&)
round_x_from_q	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_q(unsigned x, T q, T cum, T fudge_factor, unsigned lbound, unsigned \/*ubound*\/, const policies::discrete_quantile<policies::integer_round_down>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T q, T cum, T fudge_factor, unsigned lbound, unsigned , const policies::discrete_quantile<policies::integer_round_down>&)
round_x_from_q	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_q(unsigned x, T q, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_inwards>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T q, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_inwards>&)
round_x_from_q	/usr/include/boost/math/distributions/detail/hypergeometric_quantile.hpp	/^inline unsigned round_x_from_q(unsigned x, T q, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_outwards>&)$/;"	f	namespace:boost::math::detail	signature:(unsigned x, T q, T cum, T fudge_factor, unsigned lbound, unsigned ubound, const policies::discrete_quantile<policies::integer_round_outwards>&)
roundf	/usr/include/boost/math/tr1_c_macros.ipp	420;"	d	file:
roundf	/usr/include/boost/math/tr1_c_macros.ipp	422;"	d	file:
rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^   rounding_error(const std::string& s) : std::runtime_error(s){}$/;"	f	class:boost::math::rounding_error	access:public	signature:(const std::string& s)
rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^class rounding_error : public std::runtime_error$/;"	c	namespace:boost::math	inherits:std::runtime_error
rounding_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef rounding_error<> rounding_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
rounding_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_rounding_error<mpl::_1>, rounding_error<> >::type rounding_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
rounding_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_rounding_error<mpl::_1>, typename Policy::rounding_error_type >::type rounding_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
roundl	/usr/include/boost/math/tr1_c_macros.ipp	424;"	d	file:
roundl	/usr/include/boost/math/tr1_c_macros.ipp	426;"	d	file:
row_type	/usr/include/boost/math/tools/test.hpp	/^   typedef typename T::value_type row_type;$/;"	t	struct:boost::math::tools::calculate_result_type	access:public
row_type	/usr/include/boost/math/tools/test_data.hpp	/^   typedef std::vector<T> row_type;$/;"	t	class:boost::math::tools::test_data	access:public
safe_div	/usr/include/boost/math/tools/toms748_solve.hpp	/^inline T safe_div(T num, T denom, T r)$/;"	f	namespace:boost::math::tools::detail	signature:(T num, T denom, T r)
safe_max	/usr/include/boost/math/complex/details.hpp	/^inline T safe_max(T t)$/;"	f	namespace:boost::math::detail	signature:(T t)
safe_max	/usr/include/boost/math/complex/details.hpp	/^inline double safe_max(double t)$/;"	f	namespace:boost::math::detail	signature:(double t)
safe_max	/usr/include/boost/math/complex/details.hpp	/^inline float safe_max(float t)$/;"	f	namespace:boost::math::detail	signature:(float t)
safe_max	/usr/include/boost/math/complex/details.hpp	/^inline long double safe_max(long double t)$/;"	f	namespace:boost::math::detail	signature:(long double t)
safe_min	/usr/include/boost/math/complex/details.hpp	/^inline T safe_min(T t)$/;"	f	namespace:boost::math::detail	signature:(T t)
safe_min	/usr/include/boost/math/complex/details.hpp	/^inline double safe_min(double t)$/;"	f	namespace:boost::math::detail	signature:(double t)
safe_min	/usr/include/boost/math/complex/details.hpp	/^inline float safe_min(float t)$/;"	f	namespace:boost::math::detail	signature:(float t)
safe_min	/usr/include/boost/math/complex/details.hpp	/^inline long double safe_min(long double t)$/;"	f	namespace:boost::math::detail	signature:(long double t)
sample_count	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      unsigned sample_count()const$/;"	f	class:boost::math::hypergeometric_distribution	access:public	signature:() const
sample_size_func	/usr/include/boost/math/distributions/students_t.hpp	/^   sample_size_func(RealType a, RealType b, RealType s, RealType d)$/;"	f	struct:boost::math::detail::sample_size_func	access:public	signature:(RealType a, RealType b, RealType s, RealType d)
sample_size_func	/usr/include/boost/math/distributions/students_t.hpp	/^struct sample_size_func$/;"	s	namespace:boost::math::detail
scale	/usr/include/boost/math/distributions/cauchy.hpp	/^   RealType scale()const$/;"	f	class:boost::math::cauchy_distribution	access:public	signature:() const
scale	/usr/include/boost/math/distributions/extreme_value.hpp	/^   RealType scale()const { return m_b; }$/;"	f	class:boost::math::extreme_value_distribution	access:public	signature:() const
scale	/usr/include/boost/math/distributions/gamma.hpp	/^   RealType scale()const$/;"	f	class:boost::math::gamma_distribution	access:public	signature:() const
scale	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   RealType scale()const$/;"	f	class:boost::math::inverse_chi_squared_distribution	access:public	signature:() const
scale	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   RealType scale()const$/;"	f	class:boost::math::inverse_gamma_distribution	access:public	signature:() const
scale	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   RealType scale()const$/;"	f	class:boost::math::inverse_gaussian_distribution	access:public	signature:() const
scale	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType scale(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
scale	/usr/include/boost/math/distributions/laplace.hpp	/^   RealType scale() const$/;"	f	class:boost::math::laplace_distribution	access:public	signature:() const
scale	/usr/include/boost/math/distributions/logistic.hpp	/^      RealType scale()const$/;"	f	class:boost::math::logistic_distribution	access:public	signature:() const
scale	/usr/include/boost/math/distributions/lognormal.hpp	/^   RealType scale()const$/;"	f	class:boost::math::lognormal_distribution	access:public	signature:() const
scale	/usr/include/boost/math/distributions/normal.hpp	/^   RealType scale()const$/;"	f	class:boost::math::normal_distribution	access:public	signature:() const
scale	/usr/include/boost/math/distributions/pareto.hpp	/^      RealType scale()const$/;"	f	class:boost::math::pareto_distribution	access:public	signature:() const
scale	/usr/include/boost/math/distributions/skew_normal.hpp	/^    RealType scale()const$/;"	f	class:boost::math::skew_normal_distribution	access:public	signature:() const
scale	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType scale(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
scale	/usr/include/boost/math/distributions/weibull.hpp	/^   RealType scale()const$/;"	f	class:boost::math::weibull_distribution	access:public	signature:() const
scale_	/usr/include/boost/math/distributions/skew_normal.hpp	/^    RealType scale_;    \/\/ distribution scale.$/;"	m	class:boost::math::skew_normal_distribution	access:private
schroeder_iterate	/usr/include/boost/math/tools/roots.hpp	/^T schroeder_iterate(F f, T guess, T min, T max, int digits, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, T guess, T min, T max, int digits, boost::uintmax_t& max_iter)
schroeder_iterate	/usr/include/boost/math/tools/roots.hpp	/^inline T schroeder_iterate(F f, T guess, T min, T max, int digits)$/;"	f	namespace:boost::math::tools	signature:(F f, T guess, T min, T max, int digits)
secant_interpolate	/usr/include/boost/math/tools/toms748_solve.hpp	/^inline T secant_interpolate(const T& a, const T& b, const T& fa, const T& fb)$/;"	f	namespace:boost::math::tools::detail	signature:(const T& a, const T& b, const T& fa, const T& fb)
second_argument_type	/usr/include/boost/math/common_factor_rt.hpp	/^    typedef IntegerType  result_type, first_argument_type, second_argument_type;$/;"	t	class:boost::math::gcd_evaluator	access:public
second_argument_type	/usr/include/boost/math/common_factor_rt.hpp	/^    typedef IntegerType  result_type, first_argument_type, second_argument_type;$/;"	t	class:boost::math::lcm_evaluator	access:public
select_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct select_native$/;"	s	namespace:boost::math::detail
select_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct select_native<double>$/;"	s	namespace:boost::math::detail
select_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct select_native<float>$/;"	s	namespace:boost::math::detail
select_native	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct select_native<long double>$/;"	s	namespace:boost::math::detail
select_power_if_positive	/usr/include/boost/math/special_functions/pow.hpp	/^struct select_power_if_positive$/;"	s	namespace:boost::math::detail
select_result	/usr/include/boost/math/policies/policy.hpp	/^struct select_result$/;"	s	namespace:boost::math::policies::detail
select_result	/usr/include/boost/math/policies/policy.hpp	/^struct select_result<A, B, false>$/;"	s	namespace:boost::math::policies::detail
self_type	/usr/include/boost/math/common_factor_ct.hpp	/^        typedef static_gcd_helper_t  self_type;$/;"	t	struct:boost::math::detail::static_gcd_helper_t	access:private
semipolar	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    semipolar(  T const & rho,$/;"	f	namespace:boost::math	signature:( T const & rho, T const & alpha, T const & theta1, T const & theta2)
set_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void set_bits(double& x, uint32_t a)$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(double& x, uint32_t a)
set_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void set_bits(double& x, uint64_t a) { std::memcpy(&x, &a, 8); }$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(double& x, uint64_t a)
set_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void set_bits(float& x, uint32_t a) { std::memcpy(&x, &a, 4); }$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(float& x, uint32_t a)
set_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void set_bits(long double& x, uint32_t a)$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(long double& x, uint32_t a)
set_bits	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static void set_bits(long double& x, uint64_t a) { std::memcpy(&x, &a, 8); }$/;"	f	struct:boost::math::detail::fp_traits_non_native	access:public	signature:(long double& x, uint64_t a)
set_brake	/usr/include/boost/math/tools/remez.hpp	/^   void set_brake(int b)$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:(int b)
set_output_precision	/usr/include/boost/math/tools/test.hpp	/^void set_output_precision(T)$/;"	f	namespace:boost::math::tools	signature:(T)
set_worst	/usr/include/boost/math/tools/test.hpp	/^   void set_worst(int i){ worst_case = i; }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:(int i)
shape	/usr/include/boost/math/distributions/gamma.hpp	/^   RealType shape()const$/;"	f	class:boost::math::gamma_distribution	access:public	signature:() const
shape	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   RealType shape()const$/;"	f	class:boost::math::inverse_gamma_distribution	access:public	signature:() const
shape	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   RealType shape()const$/;"	f	class:boost::math::inverse_gaussian_distribution	access:public	signature:() const
shape	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType shape(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
shape	/usr/include/boost/math/distributions/pareto.hpp	/^      RealType shape()const$/;"	f	class:boost::math::pareto_distribution	access:public	signature:() const
shape	/usr/include/boost/math/distributions/skew_normal.hpp	/^    RealType shape()const$/;"	f	class:boost::math::skew_normal_distribution	access:public	signature:() const
shape	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType shape(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
shape	/usr/include/boost/math/distributions/weibull.hpp	/^   RealType shape()const$/;"	f	class:boost::math::weibull_distribution	access:public	signature:() const
shape_	/usr/include/boost/math/distributions/skew_normal.hpp	/^    RealType shape_;    \/\/ distribution shape.$/;"	m	class:boost::math::skew_normal_distribution	access:private
sigma	/usr/include/boost/math/distributions/rayleigh.hpp	/^   RealType sigma()const$/;"	f	class:boost::math::rayleigh_distribution	access:public	signature:() const
sign	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   int sign;$/;"	m	struct:boost::math::detail::erf_roots	access:private
sign	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static const uint64_t sign     = ((uint64_t)0x80000000u) << 32;$/;"	m	struct:boost::math::detail::fp_traits_non_native	access:public
sign	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static const uint64_t sign     = (uint64_t)0x80000000u << 32;$/;"	m	struct:boost::math::detail::fp_traits_non_native	access:public
sign_change_type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef fp_traits_non_native<T, precision> sign_change_type;$/;"	t	struct:boost::math::detail::fp_traits	access:public
signbit	/usr/include/boost/math/special_functions/sign.hpp	/^template<class T> int (signbit)(T x)$/;"	f	namespace:boost::math	signature:(T x)
signbit_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline int signbit_impl(T x, generic_tag<false> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<false> const&)
signbit_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline int signbit_impl(T x, generic_tag<true> const&)$/;"	f	namespace:boost::math::detail	signature:(T x, generic_tag<true> const&)
signbit_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline int signbit_impl(T x, ieee_copy_all_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_all_bits_tag const&)
signbit_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline int signbit_impl(T x, ieee_copy_leading_bits_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, ieee_copy_leading_bits_tag const&)
signbit_impl	/usr/include/boost/math/special_functions/sign.hpp	/^    inline int signbit_impl(T x, native_tag const&)$/;"	f	namespace:boost::math::detail	signature:(T x, native_tag const&)
signed_zero	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^    const int signed_zero = 0x2; \/\/!< put facet will distinguish between positive and negative zero.$/;"	m	namespace:boost::math
significand	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    static const uint64_t significand$/;"	m	struct:boost::math::detail::fp_traits_non_native	access:public
sin	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float sin(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
sin	/usr/include/boost/math/bindings/rr.hpp	/^inline RR sin(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
sin	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept sin(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
sin	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept sin(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
sin	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        sin(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
sin	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    sin(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
sin_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sin_pi(T x);$/;"	p	namespace:boost::math	signature:(T x)
sin_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sin_pi(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
sin_pi	/usr/include/boost/math/special_functions/sin_pi.hpp	/^inline typename tools::promote_args<T>::type sin_pi(T x)$/;"	f	namespace:boost::math	signature:(T x)
sin_pi	/usr/include/boost/math/special_functions/sin_pi.hpp	/^inline typename tools::promote_args<T>::type sin_pi(T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T x, const Policy& pol)
sin_pi_imp	/usr/include/boost/math/special_functions/sin_pi.hpp	/^T sin_pi_imp(T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T x, const Policy& pol)
sinc_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sinc_pi(T x);$/;"	p	namespace:boost::math	signature:(T x)
sinc_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sinc_pi(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
sinc_pi	/usr/include/boost/math/special_functions/sinc.hpp	/^        inline U<T>    sinc_pi(const U<T> x)$/;"	f	namespace:boost::math	signature:(const U<T> x)
sinc_pi	/usr/include/boost/math/special_functions/sinc.hpp	/^        inline U<T>    sinc_pi(const U<T> x, const Policy&)$/;"	f	namespace:boost::math	signature:(const U<T> x, const Policy&)
sinc_pi	/usr/include/boost/math/special_functions/sinc.hpp	/^       inline typename tools::promote_args<T>::type sinc_pi(T x)$/;"	f	namespace:boost::math	signature:(T x)
sinc_pi	/usr/include/boost/math/special_functions/sinc.hpp	/^       inline typename tools::promote_args<T>::type sinc_pi(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
sinc_pi_imp	/usr/include/boost/math/special_functions/sinc.hpp	/^        inline T    sinc_pi_imp(const T x)$/;"	f	namespace:boost::math::detail	signature:(const T x)
single_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct single_precision {};$/;"	s	namespace:boost::math::detail
sinh	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float sinh (const e_float& x)$/;"	f	namespace:boost::math::ef	signature:(const e_float& x)
sinh	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR sinh(RR z)$/;"	f	namespace:boost::math::ntl	signature:(RR z)
sinh	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept sinh(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
sinh	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept sinh(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
sinh	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        sinh(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
sinh	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    sinh(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
sinhc_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sinhc_pi(T x);$/;"	p	namespace:boost::math	signature:(T x)
sinhc_pi	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sinhc_pi(T x, const Policy&);$/;"	p	namespace:boost::math	signature:(T x, const Policy&)
sinhc_pi	/usr/include/boost/math/special_functions/sinhc.hpp	/^        inline U<T>    sinhc_pi(const U<T> x)$/;"	f	namespace:boost::math	signature:(const U<T> x)
sinhc_pi	/usr/include/boost/math/special_functions/sinhc.hpp	/^       inline typename tools::promote_args<T>::type sinhc_pi(T x)$/;"	f	namespace:boost::math	signature:(T x)
sinhc_pi	/usr/include/boost/math/special_functions/sinhc.hpp	/^       inline typename tools::promote_args<T>::type sinhc_pi(T x, const Policy&)$/;"	f	namespace:boost::math	signature:(T x, const Policy&)
sinhc_pi_imp	/usr/include/boost/math/special_functions/sinhc.hpp	/^        inline T    sinhc_pi_imp(const T x)$/;"	f	namespace:boost::math::detail	signature:(const T x)
sinpx	/usr/include/boost/math/special_functions/gamma.hpp	/^T sinpx(T z)$/;"	f	namespace:boost::math::detail	signature:(T z)
size	/usr/include/boost/math/tools/polynomial.hpp	/^   size_type size()const { return m_data.size(); }$/;"	f	class:boost::math::tools::polynomial	access:public	signature:() const
size	/usr/include/boost/math/tools/test_data.hpp	/^   size_type size()const{ return m_data.size(); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:() const
size_to_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct size_to_precision<10, true>$/;"	s	namespace:boost::math::detail
size_to_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct size_to_precision<12, true>$/;"	s	namespace:boost::math::detail
size_to_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct size_to_precision<16, true>$/;"	s	namespace:boost::math::detail
size_to_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct size_to_precision<4, true>$/;"	s	namespace:boost::math::detail
size_to_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<> struct size_to_precision<8, true>$/;"	s	namespace:boost::math::detail
size_to_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^template<int n, bool fp> struct size_to_precision$/;"	s	namespace:boost::math::detail
size_type	/usr/include/boost/math/tools/polynomial.hpp	/^   typedef typename std::vector<T>::size_type size_type;$/;"	t	class:boost::math::tools::polynomial	access:public
size_type	/usr/include/boost/math/tools/test_data.hpp	/^   typedef typename container_type::size_type size_type;$/;"	t	class:boost::math::tools::test_data	access:public
skew_normal	/usr/include/boost/math/distributions/skew_normal.hpp	/^  typedef skew_normal_distribution<double> skew_normal;$/;"	t	namespace:boost::math
skew_normal_distribution	/usr/include/boost/math/distributions/skew_normal.hpp	/^    skew_normal_distribution(RealType location = 0, RealType scale = 1, RealType shape = 0)$/;"	f	class:boost::math::skew_normal_distribution	access:public	signature:(RealType location = 0, RealType scale = 1, RealType shape = 0)
skew_normal_distribution	/usr/include/boost/math/distributions/skew_normal.hpp	/^  class skew_normal_distribution$/;"	c	namespace:boost::math
skew_normal_mode_functor	/usr/include/boost/math/distributions/skew_normal.hpp	/^      skew_normal_mode_functor(const boost::math::skew_normal_distribution<RealType, Policy> dist)$/;"	f	struct:boost::math::detail::skew_normal_mode_functor	access:public	signature:(const boost::math::skew_normal_distribution<RealType, Policy> dist)
skew_normal_mode_functor	/usr/include/boost/math/distributions/skew_normal.hpp	/^    struct skew_normal_mode_functor$/;"	s	namespace:boost::math::detail
skew_normal_quantile_functor	/usr/include/boost/math/distributions/skew_normal.hpp	/^      skew_normal_quantile_functor(const boost::math::skew_normal_distribution<RealType, Policy> dist, RealType const& p)$/;"	f	struct:boost::math::detail::skew_normal_quantile_functor	access:public	signature:(const boost::math::skew_normal_distribution<RealType, Policy> dist, RealType const& p)
skew_normal_quantile_functor	/usr/include/boost/math/distributions/skew_normal.hpp	/^    struct skew_normal_quantile_functor$/;"	s	namespace:boost::math::detail
skewness	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class skewness(const extreme_value_distribution<mpfr_class, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<mpfr_class, Policy>& )
skewness	/usr/include/boost/math/bindings/mpfr.hpp	/^inline mpfr_class skewness(const rayleigh_distribution<mpfr_class, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<mpfr_class, Policy>& )
skewness	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal skewness(const extreme_value_distribution<mpfr::mpreal, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<mpfr::mpreal, Policy>& )
skewness	/usr/include/boost/math/bindings/mpreal.hpp	/^inline mpfr::mpreal skewness(const rayleigh_distribution<mpfr::mpreal, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<mpfr::mpreal, Policy>& )
skewness	/usr/include/boost/math/concepts/distributions.hpp	/^RealType skewness(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
skewness	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType skewness(const bernoulli_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType skewness(const beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType skewness(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType skewness(const cauchy_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& )
skewness	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType skewness(const chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType skewness(const exponential_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& )
skewness	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType skewness(const extreme_value_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& )
skewness	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType skewness(const fisher_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType skewness(const gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType skewness(const geometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType skewness(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType skewness(const inverse_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType skewness(const inverse_gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType skewness(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType skewness(const laplace_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& )
skewness	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType skewness(const logistic_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& )
skewness	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType skewness(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType skewness(const negative_binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType skewness(const non_central_beta_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& )
skewness	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType skewness(const non_central_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType skewness(const non_central_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T skewness(T v, T delta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, const Policy& pol)
skewness	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType skewness(const non_central_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType skewness(const normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& )
skewness	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType skewness(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType skewness(const poisson_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType skewness(const rayleigh_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& )
skewness	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType skewness(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType skewness(const students_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType skewness(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType skewness(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
skewness	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType skewness(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
small_gamma2_series	/usr/include/boost/math/special_functions/gamma.hpp	/^   small_gamma2_series(T a_, T x_) : result(-x_), x(-x_), apn(a_+1), n(1){}$/;"	f	struct:boost::math::detail::small_gamma2_series	access:public	signature:(T a_, T x_)
small_gamma2_series	/usr/include/boost/math/special_functions/gamma.hpp	/^struct small_gamma2_series$/;"	s	namespace:boost::math::detail
solution	/usr/include/boost/math/tools/remez.hpp	/^   vector_type solution;          \/\/ Solution from the last iteration contains all unknowns including the error term.$/;"	m	class:boost::math::tools::remez_minimax	access:private
solve	/usr/include/boost/math/tools/solve.hpp	/^boost::numeric::ublas::vector<T> solve($/;"	f	namespace:boost::math::tools	signature:( const boost::numeric::ublas::matrix<T>& A_, const boost::numeric::ublas::vector<T>& b_)
sort_functor	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   sort_functor(const T* exponents) : m_exponents(exponents){}$/;"	f	struct:boost::math::detail::sort_functor	access:public	signature:(const T* exponents)
sort_functor	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^struct sort_functor$/;"	s	namespace:boost::math::detail
sph_bessel	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T, T, Policy>::result_type sph_bessel(unsigned v, T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned v, T x, const Policy& pol)
sph_bessel	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T, T, policies::policy<> >::result_type sph_bessel(unsigned v, T x)$/;"	f	namespace:boost::math	signature:(unsigned v, T x)
sph_bessel	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T, T, Policy>::result_type sph_bessel(unsigned v, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned v, T x, const Policy& pol)
sph_bessel	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T, T, policies::policy<> >::result_type sph_bessel(unsigned v, T x);$/;"	p	namespace:boost::math	signature:(unsigned v, T x)
sph_bessel	/usr/include/boost/math/tr1_c_macros.ipp	769;"	d	file:
sph_bessel	/usr/include/boost/math/tr1_c_macros.ipp	771;"	d	file:
sph_bessel_j_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T sph_bessel_j_imp(unsigned n, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, T x, const Policy& pol)
sph_bessel_j_small_z_series	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T sph_bessel_j_small_z_series(unsigned v, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned v, T x, const Policy& pol)
sph_bessel_j_small_z_series_term	/usr/include/boost/math/special_functions/bessel.hpp	/^   sph_bessel_j_small_z_series_term(unsigned v_, T x)$/;"	f	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:public	signature:(unsigned v_, T x)
sph_bessel_j_small_z_series_term	/usr/include/boost/math/special_functions/bessel.hpp	/^struct sph_bessel_j_small_z_series_term$/;"	s	namespace:boost::math::detail
sph_besself	/usr/include/boost/math/tr1_c_macros.ipp	773;"	d	file:
sph_besself	/usr/include/boost/math/tr1_c_macros.ipp	775;"	d	file:
sph_bessell	/usr/include/boost/math/tr1_c_macros.ipp	777;"	d	file:
sph_bessell	/usr/include/boost/math/tr1_c_macros.ipp	779;"	d	file:
sph_hankel_1	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> sph_hankel_1(T1 v, T2 x, const Policy&)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy&)
sph_hankel_1	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> sph_hankel_1(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
sph_hankel_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> sph_hankel_1(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
sph_hankel_1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> sph_hankel_1(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
sph_hankel_2	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> sph_hankel_2(T1 v, T2 x, const Policy&)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x, const Policy&)
sph_hankel_2	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> sph_hankel_2(T1 v, T2 x)$/;"	f	namespace:boost::math	signature:(T1 v, T2 x)
sph_hankel_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, Policy>::result_type> sph_hankel_2(T1 v, T2 x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x, const Policy& pol)
sph_hankel_2	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   std::complex<typename detail::bessel_traits<T1, T2, policies::policy<> >::result_type> sph_hankel_2(T1 v, T2 x);$/;"	p	namespace:boost::math	signature:(T1 v, T2 x)
sph_hankel_imp	/usr/include/boost/math/special_functions/hankel.hpp	/^inline std::complex<T> sph_hankel_imp(T v, T x, const Policy& pol, int sign)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, const Policy& pol, int sign)
sph_legendre	/usr/include/boost/math/tr1_c_macros.ipp	783;"	d	file:
sph_legendre	/usr/include/boost/math/tr1_c_macros.ipp	785;"	d	file:
sph_legendref	/usr/include/boost/math/tr1_c_macros.ipp	787;"	d	file:
sph_legendref	/usr/include/boost/math/tr1_c_macros.ipp	789;"	d	file:
sph_legendrel	/usr/include/boost/math/tr1_c_macros.ipp	791;"	d	file:
sph_legendrel	/usr/include/boost/math/tr1_c_macros.ipp	793;"	d	file:
sph_neumann	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T, T, Policy>::result_type sph_neumann(unsigned v, T x, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned v, T x, const Policy& pol)
sph_neumann	/usr/include/boost/math/special_functions/bessel.hpp	/^inline typename detail::bessel_traits<T, T, policies::policy<> >::result_type sph_neumann(unsigned v, T x)$/;"	f	namespace:boost::math	signature:(unsigned v, T x)
sph_neumann	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T, T, Policy>::result_type sph_neumann(unsigned v, T x, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned v, T x, const Policy& pol)
sph_neumann	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename detail::bessel_traits<T, T, policies::policy<> >::result_type sph_neumann(unsigned v, T x);$/;"	p	namespace:boost::math	signature:(unsigned v, T x)
sph_neumann	/usr/include/boost/math/tr1_c_macros.ipp	798;"	d	file:
sph_neumann	/usr/include/boost/math/tr1_c_macros.ipp	800;"	d	file:
sph_neumann_imp	/usr/include/boost/math/special_functions/bessel.hpp	/^inline T sph_neumann_imp(unsigned v, T x, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned v, T x, const Policy& pol)
sph_neumannf	/usr/include/boost/math/tr1_c_macros.ipp	802;"	d	file:
sph_neumannf	/usr/include/boost/math/tr1_c_macros.ipp	804;"	d	file:
sph_neumannl	/usr/include/boost/math/tr1_c_macros.ipp	806;"	d	file:
sph_neumannl	/usr/include/boost/math/tr1_c_macros.ipp	808;"	d	file:
spherical	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        spherical(T const & rho,$/;"	f	namespace:boost::math	signature:(T const & rho, T const & theta, T const & phi1, T const & phi2, T const & phi3, T const & phi4, T const & phi5, T const & phi6)
spherical	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    spherical(  T const & rho,$/;"	f	namespace:boost::math	signature:( T const & rho, T const & theta, T const & phi1, T const & phi2)
spherical_harmonic	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         spherical_harmonic(unsigned n, int m, T1 theta, T2 phi);$/;"	p	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi)
spherical_harmonic	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      spherical_harmonic(unsigned n, int m, T1 theta, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)
spherical_harmonic	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^   spherical_harmonic(unsigned n, int m, T1 theta, T2 phi)$/;"	f	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi)
spherical_harmonic	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^   spherical_harmonic(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)
spherical_harmonic	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^std::complex<T> spherical_harmonic(unsigned n, int m, U theta, U phi, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, int m, U theta, U phi, const Policy& pol)
spherical_harmonic_i	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         spherical_harmonic_i(unsigned n, int m, T1 theta, T2 phi);$/;"	p	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi)
spherical_harmonic_i	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      spherical_harmonic_i(unsigned n, int m, T1 theta, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)
spherical_harmonic_i	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^   spherical_harmonic_i(unsigned n, int m, T1 theta, T2 phi)$/;"	f	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi)
spherical_harmonic_i	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^   spherical_harmonic_i(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)
spherical_harmonic_i	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^T spherical_harmonic_i(unsigned n, int m, T theta, T phi, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, int m, T theta, T phi, const Policy& pol)
spherical_harmonic_prefix	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^inline T spherical_harmonic_prefix(unsigned n, unsigned m, T theta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, unsigned m, T theta, const Policy& pol)
spherical_harmonic_r	/usr/include/boost/math/special_functions/math_fwd.hpp	/^         spherical_harmonic_r(unsigned n, int m, T1 theta, T2 phi);$/;"	p	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi)
spherical_harmonic_r	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      spherical_harmonic_r(unsigned n, int m, T1 theta, T2 phi, const Policy& pol);$/;"	p	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)
spherical_harmonic_r	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^   spherical_harmonic_r(unsigned n, int m, T1 theta, T2 phi)$/;"	f	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi)
spherical_harmonic_r	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^   spherical_harmonic_r(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)$/;"	f	namespace:boost::math	signature:(unsigned n, int m, T1 theta, T2 phi, const Policy& pol)
spherical_harmonic_r	/usr/include/boost/math/special_functions/spherical_harmonic.hpp	/^T spherical_harmonic_r(unsigned n, int m, T theta, T phi, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(unsigned n, int m, T theta, T phi, const Policy& pol)
sqrt	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float sqrt(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
sqrt	/usr/include/boost/math/bindings/rr.hpp	/^inline RR sqrt(RR a)$/;"	f	namespace:boost::math::ntl	signature:(RR a)
sqrt	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept sqrt(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
sqrt	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept sqrt(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
sqrt1pm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sqrt1pm1(const T& val);$/;"	p	namespace:boost::math	signature:(const T& val)
sqrt1pm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type sqrt1pm1(const T& val, const Policy&);$/;"	p	namespace:boost::math	signature:(const T& val, const Policy&)
sqrt1pm1	/usr/include/boost/math/special_functions/sqrt1pm1.hpp	/^inline typename tools::promote_args<T>::type sqrt1pm1(const T& val)$/;"	f	namespace:boost::math	signature:(const T& val)
sqrt1pm1	/usr/include/boost/math/special_functions/sqrt1pm1.hpp	/^inline typename tools::promote_args<T>::type sqrt1pm1(const T& val, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& val, const Policy& pol)
standard_deviation	/usr/include/boost/math/concepts/distributions.hpp	/^RealType standard_deviation(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
standard_deviation	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type standard_deviation(const Distribution& dist)$/;"	f	namespace:boost::math	signature:(const Distribution& dist)
standard_deviation	/usr/include/boost/math/distributions/exponential.hpp	/^inline RealType standard_deviation(const exponential_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& dist)
standard_deviation	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline RealType standard_deviation(const extreme_value_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& dist)
standard_deviation	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline RealType standard_deviation(const inverse_gaussian_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& dist)
standard_deviation	/usr/include/boost/math/distributions/laplace.hpp	/^inline RealType standard_deviation(const laplace_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>& dist)
standard_deviation	/usr/include/boost/math/distributions/normal.hpp	/^   RealType standard_deviation()const$/;"	f	class:boost::math::normal_distribution	access:public	signature:() const
standard_deviation	/usr/include/boost/math/distributions/normal.hpp	/^inline RealType standard_deviation(const normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& dist)
stat	/usr/include/boost/math/tools/test.hpp	/^   boost::math::tools::stats<T> stat;   \/\/ Statistics for the test.$/;"	m	struct:boost::math::tools::test_result	access:private
static_gcd	/usr/include/boost/math/common_factor_ct.hpp	/^struct static_gcd : public mpl::integral_c<static_gcd_type, (detail::static_gcd_helper_t<Value1, Value2>::value) >$/;"	s	namespace:boost::math	inherits:mpl::integral_c
static_gcd_helper_t	/usr/include/boost/math/common_factor_ct.hpp	/^    struct static_gcd_helper_t$/;"	s	namespace:boost::math::detail
static_gcd_helper_t	/usr/include/boost/math/common_factor_ct.hpp	/^    struct static_gcd_helper_t< Value1, 0UL >$/;"	s	namespace:boost::math::detail
static_lcm	/usr/include/boost/math/common_factor_ct.hpp	/^struct static_lcm : public mpl::integral_c<static_gcd_type, (detail::static_lcm_helper_t<Value1, Value2>::value) >$/;"	s	namespace:boost::math	inherits:mpl::integral_c
static_lcm_helper2_t	/usr/include/boost/math/common_factor_ct.hpp	/^    struct static_lcm_helper2_t$/;"	s	namespace:boost::math::detail
static_lcm_helper2_t	/usr/include/boost/math/common_factor_ct.hpp	/^    struct static_lcm_helper2_t< 0UL >$/;"	s	namespace:boost::math::detail
static_lcm_helper_t	/usr/include/boost/math/common_factor_ct.hpp	/^    struct static_lcm_helper_t$/;"	s	namespace:boost::math::detail
static_lcm_helper_t	/usr/include/boost/math/common_factor_ct.hpp	/^    struct static_lcm_helper_t< 0UL, 0UL >$/;"	s	namespace:boost::math::detail
stats	/usr/include/boost/math/tools/stats.hpp	/^   stats()$/;"	f	class:boost::math::tools::stats	access:public	signature:()
stats	/usr/include/boost/math/tools/stats.hpp	/^class stats$/;"	c	namespace:boost::math::tools
std	/usr/include/boost/math/bindings/e_float.hpp	/^namespace std{$/;"	n
std	/usr/include/boost/math/complex/acos.hpp	/^namespace std{ using ::sqrt; using ::fabs; using ::acos; using ::asin; using ::atan; using ::atan2; }$/;"	n
std	/usr/include/boost/math/complex/asin.hpp	/^namespace std{ using ::sqrt; using ::fabs; using ::acos; using ::asin; using ::atan; using ::atan2; }$/;"	n
std	/usr/include/boost/math/complex/atanh.hpp	/^namespace std{ using ::sqrt; using ::fabs; using ::acos; using ::asin; using ::atan; using ::atan2; }$/;"	n
std	/usr/include/boost/math/complex/details.hpp	/^namespace std{ using ::sqrt; }$/;"	n
std	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace std{$/;"	n
std	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^  namespace std{ using ::memcpy; }$/;"	n
std	/usr/include/boost/math/special_functions/fpclassify.hpp	/^  namespace std{ using ::abs; using ::fabs; }$/;"	n
std	/usr/include/boost/math/special_functions/hypot.hpp	/^namespace std{ using ::sqrt; using ::fabs; }$/;"	n
std::abs	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept abs(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::acos	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept acos(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::asin	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept asin(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::atan	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept atan(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::atan2	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept atan2(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept b)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept b)
std::ceil	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept ceil(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::cos	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept cos(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::cosh	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept cosh(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::exp	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept exp(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::fabs	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept fabs(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::floor	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept floor(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::fmod	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept fmod(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept b)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept b)
std::frexp	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept frexp(boost::math::concepts::std_real_concept a, int* expon)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, int* expon)
std::ldexp	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept ldexp(boost::math::concepts::std_real_concept a, int expon)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, int expon)
std::log	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept log(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::log10	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept log10(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::modf	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept modf(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept* ipart)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept* ipart)
std::numeric_limits	/usr/include/boost/math/bindings/e_float.hpp	/^   class numeric_limits< ::boost::math::ef::e_float> : public numeric_limits< ::e_float>$/;"	c	namespace:std	inherits:numeric_limits
std::numeric_limits::boost::math::ef::max	/usr/include/boost/math/bindings/e_float.hpp	/^      static const ::boost::math::ef::e_float (max) (void)$/;"	f	class:std::numeric_limits::boost::math::ef	access:public	signature:(void)
std::numeric_limits::boost::math::ef::min	/usr/include/boost/math/bindings/e_float.hpp	/^      static const ::boost::math::ef::e_float (min) (void)$/;"	f	class:std::numeric_limits::boost::math::ef	access:public	signature:(void)
std::numeric_limits::digits	/usr/include/boost/math/bindings/e_float.hpp	/^      static const int digits = digits10;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::epsilon	/usr/include/boost/math/bindings/e_float.hpp	/^      static const ::boost::math::ef::e_float epsilon (void)$/;"	f	class:std::numeric_limits	access:public	signature:(void)
std::numeric_limits::infinity	/usr/include/boost/math/bindings/e_float.hpp	/^      static const ::boost::math::ef::e_float infinity (void)$/;"	f	class:std::numeric_limits	access:public	signature:(void)
std::numeric_limits::quiet_NaN	/usr/include/boost/math/bindings/e_float.hpp	/^      static const ::boost::math::ef::e_float quiet_NaN (void)$/;"	f	class:std::numeric_limits	access:public	signature:(void)
std::numeric_limits::round_error	/usr/include/boost/math/bindings/e_float.hpp	/^      static const ::boost::math::ef::e_float round_error(void)$/;"	f	class:std::numeric_limits	access:public	signature:(void)
std::pow	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept pow(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept b)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, boost::math::concepts::std_real_concept b)
std::pow	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept pow(boost::math::concepts::std_real_concept a, int b)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a, int b)
std::sin	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept sin(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::sinh	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept sinh(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::sqrt	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept sqrt(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::tan	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept tan(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std::tanh	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept tanh(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept() : m_value(0){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:()
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(boost::long_long_type c) : m_value(static_cast<std_real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(boost::long_long_type c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(boost::ulong_long_type c) : m_value(static_cast<std_real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(boost::ulong_long_type c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(char c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(char c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(double c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(double c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(float c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(float c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(int c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(int c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(long c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(long c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(long double c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(long double c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(long long c) : m_value(static_cast<std_real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(long long c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(short c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(short c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(signed char c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(signed char c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(unsigned char c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned char c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(unsigned int c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned int c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(unsigned long c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned long c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(unsigned long long c) : m_value(static_cast<std_real_concept_base_type>(c)){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned long long c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(unsigned short c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(unsigned short c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept(wchar_t c) : m_value(c){}$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:(wchar_t c)
std_real_concept	/usr/include/boost/math/concepts/std_real_concept.hpp	/^class std_real_concept$/;"	c	namespace:boost::math::concepts
std_real_concept_base_type	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   typedef double std_real_concept_base_type;$/;"	t	namespace:boost::math::concepts
students_t	/usr/include/boost/math/distributions/students_t.hpp	/^typedef students_t_distribution<double> students_t; \/\/ Convenience typedef for double version.$/;"	t	namespace:boost::math
students_t_distribution	/usr/include/boost/math/distributions/students_t.hpp	/^   students_t_distribution(RealType df) : df_(df)$/;"	f	class:boost::math::students_t_distribution	access:public	signature:(RealType df)
students_t_distribution	/usr/include/boost/math/distributions/students_t.hpp	/^class students_t_distribution$/;"	c	namespace:boost::math
success_fraction	/usr/include/boost/math/distributions/bernoulli.hpp	/^      RealType success_fraction() const$/;"	f	class:boost::math::bernoulli_distribution	access:public	signature:() const
success_fraction	/usr/include/boost/math/distributions/binomial.hpp	/^      RealType success_fraction() const$/;"	f	class:boost::math::binomial_distribution	access:public	signature:() const
success_fraction	/usr/include/boost/math/distributions/geometric.hpp	/^      RealType success_fraction() const$/;"	f	class:boost::math::geometric_distribution	access:public	signature:() const
success_fraction	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      RealType success_fraction() const$/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:() const
successes	/usr/include/boost/math/distributions/geometric.hpp	/^      RealType successes() const$/;"	f	class:boost::math::geometric_distribution	access:public	signature:() const
successes	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      RealType successes() const$/;"	f	class:boost::math::negative_binomial_distribution	access:public	signature:() const
sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type sum_series(Functor& func, const U& factor, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, const U& factor, boost::uintmax_t& max_terms)
sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type sum_series(Functor& func, const U& factor, boost::uintmax_t& max_terms, const V& init_value)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, const U& factor, boost::uintmax_t& max_terms, const V& init_value)
sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type sum_series(Functor& func, int bits)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, int bits)
sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type sum_series(Functor& func, int bits, boost::uintmax_t& max_terms)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, int bits, boost::uintmax_t& max_terms)
sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type sum_series(Functor& func, int bits, boost::uintmax_t& max_terms, const U& init_value)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, int bits, boost::uintmax_t& max_terms, const U& init_value)
sum_series	/usr/include/boost/math/tools/series.hpp	/^inline typename Functor::result_type sum_series(Functor& func, int bits, const U& init_value)$/;"	f	namespace:boost::math::tools	signature:(Functor& func, int bits, const U& init_value)
sup	/usr/include/boost/math/octonion.hpp	/^        inline T                                sup(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
sup	/usr/include/boost/math/quaternion.hpp	/^        inline T                                sup(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
support	/usr/include/boost/math/concepts/distributions.hpp	/^std::pair<RealType, RealType> support(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
support	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline const std::pair<RealType, RealType> support(const bernoulli_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/beta.hpp	/^    inline const std::pair<RealType, RealType> support(const beta_distribution<RealType, Policy>&  \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/binomial.hpp	/^      const std::pair<RealType, RealType> support(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
support	/usr/include/boost/math/distributions/cauchy.hpp	/^inline const std::pair<RealType, RealType> support(const cauchy_distribution<RealType, Policy>& )$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline const std::pair<RealType, RealType> support(const chi_squared_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/exponential.hpp	/^inline const std::pair<RealType, RealType> support(const exponential_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const exponential_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline const std::pair<RealType, RealType> support(const extreme_value_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const extreme_value_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline const std::pair<RealType, RealType> support(const fisher_f_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/gamma.hpp	/^inline const std::pair<RealType, RealType> support(const gamma_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/geometric.hpp	/^    inline const std::pair<RealType, RealType> support(const geometric_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline const std::pair<unsigned, unsigned> support(const hypergeometric_distribution<RealType, Policy>& d)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& d)
support	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline const std::pair<RealType, RealType> support(const inverse_chi_squared_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline const std::pair<RealType, RealType> support(const inverse_gamma_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^inline const std::pair<RealType, RealType> support(const inverse_gaussian_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const inverse_gaussian_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/laplace.hpp	/^inline const std::pair<RealType, RealType> support(const laplace_distribution<RealType, Policy>&)$/;"	f	namespace:boost::math	signature:(const laplace_distribution<RealType, Policy>&)
support	/usr/include/boost/math/distributions/logistic.hpp	/^    inline const std::pair<RealType, RealType> support(const logistic_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/lognormal.hpp	/^inline const std::pair<RealType, RealType> support(const lognormal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline const std::pair<RealType, RealType> support(const negative_binomial_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline const std::pair<RealType, RealType> support(const non_central_beta_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline const std::pair<RealType, RealType> support(const non_central_chi_squared_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline const std::pair<RealType, RealType> support(const non_central_f_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline const std::pair<RealType, RealType> support(const non_central_t_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/normal.hpp	/^inline const std::pair<RealType, RealType> support(const normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const normal_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/pareto.hpp	/^    inline const std::pair<RealType, RealType> support(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
support	/usr/include/boost/math/distributions/poisson.hpp	/^    inline const std::pair<RealType, RealType> support(const poisson_distribution<RealType, Policy>& \/* dist *\/)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline const std::pair<RealType, RealType> support(const rayleigh_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline const std::pair<RealType, RealType> support(const skew_normal_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/students_t.hpp	/^inline const std::pair<RealType, RealType> support(const students_t_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& )
support	/usr/include/boost/math/distributions/triangular.hpp	/^  inline const std::pair<RealType, RealType> support(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
support	/usr/include/boost/math/distributions/uniform.hpp	/^  inline const std::pair<RealType, RealType> support(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
support	/usr/include/boost/math/distributions/weibull.hpp	/^inline const std::pair<RealType, RealType> support(const weibull_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& )
suppress_unused_variable_warning	/usr/include/boost/math/tools/config.hpp	/^void suppress_unused_variable_warning(const T&)$/;"	f	namespace:boost::math	signature:(const T&)
swap	/usr/include/boost/math/tools/test_data.hpp	/^   void swap(test_data& other){ m_data.swap(other.m_data); }$/;"	f	class:boost::math::tools::test_data	access:public	signature:(test_data& other)
swap_ab	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   bool invert, swap_ab;$/;"	m	struct:boost::math::detail::beta_inv_ab_t	access:private
t	/usr/include/boost/math/bindings/rr.hpp	/^      RR t;$/;"	m	struct:boost::math::ntl::acos_root	access:private
t	/usr/include/boost/math/bindings/rr.hpp	/^      RR t;$/;"	m	struct:boost::math::ntl::asin_root	access:private
t	/usr/include/boost/math/bindings/rr.hpp	/^      RR t;$/;"	m	struct:boost::math::ntl::atan_root	access:private
t	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   T t, a;$/;"	m	struct:boost::math::detail::temme_root_finder	access:private
t1	/usr/include/boost/math/constants/constants.hpp	/^      typedef typename policies::precision<Real, Policy>::type t1;$/;"	t	struct:boost::math::constants::construction_traits	access:private
t2	/usr/include/boost/math/constants/constants.hpp	/^      typedef typename policies::precision<float, Policy>::type t2;$/;"	t	struct:boost::math::constants::construction_traits	access:private
t3	/usr/include/boost/math/constants/constants.hpp	/^      typedef typename policies::precision<double, Policy>::type t3;$/;"	t	struct:boost::math::constants::construction_traits	access:private
t4	/usr/include/boost/math/constants/constants.hpp	/^      typedef typename policies::precision<long double, Policy>::type t4;$/;"	t	struct:boost::math::constants::construction_traits	access:private
tan	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float tan(const e_float& v)$/;"	f	namespace:boost::math::ef	signature:(const e_float& v)
tan	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR tan(const RR& a)$/;"	f	namespace:boost::math::ntl	signature:(const RR& a)
tan	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept tan(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
tan	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept tan(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
tan	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        tan(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
tan	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    tan(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
tanh	/usr/include/boost/math/bindings/e_float.hpp	/^inline e_float tanh (const e_float& x)$/;"	f	namespace:boost::math::ef	signature:(const e_float& x)
tanh	/usr/include/boost/math/bindings/rr.hpp	/^   inline RR tanh(RR z)$/;"	f	namespace:boost::math::ntl	signature:(RR z)
tanh	/usr/include/boost/math/concepts/real_concept.hpp	/^inline real_concept tanh(real_concept a)$/;"	f	namespace:boost::math::concepts	signature:(real_concept a)
tanh	/usr/include/boost/math/concepts/std_real_concept.hpp	/^inline boost::math::concepts::std_real_concept tanh(boost::math::concepts::std_real_concept a)$/;"	f	namespace:std	signature:(boost::math::concepts::std_real_concept a)
tanh	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        tanh(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
tanh	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    tanh(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
target	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   value_type target;$/;"	m	struct:boost::math::detail::generic_quantile_finder	access:private
target	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   value_type target;$/;"	m	struct:boost::math::detail::distribution_quantile_finder	access:private
target	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T target;$/;"	m	struct:boost::math::detail::nc_beta_quantile_functor	access:private
target	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            T target;$/;"	m	struct:boost::math::detail::nccs_quantile_functor	access:private
target	/usr/include/boost/math/special_functions/detail/erf_inv.hpp	/^   T target;$/;"	m	struct:boost::math::detail::erf_roots	access:private
target	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   T a, b, target;$/;"	m	struct:boost::math::detail::ibeta_roots	access:private
target_precision	/usr/include/boost/math/special_functions/lanczos.hpp	/^   >::type target_precision;$/;"	t	struct:boost::math::lanczos::lanczos	access:public
temme_asyptotic_y_small_x	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^void temme_asyptotic_y_small_x(T v, T x, T* Y, T* Y1, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* Y, T* Y1, const Policy& pol)
temme_ik	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^int temme_ik(T v, T x, T* K, T* K1, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* K, T* K1, const Policy& pol)
temme_jy	/usr/include/boost/math/special_functions/detail/bessel_jy.hpp	/^int temme_jy(T v, T x, T* Y, T* Y1, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T x, T* Y, T* Y1, const Policy& pol)
temme_method_1_ibeta_inverse	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^T temme_method_1_ibeta_inverse(T a, T b, T z, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T z, const Policy& pol)
temme_method_2_ibeta_inverse	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^T temme_method_2_ibeta_inverse(T \/*a*\/, T \/*b*\/, T z, T r, T theta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T , T , T z, T r, T theta, const Policy& pol)
temme_method_3_ibeta_inverse	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^T temme_method_3_ibeta_inverse(T a, T b, T p, T q, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T a, T b, T p, T q, const Policy& pol)
temme_root_finder	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^   temme_root_finder(const T t_, const T a_) : t(t_), a(a_) {}$/;"	f	struct:boost::math::detail::temme_root_finder	access:public	signature:(const T t_, const T a_)
temme_root_finder	/usr/include/boost/math/special_functions/detail/ibeta_inverse.hpp	/^struct temme_root_finder$/;"	s	namespace:boost::math::detail
term	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
term	/usr/include/boost/math/special_functions/bessel.hpp	/^   T term;$/;"	m	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:private
term	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   T term;$/;"	m	struct:boost::math::detail::cyl_bessel_i_small_z	access:private
term	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T term;$/;"	m	struct:boost::math::detail::bessel_j_small_z_series_term	access:private
term	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T term;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:private
term	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T term;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:private
test	/usr/include/boost/math/tools/test.hpp	/^test_result<typename calculate_result_type<A>::value_type> test(const A& a, F1 test_func, F2 expect_func)$/;"	f	namespace:boost::math::tools	signature:(const A& a, F1 test_func, F2 expect_func)
test_data	/usr/include/boost/math/tools/test_data.hpp	/^   test_data(){}$/;"	f	class:boost::math::tools::test_data	access:public	signature:()
test_data	/usr/include/boost/math/tools/test_data.hpp	/^   test_data(F func, const parameter_info<T>& arg1)$/;"	f	class:boost::math::tools::test_data	access:public	signature:(F func, const parameter_info<T>& arg1)
test_data	/usr/include/boost/math/tools/test_data.hpp	/^class test_data$/;"	c	namespace:boost::math::tools
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const D&)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const D&)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::bernoulli_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::bernoulli_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::beta_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::beta_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::binomial_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::binomial_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::cauchy_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::cauchy_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::chi_squared_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::chi_squared_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::exponential_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::exponential_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::extreme_value_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::extreme_value_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::fisher_f_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::fisher_f_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::gamma_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::gamma_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::hypergeometric_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::hypergeometric_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::inverse_chi_squared_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::inverse_chi_squared_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::inverse_gamma_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::inverse_gamma_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::laplace_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::laplace_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::logistic_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::logistic_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::lognormal_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::lognormal_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::negative_binomial_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::negative_binomial_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::non_central_beta_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::non_central_beta_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::non_central_chi_squared_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::non_central_chi_squared_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::non_central_f_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::non_central_f_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::non_central_t_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::non_central_t_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::normal_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::normal_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::pareto_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::pareto_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::poisson_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::poisson_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::rayleigh_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::rayleigh_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::students_t_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::students_t_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::triangular_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::triangular_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::uniform_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::uniform_distribution<R, P>& d)
test_extra_members	/usr/include/boost/math/concepts/distributions.hpp	/^   static void test_extra_members(const boost::math::weibull_distribution<R, P>& d)$/;"	f	struct:boost::math::concepts::DistributionConcept	access:public	signature:(const boost::math::weibull_distribution<R, P>& d)
test_has_location	/usr/include/boost/math/tools/traits.hpp	/^char test_has_location(...);$/;"	p	namespace:boost::math::tools::detail	signature:(....)
test_has_location	/usr/include/boost/math/tools/traits.hpp	/^double test_has_location(const volatile result_tag<typename D::value_type (D::*)()const, &D::location>*);$/;"	p	namespace:boost::math::tools::detail	signature:(const volatile result_tag<typename D::value_type (D::*)()const, &D::location>*)
test_has_scale	/usr/include/boost/math/tools/traits.hpp	/^char test_has_scale(...);$/;"	p	namespace:boost::math::tools::detail	signature:(....)
test_has_scale	/usr/include/boost/math/tools/traits.hpp	/^double test_has_scale(const volatile result_tag<typename D::value_type (D::*)()const, &D::scale>*);$/;"	p	namespace:boost::math::tools::detail	signature:(const volatile result_tag<typename D::value_type (D::*)()const, &D::scale>*)
test_hetero	/usr/include/boost/math/tools/test.hpp	/^test_result<Real> test_hetero(const A& a, F1 test_func, F2 expect_func)$/;"	f	namespace:boost::math::tools	signature:(const A& a, F1 test_func, F2 expect_func)
test_is_default_arg	/usr/include/boost/math/policies/policy.hpp	/^char test_is_default_arg(const default_policy*);$/;"	p	namespace:boost::math::policies::detail	signature:(const default_policy*)
test_is_default_arg	/usr/include/boost/math/policies/policy.hpp	/^double test_is_default_arg(...);$/;"	p	namespace:boost::math::policies::detail	signature:(....)
test_is_valid_arg	/usr/include/boost/math/policies/policy.hpp	/^char test_is_valid_arg(const default_policy*);$/;"	p	namespace:boost::math::policies::detail	signature:(const default_policy*)
test_is_valid_arg	/usr/include/boost/math/policies/policy.hpp	/^double test_is_valid_arg(...);$/;"	p	namespace:boost::math::policies::detail	signature:(....)
test_result	/usr/include/boost/math/tools/test.hpp	/^   test_result() { worst_case = 0; }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:()
test_result	/usr/include/boost/math/tools/test.hpp	/^struct test_result$/;"	s	namespace:boost::math::tools
tgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma(T z)$/;"	f	namespace:boost::math	signature:(T z)
tgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma(T z, const Policy& \/* pol *\/, const mpl::true_)$/;"	f	namespace:boost::math::detail	signature:(T z, const Policy& , const mpl::true_)
tgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma(T1 a, T2 z)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z)
tgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma(T1 a, T2 z, const Policy& pol)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z, const Policy& pol)
tgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma(T1 a, T2 z, const Policy&, const mpl::false_)$/;"	f	namespace:boost::math::detail	signature:(T1 a, T2 z, const Policy&, const mpl::false_)
tgamma	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma(T1 a, T2 z, const mpl::false_ tag)$/;"	f	namespace:boost::math::detail	signature:(T1 a, T2 z, const mpl::false_ tag)
tgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type tgamma(RT1 a, RT2 z);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z)
tgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type tgamma(RT1 a, RT2 z, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z, const Policy& pol)
tgamma	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type tgamma(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
tgamma	/usr/include/boost/math/tr1_c_macros.ipp	457;"	d	file:
tgamma	/usr/include/boost/math/tr1_c_macros.ipp	459;"	d	file:
tgamma1pm1	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma1pm1(T z)$/;"	f	namespace:boost::math	signature:(T z)
tgamma1pm1	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma1pm1(T z, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math	signature:(T z, const Policy& )
tgamma1pm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type tgamma1pm1(RT z);$/;"	p	namespace:boost::math	signature:(RT z)
tgamma1pm1	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT>::type tgamma1pm1(RT z, const Policy& pol);$/;"	p	namespace:boost::math	signature:(RT z, const Policy& pol)
tgamma_delta_ratio	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma_delta_ratio(T1 z, T2 delta)$/;"	f	namespace:boost::math	signature:(T1 z, T2 delta)
tgamma_delta_ratio	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma_delta_ratio(T1 z, T2 delta, const Policy& \/* pol *\/)$/;"	f	namespace:boost::math	signature:(T1 z, T2 delta, const Policy& )
tgamma_delta_ratio	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type tgamma_delta_ratio(T1 z, T2 delta);$/;"	p	namespace:boost::math	signature:(T1 z, T2 delta)
tgamma_delta_ratio	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type tgamma_delta_ratio(T1 z, T2 delta, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 z, T2 delta, const Policy&)
tgamma_delta_ratio_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T tgamma_delta_ratio_imp(T z, T delta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T z, T delta, const Policy& pol)
tgamma_delta_ratio_imp_lanczos	/usr/include/boost/math/special_functions/gamma.hpp	/^T tgamma_delta_ratio_imp_lanczos(T z, T delta, const Policy& pol, const Lanczos&)$/;"	f	namespace:boost::math::detail	signature:(T z, T delta, const Policy& pol, const Lanczos&)
tgamma_delta_ratio_imp_lanczos	/usr/include/boost/math/special_functions/gamma.hpp	/^T tgamma_delta_ratio_imp_lanczos(T z, T delta, const Policy& pol, const lanczos::undefined_lanczos&)$/;"	f	namespace:boost::math::detail	signature:(T z, T delta, const Policy& pol, const lanczos::undefined_lanczos&)
tgamma_lower	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma_lower(T1 a, T2 z)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z)
tgamma_lower	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma_lower(T1 a, T2 z, const Policy&)$/;"	f	namespace:boost::math	signature:(T1 a, T2 z, const Policy&)
tgamma_lower	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type tgamma_lower(RT1 a, RT2 z);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z)
tgamma_lower	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<RT1, RT2>::type tgamma_lower(RT1 a, RT2 z, const Policy&);$/;"	p	namespace:boost::math	signature:(RT1 a, RT2 z, const Policy&)
tgamma_ratio	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma_ratio(T1 a, T2 b)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b)
tgamma_ratio	/usr/include/boost/math/special_functions/gamma.hpp	/^   tgamma_ratio(T1 a, T2 b, const Policy&)$/;"	f	namespace:boost::math	signature:(T1 a, T2 b, const Policy&)
tgamma_ratio	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type tgamma_ratio(T1 a, T2 b);$/;"	p	namespace:boost::math	signature:(T1 a, T2 b)
tgamma_ratio	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T1, T2>::type tgamma_ratio(T1 a, T2 b, const Policy&);$/;"	p	namespace:boost::math	signature:(T1 a, T2 b, const Policy&)
tgamma_small_upper_part	/usr/include/boost/math/special_functions/gamma.hpp	/^inline T tgamma_small_upper_part(T a, T x, const Policy& pol, T* pgam = 0, bool invert = false, T* pderivative = 0)$/;"	f	namespace:boost::math::detail	signature:(T a, T x, const Policy& pol, T* pgam = 0, bool invert = false, T* pderivative = 0)
tgammaf	/usr/include/boost/math/tr1_c_macros.ipp	461;"	d	file:
tgammaf	/usr/include/boost/math/tr1_c_macros.ipp	463;"	d	file:
tgammal	/usr/include/boost/math/tr1_c_macros.ipp	465;"	d	file:
tgammal	/usr/include/boost/math/tr1_c_macros.ipp	467;"	d	file:
tgammap1m1_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^T tgammap1m1_imp(T dz, Policy const& pol, const Lanczos& l)$/;"	f	namespace:boost::math::detail	signature:(T dz, Policy const& pol, const Lanczos& l)
tgammap1m1_imp	/usr/include/boost/math/special_functions/gamma.hpp	/^inline T tgammap1m1_imp(T dz, Policy const& pol,$/;"	f	namespace:boost::math::detail	signature:(T dz, Policy const& pol, const ::boost::math::lanczos::undefined_lanczos& l)
throw_on_error	/usr/include/boost/math/policies/policy.hpp	/^   throw_on_error = 0,$/;"	e	enum:boost::math::policies::error_policy_type
tk	/usr/include/boost/math/special_functions/erf.hpp	/^   int tk;$/;"	m	struct:boost::math::detail::erf_asympt_series_t	access:private
toms748_solve	/usr/include/boost/math/tools/toms748_solve.hpp	/^inline std::pair<T, T> toms748_solve(F f, const T& ax, const T& bx, Tol tol, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, const T& ax, const T& bx, Tol tol, boost::uintmax_t& max_iter)
toms748_solve	/usr/include/boost/math/tools/toms748_solve.hpp	/^inline std::pair<T, T> toms748_solve(F f, const T& ax, const T& bx, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)$/;"	f	namespace:boost::math::tools	signature:(F f, const T& ax, const T& bx, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)
toms748_solve	/usr/include/boost/math/tools/toms748_solve.hpp	/^inline std::pair<T, T> toms748_solve(F f, const T& ax, const T& bx, const T& fax, const T& fbx, Tol tol, boost::uintmax_t& max_iter)$/;"	f	namespace:boost::math::tools	signature:(F f, const T& ax, const T& bx, const T& fax, const T& fbx, Tol tol, boost::uintmax_t& max_iter)
toms748_solve	/usr/include/boost/math/tools/toms748_solve.hpp	/^std::pair<T, T> toms748_solve(F f, const T& ax, const T& bx, const T& fax, const T& fbx, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)$/;"	f	namespace:boost::math::tools	signature:(F f, const T& ax, const T& bx, const T& fax, const T& fbx, Tol tol, boost::uintmax_t& max_iter, const Policy& pol)
tools	/usr/include/boost/math/bindings/mpfr.hpp	/^namespace tools$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/bindings/mpreal.hpp	/^namespace tools$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/bindings/rr.hpp	/^namespace tools$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/concepts/real_concept.hpp	/^namespace tools$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/concepts/std_real_concept.hpp	/^namespace tools$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/policies/policy.hpp	/^namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/big_constant.hpp	/^namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/config.hpp	/^namespace tools$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/polynomial_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner1_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner2_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_10.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_11.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_12.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_13.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_14.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_15.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_16.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_17.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_18.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_19.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_2.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_20.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_3.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_4.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_5.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_6.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_7.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_8.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/detail/rational_horner3_9.hpp	/^namespace boost{ namespace math{ namespace tools{ namespace detail{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/fraction.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/minima.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/polynomial.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/precision.hpp	/^namespace tools$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/promotion.hpp	/^    namespace tools$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/rational.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/real_cast.hpp	/^  namespace tools$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/remez.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/roots.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/series.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/solve.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/stats.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/test.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/test_data.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/toms748_solve.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/traits.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
tools	/usr/include/boost/math/tools/workaround.hpp	/^namespace boost{ namespace math{ namespace tools{$/;"	n	namespace:boost::math
total	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      unsigned total()const$/;"	f	class:boost::math::hypergeometric_distribution	access:public	signature:() const
total	/usr/include/boost/math/tools/stats.hpp	/^   T total()const{ return m_total; }$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
total	/usr/include/boost/math/tools/test.hpp	/^   T total()const{ return stat.total(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
tr1	/usr/include/boost/math/tr1.hpp	/^namespace boost{ namespace math{ namespace tr1{ extern "C"{$/;"	n	namespace:boost::math
tr1	/usr/include/boost/math/tr1.hpp	/^namespace boost{ namespace math{ namespace tr1{$/;"	n	namespace:boost::math
trap_infinity	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^    const int trap_infinity = 0x4; \/*!< put facet will throw an exception of type std::ios_base::failure$/;"	m	namespace:boost::math
trap_nan	/usr/include/boost/math/special_functions/nonfinite_num_facets.hpp	/^    const int trap_nan = 0x8; \/*!< put facet will throw an exception of type std::ios_base::failure$/;"	m	namespace:boost::math
trials	/usr/include/boost/math/distributions/binomial.hpp	/^      RealType trials() const$/;"	f	class:boost::math::binomial_distribution	access:public	signature:() const
triangular	/usr/include/boost/math/distributions/triangular.hpp	/^  typedef triangular_distribution<double> triangular;$/;"	t	namespace:boost::math
triangular_distribution	/usr/include/boost/math/distributions/triangular.hpp	/^    triangular_distribution(RealType lower = -1, RealType mode = 0, RealType upper = 1)$/;"	f	class:boost::math::triangular_distribution	access:public	signature:(RealType lower = -1, RealType mode = 0, RealType upper = 1)
triangular_distribution	/usr/include/boost/math/distributions/triangular.hpp	/^  class triangular_distribution$/;"	c	namespace:boost::math
trunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T trunc(const T& v);$/;"	p	namespace:boost::math	signature:(const T& v)
trunc	/usr/include/boost/math/special_functions/detail/round_fwd.hpp	/^   T trunc(const T& v, const Policy& pol);$/;"	p	namespace:boost::math	signature:(const T& v, const Policy& pol)
trunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline T trunc(const T& v)$/;"	f	namespace:boost::math	signature:(const T& v)
trunc	/usr/include/boost/math/special_functions/trunc.hpp	/^inline T trunc(const T& v, const Policy& pol)$/;"	f	namespace:boost::math	signature:(const T& v, const Policy& pol)
trunc	/usr/include/boost/math/tr1_c_macros.ipp	470;"	d	file:
trunc	/usr/include/boost/math/tr1_c_macros.ipp	472;"	d	file:
truncate_to_float	/usr/include/boost/math/tools/test_data.hpp	/^   static float truncate_to_float(float c){ return truncate_to_float(&c); }$/;"	f	class:boost::math::tools::test_data	access:private	signature:(float c)
truncate_to_float	/usr/include/boost/math/tools/test_data.hpp	/^   static float truncate_to_float(float const * pf);$/;"	p	class:boost::math::tools::test_data	access:private	signature:(float const * pf)
truncate_to_float	/usr/include/boost/math/tools/test_data.hpp	/^inline float test_data<T>::truncate_to_float(float const * pf)$/;"	f	class:boost::math::tools::test_data	signature:(float const * pf)
truncf	/usr/include/boost/math/tr1_c_macros.ipp	474;"	d	file:
truncf	/usr/include/boost/math/tr1_c_macros.ipp	476;"	d	file:
truncl	/usr/include/boost/math/tr1_c_macros.ipp	478;"	d	file:
truncl	/usr/include/boost/math/tr1_c_macros.ipp	480;"	d	file:
type	/usr/include/boost/math/bindings/mpfr.hpp	/^   typedef mpfr_class type;$/;"	t	struct:boost::math::policies::evaluation	access:public
type	/usr/include/boost/math/bindings/mpfr.hpp	/^   typedef mpfr_lanczos type;$/;"	t	struct:boost::math::lanczos::lanczos	access:public
type	/usr/include/boost/math/bindings/mpfr.hpp	/^  typedef mpfr_class type;$/;"	t	struct:boost::math::tools::promote_arg	access:public
type	/usr/include/boost/math/bindings/mpreal.hpp	/^   typedef mpreal_lanczos type;$/;"	t	struct:boost::math::lanczos::lanczos	access:public
type	/usr/include/boost/math/bindings/rr.hpp	/^   typedef ntl_lanczos type;$/;"	t	struct:boost::math::lanczos::lanczos	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^      ::boost::is_same<iter, end_type>::value>::type type;$/;"	t	struct:boost::math::policies::detail::find_arg	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^      Digits2, digits2_type>::type type;$/;"	t	struct:boost::math::policies::detail::precision	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^      typedef is_default_policy<U> type;$/;"	t	struct:boost::math::policies::detail::is_default_policy::apply	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^      typename mpl::at<result_type, mpl::int_<12> >::type > type;$/;"	t	struct:boost::math::policies::normalise	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^   >::type type;$/;"	t	struct:boost::math::policies::precision	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^   typedef A type;$/;"	t	struct:boost::math::policies::detail::select_result	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^   typedef Real type;$/;"	t	struct:boost::math::policies::evaluation	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^   typedef Seq type;$/;"	t	struct:boost::math::policies::detail::append_N	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^   typedef digits2<DBL_MANT_DIG> type;$/;"	t	struct:boost::math::policies::precision	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^   typedef digits2<FLT_MANT_DIG> type;$/;"	t	struct:boost::math::policies::precision	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^   typedef digits2<LDBL_MANT_DIG> type;$/;"	t	struct:boost::math::policies::precision	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^   typedef policy<detail::forwarding_arg1, detail::forwarding_arg2> type;$/;"	t	struct:boost::math::policies::normalise	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename append_N<new_seq, T, N-1>::type type;$/;"	t	struct:boost::math::policies::detail::append_N	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::deref<B>::type type;$/;"	t	struct:boost::math::policies::detail::select_result	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::if_<typename Policy::promote_double_type, long double, double>::type type;$/;"	t	struct:boost::math::policies::evaluation	access:public
type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename mpl::if_<typename Policy::promote_float_type, double, float>::type type;$/;"	t	struct:boost::math::policies::evaluation	access:public
type	/usr/include/boost/math/special_functions/cbrt.hpp	/^   >::type type;$/;"	t	struct:boost::math::detail::largest_cbrt_int_type	access:public
type	/usr/include/boost/math/special_functions/detail/bessel_jy_asym.hpp	/^   >::type type;$/;"	t	struct:boost::math::detail::bessel_asymptotic_tag	access:public
type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef double_precision type;$/;"	t	struct:boost::math::detail::size_to_precision	access:public
type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef extended_double_precision type;$/;"	t	struct:boost::math::detail::size_to_precision	access:public
type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef fp_traits_native<double> type;$/;"	t	struct:boost::math::detail::select_native	access:public
type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef fp_traits_native<float> type;$/;"	t	struct:boost::math::detail::select_native	access:public
type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef fp_traits_native<long double> type;$/;"	t	struct:boost::math::detail::select_native	access:public
type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef fp_traits_non_native<T, precision> type;$/;"	t	struct:boost::math::detail::fp_traits	access:public
type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef fp_traits_non_native<T, precision> type;$/;"	t	struct:boost::math::detail::select_native	access:public
type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef single_precision type;$/;"	t	struct:boost::math::detail::size_to_precision	access:public
type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^    typedef typename select_native<T>::type type;$/;"	t	struct:boost::math::detail::fp_traits	access:public
type	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^   typedef unknown_precision type;$/;"	t	struct:boost::math::detail::size_to_precision	access:public
type	/usr/include/boost/math/special_functions/lanczos.hpp	/^      mpl::less_equal<target_precision, mpl::_1> >::type>::type type;$/;"	t	struct:boost::math::lanczos::lanczos	access:public
type	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      >::type type;$/;"	t	struct:boost::math::detail::ellint_3_result	access:public
type	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      >::type type;$/;"	t	struct:boost::math::detail::expint_result	access:public
type	/usr/include/boost/math/special_functions/math_fwd.hpp	/^      >::type type;$/;"	t	struct:boost::math::laguerre_result	access:public
type	/usr/include/boost/math/special_functions/pow.hpp	/^    typedef power_if_positive<N, is_positive::value> type;$/;"	t	struct:boost::math::detail::select_power_if_positive	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^          typename mpl::if_< typename mpl::and_<mpl::not_<is_floating_point<T2P> >, ::boost::is_convertible<T1P, T2P> >, T2P, T1P>::type>::type type;$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^         >::type type;$/;"	t	struct:boost::math::tools::promote_args	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^        typedef typename mpl::if_<is_integral<T>, double, T>::type type;$/;"	t	struct:boost::math::tools::promote_arg	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<double>{ typedef double type; };$/;"	t	struct:boost::math::tools::promote_arg	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<float> { typedef float type; };$/;"	t	struct:boost::math::tools::promote_arg	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<int> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_arg	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_arg<long double> { typedef long double type; };$/;"	t	struct:boost::math::tools::promote_arg	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, double>{ typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, float> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, int> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<double, long double> {  typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, double> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, float> { typedef float type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, int> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<float, long double> {  typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, double> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, float> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, int> {  typedef double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<int, long double> {  typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, double> {  typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, float> {  typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, int> {  typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/promotion.hpp	/^      template <> struct promote_args_2<long double, long double> { typedef long double type; };$/;"	t	struct:boost::math::tools::promote_args_2	access:public
type	/usr/include/boost/math/tools/test_data.hpp	/^   parameter_type type;$/;"	m	struct:boost::math::tools::parameter_info	access:public
unchecked_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^inline T unchecked_factorial(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(T))$/;"	f	namespace:boost::math	signature:(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(T))
unchecked_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^inline double unchecked_factorial<double>(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(double))$/;"	f	namespace:boost::math	signature:(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(double))
unchecked_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^inline float unchecked_factorial<float>(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(float))$/;"	f	namespace:boost::math	signature:(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(float))
unchecked_factorial	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^inline long double unchecked_factorial<long double>(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(long double))$/;"	f	namespace:boost::math	signature:(unsigned i BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(long double))
unchecked_factorial	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   RT unchecked_factorial(unsigned int BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(RT)); $/;"	p	namespace:boost::math	signature:(unsigned int BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE(RT))
undefined_lanczos	/usr/include/boost/math/special_functions/lanczos.hpp	/^struct undefined_lanczos : public mpl::int_<INT_MAX - 1> { };$/;"	s	namespace:boost::math::lanczos	inherits:mpl::int_
underflow_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_underflow_error<mpl::_1>, typename Policy::underflow_error_type >::type underflow_error_type;$/;"	t	struct:boost::math::policies::normalise	access:private
underflow_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef typename detail::find_arg<arg_list, is_underflow_error<mpl::_1>, underflow_error<> >::type underflow_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
underflow_error_type	/usr/include/boost/math/policies/policy.hpp	/^   typedef underflow_error<> underflow_error_type;$/;"	t	struct:boost::math::policies::policy	access:public
uniform	/usr/include/boost/math/distributions/uniform.hpp	/^  typedef uniform_distribution<double> uniform;$/;"	t	namespace:boost::math
uniform_distribution	/usr/include/boost/math/distributions/uniform.hpp	/^    uniform_distribution(RealType lower = 0, RealType upper = 1) \/\/ Constructor.$/;"	f	class:boost::math::uniform_distribution	access:public	signature:(RealType lower = 0, RealType upper = 1)
uniform_distribution	/usr/include/boost/math/distributions/uniform.hpp	/^  class uniform_distribution$/;"	c	namespace:boost::math
unknown_precision	/usr/include/boost/math/special_functions/detail/fp_traits.hpp	/^struct unknown_precision{};$/;"	s	namespace:boost::math::detail
unknowns	/usr/include/boost/math/tools/remez.hpp	/^   unsigned unknowns;             \/\/ Total number of unknowns.$/;"	m	class:boost::math::tools::remez_minimax	access:private
unpack_0	/usr/include/boost/math/tools/roots.hpp	/^inline void unpack_0(const Tuple& t, T& val)$/;"	f	namespace:boost::math::tools::detail	signature:(const Tuple& t, T& val)
unpack_and_append	/usr/include/boost/math/tools/test_data.hpp	/^inline void unpack_and_append(Seq& s, const Item& data)$/;"	f	namespace:boost::math::tools::detail	signature:(Seq& s, const Item& data)
unpack_and_append	/usr/include/boost/math/tools/test_data.hpp	/^inline void unpack_and_append(Seq& s, const Item& data, const boost::false_type&)$/;"	f	namespace:boost::math::tools::detail	signature:(Seq& s, const Item& data, const boost::false_type&)
unpack_and_append	/usr/include/boost/math/tools/test_data.hpp	/^inline void unpack_and_append(Seq& s, const Item& data, const boost::true_type&)$/;"	f	namespace:boost::math::tools::detail	signature:(Seq& s, const Item& data, const boost::true_type&)
unpack_and_append_tuple	/usr/include/boost/math/tools/test_data.hpp	/^inline void unpack_and_append_tuple(Seq& s,$/;"	f	namespace:boost::math::tools::detail	signature:(Seq& s, const Item& data, const boost::integral_constant<int, N>&, const boost::false_type&)
unpack_and_append_tuple	/usr/include/boost/math/tools/test_data.hpp	/^inline void unpack_and_append_tuple(Seq& s,$/;"	f	namespace:boost::math::tools::detail	signature:(Seq& s, const Item& data, const boost::integral_constant<int, N>&, const boost::true_type&)
unreal	/usr/include/boost/math/octonion.hpp	/^        inline octonion<T>                        unreal(octonion<T> const & o)$/;"	f	namespace:boost::math	signature:(octonion<T> const & o)
unreal	/usr/include/boost/math/quaternion.hpp	/^        inline quaternion<T>                    unreal(quaternion<T> const & q)$/;"	f	namespace:boost::math	signature:(quaternion<T> const & q)
upper	/usr/include/boost/math/distributions/triangular.hpp	/^    RealType upper()const$/;"	f	class:boost::math::triangular_distribution	access:public	signature:() const
upper	/usr/include/boost/math/distributions/uniform.hpp	/^    RealType upper()const$/;"	f	class:boost::math::uniform_distribution	access:public	signature:() const
upper_gamma_fraction	/usr/include/boost/math/special_functions/gamma.hpp	/^inline T upper_gamma_fraction(T a, T z, T eps)$/;"	f	namespace:boost::math::detail	signature:(T a, T z, T eps)
upper_incomplete_gamma_fract	/usr/include/boost/math/special_functions/gamma.hpp	/^   upper_incomplete_gamma_fract(T a1, T z1)$/;"	f	struct:boost::math::detail::upper_incomplete_gamma_fract	access:public	signature:(T a1, T z1)
upper_incomplete_gamma_fract	/usr/include/boost/math/special_functions/gamma.hpp	/^struct upper_incomplete_gamma_fract$/;"	s	namespace:boost::math::detail
user_denorm_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_denorm_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
user_domain_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_domain_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
user_error	/usr/include/boost/math/policies/policy.hpp	/^   user_error = 3$/;"	e	enum:boost::math::policies::error_policy_type
user_evaluation_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_evaluation_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
user_indeterminate_result_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_indeterminate_result_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
user_overflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_overflow_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
user_pole_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_pole_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
user_rounding_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_rounding_error(const char* function, const char* message, const T& val, const TargetType& t);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val, const TargetType& t)
user_underflow_error	/usr/include/boost/math/policies/error_handling.hpp	/^T user_underflow_error(const char* function, const char* message, const T& val);$/;"	p	namespace:boost::math::policies	signature:(const char* function, const char* message, const T& val)
v	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType v;$/;"	m	struct:boost::math::detail::non_centrality_finder	access:private
v	/usr/include/boost/math/distributions/non_central_t.hpp	/^         RealType v;   \/\/ degrees of freedom$/;"	m	class:boost::math::non_central_t_distribution	access:private
v	/usr/include/boost/math/special_functions/bessel.hpp	/^   unsigned v;$/;"	m	struct:boost::math::detail::sph_bessel_j_small_z_series_term	access:private
v	/usr/include/boost/math/special_functions/detail/bessel_ik.hpp	/^   T v;$/;"	m	struct:boost::math::detail::cyl_bessel_i_small_z	access:private
v	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T v;$/;"	m	struct:boost::math::detail::bessel_j_small_z_series_term	access:private
v	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T v;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_a	access:private
v	/usr/include/boost/math/special_functions/detail/bessel_jy_series.hpp	/^   T v;$/;"	m	struct:boost::math::detail::bessel_y_small_z_series_term_b	access:private
v1	/usr/include/boost/math/distributions/non_central_f.hpp	/^         RealType v1;   \/\/ alpha.$/;"	m	class:boost::math::non_central_f_distribution	access:private
v2	/usr/include/boost/math/distributions/non_central_f.hpp	/^         RealType v2;   \/\/ beta.$/;"	m	class:boost::math::non_central_f_distribution	access:private
value	/usr/include/boost/math/bindings/e_float.hpp	/^   ::e_float const& value()const{ return m_value; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:() const
value	/usr/include/boost/math/bindings/e_float.hpp	/^   ::e_float& value(){ return m_value; }$/;"	f	class:boost::math::ef::e_float	access:public	signature:()
value	/usr/include/boost/math/bindings/rr.hpp	/^   NTL::RR const& value()const{ return m_value; }$/;"	f	class:boost::math::ntl::RR::NTL	access:public	signature:() const
value	/usr/include/boost/math/bindings/rr.hpp	/^   NTL::RR& value(){ return m_value; }$/;"	f	class:boost::math::ntl::RR	access:public	signature:()
value	/usr/include/boost/math/concepts/real_concept.hpp	/^   real_concept_base_type value()const{ return m_value; }$/;"	f	class:boost::math::concepts::real_concept	access:public	signature:() const
value	/usr/include/boost/math/concepts/std_real_concept.hpp	/^   std_real_concept_base_type value()const{ return m_value; }$/;"	f	class:boost::math::concepts::std_real_concept	access:public	signature:() const
value	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   T value;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_result_entry	access:public
value	/usr/include/boost/math/policies/policy.hpp	/^      (Digits2::value > ::boost::math::policies::detail::precision<Digits10,Digits2>::digits2_type::value),$/;"	t	class:boost::math::policies::detail::precision::mpl::if_c::boost::math::policies::detail::precision::digits2_type	access:public
value	/usr/include/boost/math/policies/policy.hpp	/^      (Digits2::value > digits2_type::value),$/;"	t	class:boost::math::policies::detail::precision::digits2_type	access:public
value	/usr/include/boost/math/special_functions/detail/unchecked_factorial.hpp	/^const unsigned max_factorial<T>::value;$/;"	m	class:boost::math::max_factorial
value_type	/usr/include/boost/math/concepts/distributions.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::concepts::distribution_archetype	access:public
value_type	/usr/include/boost/math/concepts/distributions.hpp	/^   typedef typename Distribution::value_type value_type;$/;"	t	struct:boost::math::concepts::DistributionConcept	access:public
value_type	/usr/include/boost/math/distributions/bernoulli.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::bernoulli_distribution	access:public
value_type	/usr/include/boost/math/distributions/beta.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::beta_distribution	access:public
value_type	/usr/include/boost/math/distributions/binomial.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::binomial_distribution	access:public
value_type	/usr/include/boost/math/distributions/cauchy.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::cauchy_distribution	access:public
value_type	/usr/include/boost/math/distributions/chi_squared.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::chi_squared_distribution	access:public
value_type	/usr/include/boost/math/distributions/detail/generic_quantile.hpp	/^   typedef typename Dist::value_type value_type;$/;"	t	struct:boost::math::detail::generic_quantile_finder	access:public
value_type	/usr/include/boost/math/distributions/detail/inv_discrete_quantile.hpp	/^   typedef typename Dist::value_type value_type;$/;"	t	struct:boost::math::detail::distribution_quantile_finder	access:public
value_type	/usr/include/boost/math/distributions/exponential.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::exponential_distribution	access:public
value_type	/usr/include/boost/math/distributions/extreme_value.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::extreme_value_distribution	access:public
value_type	/usr/include/boost/math/distributions/fisher_f.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::fisher_f_distribution	access:public
value_type	/usr/include/boost/math/distributions/gamma.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::gamma_distribution	access:public
value_type	/usr/include/boost/math/distributions/geometric.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::geometric_distribution	access:public
value_type	/usr/include/boost/math/distributions/hypergeometric.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::hypergeometric_distribution	access:public
value_type	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::inverse_chi_squared_distribution	access:public
value_type	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::inverse_gamma_distribution	access:public
value_type	/usr/include/boost/math/distributions/inverse_gaussian.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::inverse_gaussian_distribution	access:public
value_type	/usr/include/boost/math/distributions/laplace.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::laplace_distribution	access:public
value_type	/usr/include/boost/math/distributions/logistic.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::logistic_distribution	access:public
value_type	/usr/include/boost/math/distributions/lognormal.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::lognormal_distribution	access:public
value_type	/usr/include/boost/math/distributions/negative_binomial.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::negative_binomial_distribution	access:public
value_type	/usr/include/boost/math/distributions/non_central_beta.hpp	/^         typedef RealType value_type;$/;"	t	class:boost::math::non_central_beta_distribution	access:public
value_type	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^         typedef RealType value_type;$/;"	t	class:boost::math::non_central_chi_squared_distribution	access:public
value_type	/usr/include/boost/math/distributions/non_central_f.hpp	/^         typedef RealType value_type;$/;"	t	class:boost::math::non_central_f_distribution	access:public
value_type	/usr/include/boost/math/distributions/non_central_t.hpp	/^         typedef RealType value_type;$/;"	t	class:boost::math::non_central_t_distribution	access:public
value_type	/usr/include/boost/math/distributions/normal.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::normal_distribution	access:public
value_type	/usr/include/boost/math/distributions/pareto.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::pareto_distribution	access:public
value_type	/usr/include/boost/math/distributions/poisson.hpp	/^      typedef RealType value_type;$/;"	t	class:boost::math::poisson_distribution	access:public
value_type	/usr/include/boost/math/distributions/rayleigh.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::rayleigh_distribution	access:public
value_type	/usr/include/boost/math/distributions/skew_normal.hpp	/^    typedef RealType value_type;$/;"	t	class:boost::math::skew_normal_distribution	access:public
value_type	/usr/include/boost/math/distributions/students_t.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::students_t_distribution	access:public
value_type	/usr/include/boost/math/distributions/triangular.hpp	/^    typedef RealType value_type;$/;"	t	class:boost::math::triangular_distribution	access:public
value_type	/usr/include/boost/math/distributions/uniform.hpp	/^    typedef RealType value_type;$/;"	t	class:boost::math::uniform_distribution	access:public
value_type	/usr/include/boost/math/distributions/weibull.hpp	/^   typedef RealType value_type;$/;"	t	class:boost::math::weibull_distribution	access:public
value_type	/usr/include/boost/math/octonion.hpp	/^            typedef T value_type;$/;"	t	class:boost::math::octonion	access:public
value_type	/usr/include/boost/math/octonion.hpp	/^            typedef double value_type;$/;"	t	class:boost::math::octonion	access:public
value_type	/usr/include/boost/math/octonion.hpp	/^            typedef float value_type;$/;"	t	class:boost::math::octonion	access:public
value_type	/usr/include/boost/math/octonion.hpp	/^            typedef long double value_type;$/;"	t	class:boost::math::octonion	access:public
value_type	/usr/include/boost/math/quaternion.hpp	/^            typedef T value_type;$/;"	t	class:boost::math::quaternion	access:public
value_type	/usr/include/boost/math/quaternion.hpp	/^            typedef double value_type;$/;"	t	class:boost::math::quaternion	access:public
value_type	/usr/include/boost/math/quaternion.hpp	/^            typedef float value_type;$/;"	t	class:boost::math::quaternion	access:public
value_type	/usr/include/boost/math/quaternion.hpp	/^            typedef long double value_type;$/;"	t	class:boost::math::quaternion	access:public
value_type	/usr/include/boost/math/tools/fraction.hpp	/^       typedef typename Gen::result_type value_type;$/;"	t	struct:boost::math::tools::detail::fraction_traits_pair	access:public
value_type	/usr/include/boost/math/tools/fraction.hpp	/^       typedef typename Gen::result_type value_type;$/;"	t	struct:boost::math::tools::detail::fraction_traits_simple	access:public
value_type	/usr/include/boost/math/tools/polynomial.hpp	/^   typedef typename std::vector<T>::value_type value_type;$/;"	t	class:boost::math::tools::polynomial	access:public
value_type	/usr/include/boost/math/tools/test.hpp	/^   typedef typename row_type::value_type value_type;$/;"	t	struct:boost::math::tools::calculate_result_type	access:public
value_type	/usr/include/boost/math/tools/test_data.hpp	/^   typedef row_type value_type;$/;"	t	class:boost::math::tools::test_data	access:public
variance	/usr/include/boost/math/concepts/distributions.hpp	/^RealType variance(const distribution_archetype<RealType>& dist);$/;"	p	namespace:boost::math::concepts	signature:(const distribution_archetype<RealType>& dist)
variance	/usr/include/boost/math/distributions/bernoulli.hpp	/^    inline RealType variance(const bernoulli_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const bernoulli_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/beta.hpp	/^    inline RealType variance(const beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const beta_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/binomial.hpp	/^      inline RealType variance(const binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const binomial_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/cauchy.hpp	/^inline RealType variance(const cauchy_distribution<RealType, Policy>& \/*dist*\/)$/;"	f	namespace:boost::math	signature:(const cauchy_distribution<RealType, Policy>& )
variance	/usr/include/boost/math/distributions/chi_squared.hpp	/^inline RealType variance(const chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const chi_squared_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^inline typename Distribution::value_type variance(const Distribution& dist)$/;"	f	namespace:boost::math	signature:(const Distribution& dist)
variance	/usr/include/boost/math/distributions/detail/derived_accessors.hpp	/^typename Distribution::value_type variance(const Distribution& dist);$/;"	p	namespace:boost::math	signature:(const Distribution& dist)
variance	/usr/include/boost/math/distributions/fisher_f.hpp	/^inline RealType variance(const fisher_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const fisher_f_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/gamma.hpp	/^inline RealType variance(const gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const gamma_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/geometric.hpp	/^    inline RealType variance(const geometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const geometric_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/hypergeometric.hpp	/^   inline RealType variance(const hypergeometric_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const hypergeometric_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/inverse_chi_squared.hpp	/^inline RealType variance(const inverse_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_chi_squared_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/inverse_gamma.hpp	/^inline RealType variance(const inverse_gamma_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const inverse_gamma_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/logistic.hpp	/^    inline RealType variance(const logistic_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const logistic_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/lognormal.hpp	/^inline RealType variance(const lognormal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const lognormal_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/negative_binomial.hpp	/^    inline RealType variance(const negative_binomial_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const negative_binomial_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/non_central_beta.hpp	/^      inline RealType variance(const non_central_beta_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_beta_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^      inline RealType variance(const non_central_chi_squared_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_chi_squared_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/non_central_f.hpp	/^      inline RealType variance(const non_central_f_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_f_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/non_central_t.hpp	/^         T variance(T v, T delta, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(T v, T delta, const Policy& pol)
variance	/usr/include/boost/math/distributions/non_central_t.hpp	/^      inline RealType variance(const non_central_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const non_central_t_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/pareto.hpp	/^    inline RealType variance(const pareto_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const pareto_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/poisson.hpp	/^    inline RealType variance(const poisson_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const poisson_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/rayleigh.hpp	/^inline RealType variance(const rayleigh_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const rayleigh_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/skew_normal.hpp	/^  inline RealType variance(const skew_normal_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const skew_normal_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/students_t.hpp	/^inline RealType variance(const students_t_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const students_t_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/triangular.hpp	/^  inline RealType variance(const triangular_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const triangular_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/uniform.hpp	/^  inline RealType variance(const uniform_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const uniform_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/distributions/weibull.hpp	/^inline RealType variance(const weibull_distribution<RealType, Policy>& dist)$/;"	f	namespace:boost::math	signature:(const weibull_distribution<RealType, Policy>& dist)
variance	/usr/include/boost/math/tools/stats.hpp	/^   T variance()const$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
variance	/usr/include/boost/math/tools/test.hpp	/^   T variance()const{ return stat.variance(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
variance1	/usr/include/boost/math/tools/stats.hpp	/^   T variance1()const$/;"	f	class:boost::math::tools::stats	access:public	signature:() const
variance1	/usr/include/boost/math/tools/test.hpp	/^   T variance1()const{ return stat.variance1(); }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
vector_type	/usr/include/boost/math/tools/remez.hpp	/^   typedef boost::numeric::ublas::vector<T> vector_type;$/;"	t	class:boost::math::tools::remez_minimax	access:public
verify_exp_x	/usr/include/boost/math/distributions/exponential.hpp	/^inline bool verify_exp_x(const char* function, RealType x, RealType* presult, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType x, RealType* presult, const Policy& pol)
verify_lambda	/usr/include/boost/math/distributions/exponential.hpp	/^inline bool verify_lambda(const char* function, RealType l, RealType* presult, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType l, RealType* presult, const Policy& pol)
verify_rayleigh_x	/usr/include/boost/math/distributions/rayleigh.hpp	/^  inline bool verify_rayleigh_x(const char* function, RealType x, RealType* presult, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType x, RealType* presult, const Policy& pol)
verify_scale_b	/usr/include/boost/math/distributions/extreme_value.hpp	/^inline bool verify_scale_b(const char* function, RealType b, RealType* presult, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType b, RealType* presult, const Policy& pol)
verify_sigma	/usr/include/boost/math/distributions/rayleigh.hpp	/^  inline bool verify_sigma(const char* function, RealType sigma, RealType* presult, const Policy& pol)$/;"	f	namespace:boost::math::detail	signature:(const char* function, RealType sigma, RealType* presult, const Policy& pol)
weibull	/usr/include/boost/math/distributions/weibull.hpp	/^typedef weibull_distribution<double> weibull;$/;"	t	namespace:boost::math
weibull_distribution	/usr/include/boost/math/distributions/weibull.hpp	/^   weibull_distribution(RealType shape, RealType scale = 1)$/;"	f	class:boost::math::weibull_distribution	access:public	signature:(RealType shape, RealType scale = 1)
weibull_distribution	/usr/include/boost/math/distributions/weibull.hpp	/^class weibull_distribution$/;"	c	namespace:boost::math
worst	/usr/include/boost/math/tools/test.hpp	/^   unsigned worst()const{ return worst_case; }$/;"	f	struct:boost::math::tools::test_result	access:public	signature:() const
worst_case	/usr/include/boost/math/tools/test.hpp	/^   unsigned worst_case;                 \/\/ Index of the worst case test.$/;"	m	struct:boost::math::tools::test_result	access:private
write_code	/usr/include/boost/math/tools/test_data.hpp	/^std::ostream& write_code(std::ostream& os,$/;"	f	namespace:boost::math::tools	signature:(std::ostream& os, const test_data<T>& data, const char* name)
write_csv	/usr/include/boost/math/tools/test_data.hpp	/^inline std::basic_ostream<charT, traits>& write_csv(std::basic_ostream<charT, traits>& os,$/;"	f	namespace:boost::math::tools	signature:(std::basic_ostream<charT, traits>& os, const test_data<T>& data)
write_csv	/usr/include/boost/math/tools/test_data.hpp	/^std::basic_ostream<charT, traits>& write_csv(std::basic_ostream<charT, traits>& os,$/;"	f	namespace:boost::math::tools	signature:(std::basic_ostream<charT, traits>& os, const test_data<T>& data, const charT* separator)
x	/usr/include/boost/math/distributions/detail/hypergeometric_pdf.hpp	/^   const unsigned x;$/;"	m	struct:boost::math::detail::hypergeometric_pdf_prime_loop_data	access:public
x	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType x;$/;"	m	struct:boost::math::detail::degrees_of_freedom_finder	access:private
x	/usr/include/boost/math/distributions/non_central_chi_squared.hpp	/^            RealType x;$/;"	m	struct:boost::math::detail::non_centrality_finder	access:private
x	/usr/include/boost/math/special_functions/beta.hpp	/^   T a, b, x, y;$/;"	m	struct:boost::math::detail::ibeta_fraction2_t	access:private
x	/usr/include/boost/math/special_functions/beta.hpp	/^   T result, x, apn, poch;$/;"	m	struct:boost::math::detail::ibeta_series_t	access:private
x	/usr/include/boost/math/special_functions/gamma.hpp	/^   T result, x, apn;$/;"	m	struct:boost::math::detail::small_gamma2_series	access:private
x_k	/usr/include/boost/math/special_functions/expint.hpp	/^   T x_k;$/;"	m	struct:boost::math::detail::expint_series	access:private
xx	/usr/include/boost/math/special_functions/erf.hpp	/^   T xx;$/;"	m	struct:boost::math::detail::erf_asympt_series_t	access:private
y	/usr/include/boost/math/special_functions/beta.hpp	/^   T a, b, x, y;$/;"	m	struct:boost::math::detail::ibeta_fraction2_t	access:private
z	/usr/include/boost/math/distributions/non_central_beta.hpp	/^            T a1, a2, b1, b2, z, term, k;$/;"	m	struct:boost::math::detail::hypergeometric_2F2_sum	access:public
z	/usr/include/boost/math/special_functions/detail/gamma_inva.hpp	/^   T z, p;$/;"	m	struct:boost::math::detail::gamma_inva_t	access:private
z	/usr/include/boost/math/special_functions/detail/ibeta_inv_ab.hpp	/^   T b, z, p;$/;"	m	struct:boost::math::detail::beta_inv_ab_t	access:private
z	/usr/include/boost/math/special_functions/expint.hpp	/^   T z;$/;"	m	struct:boost::math::detail::expint_i_series	access:private
z	/usr/include/boost/math/special_functions/expint.hpp	/^   T z;$/;"	m	struct:boost::math::detail::expint_series	access:private
z	/usr/include/boost/math/special_functions/gamma.hpp	/^   T a, z, result;$/;"	m	struct:boost::math::detail::lower_incomplete_gamma_series	access:private
z	/usr/include/boost/math/special_functions/gamma.hpp	/^   T z, a;$/;"	m	struct:boost::math::detail::upper_incomplete_gamma_fract	access:private
z1	/usr/include/boost/math/tools/test_data.hpp	/^   T z1, z2;$/;"	m	struct:boost::math::tools::parameter_info	access:public
z2	/usr/include/boost/math/tools/test_data.hpp	/^   T z1, z2;$/;"	m	struct:boost::math::tools::parameter_info	access:public
z_k	/usr/include/boost/math/special_functions/expint.hpp	/^   T z_k;$/;"	m	struct:boost::math::detail::expint_i_series	access:private
zero_points	/usr/include/boost/math/tools/remez.hpp	/^   vector_type const& zero_points()const$/;"	f	class:boost::math::tools::remez_minimax	access:public	signature:() const
zeros	/usr/include/boost/math/tools/remez.hpp	/^   vector_type zeros;             \/\/ Location of points of zero error from last iteration, plus the two end points.$/;"	m	class:boost::math::tools::remez_minimax	access:private
zeta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type zeta(T s);$/;"	p	namespace:boost::math	signature:(T s)
zeta	/usr/include/boost/math/special_functions/math_fwd.hpp	/^   typename tools::promote_args<T>::type zeta(T s, const Policy&);$/;"	p	namespace:boost::math	signature:(T s, const Policy&)
zeta	/usr/include/boost/math/special_functions/zeta.hpp	/^inline typename tools::promote_args<T>::type zeta(T s)$/;"	f	namespace:boost::math	signature:(T s)
zeta	/usr/include/boost/math/special_functions/zeta.hpp	/^inline typename tools::promote_args<T>::type zeta(T s, const Policy&)$/;"	f	namespace:boost::math	signature:(T s, const Policy&)
zeta_derivative_2	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T zeta_derivative_2(unsigned n)$/;"	f	namespace:boost::math::constants::detail::detail	signature:(unsigned n)
zeta_imp	/usr/include/boost/math/special_functions/zeta.hpp	/^T zeta_imp(T s, T sc, const Policy& pol, const Tag& tag)$/;"	f	namespace:boost::math::detail	signature:(T s, T sc, const Policy& pol, const Tag& tag)
zeta_imp_prec	/usr/include/boost/math/special_functions/zeta.hpp	/^T zeta_imp_prec(T s, T sc, const Policy& pol, const mpl::int_<0>&)$/;"	f	namespace:boost::math::detail	signature:(T s, T sc, const Policy& pol, const mpl::int_<0>&)
zeta_imp_prec	/usr/include/boost/math/special_functions/zeta.hpp	/^T zeta_imp_prec(T s, T sc, const Policy&, const mpl::int_<113>&)$/;"	f	namespace:boost::math::detail	signature:(T s, T sc, const Policy&, const mpl::int_<113>&)
zeta_imp_prec	/usr/include/boost/math/special_functions/zeta.hpp	/^T zeta_imp_prec(T s, T sc, const Policy&, const mpl::int_<64>&)$/;"	f	namespace:boost::math::detail	signature:(T s, T sc, const Policy&, const mpl::int_<64>&)
zeta_imp_prec	/usr/include/boost/math/special_functions/zeta.hpp	/^inline T zeta_imp_prec(T s, T sc, const Policy&, const mpl::int_<53>&)$/;"	f	namespace:boost::math::detail	signature:(T s, T sc, const Policy&, const mpl::int_<53>&)
zeta_initializer	/usr/include/boost/math/special_functions/zeta.hpp	/^struct zeta_initializer$/;"	s	namespace:boost::math::detail
zeta_polynomial_series	/usr/include/boost/math/constants/calculate_constants.hpp	/^T zeta_polynomial_series(T s, T sc, int digits)$/;"	f	namespace:boost::math::constants::detail::khinchin_detail	signature:(T s, T sc, int digits)
zeta_polynomial_series	/usr/include/boost/math/special_functions/zeta.hpp	/^T zeta_polynomial_series(T s, T sc, Policy const &)$/;"	f	namespace:boost::math::detail	signature:(T s, T sc, Policy const &)
zeta_series_2	/usr/include/boost/math/constants/calculate_constants.hpp	/^T zeta_series_2(unsigned digits)$/;"	f	namespace:boost::math::constants::detail::detail	signature:(unsigned digits)
zeta_series_derivative_2	/usr/include/boost/math/constants/calculate_constants.hpp	/^T zeta_series_derivative_2(unsigned digits)$/;"	f	namespace:boost::math::constants::detail::detail	signature:(unsigned digits)
zeta_series_derivative_lead_2	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T zeta_series_derivative_lead_2()$/;"	f	namespace:boost::math::constants::detail::detail	signature:()
zeta_series_lead_2	/usr/include/boost/math/constants/calculate_constants.hpp	/^inline T zeta_series_lead_2()$/;"	f	namespace:boost::math::constants::detail::detail	signature:()
~fpu_guard	/usr/include/boost/math/tools/config.hpp	/^      ~fpu_guard()$/;"	f	struct:boost::math::detail::fpu_guard	access:public	signature:()
