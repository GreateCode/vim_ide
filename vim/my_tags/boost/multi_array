!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BASE_RG071801_HPP	/usr/include/boost/multi_array/base.hpp	14;"	d
BOOST_ALGORITHM_RG071801_HPP	/usr/include/boost/multi_array/algorithm.hpp	2;"	d
BOOST_EXTENT_GEN_RG071801_HPP	/usr/include/boost/multi_array/extent_gen.hpp	14;"	d
BOOST_EXTENT_RANGE_RG071801_HPP	/usr/include/boost/multi_array/extent_range.hpp	14;"	d
BOOST_INDEX_GEN_RG071801_HPP	/usr/include/boost/multi_array/index_gen.hpp	14;"	d
BOOST_INDEX_RANGE_RG071801_HPP	/usr/include/boost/multi_array/index_range.hpp	14;"	d
BOOST_MULTI_ARRAY_CONCEPT_CHECKS_RG110101_HPP	/usr/include/boost/multi_array/concept_checks.hpp	14;"	d
BOOST_MULTI_ARRAY_REF_RG071801_HPP	/usr/include/boost/multi_array/multi_array_ref.hpp	14;"	d
BOOST_MULTI_ARRAY_TYPES_RG071801_HPP	/usr/include/boost/multi_array/types.hpp	15;"	d
BOOST_MULTI_ARRAY_VIEW_RG071301_HPP	/usr/include/boost/multi_array/view.hpp	14;"	d
BOOST_STATIC_CONSTANT	/usr/include/boost/multi_array/base.hpp	/^    BOOST_STATIC_CONSTANT(std::size_t, dimensionality = NumDims::value);$/;"	p	struct:boost::detail::multi_array::value_accessor_generator	access:public	signature:(std::size_t, dimensionality = NumDims::value)
BOOST_STATIC_CONSTANT	/usr/include/boost/multi_array/base.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, dimensionality = NumDims);$/;"	p	class:boost::detail::multi_array::multi_array_impl_base	access:public	signature:(std::size_t, dimensionality = NumDims)
BOOST_STORAGE_ORDER_RG071801_HPP	/usr/include/boost/multi_array/storage_order.hpp	14;"	d
COLLECTION_CONCEPT_RG103101_HPP	/usr/include/boost/multi_array/collection_concept.hpp	14;"	d
COPY_ARRAY_RG092101_HPP	/usr/include/boost/multi_array/copy_array.hpp	14;"	d
Choice	/usr/include/boost/multi_array/range_list.hpp	/^  typedef typename range_list_gen_helper<NumRanges>::choice Choice;$/;"	t	struct:boost::detail::multi_array::range_list_generator	access:private
ConstMultiArrayConcept	/usr/include/boost/multi_array/concept_checks.hpp	/^  struct ConstMultiArrayConcept$/;"	s	namespace:boost::multi_array_concepts
ITERATOR_RG071801_HPP	/usr/include/boost/multi_array/iterator.hpp	14;"	d
MutableMultiArrayConcept	/usr/include/boost/multi_array/concept_checks.hpp	/^  struct MutableMultiArrayConcept$/;"	s	namespace:boost::multi_array_concepts
RANGE_LIST_RG072501_HPP	/usr/include/boost/multi_array/range_list.hpp	14;"	d
SUBARRAY_RG071801_HPP	/usr/include/boost/multi_array/subarray.hpp	14;"	d
a	/usr/include/boost/multi_array/concept_checks.hpp	/^    Array a;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
a	/usr/include/boost/multi_array/concept_checks.hpp	/^    Array a;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
access	/usr/include/boost/multi_array/base.hpp	/^  Reference access(boost::type<Reference>,index idx,TPtr base,$/;"	f	class:boost::detail::multi_array::value_accessor_n	access:protected	signature:(boost::type<Reference>,index idx,TPtr base, const size_type* extents, const index* strides, const index* index_bases) const
access	/usr/include/boost/multi_array/base.hpp	/^  Reference access(boost::type<Reference>,index idx,TPtr base,$/;"	f	class:boost::detail::multi_array::value_accessor_one	access:protected	signature:(boost::type<Reference>,index idx,TPtr base, const size_type* extents, const index* strides, const index* index_bases) const
access_element	/usr/include/boost/multi_array/base.hpp	/^  Reference access_element(boost::type<Reference>,$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:(boost::type<Reference>, const IndexList& indices, TPtr base, const size_type* extents, const index* strides, const index* index_bases) const
access_t	/usr/include/boost/multi_array/iterator.hpp	/^  typedef detail::multi_array::associated_types<T,NumDims> access_t;$/;"	t	class:boost::detail::multi_array::array_iterator	access:private
advance	/usr/include/boost/multi_array/iterator.hpp	/^  void advance(DifferenceType n) {$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:(DifferenceType n)
all	/usr/include/boost/multi_array/index_range.hpp	/^    static index_range all() $/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:()
all_dims_ascending	/usr/include/boost/multi_array/storage_order.hpp	/^    bool all_dims_ascending() const {$/;"	f	class:boost::general_storage_order	access:public	signature:() const
array_iterator	/usr/include/boost/multi_array/iterator.hpp	/^  array_iterator($/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:( const array_iterator<T,OPtr,NumDims,ORef,Cat>& rhs , typename boost::enable_if_convertible<OPtr,TPtr>::type* = 0 )
array_iterator	/usr/include/boost/multi_array/iterator.hpp	/^  array_iterator() {}$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:()
array_iterator	/usr/include/boost/multi_array/iterator.hpp	/^  array_iterator(index idx, TPtr base, const size_type* extents,$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:(index idx, TPtr base, const size_type* extents, const index* strides, const index* index_base)
array_iterator	/usr/include/boost/multi_array/iterator.hpp	/^class array_iterator$/;"	c	namespace:boost::detail::multi_array	inherits:iterator_facade,mpl::aux::msvc_eti_base::type
array_view	/usr/include/boost/multi_array/base.hpp	/^  struct array_view {$/;"	s	class:boost::detail::multi_array::multi_array_impl_base	access:public
array_view	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  struct array_view {$/;"	s	class:boost::const_multi_array_ref	access:public
array_view	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  struct array_view {$/;"	s	class:boost::multi_array_ref	access:public
array_view	/usr/include/boost/multi_array/subarray.hpp	/^  struct array_view {$/;"	s	class:boost::detail::multi_array::const_sub_array	access:public
array_view	/usr/include/boost/multi_array/subarray.hpp	/^  struct array_view {$/;"	s	class:boost::detail::multi_array::sub_array	access:public
array_view	/usr/include/boost/multi_array/view.hpp	/^  struct array_view {$/;"	s	class:boost::detail::multi_array::const_multi_array_view	access:public
array_view	/usr/include/boost/multi_array/view.hpp	/^  struct array_view {$/;"	s	class:boost::detail::multi_array::multi_array_view	access:public
array_view_gen	/usr/include/boost/multi_array/view.hpp	/^class array_view_gen {$/;"	c	namespace:boost
ascending	/usr/include/boost/multi_array/storage_order.hpp	/^    bool ascending(size_type dim) const { return ascending_[dim]; }$/;"	f	class:boost::general_storage_order	access:public	signature:(size_type dim) const
ascending_	/usr/include/boost/multi_array/storage_order.hpp	/^    boost::array<bool,NumDims> ascending_;$/;"	m	class:boost::general_storage_order	access:protected
assign	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  void assign(InputIterator begin, InputIterator end) {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(InputIterator begin, InputIterator end)
associated_types	/usr/include/boost/multi_array/base.hpp	/^struct associated_types$/;"	s	namespace:boost::detail::multi_array	inherits:mpl::aux::msvc_eti_base::type
associated_types	/usr/include/boost/multi_array/base.hpp	/^struct associated_types$/;"	s	namespace:boost::detail::multi_array	inherits:value_accessor_generator::type
associated_types	/usr/include/boost/multi_array/base.hpp	/^struct associated_types<int,int> : eti_value_accessor {};$/;"	s	namespace:boost::detail::multi_array	inherits:eti_value_accessor
base_	/usr/include/boost/multi_array/iterator.hpp	/^  TPtr base_;$/;"	m	class:boost::detail::multi_array::array_iterator	access:public
base_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  TPtr base_;$/;"	m	class:boost::const_multi_array_ref	access:public
base_	/usr/include/boost/multi_array/subarray.hpp	/^  TPtr base_;$/;"	m	class:boost::detail::multi_array::const_sub_array	access:public
base_	/usr/include/boost/multi_array/view.hpp	/^  TPtr base_;$/;"	m	class:boost::detail::multi_array::const_multi_array_view	access:public
begin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_iterator begin() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
begin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_iterator begin() const {$/;"	f	class:boost::multi_array_ref	access:public	signature:() const
begin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  iterator begin() {$/;"	f	class:boost::multi_array_ref	access:public	signature:()
begin	/usr/include/boost/multi_array/subarray.hpp	/^  const_iterator begin() const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
begin	/usr/include/boost/multi_array/subarray.hpp	/^  const_iterator begin() const {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:() const
begin	/usr/include/boost/multi_array/subarray.hpp	/^  iterator begin() {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:()
begin	/usr/include/boost/multi_array/view.hpp	/^  const_iterator begin() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
begin	/usr/include/boost/multi_array/view.hpp	/^  const_iterator begin() const {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:() const
begin	/usr/include/boost/multi_array/view.hpp	/^  iterator begin() {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:()
bind	/usr/include/boost/multi_array/range_list.hpp	/^  struct bind {$/;"	s	struct:boost::detail::multi_array::choose_range_list_n	access:public
bind	/usr/include/boost/multi_array/range_list.hpp	/^  struct bind {$/;"	s	struct:boost::detail::multi_array::choose_range_list_zero	access:public
boost	/usr/include/boost/multi_array/algorithm.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/collection_concept.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/concept_checks.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/copy_array.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/extent_gen.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/extent_range.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/index_gen.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/index_range.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/multi_array_ref.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/range_list.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/storage_order.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/subarray.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/types.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/multi_array/view.hpp	/^namespace boost {$/;"	n
boost::__anon1::extents	/usr/include/boost/multi_array/base.hpp	/^  multi_array_types::extent_gen extents;$/;"	m	namespace:boost::__anon1
boost::__anon1::indices	/usr/include/boost/multi_array/base.hpp	/^  multi_array_types::index_gen indices;$/;"	m	namespace:boost::__anon1
boost::array_view_gen	/usr/include/boost/multi_array/view.hpp	/^class array_view_gen {$/;"	c	namespace:boost
boost::array_view_gen::element	/usr/include/boost/multi_array/view.hpp	/^  typedef typename Array::element element;$/;"	t	class:boost::array_view_gen	access:private
boost::array_view_gen::type	/usr/include/boost/multi_array/view.hpp	/^  typedef boost::detail::multi_array::multi_array_view<element,N> type;$/;"	t	class:boost::array_view_gen	access:public
boost::c_storage_order	/usr/include/boost/multi_array/storage_order.hpp	/^  class c_storage_order $/;"	c	namespace:boost
boost::c_storage_order::operator general_storage_order<NumDims>	/usr/include/boost/multi_array/storage_order.hpp	/^    operator general_storage_order<NumDims>() const {$/;"	f	class:boost::c_storage_order	access:public	signature:() const
boost::c_storage_order::size_type	/usr/include/boost/multi_array/storage_order.hpp	/^    typedef detail::multi_array::size_type size_type;$/;"	t	class:boost::c_storage_order	access:private
boost::const_array_view_gen	/usr/include/boost/multi_array/view.hpp	/^class const_array_view_gen {$/;"	c	namespace:boost
boost::const_array_view_gen::element	/usr/include/boost/multi_array/view.hpp	/^  typedef typename Array::element element;$/;"	t	class:boost::const_array_view_gen	access:private
boost::const_array_view_gen::type	/usr/include/boost/multi_array/view.hpp	/^  typedef boost::detail::multi_array::const_multi_array_view<element,N> type;  $/;"	t	class:boost::const_array_view_gen	access:public
boost::const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^class const_multi_array_ref :$/;"	c	namespace:boost	inherits:detail::multi_array::multi_array_impl_base
boost::const_multi_array_ref::array_view	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  struct array_view {$/;"	s	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::array_view::type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::const_multi_array_ref::array_view	access:public
boost::const_multi_array_ref::assign	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  void assign(InputIterator begin, InputIterator end) {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(InputIterator begin, InputIterator end)
boost::const_multi_array_ref::base_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  TPtr base_;$/;"	m	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::begin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_iterator begin() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::const_array_view	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  struct const_array_view {$/;"	s	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::const_array_view::type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::const_multi_array_ref::const_array_view	access:public
boost::const_multi_array_ref::const_iterator	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::const_iterator const_iterator;$/;"	t	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_multi_array_ref(TPtr base,$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(TPtr base, const storage_order_type& so, const index * index_bases, const size_type* extents)
boost::const_multi_array_ref::const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_multi_array_ref(const const_multi_array_ref<T,NumDims,OPtr>& other)$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& other)
boost::const_multi_array_ref::const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit const_multi_array_ref(TPtr base, const ExtentList& extents) :$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(TPtr base, const ExtentList& extents)
boost::const_multi_array_ref::const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit const_multi_array_ref(TPtr base, const ExtentList& extents,$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(TPtr base, const ExtentList& extents, const general_storage_order<NumDims>& so)
boost::const_multi_array_ref::const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit const_multi_array_ref(TPtr base,$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(TPtr base, const detail::multi_array:: extent_gen<NumDims>& ranges)
boost::const_multi_array_ref::const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit const_multi_array_ref(TPtr base,$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(TPtr base, const detail::multi_array:: extent_gen<NumDims>& ranges, const general_storage_order<NumDims>& so)
boost::const_multi_array_ref::const_reference	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::const_reference const_reference;$/;"	t	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::const_reverse_iterator	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::data	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const element* data() const { return base_; }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::difference_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::difference_type difference_type;$/;"	t	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::directional_offset_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  index directional_offset_;$/;"	m	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::element	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::element element;$/;"	t	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::empty	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool empty() const { return size() == 0; }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::end	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_iterator end() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::extent_list_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  size_list extent_list_;$/;"	m	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::extent_range	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::extent_range extent_range;$/;"	t	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::index	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::index_base_list_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  index_list index_base_list_;$/;"	m	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::index_bases	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const index* index_bases() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::index_list	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef boost::array<index,NumDims> index_list;$/;"	t	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::init_from_extent_gen	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  void init_from_extent_gen(const$/;"	f	class:boost::const_multi_array_ref	access:private	signature:(const detail::multi_array:: extent_gen<NumDims>& ranges)
boost::const_multi_array_ref::init_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  void init_multi_array_ref(InputIterator extents_iter) {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(InputIterator extents_iter)
boost::const_multi_array_ref::max_size	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  size_type max_size() const { return num_elements(); }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::num_dimensions	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  size_type num_dimensions() const { return NumDims; }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::num_elements	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  size_type num_elements() const { return num_elements_; }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::num_elements_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  size_type num_elements_;$/;"	m	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::operator !=	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool operator!=(const$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& rhs) const
boost::const_multi_array_ref::operator ()	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const element& operator()(IndexList indices) const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(IndexList indices) const
boost::const_multi_array_ref::operator <	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool operator<(const$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& rhs) const
boost::const_multi_array_ref::operator <=	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool operator<=(const$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& rhs) const
boost::const_multi_array_ref::operator =	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_multi_array_ref& operator=(const const_multi_array_ref& other);$/;"	p	class:boost::const_multi_array_ref	access:private	signature:(const const_multi_array_ref& other)
boost::const_multi_array_ref::operator ==	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool operator==(const$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& rhs) const
boost::const_multi_array_ref::operator >	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool operator>(const$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& rhs) const
boost::const_multi_array_ref::operator >=	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool operator>=(const$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& rhs) const
boost::const_multi_array_ref::operator []	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_reference operator[](index idx) const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(index idx) const
boost::const_multi_array_ref::operator []	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  operator[](const detail::multi_array::$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const detail::multi_array:: index_gen<NumDims,NDims>& indices) const
boost::const_multi_array_ref::origin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const element* origin() const { return base_+origin_offset_; }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::origin_offset_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  index origin_offset_;$/;"	m	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::rbegin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_reverse_iterator rbegin() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::reindex	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  reindex(const BaseList& values) {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const BaseList& values)
boost::const_multi_array_ref::reindex	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  void reindex(index value) {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(index value)
boost::const_multi_array_ref::rend	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_reverse_iterator rend() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::reshape	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  void reshape(const SizeList& extents) {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const SizeList& extents)
boost::const_multi_array_ref::set_base_ptr	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  void set_base_ptr(TPtr new_base) { base_ = new_base; }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(TPtr new_base)
boost::const_multi_array_ref::shape	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const size_type* shape() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::size	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  size_type size() const { return extent_list_.front(); }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::size_list	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef boost::array<size_type,NumDims> size_list;$/;"	t	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::size_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::size_type size_type;$/;"	t	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::storage_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  storage_order_type storage_;$/;"	m	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::storage_order	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const storage_order_type& storage_order() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::storage_order_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef general_storage_order<NumDims> storage_order_type;$/;"	t	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::stride_list_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  index_list stride_list_;$/;"	m	class:boost::const_multi_array_ref	access:public
boost::const_multi_array_ref::strides	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const index* strides() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
boost::const_multi_array_ref::super_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef detail::multi_array::multi_array_impl_base<T,NumDims> super_type;$/;"	t	class:boost::const_multi_array_ref	access:private
boost::const_multi_array_ref::value_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::value_type value_type;$/;"	t	class:boost::const_multi_array_ref	access:public
boost::const_subarray_gen	/usr/include/boost/multi_array/subarray.hpp	/^class const_subarray_gen {$/;"	c	namespace:boost
boost::const_subarray_gen::element	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename Array::element element;$/;"	t	class:boost::const_subarray_gen	access:private
boost::const_subarray_gen::type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef boost::detail::multi_array::const_sub_array<element,N> type;  $/;"	t	class:boost::const_subarray_gen	access:public
boost::detail	/usr/include/boost/multi_array/algorithm.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/base.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/collection_concept.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/concept_checks.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/copy_array.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/extent_gen.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/extent_range.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/index_gen.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/index_range.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/iterator.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/range_list.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/subarray.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/types.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/multi_array/view.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail::multi_array	/usr/include/boost/multi_array/algorithm.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/base.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/collection_concept.hpp	/^namespace multi_array { \/\/ Old location for this$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/concept_checks.hpp	/^  namespace multi_array { \/\/ Old locations for these$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/copy_array.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/extent_gen.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/extent_range.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/index_gen.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/index_range.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/iterator.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/range_list.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/subarray.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/types.hpp	/^namespace multi_array{$/;"	n	namespace:boost::detail
boost::detail::multi_array	/usr/include/boost/multi_array/view.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
boost::detail::multi_array::array_iterator	/usr/include/boost/multi_array/iterator.hpp	/^class array_iterator$/;"	c	namespace:boost::detail::multi_array	inherits:iterator_facade,mpl::aux::msvc_eti_base::type
boost::detail::multi_array::array_iterator::access_t	/usr/include/boost/multi_array/iterator.hpp	/^  typedef detail::multi_array::associated_types<T,NumDims> access_t;$/;"	t	class:boost::detail::multi_array::array_iterator	access:private
boost::detail::multi_array::array_iterator::advance	/usr/include/boost/multi_array/iterator.hpp	/^  void advance(DifferenceType n) {$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:(DifferenceType n)
boost::detail::multi_array::array_iterator::array_iterator	/usr/include/boost/multi_array/iterator.hpp	/^  array_iterator($/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:( const array_iterator<T,OPtr,NumDims,ORef,Cat>& rhs , typename boost::enable_if_convertible<OPtr,TPtr>::type* = 0 )
boost::detail::multi_array::array_iterator::array_iterator	/usr/include/boost/multi_array/iterator.hpp	/^  array_iterator() {}$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:()
boost::detail::multi_array::array_iterator::array_iterator	/usr/include/boost/multi_array/iterator.hpp	/^  array_iterator(index idx, TPtr base, const size_type* extents,$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:(index idx, TPtr base, const size_type* extents, const index* strides, const index* index_base)
boost::detail::multi_array::array_iterator::base_	/usr/include/boost/multi_array/iterator.hpp	/^  TPtr base_;$/;"	m	class:boost::detail::multi_array::array_iterator	access:public
boost::detail::multi_array::array_iterator::decrement	/usr/include/boost/multi_array/iterator.hpp	/^  void decrement() { --idx_; }$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:()
boost::detail::multi_array::array_iterator::dereference	/usr/include/boost/multi_array/iterator.hpp	/^  reference dereference() const$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:() const
boost::detail::multi_array::array_iterator::difference_type	/usr/include/boost/multi_array/iterator.hpp	/^  typedef typename facade_type::difference_type difference_type;$/;"	t	class:boost::detail::multi_array::array_iterator	access:public
boost::detail::multi_array::array_iterator::distance_to	/usr/include/boost/multi_array/iterator.hpp	/^  distance_to(IteratorAdaptor& rhs) const {$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:(IteratorAdaptor& rhs) const
boost::detail::multi_array::array_iterator::equal	/usr/include/boost/multi_array/iterator.hpp	/^  bool equal(IteratorAdaptor& rhs) const {$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:(IteratorAdaptor& rhs) const
boost::detail::multi_array::array_iterator::extents_	/usr/include/boost/multi_array/iterator.hpp	/^  const size_type* extents_;$/;"	m	class:boost::detail::multi_array::array_iterator	access:public
boost::detail::multi_array::array_iterator::facade_type	/usr/include/boost/multi_array/iterator.hpp	/^    > facade_type;$/;"	t	class:boost::detail::multi_array::array_iterator	access:private
boost::detail::multi_array::array_iterator::idx_	/usr/include/boost/multi_array/iterator.hpp	/^  index idx_;$/;"	m	class:boost::detail::multi_array::array_iterator	access:public
boost::detail::multi_array::array_iterator::increment	/usr/include/boost/multi_array/iterator.hpp	/^  void increment() { ++idx_; }$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:()
boost::detail::multi_array::array_iterator::index	/usr/include/boost/multi_array/iterator.hpp	/^  typedef typename access_t::index index;$/;"	t	class:boost::detail::multi_array::array_iterator	access:private
boost::detail::multi_array::array_iterator::index_base_	/usr/include/boost/multi_array/iterator.hpp	/^  const index* index_base_;$/;"	m	class:boost::detail::multi_array::array_iterator	access:public
boost::detail::multi_array::array_iterator::operator ->	/usr/include/boost/multi_array/iterator.hpp	/^  operator->() const$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:() const
boost::detail::multi_array::array_iterator::reference	/usr/include/boost/multi_array/iterator.hpp	/^  typedef typename facade_type::reference reference;$/;"	t	class:boost::detail::multi_array::array_iterator	access:public
boost::detail::multi_array::array_iterator::size_type	/usr/include/boost/multi_array/iterator.hpp	/^  typedef typename access_t::size_type size_type;$/;"	t	class:boost::detail::multi_array::array_iterator	access:private
boost::detail::multi_array::array_iterator::strides_	/usr/include/boost/multi_array/iterator.hpp	/^  const index* strides_;$/;"	m	class:boost::detail::multi_array::array_iterator	access:public
boost::detail::multi_array::array_iterator::value_type	/usr/include/boost/multi_array/iterator.hpp	/^  typedef typename facade_type::value_type value_type;$/;"	t	class:boost::detail::multi_array::array_iterator	access:public
boost::detail::multi_array::associated_types	/usr/include/boost/multi_array/base.hpp	/^struct associated_types$/;"	s	namespace:boost::detail::multi_array	inherits:mpl::aux::msvc_eti_base::type
boost::detail::multi_array::associated_types	/usr/include/boost/multi_array/base.hpp	/^struct associated_types$/;"	s	namespace:boost::detail::multi_array	inherits:value_accessor_generator::type
boost::detail::multi_array::associated_types	/usr/include/boost/multi_array/base.hpp	/^struct associated_types<int,int> : eti_value_accessor {};$/;"	s	namespace:boost::detail::multi_array	inherits:eti_value_accessor
boost::detail::multi_array::choose_range_list_n	/usr/include/boost/multi_array/range_list.hpp	/^struct choose_range_list_n {$/;"	s	namespace:boost::detail::multi_array
boost::detail::multi_array::choose_range_list_n::bind	/usr/include/boost/multi_array/range_list.hpp	/^  struct bind {$/;"	s	struct:boost::detail::multi_array::choose_range_list_n	access:public
boost::detail::multi_array::choose_range_list_n::bind::type	/usr/include/boost/multi_array/range_list.hpp	/^    typedef boost::array<T,NumRanges> type;$/;"	t	struct:boost::detail::multi_array::choose_range_list_n::bind	access:public
boost::detail::multi_array::choose_range_list_zero	/usr/include/boost/multi_array/range_list.hpp	/^struct choose_range_list_zero {$/;"	s	namespace:boost::detail::multi_array
boost::detail::multi_array::choose_range_list_zero::bind	/usr/include/boost/multi_array/range_list.hpp	/^  struct bind {$/;"	s	struct:boost::detail::multi_array::choose_range_list_zero	access:public
boost::detail::multi_array::choose_range_list_zero::bind::type	/usr/include/boost/multi_array/range_list.hpp	/^    typedef boost::array<T,1> type;$/;"	t	struct:boost::detail::multi_array::choose_range_list_zero::bind	access:public
boost::detail::multi_array::choose_value_accessor_n	/usr/include/boost/multi_array/base.hpp	/^struct choose_value_accessor_n {$/;"	s	namespace:boost::detail::multi_array
boost::detail::multi_array::choose_value_accessor_n::type	/usr/include/boost/multi_array/base.hpp	/^  typedef value_accessor_n<T,NumDims> type;$/;"	t	struct:boost::detail::multi_array::choose_value_accessor_n	access:public
boost::detail::multi_array::choose_value_accessor_one	/usr/include/boost/multi_array/base.hpp	/^struct choose_value_accessor_one {$/;"	s	namespace:boost::detail::multi_array
boost::detail::multi_array::choose_value_accessor_one::type	/usr/include/boost/multi_array/base.hpp	/^  typedef value_accessor_one<T> type;$/;"	t	struct:boost::detail::multi_array::choose_value_accessor_one	access:public
boost::detail::multi_array::const_multi_array_view	/usr/include/boost/multi_array/view.hpp	/^class const_multi_array_view :$/;"	c	namespace:boost::detail::multi_array	inherits:boost::detail::multi_array::multi_array_impl_base
boost::detail::multi_array::const_multi_array_view::array_view	/usr/include/boost/multi_array/view.hpp	/^  struct array_view {$/;"	s	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::array_view::type	/usr/include/boost/multi_array/view.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::const_multi_array_view::array_view	access:public
boost::detail::multi_array::const_multi_array_view::base_	/usr/include/boost/multi_array/view.hpp	/^  TPtr base_;$/;"	m	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::begin	/usr/include/boost/multi_array/view.hpp	/^  const_iterator begin() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::const_array_view	/usr/include/boost/multi_array/view.hpp	/^  struct const_array_view {$/;"	s	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::const_array_view::type	/usr/include/boost/multi_array/view.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::const_multi_array_view::const_array_view	access:public
boost::detail::multi_array::const_multi_array_view::const_iterator	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::const_iterator const_iterator;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::const_multi_array_view	/usr/include/boost/multi_array/view.hpp	/^  const_multi_array_view(const $/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& other)
boost::detail::multi_array::const_multi_array_view::const_multi_array_view	/usr/include/boost/multi_array/view.hpp	/^  explicit const_multi_array_view(TPtr base,$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(TPtr base, const ExtentList& extents, const boost::array<Index,NumDims>& strides)
boost::detail::multi_array::const_multi_array_view::const_reference	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::const_reference const_reference;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::const_reverse_iterator	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::difference_type	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::difference_type difference_type;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::element	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::element element;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::empty	/usr/include/boost/multi_array/view.hpp	/^  bool empty() const { return size() == 0; }$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::end	/usr/include/boost/multi_array/view.hpp	/^  const_iterator end() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::extent_list_	/usr/include/boost/multi_array/view.hpp	/^  size_list extent_list_;$/;"	m	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::extent_range	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::extent_range extent_range;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::index	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::index_base_list_	/usr/include/boost/multi_array/view.hpp	/^  index_list index_base_list_;$/;"	m	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::index_bases	/usr/include/boost/multi_array/view.hpp	/^  const index* index_bases() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::index_list	/usr/include/boost/multi_array/view.hpp	/^  typedef boost::array<index,NumDims> index_list;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::max_size	/usr/include/boost/multi_array/view.hpp	/^  size_type max_size() const { return num_elements(); }$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::num_dimensions	/usr/include/boost/multi_array/view.hpp	/^  size_type num_dimensions() const { return NumDims; }$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::num_elements	/usr/include/boost/multi_array/view.hpp	/^  size_type num_elements() const { return num_elements_; }$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::num_elements_	/usr/include/boost/multi_array/view.hpp	/^  size_type num_elements_;$/;"	m	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::operator !=	/usr/include/boost/multi_array/view.hpp	/^  bool operator!=(const$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& rhs) const
boost::detail::multi_array::const_multi_array_view::operator ()	/usr/include/boost/multi_array/view.hpp	/^  const element& operator()(IndexList indices) const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(IndexList indices) const
boost::detail::multi_array::const_multi_array_view::operator <	/usr/include/boost/multi_array/view.hpp	/^  bool operator<(const$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& rhs) const
boost::detail::multi_array::const_multi_array_view::operator <=	/usr/include/boost/multi_array/view.hpp	/^  bool operator<=(const$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& rhs) const
boost::detail::multi_array::const_multi_array_view::operator =	/usr/include/boost/multi_array/view.hpp	/^  const_multi_array_view& operator=(const const_multi_array_view& other);$/;"	p	class:boost::detail::multi_array::const_multi_array_view	access:private	signature:(const const_multi_array_view& other)
boost::detail::multi_array::const_multi_array_view::operator ==	/usr/include/boost/multi_array/view.hpp	/^  bool operator==(const$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& rhs) const
boost::detail::multi_array::const_multi_array_view::operator >	/usr/include/boost/multi_array/view.hpp	/^  bool operator>(const$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& rhs) const
boost::detail::multi_array::const_multi_array_view::operator >=	/usr/include/boost/multi_array/view.hpp	/^  bool operator>=(const$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& rhs) const
boost::detail::multi_array::const_multi_array_view::operator []	/usr/include/boost/multi_array/view.hpp	/^  const_reference operator[](index idx) const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(index idx) const
boost::detail::multi_array::const_multi_array_view::operator []	/usr/include/boost/multi_array/view.hpp	/^  operator[](const boost::detail::multi_array::$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices) const
boost::detail::multi_array::const_multi_array_view::origin	/usr/include/boost/multi_array/view.hpp	/^  const T* origin() const { return base_+origin_offset_; }$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::origin_offset_	/usr/include/boost/multi_array/view.hpp	/^  index origin_offset_;$/;"	m	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::rbegin	/usr/include/boost/multi_array/view.hpp	/^  const_reverse_iterator rbegin() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::reindex	/usr/include/boost/multi_array/view.hpp	/^  reindex(const BaseList& values) {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const BaseList& values)
boost::detail::multi_array::const_multi_array_view::reindex	/usr/include/boost/multi_array/view.hpp	/^  void reindex(index value) {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(index value)
boost::detail::multi_array::const_multi_array_view::rend	/usr/include/boost/multi_array/view.hpp	/^  const_reverse_iterator rend() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::shape	/usr/include/boost/multi_array/view.hpp	/^  const size_type* shape() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::size	/usr/include/boost/multi_array/view.hpp	/^  size_type size() const { return extent_list_.front(); }$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::size_list	/usr/include/boost/multi_array/view.hpp	/^  typedef boost::array<size_type,NumDims> size_list;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::size_type	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::size_type size_type;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::stride_list_	/usr/include/boost/multi_array/view.hpp	/^  index_list stride_list_;$/;"	m	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_multi_array_view::strides	/usr/include/boost/multi_array/view.hpp	/^  const index* strides() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
boost::detail::multi_array::const_multi_array_view::super_type	/usr/include/boost/multi_array/view.hpp	/^  typedef boost::detail::multi_array::multi_array_impl_base<T,NumDims> super_type;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:private
boost::detail::multi_array::const_multi_array_view::value_type	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::value_type value_type;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
boost::detail::multi_array::const_sub_array	/usr/include/boost/multi_array/subarray.hpp	/^class const_sub_array :$/;"	c	namespace:boost::detail::multi_array	inherits:boost::detail::multi_array::multi_array_impl_base
boost::detail::multi_array::const_sub_array::array_view	/usr/include/boost/multi_array/subarray.hpp	/^  struct array_view {$/;"	s	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::array_view::type	/usr/include/boost/multi_array/subarray.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::const_sub_array::array_view	access:public
boost::detail::multi_array::const_sub_array::base_	/usr/include/boost/multi_array/subarray.hpp	/^  TPtr base_;$/;"	m	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::begin	/usr/include/boost/multi_array/subarray.hpp	/^  const_iterator begin() const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::const_array_view	/usr/include/boost/multi_array/subarray.hpp	/^  struct const_array_view {$/;"	s	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::const_array_view::type	/usr/include/boost/multi_array/subarray.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::const_sub_array::const_array_view	access:public
boost::detail::multi_array::const_sub_array::const_iterator	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::const_iterator const_iterator;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::const_reference	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::const_reference const_reference;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::const_reverse_iterator	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::const_sub_array	/usr/include/boost/multi_array/subarray.hpp	/^  const_sub_array (TPtr base,$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(TPtr base, const size_type* extents, const index* strides, const index* index_base)
boost::detail::multi_array::const_sub_array::const_sub_array	/usr/include/boost/multi_array/subarray.hpp	/^  const_sub_array (const const_sub_array<T,NumDims,OPtr>& rhs) :$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs)
boost::detail::multi_array::const_sub_array::difference_type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::difference_type difference_type;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::element	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::element element;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::empty	/usr/include/boost/multi_array/subarray.hpp	/^  bool empty() const { return size() == 0; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::end	/usr/include/boost/multi_array/subarray.hpp	/^  const_iterator end() const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::extent_range	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::extent_range extent_range;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::extents_	/usr/include/boost/multi_array/subarray.hpp	/^  const size_type* extents_;$/;"	m	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::index	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::index_base_	/usr/include/boost/multi_array/subarray.hpp	/^  const index* index_base_;$/;"	m	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::index_bases	/usr/include/boost/multi_array/subarray.hpp	/^  const index* index_bases() const { return index_base_; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::max_size	/usr/include/boost/multi_array/subarray.hpp	/^  size_type max_size() const { return num_elements(); }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::num_dimensions	/usr/include/boost/multi_array/subarray.hpp	/^  size_type num_dimensions() const { return NumDims; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::num_elements	/usr/include/boost/multi_array/subarray.hpp	/^  size_type num_elements() const { $/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::operator !=	/usr/include/boost/multi_array/subarray.hpp	/^  bool operator!=(const const_sub_array<T,NumDims,OPtr>& rhs) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs) const
boost::detail::multi_array::const_sub_array::operator ()	/usr/include/boost/multi_array/subarray.hpp	/^  const element& operator()(const IndexList& indices) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const IndexList& indices) const
boost::detail::multi_array::const_sub_array::operator <	/usr/include/boost/multi_array/subarray.hpp	/^  bool operator<(const const_sub_array<T,NumDims,OPtr>& rhs) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs) const
boost::detail::multi_array::const_sub_array::operator <=	/usr/include/boost/multi_array/subarray.hpp	/^  bool operator<=(const const_sub_array<T,NumDims,OPtr>& rhs) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs) const
boost::detail::multi_array::const_sub_array::operator =	/usr/include/boost/multi_array/subarray.hpp	/^  const_sub_array& operator=(const const_sub_array&);$/;"	p	class:boost::detail::multi_array::const_sub_array	access:private	signature:(const const_sub_array&)
boost::detail::multi_array::const_sub_array::operator ==	/usr/include/boost/multi_array/subarray.hpp	/^  bool operator==(const const_sub_array<T,NumDims,OPtr>& rhs) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs) const
boost::detail::multi_array::const_sub_array::operator >	/usr/include/boost/multi_array/subarray.hpp	/^  bool operator>(const const_sub_array<T,NumDims,OPtr>& rhs) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs) const
boost::detail::multi_array::const_sub_array::operator >=	/usr/include/boost/multi_array/subarray.hpp	/^  bool operator>=(const const_sub_array<T,NumDims,OPtr>& rhs) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs) const
boost::detail::multi_array::const_sub_array::operator []	/usr/include/boost/multi_array/subarray.hpp	/^  const_reference operator[](index idx) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(index idx) const
boost::detail::multi_array::const_sub_array::operator []	/usr/include/boost/multi_array/subarray.hpp	/^  operator[](const boost::detail::multi_array::$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices) const
boost::detail::multi_array::const_sub_array::origin	/usr/include/boost/multi_array/subarray.hpp	/^  TPtr origin() const { return base_; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::rbegin	/usr/include/boost/multi_array/subarray.hpp	/^  const_reverse_iterator rbegin() const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::rend	/usr/include/boost/multi_array/subarray.hpp	/^  const_reverse_iterator rend() const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::shape	/usr/include/boost/multi_array/subarray.hpp	/^  const size_type*  shape() const { return extents_; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::size	/usr/include/boost/multi_array/subarray.hpp	/^  size_type size() const { return extents_[0]; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::size_type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::size_type size_type;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::strides	/usr/include/boost/multi_array/subarray.hpp	/^  const index* strides() const { return strides_; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
boost::detail::multi_array::const_sub_array::strides_	/usr/include/boost/multi_array/subarray.hpp	/^  const index* strides_;$/;"	m	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::const_sub_array::super_type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef boost::detail::multi_array::multi_array_impl_base<T,NumDims> super_type;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:private
boost::detail::multi_array::const_sub_array::value_type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::value_type value_type;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
boost::detail::multi_array::copy_array	/usr/include/boost/multi_array/copy_array.hpp	/^void copy_array (Array1& source, Array2& dest) {$/;"	f	namespace:boost::detail::multi_array	signature:(Array1& source, Array2& dest)
boost::detail::multi_array::copy_dispatch	/usr/include/boost/multi_array/copy_array.hpp	/^class copy_dispatch {$/;"	c	namespace:boost::detail::multi_array
boost::detail::multi_array::copy_dispatch::copy_array	/usr/include/boost/multi_array/copy_array.hpp	/^  static void copy_array (SourceIterator first, SourceIterator last,$/;"	f	class:boost::detail::multi_array::copy_dispatch	access:public	signature:(SourceIterator first, SourceIterator last, DestIterator result)
boost::detail::multi_array::copy_dispatch::copy_array	/usr/include/boost/multi_array/copy_array.hpp	/^  static void copy_array (const Array1& source, Array2 dest) {$/;"	f	class:boost::detail::multi_array::copy_dispatch	access:private	signature:(const Array1& source, Array2 dest)
boost::detail::multi_array::copy_dispatch::copy_array	/usr/include/boost/multi_array/copy_array.hpp	/^  static void copy_array (const Element& source, Element& dest) {$/;"	f	class:boost::detail::multi_array::copy_dispatch	access:private	signature:(const Element& source, Element& dest)
boost::detail::multi_array::copy_n	/usr/include/boost/multi_array/algorithm.hpp	/^OutputIter copy_n(InputIter first, Size count,$/;"	f	namespace:boost::detail::multi_array	signature:(InputIter first, Size count, OutputIter result)
boost::detail::multi_array::eti_value_accessor	/usr/include/boost/multi_array/base.hpp	/^struct eti_value_accessor$/;"	s	namespace:boost::detail::multi_array
boost::detail::multi_array::eti_value_accessor::const_reference	/usr/include/boost/multi_array/base.hpp	/^  typedef int const_reference;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
boost::detail::multi_array::eti_value_accessor::element	/usr/include/boost/multi_array/base.hpp	/^  typedef int element;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
boost::detail::multi_array::eti_value_accessor::index	/usr/include/boost/multi_array/base.hpp	/^  typedef int index;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
boost::detail::multi_array::eti_value_accessor::index_range	/usr/include/boost/multi_array/base.hpp	/^  typedef int index_range;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
boost::detail::multi_array::eti_value_accessor::reference	/usr/include/boost/multi_array/base.hpp	/^  typedef int reference;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
boost::detail::multi_array::eti_value_accessor::size_type	/usr/include/boost/multi_array/base.hpp	/^  typedef int size_type;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
boost::detail::multi_array::eti_value_accessor::value_type	/usr/include/boost/multi_array/base.hpp	/^  typedef int value_type;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
boost::detail::multi_array::extent_gen	/usr/include/boost/multi_array/extent_gen.hpp	/^class extent_gen {$/;"	c	namespace:boost::detail::multi_array
boost::detail::multi_array::extent_gen::extent_gen	/usr/include/boost/multi_array/extent_gen.hpp	/^  extent_gen() { }$/;"	f	class:boost::detail::multi_array::extent_gen	access:public	signature:()
boost::detail::multi_array::extent_gen::extent_gen	/usr/include/boost/multi_array/extent_gen.hpp	/^  extent_gen(const extent_gen<NumRanges-1>& rhs,$/;"	f	class:boost::detail::multi_array::extent_gen	access:public	signature:(const extent_gen<NumRanges-1>& rhs, const range& a_range)
boost::detail::multi_array::extent_gen::extents	/usr/include/boost/multi_array/extent_gen.hpp	/^  static extent_gen<0> extents() {$/;"	f	class:boost::detail::multi_array::extent_gen	access:public	signature:()
boost::detail::multi_array::extent_gen::gen_type	/usr/include/boost/multi_array/extent_gen.hpp	/^  struct gen_type {$/;"	s	class:boost::detail::multi_array::extent_gen	access:public
boost::detail::multi_array::extent_gen::gen_type::type	/usr/include/boost/multi_array/extent_gen.hpp	/^    typedef extent_gen<Ranges> type;$/;"	t	struct:boost::detail::multi_array::extent_gen::gen_type	access:public
boost::detail::multi_array::extent_gen::index	/usr/include/boost/multi_array/extent_gen.hpp	/^  typedef boost::detail::multi_array::index index;$/;"	t	class:boost::detail::multi_array::extent_gen	access:public
boost::detail::multi_array::extent_gen::operator []	/usr/include/boost/multi_array/extent_gen.hpp	/^  operator[](const range& a_range)$/;"	f	class:boost::detail::multi_array::extent_gen	access:public	signature:(const range& a_range)
boost::detail::multi_array::extent_gen::operator []	/usr/include/boost/multi_array/extent_gen.hpp	/^  operator[](index idx)$/;"	f	class:boost::detail::multi_array::extent_gen	access:public	signature:(index idx)
boost::detail::multi_array::extent_gen::range	/usr/include/boost/multi_array/extent_gen.hpp	/^  typedef extent_range<index,size_type> range;$/;"	t	class:boost::detail::multi_array::extent_gen	access:public
boost::detail::multi_array::extent_gen::range_list	/usr/include/boost/multi_array/extent_gen.hpp	/^  typedef typename range_list_generator<range,NumRanges>::type range_list;$/;"	t	class:boost::detail::multi_array::extent_gen	access:private
boost::detail::multi_array::extent_gen::ranges_	/usr/include/boost/multi_array/extent_gen.hpp	/^  range_list ranges_;$/;"	m	class:boost::detail::multi_array::extent_gen	access:public
boost::detail::multi_array::extent_gen::size_type	/usr/include/boost/multi_array/extent_gen.hpp	/^  typedef boost::detail::multi_array::size_type size_type;$/;"	t	class:boost::detail::multi_array::extent_gen	access:public
boost::detail::multi_array::extent_range	/usr/include/boost/multi_array/extent_range.hpp	/^class extent_range : private std::pair<Extent,Extent> {$/;"	c	namespace:boost::detail::multi_array	inherits:std::pair
boost::detail::multi_array::extent_range::extent_range	/usr/include/boost/multi_array/extent_range.hpp	/^  extent_range() : super_type(0,0) { }$/;"	f	class:boost::detail::multi_array::extent_range	access:public	signature:()
boost::detail::multi_array::extent_range::extent_range	/usr/include/boost/multi_array/extent_range.hpp	/^  extent_range(index finish) :$/;"	f	class:boost::detail::multi_array::extent_range	access:public	signature:(index finish)
boost::detail::multi_array::extent_range::extent_range	/usr/include/boost/multi_array/extent_range.hpp	/^  extent_range(index start, index finish) :$/;"	f	class:boost::detail::multi_array::extent_range	access:public	signature:(index start, index finish)
boost::detail::multi_array::extent_range::finish	/usr/include/boost/multi_array/extent_range.hpp	/^  index finish() const { return super_type::second; }$/;"	f	class:boost::detail::multi_array::extent_range	access:public	signature:() const
boost::detail::multi_array::extent_range::index	/usr/include/boost/multi_array/extent_range.hpp	/^  typedef Extent index;$/;"	t	class:boost::detail::multi_array::extent_range	access:public
boost::detail::multi_array::extent_range::size	/usr/include/boost/multi_array/extent_range.hpp	/^  size_type size() const { return super_type::second - super_type::first; }$/;"	f	class:boost::detail::multi_array::extent_range	access:public	signature:() const
boost::detail::multi_array::extent_range::size_type	/usr/include/boost/multi_array/extent_range.hpp	/^  typedef SizeType size_type;$/;"	t	class:boost::detail::multi_array::extent_range	access:public
boost::detail::multi_array::extent_range::start	/usr/include/boost/multi_array/extent_range.hpp	/^  index start() const { return super_type::first; }$/;"	f	class:boost::detail::multi_array::extent_range	access:public	signature:() const
boost::detail::multi_array::extent_range::super_type	/usr/include/boost/multi_array/extent_range.hpp	/^  typedef std::pair<Extent,Extent> super_type;$/;"	t	class:boost::detail::multi_array::extent_range	access:private
boost::detail::multi_array::index	/usr/include/boost/multi_array/types.hpp	/^typedef std::ptrdiff_t index;$/;"	t	namespace:boost::detail::multi_array
boost::detail::multi_array::index_gen	/usr/include/boost/multi_array/index_gen.hpp	/^struct index_gen {$/;"	s	namespace:boost::detail::multi_array
boost::detail::multi_array::index_gen::gen_type	/usr/include/boost/multi_array/index_gen.hpp	/^  struct gen_type {$/;"	s	struct:boost::detail::multi_array::index_gen	access:public
boost::detail::multi_array::index_gen::gen_type::type	/usr/include/boost/multi_array/index_gen.hpp	/^    typedef index_gen<Ranges,Dims> type;$/;"	t	struct:boost::detail::multi_array::index_gen::gen_type	access:public
boost::detail::multi_array::index_gen::index	/usr/include/boost/multi_array/index_gen.hpp	/^  typedef ::boost::detail::multi_array::index index;$/;"	t	struct:boost::detail::multi_array::index_gen	access:private
boost::detail::multi_array::index_gen::index_gen	/usr/include/boost/multi_array/index_gen.hpp	/^  explicit index_gen(const index_gen<NumRanges-1,ND>& rhs,$/;"	f	struct:boost::detail::multi_array::index_gen	access:public	signature:(const index_gen<NumRanges-1,ND>& rhs, const range& r)
boost::detail::multi_array::index_gen::index_gen	/usr/include/boost/multi_array/index_gen.hpp	/^  index_gen() { }$/;"	f	struct:boost::detail::multi_array::index_gen	access:public	signature:()
boost::detail::multi_array::index_gen::indices	/usr/include/boost/multi_array/index_gen.hpp	/^  static index_gen<0,0> indices() {$/;"	f	struct:boost::detail::multi_array::index_gen	access:public	signature:()
boost::detail::multi_array::index_gen::operator []	/usr/include/boost/multi_array/index_gen.hpp	/^  operator[](const range& r) const$/;"	f	struct:boost::detail::multi_array::index_gen	access:public	signature:(const range& r) const
boost::detail::multi_array::index_gen::operator []	/usr/include/boost/multi_array/index_gen.hpp	/^  operator[](index idx) const$/;"	f	struct:boost::detail::multi_array::index_gen	access:public	signature:(index idx) const
boost::detail::multi_array::index_gen::range	/usr/include/boost/multi_array/index_gen.hpp	/^  typedef index_range<index,size_type> range;$/;"	t	struct:boost::detail::multi_array::index_gen	access:private
boost::detail::multi_array::index_gen::range_list	/usr/include/boost/multi_array/index_gen.hpp	/^  typedef typename range_list_generator<range,NumRanges>::type range_list;$/;"	t	struct:boost::detail::multi_array::index_gen	access:public
boost::detail::multi_array::index_gen::ranges_	/usr/include/boost/multi_array/index_gen.hpp	/^  range_list ranges_;$/;"	m	struct:boost::detail::multi_array::index_gen	access:public
boost::detail::multi_array::index_gen::size_type	/usr/include/boost/multi_array/index_gen.hpp	/^  typedef ::boost::detail::multi_array::size_type size_type;$/;"	t	struct:boost::detail::multi_array::index_gen	access:private
boost::detail::multi_array::index_range	/usr/include/boost/multi_array/index_range.hpp	/^  class index_range {$/;"	c	namespace:boost::detail::multi_array
boost::detail::multi_array::index_range::all	/usr/include/boost/multi_array/index_range.hpp	/^    static index_range all() $/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:()
boost::detail::multi_array::index_range::degenerate_	/usr/include/boost/multi_array/index_range.hpp	/^    bool degenerate_;$/;"	m	class:boost::detail::multi_array::index_range	access:public
boost::detail::multi_array::index_range::finish	/usr/include/boost/multi_array/index_range.hpp	/^    index finish() const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:() const
boost::detail::multi_array::index_range::finish	/usr/include/boost/multi_array/index_range.hpp	/^    index_range& finish(index f) {$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index f)
boost::detail::multi_array::index_range::finish_	/usr/include/boost/multi_array/index_range.hpp	/^    index start_, finish_, stride_;$/;"	m	class:boost::detail::multi_array::index_range	access:public
boost::detail::multi_array::index_range::from_start	/usr/include/boost/multi_array/index_range.hpp	/^    static index from_start()$/;"	f	class:boost::detail::multi_array::index_range	access:private	signature:()
boost::detail::multi_array::index_range::get_finish	/usr/include/boost/multi_array/index_range.hpp	/^    index get_finish(index high_index_range = index_range::to_end()) const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index high_index_range = index_range::to_end()) const
boost::detail::multi_array::index_range::get_start	/usr/include/boost/multi_array/index_range.hpp	/^    index get_start(index low_index_range = index_range::from_start()) const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index low_index_range = index_range::from_start()) const
boost::detail::multi_array::index_range::index	/usr/include/boost/multi_array/index_range.hpp	/^    typedef Index index;$/;"	t	class:boost::detail::multi_array::index_range	access:public
boost::detail::multi_array::index_range::index_range	/usr/include/boost/multi_array/index_range.hpp	/^    explicit index_range(index pos)$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index pos)
boost::detail::multi_array::index_range::index_range	/usr/include/boost/multi_array/index_range.hpp	/^    explicit index_range(index start, index finish, index stride=1)$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index start, index finish, index stride=1)
boost::detail::multi_array::index_range::index_range	/usr/include/boost/multi_array/index_range.hpp	/^    index_range()$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:()
boost::detail::multi_array::index_range::is_degenerate	/usr/include/boost/multi_array/index_range.hpp	/^    bool is_degenerate() const { return degenerate_; }$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:() const
boost::detail::multi_array::index_range::operator ()	/usr/include/boost/multi_array/index_range.hpp	/^    index operator()(unsigned i) const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(unsigned i) const
boost::detail::multi_array::index_range::operator +	/usr/include/boost/multi_array/index_range.hpp	/^    index_range operator+(index shift) const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index shift) const
boost::detail::multi_array::index_range::operator -	/usr/include/boost/multi_array/index_range.hpp	/^    index_range operator-(index shift) const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index shift) const
boost::detail::multi_array::index_range::operator []	/usr/include/boost/multi_array/index_range.hpp	/^    index operator[](unsigned i) const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(unsigned i) const
boost::detail::multi_array::index_range::set_index_range	/usr/include/boost/multi_array/index_range.hpp	/^    void set_index_range(index start, index finish, index stride=1)$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index start, index finish, index stride=1)
boost::detail::multi_array::index_range::size_type	/usr/include/boost/multi_array/index_range.hpp	/^    typedef SizeType size_type;$/;"	t	class:boost::detail::multi_array::index_range	access:public
boost::detail::multi_array::index_range::start	/usr/include/boost/multi_array/index_range.hpp	/^    index start() const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:() const
boost::detail::multi_array::index_range::start	/usr/include/boost/multi_array/index_range.hpp	/^    index_range& start(index s) {$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index s)
boost::detail::multi_array::index_range::start_	/usr/include/boost/multi_array/index_range.hpp	/^    index start_, finish_, stride_;$/;"	m	class:boost::detail::multi_array::index_range	access:public
boost::detail::multi_array::index_range::stride	/usr/include/boost/multi_array/index_range.hpp	/^    index stride() const { return stride_; }$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:() const
boost::detail::multi_array::index_range::stride	/usr/include/boost/multi_array/index_range.hpp	/^    index_range& stride(index s) { stride_ = s; return *this; }$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index s)
boost::detail::multi_array::index_range::stride_	/usr/include/boost/multi_array/index_range.hpp	/^    index start_, finish_, stride_;$/;"	m	class:boost::detail::multi_array::index_range	access:public
boost::detail::multi_array::index_range::to_end	/usr/include/boost/multi_array/index_range.hpp	/^    static index to_end()$/;"	f	class:boost::detail::multi_array::index_range	access:private	signature:()
boost::detail::multi_array::multi_array_base	/usr/include/boost/multi_array/base.hpp	/^class multi_array_base {$/;"	c	namespace:boost::detail::multi_array
boost::detail::multi_array::multi_array_base::difference_type	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::difference_type difference_type;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
boost::detail::multi_array::multi_array_base::extent_gen	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::extent_gen extent_gen;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
boost::detail::multi_array::multi_array_base::extent_range	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::extent_range extent_range;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
boost::detail::multi_array::multi_array_base::index	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::index index;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
boost::detail::multi_array::multi_array_base::index_gen	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::index_gen index_gen;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
boost::detail::multi_array::multi_array_base::index_range	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::index_range index_range;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
boost::detail::multi_array::multi_array_base::size_type	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::size_type size_type;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
boost::detail::multi_array::multi_array_impl_base	/usr/include/boost/multi_array/base.hpp	/^class multi_array_impl_base$/;"	c	namespace:boost::detail::multi_array	inherits:mpl::aux::msvc_eti_base::type
boost::detail::multi_array::multi_array_impl_base::BOOST_STATIC_CONSTANT	/usr/include/boost/multi_array/base.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, dimensionality = NumDims);$/;"	p	class:boost::detail::multi_array::multi_array_impl_base	access:public	signature:(std::size_t, dimensionality = NumDims)
boost::detail::multi_array::multi_array_impl_base::access_element	/usr/include/boost/multi_array/base.hpp	/^  Reference access_element(boost::type<Reference>,$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:(boost::type<Reference>, const IndexList& indices, TPtr base, const size_type* extents, const index* strides, const index* index_bases) const
boost::detail::multi_array::multi_array_impl_base::array_view	/usr/include/boost/multi_array/base.hpp	/^  struct array_view {$/;"	s	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::array_view::type	/usr/include/boost/multi_array/base.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::multi_array_impl_base::array_view	access:public
boost::detail::multi_array::multi_array_impl_base::calculate_descending_dimension_offset	/usr/include/boost/multi_array/base.hpp	/^  calculate_descending_dimension_offset(const StrideList& stride_list,$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:(const StrideList& stride_list, const ExtentList& extent_list, const general_storage_order<NumDims>& storage)
boost::detail::multi_array::multi_array_impl_base::calculate_indexing_offset	/usr/include/boost/multi_array/base.hpp	/^  calculate_indexing_offset(const StrideList& stride_list,$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:(const StrideList& stride_list, const BaseList& index_base_list)
boost::detail::multi_array::multi_array_impl_base::calculate_origin_offset	/usr/include/boost/multi_array/base.hpp	/^  calculate_origin_offset(const StrideList& stride_list,$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:(const StrideList& stride_list, const ExtentList& extent_list, const general_storage_order<NumDims>& storage, const BaseList& index_base_list)
boost::detail::multi_array::multi_array_impl_base::compute_strides	/usr/include/boost/multi_array/base.hpp	/^  void compute_strides(StrideList& stride_list, ExtentList& extent_list,$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:(StrideList& stride_list, ExtentList& extent_list, const general_storage_order<NumDims>& storage)
boost::detail::multi_array::multi_array_impl_base::const_array_view	/usr/include/boost/multi_array/base.hpp	/^  struct const_array_view {$/;"	s	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::const_array_view::type	/usr/include/boost/multi_array/base.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::multi_array_impl_base::const_array_view	access:public
boost::detail::multi_array::multi_array_impl_base::const_iterator	/usr/include/boost/multi_array/base.hpp	/^                         boost::random_access_traversal_tag> const_iterator;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::const_reference	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::const_reference const_reference;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::const_reverse_iterator	/usr/include/boost/multi_array/base.hpp	/^  typedef ::boost::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::const_subarray	/usr/include/boost/multi_array/base.hpp	/^  struct const_subarray {$/;"	s	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::const_subarray::type	/usr/include/boost/multi_array/base.hpp	/^    typedef boost::detail::multi_array::const_sub_array<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::multi_array_impl_base::const_subarray	access:public
boost::detail::multi_array::multi_array_impl_base::element	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::element element;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::generate_array_view	/usr/include/boost/multi_array/base.hpp	/^  generate_array_view(boost::type<ArrayRef>,$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:(boost::type<ArrayRef>, const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices, const size_type* extents, const index* strides, const index* index_bases, TPtr base) const
boost::detail::multi_array::multi_array_impl_base::index	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::index index;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::index_range	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::index_range index_range;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::iterator	/usr/include/boost/multi_array/base.hpp	/^                         boost::random_access_traversal_tag> iterator;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::iterator	/usr/include/boost/multi_array/base.hpp	/^                         mutable_iterator_tag> iterator;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::multi_array_impl_base	/usr/include/boost/multi_array/base.hpp	/^  multi_array_impl_base() { }$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:()
boost::detail::multi_array::multi_array_impl_base::reference	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::reference reference;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::reverse_iterator	/usr/include/boost/multi_array/base.hpp	/^  typedef ::boost::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::size_type	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::size_type size_type;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::subarray	/usr/include/boost/multi_array/base.hpp	/^  struct subarray {$/;"	s	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::subarray::type	/usr/include/boost/multi_array/base.hpp	/^    typedef boost::detail::multi_array::sub_array<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::multi_array_impl_base::subarray	access:public
boost::detail::multi_array::multi_array_impl_base::types	/usr/include/boost/multi_array/base.hpp	/^  typedef associated_types<T,mpl::size_t<NumDims> > types;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:private
boost::detail::multi_array::multi_array_impl_base::value_type	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::value_type value_type;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
boost::detail::multi_array::multi_array_impl_base::~multi_array_impl_base	/usr/include/boost/multi_array/base.hpp	/^  ~multi_array_impl_base() { }$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:()
boost::detail::multi_array::multi_array_view	/usr/include/boost/multi_array/view.hpp	/^class multi_array_view :$/;"	c	namespace:boost::detail::multi_array	inherits:const_multi_array_view
boost::detail::multi_array::multi_array_view::array_view	/usr/include/boost/multi_array/view.hpp	/^  struct array_view {$/;"	s	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::array_view::type	/usr/include/boost/multi_array/view.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::multi_array_view::array_view	access:public
boost::detail::multi_array::multi_array_view::begin	/usr/include/boost/multi_array/view.hpp	/^  const_iterator begin() const {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:() const
boost::detail::multi_array::multi_array_view::begin	/usr/include/boost/multi_array/view.hpp	/^  iterator begin() {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:()
boost::detail::multi_array::multi_array_view::const_array_view	/usr/include/boost/multi_array/view.hpp	/^  struct const_array_view {$/;"	s	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::const_array_view::type	/usr/include/boost/multi_array/view.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::multi_array_view::const_array_view	access:public
boost::detail::multi_array::multi_array_view::const_iterator	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::const_iterator const_iterator;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::const_reference	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::const_reference const_reference;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::const_reverse_iterator	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::difference_type	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::difference_type difference_type;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::element	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::element element;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::end	/usr/include/boost/multi_array/view.hpp	/^  const_iterator end() const {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:() const
boost::detail::multi_array::multi_array_view::end	/usr/include/boost/multi_array/view.hpp	/^  iterator end() {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:()
boost::detail::multi_array::multi_array_view::extent_range	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::extent_range extent_range;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::index	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::iterator	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::iterator iterator;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::multi_array_view	/usr/include/boost/multi_array/view.hpp	/^  explicit multi_array_view(T* base,$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(T* base, const ExtentList& extents, const boost::array<Index,NumDims>& strides)
boost::detail::multi_array::multi_array_view::operator ()	/usr/include/boost/multi_array/view.hpp	/^  const element& operator()(const IndexList& indices) const {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(const IndexList& indices) const
boost::detail::multi_array::multi_array_view::operator ()	/usr/include/boost/multi_array/view.hpp	/^  element& operator()(const IndexList& indices) {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(const IndexList& indices)
boost::detail::multi_array::multi_array_view::operator =	/usr/include/boost/multi_array/view.hpp	/^  multi_array_view& operator=(const ConstMultiArray& other) {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(const ConstMultiArray& other)
boost::detail::multi_array::multi_array_view::operator =	/usr/include/boost/multi_array/view.hpp	/^  multi_array_view& operator=(const multi_array_view& other) {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(const multi_array_view& other)
boost::detail::multi_array::multi_array_view::operator []	/usr/include/boost/multi_array/view.hpp	/^  const_reference operator[](index idx) const {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(index idx) const
boost::detail::multi_array::multi_array_view::operator []	/usr/include/boost/multi_array/view.hpp	/^  operator[](const boost::detail::multi_array::$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices)
boost::detail::multi_array::multi_array_view::operator []	/usr/include/boost/multi_array/view.hpp	/^  operator[](const boost::detail::multi_array::$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices) const
boost::detail::multi_array::multi_array_view::operator []	/usr/include/boost/multi_array/view.hpp	/^  reference operator[](index idx) {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(index idx)
boost::detail::multi_array::multi_array_view::origin	/usr/include/boost/multi_array/view.hpp	/^  const element* origin() const { return super_type::origin(); }$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:() const
boost::detail::multi_array::multi_array_view::origin	/usr/include/boost/multi_array/view.hpp	/^  element* origin() { return this->base_+this->origin_offset_; }$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:()
boost::detail::multi_array::multi_array_view::rbegin	/usr/include/boost/multi_array/view.hpp	/^  const_reverse_iterator rbegin() const {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:() const
boost::detail::multi_array::multi_array_view::rbegin	/usr/include/boost/multi_array/view.hpp	/^  reverse_iterator rbegin() {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:()
boost::detail::multi_array::multi_array_view::reference	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::reference reference;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::rend	/usr/include/boost/multi_array/view.hpp	/^  const_reverse_iterator rend() const {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:() const
boost::detail::multi_array::multi_array_view::rend	/usr/include/boost/multi_array/view.hpp	/^  reverse_iterator rend() {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:()
boost::detail::multi_array::multi_array_view::reverse_iterator	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::reverse_iterator reverse_iterator;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::size_type	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::size_type size_type;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::multi_array_view::super_type	/usr/include/boost/multi_array/view.hpp	/^  typedef const_multi_array_view<T,NumDims,T*> super_type;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:private
boost::detail::multi_array::multi_array_view::value_type	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::value_type value_type;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
boost::detail::multi_array::mutable_iterator_tag	/usr/include/boost/multi_array/base.hpp	/^struct mutable_iterator_tag$/;"	s	namespace:boost::detail::multi_array	inherits:boost::random_access_traversal_tag,std::input_iterator_tag
boost::detail::multi_array::mutable_iterator_tag::operator std::output_iterator_tag	/usr/include/boost/multi_array/base.hpp	/^  operator std::output_iterator_tag() const {$/;"	f	struct:boost::detail::multi_array::mutable_iterator_tag	access:public	signature:() const
boost::detail::multi_array::operator <	/usr/include/boost/multi_array/index_range.hpp	/^  operator<(Index s, const index_range<Index,SizeType>& r)$/;"	f	namespace:boost::detail::multi_array	signature:(Index s, const index_range<Index,SizeType>& r)
boost::detail::multi_array::operator <	/usr/include/boost/multi_array/index_range.hpp	/^  operator<(const index_range<Index,SizeType>& r, Index f)$/;"	f	namespace:boost::detail::multi_array	signature:(const index_range<Index,SizeType>& r, Index f)
boost::detail::multi_array::operator <=	/usr/include/boost/multi_array/index_range.hpp	/^  operator<=(Index s, const index_range<Index,SizeType>& r)$/;"	f	namespace:boost::detail::multi_array	signature:(Index s, const index_range<Index,SizeType>& r)
boost::detail::multi_array::operator <=	/usr/include/boost/multi_array/index_range.hpp	/^  operator<=(const index_range<Index,SizeType>& r, Index f)$/;"	f	namespace:boost::detail::multi_array	signature:(const index_range<Index,SizeType>& r, Index f)
boost::detail::multi_array::operator_arrow_proxy	/usr/include/boost/multi_array/iterator.hpp	/^struct operator_arrow_proxy$/;"	s	namespace:boost::detail::multi_array
boost::detail::multi_array::operator_arrow_proxy::operator ->	/usr/include/boost/multi_array/iterator.hpp	/^  T* operator->() const { return &value_; }$/;"	f	struct:boost::detail::multi_array::operator_arrow_proxy	access:public	signature:() const
boost::detail::multi_array::operator_arrow_proxy::operator T*	/usr/include/boost/multi_array/iterator.hpp	/^  operator T*() const { return &value_; }$/;"	f	struct:boost::detail::multi_array::operator_arrow_proxy	access:public	signature:() const
boost::detail::multi_array::operator_arrow_proxy::operator_arrow_proxy	/usr/include/boost/multi_array/iterator.hpp	/^  operator_arrow_proxy(T const& px) : value_(px) {}$/;"	f	struct:boost::detail::multi_array::operator_arrow_proxy	access:public	signature:(T const& px)
boost::detail::multi_array::operator_arrow_proxy::value_	/usr/include/boost/multi_array/iterator.hpp	/^  mutable T value_;$/;"	m	struct:boost::detail::multi_array::operator_arrow_proxy	access:public
boost::detail::multi_array::range_list_gen_helper	/usr/include/boost/multi_array/range_list.hpp	/^struct range_list_gen_helper {$/;"	s	namespace:boost::detail::multi_array
boost::detail::multi_array::range_list_gen_helper	/usr/include/boost/multi_array/range_list.hpp	/^struct range_list_gen_helper<0> {$/;"	s	namespace:boost::detail::multi_array
boost::detail::multi_array::range_list_gen_helper::choice	/usr/include/boost/multi_array/range_list.hpp	/^  typedef choose_range_list_n choice;$/;"	t	struct:boost::detail::multi_array::range_list_gen_helper	access:public
boost::detail::multi_array::range_list_gen_helper::choice	/usr/include/boost/multi_array/range_list.hpp	/^  typedef choose_range_list_zero choice;$/;"	t	struct:boost::detail::multi_array::range_list_gen_helper	access:public
boost::detail::multi_array::range_list_generator	/usr/include/boost/multi_array/range_list.hpp	/^struct range_list_generator {$/;"	s	namespace:boost::detail::multi_array
boost::detail::multi_array::range_list_generator::Choice	/usr/include/boost/multi_array/range_list.hpp	/^  typedef typename range_list_gen_helper<NumRanges>::choice Choice;$/;"	t	struct:boost::detail::multi_array::range_list_generator	access:private
boost::detail::multi_array::range_list_generator::type	/usr/include/boost/multi_array/range_list.hpp	/^  typedef typename Choice::template bind<T,NumRanges>::type type;$/;"	t	struct:boost::detail::multi_array::range_list_generator	access:public
boost::detail::multi_array::size_type	/usr/include/boost/multi_array/types.hpp	/^typedef std::size_t size_type;$/;"	t	namespace:boost::detail::multi_array
boost::detail::multi_array::sub_array	/usr/include/boost/multi_array/subarray.hpp	/^class sub_array : public const_sub_array<T,NumDims,T*>$/;"	c	namespace:boost::detail::multi_array	inherits:const_sub_array
boost::detail::multi_array::sub_array::array_view	/usr/include/boost/multi_array/subarray.hpp	/^  struct array_view {$/;"	s	class:boost::detail::multi_array::sub_array	access:public
boost::detail::multi_array::sub_array::array_view::type	/usr/include/boost/multi_array/subarray.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::sub_array::array_view	access:public
boost::detail::multi_array::sub_array::begin	/usr/include/boost/multi_array/subarray.hpp	/^  const_iterator begin() const {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:() const
boost::detail::multi_array::sub_array::begin	/usr/include/boost/multi_array/subarray.hpp	/^  iterator begin() {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:()
boost::detail::multi_array::sub_array::const_array_view	/usr/include/boost/multi_array/subarray.hpp	/^  struct const_array_view {$/;"	s	class:boost::detail::multi_array::sub_array	access:public
boost::detail::multi_array::sub_array::const_array_view::type	/usr/include/boost/multi_array/subarray.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::sub_array::const_array_view	access:public
boost::detail::multi_array::sub_array::const_iterator	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::const_iterator const_iterator;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
boost::detail::multi_array::sub_array::const_reference	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::const_reference const_reference;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
boost::detail::multi_array::sub_array::const_reverse_iterator	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
boost::detail::multi_array::sub_array::element	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::element element;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
boost::detail::multi_array::sub_array::end	/usr/include/boost/multi_array/subarray.hpp	/^  const_iterator end() const {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:() const
boost::detail::multi_array::sub_array::end	/usr/include/boost/multi_array/subarray.hpp	/^  iterator end() {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:()
boost::detail::multi_array::sub_array::index	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
boost::detail::multi_array::sub_array::iterator	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::iterator iterator;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
boost::detail::multi_array::sub_array::operator ()	/usr/include/boost/multi_array/subarray.hpp	/^  const element& operator()(const IndexList& indices) const {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(const IndexList& indices) const
boost::detail::multi_array::sub_array::operator ()	/usr/include/boost/multi_array/subarray.hpp	/^  element& operator()(const IndexList& indices) {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(const IndexList& indices)
boost::detail::multi_array::sub_array::operator =	/usr/include/boost/multi_array/subarray.hpp	/^  sub_array& operator=(const ConstMultiArray& other) {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(const ConstMultiArray& other)
boost::detail::multi_array::sub_array::operator =	/usr/include/boost/multi_array/subarray.hpp	/^  sub_array& operator=(const sub_array& other) {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(const sub_array& other)
boost::detail::multi_array::sub_array::operator []	/usr/include/boost/multi_array/subarray.hpp	/^  const_reference operator[](index idx) const {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(index idx) const
boost::detail::multi_array::sub_array::operator []	/usr/include/boost/multi_array/subarray.hpp	/^  operator[](const boost::detail::multi_array::$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices)
boost::detail::multi_array::sub_array::operator []	/usr/include/boost/multi_array/subarray.hpp	/^  operator[](const boost::detail::multi_array::$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices) const
boost::detail::multi_array::sub_array::operator []	/usr/include/boost/multi_array/subarray.hpp	/^  reference operator[](index idx) {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(index idx)
boost::detail::multi_array::sub_array::origin	/usr/include/boost/multi_array/subarray.hpp	/^  T* origin() { return this->base_; }$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:()
boost::detail::multi_array::sub_array::origin	/usr/include/boost/multi_array/subarray.hpp	/^  const T* origin() const { return this->base_; }$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:() const
boost::detail::multi_array::sub_array::rbegin	/usr/include/boost/multi_array/subarray.hpp	/^  const_reverse_iterator rbegin() const {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:() const
boost::detail::multi_array::sub_array::rbegin	/usr/include/boost/multi_array/subarray.hpp	/^  reverse_iterator rbegin() {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:()
boost::detail::multi_array::sub_array::reference	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::reference reference;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
boost::detail::multi_array::sub_array::rend	/usr/include/boost/multi_array/subarray.hpp	/^  const_reverse_iterator rend() const {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:() const
boost::detail::multi_array::sub_array::rend	/usr/include/boost/multi_array/subarray.hpp	/^  reverse_iterator rend() {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:()
boost::detail::multi_array::sub_array::reverse_iterator	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::reverse_iterator reverse_iterator;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
boost::detail::multi_array::sub_array::size_type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::size_type size_type;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
boost::detail::multi_array::sub_array::sub_array	/usr/include/boost/multi_array/subarray.hpp	/^  sub_array (T* base,$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(T* base, const size_type* extents, const index* strides, const index* index_base)
boost::detail::multi_array::sub_array::super_type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef const_sub_array<T,NumDims,T*> super_type;$/;"	t	class:boost::detail::multi_array::sub_array	access:private
boost::detail::multi_array::value_accessor_generator	/usr/include/boost/multi_array/base.hpp	/^struct value_accessor_generator {$/;"	s	namespace:boost::detail::multi_array
boost::detail::multi_array::value_accessor_generator	/usr/include/boost/multi_array/base.hpp	/^struct value_accessor_generator<int,int>$/;"	s	namespace:boost::detail::multi_array
boost::detail::multi_array::value_accessor_generator::BOOST_STATIC_CONSTANT	/usr/include/boost/multi_array/base.hpp	/^    BOOST_STATIC_CONSTANT(std::size_t, dimensionality = NumDims::value);$/;"	p	struct:boost::detail::multi_array::value_accessor_generator	access:public	signature:(std::size_t, dimensionality = NumDims::value)
boost::detail::multi_array::value_accessor_generator::type	/usr/include/boost/multi_array/base.hpp	/^  >::type type;$/;"	t	struct:boost::detail::multi_array::value_accessor_generator	access:public
boost::detail::multi_array::value_accessor_generator::type	/usr/include/boost/multi_array/base.hpp	/^  typedef eti_value_accessor type;$/;"	t	struct:boost::detail::multi_array::value_accessor_generator	access:public
boost::detail::multi_array::value_accessor_n	/usr/include/boost/multi_array/base.hpp	/^class value_accessor_n : public multi_array_base {$/;"	c	namespace:boost::detail::multi_array	inherits:multi_array_base
boost::detail::multi_array::value_accessor_n::access	/usr/include/boost/multi_array/base.hpp	/^  Reference access(boost::type<Reference>,index idx,TPtr base,$/;"	f	class:boost::detail::multi_array::value_accessor_n	access:protected	signature:(boost::type<Reference>,index idx,TPtr base, const size_type* extents, const index* strides, const index* index_bases) const
boost::detail::multi_array::value_accessor_n::const_reference	/usr/include/boost/multi_array/base.hpp	/^  typedef const_sub_array<T,NumDims-1> const_reference;$/;"	t	class:boost::detail::multi_array::value_accessor_n	access:public
boost::detail::multi_array::value_accessor_n::element	/usr/include/boost/multi_array/base.hpp	/^  typedef T element;$/;"	t	class:boost::detail::multi_array::value_accessor_n	access:public
boost::detail::multi_array::value_accessor_n::index	/usr/include/boost/multi_array/base.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::detail::multi_array::value_accessor_n	access:public
boost::detail::multi_array::value_accessor_n::reference	/usr/include/boost/multi_array/base.hpp	/^  typedef sub_array<T,NumDims-1> reference;$/;"	t	class:boost::detail::multi_array::value_accessor_n	access:public
boost::detail::multi_array::value_accessor_n::super_type	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_base super_type;$/;"	t	class:boost::detail::multi_array::value_accessor_n	access:private
boost::detail::multi_array::value_accessor_n::value_accessor_n	/usr/include/boost/multi_array/base.hpp	/^  value_accessor_n() { }$/;"	f	class:boost::detail::multi_array::value_accessor_n	access:protected	signature:()
boost::detail::multi_array::value_accessor_n::value_type	/usr/include/boost/multi_array/base.hpp	/^  typedef boost::multi_array<T,NumDims-1> value_type;$/;"	t	class:boost::detail::multi_array::value_accessor_n	access:public
boost::detail::multi_array::value_accessor_n::~value_accessor_n	/usr/include/boost/multi_array/base.hpp	/^  ~value_accessor_n() { }$/;"	f	class:boost::detail::multi_array::value_accessor_n	access:protected	signature:()
boost::detail::multi_array::value_accessor_one	/usr/include/boost/multi_array/base.hpp	/^class value_accessor_one : public multi_array_base {$/;"	c	namespace:boost::detail::multi_array	inherits:multi_array_base
boost::detail::multi_array::value_accessor_one::access	/usr/include/boost/multi_array/base.hpp	/^  Reference access(boost::type<Reference>,index idx,TPtr base,$/;"	f	class:boost::detail::multi_array::value_accessor_one	access:protected	signature:(boost::type<Reference>,index idx,TPtr base, const size_type* extents, const index* strides, const index* index_bases) const
boost::detail::multi_array::value_accessor_one::const_reference	/usr/include/boost/multi_array/base.hpp	/^  typedef T const& const_reference;$/;"	t	class:boost::detail::multi_array::value_accessor_one	access:public
boost::detail::multi_array::value_accessor_one::element	/usr/include/boost/multi_array/base.hpp	/^  typedef T element;$/;"	t	class:boost::detail::multi_array::value_accessor_one	access:public
boost::detail::multi_array::value_accessor_one::index	/usr/include/boost/multi_array/base.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::detail::multi_array::value_accessor_one	access:public
boost::detail::multi_array::value_accessor_one::reference	/usr/include/boost/multi_array/base.hpp	/^  typedef T& reference;$/;"	t	class:boost::detail::multi_array::value_accessor_one	access:public
boost::detail::multi_array::value_accessor_one::super_type	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_base super_type;$/;"	t	class:boost::detail::multi_array::value_accessor_one	access:private
boost::detail::multi_array::value_accessor_one::value_accessor_one	/usr/include/boost/multi_array/base.hpp	/^  value_accessor_one() { }$/;"	f	class:boost::detail::multi_array::value_accessor_one	access:protected	signature:()
boost::detail::multi_array::value_accessor_one::value_type	/usr/include/boost/multi_array/base.hpp	/^  typedef T value_type;$/;"	t	class:boost::detail::multi_array::value_accessor_one	access:public
boost::detail::multi_array::value_accessor_one::~value_accessor_one	/usr/include/boost/multi_array/base.hpp	/^  ~value_accessor_one() { }$/;"	f	class:boost::detail::multi_array::value_accessor_one	access:protected	signature:()
boost::fortran_storage_order	/usr/include/boost/multi_array/storage_order.hpp	/^  class fortran_storage_order$/;"	c	namespace:boost
boost::fortran_storage_order::operator general_storage_order<NumDims>	/usr/include/boost/multi_array/storage_order.hpp	/^    operator general_storage_order<NumDims>() const {$/;"	f	class:boost::fortran_storage_order	access:public	signature:() const
boost::fortran_storage_order::size_type	/usr/include/boost/multi_array/storage_order.hpp	/^    typedef detail::multi_array::size_type size_type;$/;"	t	class:boost::fortran_storage_order	access:private
boost::general_storage_order	/usr/include/boost/multi_array/storage_order.hpp	/^  class general_storage_order$/;"	c	namespace:boost
boost::general_storage_order::all_dims_ascending	/usr/include/boost/multi_array/storage_order.hpp	/^    bool all_dims_ascending() const {$/;"	f	class:boost::general_storage_order	access:public	signature:() const
boost::general_storage_order::ascending	/usr/include/boost/multi_array/storage_order.hpp	/^    bool ascending(size_type dim) const { return ascending_[dim]; }$/;"	f	class:boost::general_storage_order	access:public	signature:(size_type dim) const
boost::general_storage_order::ascending_	/usr/include/boost/multi_array/storage_order.hpp	/^    boost::array<bool,NumDims> ascending_;$/;"	m	class:boost::general_storage_order	access:protected
boost::general_storage_order::general_storage_order	/usr/include/boost/multi_array/storage_order.hpp	/^    general_storage_order(OrderingIter ordering,$/;"	f	class:boost::general_storage_order	access:public	signature:(OrderingIter ordering, AscendingIter ascending)
boost::general_storage_order::general_storage_order	/usr/include/boost/multi_array/storage_order.hpp	/^    general_storage_order(const c_storage_order&) {$/;"	f	class:boost::general_storage_order	access:public	signature:(const c_storage_order&)
boost::general_storage_order::general_storage_order	/usr/include/boost/multi_array/storage_order.hpp	/^    general_storage_order(const fortran_storage_order&) {$/;"	f	class:boost::general_storage_order	access:public	signature:(const fortran_storage_order&)
boost::general_storage_order::operator ==	/usr/include/boost/multi_array/storage_order.hpp	/^    bool operator==(general_storage_order const& rhs) const {$/;"	f	class:boost::general_storage_order	access:public	signature:(general_storage_order const& rhs) const
boost::general_storage_order::ordering	/usr/include/boost/multi_array/storage_order.hpp	/^    size_type ordering(size_type dim) const { return ordering_[dim]; }$/;"	f	class:boost::general_storage_order	access:public	signature:(size_type dim) const
boost::general_storage_order::ordering_	/usr/include/boost/multi_array/storage_order.hpp	/^    boost::array<size_type,NumDims> ordering_;$/;"	m	class:boost::general_storage_order	access:protected
boost::general_storage_order::size_type	/usr/include/boost/multi_array/storage_order.hpp	/^    typedef detail::multi_array::size_type size_type;$/;"	t	class:boost::general_storage_order	access:public
boost::multi_array_concepts	/usr/include/boost/multi_array/concept_checks.hpp	/^namespace multi_array_concepts {$/;"	n	namespace:boost
boost::multi_array_concepts::ConstMultiArrayConcept	/usr/include/boost/multi_array/concept_checks.hpp	/^  struct ConstMultiArrayConcept$/;"	s	namespace:boost::multi_array_concepts
boost::multi_array_concepts::ConstMultiArrayConcept::a	/usr/include/boost/multi_array/concept_checks.hpp	/^    Array a;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::cit	/usr/include/boost/multi_array/concept_checks.hpp	/^    const_iterator cit;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::const_iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::const_iterator const_iterator;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::const_reference	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::const_reference const_reference;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::const_reverse_iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::const_reverse_iterator const_reverse_iterator;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::constraints	/usr/include/boost/multi_array/concept_checks.hpp	/^    void constraints() {$/;"	f	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public	signature:()
boost::multi_array_concepts::ConstMultiArrayConcept::crit	/usr/include/boost/multi_array/concept_checks.hpp	/^    const_reverse_iterator crit;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::difference_type	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::difference_type difference_type;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::element	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::element element;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::eltp	/usr/include/boost/multi_array/concept_checks.hpp	/^    const element* eltp;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::extent_gen	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::extent_gen extent_gen;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::extent_range	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::extent_range extent_range;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::id	/usr/include/boost/multi_array/concept_checks.hpp	/^    index id;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::idgen	/usr/include/boost/multi_array/concept_checks.hpp	/^    index_gen idgen;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::idp	/usr/include/boost/multi_array/concept_checks.hpp	/^    const index* idp;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::index	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::index index;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::index_gen	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::index_gen index_gen;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::index_range	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::index_range index_range;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::iterator iterator;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::range	/usr/include/boost/multi_array/concept_checks.hpp	/^    index_range range;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::reference	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::reference reference;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::reverse_iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::reverse_iterator reverse_iterator;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::size_type	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::size_type size_type;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::st	/usr/include/boost/multi_array/concept_checks.hpp	/^    size_type st;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::stp	/usr/include/boost/multi_array/concept_checks.hpp	/^    const size_type* stp;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::ConstMultiArrayConcept::value_type	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::value_type value_type;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept	/usr/include/boost/multi_array/concept_checks.hpp	/^  struct MutableMultiArrayConcept$/;"	s	namespace:boost::multi_array_concepts
boost::multi_array_concepts::MutableMultiArrayConcept::a	/usr/include/boost/multi_array/concept_checks.hpp	/^    Array a;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::cit	/usr/include/boost/multi_array/concept_checks.hpp	/^    const_iterator cit;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::const_constraints	/usr/include/boost/multi_array/concept_checks.hpp	/^    void const_constraints(const Array& a) {$/;"	f	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public	signature:(const Array& a)
boost::multi_array_concepts::MutableMultiArrayConcept::const_iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::const_iterator const_iterator;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::const_reference	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::const_reference const_reference;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::const_reverse_iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::const_reverse_iterator const_reverse_iterator;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::constraints	/usr/include/boost/multi_array/concept_checks.hpp	/^    void constraints() {$/;"	f	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public	signature:()
boost::multi_array_concepts::MutableMultiArrayConcept::crit	/usr/include/boost/multi_array/concept_checks.hpp	/^    const_reverse_iterator crit;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::difference_type	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::difference_type difference_type;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::element	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::element element;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::eltp	/usr/include/boost/multi_array/concept_checks.hpp	/^    const element* eltp;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::extent_gen	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::extent_gen extent_gen;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::extent_range	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::extent_range extent_range;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::id	/usr/include/boost/multi_array/concept_checks.hpp	/^    index id;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::idgen	/usr/include/boost/multi_array/concept_checks.hpp	/^    index_gen idgen;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::idp	/usr/include/boost/multi_array/concept_checks.hpp	/^    const index* idp;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::index	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::index index;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::index_gen	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::index_gen index_gen;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::index_range	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::index_range index_range;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::it	/usr/include/boost/multi_array/concept_checks.hpp	/^    iterator it;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::iterator iterator;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::range	/usr/include/boost/multi_array/concept_checks.hpp	/^    index_range range;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::reference	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::reference reference;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::reverse_iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::reverse_iterator reverse_iterator;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::rit	/usr/include/boost/multi_array/concept_checks.hpp	/^    reverse_iterator rit;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::size_type	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::size_type size_type;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::st	/usr/include/boost/multi_array/concept_checks.hpp	/^    size_type st;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::stp	/usr/include/boost/multi_array/concept_checks.hpp	/^    const size_type* stp;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::MutableMultiArrayConcept::value_type	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::value_type value_type;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
boost::multi_array_concepts::detail	/usr/include/boost/multi_array/concept_checks.hpp	/^namespace detail {$/;"	n	namespace:boost::multi_array_concepts
boost::multi_array_concepts::detail::idgen_helper	/usr/include/boost/multi_array/concept_checks.hpp	/^  struct idgen_helper {$/;"	s	namespace:boost::multi_array_concepts::detail
boost::multi_array_concepts::detail::idgen_helper	/usr/include/boost/multi_array/concept_checks.hpp	/^  struct idgen_helper<0> {$/;"	s	namespace:boost::multi_array_concepts::detail
boost::multi_array_concepts::detail::idgen_helper::call	/usr/include/boost/multi_array/concept_checks.hpp	/^    static void call(Array& a, const IdxGen& idgen, Call_Type c) {$/;"	f	struct:boost::multi_array_concepts::detail::idgen_helper	access:public	signature:(Array& a, const IdxGen& idgen, Call_Type c)
boost::multi_array_concepts::detail::idgen_helper::call	/usr/include/boost/multi_array/concept_checks.hpp	/^    static void call(Array& a, const IdxGen& idgen, Call_Type) {$/;"	f	struct:boost::multi_array_concepts::detail::idgen_helper	access:public	signature:(Array& a, const IdxGen& idgen, Call_Type)
boost::multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^class multi_array_ref :$/;"	c	namespace:boost	inherits:const_multi_array_ref
boost::multi_array_ref::array_view	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  struct array_view {$/;"	s	class:boost::multi_array_ref	access:public
boost::multi_array_ref::array_view::type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::multi_array_ref::array_view	access:public
boost::multi_array_ref::begin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_iterator begin() const {$/;"	f	class:boost::multi_array_ref	access:public	signature:() const
boost::multi_array_ref::begin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  iterator begin() {$/;"	f	class:boost::multi_array_ref	access:public	signature:()
boost::multi_array_ref::const_array_view	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  struct const_array_view {$/;"	s	class:boost::multi_array_ref	access:public
boost::multi_array_ref::const_array_view::type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::multi_array_ref::const_array_view	access:public
boost::multi_array_ref::const_iterator	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::const_iterator const_iterator;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::const_reference	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::const_reference const_reference;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::const_reverse_iterator	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::data	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const element* data() const { return super_type::data(); }$/;"	f	class:boost::multi_array_ref	access:public	signature:() const
boost::multi_array_ref::data	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  element* data() { return super_type::base_; }$/;"	f	class:boost::multi_array_ref	access:public	signature:()
boost::multi_array_ref::difference_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::difference_type difference_type;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::element	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::element element;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::end	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_iterator end() const {$/;"	f	class:boost::multi_array_ref	access:public	signature:() const
boost::multi_array_ref::end	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  iterator end() {$/;"	f	class:boost::multi_array_ref	access:public	signature:()
boost::multi_array_ref::extent_range	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::extent_range extent_range;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::index	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::index_list	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::index_list index_list;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::iterator	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::iterator iterator;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit multi_array_ref(T* base, const ExtentList& extents) :$/;"	f	class:boost::multi_array_ref	access:public	signature:(T* base, const ExtentList& extents)
boost::multi_array_ref::multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit multi_array_ref(T* base, const ExtentList& extents,$/;"	f	class:boost::multi_array_ref	access:public	signature:(T* base, const ExtentList& extents, const general_storage_order<NumDims>& so)
boost::multi_array_ref::multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit multi_array_ref(T* base,$/;"	f	class:boost::multi_array_ref	access:protected	signature:(T* base, const storage_order_type& so, const index* index_bases, const size_type* extents)
boost::multi_array_ref::multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit multi_array_ref(T* base,$/;"	f	class:boost::multi_array_ref	access:public	signature:(T* base, const detail::multi_array:: extent_gen<NumDims>& ranges)
boost::multi_array_ref::multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit multi_array_ref(T* base,$/;"	f	class:boost::multi_array_ref	access:public	signature:(T* base, const detail::multi_array:: extent_gen<NumDims>& ranges, const general_storage_order<NumDims>& so)
boost::multi_array_ref::operator ()	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const element& operator()(const IndexList& indices) const {$/;"	f	class:boost::multi_array_ref	access:public	signature:(const IndexList& indices) const
boost::multi_array_ref::operator ()	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  element& operator()(const IndexList& indices) {$/;"	f	class:boost::multi_array_ref	access:public	signature:(const IndexList& indices)
boost::multi_array_ref::operator =	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  multi_array_ref& operator=(const ConstMultiArray& other) {$/;"	f	class:boost::multi_array_ref	access:public	signature:(const ConstMultiArray& other)
boost::multi_array_ref::operator =	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  multi_array_ref& operator=(const multi_array_ref& other) {$/;"	f	class:boost::multi_array_ref	access:public	signature:(const multi_array_ref& other)
boost::multi_array_ref::operator []	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_reference operator[](index idx) const {$/;"	f	class:boost::multi_array_ref	access:public	signature:(index idx) const
boost::multi_array_ref::operator []	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  operator[](const detail::multi_array::$/;"	f	class:boost::multi_array_ref	access:public	signature:(const detail::multi_array:: index_gen<NumDims,NDims>& indices)
boost::multi_array_ref::operator []	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  operator[](const detail::multi_array::$/;"	f	class:boost::multi_array_ref	access:public	signature:(const detail::multi_array:: index_gen<NumDims,NDims>& indices) const
boost::multi_array_ref::operator []	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  reference operator[](index idx) {$/;"	f	class:boost::multi_array_ref	access:public	signature:(index idx)
boost::multi_array_ref::origin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const element* origin() const { return super_type::origin(); }$/;"	f	class:boost::multi_array_ref	access:public	signature:() const
boost::multi_array_ref::origin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  element* origin() { return super_type::base_+super_type::origin_offset_; }$/;"	f	class:boost::multi_array_ref	access:public	signature:()
boost::multi_array_ref::rbegin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_reverse_iterator rbegin() const {$/;"	f	class:boost::multi_array_ref	access:public	signature:() const
boost::multi_array_ref::rbegin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  reverse_iterator rbegin() {$/;"	f	class:boost::multi_array_ref	access:public	signature:()
boost::multi_array_ref::reference	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::reference reference;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::rend	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_reverse_iterator rend() const {$/;"	f	class:boost::multi_array_ref	access:public	signature:() const
boost::multi_array_ref::rend	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  reverse_iterator rend() {$/;"	f	class:boost::multi_array_ref	access:public	signature:()
boost::multi_array_ref::reverse_iterator	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::reverse_iterator reverse_iterator;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::size_list	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::size_list size_list;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::size_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::size_type size_type;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::storage_order_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::storage_order_type storage_order_type;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_ref::super_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef const_multi_array_ref<T,NumDims,T*> super_type;$/;"	t	class:boost::multi_array_ref	access:private
boost::multi_array_ref::value_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::value_type value_type;$/;"	t	class:boost::multi_array_ref	access:public
boost::multi_array_types	/usr/include/boost/multi_array/base.hpp	/^namespace multi_array_types {$/;"	n	namespace:boost
boost::multi_array_types::difference_type	/usr/include/boost/multi_array/base.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	namespace:boost::multi_array_types
boost::multi_array_types::extent_gen	/usr/include/boost/multi_array/base.hpp	/^  typedef detail::multi_array::extent_gen<0> extent_gen;$/;"	t	namespace:boost::multi_array_types
boost::multi_array_types::extent_range	/usr/include/boost/multi_array/base.hpp	/^  typedef detail::multi_array::extent_range<index,size_type> extent_range;$/;"	t	namespace:boost::multi_array_types
boost::multi_array_types::index	/usr/include/boost/multi_array/base.hpp	/^  typedef boost::detail::multi_array::index index;$/;"	t	namespace:boost::multi_array_types
boost::multi_array_types::index_gen	/usr/include/boost/multi_array/base.hpp	/^  typedef detail::multi_array::index_gen<0,0> index_gen;$/;"	t	namespace:boost::multi_array_types
boost::multi_array_types::index_range	/usr/include/boost/multi_array/base.hpp	/^  typedef detail::multi_array::index_range<index,size_type> index_range;$/;"	t	namespace:boost::multi_array_types
boost::multi_array_types::size_type	/usr/include/boost/multi_array/base.hpp	/^  typedef boost::detail::multi_array::size_type size_type;$/;"	t	namespace:boost::multi_array_types
boost::subarray_gen	/usr/include/boost/multi_array/subarray.hpp	/^class subarray_gen {$/;"	c	namespace:boost
boost::subarray_gen::element	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename Array::element element;$/;"	t	class:boost::subarray_gen	access:private
boost::subarray_gen::type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef boost::detail::multi_array::sub_array<element,N> type;$/;"	t	class:boost::subarray_gen	access:public
c_storage_order	/usr/include/boost/multi_array/storage_order.hpp	/^  class c_storage_order $/;"	c	namespace:boost
calculate_descending_dimension_offset	/usr/include/boost/multi_array/base.hpp	/^  calculate_descending_dimension_offset(const StrideList& stride_list,$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:(const StrideList& stride_list, const ExtentList& extent_list, const general_storage_order<NumDims>& storage)
calculate_indexing_offset	/usr/include/boost/multi_array/base.hpp	/^  calculate_indexing_offset(const StrideList& stride_list,$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:(const StrideList& stride_list, const BaseList& index_base_list)
calculate_origin_offset	/usr/include/boost/multi_array/base.hpp	/^  calculate_origin_offset(const StrideList& stride_list,$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:(const StrideList& stride_list, const ExtentList& extent_list, const general_storage_order<NumDims>& storage, const BaseList& index_base_list)
call	/usr/include/boost/multi_array/concept_checks.hpp	/^    static void call(Array& a, const IdxGen& idgen, Call_Type c) {$/;"	f	struct:boost::multi_array_concepts::detail::idgen_helper	access:public	signature:(Array& a, const IdxGen& idgen, Call_Type c)
call	/usr/include/boost/multi_array/concept_checks.hpp	/^    static void call(Array& a, const IdxGen& idgen, Call_Type) {$/;"	f	struct:boost::multi_array_concepts::detail::idgen_helper	access:public	signature:(Array& a, const IdxGen& idgen, Call_Type)
choice	/usr/include/boost/multi_array/range_list.hpp	/^  typedef choose_range_list_n choice;$/;"	t	struct:boost::detail::multi_array::range_list_gen_helper	access:public
choice	/usr/include/boost/multi_array/range_list.hpp	/^  typedef choose_range_list_zero choice;$/;"	t	struct:boost::detail::multi_array::range_list_gen_helper	access:public
choose_range_list_n	/usr/include/boost/multi_array/range_list.hpp	/^struct choose_range_list_n {$/;"	s	namespace:boost::detail::multi_array
choose_range_list_zero	/usr/include/boost/multi_array/range_list.hpp	/^struct choose_range_list_zero {$/;"	s	namespace:boost::detail::multi_array
choose_value_accessor_n	/usr/include/boost/multi_array/base.hpp	/^struct choose_value_accessor_n {$/;"	s	namespace:boost::detail::multi_array
choose_value_accessor_one	/usr/include/boost/multi_array/base.hpp	/^struct choose_value_accessor_one {$/;"	s	namespace:boost::detail::multi_array
cit	/usr/include/boost/multi_array/concept_checks.hpp	/^    const_iterator cit;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
cit	/usr/include/boost/multi_array/concept_checks.hpp	/^    const_iterator cit;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
compute_strides	/usr/include/boost/multi_array/base.hpp	/^  void compute_strides(StrideList& stride_list, ExtentList& extent_list,$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:(StrideList& stride_list, ExtentList& extent_list, const general_storage_order<NumDims>& storage)
const_array_view	/usr/include/boost/multi_array/base.hpp	/^  struct const_array_view {$/;"	s	class:boost::detail::multi_array::multi_array_impl_base	access:public
const_array_view	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  struct const_array_view {$/;"	s	class:boost::const_multi_array_ref	access:public
const_array_view	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  struct const_array_view {$/;"	s	class:boost::multi_array_ref	access:public
const_array_view	/usr/include/boost/multi_array/subarray.hpp	/^  struct const_array_view {$/;"	s	class:boost::detail::multi_array::const_sub_array	access:public
const_array_view	/usr/include/boost/multi_array/subarray.hpp	/^  struct const_array_view {$/;"	s	class:boost::detail::multi_array::sub_array	access:public
const_array_view	/usr/include/boost/multi_array/view.hpp	/^  struct const_array_view {$/;"	s	class:boost::detail::multi_array::const_multi_array_view	access:public
const_array_view	/usr/include/boost/multi_array/view.hpp	/^  struct const_array_view {$/;"	s	class:boost::detail::multi_array::multi_array_view	access:public
const_array_view_gen	/usr/include/boost/multi_array/view.hpp	/^class const_array_view_gen {$/;"	c	namespace:boost
const_constraints	/usr/include/boost/multi_array/concept_checks.hpp	/^    void const_constraints(const Array& a) {$/;"	f	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public	signature:(const Array& a)
const_iterator	/usr/include/boost/multi_array/base.hpp	/^                         boost::random_access_traversal_tag> const_iterator;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
const_iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::const_iterator const_iterator;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
const_iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::const_iterator const_iterator;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
const_iterator	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::const_iterator const_iterator;$/;"	t	class:boost::const_multi_array_ref	access:public
const_iterator	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::const_iterator const_iterator;$/;"	t	class:boost::multi_array_ref	access:public
const_iterator	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::const_iterator const_iterator;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
const_iterator	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::const_iterator const_iterator;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
const_iterator	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::const_iterator const_iterator;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
const_iterator	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::const_iterator const_iterator;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_multi_array_ref(TPtr base,$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(TPtr base, const storage_order_type& so, const index * index_bases, const size_type* extents)
const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_multi_array_ref(const const_multi_array_ref<T,NumDims,OPtr>& other)$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& other)
const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit const_multi_array_ref(TPtr base, const ExtentList& extents) :$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(TPtr base, const ExtentList& extents)
const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit const_multi_array_ref(TPtr base, const ExtentList& extents,$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(TPtr base, const ExtentList& extents, const general_storage_order<NumDims>& so)
const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit const_multi_array_ref(TPtr base,$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(TPtr base, const detail::multi_array:: extent_gen<NumDims>& ranges)
const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit const_multi_array_ref(TPtr base,$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(TPtr base, const detail::multi_array:: extent_gen<NumDims>& ranges, const general_storage_order<NumDims>& so)
const_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^class const_multi_array_ref :$/;"	c	namespace:boost	inherits:detail::multi_array::multi_array_impl_base
const_multi_array_view	/usr/include/boost/multi_array/view.hpp	/^  const_multi_array_view(const $/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& other)
const_multi_array_view	/usr/include/boost/multi_array/view.hpp	/^  explicit const_multi_array_view(TPtr base,$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(TPtr base, const ExtentList& extents, const boost::array<Index,NumDims>& strides)
const_multi_array_view	/usr/include/boost/multi_array/view.hpp	/^class const_multi_array_view :$/;"	c	namespace:boost::detail::multi_array	inherits:boost::detail::multi_array::multi_array_impl_base
const_reference	/usr/include/boost/multi_array/base.hpp	/^  typedef T const& const_reference;$/;"	t	class:boost::detail::multi_array::value_accessor_one	access:public
const_reference	/usr/include/boost/multi_array/base.hpp	/^  typedef const_sub_array<T,NumDims-1> const_reference;$/;"	t	class:boost::detail::multi_array::value_accessor_n	access:public
const_reference	/usr/include/boost/multi_array/base.hpp	/^  typedef int const_reference;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
const_reference	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::const_reference const_reference;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
const_reference	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::const_reference const_reference;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
const_reference	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::const_reference const_reference;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
const_reference	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::const_reference const_reference;$/;"	t	class:boost::const_multi_array_ref	access:public
const_reference	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::const_reference const_reference;$/;"	t	class:boost::multi_array_ref	access:public
const_reference	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::const_reference const_reference;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
const_reference	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::const_reference const_reference;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
const_reference	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::const_reference const_reference;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
const_reference	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::const_reference const_reference;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
const_reverse_iterator	/usr/include/boost/multi_array/base.hpp	/^  typedef ::boost::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
const_reverse_iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::const_reverse_iterator const_reverse_iterator;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
const_reverse_iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::const_reverse_iterator const_reverse_iterator;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
const_reverse_iterator	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::const_multi_array_ref	access:public
const_reverse_iterator	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::multi_array_ref	access:public
const_reverse_iterator	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
const_reverse_iterator	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
const_reverse_iterator	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
const_reverse_iterator	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
const_sub_array	/usr/include/boost/multi_array/subarray.hpp	/^  const_sub_array (TPtr base,$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(TPtr base, const size_type* extents, const index* strides, const index* index_base)
const_sub_array	/usr/include/boost/multi_array/subarray.hpp	/^  const_sub_array (const const_sub_array<T,NumDims,OPtr>& rhs) :$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs)
const_sub_array	/usr/include/boost/multi_array/subarray.hpp	/^class const_sub_array :$/;"	c	namespace:boost::detail::multi_array	inherits:boost::detail::multi_array::multi_array_impl_base
const_subarray	/usr/include/boost/multi_array/base.hpp	/^  struct const_subarray {$/;"	s	class:boost::detail::multi_array::multi_array_impl_base	access:public
const_subarray_gen	/usr/include/boost/multi_array/subarray.hpp	/^class const_subarray_gen {$/;"	c	namespace:boost
constraints	/usr/include/boost/multi_array/concept_checks.hpp	/^    void constraints() {$/;"	f	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public	signature:()
constraints	/usr/include/boost/multi_array/concept_checks.hpp	/^    void constraints() {$/;"	f	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public	signature:()
copy_array	/usr/include/boost/multi_array/copy_array.hpp	/^  static void copy_array (SourceIterator first, SourceIterator last,$/;"	f	class:boost::detail::multi_array::copy_dispatch	access:public	signature:(SourceIterator first, SourceIterator last, DestIterator result)
copy_array	/usr/include/boost/multi_array/copy_array.hpp	/^  static void copy_array (const Array1& source, Array2 dest) {$/;"	f	class:boost::detail::multi_array::copy_dispatch	access:private	signature:(const Array1& source, Array2 dest)
copy_array	/usr/include/boost/multi_array/copy_array.hpp	/^  static void copy_array (const Element& source, Element& dest) {$/;"	f	class:boost::detail::multi_array::copy_dispatch	access:private	signature:(const Element& source, Element& dest)
copy_array	/usr/include/boost/multi_array/copy_array.hpp	/^void copy_array (Array1& source, Array2& dest) {$/;"	f	namespace:boost::detail::multi_array	signature:(Array1& source, Array2& dest)
copy_dispatch	/usr/include/boost/multi_array/copy_array.hpp	/^class copy_dispatch {$/;"	c	namespace:boost::detail::multi_array
copy_n	/usr/include/boost/multi_array/algorithm.hpp	/^OutputIter copy_n(InputIter first, Size count,$/;"	f	namespace:boost::detail::multi_array	signature:(InputIter first, Size count, OutputIter result)
crit	/usr/include/boost/multi_array/concept_checks.hpp	/^    const_reverse_iterator crit;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
crit	/usr/include/boost/multi_array/concept_checks.hpp	/^    const_reverse_iterator crit;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
data	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const element* data() const { return base_; }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
data	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const element* data() const { return super_type::data(); }$/;"	f	class:boost::multi_array_ref	access:public	signature:() const
data	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  element* data() { return super_type::base_; }$/;"	f	class:boost::multi_array_ref	access:public	signature:()
decrement	/usr/include/boost/multi_array/iterator.hpp	/^  void decrement() { --idx_; }$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:()
degenerate_	/usr/include/boost/multi_array/index_range.hpp	/^    bool degenerate_;$/;"	m	class:boost::detail::multi_array::index_range	access:public
dereference	/usr/include/boost/multi_array/iterator.hpp	/^  reference dereference() const$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:() const
detail	/usr/include/boost/multi_array/algorithm.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/base.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/collection_concept.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/concept_checks.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/concept_checks.hpp	/^namespace detail {$/;"	n	namespace:boost::multi_array_concepts
detail	/usr/include/boost/multi_array/copy_array.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/extent_gen.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/extent_range.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/index_gen.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/index_range.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/iterator.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/range_list.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/subarray.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/types.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/multi_array/view.hpp	/^namespace detail {$/;"	n	namespace:boost
difference_type	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::difference_type difference_type;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
difference_type	/usr/include/boost/multi_array/base.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	namespace:boost::multi_array_types
difference_type	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::difference_type difference_type;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
difference_type	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::difference_type difference_type;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
difference_type	/usr/include/boost/multi_array/iterator.hpp	/^  typedef typename facade_type::difference_type difference_type;$/;"	t	class:boost::detail::multi_array::array_iterator	access:public
difference_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::difference_type difference_type;$/;"	t	class:boost::const_multi_array_ref	access:public
difference_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::difference_type difference_type;$/;"	t	class:boost::multi_array_ref	access:public
difference_type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::difference_type difference_type;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
difference_type	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::difference_type difference_type;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
difference_type	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::difference_type difference_type;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
directional_offset_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  index directional_offset_;$/;"	m	class:boost::const_multi_array_ref	access:public
distance_to	/usr/include/boost/multi_array/iterator.hpp	/^  distance_to(IteratorAdaptor& rhs) const {$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:(IteratorAdaptor& rhs) const
element	/usr/include/boost/multi_array/base.hpp	/^  typedef T element;$/;"	t	class:boost::detail::multi_array::value_accessor_n	access:public
element	/usr/include/boost/multi_array/base.hpp	/^  typedef T element;$/;"	t	class:boost::detail::multi_array::value_accessor_one	access:public
element	/usr/include/boost/multi_array/base.hpp	/^  typedef int element;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
element	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::element element;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
element	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::element element;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
element	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::element element;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
element	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::element element;$/;"	t	class:boost::const_multi_array_ref	access:public
element	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::element element;$/;"	t	class:boost::multi_array_ref	access:public
element	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename Array::element element;$/;"	t	class:boost::const_subarray_gen	access:private
element	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename Array::element element;$/;"	t	class:boost::subarray_gen	access:private
element	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::element element;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
element	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::element element;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
element	/usr/include/boost/multi_array/view.hpp	/^  typedef typename Array::element element;$/;"	t	class:boost::array_view_gen	access:private
element	/usr/include/boost/multi_array/view.hpp	/^  typedef typename Array::element element;$/;"	t	class:boost::const_array_view_gen	access:private
element	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::element element;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
element	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::element element;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
eltp	/usr/include/boost/multi_array/concept_checks.hpp	/^    const element* eltp;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
eltp	/usr/include/boost/multi_array/concept_checks.hpp	/^    const element* eltp;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
empty	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool empty() const { return size() == 0; }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
empty	/usr/include/boost/multi_array/subarray.hpp	/^  bool empty() const { return size() == 0; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
empty	/usr/include/boost/multi_array/view.hpp	/^  bool empty() const { return size() == 0; }$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
end	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_iterator end() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
end	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_iterator end() const {$/;"	f	class:boost::multi_array_ref	access:public	signature:() const
end	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  iterator end() {$/;"	f	class:boost::multi_array_ref	access:public	signature:()
end	/usr/include/boost/multi_array/subarray.hpp	/^  const_iterator end() const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
end	/usr/include/boost/multi_array/subarray.hpp	/^  const_iterator end() const {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:() const
end	/usr/include/boost/multi_array/subarray.hpp	/^  iterator end() {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:()
end	/usr/include/boost/multi_array/view.hpp	/^  const_iterator end() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
end	/usr/include/boost/multi_array/view.hpp	/^  const_iterator end() const {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:() const
end	/usr/include/boost/multi_array/view.hpp	/^  iterator end() {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:()
equal	/usr/include/boost/multi_array/iterator.hpp	/^  bool equal(IteratorAdaptor& rhs) const {$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:(IteratorAdaptor& rhs) const
eti_value_accessor	/usr/include/boost/multi_array/base.hpp	/^struct eti_value_accessor$/;"	s	namespace:boost::detail::multi_array
extent_gen	/usr/include/boost/multi_array/base.hpp	/^  typedef detail::multi_array::extent_gen<0> extent_gen;$/;"	t	namespace:boost::multi_array_types
extent_gen	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::extent_gen extent_gen;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
extent_gen	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::extent_gen extent_gen;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
extent_gen	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::extent_gen extent_gen;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
extent_gen	/usr/include/boost/multi_array/extent_gen.hpp	/^  extent_gen() { }$/;"	f	class:boost::detail::multi_array::extent_gen	access:public	signature:()
extent_gen	/usr/include/boost/multi_array/extent_gen.hpp	/^  extent_gen(const extent_gen<NumRanges-1>& rhs,$/;"	f	class:boost::detail::multi_array::extent_gen	access:public	signature:(const extent_gen<NumRanges-1>& rhs, const range& a_range)
extent_gen	/usr/include/boost/multi_array/extent_gen.hpp	/^class extent_gen {$/;"	c	namespace:boost::detail::multi_array
extent_list_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  size_list extent_list_;$/;"	m	class:boost::const_multi_array_ref	access:public
extent_list_	/usr/include/boost/multi_array/view.hpp	/^  size_list extent_list_;$/;"	m	class:boost::detail::multi_array::const_multi_array_view	access:public
extent_range	/usr/include/boost/multi_array/base.hpp	/^  typedef detail::multi_array::extent_range<index,size_type> extent_range;$/;"	t	namespace:boost::multi_array_types
extent_range	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::extent_range extent_range;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
extent_range	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::extent_range extent_range;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
extent_range	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::extent_range extent_range;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
extent_range	/usr/include/boost/multi_array/extent_range.hpp	/^  extent_range() : super_type(0,0) { }$/;"	f	class:boost::detail::multi_array::extent_range	access:public	signature:()
extent_range	/usr/include/boost/multi_array/extent_range.hpp	/^  extent_range(index finish) :$/;"	f	class:boost::detail::multi_array::extent_range	access:public	signature:(index finish)
extent_range	/usr/include/boost/multi_array/extent_range.hpp	/^  extent_range(index start, index finish) :$/;"	f	class:boost::detail::multi_array::extent_range	access:public	signature:(index start, index finish)
extent_range	/usr/include/boost/multi_array/extent_range.hpp	/^class extent_range : private std::pair<Extent,Extent> {$/;"	c	namespace:boost::detail::multi_array	inherits:std::pair
extent_range	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::extent_range extent_range;$/;"	t	class:boost::const_multi_array_ref	access:public
extent_range	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::extent_range extent_range;$/;"	t	class:boost::multi_array_ref	access:public
extent_range	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::extent_range extent_range;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
extent_range	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::extent_range extent_range;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
extent_range	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::extent_range extent_range;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
extents	/usr/include/boost/multi_array/base.hpp	/^  multi_array_types::extent_gen extents;$/;"	m	namespace:boost::__anon1
extents	/usr/include/boost/multi_array/extent_gen.hpp	/^  static extent_gen<0> extents() {$/;"	f	class:boost::detail::multi_array::extent_gen	access:public	signature:()
extents_	/usr/include/boost/multi_array/iterator.hpp	/^  const size_type* extents_;$/;"	m	class:boost::detail::multi_array::array_iterator	access:public
extents_	/usr/include/boost/multi_array/subarray.hpp	/^  const size_type* extents_;$/;"	m	class:boost::detail::multi_array::const_sub_array	access:public
facade_type	/usr/include/boost/multi_array/iterator.hpp	/^    > facade_type;$/;"	t	class:boost::detail::multi_array::array_iterator	access:private
finish	/usr/include/boost/multi_array/extent_range.hpp	/^  index finish() const { return super_type::second; }$/;"	f	class:boost::detail::multi_array::extent_range	access:public	signature:() const
finish	/usr/include/boost/multi_array/index_range.hpp	/^    index finish() const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:() const
finish	/usr/include/boost/multi_array/index_range.hpp	/^    index_range& finish(index f) {$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index f)
finish_	/usr/include/boost/multi_array/index_range.hpp	/^    index start_, finish_, stride_;$/;"	m	class:boost::detail::multi_array::index_range	access:public
fortran_storage_order	/usr/include/boost/multi_array/storage_order.hpp	/^  class fortran_storage_order$/;"	c	namespace:boost
from_start	/usr/include/boost/multi_array/index_range.hpp	/^    static index from_start()$/;"	f	class:boost::detail::multi_array::index_range	access:private	signature:()
gen_type	/usr/include/boost/multi_array/extent_gen.hpp	/^  struct gen_type {$/;"	s	class:boost::detail::multi_array::extent_gen	access:public
gen_type	/usr/include/boost/multi_array/index_gen.hpp	/^  struct gen_type {$/;"	s	struct:boost::detail::multi_array::index_gen	access:public
general_storage_order	/usr/include/boost/multi_array/storage_order.hpp	/^    general_storage_order(OrderingIter ordering,$/;"	f	class:boost::general_storage_order	access:public	signature:(OrderingIter ordering, AscendingIter ascending)
general_storage_order	/usr/include/boost/multi_array/storage_order.hpp	/^    general_storage_order(const c_storage_order&) {$/;"	f	class:boost::general_storage_order	access:public	signature:(const c_storage_order&)
general_storage_order	/usr/include/boost/multi_array/storage_order.hpp	/^    general_storage_order(const fortran_storage_order&) {$/;"	f	class:boost::general_storage_order	access:public	signature:(const fortran_storage_order&)
general_storage_order	/usr/include/boost/multi_array/storage_order.hpp	/^  class general_storage_order$/;"	c	namespace:boost
generate_array_view	/usr/include/boost/multi_array/base.hpp	/^  generate_array_view(boost::type<ArrayRef>,$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:(boost::type<ArrayRef>, const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices, const size_type* extents, const index* strides, const index* index_bases, TPtr base) const
get_finish	/usr/include/boost/multi_array/index_range.hpp	/^    index get_finish(index high_index_range = index_range::to_end()) const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index high_index_range = index_range::to_end()) const
get_start	/usr/include/boost/multi_array/index_range.hpp	/^    index get_start(index low_index_range = index_range::from_start()) const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index low_index_range = index_range::from_start()) const
id	/usr/include/boost/multi_array/concept_checks.hpp	/^    index id;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
id	/usr/include/boost/multi_array/concept_checks.hpp	/^    index id;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
idgen	/usr/include/boost/multi_array/concept_checks.hpp	/^    index_gen idgen;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
idgen	/usr/include/boost/multi_array/concept_checks.hpp	/^    index_gen idgen;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
idgen_helper	/usr/include/boost/multi_array/concept_checks.hpp	/^  struct idgen_helper {$/;"	s	namespace:boost::multi_array_concepts::detail
idgen_helper	/usr/include/boost/multi_array/concept_checks.hpp	/^  struct idgen_helper<0> {$/;"	s	namespace:boost::multi_array_concepts::detail
idp	/usr/include/boost/multi_array/concept_checks.hpp	/^    const index* idp;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
idp	/usr/include/boost/multi_array/concept_checks.hpp	/^    const index* idp;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
idx_	/usr/include/boost/multi_array/iterator.hpp	/^  index idx_;$/;"	m	class:boost::detail::multi_array::array_iterator	access:public
increment	/usr/include/boost/multi_array/iterator.hpp	/^  void increment() { ++idx_; }$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:()
index	/usr/include/boost/multi_array/base.hpp	/^  typedef boost::detail::multi_array::index index;$/;"	t	namespace:boost::multi_array_types
index	/usr/include/boost/multi_array/base.hpp	/^  typedef int index;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
index	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::index index;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
index	/usr/include/boost/multi_array/base.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::detail::multi_array::value_accessor_n	access:public
index	/usr/include/boost/multi_array/base.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::detail::multi_array::value_accessor_one	access:public
index	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::index index;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
index	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::index index;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
index	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::index index;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
index	/usr/include/boost/multi_array/extent_gen.hpp	/^  typedef boost::detail::multi_array::index index;$/;"	t	class:boost::detail::multi_array::extent_gen	access:public
index	/usr/include/boost/multi_array/extent_range.hpp	/^  typedef Extent index;$/;"	t	class:boost::detail::multi_array::extent_range	access:public
index	/usr/include/boost/multi_array/index_gen.hpp	/^  typedef ::boost::detail::multi_array::index index;$/;"	t	struct:boost::detail::multi_array::index_gen	access:private
index	/usr/include/boost/multi_array/index_range.hpp	/^    typedef Index index;$/;"	t	class:boost::detail::multi_array::index_range	access:public
index	/usr/include/boost/multi_array/iterator.hpp	/^  typedef typename access_t::index index;$/;"	t	class:boost::detail::multi_array::array_iterator	access:private
index	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::const_multi_array_ref	access:public
index	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::multi_array_ref	access:public
index	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
index	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
index	/usr/include/boost/multi_array/types.hpp	/^typedef std::ptrdiff_t index;$/;"	t	namespace:boost::detail::multi_array
index	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
index	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::index index;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
index_base_	/usr/include/boost/multi_array/iterator.hpp	/^  const index* index_base_;$/;"	m	class:boost::detail::multi_array::array_iterator	access:public
index_base_	/usr/include/boost/multi_array/subarray.hpp	/^  const index* index_base_;$/;"	m	class:boost::detail::multi_array::const_sub_array	access:public
index_base_list_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  index_list index_base_list_;$/;"	m	class:boost::const_multi_array_ref	access:public
index_base_list_	/usr/include/boost/multi_array/view.hpp	/^  index_list index_base_list_;$/;"	m	class:boost::detail::multi_array::const_multi_array_view	access:public
index_bases	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const index* index_bases() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
index_bases	/usr/include/boost/multi_array/subarray.hpp	/^  const index* index_bases() const { return index_base_; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
index_bases	/usr/include/boost/multi_array/view.hpp	/^  const index* index_bases() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
index_gen	/usr/include/boost/multi_array/base.hpp	/^  typedef detail::multi_array::index_gen<0,0> index_gen;$/;"	t	namespace:boost::multi_array_types
index_gen	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::index_gen index_gen;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
index_gen	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::index_gen index_gen;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
index_gen	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::index_gen index_gen;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
index_gen	/usr/include/boost/multi_array/index_gen.hpp	/^  explicit index_gen(const index_gen<NumRanges-1,ND>& rhs,$/;"	f	struct:boost::detail::multi_array::index_gen	access:public	signature:(const index_gen<NumRanges-1,ND>& rhs, const range& r)
index_gen	/usr/include/boost/multi_array/index_gen.hpp	/^  index_gen() { }$/;"	f	struct:boost::detail::multi_array::index_gen	access:public	signature:()
index_gen	/usr/include/boost/multi_array/index_gen.hpp	/^struct index_gen {$/;"	s	namespace:boost::detail::multi_array
index_list	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef boost::array<index,NumDims> index_list;$/;"	t	class:boost::const_multi_array_ref	access:public
index_list	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::index_list index_list;$/;"	t	class:boost::multi_array_ref	access:public
index_list	/usr/include/boost/multi_array/view.hpp	/^  typedef boost::array<index,NumDims> index_list;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
index_range	/usr/include/boost/multi_array/base.hpp	/^  typedef detail::multi_array::index_range<index,size_type> index_range;$/;"	t	namespace:boost::multi_array_types
index_range	/usr/include/boost/multi_array/base.hpp	/^  typedef int index_range;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
index_range	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::index_range index_range;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
index_range	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::index_range index_range;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
index_range	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::index_range index_range;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
index_range	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::index_range index_range;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
index_range	/usr/include/boost/multi_array/index_range.hpp	/^    explicit index_range(index pos)$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index pos)
index_range	/usr/include/boost/multi_array/index_range.hpp	/^    explicit index_range(index start, index finish, index stride=1)$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index start, index finish, index stride=1)
index_range	/usr/include/boost/multi_array/index_range.hpp	/^    index_range()$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:()
index_range	/usr/include/boost/multi_array/index_range.hpp	/^  class index_range {$/;"	c	namespace:boost::detail::multi_array
indices	/usr/include/boost/multi_array/base.hpp	/^  multi_array_types::index_gen indices;$/;"	m	namespace:boost::__anon1
indices	/usr/include/boost/multi_array/index_gen.hpp	/^  static index_gen<0,0> indices() {$/;"	f	struct:boost::detail::multi_array::index_gen	access:public	signature:()
init_from_extent_gen	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  void init_from_extent_gen(const$/;"	f	class:boost::const_multi_array_ref	access:private	signature:(const detail::multi_array:: extent_gen<NumDims>& ranges)
init_multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  void init_multi_array_ref(InputIterator extents_iter) {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(InputIterator extents_iter)
is_degenerate	/usr/include/boost/multi_array/index_range.hpp	/^    bool is_degenerate() const { return degenerate_; }$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:() const
it	/usr/include/boost/multi_array/concept_checks.hpp	/^    iterator it;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
iterator	/usr/include/boost/multi_array/base.hpp	/^                         boost::random_access_traversal_tag> iterator;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
iterator	/usr/include/boost/multi_array/base.hpp	/^                         mutable_iterator_tag> iterator;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::iterator iterator;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::iterator iterator;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
iterator	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::iterator iterator;$/;"	t	class:boost::multi_array_ref	access:public
iterator	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::iterator iterator;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
iterator	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::iterator iterator;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
max_size	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  size_type max_size() const { return num_elements(); }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
max_size	/usr/include/boost/multi_array/subarray.hpp	/^  size_type max_size() const { return num_elements(); }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
max_size	/usr/include/boost/multi_array/view.hpp	/^  size_type max_size() const { return num_elements(); }$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
multi_array	/usr/include/boost/multi_array/algorithm.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/base.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/collection_concept.hpp	/^namespace multi_array { \/\/ Old location for this$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/concept_checks.hpp	/^  namespace multi_array { \/\/ Old locations for these$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/copy_array.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/extent_gen.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/extent_range.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/index_gen.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/index_range.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/iterator.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/range_list.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/subarray.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/types.hpp	/^namespace multi_array{$/;"	n	namespace:boost::detail
multi_array	/usr/include/boost/multi_array/view.hpp	/^namespace multi_array {$/;"	n	namespace:boost::detail
multi_array_base	/usr/include/boost/multi_array/base.hpp	/^class multi_array_base {$/;"	c	namespace:boost::detail::multi_array
multi_array_concepts	/usr/include/boost/multi_array/concept_checks.hpp	/^namespace multi_array_concepts {$/;"	n	namespace:boost
multi_array_impl_base	/usr/include/boost/multi_array/base.hpp	/^  multi_array_impl_base() { }$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:()
multi_array_impl_base	/usr/include/boost/multi_array/base.hpp	/^class multi_array_impl_base$/;"	c	namespace:boost::detail::multi_array	inherits:mpl::aux::msvc_eti_base::type
multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit multi_array_ref(T* base, const ExtentList& extents) :$/;"	f	class:boost::multi_array_ref	access:public	signature:(T* base, const ExtentList& extents)
multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit multi_array_ref(T* base, const ExtentList& extents,$/;"	f	class:boost::multi_array_ref	access:public	signature:(T* base, const ExtentList& extents, const general_storage_order<NumDims>& so)
multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit multi_array_ref(T* base,$/;"	f	class:boost::multi_array_ref	access:protected	signature:(T* base, const storage_order_type& so, const index* index_bases, const size_type* extents)
multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit multi_array_ref(T* base,$/;"	f	class:boost::multi_array_ref	access:public	signature:(T* base, const detail::multi_array:: extent_gen<NumDims>& ranges)
multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  explicit multi_array_ref(T* base,$/;"	f	class:boost::multi_array_ref	access:public	signature:(T* base, const detail::multi_array:: extent_gen<NumDims>& ranges, const general_storage_order<NumDims>& so)
multi_array_ref	/usr/include/boost/multi_array/multi_array_ref.hpp	/^class multi_array_ref :$/;"	c	namespace:boost	inherits:const_multi_array_ref
multi_array_types	/usr/include/boost/multi_array/base.hpp	/^namespace multi_array_types {$/;"	n	namespace:boost
multi_array_view	/usr/include/boost/multi_array/view.hpp	/^  explicit multi_array_view(T* base,$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(T* base, const ExtentList& extents, const boost::array<Index,NumDims>& strides)
multi_array_view	/usr/include/boost/multi_array/view.hpp	/^class multi_array_view :$/;"	c	namespace:boost::detail::multi_array	inherits:const_multi_array_view
mutable_iterator_tag	/usr/include/boost/multi_array/base.hpp	/^struct mutable_iterator_tag$/;"	s	namespace:boost::detail::multi_array	inherits:boost::random_access_traversal_tag,std::input_iterator_tag
num_dimensions	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  size_type num_dimensions() const { return NumDims; }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
num_dimensions	/usr/include/boost/multi_array/subarray.hpp	/^  size_type num_dimensions() const { return NumDims; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
num_dimensions	/usr/include/boost/multi_array/view.hpp	/^  size_type num_dimensions() const { return NumDims; }$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
num_elements	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  size_type num_elements() const { return num_elements_; }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
num_elements	/usr/include/boost/multi_array/subarray.hpp	/^  size_type num_elements() const { $/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
num_elements	/usr/include/boost/multi_array/view.hpp	/^  size_type num_elements() const { return num_elements_; }$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
num_elements_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  size_type num_elements_;$/;"	m	class:boost::const_multi_array_ref	access:public
num_elements_	/usr/include/boost/multi_array/view.hpp	/^  size_type num_elements_;$/;"	m	class:boost::detail::multi_array::const_multi_array_view	access:public
operator !=	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool operator!=(const$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& rhs) const
operator !=	/usr/include/boost/multi_array/subarray.hpp	/^  bool operator!=(const const_sub_array<T,NumDims,OPtr>& rhs) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs) const
operator !=	/usr/include/boost/multi_array/view.hpp	/^  bool operator!=(const$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& rhs) const
operator ()	/usr/include/boost/multi_array/index_range.hpp	/^    index operator()(unsigned i) const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(unsigned i) const
operator ()	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const element& operator()(IndexList indices) const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(IndexList indices) const
operator ()	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const element& operator()(const IndexList& indices) const {$/;"	f	class:boost::multi_array_ref	access:public	signature:(const IndexList& indices) const
operator ()	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  element& operator()(const IndexList& indices) {$/;"	f	class:boost::multi_array_ref	access:public	signature:(const IndexList& indices)
operator ()	/usr/include/boost/multi_array/subarray.hpp	/^  const element& operator()(const IndexList& indices) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const IndexList& indices) const
operator ()	/usr/include/boost/multi_array/subarray.hpp	/^  const element& operator()(const IndexList& indices) const {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(const IndexList& indices) const
operator ()	/usr/include/boost/multi_array/subarray.hpp	/^  element& operator()(const IndexList& indices) {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(const IndexList& indices)
operator ()	/usr/include/boost/multi_array/view.hpp	/^  const element& operator()(IndexList indices) const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(IndexList indices) const
operator ()	/usr/include/boost/multi_array/view.hpp	/^  const element& operator()(const IndexList& indices) const {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(const IndexList& indices) const
operator ()	/usr/include/boost/multi_array/view.hpp	/^  element& operator()(const IndexList& indices) {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(const IndexList& indices)
operator +	/usr/include/boost/multi_array/index_range.hpp	/^    index_range operator+(index shift) const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index shift) const
operator -	/usr/include/boost/multi_array/index_range.hpp	/^    index_range operator-(index shift) const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index shift) const
operator ->	/usr/include/boost/multi_array/iterator.hpp	/^  T* operator->() const { return &value_; }$/;"	f	struct:boost::detail::multi_array::operator_arrow_proxy	access:public	signature:() const
operator ->	/usr/include/boost/multi_array/iterator.hpp	/^  operator->() const$/;"	f	class:boost::detail::multi_array::array_iterator	access:public	signature:() const
operator <	/usr/include/boost/multi_array/index_range.hpp	/^  operator<(Index s, const index_range<Index,SizeType>& r)$/;"	f	namespace:boost::detail::multi_array	signature:(Index s, const index_range<Index,SizeType>& r)
operator <	/usr/include/boost/multi_array/index_range.hpp	/^  operator<(const index_range<Index,SizeType>& r, Index f)$/;"	f	namespace:boost::detail::multi_array	signature:(const index_range<Index,SizeType>& r, Index f)
operator <	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool operator<(const$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& rhs) const
operator <	/usr/include/boost/multi_array/subarray.hpp	/^  bool operator<(const const_sub_array<T,NumDims,OPtr>& rhs) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs) const
operator <	/usr/include/boost/multi_array/view.hpp	/^  bool operator<(const$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& rhs) const
operator <=	/usr/include/boost/multi_array/index_range.hpp	/^  operator<=(Index s, const index_range<Index,SizeType>& r)$/;"	f	namespace:boost::detail::multi_array	signature:(Index s, const index_range<Index,SizeType>& r)
operator <=	/usr/include/boost/multi_array/index_range.hpp	/^  operator<=(const index_range<Index,SizeType>& r, Index f)$/;"	f	namespace:boost::detail::multi_array	signature:(const index_range<Index,SizeType>& r, Index f)
operator <=	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool operator<=(const$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& rhs) const
operator <=	/usr/include/boost/multi_array/subarray.hpp	/^  bool operator<=(const const_sub_array<T,NumDims,OPtr>& rhs) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs) const
operator <=	/usr/include/boost/multi_array/view.hpp	/^  bool operator<=(const$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& rhs) const
operator =	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_multi_array_ref& operator=(const const_multi_array_ref& other);$/;"	p	class:boost::const_multi_array_ref	access:private	signature:(const const_multi_array_ref& other)
operator =	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  multi_array_ref& operator=(const ConstMultiArray& other) {$/;"	f	class:boost::multi_array_ref	access:public	signature:(const ConstMultiArray& other)
operator =	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  multi_array_ref& operator=(const multi_array_ref& other) {$/;"	f	class:boost::multi_array_ref	access:public	signature:(const multi_array_ref& other)
operator =	/usr/include/boost/multi_array/subarray.hpp	/^  const_sub_array& operator=(const const_sub_array&);$/;"	p	class:boost::detail::multi_array::const_sub_array	access:private	signature:(const const_sub_array&)
operator =	/usr/include/boost/multi_array/subarray.hpp	/^  sub_array& operator=(const ConstMultiArray& other) {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(const ConstMultiArray& other)
operator =	/usr/include/boost/multi_array/subarray.hpp	/^  sub_array& operator=(const sub_array& other) {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(const sub_array& other)
operator =	/usr/include/boost/multi_array/view.hpp	/^  const_multi_array_view& operator=(const const_multi_array_view& other);$/;"	p	class:boost::detail::multi_array::const_multi_array_view	access:private	signature:(const const_multi_array_view& other)
operator =	/usr/include/boost/multi_array/view.hpp	/^  multi_array_view& operator=(const ConstMultiArray& other) {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(const ConstMultiArray& other)
operator =	/usr/include/boost/multi_array/view.hpp	/^  multi_array_view& operator=(const multi_array_view& other) {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(const multi_array_view& other)
operator ==	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool operator==(const$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& rhs) const
operator ==	/usr/include/boost/multi_array/storage_order.hpp	/^    bool operator==(general_storage_order const& rhs) const {$/;"	f	class:boost::general_storage_order	access:public	signature:(general_storage_order const& rhs) const
operator ==	/usr/include/boost/multi_array/subarray.hpp	/^  bool operator==(const const_sub_array<T,NumDims,OPtr>& rhs) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs) const
operator ==	/usr/include/boost/multi_array/view.hpp	/^  bool operator==(const$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& rhs) const
operator >	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool operator>(const$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& rhs) const
operator >	/usr/include/boost/multi_array/subarray.hpp	/^  bool operator>(const const_sub_array<T,NumDims,OPtr>& rhs) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs) const
operator >	/usr/include/boost/multi_array/view.hpp	/^  bool operator>(const$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& rhs) const
operator >=	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  bool operator>=(const$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const const_multi_array_ref<T,NumDims,OPtr>& rhs) const
operator >=	/usr/include/boost/multi_array/subarray.hpp	/^  bool operator>=(const const_sub_array<T,NumDims,OPtr>& rhs) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const const_sub_array<T,NumDims,OPtr>& rhs) const
operator >=	/usr/include/boost/multi_array/view.hpp	/^  bool operator>=(const$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const const_multi_array_view<T,NumDims,OPtr>& rhs) const
operator T*	/usr/include/boost/multi_array/iterator.hpp	/^  operator T*() const { return &value_; }$/;"	f	struct:boost::detail::multi_array::operator_arrow_proxy	access:public	signature:() const
operator []	/usr/include/boost/multi_array/extent_gen.hpp	/^  operator[](const range& a_range)$/;"	f	class:boost::detail::multi_array::extent_gen	access:public	signature:(const range& a_range)
operator []	/usr/include/boost/multi_array/extent_gen.hpp	/^  operator[](index idx)$/;"	f	class:boost::detail::multi_array::extent_gen	access:public	signature:(index idx)
operator []	/usr/include/boost/multi_array/index_gen.hpp	/^  operator[](const range& r) const$/;"	f	struct:boost::detail::multi_array::index_gen	access:public	signature:(const range& r) const
operator []	/usr/include/boost/multi_array/index_gen.hpp	/^  operator[](index idx) const$/;"	f	struct:boost::detail::multi_array::index_gen	access:public	signature:(index idx) const
operator []	/usr/include/boost/multi_array/index_range.hpp	/^    index operator[](unsigned i) const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(unsigned i) const
operator []	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_reference operator[](index idx) const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(index idx) const
operator []	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_reference operator[](index idx) const {$/;"	f	class:boost::multi_array_ref	access:public	signature:(index idx) const
operator []	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  operator[](const detail::multi_array::$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const detail::multi_array:: index_gen<NumDims,NDims>& indices) const
operator []	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  operator[](const detail::multi_array::$/;"	f	class:boost::multi_array_ref	access:public	signature:(const detail::multi_array:: index_gen<NumDims,NDims>& indices)
operator []	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  operator[](const detail::multi_array::$/;"	f	class:boost::multi_array_ref	access:public	signature:(const detail::multi_array:: index_gen<NumDims,NDims>& indices) const
operator []	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  reference operator[](index idx) {$/;"	f	class:boost::multi_array_ref	access:public	signature:(index idx)
operator []	/usr/include/boost/multi_array/subarray.hpp	/^  const_reference operator[](index idx) const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(index idx) const
operator []	/usr/include/boost/multi_array/subarray.hpp	/^  const_reference operator[](index idx) const {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(index idx) const
operator []	/usr/include/boost/multi_array/subarray.hpp	/^  operator[](const boost::detail::multi_array::$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:(const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices) const
operator []	/usr/include/boost/multi_array/subarray.hpp	/^  operator[](const boost::detail::multi_array::$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices)
operator []	/usr/include/boost/multi_array/subarray.hpp	/^  operator[](const boost::detail::multi_array::$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices) const
operator []	/usr/include/boost/multi_array/subarray.hpp	/^  reference operator[](index idx) {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(index idx)
operator []	/usr/include/boost/multi_array/view.hpp	/^  const_reference operator[](index idx) const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(index idx) const
operator []	/usr/include/boost/multi_array/view.hpp	/^  const_reference operator[](index idx) const {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(index idx) const
operator []	/usr/include/boost/multi_array/view.hpp	/^  operator[](const boost::detail::multi_array::$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices) const
operator []	/usr/include/boost/multi_array/view.hpp	/^  operator[](const boost::detail::multi_array::$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices)
operator []	/usr/include/boost/multi_array/view.hpp	/^  operator[](const boost::detail::multi_array::$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(const boost::detail::multi_array:: index_gen<NumDims,NDims>& indices) const
operator []	/usr/include/boost/multi_array/view.hpp	/^  reference operator[](index idx) {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:(index idx)
operator general_storage_order<NumDims>	/usr/include/boost/multi_array/storage_order.hpp	/^    operator general_storage_order<NumDims>() const {$/;"	f	class:boost::c_storage_order	access:public	signature:() const
operator general_storage_order<NumDims>	/usr/include/boost/multi_array/storage_order.hpp	/^    operator general_storage_order<NumDims>() const {$/;"	f	class:boost::fortran_storage_order	access:public	signature:() const
operator std::output_iterator_tag	/usr/include/boost/multi_array/base.hpp	/^  operator std::output_iterator_tag() const {$/;"	f	struct:boost::detail::multi_array::mutable_iterator_tag	access:public	signature:() const
operator_arrow_proxy	/usr/include/boost/multi_array/iterator.hpp	/^  operator_arrow_proxy(T const& px) : value_(px) {}$/;"	f	struct:boost::detail::multi_array::operator_arrow_proxy	access:public	signature:(T const& px)
operator_arrow_proxy	/usr/include/boost/multi_array/iterator.hpp	/^struct operator_arrow_proxy$/;"	s	namespace:boost::detail::multi_array
ordering	/usr/include/boost/multi_array/storage_order.hpp	/^    size_type ordering(size_type dim) const { return ordering_[dim]; }$/;"	f	class:boost::general_storage_order	access:public	signature:(size_type dim) const
ordering_	/usr/include/boost/multi_array/storage_order.hpp	/^    boost::array<size_type,NumDims> ordering_;$/;"	m	class:boost::general_storage_order	access:protected
origin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const element* origin() const { return base_+origin_offset_; }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
origin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const element* origin() const { return super_type::origin(); }$/;"	f	class:boost::multi_array_ref	access:public	signature:() const
origin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  element* origin() { return super_type::base_+super_type::origin_offset_; }$/;"	f	class:boost::multi_array_ref	access:public	signature:()
origin	/usr/include/boost/multi_array/subarray.hpp	/^  T* origin() { return this->base_; }$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:()
origin	/usr/include/boost/multi_array/subarray.hpp	/^  TPtr origin() const { return base_; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
origin	/usr/include/boost/multi_array/subarray.hpp	/^  const T* origin() const { return this->base_; }$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:() const
origin	/usr/include/boost/multi_array/view.hpp	/^  const T* origin() const { return base_+origin_offset_; }$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
origin	/usr/include/boost/multi_array/view.hpp	/^  const element* origin() const { return super_type::origin(); }$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:() const
origin	/usr/include/boost/multi_array/view.hpp	/^  element* origin() { return this->base_+this->origin_offset_; }$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:()
origin_offset_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  index origin_offset_;$/;"	m	class:boost::const_multi_array_ref	access:public
origin_offset_	/usr/include/boost/multi_array/view.hpp	/^  index origin_offset_;$/;"	m	class:boost::detail::multi_array::const_multi_array_view	access:public
range	/usr/include/boost/multi_array/concept_checks.hpp	/^    index_range range;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
range	/usr/include/boost/multi_array/concept_checks.hpp	/^    index_range range;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
range	/usr/include/boost/multi_array/extent_gen.hpp	/^  typedef extent_range<index,size_type> range;$/;"	t	class:boost::detail::multi_array::extent_gen	access:public
range	/usr/include/boost/multi_array/index_gen.hpp	/^  typedef index_range<index,size_type> range;$/;"	t	struct:boost::detail::multi_array::index_gen	access:private
range_list	/usr/include/boost/multi_array/extent_gen.hpp	/^  typedef typename range_list_generator<range,NumRanges>::type range_list;$/;"	t	class:boost::detail::multi_array::extent_gen	access:private
range_list	/usr/include/boost/multi_array/index_gen.hpp	/^  typedef typename range_list_generator<range,NumRanges>::type range_list;$/;"	t	struct:boost::detail::multi_array::index_gen	access:public
range_list_gen_helper	/usr/include/boost/multi_array/range_list.hpp	/^struct range_list_gen_helper {$/;"	s	namespace:boost::detail::multi_array
range_list_gen_helper	/usr/include/boost/multi_array/range_list.hpp	/^struct range_list_gen_helper<0> {$/;"	s	namespace:boost::detail::multi_array
range_list_generator	/usr/include/boost/multi_array/range_list.hpp	/^struct range_list_generator {$/;"	s	namespace:boost::detail::multi_array
ranges_	/usr/include/boost/multi_array/extent_gen.hpp	/^  range_list ranges_;$/;"	m	class:boost::detail::multi_array::extent_gen	access:public
ranges_	/usr/include/boost/multi_array/index_gen.hpp	/^  range_list ranges_;$/;"	m	struct:boost::detail::multi_array::index_gen	access:public
rbegin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_reverse_iterator rbegin() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
rbegin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_reverse_iterator rbegin() const {$/;"	f	class:boost::multi_array_ref	access:public	signature:() const
rbegin	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  reverse_iterator rbegin() {$/;"	f	class:boost::multi_array_ref	access:public	signature:()
rbegin	/usr/include/boost/multi_array/subarray.hpp	/^  const_reverse_iterator rbegin() const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
rbegin	/usr/include/boost/multi_array/subarray.hpp	/^  const_reverse_iterator rbegin() const {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:() const
rbegin	/usr/include/boost/multi_array/subarray.hpp	/^  reverse_iterator rbegin() {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:()
rbegin	/usr/include/boost/multi_array/view.hpp	/^  const_reverse_iterator rbegin() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
rbegin	/usr/include/boost/multi_array/view.hpp	/^  const_reverse_iterator rbegin() const {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:() const
rbegin	/usr/include/boost/multi_array/view.hpp	/^  reverse_iterator rbegin() {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:()
reference	/usr/include/boost/multi_array/base.hpp	/^  typedef T& reference;$/;"	t	class:boost::detail::multi_array::value_accessor_one	access:public
reference	/usr/include/boost/multi_array/base.hpp	/^  typedef int reference;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
reference	/usr/include/boost/multi_array/base.hpp	/^  typedef sub_array<T,NumDims-1> reference;$/;"	t	class:boost::detail::multi_array::value_accessor_n	access:public
reference	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::reference reference;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
reference	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::reference reference;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
reference	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::reference reference;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
reference	/usr/include/boost/multi_array/iterator.hpp	/^  typedef typename facade_type::reference reference;$/;"	t	class:boost::detail::multi_array::array_iterator	access:public
reference	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::reference reference;$/;"	t	class:boost::multi_array_ref	access:public
reference	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::reference reference;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
reference	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::reference reference;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
reindex	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  reindex(const BaseList& values) {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const BaseList& values)
reindex	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  void reindex(index value) {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(index value)
reindex	/usr/include/boost/multi_array/view.hpp	/^  reindex(const BaseList& values) {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(const BaseList& values)
reindex	/usr/include/boost/multi_array/view.hpp	/^  void reindex(index value) {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:(index value)
rend	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_reverse_iterator rend() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
rend	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const_reverse_iterator rend() const {$/;"	f	class:boost::multi_array_ref	access:public	signature:() const
rend	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  reverse_iterator rend() {$/;"	f	class:boost::multi_array_ref	access:public	signature:()
rend	/usr/include/boost/multi_array/subarray.hpp	/^  const_reverse_iterator rend() const {$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
rend	/usr/include/boost/multi_array/subarray.hpp	/^  const_reverse_iterator rend() const {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:() const
rend	/usr/include/boost/multi_array/subarray.hpp	/^  reverse_iterator rend() {$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:()
rend	/usr/include/boost/multi_array/view.hpp	/^  const_reverse_iterator rend() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
rend	/usr/include/boost/multi_array/view.hpp	/^  const_reverse_iterator rend() const {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:() const
rend	/usr/include/boost/multi_array/view.hpp	/^  reverse_iterator rend() {$/;"	f	class:boost::detail::multi_array::multi_array_view	access:public	signature:()
reshape	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  void reshape(const SizeList& extents) {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(const SizeList& extents)
reverse_iterator	/usr/include/boost/multi_array/base.hpp	/^  typedef ::boost::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
reverse_iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::reverse_iterator reverse_iterator;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
reverse_iterator	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::reverse_iterator reverse_iterator;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
reverse_iterator	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::reverse_iterator reverse_iterator;$/;"	t	class:boost::multi_array_ref	access:public
reverse_iterator	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::reverse_iterator reverse_iterator;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
reverse_iterator	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::reverse_iterator reverse_iterator;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
rit	/usr/include/boost/multi_array/concept_checks.hpp	/^    reverse_iterator rit;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
set_base_ptr	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  void set_base_ptr(TPtr new_base) { base_ = new_base; }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:(TPtr new_base)
set_index_range	/usr/include/boost/multi_array/index_range.hpp	/^    void set_index_range(index start, index finish, index stride=1)$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index start, index finish, index stride=1)
shape	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const size_type* shape() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
shape	/usr/include/boost/multi_array/subarray.hpp	/^  const size_type*  shape() const { return extents_; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
shape	/usr/include/boost/multi_array/view.hpp	/^  const size_type* shape() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
size	/usr/include/boost/multi_array/extent_range.hpp	/^  size_type size() const { return super_type::second - super_type::first; }$/;"	f	class:boost::detail::multi_array::extent_range	access:public	signature:() const
size	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  size_type size() const { return extent_list_.front(); }$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
size	/usr/include/boost/multi_array/subarray.hpp	/^  size_type size() const { return extents_[0]; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
size	/usr/include/boost/multi_array/view.hpp	/^  size_type size() const { return extent_list_.front(); }$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
size_list	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef boost::array<size_type,NumDims> size_list;$/;"	t	class:boost::const_multi_array_ref	access:public
size_list	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::size_list size_list;$/;"	t	class:boost::multi_array_ref	access:public
size_list	/usr/include/boost/multi_array/view.hpp	/^  typedef boost::array<size_type,NumDims> size_list;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
size_type	/usr/include/boost/multi_array/base.hpp	/^  typedef boost::detail::multi_array::size_type size_type;$/;"	t	namespace:boost::multi_array_types
size_type	/usr/include/boost/multi_array/base.hpp	/^  typedef int size_type;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
size_type	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_types::size_type size_type;$/;"	t	class:boost::detail::multi_array::multi_array_base	access:public
size_type	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::size_type size_type;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
size_type	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::size_type size_type;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
size_type	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::size_type size_type;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
size_type	/usr/include/boost/multi_array/extent_gen.hpp	/^  typedef boost::detail::multi_array::size_type size_type;$/;"	t	class:boost::detail::multi_array::extent_gen	access:public
size_type	/usr/include/boost/multi_array/extent_range.hpp	/^  typedef SizeType size_type;$/;"	t	class:boost::detail::multi_array::extent_range	access:public
size_type	/usr/include/boost/multi_array/index_gen.hpp	/^  typedef ::boost::detail::multi_array::size_type size_type;$/;"	t	struct:boost::detail::multi_array::index_gen	access:private
size_type	/usr/include/boost/multi_array/index_range.hpp	/^    typedef SizeType size_type;$/;"	t	class:boost::detail::multi_array::index_range	access:public
size_type	/usr/include/boost/multi_array/iterator.hpp	/^  typedef typename access_t::size_type size_type;$/;"	t	class:boost::detail::multi_array::array_iterator	access:private
size_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::size_type size_type;$/;"	t	class:boost::const_multi_array_ref	access:public
size_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::size_type size_type;$/;"	t	class:boost::multi_array_ref	access:public
size_type	/usr/include/boost/multi_array/storage_order.hpp	/^    typedef detail::multi_array::size_type size_type;$/;"	t	class:boost::c_storage_order	access:private
size_type	/usr/include/boost/multi_array/storage_order.hpp	/^    typedef detail::multi_array::size_type size_type;$/;"	t	class:boost::fortran_storage_order	access:private
size_type	/usr/include/boost/multi_array/storage_order.hpp	/^    typedef detail::multi_array::size_type size_type;$/;"	t	class:boost::general_storage_order	access:public
size_type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::size_type size_type;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
size_type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::size_type size_type;$/;"	t	class:boost::detail::multi_array::sub_array	access:public
size_type	/usr/include/boost/multi_array/types.hpp	/^typedef std::size_t size_type;$/;"	t	namespace:boost::detail::multi_array
size_type	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::size_type size_type;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
size_type	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::size_type size_type;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
st	/usr/include/boost/multi_array/concept_checks.hpp	/^    size_type st;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
st	/usr/include/boost/multi_array/concept_checks.hpp	/^    size_type st;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
start	/usr/include/boost/multi_array/extent_range.hpp	/^  index start() const { return super_type::first; }$/;"	f	class:boost::detail::multi_array::extent_range	access:public	signature:() const
start	/usr/include/boost/multi_array/index_range.hpp	/^    index start() const$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:() const
start	/usr/include/boost/multi_array/index_range.hpp	/^    index_range& start(index s) {$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index s)
start_	/usr/include/boost/multi_array/index_range.hpp	/^    index start_, finish_, stride_;$/;"	m	class:boost::detail::multi_array::index_range	access:public
storage_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  storage_order_type storage_;$/;"	m	class:boost::const_multi_array_ref	access:public
storage_order	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const storage_order_type& storage_order() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
storage_order_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef general_storage_order<NumDims> storage_order_type;$/;"	t	class:boost::const_multi_array_ref	access:public
storage_order_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::storage_order_type storage_order_type;$/;"	t	class:boost::multi_array_ref	access:public
stp	/usr/include/boost/multi_array/concept_checks.hpp	/^    const size_type* stp;$/;"	m	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
stp	/usr/include/boost/multi_array/concept_checks.hpp	/^    const size_type* stp;$/;"	m	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
stride	/usr/include/boost/multi_array/index_range.hpp	/^    index stride() const { return stride_; }$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:() const
stride	/usr/include/boost/multi_array/index_range.hpp	/^    index_range& stride(index s) { stride_ = s; return *this; }$/;"	f	class:boost::detail::multi_array::index_range	access:public	signature:(index s)
stride_	/usr/include/boost/multi_array/index_range.hpp	/^    index start_, finish_, stride_;$/;"	m	class:boost::detail::multi_array::index_range	access:public
stride_list_	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  index_list stride_list_;$/;"	m	class:boost::const_multi_array_ref	access:public
stride_list_	/usr/include/boost/multi_array/view.hpp	/^  index_list stride_list_;$/;"	m	class:boost::detail::multi_array::const_multi_array_view	access:public
strides	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  const index* strides() const {$/;"	f	class:boost::const_multi_array_ref	access:public	signature:() const
strides	/usr/include/boost/multi_array/subarray.hpp	/^  const index* strides() const { return strides_; }$/;"	f	class:boost::detail::multi_array::const_sub_array	access:public	signature:() const
strides	/usr/include/boost/multi_array/view.hpp	/^  const index* strides() const {$/;"	f	class:boost::detail::multi_array::const_multi_array_view	access:public	signature:() const
strides_	/usr/include/boost/multi_array/iterator.hpp	/^  const index* strides_;$/;"	m	class:boost::detail::multi_array::array_iterator	access:public
strides_	/usr/include/boost/multi_array/subarray.hpp	/^  const index* strides_;$/;"	m	class:boost::detail::multi_array::const_sub_array	access:public
sub_array	/usr/include/boost/multi_array/subarray.hpp	/^  sub_array (T* base,$/;"	f	class:boost::detail::multi_array::sub_array	access:public	signature:(T* base, const size_type* extents, const index* strides, const index* index_base)
sub_array	/usr/include/boost/multi_array/subarray.hpp	/^class sub_array : public const_sub_array<T,NumDims,T*>$/;"	c	namespace:boost::detail::multi_array	inherits:const_sub_array
subarray	/usr/include/boost/multi_array/base.hpp	/^  struct subarray {$/;"	s	class:boost::detail::multi_array::multi_array_impl_base	access:public
subarray_gen	/usr/include/boost/multi_array/subarray.hpp	/^class subarray_gen {$/;"	c	namespace:boost
super_type	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_base super_type;$/;"	t	class:boost::detail::multi_array::value_accessor_n	access:private
super_type	/usr/include/boost/multi_array/base.hpp	/^  typedef multi_array_base super_type;$/;"	t	class:boost::detail::multi_array::value_accessor_one	access:private
super_type	/usr/include/boost/multi_array/extent_range.hpp	/^  typedef std::pair<Extent,Extent> super_type;$/;"	t	class:boost::detail::multi_array::extent_range	access:private
super_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef const_multi_array_ref<T,NumDims,T*> super_type;$/;"	t	class:boost::multi_array_ref	access:private
super_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef detail::multi_array::multi_array_impl_base<T,NumDims> super_type;$/;"	t	class:boost::const_multi_array_ref	access:private
super_type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef boost::detail::multi_array::multi_array_impl_base<T,NumDims> super_type;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:private
super_type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef const_sub_array<T,NumDims,T*> super_type;$/;"	t	class:boost::detail::multi_array::sub_array	access:private
super_type	/usr/include/boost/multi_array/view.hpp	/^  typedef boost::detail::multi_array::multi_array_impl_base<T,NumDims> super_type;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:private
super_type	/usr/include/boost/multi_array/view.hpp	/^  typedef const_multi_array_view<T,NumDims,T*> super_type;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:private
to_end	/usr/include/boost/multi_array/index_range.hpp	/^    static index to_end()$/;"	f	class:boost::detail::multi_array::index_range	access:private	signature:()
type	/usr/include/boost/multi_array/base.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::multi_array_impl_base::const_array_view	access:public
type	/usr/include/boost/multi_array/base.hpp	/^    typedef boost::detail::multi_array::const_sub_array<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::multi_array_impl_base::const_subarray	access:public
type	/usr/include/boost/multi_array/base.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::multi_array_impl_base::array_view	access:public
type	/usr/include/boost/multi_array/base.hpp	/^    typedef boost::detail::multi_array::sub_array<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::multi_array_impl_base::subarray	access:public
type	/usr/include/boost/multi_array/base.hpp	/^  >::type type;$/;"	t	struct:boost::detail::multi_array::value_accessor_generator	access:public
type	/usr/include/boost/multi_array/base.hpp	/^  typedef eti_value_accessor type;$/;"	t	struct:boost::detail::multi_array::value_accessor_generator	access:public
type	/usr/include/boost/multi_array/base.hpp	/^  typedef value_accessor_n<T,NumDims> type;$/;"	t	struct:boost::detail::multi_array::choose_value_accessor_n	access:public
type	/usr/include/boost/multi_array/base.hpp	/^  typedef value_accessor_one<T> type;$/;"	t	struct:boost::detail::multi_array::choose_value_accessor_one	access:public
type	/usr/include/boost/multi_array/extent_gen.hpp	/^    typedef extent_gen<Ranges> type;$/;"	t	struct:boost::detail::multi_array::extent_gen::gen_type	access:public
type	/usr/include/boost/multi_array/index_gen.hpp	/^    typedef index_gen<Ranges,Dims> type;$/;"	t	struct:boost::detail::multi_array::index_gen::gen_type	access:public
type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::const_multi_array_ref::const_array_view	access:public
type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::multi_array_ref::const_array_view	access:public
type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::const_multi_array_ref::array_view	access:public
type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::multi_array_ref::array_view	access:public
type	/usr/include/boost/multi_array/range_list.hpp	/^    typedef boost::array<T,1> type;$/;"	t	struct:boost::detail::multi_array::choose_range_list_zero::bind	access:public
type	/usr/include/boost/multi_array/range_list.hpp	/^    typedef boost::array<T,NumRanges> type;$/;"	t	struct:boost::detail::multi_array::choose_range_list_n::bind	access:public
type	/usr/include/boost/multi_array/range_list.hpp	/^  typedef typename Choice::template bind<T,NumRanges>::type type;$/;"	t	struct:boost::detail::multi_array::range_list_generator	access:public
type	/usr/include/boost/multi_array/subarray.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::const_sub_array::const_array_view	access:public
type	/usr/include/boost/multi_array/subarray.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::sub_array::const_array_view	access:public
type	/usr/include/boost/multi_array/subarray.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::const_sub_array::array_view	access:public
type	/usr/include/boost/multi_array/subarray.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::sub_array::array_view	access:public
type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef boost::detail::multi_array::const_sub_array<element,N> type;  $/;"	t	class:boost::const_subarray_gen	access:public
type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef boost::detail::multi_array::sub_array<element,N> type;$/;"	t	class:boost::subarray_gen	access:public
type	/usr/include/boost/multi_array/view.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::const_multi_array_view::const_array_view	access:public
type	/usr/include/boost/multi_array/view.hpp	/^    typedef boost::detail::multi_array::const_multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::multi_array_view::const_array_view	access:public
type	/usr/include/boost/multi_array/view.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::const_multi_array_view::array_view	access:public
type	/usr/include/boost/multi_array/view.hpp	/^    typedef boost::detail::multi_array::multi_array_view<T,NDims> type;$/;"	t	struct:boost::detail::multi_array::multi_array_view::array_view	access:public
type	/usr/include/boost/multi_array/view.hpp	/^  typedef boost::detail::multi_array::const_multi_array_view<element,N> type;  $/;"	t	class:boost::const_array_view_gen	access:public
type	/usr/include/boost/multi_array/view.hpp	/^  typedef boost::detail::multi_array::multi_array_view<element,N> type;$/;"	t	class:boost::array_view_gen	access:public
types	/usr/include/boost/multi_array/base.hpp	/^  typedef associated_types<T,mpl::size_t<NumDims> > types;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:private
value_	/usr/include/boost/multi_array/iterator.hpp	/^  mutable T value_;$/;"	m	struct:boost::detail::multi_array::operator_arrow_proxy	access:public
value_accessor_generator	/usr/include/boost/multi_array/base.hpp	/^struct value_accessor_generator {$/;"	s	namespace:boost::detail::multi_array
value_accessor_generator	/usr/include/boost/multi_array/base.hpp	/^struct value_accessor_generator<int,int>$/;"	s	namespace:boost::detail::multi_array
value_accessor_n	/usr/include/boost/multi_array/base.hpp	/^  value_accessor_n() { }$/;"	f	class:boost::detail::multi_array::value_accessor_n	access:protected	signature:()
value_accessor_n	/usr/include/boost/multi_array/base.hpp	/^class value_accessor_n : public multi_array_base {$/;"	c	namespace:boost::detail::multi_array	inherits:multi_array_base
value_accessor_one	/usr/include/boost/multi_array/base.hpp	/^  value_accessor_one() { }$/;"	f	class:boost::detail::multi_array::value_accessor_one	access:protected	signature:()
value_accessor_one	/usr/include/boost/multi_array/base.hpp	/^class value_accessor_one : public multi_array_base {$/;"	c	namespace:boost::detail::multi_array	inherits:multi_array_base
value_type	/usr/include/boost/multi_array/base.hpp	/^  typedef T value_type;$/;"	t	class:boost::detail::multi_array::value_accessor_one	access:public
value_type	/usr/include/boost/multi_array/base.hpp	/^  typedef boost::multi_array<T,NumDims-1> value_type;$/;"	t	class:boost::detail::multi_array::value_accessor_n	access:public
value_type	/usr/include/boost/multi_array/base.hpp	/^  typedef int value_type;$/;"	t	struct:boost::detail::multi_array::eti_value_accessor	access:public
value_type	/usr/include/boost/multi_array/base.hpp	/^  typedef typename types::value_type value_type;$/;"	t	class:boost::detail::multi_array::multi_array_impl_base	access:public
value_type	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::value_type value_type;$/;"	t	struct:boost::multi_array_concepts::ConstMultiArrayConcept	access:public
value_type	/usr/include/boost/multi_array/concept_checks.hpp	/^    typedef typename Array::value_type value_type;$/;"	t	struct:boost::multi_array_concepts::MutableMultiArrayConcept	access:public
value_type	/usr/include/boost/multi_array/iterator.hpp	/^  typedef typename facade_type::value_type value_type;$/;"	t	class:boost::detail::multi_array::array_iterator	access:public
value_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::value_type value_type;$/;"	t	class:boost::const_multi_array_ref	access:public
value_type	/usr/include/boost/multi_array/multi_array_ref.hpp	/^  typedef typename super_type::value_type value_type;$/;"	t	class:boost::multi_array_ref	access:public
value_type	/usr/include/boost/multi_array/subarray.hpp	/^  typedef typename super_type::value_type value_type;$/;"	t	class:boost::detail::multi_array::const_sub_array	access:public
value_type	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::value_type value_type;$/;"	t	class:boost::detail::multi_array::const_multi_array_view	access:public
value_type	/usr/include/boost/multi_array/view.hpp	/^  typedef typename super_type::value_type value_type;$/;"	t	class:boost::detail::multi_array::multi_array_view	access:public
~multi_array_impl_base	/usr/include/boost/multi_array/base.hpp	/^  ~multi_array_impl_base() { }$/;"	f	class:boost::detail::multi_array::multi_array_impl_base	access:protected	signature:()
~value_accessor_n	/usr/include/boost/multi_array/base.hpp	/^  ~value_accessor_n() { }$/;"	f	class:boost::detail::multi_array::value_accessor_n	access:protected	signature:()
~value_accessor_one	/usr/include/boost/multi_array/base.hpp	/^  ~value_accessor_one() { }$/;"	f	class:boost::detail::multi_array::value_accessor_one	access:protected	signature:()
