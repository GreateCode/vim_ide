!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_ALGORITHM_ALL_OF_HPP	/usr/include/boost/algorithm/cxx11/all_of.hpp	13;"	d
BOOST_ALGORITHM_ANY_OF_HPP	/usr/include/boost/algorithm/cxx11/any_of.hpp	15;"	d
BOOST_ALGORITHM_BOYER_MOORE_HORSPOOOL_SEARCH_HPP	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	11;"	d
BOOST_ALGORITHM_BOYER_MOORE_SEARCH_HPP	/usr/include/boost/algorithm/searching/boyer_moore.hpp	11;"	d
BOOST_ALGORITHM_CLAMP_HPP	/usr/include/boost/algorithm/clamp.hpp	20;"	d
BOOST_ALGORITHM_COPY_IF_HPP	/usr/include/boost/algorithm/cxx11/copy_if.hpp	13;"	d
BOOST_ALGORITHM_COPY_N_HPP	/usr/include/boost/algorithm/cxx11/copy_n.hpp	13;"	d
BOOST_ALGORITHM_FIND_IF_NOT_HPP	/usr/include/boost/algorithm/cxx11/find_if_not.hpp	13;"	d
BOOST_ALGORITHM_HEXHPP	/usr/include/boost/algorithm/hex.hpp	27;"	d
BOOST_ALGORITHM_IOTA_HPP	/usr/include/boost/algorithm/cxx11/iota.hpp	13;"	d
BOOST_ALGORITHM_IS_PARTITIONED_HPP	/usr/include/boost/algorithm/cxx11/is_partitioned.hpp	13;"	d
BOOST_ALGORITHM_IS_PERMUTATION_HPP	/usr/include/boost/algorithm/cxx11/is_permutation.hpp	13;"	d
BOOST_ALGORITHM_KNUTH_MORRIS_PRATT_SEARCH_HPP	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	11;"	d
BOOST_ALGORITHM_MINMAX_ELEMENT_HPP	/usr/include/boost/algorithm/minmax_element.hpp	16;"	d
BOOST_ALGORITHM_MINMAX_HPP	/usr/include/boost/algorithm/minmax.hpp	16;"	d
BOOST_ALGORITHM_NONE_OF_HPP	/usr/include/boost/algorithm/cxx11/none_of.hpp	13;"	d
BOOST_ALGORITHM_ONE_OF_HPP	/usr/include/boost/algorithm/cxx11/one_of.hpp	13;"	d
BOOST_ALGORITHM_ORDERED_HPP	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	14;"	d
BOOST_ALGORITHM_PARTITION_COPY_HPP	/usr/include/boost/algorithm/cxx11/partition_copy.hpp	13;"	d
BOOST_ALGORITHM_PARTITION_POINT_HPP	/usr/include/boost/algorithm/cxx11/partition_point.hpp	13;"	d
BOOST_ALGORITHM_SEARCH_DETAIL_BM_TRAITS_HPP	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	11;"	d
BOOST_ALGORITHM_SEARCH_DETAIL_DEBUG_HPP	/usr/include/boost/algorithm/searching/detail/debugging.hpp	11;"	d
BOOST_STATIC_CONSTANT	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            BOOST_STATIC_CONSTANT(bool, value=($/;"	p	class:boost::algorithm::has_const_time_erase	access:public	signature:(bool, value=( sizeof(has_const_time_erase_tester(t))==sizeof(yes_type) ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            BOOST_STATIC_CONSTANT(bool, value=($/;"	p	class:boost::algorithm::has_const_time_insert	access:public	signature:(bool, value=( sizeof(has_const_time_insert_tester(t))==sizeof(yes_type) ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            BOOST_STATIC_CONSTANT(bool, value=($/;"	p	class:boost::algorithm::has_native_replace	access:public	signature:(bool, value=( sizeof(has_native_replace_tester(t))==sizeof(yes_type) ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            BOOST_STATIC_CONSTANT(bool, value=($/;"	p	class:boost::algorithm::has_stable_iterators	access:public	signature:(bool, value=( sizeof(has_stable_iterators_tester(t))==sizeof(yes_type) ) )
BOOST_STRING_ALGO_HPP	/usr/include/boost/algorithm/string.hpp	12;"	d
BOOST_STRING_ALGO_REGEX_HPP	/usr/include/boost/algorithm/string_regex.hpp	12;"	d
BOOST_STRING_CASE_CONV_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/case_conv.hpp	12;"	d
BOOST_STRING_CASE_CONV_HPP	/usr/include/boost/algorithm/string/case_conv.hpp	12;"	d
BOOST_STRING_CLASSIFICATION_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/classification.hpp	12;"	d
BOOST_STRING_CLASSIFICATION_HPP	/usr/include/boost/algorithm/string/classification.hpp	12;"	d
BOOST_STRING_COMPARE_HPP	/usr/include/boost/algorithm/string/compare.hpp	12;"	d
BOOST_STRING_CONCEPT_HPP	/usr/include/boost/algorithm/string/concept.hpp	12;"	d
BOOST_STRING_CONFIG_HPP	/usr/include/boost/algorithm/string/config.hpp	12;"	d
BOOST_STRING_CONSTANTS_HPP	/usr/include/boost/algorithm/string/constants.hpp	12;"	d
BOOST_STRING_DETAIL_SEQUENCE_HPP	/usr/include/boost/algorithm/string/detail/sequence.hpp	12;"	d
BOOST_STRING_ERASE_HPP	/usr/include/boost/algorithm/string/erase.hpp	12;"	d
BOOST_STRING_FINDER_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/finder.hpp	12;"	d
BOOST_STRING_FINDER_HPP	/usr/include/boost/algorithm/string/finder.hpp	12;"	d
BOOST_STRING_FINDER_REGEX_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	12;"	d
BOOST_STRING_FIND_FORMAT_ALL_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	12;"	d
BOOST_STRING_FIND_FORMAT_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/find_format.hpp	12;"	d
BOOST_STRING_FIND_FORMAT_HPP	/usr/include/boost/algorithm/string/find_format.hpp	12;"	d
BOOST_STRING_FIND_FORMAT_STORE_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	12;"	d
BOOST_STRING_FIND_HPP	/usr/include/boost/algorithm/string/find.hpp	12;"	d
BOOST_STRING_FIND_ITERATOR_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	12;"	d
BOOST_STRING_FIND_ITERATOR_HPP	/usr/include/boost/algorithm/string/find_iterator.hpp	12;"	d
BOOST_STRING_FORMATTER_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/formatter.hpp	12;"	d
BOOST_STRING_FORMATTER_HPP	/usr/include/boost/algorithm/string/formatter.hpp	12;"	d
BOOST_STRING_FORMATTER_REGEX_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	12;"	d
BOOST_STRING_ITER_FIND_HPP	/usr/include/boost/algorithm/string/iter_find.hpp	12;"	d
BOOST_STRING_JOIN_HPP	/usr/include/boost/algorithm/string/join.hpp	12;"	d
BOOST_STRING_PREDICATE_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/predicate.hpp	12;"	d
BOOST_STRING_PREDICATE_FACADE_HPP	/usr/include/boost/algorithm/string/predicate_facade.hpp	12;"	d
BOOST_STRING_PREDICATE_HPP	/usr/include/boost/algorithm/string/predicate.hpp	12;"	d
BOOST_STRING_REGEX_FIND_FORMAT_HPP	/usr/include/boost/algorithm/string/regex_find_format.hpp	12;"	d
BOOST_STRING_REGEX_HPP	/usr/include/boost/algorithm/string/regex.hpp	12;"	d
BOOST_STRING_REPLACE_HPP	/usr/include/boost/algorithm/string/replace.hpp	12;"	d
BOOST_STRING_REPLACE_STORAGE_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	12;"	d
BOOST_STRING_SEQUENCE_TRAITS_HPP	/usr/include/boost/algorithm/string/sequence_traits.hpp	12;"	d
BOOST_STRING_SPLIT_HPP	/usr/include/boost/algorithm/string/split.hpp	12;"	d
BOOST_STRING_STD_CONTAINERS_TRAITS_HPP	/usr/include/boost/algorithm/string/std_containers_traits.hpp	12;"	d
BOOST_STRING_STD_LIST_TRAITS_HPP	/usr/include/boost/algorithm/string/std/list_traits.hpp	12;"	d
BOOST_STRING_STD_ROPE_TRAITS_HPP	/usr/include/boost/algorithm/string/std/rope_traits.hpp	12;"	d
BOOST_STRING_STD_SLIST_TRAITS_HPP	/usr/include/boost/algorithm/string/std/slist_traits.hpp	12;"	d
BOOST_STRING_STD_STRING_TRAITS_HPP	/usr/include/boost/algorithm/string/std/string_traits.hpp	12;"	d
BOOST_STRING_TRIM_ALL_HPP	/usr/include/boost/algorithm/string/trim_all.hpp	12;"	d
BOOST_STRING_TRIM_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/trim.hpp	12;"	d
BOOST_STRING_TRIM_HPP	/usr/include/boost/algorithm/string/trim.hpp	12;"	d
BOOST_STRING_TYPENAME	/usr/include/boost/algorithm/string/config.hpp	21;"	d
BOOST_STRING_UTIL_DETAIL_HPP	/usr/include/boost/algorithm/string/detail/util.hpp	12;"	d
BOOST_STRING_YES_NO_TYPE_DETAIL_HPP	/usr/include/boost/algorithm/string/yes_no_type.hpp	12;"	d
FinderConcept	/usr/include/boost/algorithm/string/concept.hpp	/^        struct FinderConcept$/;"	s	namespace:boost::algorithm
FormatterConcept	/usr/include/boost/algorithm/string/concept.hpp	/^        struct FormatterConcept$/;"	s	namespace:boost::algorithm
PrintSkipTable	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        void PrintSkipTable () const {$/;"	f	class:boost::algorithm::detail::skip_table	access:public	signature:() const
PrintTable	/usr/include/boost/algorithm/searching/detail/debugging.hpp	/^    void PrintTable ( Iter first, Iter last ) {$/;"	f	namespace:boost::algorithm::detail	signature:( Iter first, Iter last )
algorithm	/usr/include/boost/algorithm/clamp.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/all_of.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/any_of.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/copy_n.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/find_if_not.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/iota.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/is_partitioned.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/is_permutation.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/none_of.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/one_of.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/partition_copy.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/cxx11/partition_point.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/hex.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^namespace boost { namespace algorithm { namespace detail {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/searching/detail/debugging.hpp	/^namespace boost { namespace algorithm { namespace detail {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/case_conv.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/classification.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/compare.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/concept.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/constants.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/classification.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^    namespace algorithm { $/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/finder.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/predicate.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/trim.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/detail/util.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/erase.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/find.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/find_format.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/find_iterator.hpp	/^    namespace algorithm { $/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/finder.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/formatter.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/iter_find.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/join.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/predicate.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/predicate_facade.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/regex.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/regex_find_format.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/replace.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/split.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/std/list_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/std/rope_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/std/slist_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/std/string_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/trim.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/trim_all.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/algorithm/string/yes_no_type.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
all	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool all( $/;"	f	namespace:boost::algorithm	signature:( const RangeT& Input, PredicateT Pred)
all_of	/usr/include/boost/algorithm/cxx11/all_of.hpp	/^bool all_of ( const Range &r, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, Predicate p )
all_of_equal	/usr/include/boost/algorithm/cxx11/all_of.hpp	/^bool all_of_equal ( InputIterator first, InputIterator last, const T &val )$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, const T &val )
all_of_equal	/usr/include/boost/algorithm/cxx11/all_of.hpp	/^bool all_of_equal ( const Range &r, const T &val ) $/;"	f	namespace:boost::algorithm	signature:( const Range &r, const T &val )
any_of	/usr/include/boost/algorithm/cxx11/any_of.hpp	/^bool any_of ( const Range &r, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, Predicate p )
any_of_equal	/usr/include/boost/algorithm/cxx11/any_of.hpp	/^bool any_of_equal ( InputIterator first, InputIterator last, const V &val ) $/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, const V &val )
any_of_equal	/usr/include/boost/algorithm/cxx11/any_of.hpp	/^bool any_of_equal ( const Range &r, const V &val ) $/;"	f	namespace:boost::algorithm	signature:( const Range &r, const V &val )
bad_char	/usr/include/boost/algorithm/hex.hpp	/^typedef boost::error_info<struct bad_char_,char> bad_char;$/;"	t	namespace:boost::algorithm
base_type	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                typedef iterator_range<ForwardIteratorT> base_type;$/;"	t	class:boost::algorithm::detail::find_format_store	access:public
base_type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef iterator_range<IteratorT> base_type;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
base_type	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            typedef detail::find_iterator_base<IteratorT> base_type;$/;"	t	class:boost::algorithm::find_iterator	access:private
base_type	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            typedef detail::find_iterator_base<IteratorT> base_type;$/;"	t	class:boost::algorithm::split_iterator	access:private
basic_first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_first_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
basic_first_min_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_first_min_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
basic_first_min_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_first_min_last_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
basic_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_last_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
basic_last_min_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_last_min_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
basic_last_min_first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_last_min_first_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
basic_last_min_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_last_min_last_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
basic_minmax_element	/usr/include/boost/algorithm/minmax_element.hpp	/^    basic_minmax_element(ForwardIter first, ForwardIter last, Compare comp)$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, Compare comp)
begin	/usr/include/boost/algorithm/string/detail/util.hpp	/^                const_iterator begin() const$/;"	f	struct:boost::algorithm::detail::empty_container	access:public	signature:() const
binary_pred_over_iter	/usr/include/boost/algorithm/minmax_element.hpp	/^      explicit binary_pred_over_iter(BinaryPredicate const& p ) : m_p( p ) {}$/;"	f	struct:boost::detail::binary_pred_over_iter	access:public	signature:(BinaryPredicate const& p )
binary_pred_over_iter	/usr/include/boost/algorithm/minmax_element.hpp	/^    struct binary_pred_over_iter {$/;"	s	namespace:boost::detail
boost	/usr/include/boost/algorithm/clamp.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/all_of.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/any_of.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/copy_n.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/find_if_not.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/iota.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/is_partitioned.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/is_permutation.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/none_of.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/one_of.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/partition_copy.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/cxx11/partition_point.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/hex.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/minmax.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/minmax_element.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^namespace boost { namespace algorithm { namespace detail {$/;"	n
boost	/usr/include/boost/algorithm/searching/detail/debugging.hpp	/^namespace boost { namespace algorithm { namespace detail {$/;"	n
boost	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^namespace boost { namespace algorithm {$/;"	n
boost	/usr/include/boost/algorithm/string/case_conv.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/classification.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/compare.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/concept.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/classification.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/finder.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/predicate.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/trim.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/detail/util.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/erase.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/find.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/find_format.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/find_iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/finder.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/formatter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/iter_find.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/join.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/predicate.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/predicate_facade.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/regex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/regex_find_format.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/replace.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/split.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/std/list_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/std/rope_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/std/slist_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/std/string_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/trim.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/trim_all.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/algorithm/string/yes_no_type.hpp	/^namespace boost {$/;"	n
boost::algorithm	/usr/include/boost/algorithm/clamp.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/all_of.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/any_of.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/copy_n.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/find_if_not.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/iota.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/is_partitioned.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/is_permutation.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/none_of.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/one_of.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/partition_copy.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/cxx11/partition_point.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/hex.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^namespace boost { namespace algorithm { namespace detail {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/searching/detail/debugging.hpp	/^namespace boost { namespace algorithm { namespace detail {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^namespace boost { namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/case_conv.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/classification.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/compare.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/concept.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/constants.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/classification.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^    namespace algorithm { $/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/finder.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/predicate.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/trim.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/detail/util.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/erase.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/find.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/find_format.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/find_iterator.hpp	/^    namespace algorithm { $/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/finder.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/formatter.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/iter_find.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/join.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/predicate.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/predicate_facade.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/regex.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/regex_find_format.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/replace.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/split.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/std/list_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/std/rope_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/std/slist_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/std/string_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/trim.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/trim_all.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/algorithm/string/yes_no_type.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm::FinderConcept	/usr/include/boost/algorithm/string/concept.hpp	/^        struct FinderConcept$/;"	s	namespace:boost::algorithm
boost::algorithm::FinderConcept::constraints	/usr/include/boost/algorithm/string/concept.hpp	/^            void constraints()$/;"	f	struct:boost::algorithm::FinderConcept	access:public	signature:()
boost::algorithm::FinderConcept::i	/usr/include/boost/algorithm/string/concept.hpp	/^            IteratorT i;$/;"	m	struct:boost::algorithm::FinderConcept	access:private
boost::algorithm::FinderConcept::pF	/usr/include/boost/algorithm/string/concept.hpp	/^            FinderT* pF;    $/;"	m	struct:boost::algorithm::FinderConcept	access:private
boost::algorithm::FinderConcept::r	/usr/include/boost/algorithm/string/concept.hpp	/^            range r;$/;"	m	struct:boost::algorithm::FinderConcept	access:private
boost::algorithm::FinderConcept::range	/usr/include/boost/algorithm/string/concept.hpp	/^            typedef iterator_range<IteratorT> range;$/;"	t	struct:boost::algorithm::FinderConcept	access:private
boost::algorithm::FormatterConcept	/usr/include/boost/algorithm/string/concept.hpp	/^        struct FormatterConcept$/;"	s	namespace:boost::algorithm
boost::algorithm::FormatterConcept::constraints	/usr/include/boost/algorithm/string/concept.hpp	/^            void constraints()$/;"	f	struct:boost::algorithm::FormatterConcept	access:public	signature:()
boost::algorithm::FormatterConcept::i	/usr/include/boost/algorithm/string/concept.hpp	/^            IteratorT i;$/;"	m	struct:boost::algorithm::FormatterConcept	access:private
boost::algorithm::FormatterConcept::pF	/usr/include/boost/algorithm/string/concept.hpp	/^            FinderT* pF;$/;"	m	struct:boost::algorithm::FormatterConcept	access:private
boost::algorithm::FormatterConcept::pFo	/usr/include/boost/algorithm/string/concept.hpp	/^            FormatterT *pFo;$/;"	m	struct:boost::algorithm::FormatterConcept	access:private
boost::algorithm::all	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool all( $/;"	f	namespace:boost::algorithm	signature:( const RangeT& Input, PredicateT Pred)
boost::algorithm::all_of	/usr/include/boost/algorithm/cxx11/all_of.hpp	/^bool all_of ( const Range &r, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, Predicate p )
boost::algorithm::all_of_equal	/usr/include/boost/algorithm/cxx11/all_of.hpp	/^bool all_of_equal ( InputIterator first, InputIterator last, const T &val )$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, const T &val )
boost::algorithm::all_of_equal	/usr/include/boost/algorithm/cxx11/all_of.hpp	/^bool all_of_equal ( const Range &r, const T &val ) $/;"	f	namespace:boost::algorithm	signature:( const Range &r, const T &val )
boost::algorithm::any_of	/usr/include/boost/algorithm/cxx11/any_of.hpp	/^bool any_of ( const Range &r, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, Predicate p )
boost::algorithm::any_of_equal	/usr/include/boost/algorithm/cxx11/any_of.hpp	/^bool any_of_equal ( InputIterator first, InputIterator last, const V &val ) $/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, const V &val )
boost::algorithm::any_of_equal	/usr/include/boost/algorithm/cxx11/any_of.hpp	/^bool any_of_equal ( const Range &r, const V &val ) $/;"	f	namespace:boost::algorithm	signature:( const Range &r, const V &val )
boost::algorithm::bad_char	/usr/include/boost/algorithm/hex.hpp	/^typedef boost::error_info<struct bad_char_,char> bad_char;$/;"	t	namespace:boost::algorithm
boost::algorithm::boyer_moore	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    class boyer_moore {$/;"	c	namespace:boost::algorithm
boost::algorithm::boyer_moore::boyer_moore	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        boyer_moore ( patIter first, patIter last ) $/;"	f	class:boost::algorithm::boyer_moore	access:public	signature:( patIter first, patIter last )
boost::algorithm::boyer_moore::build_skip_table	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        void build_skip_table ( patIter first, patIter last ) {$/;"	f	class:boost::algorithm::boyer_moore	access:private	signature:( patIter first, patIter last )
boost::algorithm::boyer_moore::build_suffix_table	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        void build_suffix_table ( patIter pat_first, patIter pat_last ) {$/;"	f	class:boost::algorithm::boyer_moore	access:private	signature:( patIter pat_first, patIter pat_last )
boost::algorithm::boyer_moore::compute_bm_prefix	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        void compute_bm_prefix ( Iter pat_first, Iter pat_last, Container &prefix ) {$/;"	f	class:boost::algorithm::boyer_moore	access:private	signature:( Iter pat_first, Iter pat_last, Container &prefix )
boost::algorithm::boyer_moore::difference_type	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        typedef typename std::iterator_traits<patIter>::difference_type difference_type;$/;"	t	class:boost::algorithm::boyer_moore	access:private
boost::algorithm::boyer_moore::do_search	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        corpusIter do_search ( corpusIter corpus_first, corpusIter corpus_last ) const {$/;"	f	class:boost::algorithm::boyer_moore	access:private	signature:( corpusIter corpus_first, corpusIter corpus_last ) const
boost::algorithm::boyer_moore::k_pattern_length	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        const difference_type k_pattern_length;$/;"	m	class:boost::algorithm::boyer_moore	access:private
boost::algorithm::boyer_moore::operator ()	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        corpusIter operator () ( corpusIter corpus_first, corpusIter corpus_last ) const {$/;"	f	class:boost::algorithm::boyer_moore	access:public	signature:( corpusIter corpus_first, corpusIter corpus_last ) const
boost::algorithm::boyer_moore::operator ()	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        typename boost::range_iterator<Range>::type operator () ( Range &r ) const {$/;"	f	class:boost::algorithm::boyer_moore	access:public	signature:( Range &r ) const
boost::algorithm::boyer_moore::pat_first	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        patIter pat_first, pat_last;$/;"	m	class:boost::algorithm::boyer_moore	access:private
boost::algorithm::boyer_moore::pat_last	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        patIter pat_first, pat_last;$/;"	m	class:boost::algorithm::boyer_moore	access:private
boost::algorithm::boyer_moore::skip_	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        typename traits::skip_table_t skip_;$/;"	m	class:boost::algorithm::boyer_moore	access:private
boost::algorithm::boyer_moore::suffix_	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        std::vector <difference_type> suffix_;$/;"	m	class:boost::algorithm::boyer_moore	access:private
boost::algorithm::boyer_moore::~boyer_moore	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        ~boyer_moore () {}$/;"	f	class:boost::algorithm::boyer_moore	access:public	signature:()
boost::algorithm::boyer_moore_horspool	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    class boyer_moore_horspool {$/;"	c	namespace:boost::algorithm
boost::algorithm::boyer_moore_horspool::boyer_moore_horspool	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        boyer_moore_horspool ( patIter first, patIter last ) $/;"	f	class:boost::algorithm::boyer_moore_horspool	access:public	signature:( patIter first, patIter last )
boost::algorithm::boyer_moore_horspool::difference_type	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        typedef typename std::iterator_traits<patIter>::difference_type difference_type;$/;"	t	class:boost::algorithm::boyer_moore_horspool	access:private
boost::algorithm::boyer_moore_horspool::do_search	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        corpusIter do_search ( corpusIter corpus_first, corpusIter corpus_last ) const {$/;"	f	class:boost::algorithm::boyer_moore_horspool	access:private	signature:( corpusIter corpus_first, corpusIter corpus_last ) const
boost::algorithm::boyer_moore_horspool::k_pattern_length	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        const difference_type k_pattern_length;$/;"	m	class:boost::algorithm::boyer_moore_horspool	access:private
boost::algorithm::boyer_moore_horspool::operator ()	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        corpusIter operator () ( corpusIter corpus_first, corpusIter corpus_last ) const {$/;"	f	class:boost::algorithm::boyer_moore_horspool	access:public	signature:( corpusIter corpus_first, corpusIter corpus_last ) const
boost::algorithm::boyer_moore_horspool::operator ()	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        typename boost::range_iterator<Range>::type operator () ( Range &r ) const {$/;"	f	class:boost::algorithm::boyer_moore_horspool	access:public	signature:( Range &r ) const
boost::algorithm::boyer_moore_horspool::pat_first	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        patIter pat_first, pat_last;$/;"	m	class:boost::algorithm::boyer_moore_horspool	access:private
boost::algorithm::boyer_moore_horspool::pat_last	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        patIter pat_first, pat_last;$/;"	m	class:boost::algorithm::boyer_moore_horspool	access:private
boost::algorithm::boyer_moore_horspool::skip_	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        typename traits::skip_table_t skip_;$/;"	m	class:boost::algorithm::boyer_moore_horspool	access:private
boost::algorithm::boyer_moore_horspool::~boyer_moore_horspool	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        ~boyer_moore_horspool () {}$/;"	f	class:boost::algorithm::boyer_moore_horspool	access:public	signature:()
boost::algorithm::boyer_moore_horspool_search	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    boyer_moore_horspool_search ( CorpusRange &corpus, const PatternRange &pattern )$/;"	f	namespace:boost::algorithm	signature:( CorpusRange &corpus, const PatternRange &pattern )
boost::algorithm::boyer_moore_horspool_search	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    boyer_moore_horspool_search ( CorpusRange &corpus, patIter pat_first, patIter pat_last )$/;"	f	namespace:boost::algorithm	signature:( CorpusRange &corpus, patIter pat_first, patIter pat_last )
boost::algorithm::boyer_moore_horspool_search	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    corpusIter boyer_moore_horspool_search ( $/;"	f	namespace:boost::algorithm	signature:( corpusIter corpus_first, corpusIter corpus_last, const PatternRange &pattern )
boost::algorithm::boyer_moore_horspool_search	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    corpusIter boyer_moore_horspool_search ( $/;"	f	namespace:boost::algorithm	signature:( corpusIter corpus_first, corpusIter corpus_last, patIter pat_first, patIter pat_last )
boost::algorithm::boyer_moore_search	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    boyer_moore_search ( CorpusRange &corpus, const PatternRange &pattern )$/;"	f	namespace:boost::algorithm	signature:( CorpusRange &corpus, const PatternRange &pattern )
boost::algorithm::boyer_moore_search	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    boyer_moore_search ( CorpusRange &corpus, patIter pat_first, patIter pat_last )$/;"	f	namespace:boost::algorithm	signature:( CorpusRange &corpus, patIter pat_first, patIter pat_last )
boost::algorithm::boyer_moore_search	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    corpusIter boyer_moore_search ( $/;"	f	namespace:boost::algorithm	signature:( corpusIter corpus_first, corpusIter corpus_last, const PatternRange &pattern )
boost::algorithm::boyer_moore_search	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    corpusIter boyer_moore_search ( $/;"	f	namespace:boost::algorithm	signature:( corpusIter corpus_first, corpusIter corpus_last, patIter pat_first, patIter pat_last )
boost::algorithm::clamp	/usr/include/boost/algorithm/clamp.hpp	/^  T const & clamp ( T const& val, $/;"	f	namespace:boost::algorithm	signature:( T const& val, typename boost::mpl::identity<T>::type const & lo, typename boost::mpl::identity<T>::type const & hi, Pred p )
boost::algorithm::clamp	/usr/include/boost/algorithm/clamp.hpp	/^  T const& clamp ( const T& val, $/;"	f	namespace:boost::algorithm	signature:( const T& val, typename boost::mpl::identity<T>::type const & lo, typename boost::mpl::identity<T>::type const & hi )
boost::algorithm::clamp_range	/usr/include/boost/algorithm/clamp.hpp	/^  OutputIterator clamp_range ( InputIterator first, InputIterator last, OutputIterator out,$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, OutputIterator out, typename std::iterator_traits<InputIterator>::value_type lo, typename std::iterator_traits<InputIterator>::value_type hi )
boost::algorithm::clamp_range	/usr/include/boost/algorithm/clamp.hpp	/^  OutputIterator clamp_range ( InputIterator first, InputIterator last, OutputIterator out,$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, OutputIterator out, typename std::iterator_traits<InputIterator>::value_type lo, typename std::iterator_traits<InputIterator>::value_type hi, Pred p )
boost::algorithm::clamp_range	/usr/include/boost/algorithm/clamp.hpp	/^  clamp_range ( const Range &r, OutputIterator out,$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator out, typename std::iterator_traits<typename boost::range_iterator<const Range>::type>::value_type lo, typename std::iterator_traits<typename boost::range_iterator<const Range>::type>::value_type hi )
boost::algorithm::clamp_range	/usr/include/boost/algorithm/clamp.hpp	/^  clamp_range ( const Range &r, OutputIterator out,$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator out, typename std::iterator_traits<typename boost::range_iterator<const Range>::type>::value_type lo, typename std::iterator_traits<typename boost::range_iterator<const Range>::type>::value_type hi, Pred p )
boost::algorithm::const_formatter	/usr/include/boost/algorithm/string/formatter.hpp	/^        const_formatter(const RangeT& Format)$/;"	f	namespace:boost::algorithm	signature:(const RangeT& Format)
boost::algorithm::contains	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool contains( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test)
boost::algorithm::contains	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool contains( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, PredicateT Comp)
boost::algorithm::copy_if	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^OutputIterator copy_if ( const Range &r, OutputIterator result, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator result, Predicate p )
boost::algorithm::copy_until	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^OutputIterator copy_until ( InputIterator first, InputIterator last, OutputIterator result, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, OutputIterator result, Predicate p )
boost::algorithm::copy_until	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^OutputIterator copy_until ( const Range &r, OutputIterator result, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator result, Predicate p )
boost::algorithm::copy_while	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^OutputIterator copy_while ( InputIterator first, InputIterator last, $/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, OutputIterator result, Predicate p )
boost::algorithm::copy_while	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^OutputIterator copy_while ( const Range &r, OutputIterator result, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator result, Predicate p )
boost::algorithm::detail	/usr/include/boost/algorithm/hex.hpp	/^namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^namespace boost { namespace algorithm { namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/searching/detail/debugging.hpp	/^namespace boost { namespace algorithm { namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/classification.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/finder.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/predicate.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/trim.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail	/usr/include/boost/algorithm/string/detail/util.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail::PrintTable	/usr/include/boost/algorithm/searching/detail/debugging.hpp	/^    void PrintTable ( Iter first, Iter last ) {$/;"	f	namespace:boost::algorithm::detail	signature:( Iter first, Iter last )
boost::algorithm::detail::__anon1::hex_char_to_int	/usr/include/boost/algorithm/hex.hpp	/^    unsigned hex_char_to_int ( char c ) {$/;"	f	namespace:boost::algorithm::detail::__anon1	signature:( char c )
boost::algorithm::detail::bounded_copy	/usr/include/boost/algorithm/string/detail/util.hpp	/^            inline OutputIteratorT bounded_copy($/;"	f	namespace:boost::algorithm::detail	signature:( InputIteratorT First, InputIteratorT Last, OutputIteratorT DestFirst, OutputIteratorT DestLast )
boost::algorithm::detail::check_find_result	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^            bool check_find_result(InputT&, FindResultT& FindResult)$/;"	f	namespace:boost::algorithm::detail	signature:(InputT&, FindResultT& FindResult)
boost::algorithm::detail::const_formatF	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^            struct const_formatF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::const_formatF::const_formatF	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                const_formatF(const RangeT& Format) :$/;"	f	struct:boost::algorithm::detail::const_formatF	access:public	signature:(const RangeT& Format)
boost::algorithm::detail::const_formatF::format_iterator	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                    range_const_iterator<RangeT>::type format_iterator;$/;"	t	struct:boost::algorithm::detail::const_formatF	access:private
boost::algorithm::detail::const_formatF::m_Format	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                result_type m_Format;$/;"	m	struct:boost::algorithm::detail::const_formatF	access:private
boost::algorithm::detail::const_formatF::operator ()	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                const result_type& operator()(const Range2T&) const$/;"	f	struct:boost::algorithm::detail::const_formatF	access:public	signature:(const Range2T&) const
boost::algorithm::detail::const_formatF::operator ()	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                result_type& operator()(const Range2T&)$/;"	f	struct:boost::algorithm::detail::const_formatF	access:public	signature:(const Range2T&)
boost::algorithm::detail::const_formatF::result_type	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                typedef iterator_range<format_iterator> result_type;$/;"	t	struct:boost::algorithm::detail::const_formatF	access:private
boost::algorithm::detail::copy_iterator_rangeF	/usr/include/boost/algorithm/string/detail/util.hpp	/^            struct copy_iterator_rangeF : $/;"	s	namespace:boost::algorithm::detail	inherits:std::unary_function
boost::algorithm::detail::copy_iterator_rangeF::operator ()	/usr/include/boost/algorithm/string/detail/util.hpp	/^                SeqT operator()( const iterator_range<IteratorT>& Range ) const$/;"	f	struct:boost::algorithm::detail::copy_iterator_rangeF	access:public	signature:( const iterator_range<IteratorT>& Range ) const
boost::algorithm::detail::copy_to_storage	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^            inline void copy_to_storage($/;"	f	namespace:boost::algorithm::detail	signature:( StorageT& Storage, const WhatT& What )
boost::algorithm::detail::decode_one	/usr/include/boost/algorithm/hex.hpp	/^    decode_one ( InputIterator &first, InputIterator last, OutputIterator out, EndPred pred ) {$/;"	f	namespace:boost::algorithm::detail	signature:( InputIterator &first, InputIterator last, OutputIterator out, EndPred pred )
boost::algorithm::detail::dissect_formatF	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^            struct dissect_formatF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::dissect_formatF::dissect_formatF	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                dissect_formatF(FinderT Finder) :$/;"	f	struct:boost::algorithm::detail::dissect_formatF	access:public	signature:(FinderT Finder)
boost::algorithm::detail::dissect_formatF::m_Finder	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                FinderT m_Finder;$/;"	m	struct:boost::algorithm::detail::dissect_formatF	access:private
boost::algorithm::detail::dissect_formatF::operator ()	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                  operator()(const RangeT& Replace) const$/;"	f	struct:boost::algorithm::detail::dissect_formatF	access:public	signature:(const RangeT& Replace) const
boost::algorithm::detail::empty_container	/usr/include/boost/algorithm/string/detail/util.hpp	/^            struct empty_container $/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::empty_container::begin	/usr/include/boost/algorithm/string/detail/util.hpp	/^                const_iterator begin() const$/;"	f	struct:boost::algorithm::detail::empty_container	access:public	signature:() const
boost::algorithm::detail::empty_container::const_iterator	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef const value_type* const_iterator;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
boost::algorithm::detail::empty_container::const_reference	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef const value_type& const_reference;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
boost::algorithm::detail::empty_container::difference_type	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
boost::algorithm::detail::empty_container::empty	/usr/include/boost/algorithm/string/detail/util.hpp	/^                bool empty() const$/;"	f	struct:boost::algorithm::detail::empty_container	access:public	signature:() const
boost::algorithm::detail::empty_container::end	/usr/include/boost/algorithm/string/detail/util.hpp	/^                const_iterator end() const$/;"	f	struct:boost::algorithm::detail::empty_container	access:public	signature:() const
boost::algorithm::detail::empty_container::iterator	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef const value_type* iterator;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
boost::algorithm::detail::empty_container::reference	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef const value_type& reference;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
boost::algorithm::detail::empty_container::size	/usr/include/boost/algorithm/string/detail/util.hpp	/^                size_type size() const$/;"	f	struct:boost::algorithm::detail::empty_container	access:public	signature:() const
boost::algorithm::detail::empty_container::size_type	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
boost::algorithm::detail::empty_container::type	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef empty_container<CharT> type;        $/;"	t	struct:boost::algorithm::detail::empty_container	access:public
boost::algorithm::detail::empty_container::value_type	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef CharT value_type;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
boost::algorithm::detail::empty_formatF	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^            struct empty_formatF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::empty_formatF::operator ()	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                empty_container<CharT> operator()(const ReplaceT&) const$/;"	f	struct:boost::algorithm::detail::empty_formatF	access:public	signature:(const ReplaceT&) const
boost::algorithm::detail::encode_one	/usr/include/boost/algorithm/hex.hpp	/^    OutputIterator encode_one ( T val, OutputIterator out ) {$/;"	f	namespace:boost::algorithm::detail	signature:( T val, OutputIterator out )
boost::algorithm::detail::ends_with_iter_select	/usr/include/boost/algorithm/string/detail/predicate.hpp	/^            inline bool ends_with_iter_select( $/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIterator1T Begin, ForwardIterator1T End, ForwardIterator2T SubBegin, ForwardIterator2T SubEnd, PredicateT Comp, std::bidirectional_iterator_tag)
boost::algorithm::detail::ends_with_iter_select	/usr/include/boost/algorithm/string/detail/predicate.hpp	/^            inline bool ends_with_iter_select( $/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIterator1T Begin, ForwardIterator1T End, ForwardIterator2T SubBegin, ForwardIterator2T SubEnd, PredicateT Comp, std::forward_iterator_tag)
boost::algorithm::detail::erase	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            inline typename InputT::iterator erase($/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator From, BOOST_STRING_TYPENAME InputT::iterator To )
boost::algorithm::detail::find_format_all_copy_impl	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^            inline InputT find_format_all_copy_impl($/;"	f	namespace:boost::algorithm::detail	signature:( const InputT& Input, FinderT Finder, FormatterT Formatter, const FindResultT& FindResult)
boost::algorithm::detail::find_format_all_copy_impl	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^            inline OutputIteratorT find_format_all_copy_impl($/;"	f	namespace:boost::algorithm::detail	signature:( OutputIteratorT Output, const InputT& Input, FinderT Finder, FormatterT Formatter, const FindResultT& FindResult )
boost::algorithm::detail::find_format_all_copy_impl2	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^            inline InputT find_format_all_copy_impl2($/;"	f	namespace:boost::algorithm::detail	signature:( const InputT& Input, FinderT Finder, FormatterT Formatter, const FindResultT& FindResult, const FormatResultT& FormatResult)
boost::algorithm::detail::find_format_all_copy_impl2	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^            inline OutputIteratorT find_format_all_copy_impl2($/;"	f	namespace:boost::algorithm::detail	signature:( OutputIteratorT Output, const InputT& Input, FinderT Finder, FormatterT Formatter, const FindResultT& FindResult, const FormatResultT& FormatResult )
boost::algorithm::detail::find_format_all_impl	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^            inline void find_format_all_impl( $/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, FinderT Finder, FormatterT Formatter, FindResultT FindResult)
boost::algorithm::detail::find_format_all_impl2	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^            inline void find_format_all_impl2( $/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, FinderT Finder, FormatterT Formatter, FindResultT FindResult, FormatResultT FormatResult)
boost::algorithm::detail::find_format_copy_impl	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^            inline InputT find_format_copy_impl($/;"	f	namespace:boost::algorithm::detail	signature:( const InputT& Input, FormatterT Formatter, const FindResultT& FindResult)
boost::algorithm::detail::find_format_copy_impl	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^            inline OutputIteratorT find_format_copy_impl($/;"	f	namespace:boost::algorithm::detail	signature:( OutputIteratorT Output, const InputT& Input, FormatterT Formatter, const FindResultT& FindResult )
boost::algorithm::detail::find_format_copy_impl2	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^            inline InputT find_format_copy_impl2($/;"	f	namespace:boost::algorithm::detail	signature:( const InputT& Input, FormatterT Formatter, const FindResultT& FindResult, const FormatResultT& FormatResult)
boost::algorithm::detail::find_format_copy_impl2	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^            inline OutputIteratorT find_format_copy_impl2($/;"	f	namespace:boost::algorithm::detail	signature:( OutputIteratorT Output, const InputT& Input, FormatterT Formatter, const FindResultT& FindResult, const FormatResultT& FormatResult )
boost::algorithm::detail::find_format_impl	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^            inline void find_format_impl( $/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, FormatterT Formatter, const FindResultT& FindResult)
boost::algorithm::detail::find_format_impl2	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^            inline void find_format_impl2( $/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, FormatterT Formatter, const FindResultT& FindResult, const FormatResultT& FormatResult)
boost::algorithm::detail::find_format_store	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^            class find_format_store : $/;"	c	namespace:boost::algorithm::detail	inherits:iterator_range
boost::algorithm::detail::find_format_store::base_type	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                typedef iterator_range<ForwardIteratorT> base_type;$/;"	t	class:boost::algorithm::detail::find_format_store	access:public
boost::algorithm::detail::find_format_store::find_format_store	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                find_format_store( $/;"	f	class:boost::algorithm::detail::find_format_store	access:public	signature:( const base_type& FindResult, const format_result_type& FormatResult, const formatter_type& Formatter )
boost::algorithm::detail::find_format_store::format_result	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                const format_result_type& format_result()$/;"	f	class:boost::algorithm::detail::find_format_store	access:public	signature:()
boost::algorithm::detail::find_format_store::format_result_type	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                typedef FormatResultT format_result_type;$/;"	t	class:boost::algorithm::detail::find_format_store	access:public
boost::algorithm::detail::find_format_store::formatter_type	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                typedef FormatterT  formatter_type;$/;"	t	class:boost::algorithm::detail::find_format_store	access:public
boost::algorithm::detail::find_format_store::m_FormatResult	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                format_result_type m_FormatResult;$/;"	m	class:boost::algorithm::detail::find_format_store	access:private
boost::algorithm::detail::find_format_store::m_Formatter	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                const formatter_type& m_Formatter;$/;"	m	class:boost::algorithm::detail::find_format_store	access:private
boost::algorithm::detail::find_format_store::operator =	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                find_format_store& operator=( FindResultT FindResult )$/;"	f	class:boost::algorithm::detail::find_format_store	access:public	signature:( FindResultT FindResult )
boost::algorithm::detail::find_head_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_head_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N )
boost::algorithm::detail::find_head_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_head_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N, std::forward_iterator_tag )
boost::algorithm::detail::find_head_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_head_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N, std::random_access_iterator_tag )
boost::algorithm::detail::find_iterator_base	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^            class find_iterator_base$/;"	c	namespace:boost::algorithm::detail
boost::algorithm::detail::find_iterator_base::do_find	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                match_type do_find( $/;"	f	class:boost::algorithm::detail::find_iterator_base	access:protected	signature:( input_iterator_type Begin, input_iterator_type End ) const
boost::algorithm::detail::find_iterator_base::find_iterator_base	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                find_iterator_base( FinderT Finder, int ) :$/;"	f	class:boost::algorithm::detail::find_iterator_base	access:protected	signature:( FinderT Finder, int )
boost::algorithm::detail::find_iterator_base::find_iterator_base	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                find_iterator_base( const find_iterator_base& Other ) :$/;"	f	class:boost::algorithm::detail::find_iterator_base	access:protected	signature:( const find_iterator_base& Other )
boost::algorithm::detail::find_iterator_base::find_iterator_base	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                find_iterator_base() {};$/;"	f	class:boost::algorithm::detail::find_iterator_base	access:protected	signature:()
boost::algorithm::detail::find_iterator_base::finder_type	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                    input_iterator_type> finder_type;$/;"	t	class:boost::algorithm::detail::find_iterator_base	access:protected
boost::algorithm::detail::find_iterator_base::input_iterator_type	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                typedef IteratorT input_iterator_type;$/;"	t	class:boost::algorithm::detail::find_iterator_base	access:protected
boost::algorithm::detail::find_iterator_base::is_null	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                bool is_null() const$/;"	f	class:boost::algorithm::detail::find_iterator_base	access:protected	signature:() const
boost::algorithm::detail::find_iterator_base::m_Finder	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                finder_type m_Finder;$/;"	m	class:boost::algorithm::detail::find_iterator_base	access:private
boost::algorithm::detail::find_iterator_base::match_type	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                typedef iterator_range<IteratorT> match_type;$/;"	t	class:boost::algorithm::detail::find_iterator_base	access:protected
boost::algorithm::detail::find_iterator_base::~find_iterator_base	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                ~find_iterator_base() {}$/;"	f	class:boost::algorithm::detail::find_iterator_base	access:protected	signature:()
boost::algorithm::detail::find_regexF	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^            struct find_regexF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::find_regexF::find_regexF	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                find_regexF( regex_reference_type Rx, match_flag_type MatchFlags = match_default ) : $/;"	f	struct:boost::algorithm::detail::find_regexF	access:public	signature:( regex_reference_type Rx, match_flag_type MatchFlags = match_default )
boost::algorithm::detail::find_regexF::m_MatchFlags	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                match_flag_type m_MatchFlags;     \/\/ match flags$/;"	m	struct:boost::algorithm::detail::find_regexF	access:private
boost::algorithm::detail::find_regexF::m_Rx	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                regex_reference_type m_Rx; \/\/ Regexp$/;"	m	struct:boost::algorithm::detail::find_regexF	access:private
boost::algorithm::detail::find_regexF::operator ()	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                operator()( $/;"	f	struct:boost::algorithm::detail::find_regexF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
boost::algorithm::detail::find_regexF::regex_reference_type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef const RegExT& regex_reference_type;$/;"	t	struct:boost::algorithm::detail::find_regexF	access:public
boost::algorithm::detail::find_regexF::regex_type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef RegExT regex_type;$/;"	t	struct:boost::algorithm::detail::find_regexF	access:public
boost::algorithm::detail::find_tail_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_tail_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N )
boost::algorithm::detail::find_tail_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_tail_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N, std::bidirectional_iterator_tag )
boost::algorithm::detail::find_tail_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_tail_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N, std::forward_iterator_tag )
boost::algorithm::detail::find_tail_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_tail_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N, std::random_access_iterator_tag )
boost::algorithm::detail::first_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct first_finderF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::first_finderF::first_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                first_finderF( const SearchT& Search, PredicateT Comp ) :$/;"	f	struct:boost::algorithm::detail::first_finderF	access:public	signature:( const SearchT& Search, PredicateT Comp )
boost::algorithm::detail::first_finderF::first_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                first_finderF($/;"	f	struct:boost::algorithm::detail::first_finderF	access:public	signature:( search_iterator_type SearchBegin, search_iterator_type SearchEnd, PredicateT Comp )
boost::algorithm::detail::first_finderF::m_Comp	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                PredicateT m_Comp;$/;"	m	struct:boost::algorithm::detail::first_finderF	access:private
boost::algorithm::detail::first_finderF::m_Search	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                iterator_range<search_iterator_type> m_Search;$/;"	m	struct:boost::algorithm::detail::first_finderF	access:private
boost::algorithm::detail::first_finderF::operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::first_finderF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
boost::algorithm::detail::first_finderF::search_iterator_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                typedef SearchIteratorT search_iterator_type;$/;"	t	struct:boost::algorithm::detail::first_finderF	access:public
boost::algorithm::detail::head_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct head_finderF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::head_finderF::head_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                head_finderF( int N ) : m_N(N) {}$/;"	f	struct:boost::algorithm::detail::head_finderF	access:public	signature:( int N )
boost::algorithm::detail::head_finderF::m_N	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                int m_N;$/;"	m	struct:boost::algorithm::detail::head_finderF	access:private
boost::algorithm::detail::head_finderF::operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::head_finderF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
boost::algorithm::detail::hex_iterator_traits	/usr/include/boost/algorithm/hex.hpp	/^    struct hex_iterator_traits {$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::hex_iterator_traits	/usr/include/boost/algorithm/hex.hpp	/^    struct hex_iterator_traits< std::back_insert_iterator<Container> > {$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::hex_iterator_traits	/usr/include/boost/algorithm/hex.hpp	/^    struct hex_iterator_traits< std::front_insert_iterator<Container> > {$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::hex_iterator_traits	/usr/include/boost/algorithm/hex.hpp	/^    struct hex_iterator_traits< std::insert_iterator<Container> > {$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::hex_iterator_traits	/usr/include/boost/algorithm/hex.hpp	/^    struct hex_iterator_traits< std::ostream_iterator<T, charType, traits> > {$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::hex_iterator_traits::value_type	/usr/include/boost/algorithm/hex.hpp	/^        typedef T value_type;$/;"	t	struct:boost::algorithm::detail::hex_iterator_traits	access:public
boost::algorithm::detail::hex_iterator_traits::value_type	/usr/include/boost/algorithm/hex.hpp	/^        typedef typename Container::value_type value_type;$/;"	t	struct:boost::algorithm::detail::hex_iterator_traits	access:public
boost::algorithm::detail::hex_iterator_traits::value_type	/usr/include/boost/algorithm/hex.hpp	/^        typedef typename std::iterator_traits<Iterator>::value_type value_type;$/;"	t	struct:boost::algorithm::detail::hex_iterator_traits	access:public
boost::algorithm::detail::identity_formatF	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^            struct identity_formatF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::identity_formatF::operator ()	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                const RangeT& operator()(const Range2T& Replace) const$/;"	f	struct:boost::algorithm::detail::identity_formatF	access:public	signature:(const Range2T& Replace) const
boost::algorithm::detail::insert	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            inline void insert($/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator At, ForwardIteratorT Begin, ForwardIteratorT End )
boost::algorithm::detail::insert	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            inline void insert($/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator At, const InsertT& Insert )
boost::algorithm::detail::is_any_ofF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^            struct is_any_ofF :$/;"	s	namespace:boost::algorithm::detail	inherits:predicate_facade
boost::algorithm::detail::is_any_ofF::__anon2::m_dynSet	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                    set_value_type* m_dynSet;$/;"	m	union:boost::algorithm::detail::is_any_ofF::__anon2	access:public
boost::algorithm::detail::is_any_ofF::__anon2::m_fixSet	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                    set_value_type m_fixSet[sizeof(set_value_type*)*2];$/;"	m	union:boost::algorithm::detail::is_any_ofF::__anon2	access:public
boost::algorithm::detail::is_any_ofF::is_any_ofF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                is_any_ofF( const RangeT& Range ) : m_Size(0)$/;"	f	struct:boost::algorithm::detail::is_any_ofF	access:public	signature:( const RangeT& Range )
boost::algorithm::detail::is_any_ofF::is_any_ofF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                is_any_ofF(const is_any_ofF& Other) : m_Size(Other.m_Size)$/;"	f	struct:boost::algorithm::detail::is_any_ofF	access:public	signature:(const is_any_ofF& Other)
boost::algorithm::detail::is_any_ofF::m_Size	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                ::std::size_t m_Size;$/;"	m	struct:boost::algorithm::detail::is_any_ofF	access:private
boost::algorithm::detail::is_any_ofF::m_Storage	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                m_Storage;$/;"	m	struct:boost::algorithm::detail::is_any_ofF	typeref:union:boost::algorithm::detail::is_any_ofF::__anon2	access:private
boost::algorithm::detail::is_any_ofF::operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                bool operator()( Char2T Ch ) const$/;"	f	struct:boost::algorithm::detail::is_any_ofF	access:public	signature:( Char2T Ch ) const
boost::algorithm::detail::is_any_ofF::operator =	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                is_any_ofF& operator=(const is_any_ofF& Other)$/;"	f	struct:boost::algorithm::detail::is_any_ofF	access:public	signature:(const is_any_ofF& Other)
boost::algorithm::detail::is_any_ofF::result_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef bool result_type;$/;"	t	struct:boost::algorithm::detail::is_any_ofF	access:public
boost::algorithm::detail::is_any_ofF::set_value_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef typename ::boost::remove_const<CharT>::type set_value_type;$/;"	t	struct:boost::algorithm::detail::is_any_ofF	access:private
boost::algorithm::detail::is_any_ofF::use_fixed_storage	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                static bool use_fixed_storage(std::size_t size)$/;"	f	struct:boost::algorithm::detail::is_any_ofF	access:private	signature:(std::size_t size)
boost::algorithm::detail::is_any_ofF::~is_any_ofF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                ~is_any_ofF()$/;"	f	struct:boost::algorithm::detail::is_any_ofF	access:public	signature:()
boost::algorithm::detail::is_classifiedF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^            struct is_classifiedF :$/;"	s	namespace:boost::algorithm::detail	inherits:predicate_facade
boost::algorithm::detail::is_classifiedF::is_classifiedF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                is_classifiedF(std::ctype_base::mask Type, std::locale const & Loc = std::locale()) :$/;"	f	struct:boost::algorithm::detail::is_classifiedF	access:public	signature:(std::ctype_base::mask Type, std::locale const & Loc = std::locale())
boost::algorithm::detail::is_classifiedF::m_Locale	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                std::locale m_Locale;$/;"	m	struct:boost::algorithm::detail::is_classifiedF	access:private
boost::algorithm::detail::is_classifiedF::m_Type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                std::ctype_base::mask m_Type;$/;"	m	struct:boost::algorithm::detail::is_classifiedF	access:private
boost::algorithm::detail::is_classifiedF::operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                    bool operator()( char const Ch ) const$/;"	f	struct:boost::algorithm::detail::is_classifiedF	access:public	signature:( char const Ch ) const
boost::algorithm::detail::is_classifiedF::operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                bool operator()( CharT Ch ) const$/;"	f	struct:boost::algorithm::detail::is_classifiedF	access:public	signature:( CharT Ch ) const
boost::algorithm::detail::is_classifiedF::result_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef bool result_type;$/;"	t	struct:boost::algorithm::detail::is_classifiedF	access:public
boost::algorithm::detail::is_from_rangeF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^            struct is_from_rangeF :$/;"	s	namespace:boost::algorithm::detail	inherits:predicate_facade
boost::algorithm::detail::is_from_rangeF::is_from_rangeF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                is_from_rangeF( CharT From, CharT To ) : m_From(From), m_To(To) {}$/;"	f	struct:boost::algorithm::detail::is_from_rangeF	access:public	signature:( CharT From, CharT To )
boost::algorithm::detail::is_from_rangeF::m_From	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                CharT m_From;$/;"	m	struct:boost::algorithm::detail::is_from_rangeF	access:private
boost::algorithm::detail::is_from_rangeF::m_To	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                CharT m_To;$/;"	m	struct:boost::algorithm::detail::is_from_rangeF	access:private
boost::algorithm::detail::is_from_rangeF::operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                bool operator()( Char2T Ch ) const$/;"	f	struct:boost::algorithm::detail::is_from_rangeF	access:public	signature:( Char2T Ch ) const
boost::algorithm::detail::is_from_rangeF::result_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef bool result_type;$/;"	t	struct:boost::algorithm::detail::is_from_rangeF	access:public
boost::algorithm::detail::iter_end	/usr/include/boost/algorithm/hex.hpp	/^    bool iter_end ( Iterator current, Iterator last ) { return current == last; }$/;"	f	namespace:boost::algorithm::detail	signature:( Iterator current, Iterator last )
boost::algorithm::detail::last_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct last_finderF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::last_finderF::findit	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                findit($/;"	f	struct:boost::algorithm::detail::last_finderF	access:private	signature:( ForwardIteratorT Begin, ForwardIteratorT End, std::bidirectional_iterator_tag ) const
boost::algorithm::detail::last_finderF::findit	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                findit($/;"	f	struct:boost::algorithm::detail::last_finderF	access:private	signature:( ForwardIteratorT Begin, ForwardIteratorT End, std::forward_iterator_tag ) const
boost::algorithm::detail::last_finderF::first_finder_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                    PredicateT> first_finder_type;$/;"	t	struct:boost::algorithm::detail::last_finderF	access:public
boost::algorithm::detail::last_finderF::last_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                last_finderF( const SearchT& Search, PredicateT Comp ) :$/;"	f	struct:boost::algorithm::detail::last_finderF	access:public	signature:( const SearchT& Search, PredicateT Comp )
boost::algorithm::detail::last_finderF::last_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                last_finderF($/;"	f	struct:boost::algorithm::detail::last_finderF	access:public	signature:( search_iterator_type SearchBegin, search_iterator_type SearchEnd, PredicateT Comp )
boost::algorithm::detail::last_finderF::m_Comp	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                PredicateT m_Comp;$/;"	m	struct:boost::algorithm::detail::last_finderF	access:private
boost::algorithm::detail::last_finderF::m_Search	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                iterator_range<search_iterator_type> m_Search;$/;"	m	struct:boost::algorithm::detail::last_finderF	access:private
boost::algorithm::detail::last_finderF::operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::last_finderF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
boost::algorithm::detail::last_finderF::search_iterator_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                typedef SearchIteratorT search_iterator_type;$/;"	t	struct:boost::algorithm::detail::last_finderF	access:public
boost::algorithm::detail::move_from_storage	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^            inline OutputIteratorT move_from_storage($/;"	f	namespace:boost::algorithm::detail	signature:( StorageT& Storage, OutputIteratorT DestBegin, OutputIteratorT DestEnd )
boost::algorithm::detail::nth_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct nth_finderF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::nth_finderF::find_backward	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                find_backward($/;"	f	struct:boost::algorithm::detail::nth_finderF	access:private	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N) const
boost::algorithm::detail::nth_finderF::find_forward	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                find_forward($/;"	f	struct:boost::algorithm::detail::nth_finderF	access:private	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N) const
boost::algorithm::detail::nth_finderF::first_finder_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                    PredicateT> first_finder_type;$/;"	t	struct:boost::algorithm::detail::nth_finderF	access:public
boost::algorithm::detail::nth_finderF::last_finder_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                    PredicateT> last_finder_type;$/;"	t	struct:boost::algorithm::detail::nth_finderF	access:public
boost::algorithm::detail::nth_finderF::m_Comp	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                PredicateT m_Comp;$/;"	m	struct:boost::algorithm::detail::nth_finderF	access:private
boost::algorithm::detail::nth_finderF::m_Nth	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                int m_Nth;$/;"	m	struct:boost::algorithm::detail::nth_finderF	access:private
boost::algorithm::detail::nth_finderF::m_Search	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                iterator_range<search_iterator_type> m_Search;$/;"	m	struct:boost::algorithm::detail::nth_finderF	access:private
boost::algorithm::detail::nth_finderF::nth_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                nth_finderF($/;"	f	struct:boost::algorithm::detail::nth_finderF	access:public	signature:( const SearchT& Search, int Nth, PredicateT Comp)
boost::algorithm::detail::nth_finderF::nth_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                nth_finderF($/;"	f	struct:boost::algorithm::detail::nth_finderF	access:public	signature:( search_iterator_type SearchBegin, search_iterator_type SearchEnd, int Nth, PredicateT Comp)
boost::algorithm::detail::nth_finderF::operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::nth_finderF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
boost::algorithm::detail::nth_finderF::search_iterator_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                typedef SearchIteratorT search_iterator_type;$/;"	t	struct:boost::algorithm::detail::nth_finderF	access:public
boost::algorithm::detail::pred_andF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^            struct pred_andF :$/;"	s	namespace:boost::algorithm::detail	inherits:predicate_facade
boost::algorithm::detail::pred_andF::m_Pred1	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                Pred1T m_Pred1;$/;"	m	struct:boost::algorithm::detail::pred_andF	access:private
boost::algorithm::detail::pred_andF::m_Pred2	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                Pred2T m_Pred2;$/;"	m	struct:boost::algorithm::detail::pred_andF	access:private
boost::algorithm::detail::pred_andF::operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                bool operator()( CharT Ch ) const$/;"	f	struct:boost::algorithm::detail::pred_andF	access:public	signature:( CharT Ch ) const
boost::algorithm::detail::pred_andF::pred_andF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                pred_andF( Pred1T Pred1, Pred2T Pred2 ) :$/;"	f	struct:boost::algorithm::detail::pred_andF	access:public	signature:( Pred1T Pred1, Pred2T Pred2 )
boost::algorithm::detail::pred_andF::result_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef bool result_type;$/;"	t	struct:boost::algorithm::detail::pred_andF	access:public
boost::algorithm::detail::pred_notF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^            struct pred_notF :$/;"	s	namespace:boost::algorithm::detail	inherits:predicate_facade
boost::algorithm::detail::pred_notF::m_Pred	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                PredT m_Pred;$/;"	m	struct:boost::algorithm::detail::pred_notF	access:private
boost::algorithm::detail::pred_notF::operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                bool operator()( CharT Ch ) const$/;"	f	struct:boost::algorithm::detail::pred_notF	access:public	signature:( CharT Ch ) const
boost::algorithm::detail::pred_notF::pred_notF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                pred_notF( PredT Pred ) : m_Pred(Pred) {}$/;"	f	struct:boost::algorithm::detail::pred_notF	access:public	signature:( PredT Pred )
boost::algorithm::detail::pred_notF::result_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef bool result_type;$/;"	t	struct:boost::algorithm::detail::pred_notF	access:public
boost::algorithm::detail::pred_orF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^            struct pred_orF :$/;"	s	namespace:boost::algorithm::detail	inherits:predicate_facade
boost::algorithm::detail::pred_orF::m_Pred1	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                Pred1T m_Pred1;$/;"	m	struct:boost::algorithm::detail::pred_orF	access:private
boost::algorithm::detail::pred_orF::m_Pred2	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                Pred2T m_Pred2;$/;"	m	struct:boost::algorithm::detail::pred_orF	access:private
boost::algorithm::detail::pred_orF::operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                bool operator()( CharT Ch ) const$/;"	f	struct:boost::algorithm::detail::pred_orF	access:public	signature:( CharT Ch ) const
boost::algorithm::detail::pred_orF::pred_orF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                pred_orF( Pred1T Pred1, Pred2T Pred2 ) :$/;"	f	struct:boost::algorithm::detail::pred_orF	access:public	signature:( Pred1T Pred1, Pred2T Pred2 )
boost::algorithm::detail::pred_orF::result_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef bool result_type;$/;"	t	struct:boost::algorithm::detail::pred_orF	access:public
boost::algorithm::detail::process_segment	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^            inline ForwardIteratorT process_segment($/;"	f	namespace:boost::algorithm::detail	signature:( StorageT& Storage, InputT& Input, ForwardIteratorT InsertIt, ForwardIteratorT SegmentBegin, ForwardIteratorT SegmentEnd )
boost::algorithm::detail::process_segment_helper	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^            struct process_segment_helper$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::process_segment_helper	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^            struct process_segment_helper< true >$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::process_segment_helper::operator ()	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^                ForwardIteratorT operator()($/;"	f	struct:boost::algorithm::detail::process_segment_helper	access:public	signature:( StorageT& Storage, InputT& , ForwardIteratorT InsertIt, ForwardIteratorT SegmentBegin, ForwardIteratorT SegmentEnd )
boost::algorithm::detail::process_segment_helper::operator ()	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^                ForwardIteratorT operator()($/;"	f	struct:boost::algorithm::detail::process_segment_helper	access:public	signature:( StorageT& Storage, InputT& Input, ForwardIteratorT InsertIt, ForwardIteratorT SegmentBegin, ForwardIteratorT SegmentEnd )
boost::algorithm::detail::ptr_end	/usr/include/boost/algorithm/hex.hpp	/^    bool ptr_end ( const T* ptr, const T* \/*end*\/ ) { return *ptr == '\\0'; }$/;"	f	namespace:boost::algorithm::detail	signature:( const T* ptr, const T* )
boost::algorithm::detail::range_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct range_finderF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::range_finderF::input_iterator_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                typedef ForwardIterator1T input_iterator_type;$/;"	t	struct:boost::algorithm::detail::range_finderF	access:public
boost::algorithm::detail::range_finderF::m_Range	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                iterator_range<input_iterator_type> m_Range;$/;"	m	struct:boost::algorithm::detail::range_finderF	access:private
boost::algorithm::detail::range_finderF::operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::range_finderF	access:public	signature:( ForwardIterator2T, ForwardIterator2T ) const
boost::algorithm::detail::range_finderF::range_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                range_finderF($/;"	f	struct:boost::algorithm::detail::range_finderF	access:public	signature:( input_iterator_type Begin, input_iterator_type End )
boost::algorithm::detail::range_finderF::range_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                range_finderF(const iterator_range<input_iterator_type>& Range) :$/;"	f	struct:boost::algorithm::detail::range_finderF	access:public	signature:(const iterator_range<input_iterator_type>& Range)
boost::algorithm::detail::range_finderF::result_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                typedef iterator_range<input_iterator_type> result_type;$/;"	t	struct:boost::algorithm::detail::range_finderF	access:public
boost::algorithm::detail::regex_formatF	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^            struct regex_formatF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::regex_formatF::char_type	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^                typedef BOOST_STRING_TYPENAME StringT::value_type char_type;$/;"	t	struct:boost::algorithm::detail::regex_formatF	access:private
boost::algorithm::detail::regex_formatF::m_Flags	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^                match_flag_type m_Flags;$/;"	m	struct:boost::algorithm::detail::regex_formatF	access:private
boost::algorithm::detail::regex_formatF::m_Fmt	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^                const StringT& m_Fmt;$/;"	m	struct:boost::algorithm::detail::regex_formatF	access:private
boost::algorithm::detail::regex_formatF::operator ()	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^                result_type operator()( $/;"	f	struct:boost::algorithm::detail::regex_formatF	access:public	signature:( const regex_search_result<InputIteratorT>& Replace ) const
boost::algorithm::detail::regex_formatF::regex_formatF	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^                regex_formatF( const StringT& Fmt, match_flag_type Flags=format_default ) :$/;"	f	struct:boost::algorithm::detail::regex_formatF	access:public	signature:( const StringT& Fmt, match_flag_type Flags=format_default )
boost::algorithm::detail::regex_formatF::result_type	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^                typedef StringT result_type;$/;"	t	struct:boost::algorithm::detail::regex_formatF	access:private
boost::algorithm::detail::regex_search_result	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^            struct regex_search_result : $/;"	s	namespace:boost::algorithm::detail	inherits:iterator_range
boost::algorithm::detail::regex_search_result::base_type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef iterator_range<IteratorT> base_type;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
boost::algorithm::detail::regex_search_result::const_iterator	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef BOOST_STRING_TYPENAME base_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
boost::algorithm::detail::regex_search_result::difference_type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef BOOST_STRING_TYPENAME base_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
boost::algorithm::detail::regex_search_result::iterator	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef BOOST_STRING_TYPENAME base_type::iterator iterator;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
boost::algorithm::detail::regex_search_result::m_MatchResults	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                match_results_type m_MatchResults;$/;"	m	struct:boost::algorithm::detail::regex_search_result	access:private
boost::algorithm::detail::regex_search_result::match_results	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                const match_results_type& match_results() const$/;"	f	struct:boost::algorithm::detail::regex_search_result	access:public	signature:() const
boost::algorithm::detail::regex_search_result::match_results_type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef boost::match_results<iterator> match_results_type;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
boost::algorithm::detail::regex_search_result::operator =	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                regex_search_result& operator=( const regex_search_result& Other )$/;"	f	struct:boost::algorithm::detail::regex_search_result	access:public	signature:( const regex_search_result& Other )
boost::algorithm::detail::regex_search_result::regex_search_result	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                regex_search_result( IteratorT End ) :$/;"	f	struct:boost::algorithm::detail::regex_search_result	access:public	signature:( IteratorT End )
boost::algorithm::detail::regex_search_result::regex_search_result	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                regex_search_result( const match_results_type& MatchResults ) :$/;"	f	struct:boost::algorithm::detail::regex_search_result	access:public	signature:( const match_results_type& MatchResults )
boost::algorithm::detail::regex_search_result::regex_search_result	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                regex_search_result( const regex_search_result& Other ) :$/;"	f	struct:boost::algorithm::detail::regex_search_result	access:public	signature:( const regex_search_result& Other )
boost::algorithm::detail::regex_search_result::type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef regex_search_result<IteratorT> type;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
boost::algorithm::detail::regex_search_result::value_type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef BOOST_STRING_TYPENAME base_type::value_type value_type;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
boost::algorithm::detail::replace	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            inline void replace($/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator From, BOOST_STRING_TYPENAME InputT::iterator To, ForwardIteratorT Begin, ForwardIteratorT End )
boost::algorithm::detail::replace	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            inline void replace($/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator From, BOOST_STRING_TYPENAME InputT::iterator To, const InsertT& Insert )
boost::algorithm::detail::replace_const_time_helper	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            struct replace_const_time_helper$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::replace_const_time_helper	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            struct replace_const_time_helper< true >$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::replace_const_time_helper::operator ()	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^                void operator()($/;"	f	struct:boost::algorithm::detail::replace_const_time_helper	access:public	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator From, BOOST_STRING_TYPENAME InputT::iterator To, ForwardIteratorT Begin, ForwardIteratorT End )
boost::algorithm::detail::replace_native_helper	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            struct replace_native_helper$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::replace_native_helper	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            struct replace_native_helper< true >$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::replace_native_helper::operator ()	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^                void operator()($/;"	f	struct:boost::algorithm::detail::replace_native_helper	access:public	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator From, BOOST_STRING_TYPENAME InputT::iterator To, ForwardIteratorT Begin, ForwardIteratorT End )
boost::algorithm::detail::skip_table	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^    class skip_table<key_type, value_type, false> {$/;"	c	namespace:boost::algorithm::detail
boost::algorithm::detail::skip_table	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^    class skip_table<key_type, value_type, true> {$/;"	c	namespace:boost::algorithm::detail
boost::algorithm::detail::skip_table::PrintSkipTable	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        void PrintSkipTable () const {$/;"	f	class:boost::algorithm::detail::skip_table	access:public	signature:() const
boost::algorithm::detail::skip_table::insert	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        void insert ( key_type key, value_type val ) {$/;"	f	class:boost::algorithm::detail::skip_table	access:public	signature:( key_type key, value_type val )
boost::algorithm::detail::skip_table::k_default_value	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        const value_type k_default_value;$/;"	m	class:boost::algorithm::detail::skip_table	access:private
boost::algorithm::detail::skip_table::operator []	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        value_type operator [] ( key_type key ) const {$/;"	f	class:boost::algorithm::detail::skip_table	access:public	signature:( key_type key ) const
boost::algorithm::detail::skip_table::skip_	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        skip_map skip_;$/;"	m	class:boost::algorithm::detail::skip_table	access:private
boost::algorithm::detail::skip_table::skip_map	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        typedef std::tr1::unordered_map<key_type, value_type> skip_map;$/;"	t	class:boost::algorithm::detail::skip_table	access:private
boost::algorithm::detail::skip_table::skip_table	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        skip_table ( std::size_t patSize, value_type default_value ) $/;"	f	class:boost::algorithm::detail::skip_table	access:public	signature:( std::size_t patSize, value_type default_value )
boost::algorithm::detail::skip_table::unsigned_key_type	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        typedef typename boost::make_unsigned<key_type>::type unsigned_key_type;$/;"	t	class:boost::algorithm::detail::skip_table	access:private
boost::algorithm::detail::tail_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct tail_finderF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::tail_finderF::m_N	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                int m_N;$/;"	m	struct:boost::algorithm::detail::tail_finderF	access:private
boost::algorithm::detail::tail_finderF::operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::tail_finderF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
boost::algorithm::detail::tail_finderF::tail_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                tail_finderF( int N ) : m_N(N) {}$/;"	f	struct:boost::algorithm::detail::tail_finderF	access:public	signature:( int N )
boost::algorithm::detail::to_lowerF	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^            struct to_lowerF : public std::unary_function<CharT, CharT>$/;"	s	namespace:boost::algorithm::detail	inherits:std::unary_function
boost::algorithm::detail::to_lowerF::m_Loc	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^                const std::locale* m_Loc;$/;"	m	struct:boost::algorithm::detail::to_lowerF	access:private
boost::algorithm::detail::to_lowerF::operator ()	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^                CharT operator ()( CharT Ch ) const$/;"	f	struct:boost::algorithm::detail::to_lowerF	access:public	signature:( CharT Ch ) const
boost::algorithm::detail::to_lowerF::to_lowerF	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^                to_lowerF( const std::locale& Loc ) : m_Loc( &Loc ) {}$/;"	f	struct:boost::algorithm::detail::to_lowerF	access:public	signature:( const std::locale& Loc )
boost::algorithm::detail::to_upperF	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^            struct to_upperF : public std::unary_function<CharT, CharT>$/;"	s	namespace:boost::algorithm::detail	inherits:std::unary_function
boost::algorithm::detail::to_upperF::m_Loc	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^                const std::locale* m_Loc;$/;"	m	struct:boost::algorithm::detail::to_upperF	access:private
boost::algorithm::detail::to_upperF::operator ()	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^                CharT operator ()( CharT Ch ) const$/;"	f	struct:boost::algorithm::detail::to_upperF	access:public	signature:( CharT Ch ) const
boost::algorithm::detail::to_upperF::to_upperF	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^                to_upperF( const std::locale& Loc ) : m_Loc( &Loc ) {}$/;"	f	struct:boost::algorithm::detail::to_upperF	access:public	signature:( const std::locale& Loc )
boost::algorithm::detail::token_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct token_finderF$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::token_finderF::m_Pred	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                PredicateT m_Pred;$/;"	m	struct:boost::algorithm::detail::token_finderF	access:private
boost::algorithm::detail::token_finderF::m_eCompress	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                token_compress_mode_type m_eCompress;$/;"	m	struct:boost::algorithm::detail::token_finderF	access:private
boost::algorithm::detail::token_finderF::operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::token_finderF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
boost::algorithm::detail::token_finderF::token_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                token_finderF($/;"	f	struct:boost::algorithm::detail::token_finderF	access:public	signature:( PredicateT Pred, token_compress_mode_type eCompress=token_compress_off )
boost::algorithm::detail::transform_range	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^            void transform_range($/;"	f	namespace:boost::algorithm::detail	signature:( const RangeT& Input, FunctorT Functor)
boost::algorithm::detail::transform_range_copy	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^            OutputIteratorT transform_range_copy($/;"	f	namespace:boost::algorithm::detail	signature:( OutputIteratorT Output, const RangeT& Input, FunctorT Functor)
boost::algorithm::detail::transform_range_copy	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^            inline SequenceT transform_range_copy( $/;"	f	namespace:boost::algorithm::detail	signature:( const RangeT& Input, FunctorT Functor)
boost::algorithm::detail::trim_begin	/usr/include/boost/algorithm/string/detail/trim.hpp	/^            inline ForwardIteratorT trim_begin( $/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT InBegin, ForwardIteratorT InEnd, PredicateT IsSpace )
boost::algorithm::detail::trim_end	/usr/include/boost/algorithm/string/detail/trim.hpp	/^            inline ForwardIteratorT trim_end( $/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT InBegin, ForwardIteratorT InEnd, PredicateT IsSpace )
boost::algorithm::detail::trim_end_iter_select	/usr/include/boost/algorithm/string/detail/trim.hpp	/^            inline ForwardIteratorT trim_end_iter_select( $/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT InBegin, ForwardIteratorT InEnd, PredicateT IsSpace, std::bidirectional_iterator_tag )
boost::algorithm::detail::trim_end_iter_select	/usr/include/boost/algorithm/string/detail/trim.hpp	/^            inline ForwardIteratorT trim_end_iter_select( $/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT InBegin, ForwardIteratorT InEnd, PredicateT IsSpace, std::forward_iterator_tag )
boost::algorithm::dissect_formatter	/usr/include/boost/algorithm/string/formatter.hpp	/^        dissect_formatter(const FinderT& Finder)$/;"	f	namespace:boost::algorithm	signature:(const FinderT& Finder)
boost::algorithm::empty_formatter	/usr/include/boost/algorithm/string/formatter.hpp	/^        empty_formatter(const RangeT&)$/;"	f	namespace:boost::algorithm	signature:(const RangeT&)
boost::algorithm::ends_with	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool ends_with( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test)
boost::algorithm::ends_with	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool ends_with( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, PredicateT Comp)
boost::algorithm::equals	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool equals( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test)
boost::algorithm::equals	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool equals( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, PredicateT Comp)
boost::algorithm::erase_all	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_all( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search )
boost::algorithm::erase_all_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_all_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search )
boost::algorithm::erase_all_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_all_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search )
boost::algorithm::erase_all_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        inline void erase_all_regex( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
boost::algorithm::erase_all_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline OutputIteratorT erase_all_regex_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
boost::algorithm::erase_all_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline SequenceT erase_all_regex_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
boost::algorithm::erase_first	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_first( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search )
boost::algorithm::erase_first_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_first_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search )
boost::algorithm::erase_first_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_first_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search )
boost::algorithm::erase_head	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_head( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, int N )
boost::algorithm::erase_head_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_head_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, int N )
boost::algorithm::erase_head_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_head_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, int N )
boost::algorithm::erase_last	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_last( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search )
boost::algorithm::erase_last_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_last_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search )
boost::algorithm::erase_last_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_last_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search )
boost::algorithm::erase_nth	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_nth( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search, int Nth )
boost::algorithm::erase_nth_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_nth_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, int Nth )
boost::algorithm::erase_nth_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_nth_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search, int Nth )
boost::algorithm::erase_range	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_range( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const iterator_range< BOOST_STRING_TYPENAME range_iterator<SequenceT>::type>& SearchRange )
boost::algorithm::erase_range_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_range_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const iterator_range< BOOST_STRING_TYPENAME range_const_iterator<RangeT>::type>& SearchRange )
boost::algorithm::erase_range_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_range_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const iterator_range< BOOST_STRING_TYPENAME range_const_iterator<SequenceT>::type>& SearchRange )
boost::algorithm::erase_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        inline void erase_regex( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
boost::algorithm::erase_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline OutputIteratorT erase_regex_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
boost::algorithm::erase_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline SequenceT erase_regex_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
boost::algorithm::erase_tail	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_tail( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, int N )
boost::algorithm::erase_tail_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_tail_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, int N )
boost::algorithm::erase_tail_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_tail_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, int N )
boost::algorithm::find	/usr/include/boost/algorithm/string/find.hpp	/^        find( $/;"	f	namespace:boost::algorithm	signature:( RangeT& Input, const FinderT& Finder)
boost::algorithm::find_all	/usr/include/boost/algorithm/string/split.hpp	/^        inline SequenceSequenceT& find_all($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, Range1T& Input, const Range2T& Search)
boost::algorithm::find_all_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        inline SequenceSequenceT& find_all_regex($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, const RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
boost::algorithm::find_first	/usr/include/boost/algorithm/string/find.hpp	/^        find_first( $/;"	f	namespace:boost::algorithm	signature:( Range1T& Input, const Range2T& Search)
boost::algorithm::find_format	/usr/include/boost/algorithm/string/find_format.hpp	/^        inline void find_format( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, FinderT Finder, FormatterT Formatter)
boost::algorithm::find_format_all	/usr/include/boost/algorithm/string/find_format.hpp	/^        inline void find_format_all( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, FinderT Finder, FormatterT Formatter )
boost::algorithm::find_format_all_copy	/usr/include/boost/algorithm/string/find_format.hpp	/^        inline OutputIteratorT find_format_all_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, FinderT Finder, FormatterT Formatter)
boost::algorithm::find_format_all_copy	/usr/include/boost/algorithm/string/find_format.hpp	/^        inline SequenceT find_format_all_copy($/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, FinderT Finder, FormatterT Formatter )
boost::algorithm::find_format_copy	/usr/include/boost/algorithm/string/find_format.hpp	/^        inline OutputIteratorT find_format_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, FinderT Finder, FormatterT Formatter )
boost::algorithm::find_format_copy	/usr/include/boost/algorithm/string/find_format.hpp	/^        inline SequenceT find_format_copy($/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, FinderT Finder, FormatterT Formatter )
boost::algorithm::find_head	/usr/include/boost/algorithm/string/find.hpp	/^        find_head( $/;"	f	namespace:boost::algorithm	signature:( RangeT& Input, int N)
boost::algorithm::find_if_not	/usr/include/boost/algorithm/cxx11/find_if_not.hpp	/^typename boost::range_iterator<const Range>::type find_if_not ( const Range &r, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, Predicate p )
boost::algorithm::find_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^        class find_iterator : $/;"	c	namespace:boost::algorithm	inherits:iterator_facade,detail::find_iterator_base
boost::algorithm::find_iterator::base_type	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            typedef detail::find_iterator_base<IteratorT> base_type;$/;"	t	class:boost::algorithm::find_iterator	access:private
boost::algorithm::find_iterator::dereference	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            const match_type& dereference() const$/;"	f	class:boost::algorithm::find_iterator	access:private	signature:() const
boost::algorithm::find_iterator::eof	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            bool eof() const$/;"	f	class:boost::algorithm::find_iterator	access:public	signature:() const
boost::algorithm::find_iterator::equal	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            bool equal( const find_iterator& Other ) const$/;"	f	class:boost::algorithm::find_iterator	access:private	signature:( const find_iterator& Other ) const
boost::algorithm::find_iterator::find_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            find_iterator( const find_iterator& Other ) :$/;"	f	class:boost::algorithm::find_iterator	access:public	signature:( const find_iterator& Other )
boost::algorithm::find_iterator::find_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            find_iterator($/;"	f	class:boost::algorithm::find_iterator	access:public	signature:( IteratorT Begin, IteratorT End, FinderT Finder )
boost::algorithm::find_iterator::find_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            find_iterator($/;"	f	class:boost::algorithm::find_iterator	access:public	signature:( RangeT& Col, FinderT Finder )
boost::algorithm::find_iterator::find_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            find_iterator() {}$/;"	f	class:boost::algorithm::find_iterator	access:public	signature:()
boost::algorithm::find_iterator::increment	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            void increment()$/;"	f	class:boost::algorithm::find_iterator	access:private	signature:()
boost::algorithm::find_iterator::input_iterator_type	/usr/include/boost/algorithm/string/find_iterator.hpp	/^                base_type::input_iterator_type input_iterator_type;$/;"	t	class:boost::algorithm::find_iterator	access:private
boost::algorithm::find_iterator::m_End	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            input_iterator_type m_End;$/;"	m	class:boost::algorithm::find_iterator	access:private
boost::algorithm::find_iterator::m_Match	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            match_type m_Match;$/;"	m	class:boost::algorithm::find_iterator	access:private
boost::algorithm::find_iterator::match_type	/usr/include/boost/algorithm/string/find_iterator.hpp	/^                base_type::match_type match_type;$/;"	t	class:boost::algorithm::find_iterator	access:private
boost::algorithm::find_last	/usr/include/boost/algorithm/string/find.hpp	/^        find_last( $/;"	f	namespace:boost::algorithm	signature:( Range1T& Input, const Range2T& Search)
boost::algorithm::find_nth	/usr/include/boost/algorithm/string/find.hpp	/^        find_nth( $/;"	f	namespace:boost::algorithm	signature:( Range1T& Input, const Range2T& Search, int Nth)
boost::algorithm::find_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        find_regex( $/;"	f	namespace:boost::algorithm	signature:( RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
boost::algorithm::find_tail	/usr/include/boost/algorithm/string/find.hpp	/^        find_tail( $/;"	f	namespace:boost::algorithm	signature:( RangeT& Input, int N)
boost::algorithm::find_token	/usr/include/boost/algorithm/string/find.hpp	/^        find_token( $/;"	f	namespace:boost::algorithm	signature:( RangeT& Input, PredicateT Pred, token_compress_mode_type eCompress=token_compress_off)
boost::algorithm::first_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        first_finder( $/;"	f	namespace:boost::algorithm	signature:( const RangeT& Search, PredicateT Comp )
boost::algorithm::first_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        first_finder( const RangeT& Search )$/;"	f	namespace:boost::algorithm	signature:( const RangeT& Search )
boost::algorithm::has_const_time_erase	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        class has_const_time_erase$/;"	c	namespace:boost::algorithm
boost::algorithm::has_const_time_erase::BOOST_STATIC_CONSTANT	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            BOOST_STATIC_CONSTANT(bool, value=($/;"	p	class:boost::algorithm::has_const_time_erase	access:public	signature:(bool, value=( sizeof(has_const_time_erase_tester(t))==sizeof(yes_type) ) )
boost::algorithm::has_const_time_erase::t	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            static T* t;$/;"	m	class:boost::algorithm::has_const_time_erase	access:private
boost::algorithm::has_const_time_erase::type	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            typedef mpl::bool_<has_const_time_erase<T>::value> type;$/;"	t	class:boost::algorithm::has_const_time_erase	access:public
boost::algorithm::has_const_time_erase_tester	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        no_type has_const_time_erase_tester(...);$/;"	p	namespace:boost::algorithm	signature:(....)
boost::algorithm::has_const_time_erase_tester	/usr/include/boost/algorithm/string/std/list_traits.hpp	/^        yes_type has_const_time_erase_tester( const ::std::list<T,AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const ::std::list<T,AllocT>* )
boost::algorithm::has_const_time_erase_tester	/usr/include/boost/algorithm/string/std/rope_traits.hpp	/^        yes_type has_const_time_erase_tester( const std::rope<T, TraitsT, AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const std::rope<T, TraitsT, AllocT>* )
boost::algorithm::has_const_time_erase_tester	/usr/include/boost/algorithm/string/std/slist_traits.hpp	/^        yes_type has_const_time_erase_tester( const BOOST_STD_EXTENSION_NAMESPACE::slist<T,AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const BOOST_STD_EXTENSION_NAMESPACE::slist<T,AllocT>* )
boost::algorithm::has_const_time_insert	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        class has_const_time_insert$/;"	c	namespace:boost::algorithm
boost::algorithm::has_const_time_insert::BOOST_STATIC_CONSTANT	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            BOOST_STATIC_CONSTANT(bool, value=($/;"	p	class:boost::algorithm::has_const_time_insert	access:public	signature:(bool, value=( sizeof(has_const_time_insert_tester(t))==sizeof(yes_type) ) )
boost::algorithm::has_const_time_insert::t	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            static T* t;$/;"	m	class:boost::algorithm::has_const_time_insert	access:private
boost::algorithm::has_const_time_insert::type	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            typedef mpl::bool_<has_const_time_insert<T>::value> type;$/;"	t	class:boost::algorithm::has_const_time_insert	access:public
boost::algorithm::has_const_time_insert_tester	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        no_type has_const_time_insert_tester(...);$/;"	p	namespace:boost::algorithm	signature:(....)
boost::algorithm::has_const_time_insert_tester	/usr/include/boost/algorithm/string/std/list_traits.hpp	/^        yes_type has_const_time_insert_tester( const ::std::list<T,AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const ::std::list<T,AllocT>* )
boost::algorithm::has_const_time_insert_tester	/usr/include/boost/algorithm/string/std/rope_traits.hpp	/^        yes_type has_const_time_insert_tester( const std::rope<T, TraitsT, AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const std::rope<T, TraitsT, AllocT>* )
boost::algorithm::has_const_time_insert_tester	/usr/include/boost/algorithm/string/std/slist_traits.hpp	/^        yes_type has_const_time_insert_tester( const BOOST_STD_EXTENSION_NAMESPACE::slist<T,AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const BOOST_STD_EXTENSION_NAMESPACE::slist<T,AllocT>* )
boost::algorithm::has_native_replace	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        class has_native_replace$/;"	c	namespace:boost::algorithm
boost::algorithm::has_native_replace::BOOST_STATIC_CONSTANT	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            BOOST_STATIC_CONSTANT(bool, value=($/;"	p	class:boost::algorithm::has_native_replace	access:public	signature:(bool, value=( sizeof(has_native_replace_tester(t))==sizeof(yes_type) ) )
boost::algorithm::has_native_replace::t	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            static T* t;$/;"	m	class:boost::algorithm::has_native_replace	access:private
boost::algorithm::has_native_replace::type	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            typedef mpl::bool_<has_native_replace<T>::value> type;$/;"	t	class:boost::algorithm::has_native_replace	access:public
boost::algorithm::has_native_replace_tester	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        no_type has_native_replace_tester(...);$/;"	p	namespace:boost::algorithm	signature:(....)
boost::algorithm::has_native_replace_tester	/usr/include/boost/algorithm/string/std/rope_traits.hpp	/^        yes_type has_native_replace_tester( const std::rope<T, TraitsT, AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const std::rope<T, TraitsT, AllocT>* )
boost::algorithm::has_native_replace_tester	/usr/include/boost/algorithm/string/std/string_traits.hpp	/^        yes_type has_native_replace_tester( const std::basic_string<T, TraitsT, AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const std::basic_string<T, TraitsT, AllocT>* )
boost::algorithm::has_stable_iterators	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        class has_stable_iterators$/;"	c	namespace:boost::algorithm
boost::algorithm::has_stable_iterators::BOOST_STATIC_CONSTANT	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            BOOST_STATIC_CONSTANT(bool, value=($/;"	p	class:boost::algorithm::has_stable_iterators	access:public	signature:(bool, value=( sizeof(has_stable_iterators_tester(t))==sizeof(yes_type) ) )
boost::algorithm::has_stable_iterators::t	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            static T* t;$/;"	m	class:boost::algorithm::has_stable_iterators	access:private
boost::algorithm::has_stable_iterators::type	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            typedef mpl::bool_<has_stable_iterators<T>::value> type;$/;"	t	class:boost::algorithm::has_stable_iterators	access:public
boost::algorithm::has_stable_iterators_tester	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        no_type has_stable_iterators_tester(...);$/;"	p	namespace:boost::algorithm	signature:(....)
boost::algorithm::has_stable_iterators_tester	/usr/include/boost/algorithm/string/std/list_traits.hpp	/^        yes_type has_stable_iterators_tester( const ::std::list<T,AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const ::std::list<T,AllocT>* )
boost::algorithm::has_stable_iterators_tester	/usr/include/boost/algorithm/string/std/rope_traits.hpp	/^        yes_type has_stable_iterators_tester( const std::rope<T, TraitsT, AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const std::rope<T, TraitsT, AllocT>* )
boost::algorithm::has_stable_iterators_tester	/usr/include/boost/algorithm/string/std/slist_traits.hpp	/^        yes_type has_stable_iterators_tester( const BOOST_STD_EXTENSION_NAMESPACE::slist<T,AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const BOOST_STD_EXTENSION_NAMESPACE::slist<T,AllocT>* )
boost::algorithm::head_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        head_finder( int N )$/;"	f	namespace:boost::algorithm	signature:( int N )
boost::algorithm::hex	/usr/include/boost/algorithm/hex.hpp	/^String hex ( const String &input ) {$/;"	f	namespace:boost::algorithm	signature:( const String &input )
boost::algorithm::hex	/usr/include/boost/algorithm/hex.hpp	/^hex ( InputIterator first, InputIterator last, OutputIterator out ) {$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, OutputIterator out )
boost::algorithm::hex	/usr/include/boost/algorithm/hex.hpp	/^hex ( const Range &r, OutputIterator out ) {$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator out )
boost::algorithm::hex	/usr/include/boost/algorithm/hex.hpp	/^hex ( const T *ptr, OutputIterator out ) {$/;"	f	namespace:boost::algorithm	signature:( const T *ptr, OutputIterator out )
boost::algorithm::hex_decode_error	/usr/include/boost/algorithm/hex.hpp	/^struct hex_decode_error : virtual boost::exception, virtual std::exception {};$/;"	s	namespace:boost::algorithm	inherits:boost::exception,std::exception
boost::algorithm::icontains	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool icontains( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, const std::locale& Loc=std::locale())
boost::algorithm::identity_formatter	/usr/include/boost/algorithm/string/formatter.hpp	/^        identity_formatter()$/;"	f	namespace:boost::algorithm	signature:()
boost::algorithm::iends_with	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool iends_with( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, const std::locale& Loc=std::locale())
boost::algorithm::iequals	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool iequals( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, const std::locale& Loc=std::locale())
boost::algorithm::ierase_all	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void ierase_all( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search, const std::locale& Loc=std::locale() )
boost::algorithm::ierase_all_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT ierase_all_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const std::locale& Loc=std::locale() )
boost::algorithm::ierase_all_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT ierase_all_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search, const std::locale& Loc=std::locale() )
boost::algorithm::ierase_first	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void ierase_first( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search, const std::locale& Loc=std::locale() )
boost::algorithm::ierase_first_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT ierase_first_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const std::locale& Loc=std::locale() )
boost::algorithm::ierase_first_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT ierase_first_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search, const std::locale& Loc=std::locale() )
boost::algorithm::ierase_last	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void ierase_last( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search, const std::locale& Loc=std::locale() )
boost::algorithm::ierase_last_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT ierase_last_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const std::locale& Loc=std::locale() )
boost::algorithm::ierase_last_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT ierase_last_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search, const std::locale& Loc=std::locale() )
boost::algorithm::ierase_nth	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void ierase_nth( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search, int Nth, const std::locale& Loc=std::locale() )
boost::algorithm::ierase_nth_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT ierase_nth_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, int Nth, const std::locale& Loc=std::locale() )
boost::algorithm::ierase_nth_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT ierase_nth_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search, int Nth, const std::locale& Loc=std::locale() )
boost::algorithm::ifind_all	/usr/include/boost/algorithm/string/split.hpp	/^        inline SequenceSequenceT& ifind_all($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, Range1T& Input, const Range2T& Search, const std::locale& Loc=std::locale() )
boost::algorithm::ifind_first	/usr/include/boost/algorithm/string/find.hpp	/^        ifind_first( $/;"	f	namespace:boost::algorithm	signature:( Range1T& Input, const Range2T& Search, const std::locale& Loc=std::locale())
boost::algorithm::ifind_last	/usr/include/boost/algorithm/string/find.hpp	/^        ifind_last( $/;"	f	namespace:boost::algorithm	signature:( Range1T& Input, const Range2T& Search, const std::locale& Loc=std::locale())
boost::algorithm::ifind_nth	/usr/include/boost/algorithm/string/find.hpp	/^        ifind_nth( $/;"	f	namespace:boost::algorithm	signature:( Range1T& Input, const Range2T& Search, int Nth, const std::locale& Loc=std::locale())
boost::algorithm::ilexicographical_compare	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool ilexicographical_compare($/;"	f	namespace:boost::algorithm	signature:( const Range1T& Arg1, const Range2T& Arg2, const std::locale& Loc=std::locale())
boost::algorithm::iota	/usr/include/boost/algorithm/cxx11/iota.hpp	/^void iota ( Range &r, T value )$/;"	f	namespace:boost::algorithm	signature:( Range &r, T value )
boost::algorithm::iota_n	/usr/include/boost/algorithm/cxx11/iota.hpp	/^OutputIterator iota_n ( OutputIterator out, T value, std::size_t n )$/;"	f	namespace:boost::algorithm	signature:( OutputIterator out, T value, std::size_t n )
boost::algorithm::ireplace_all	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void ireplace_all( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, const Range2T& Format, const std::locale& Loc=std::locale() )
boost::algorithm::ireplace_all_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT ireplace_all_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const Range3T& Format, const std::locale& Loc=std::locale() )
boost::algorithm::ireplace_all_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT ireplace_all_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, const Range2T& Format, const std::locale& Loc=std::locale() )
boost::algorithm::ireplace_first	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void ireplace_first( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, const Range2T& Format, const std::locale& Loc=std::locale() )
boost::algorithm::ireplace_first_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT ireplace_first_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const Range3T& Format, const std::locale& Loc=std::locale() )
boost::algorithm::ireplace_first_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT ireplace_first_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range2T& Search, const Range1T& Format, const std::locale& Loc=std::locale() )
boost::algorithm::ireplace_last	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void ireplace_last( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, const Range2T& Format, const std::locale& Loc=std::locale() )
boost::algorithm::ireplace_last_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT ireplace_last_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const Range3T& Format, const std::locale& Loc=std::locale() )
boost::algorithm::ireplace_last_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT ireplace_last_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, const Range2T& Format, const std::locale& Loc=std::locale() )
boost::algorithm::ireplace_nth	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void ireplace_nth( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, int Nth, const Range2T& Format, const std::locale& Loc=std::locale() )
boost::algorithm::ireplace_nth_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT ireplace_nth_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, int Nth, const Range3T& Format, const std::locale& Loc=std::locale() )
boost::algorithm::ireplace_nth_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT ireplace_nth_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, int Nth, const Range2T& Format, const std::locale& Loc=std::locale() )
boost::algorithm::is_alnum	/usr/include/boost/algorithm/string/classification.hpp	/^        is_alnum(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
boost::algorithm::is_alpha	/usr/include/boost/algorithm/string/classification.hpp	/^        is_alpha(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
boost::algorithm::is_any_of	/usr/include/boost/algorithm/string/classification.hpp	/^        is_any_of( const RangeT& Set )$/;"	f	namespace:boost::algorithm	signature:( const RangeT& Set )
boost::algorithm::is_classified	/usr/include/boost/algorithm/string/classification.hpp	/^        is_classified(std::ctype_base::mask Type, const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(std::ctype_base::mask Type, const std::locale& Loc=std::locale())
boost::algorithm::is_cntrl	/usr/include/boost/algorithm/string/classification.hpp	/^        is_cntrl(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
boost::algorithm::is_decreasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_decreasing ( ForwardIterator first, ForwardIterator last )$/;"	f	namespace:boost::algorithm	signature:( ForwardIterator first, ForwardIterator last )
boost::algorithm::is_decreasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_decreasing ( const R &range )$/;"	f	namespace:boost::algorithm	signature:( const R &range )
boost::algorithm::is_digit	/usr/include/boost/algorithm/string/classification.hpp	/^        is_digit(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
boost::algorithm::is_equal	/usr/include/boost/algorithm/string/compare.hpp	/^        struct is_equal$/;"	s	namespace:boost::algorithm
boost::algorithm::is_equal::operator ()	/usr/include/boost/algorithm/string/compare.hpp	/^                bool operator()( const T1& Arg1, const T2& Arg2 ) const$/;"	f	struct:boost::algorithm::is_equal	access:public	signature:( const T1& Arg1, const T2& Arg2 ) const
boost::algorithm::is_from_range	/usr/include/boost/algorithm/string/classification.hpp	/^        inline detail::is_from_rangeF<CharT> is_from_range(CharT From, CharT To)$/;"	f	namespace:boost::algorithm	signature:(CharT From, CharT To)
boost::algorithm::is_graph	/usr/include/boost/algorithm/string/classification.hpp	/^        is_graph(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
boost::algorithm::is_iequal	/usr/include/boost/algorithm/string/compare.hpp	/^        struct is_iequal$/;"	s	namespace:boost::algorithm
boost::algorithm::is_iequal::is_iequal	/usr/include/boost/algorithm/string/compare.hpp	/^            is_iequal( const std::locale& Loc=std::locale() ) :$/;"	f	struct:boost::algorithm::is_iequal	access:public	signature:( const std::locale& Loc=std::locale() )
boost::algorithm::is_iequal::m_Loc	/usr/include/boost/algorithm/string/compare.hpp	/^            std::locale m_Loc;$/;"	m	struct:boost::algorithm::is_iequal	access:private
boost::algorithm::is_iequal::operator ()	/usr/include/boost/algorithm/string/compare.hpp	/^                bool operator()( const T1& Arg1, const T2& Arg2 ) const$/;"	f	struct:boost::algorithm::is_iequal	access:public	signature:( const T1& Arg1, const T2& Arg2 ) const
boost::algorithm::is_iless	/usr/include/boost/algorithm/string/compare.hpp	/^        struct is_iless$/;"	s	namespace:boost::algorithm
boost::algorithm::is_iless::is_iless	/usr/include/boost/algorithm/string/compare.hpp	/^            is_iless( const std::locale& Loc=std::locale() ) :$/;"	f	struct:boost::algorithm::is_iless	access:public	signature:( const std::locale& Loc=std::locale() )
boost::algorithm::is_iless::m_Loc	/usr/include/boost/algorithm/string/compare.hpp	/^            std::locale m_Loc;$/;"	m	struct:boost::algorithm::is_iless	access:private
boost::algorithm::is_iless::operator ()	/usr/include/boost/algorithm/string/compare.hpp	/^                bool operator()( const T1& Arg1, const T2& Arg2 ) const$/;"	f	struct:boost::algorithm::is_iless	access:public	signature:( const T1& Arg1, const T2& Arg2 ) const
boost::algorithm::is_increasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_increasing ( ForwardIterator first, ForwardIterator last )$/;"	f	namespace:boost::algorithm	signature:( ForwardIterator first, ForwardIterator last )
boost::algorithm::is_increasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_increasing ( const R &range )$/;"	f	namespace:boost::algorithm	signature:( const R &range )
boost::algorithm::is_less	/usr/include/boost/algorithm/string/compare.hpp	/^        struct is_less$/;"	s	namespace:boost::algorithm
boost::algorithm::is_less::operator ()	/usr/include/boost/algorithm/string/compare.hpp	/^                bool operator()( const T1& Arg1, const T2& Arg2 ) const$/;"	f	struct:boost::algorithm::is_less	access:public	signature:( const T1& Arg1, const T2& Arg2 ) const
boost::algorithm::is_lower	/usr/include/boost/algorithm/string/classification.hpp	/^        is_lower(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
boost::algorithm::is_not_greater	/usr/include/boost/algorithm/string/compare.hpp	/^        struct is_not_greater$/;"	s	namespace:boost::algorithm
boost::algorithm::is_not_greater::operator ()	/usr/include/boost/algorithm/string/compare.hpp	/^                bool operator()( const T1& Arg1, const T2& Arg2 ) const$/;"	f	struct:boost::algorithm::is_not_greater	access:public	signature:( const T1& Arg1, const T2& Arg2 ) const
boost::algorithm::is_not_igreater	/usr/include/boost/algorithm/string/compare.hpp	/^        struct is_not_igreater$/;"	s	namespace:boost::algorithm
boost::algorithm::is_not_igreater::is_not_igreater	/usr/include/boost/algorithm/string/compare.hpp	/^            is_not_igreater( const std::locale& Loc=std::locale() ) :$/;"	f	struct:boost::algorithm::is_not_igreater	access:public	signature:( const std::locale& Loc=std::locale() )
boost::algorithm::is_not_igreater::m_Loc	/usr/include/boost/algorithm/string/compare.hpp	/^            std::locale m_Loc;$/;"	m	struct:boost::algorithm::is_not_igreater	access:private
boost::algorithm::is_not_igreater::operator ()	/usr/include/boost/algorithm/string/compare.hpp	/^                bool operator()( const T1& Arg1, const T2& Arg2 ) const$/;"	f	struct:boost::algorithm::is_not_igreater	access:public	signature:( const T1& Arg1, const T2& Arg2 ) const
boost::algorithm::is_partitioned	/usr/include/boost/algorithm/cxx11/is_partitioned.hpp	/^bool is_partitioned ( const Range &r, UnaryPredicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, UnaryPredicate p )
boost::algorithm::is_permutation	/usr/include/boost/algorithm/cxx11/is_permutation.hpp	/^bool is_permutation ( const Range &r, ForwardIterator first2 )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, ForwardIterator first2 )
boost::algorithm::is_permutation	/usr/include/boost/algorithm/cxx11/is_permutation.hpp	/^is_permutation ( const Range &r, ForwardIterator first2, BinaryPredicate pred )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, ForwardIterator first2, BinaryPredicate pred )
boost::algorithm::is_print	/usr/include/boost/algorithm/string/classification.hpp	/^        is_print(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
boost::algorithm::is_punct	/usr/include/boost/algorithm/string/classification.hpp	/^        is_punct(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
boost::algorithm::is_sorted	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_sorted ( const R &range )$/;"	f	namespace:boost::algorithm	signature:( const R &range )
boost::algorithm::is_sorted	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    is_sorted ( const R &range, Pred p )$/;"	f	namespace:boost::algorithm	signature:( const R &range, Pred p )
boost::algorithm::is_sorted_until	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    >::type is_sorted_until ( const R &range, Pred p )$/;"	f	namespace:boost::algorithm	signature:( const R &range, Pred p )
boost::algorithm::is_sorted_until	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    typename boost::range_iterator<const R>::type is_sorted_until ( const R &range )$/;"	f	namespace:boost::algorithm	signature:( const R &range )
boost::algorithm::is_space	/usr/include/boost/algorithm/string/classification.hpp	/^        is_space(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
boost::algorithm::is_strictly_decreasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_strictly_decreasing ( ForwardIterator first, ForwardIterator last )$/;"	f	namespace:boost::algorithm	signature:( ForwardIterator first, ForwardIterator last )
boost::algorithm::is_strictly_decreasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_strictly_decreasing ( const R &range )$/;"	f	namespace:boost::algorithm	signature:( const R &range )
boost::algorithm::is_strictly_increasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_strictly_increasing ( ForwardIterator first, ForwardIterator last )$/;"	f	namespace:boost::algorithm	signature:( ForwardIterator first, ForwardIterator last )
boost::algorithm::is_strictly_increasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_strictly_increasing ( const R &range )$/;"	f	namespace:boost::algorithm	signature:( const R &range )
boost::algorithm::is_upper	/usr/include/boost/algorithm/string/classification.hpp	/^        is_upper(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
boost::algorithm::is_xdigit	/usr/include/boost/algorithm/string/classification.hpp	/^        is_xdigit(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
boost::algorithm::istarts_with	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool istarts_with( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, const std::locale& Loc=std::locale())
boost::algorithm::iter_find	/usr/include/boost/algorithm/string/iter_find.hpp	/^        iter_find($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, RangeT& Input, FinderT Finder )
boost::algorithm::iter_split	/usr/include/boost/algorithm/string/iter_find.hpp	/^        iter_split($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, RangeT& Input, FinderT Finder )
boost::algorithm::join	/usr/include/boost/algorithm/string/join.hpp	/^        join($/;"	f	namespace:boost::algorithm	signature:( const SequenceSequenceT& Input, const Range1T& Separator)
boost::algorithm::join_if	/usr/include/boost/algorithm/string/join.hpp	/^        join_if($/;"	f	namespace:boost::algorithm	signature:( const SequenceSequenceT& Input, const Range1T& Separator, PredicateT Pred)
boost::algorithm::join_if	/usr/include/boost/algorithm/string/regex.hpp	/^        join_if($/;"	f	namespace:boost::algorithm	signature:( const SequenceSequenceT& Input, const Range1T& Separator, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
boost::algorithm::join_if_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        join_if_regex($/;"	f	namespace:boost::algorithm	signature:( const SequenceSequenceT& Input, const Range1T& Separator, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
boost::algorithm::knuth_morris_pratt	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    class knuth_morris_pratt {$/;"	c	namespace:boost::algorithm
boost::algorithm::knuth_morris_pratt::difference_type	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        typedef typename std::iterator_traits<patIter>::difference_type difference_type;$/;"	t	class:boost::algorithm::knuth_morris_pratt	access:private
boost::algorithm::knuth_morris_pratt::do_search	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        corpusIter do_search ( corpusIter corpus_first, corpusIter corpus_last, $/;"	f	class:boost::algorithm::knuth_morris_pratt	access:private	signature:( corpusIter corpus_first, corpusIter corpus_last, difference_type k_corpus_length ) const
boost::algorithm::knuth_morris_pratt::init_skip_table	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        void init_skip_table ( patIter first, patIter last ) {$/;"	f	class:boost::algorithm::knuth_morris_pratt	access:private	signature:( patIter first, patIter last )
boost::algorithm::knuth_morris_pratt::k_pattern_length	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        const difference_type k_pattern_length;$/;"	m	class:boost::algorithm::knuth_morris_pratt	access:private
boost::algorithm::knuth_morris_pratt::knuth_morris_pratt	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        knuth_morris_pratt ( patIter first, patIter last ) $/;"	f	class:boost::algorithm::knuth_morris_pratt	access:public	signature:( patIter first, patIter last )
boost::algorithm::knuth_morris_pratt::operator ()	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        corpusIter operator () ( corpusIter corpus_first, corpusIter corpus_last ) const {$/;"	f	class:boost::algorithm::knuth_morris_pratt	access:public	signature:( corpusIter corpus_first, corpusIter corpus_last ) const
boost::algorithm::knuth_morris_pratt::operator ()	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        typename boost::range_iterator<Range>::type operator () ( Range &r ) const {$/;"	f	class:boost::algorithm::knuth_morris_pratt	access:public	signature:( Range &r ) const
boost::algorithm::knuth_morris_pratt::pat_first	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        patIter pat_first, pat_last;$/;"	m	class:boost::algorithm::knuth_morris_pratt	access:private
boost::algorithm::knuth_morris_pratt::pat_last	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        patIter pat_first, pat_last;$/;"	m	class:boost::algorithm::knuth_morris_pratt	access:private
boost::algorithm::knuth_morris_pratt::preKmp	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        void preKmp ( patIter first, patIter last ) {$/;"	f	class:boost::algorithm::knuth_morris_pratt	access:private	signature:( patIter first, patIter last )
boost::algorithm::knuth_morris_pratt::skip_	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        std::vector <difference_type> skip_;$/;"	m	class:boost::algorithm::knuth_morris_pratt	access:private
boost::algorithm::knuth_morris_pratt::~knuth_morris_pratt	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        ~knuth_morris_pratt () {}$/;"	f	class:boost::algorithm::knuth_morris_pratt	access:public	signature:()
boost::algorithm::knuth_morris_pratt_search	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    corpusIter knuth_morris_pratt_search ( $/;"	f	namespace:boost::algorithm	signature:( corpusIter corpus_first, corpusIter corpus_last, const PatternRange &pattern )
boost::algorithm::knuth_morris_pratt_search	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    corpusIter knuth_morris_pratt_search ( $/;"	f	namespace:boost::algorithm	signature:( corpusIter corpus_first, corpusIter corpus_last, patIter pat_first, patIter pat_last )
boost::algorithm::knuth_morris_pratt_search	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    knuth_morris_pratt_search ( CorpusRange &corpus, const PatternRange &pattern )$/;"	f	namespace:boost::algorithm	signature:( CorpusRange &corpus, const PatternRange &pattern )
boost::algorithm::knuth_morris_pratt_search	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    knuth_morris_pratt_search ( CorpusRange &corpus, patIter pat_first, patIter pat_last )$/;"	f	namespace:boost::algorithm	signature:( CorpusRange &corpus, patIter pat_first, patIter pat_last )
boost::algorithm::last_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        last_finder( const RangeT& Search )$/;"	f	namespace:boost::algorithm	signature:( const RangeT& Search )
boost::algorithm::last_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        last_finder( const RangeT& Search, PredicateT Comp )$/;"	f	namespace:boost::algorithm	signature:( const RangeT& Search, PredicateT Comp )
boost::algorithm::lexicographical_compare	/usr/include/boost/algorithm/string/predicate.hpp	/^            inline bool lexicographical_compare($/;"	f	namespace:boost::algorithm	signature:( const Range1T& Arg1, const Range2T& Arg2)
boost::algorithm::lexicographical_compare	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool lexicographical_compare($/;"	f	namespace:boost::algorithm	signature:( const Range1T& Arg1, const Range2T& Arg2, PredicateT Pred)
boost::algorithm::make_boyer_moore	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    make_boyer_moore ( Range &r ) {$/;"	f	namespace:boost::algorithm	signature:( Range &r )
boost::algorithm::make_boyer_moore	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    make_boyer_moore ( const Range &r ) {$/;"	f	namespace:boost::algorithm	signature:( const Range &r )
boost::algorithm::make_boyer_moore_horspool	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    make_boyer_moore_horspool ( Range &r ) {$/;"	f	namespace:boost::algorithm	signature:( Range &r )
boost::algorithm::make_boyer_moore_horspool	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    make_boyer_moore_horspool ( const Range &r ) {$/;"	f	namespace:boost::algorithm	signature:( const Range &r )
boost::algorithm::make_find_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^        make_find_iterator($/;"	f	namespace:boost::algorithm	signature:( RangeT& Collection, FinderT Finder)
boost::algorithm::make_knuth_morris_pratt	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    make_knuth_morris_pratt ( Range &r ) {$/;"	f	namespace:boost::algorithm	signature:( Range &r )
boost::algorithm::make_knuth_morris_pratt	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    make_knuth_morris_pratt ( const Range &r ) {$/;"	f	namespace:boost::algorithm	signature:( const Range &r )
boost::algorithm::make_split_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^        make_split_iterator($/;"	f	namespace:boost::algorithm	signature:( RangeT& Collection, FinderT Finder)
boost::algorithm::no_type	/usr/include/boost/algorithm/string/yes_no_type.hpp	/^        typedef size_descriptor<2>::type no_type;$/;"	t	namespace:boost::algorithm
boost::algorithm::non_hex_input	/usr/include/boost/algorithm/hex.hpp	/^struct non_hex_input    : virtual hex_decode_error {};$/;"	s	namespace:boost::algorithm	inherits:hex_decode_error
boost::algorithm::none_of	/usr/include/boost/algorithm/cxx11/none_of.hpp	/^bool none_of ( const Range &r, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, Predicate p )
boost::algorithm::none_of_equal	/usr/include/boost/algorithm/cxx11/none_of.hpp	/^bool none_of_equal ( InputIterator first, InputIterator last, const V &val ) $/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, const V &val )
boost::algorithm::none_of_equal	/usr/include/boost/algorithm/cxx11/none_of.hpp	/^bool none_of_equal ( const Range &r, const V & val ) $/;"	f	namespace:boost::algorithm	signature:( const Range &r, const V & val )
boost::algorithm::not_enough_input	/usr/include/boost/algorithm/hex.hpp	/^struct not_enough_input : virtual hex_decode_error {};$/;"	s	namespace:boost::algorithm	inherits:hex_decode_error
boost::algorithm::nth_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        nth_finder( $/;"	f	namespace:boost::algorithm	signature:( const RangeT& Search, int Nth)
boost::algorithm::nth_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        nth_finder( $/;"	f	namespace:boost::algorithm	signature:( const RangeT& Search, int Nth, PredicateT Comp )
boost::algorithm::one_of	/usr/include/boost/algorithm/cxx11/one_of.hpp	/^bool one_of ( InputIterator first, InputIterator last, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, Predicate p )
boost::algorithm::one_of	/usr/include/boost/algorithm/cxx11/one_of.hpp	/^bool one_of ( const Range &r, Predicate p ) $/;"	f	namespace:boost::algorithm	signature:( const Range &r, Predicate p )
boost::algorithm::one_of_equal	/usr/include/boost/algorithm/cxx11/one_of.hpp	/^bool one_of_equal ( InputIterator first, InputIterator last, const V &val )$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, const V &val )
boost::algorithm::one_of_equal	/usr/include/boost/algorithm/cxx11/one_of.hpp	/^bool one_of_equal ( const Range &r, const V &val )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, const V &val )
boost::algorithm::operator !	/usr/include/boost/algorithm/string/classification.hpp	/^        operator!( const predicate_facade<PredT>& Pred )$/;"	f	namespace:boost::algorithm	signature:( const predicate_facade<PredT>& Pred )
boost::algorithm::operator &&	/usr/include/boost/algorithm/string/classification.hpp	/^        operator&&( $/;"	f	namespace:boost::algorithm	signature:( const predicate_facade<Pred1T>& Pred1, const predicate_facade<Pred2T>& Pred2 )
boost::algorithm::operator ||	/usr/include/boost/algorithm/string/classification.hpp	/^        operator||( $/;"	f	namespace:boost::algorithm	signature:( const predicate_facade<Pred1T>& Pred1, const predicate_facade<Pred2T>& Pred2 )
boost::algorithm::partition_copy	/usr/include/boost/algorithm/cxx11/partition_copy.hpp	/^partition_copy ( const Range &r, OutputIterator1 out_true, OutputIterator2 out_false, $/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator1 out_true, OutputIterator2 out_false, UnaryPredicate p )
boost::algorithm::partition_point	/usr/include/boost/algorithm/cxx11/partition_point.hpp	/^typename boost::range_iterator<Range> partition_point ( Range &r, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( Range &r, Predicate p )
boost::algorithm::predicate_facade	/usr/include/boost/algorithm/string/predicate_facade.hpp	/^        struct predicate_facade {};$/;"	s	namespace:boost::algorithm
boost::algorithm::range_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        range_finder( iterator_range<ForwardIteratorT> Range )$/;"	f	namespace:boost::algorithm	signature:( iterator_range<ForwardIteratorT> Range )
boost::algorithm::range_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        range_finder($/;"	f	namespace:boost::algorithm	signature:( ForwardIteratorT Begin, ForwardIteratorT End )
boost::algorithm::regex_finder	/usr/include/boost/algorithm/string/regex_find_format.hpp	/^        regex_finder($/;"	f	namespace:boost::algorithm	signature:( const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type MatchFlags=match_default )
boost::algorithm::regex_formatter	/usr/include/boost/algorithm/string/regex_find_format.hpp	/^        regex_formatter( $/;"	f	namespace:boost::algorithm	signature:( const std::basic_string<CharT, TraitsT, AllocT>& Format, match_flag_type Flags=format_default )
boost::algorithm::replace_all	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_all( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, const Range2T& Format )
boost::algorithm::replace_all_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_all_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const Range3T& Format )
boost::algorithm::replace_all_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_all_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, const Range2T& Format )
boost::algorithm::replace_all_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        inline void replace_all_regex( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, const std::basic_string<CharT, FormatStringTraitsT, FormatStringAllocatorT>& Format, match_flag_type Flags=match_default | format_default )
boost::algorithm::replace_all_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline OutputIteratorT replace_all_regex_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, const std::basic_string<CharT, FormatStringTraitsT, FormatStringAllocatorT>& Format, match_flag_type Flags=match_default | format_default )
boost::algorithm::replace_all_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline SequenceT replace_all_regex_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, const std::basic_string<CharT, FormatStringTraitsT, FormatStringAllocatorT>& Format, match_flag_type Flags=match_default | format_default )
boost::algorithm::replace_first	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_first( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, const Range2T& Format )
boost::algorithm::replace_first_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_first_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const Range3T& Format)
boost::algorithm::replace_first_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_first_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, const Range2T& Format )
boost::algorithm::replace_head	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_head( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, int N, const RangeT& Format )
boost::algorithm::replace_head_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_head_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, int N, const Range2T& Format )
boost::algorithm::replace_head_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_head_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, int N, const RangeT& Format )
boost::algorithm::replace_last	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_last( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, const Range2T& Format )
boost::algorithm::replace_last_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_last_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const Range3T& Format )
boost::algorithm::replace_last_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_last_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, const Range2T& Format )
boost::algorithm::replace_nth	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_nth( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, int Nth, const Range2T& Format )
boost::algorithm::replace_nth_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_nth_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, int Nth, const Range3T& Format )
boost::algorithm::replace_nth_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_nth_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, int Nth, const Range2T& Format )
boost::algorithm::replace_range	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_range( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const iterator_range< BOOST_STRING_TYPENAME range_iterator<SequenceT>::type>& SearchRange, const RangeT& Format)
boost::algorithm::replace_range_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_range_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const iterator_range< BOOST_STRING_TYPENAME range_const_iterator<Range1T>::type>& SearchRange, const Range2T& Format)
boost::algorithm::replace_range_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_range_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const iterator_range< BOOST_STRING_TYPENAME range_const_iterator<SequenceT>::type>& SearchRange, const RangeT& Format)
boost::algorithm::replace_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        inline void replace_regex( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, const std::basic_string<CharT, FormatStringTraitsT, FormatStringAllocatorT>& Format, match_flag_type Flags=match_default | format_default )
boost::algorithm::replace_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline OutputIteratorT replace_regex_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, const std::basic_string<CharT, FormatStringTraitsT, FormatStringAllocatorT>& Format, match_flag_type Flags=match_default | format_default )
boost::algorithm::replace_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline SequenceT replace_regex_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, const std::basic_string<CharT, FormatStringTraitsT, FormatStringAllocatorT>& Format, match_flag_type Flags=match_default | format_default )
boost::algorithm::replace_tail	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_tail( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, int N, const RangeT& Format )
boost::algorithm::replace_tail_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_tail_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, int N, const Range2T& Format )
boost::algorithm::replace_tail_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_tail_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, int N, const RangeT& Format )
boost::algorithm::size_descriptor	/usr/include/boost/algorithm/string/yes_no_type.hpp	/^        template<int I> struct size_descriptor $/;"	s	namespace:boost::algorithm
boost::algorithm::size_descriptor::type	/usr/include/boost/algorithm/string/yes_no_type.hpp	/^            typedef char (& type)[I];$/;"	t	struct:boost::algorithm::size_descriptor	access:public
boost::algorithm::split	/usr/include/boost/algorithm/string/split.hpp	/^        inline SequenceSequenceT& split($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, RangeT& Input, PredicateT Pred, token_compress_mode_type eCompress=token_compress_off )
boost::algorithm::split_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^        class split_iterator : $/;"	c	namespace:boost::algorithm	inherits:iterator_facade,detail::find_iterator_base
boost::algorithm::split_iterator::base_type	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            typedef detail::find_iterator_base<IteratorT> base_type;$/;"	t	class:boost::algorithm::split_iterator	access:private
boost::algorithm::split_iterator::dereference	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            const match_type& dereference() const$/;"	f	class:boost::algorithm::split_iterator	access:private	signature:() const
boost::algorithm::split_iterator::eof	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            bool eof() const$/;"	f	class:boost::algorithm::split_iterator	access:public	signature:() const
boost::algorithm::split_iterator::equal	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            bool equal( const split_iterator& Other ) const$/;"	f	class:boost::algorithm::split_iterator	access:private	signature:( const split_iterator& Other ) const
boost::algorithm::split_iterator::increment	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            void increment()$/;"	f	class:boost::algorithm::split_iterator	access:private	signature:()
boost::algorithm::split_iterator::input_iterator_type	/usr/include/boost/algorithm/string/find_iterator.hpp	/^                base_type::input_iterator_type input_iterator_type;$/;"	t	class:boost::algorithm::split_iterator	access:private
boost::algorithm::split_iterator::m_End	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            input_iterator_type m_End;$/;"	m	class:boost::algorithm::split_iterator	access:private
boost::algorithm::split_iterator::m_Match	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            match_type m_Match;$/;"	m	class:boost::algorithm::split_iterator	access:private
boost::algorithm::split_iterator::m_Next	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            input_iterator_type m_Next;$/;"	m	class:boost::algorithm::split_iterator	access:private
boost::algorithm::split_iterator::m_bEof	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            bool m_bEof;$/;"	m	class:boost::algorithm::split_iterator	access:private
boost::algorithm::split_iterator::match_type	/usr/include/boost/algorithm/string/find_iterator.hpp	/^                base_type::match_type match_type;$/;"	t	class:boost::algorithm::split_iterator	access:private
boost::algorithm::split_iterator::split_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            split_iterator( const split_iterator& Other ) :$/;"	f	class:boost::algorithm::split_iterator	access:public	signature:( const split_iterator& Other )
boost::algorithm::split_iterator::split_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            split_iterator($/;"	f	class:boost::algorithm::split_iterator	access:public	signature:( IteratorT Begin, IteratorT End, FinderT Finder )
boost::algorithm::split_iterator::split_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            split_iterator($/;"	f	class:boost::algorithm::split_iterator	access:public	signature:( RangeT& Col, FinderT Finder )
boost::algorithm::split_iterator::split_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            split_iterator() {}$/;"	f	class:boost::algorithm::split_iterator	access:public	signature:()
boost::algorithm::split_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        inline SequenceSequenceT& split_regex($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, const RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
boost::algorithm::starts_with	/usr/include/boost/algorithm/string/predicate.hpp	/^            inline bool starts_with( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, PredicateT Comp)
boost::algorithm::starts_with	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool starts_with( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test)
boost::algorithm::tail_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        tail_finder( int N )$/;"	f	namespace:boost::algorithm	signature:( int N )
boost::algorithm::to_lower	/usr/include/boost/algorithm/string/case_conv.hpp	/^        inline void to_lower( $/;"	f	namespace:boost::algorithm	signature:( WritableRangeT& Input, const std::locale& Loc=std::locale())
boost::algorithm::to_lower_copy	/usr/include/boost/algorithm/string/case_conv.hpp	/^        inline SequenceT to_lower_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const std::locale& Loc=std::locale())
boost::algorithm::to_lower_copy	/usr/include/boost/algorithm/string/case_conv.hpp	/^        to_lower_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const std::locale& Loc=std::locale())
boost::algorithm::to_upper	/usr/include/boost/algorithm/string/case_conv.hpp	/^        inline void to_upper( $/;"	f	namespace:boost::algorithm	signature:( WritableRangeT& Input, const std::locale& Loc=std::locale())
boost::algorithm::to_upper_copy	/usr/include/boost/algorithm/string/case_conv.hpp	/^        inline SequenceT to_upper_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const std::locale& Loc=std::locale())
boost::algorithm::to_upper_copy	/usr/include/boost/algorithm/string/case_conv.hpp	/^        to_upper_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const std::locale& Loc=std::locale())
boost::algorithm::token_compress_mode_type	/usr/include/boost/algorithm/string/constants.hpp	/^    enum token_compress_mode_type$/;"	g	namespace:boost::algorithm
boost::algorithm::token_compress_off	/usr/include/boost/algorithm/string/constants.hpp	/^        token_compress_off  \/\/!< Do not compress adjacent tokens$/;"	e	enum:boost::algorithm::token_compress_mode_type
boost::algorithm::token_compress_on	/usr/include/boost/algorithm/string/constants.hpp	/^        token_compress_on,    \/\/!< Compress adjacent tokens$/;"	e	enum:boost::algorithm::token_compress_mode_type
boost::algorithm::token_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        token_finder( $/;"	f	namespace:boost::algorithm	signature:( PredicateT Pred, token_compress_mode_type eCompress=token_compress_off )
boost::algorithm::trim	/usr/include/boost/algorithm/string/trim.hpp	/^        inline void trim(SequenceT& Input, const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, const std::locale& Loc=std::locale())
boost::algorithm::trim_all	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline void trim_all(SequenceT& Input, const std::locale& Loc =std::locale())$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, const std::locale& Loc =std::locale())
boost::algorithm::trim_all_copy	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline SequenceT trim_all_copy(const SequenceT& Input, const std::locale& Loc =std::locale())$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, const std::locale& Loc =std::locale())
boost::algorithm::trim_all_copy_if	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline SequenceT trim_all_copy_if(const SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, PredicateT IsSpace)
boost::algorithm::trim_all_if	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline void trim_all_if(SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, PredicateT IsSpace)
boost::algorithm::trim_copy	/usr/include/boost/algorithm/string/trim.hpp	/^        inline SequenceT trim_copy( const SequenceT& Input, const std::locale& Loc=std::locale() )$/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const std::locale& Loc=std::locale() )
boost::algorithm::trim_copy_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline OutputIteratorT trim_copy_if( $/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, PredicateT IsSpace)
boost::algorithm::trim_copy_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline SequenceT trim_copy_if(const SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, PredicateT IsSpace)
boost::algorithm::trim_fill	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline void trim_fill(SequenceT& Input, const RangeT& Fill, const std::locale& Loc =std::locale())$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, const RangeT& Fill, const std::locale& Loc =std::locale())
boost::algorithm::trim_fill_copy	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline SequenceT trim_fill_copy(const SequenceT& Input, const RangeT& Fill, const std::locale& Loc =std::locale())$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, const RangeT& Fill, const std::locale& Loc =std::locale())
boost::algorithm::trim_fill_copy_if	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline SequenceT trim_fill_copy_if(const SequenceT& Input, const RangeT& Fill, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, const RangeT& Fill, PredicateT IsSpace)
boost::algorithm::trim_fill_if	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline void trim_fill_if(SequenceT& Input, const RangeT& Fill, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, const RangeT& Fill, PredicateT IsSpace)
boost::algorithm::trim_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline void trim_if(SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, PredicateT IsSpace)
boost::algorithm::trim_left	/usr/include/boost/algorithm/string/trim.hpp	/^        inline void trim_left(SequenceT& Input, const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, const std::locale& Loc=std::locale())
boost::algorithm::trim_left_copy	/usr/include/boost/algorithm/string/trim.hpp	/^        inline SequenceT trim_left_copy(const SequenceT& Input, const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, const std::locale& Loc=std::locale())
boost::algorithm::trim_left_copy_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline OutputIteratorT trim_left_copy_if( $/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, PredicateT IsSpace)
boost::algorithm::trim_left_copy_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline SequenceT trim_left_copy_if(const SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, PredicateT IsSpace)
boost::algorithm::trim_left_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline void trim_left_if(SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, PredicateT IsSpace)
boost::algorithm::trim_right	/usr/include/boost/algorithm/string/trim.hpp	/^        inline void trim_right(SequenceT& Input, const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, const std::locale& Loc=std::locale())
boost::algorithm::trim_right_copy	/usr/include/boost/algorithm/string/trim.hpp	/^        inline SequenceT trim_right_copy(const SequenceT& Input, const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, const std::locale& Loc=std::locale())
boost::algorithm::trim_right_copy_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline OutputIteratorT trim_right_copy_if( $/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, PredicateT IsSpace )
boost::algorithm::trim_right_copy_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline SequenceT trim_right_copy_if(const SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, PredicateT IsSpace)
boost::algorithm::trim_right_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline void trim_right_if(SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, PredicateT IsSpace)
boost::algorithm::unhex	/usr/include/boost/algorithm/hex.hpp	/^OutputIterator unhex ( InputIterator first, InputIterator last, OutputIterator out ) {$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, OutputIterator out )
boost::algorithm::unhex	/usr/include/boost/algorithm/hex.hpp	/^OutputIterator unhex ( const Range &r, OutputIterator out ) {$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator out )
boost::algorithm::unhex	/usr/include/boost/algorithm/hex.hpp	/^OutputIterator unhex ( const T *ptr, OutputIterator out ) {$/;"	f	namespace:boost::algorithm	signature:( const T *ptr, OutputIterator out )
boost::algorithm::unhex	/usr/include/boost/algorithm/hex.hpp	/^String unhex ( const String &input ) {$/;"	f	namespace:boost::algorithm	signature:( const String &input )
boost::algorithm::yes_type	/usr/include/boost/algorithm/string/yes_no_type.hpp	/^        typedef size_descriptor<1>::type yes_type;$/;"	t	namespace:boost::algorithm
boost::detail	/usr/include/boost/algorithm/minmax_element.hpp	/^  namespace detail {  \/\/ common base for the overloads$/;"	n	namespace:boost
boost::detail	/usr/include/boost/algorithm/minmax_element.hpp	/^  namespace detail {  \/\/ for obtaining a uniform version of minmax_element$/;"	n	namespace:boost
boost::detail	/usr/include/boost/algorithm/minmax_element.hpp	/^  namespace detail {$/;"	n	namespace:boost
boost::detail::basic_first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_first_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::detail::basic_first_min_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_first_min_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::detail::basic_first_min_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_first_min_last_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::detail::basic_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_last_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::detail::basic_last_min_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_last_min_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::detail::basic_last_min_first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_last_min_first_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::detail::basic_last_min_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  basic_last_min_last_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::detail::basic_minmax_element	/usr/include/boost/algorithm/minmax_element.hpp	/^    basic_minmax_element(ForwardIter first, ForwardIter last, Compare comp)$/;"	f	namespace:boost::detail	signature:(ForwardIter first, ForwardIter last, Compare comp)
boost::detail::binary_pred_over_iter	/usr/include/boost/algorithm/minmax_element.hpp	/^    struct binary_pred_over_iter {$/;"	s	namespace:boost::detail
boost::detail::binary_pred_over_iter::binary_pred_over_iter	/usr/include/boost/algorithm/minmax_element.hpp	/^      explicit binary_pred_over_iter(BinaryPredicate const& p ) : m_p( p ) {}$/;"	f	struct:boost::detail::binary_pred_over_iter	access:public	signature:(BinaryPredicate const& p )
boost::detail::binary_pred_over_iter::m_p	/usr/include/boost/algorithm/minmax_element.hpp	/^      BinaryPredicate m_p;$/;"	m	struct:boost::detail::binary_pred_over_iter	access:private
boost::detail::binary_pred_over_iter::operator ()	/usr/include/boost/algorithm/minmax_element.hpp	/^      bool operator()(Iterator const& it1,$/;"	f	struct:boost::detail::binary_pred_over_iter	access:public	signature:(Iterator const& it1, Iterator const& it2) const
boost::detail::less_over_iter	/usr/include/boost/algorithm/minmax_element.hpp	/^    struct less_over_iter {$/;"	s	namespace:boost::detail
boost::detail::less_over_iter::operator ()	/usr/include/boost/algorithm/minmax_element.hpp	/^      bool operator()(Iterator const& it1,$/;"	f	struct:boost::detail::less_over_iter	access:public	signature:(Iterator const& it1, Iterator const& it2) const
boost::first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_max_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
boost::first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_max_element(ForwardIter first, ForwardIter last, BinaryPredicate comp)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::first_min_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_min_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
boost::first_min_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_min_element(ForwardIter first, ForwardIter last, BinaryPredicate comp)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::first_min_first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_min_first_max_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
boost::first_min_first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_min_first_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::first_min_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_min_last_max_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
boost::first_min_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_min_last_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_max_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
boost::last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_max_element(ForwardIter first, ForwardIter last, BinaryPredicate comp)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::last_min_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_min_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
boost::last_min_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_min_element(ForwardIter first, ForwardIter last, BinaryPredicate comp)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::last_min_first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_min_first_max_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
boost::last_min_first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_min_first_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::last_min_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_min_last_max_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
boost::last_min_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_min_last_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
boost::minmax	/usr/include/boost/algorithm/minmax.hpp	/^  minmax(T const& a, T const& b) {$/;"	f	namespace:boost	signature:(T const& a, T const& b)
boost::minmax	/usr/include/boost/algorithm/minmax.hpp	/^  minmax(T const& a, T const& b, BinaryPredicate comp) {$/;"	f	namespace:boost	signature:(T const& a, T const& b, BinaryPredicate comp)
boost::minmax_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  minmax_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
boost::minmax_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  minmax_element(ForwardIter first, ForwardIter last, BinaryPredicate comp)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
bounded_copy	/usr/include/boost/algorithm/string/detail/util.hpp	/^            inline OutputIteratorT bounded_copy($/;"	f	namespace:boost::algorithm::detail	signature:( InputIteratorT First, InputIteratorT Last, OutputIteratorT DestFirst, OutputIteratorT DestLast )
boyer_moore	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        boyer_moore ( patIter first, patIter last ) $/;"	f	class:boost::algorithm::boyer_moore	access:public	signature:( patIter first, patIter last )
boyer_moore	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    class boyer_moore {$/;"	c	namespace:boost::algorithm
boyer_moore_horspool	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        boyer_moore_horspool ( patIter first, patIter last ) $/;"	f	class:boost::algorithm::boyer_moore_horspool	access:public	signature:( patIter first, patIter last )
boyer_moore_horspool	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    class boyer_moore_horspool {$/;"	c	namespace:boost::algorithm
boyer_moore_horspool_search	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    boyer_moore_horspool_search ( CorpusRange &corpus, const PatternRange &pattern )$/;"	f	namespace:boost::algorithm	signature:( CorpusRange &corpus, const PatternRange &pattern )
boyer_moore_horspool_search	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    boyer_moore_horspool_search ( CorpusRange &corpus, patIter pat_first, patIter pat_last )$/;"	f	namespace:boost::algorithm	signature:( CorpusRange &corpus, patIter pat_first, patIter pat_last )
boyer_moore_horspool_search	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    corpusIter boyer_moore_horspool_search ( $/;"	f	namespace:boost::algorithm	signature:( corpusIter corpus_first, corpusIter corpus_last, const PatternRange &pattern )
boyer_moore_horspool_search	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    corpusIter boyer_moore_horspool_search ( $/;"	f	namespace:boost::algorithm	signature:( corpusIter corpus_first, corpusIter corpus_last, patIter pat_first, patIter pat_last )
boyer_moore_search	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    boyer_moore_search ( CorpusRange &corpus, const PatternRange &pattern )$/;"	f	namespace:boost::algorithm	signature:( CorpusRange &corpus, const PatternRange &pattern )
boyer_moore_search	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    boyer_moore_search ( CorpusRange &corpus, patIter pat_first, patIter pat_last )$/;"	f	namespace:boost::algorithm	signature:( CorpusRange &corpus, patIter pat_first, patIter pat_last )
boyer_moore_search	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    corpusIter boyer_moore_search ( $/;"	f	namespace:boost::algorithm	signature:( corpusIter corpus_first, corpusIter corpus_last, const PatternRange &pattern )
boyer_moore_search	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    corpusIter boyer_moore_search ( $/;"	f	namespace:boost::algorithm	signature:( corpusIter corpus_first, corpusIter corpus_last, patIter pat_first, patIter pat_last )
build_skip_table	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        void build_skip_table ( patIter first, patIter last ) {$/;"	f	class:boost::algorithm::boyer_moore	access:private	signature:( patIter first, patIter last )
build_suffix_table	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        void build_suffix_table ( patIter pat_first, patIter pat_last ) {$/;"	f	class:boost::algorithm::boyer_moore	access:private	signature:( patIter pat_first, patIter pat_last )
char_type	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^                typedef BOOST_STRING_TYPENAME StringT::value_type char_type;$/;"	t	struct:boost::algorithm::detail::regex_formatF	access:private
check_find_result	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^            bool check_find_result(InputT&, FindResultT& FindResult)$/;"	f	namespace:boost::algorithm::detail	signature:(InputT&, FindResultT& FindResult)
clamp	/usr/include/boost/algorithm/clamp.hpp	/^  T const & clamp ( T const& val, $/;"	f	namespace:boost::algorithm	signature:( T const& val, typename boost::mpl::identity<T>::type const & lo, typename boost::mpl::identity<T>::type const & hi, Pred p )
clamp	/usr/include/boost/algorithm/clamp.hpp	/^  T const& clamp ( const T& val, $/;"	f	namespace:boost::algorithm	signature:( const T& val, typename boost::mpl::identity<T>::type const & lo, typename boost::mpl::identity<T>::type const & hi )
clamp_range	/usr/include/boost/algorithm/clamp.hpp	/^  OutputIterator clamp_range ( InputIterator first, InputIterator last, OutputIterator out,$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, OutputIterator out, typename std::iterator_traits<InputIterator>::value_type lo, typename std::iterator_traits<InputIterator>::value_type hi )
clamp_range	/usr/include/boost/algorithm/clamp.hpp	/^  OutputIterator clamp_range ( InputIterator first, InputIterator last, OutputIterator out,$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, OutputIterator out, typename std::iterator_traits<InputIterator>::value_type lo, typename std::iterator_traits<InputIterator>::value_type hi, Pred p )
clamp_range	/usr/include/boost/algorithm/clamp.hpp	/^  clamp_range ( const Range &r, OutputIterator out,$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator out, typename std::iterator_traits<typename boost::range_iterator<const Range>::type>::value_type lo, typename std::iterator_traits<typename boost::range_iterator<const Range>::type>::value_type hi )
clamp_range	/usr/include/boost/algorithm/clamp.hpp	/^  clamp_range ( const Range &r, OutputIterator out,$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator out, typename std::iterator_traits<typename boost::range_iterator<const Range>::type>::value_type lo, typename std::iterator_traits<typename boost::range_iterator<const Range>::type>::value_type hi, Pred p )
compute_bm_prefix	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        void compute_bm_prefix ( Iter pat_first, Iter pat_last, Container &prefix ) {$/;"	f	class:boost::algorithm::boyer_moore	access:private	signature:( Iter pat_first, Iter pat_last, Container &prefix )
const_formatF	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                const_formatF(const RangeT& Format) :$/;"	f	struct:boost::algorithm::detail::const_formatF	access:public	signature:(const RangeT& Format)
const_formatF	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^            struct const_formatF$/;"	s	namespace:boost::algorithm::detail
const_formatter	/usr/include/boost/algorithm/string/formatter.hpp	/^        const_formatter(const RangeT& Format)$/;"	f	namespace:boost::algorithm	signature:(const RangeT& Format)
const_iterator	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef BOOST_STRING_TYPENAME base_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
const_iterator	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef const value_type* const_iterator;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
const_reference	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef const value_type& const_reference;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
constraints	/usr/include/boost/algorithm/string/concept.hpp	/^            void constraints()$/;"	f	struct:boost::algorithm::FinderConcept	access:public	signature:()
constraints	/usr/include/boost/algorithm/string/concept.hpp	/^            void constraints()$/;"	f	struct:boost::algorithm::FormatterConcept	access:public	signature:()
contains	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool contains( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test)
contains	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool contains( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, PredicateT Comp)
copy_if	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^OutputIterator copy_if ( const Range &r, OutputIterator result, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator result, Predicate p )
copy_iterator_rangeF	/usr/include/boost/algorithm/string/detail/util.hpp	/^            struct copy_iterator_rangeF : $/;"	s	namespace:boost::algorithm::detail	inherits:std::unary_function
copy_to_storage	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^            inline void copy_to_storage($/;"	f	namespace:boost::algorithm::detail	signature:( StorageT& Storage, const WhatT& What )
copy_until	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^OutputIterator copy_until ( InputIterator first, InputIterator last, OutputIterator result, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, OutputIterator result, Predicate p )
copy_until	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^OutputIterator copy_until ( const Range &r, OutputIterator result, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator result, Predicate p )
copy_while	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^OutputIterator copy_while ( InputIterator first, InputIterator last, $/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, OutputIterator result, Predicate p )
copy_while	/usr/include/boost/algorithm/cxx11/copy_if.hpp	/^OutputIterator copy_while ( const Range &r, OutputIterator result, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator result, Predicate p )
decode_one	/usr/include/boost/algorithm/hex.hpp	/^    decode_one ( InputIterator &first, InputIterator last, OutputIterator out, EndPred pred ) {$/;"	f	namespace:boost::algorithm::detail	signature:( InputIterator &first, InputIterator last, OutputIterator out, EndPred pred )
dereference	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            const match_type& dereference() const$/;"	f	class:boost::algorithm::find_iterator	access:private	signature:() const
dereference	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            const match_type& dereference() const$/;"	f	class:boost::algorithm::split_iterator	access:private	signature:() const
detail	/usr/include/boost/algorithm/hex.hpp	/^namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/minmax_element.hpp	/^  namespace detail {  \/\/ common base for the overloads$/;"	n	namespace:boost
detail	/usr/include/boost/algorithm/minmax_element.hpp	/^  namespace detail {  \/\/ for obtaining a uniform version of minmax_element$/;"	n	namespace:boost
detail	/usr/include/boost/algorithm/minmax_element.hpp	/^  namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^namespace boost { namespace algorithm { namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/searching/detail/debugging.hpp	/^namespace boost { namespace algorithm { namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/classification.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/finder.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/predicate.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/trim.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/algorithm/string/detail/util.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
difference_type	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        typedef typename std::iterator_traits<patIter>::difference_type difference_type;$/;"	t	class:boost::algorithm::boyer_moore	access:private
difference_type	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        typedef typename std::iterator_traits<patIter>::difference_type difference_type;$/;"	t	class:boost::algorithm::boyer_moore_horspool	access:private
difference_type	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        typedef typename std::iterator_traits<patIter>::difference_type difference_type;$/;"	t	class:boost::algorithm::knuth_morris_pratt	access:private
difference_type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef BOOST_STRING_TYPENAME base_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
difference_type	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
dissect_formatF	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                dissect_formatF(FinderT Finder) :$/;"	f	struct:boost::algorithm::detail::dissect_formatF	access:public	signature:(FinderT Finder)
dissect_formatF	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^            struct dissect_formatF$/;"	s	namespace:boost::algorithm::detail
dissect_formatter	/usr/include/boost/algorithm/string/formatter.hpp	/^        dissect_formatter(const FinderT& Finder)$/;"	f	namespace:boost::algorithm	signature:(const FinderT& Finder)
do_find	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                match_type do_find( $/;"	f	class:boost::algorithm::detail::find_iterator_base	access:protected	signature:( input_iterator_type Begin, input_iterator_type End ) const
do_search	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        corpusIter do_search ( corpusIter corpus_first, corpusIter corpus_last ) const {$/;"	f	class:boost::algorithm::boyer_moore	access:private	signature:( corpusIter corpus_first, corpusIter corpus_last ) const
do_search	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        corpusIter do_search ( corpusIter corpus_first, corpusIter corpus_last ) const {$/;"	f	class:boost::algorithm::boyer_moore_horspool	access:private	signature:( corpusIter corpus_first, corpusIter corpus_last ) const
do_search	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        corpusIter do_search ( corpusIter corpus_first, corpusIter corpus_last, $/;"	f	class:boost::algorithm::knuth_morris_pratt	access:private	signature:( corpusIter corpus_first, corpusIter corpus_last, difference_type k_corpus_length ) const
empty	/usr/include/boost/algorithm/string/detail/util.hpp	/^                bool empty() const$/;"	f	struct:boost::algorithm::detail::empty_container	access:public	signature:() const
empty_container	/usr/include/boost/algorithm/string/detail/util.hpp	/^            struct empty_container $/;"	s	namespace:boost::algorithm::detail
empty_formatF	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^            struct empty_formatF$/;"	s	namespace:boost::algorithm::detail
empty_formatter	/usr/include/boost/algorithm/string/formatter.hpp	/^        empty_formatter(const RangeT&)$/;"	f	namespace:boost::algorithm	signature:(const RangeT&)
encode_one	/usr/include/boost/algorithm/hex.hpp	/^    OutputIterator encode_one ( T val, OutputIterator out ) {$/;"	f	namespace:boost::algorithm::detail	signature:( T val, OutputIterator out )
end	/usr/include/boost/algorithm/string/detail/util.hpp	/^                const_iterator end() const$/;"	f	struct:boost::algorithm::detail::empty_container	access:public	signature:() const
ends_with	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool ends_with( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test)
ends_with	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool ends_with( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, PredicateT Comp)
ends_with_iter_select	/usr/include/boost/algorithm/string/detail/predicate.hpp	/^            inline bool ends_with_iter_select( $/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIterator1T Begin, ForwardIterator1T End, ForwardIterator2T SubBegin, ForwardIterator2T SubEnd, PredicateT Comp, std::bidirectional_iterator_tag)
ends_with_iter_select	/usr/include/boost/algorithm/string/detail/predicate.hpp	/^            inline bool ends_with_iter_select( $/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIterator1T Begin, ForwardIterator1T End, ForwardIterator2T SubBegin, ForwardIterator2T SubEnd, PredicateT Comp, std::forward_iterator_tag)
eof	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            bool eof() const$/;"	f	class:boost::algorithm::find_iterator	access:public	signature:() const
eof	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            bool eof() const$/;"	f	class:boost::algorithm::split_iterator	access:public	signature:() const
equal	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            bool equal( const find_iterator& Other ) const$/;"	f	class:boost::algorithm::find_iterator	access:private	signature:( const find_iterator& Other ) const
equal	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            bool equal( const split_iterator& Other ) const$/;"	f	class:boost::algorithm::split_iterator	access:private	signature:( const split_iterator& Other ) const
equals	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool equals( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test)
equals	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool equals( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, PredicateT Comp)
erase	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            inline typename InputT::iterator erase($/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator From, BOOST_STRING_TYPENAME InputT::iterator To )
erase_all	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_all( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search )
erase_all_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_all_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search )
erase_all_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_all_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search )
erase_all_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        inline void erase_all_regex( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
erase_all_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline OutputIteratorT erase_all_regex_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
erase_all_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline SequenceT erase_all_regex_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
erase_first	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_first( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search )
erase_first_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_first_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search )
erase_first_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_first_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search )
erase_head	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_head( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, int N )
erase_head_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_head_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, int N )
erase_head_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_head_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, int N )
erase_last	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_last( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search )
erase_last_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_last_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search )
erase_last_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_last_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search )
erase_nth	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_nth( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search, int Nth )
erase_nth_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_nth_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, int Nth )
erase_nth_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_nth_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search, int Nth )
erase_range	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_range( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const iterator_range< BOOST_STRING_TYPENAME range_iterator<SequenceT>::type>& SearchRange )
erase_range_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_range_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const iterator_range< BOOST_STRING_TYPENAME range_const_iterator<RangeT>::type>& SearchRange )
erase_range_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_range_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const iterator_range< BOOST_STRING_TYPENAME range_const_iterator<SequenceT>::type>& SearchRange )
erase_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        inline void erase_regex( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
erase_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline OutputIteratorT erase_regex_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
erase_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline SequenceT erase_regex_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
erase_tail	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void erase_tail( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, int N )
erase_tail_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT erase_tail_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, int N )
erase_tail_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT erase_tail_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, int N )
find	/usr/include/boost/algorithm/string/find.hpp	/^        find( $/;"	f	namespace:boost::algorithm	signature:( RangeT& Input, const FinderT& Finder)
find_all	/usr/include/boost/algorithm/string/split.hpp	/^        inline SequenceSequenceT& find_all($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, Range1T& Input, const Range2T& Search)
find_all_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        inline SequenceSequenceT& find_all_regex($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, const RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
find_backward	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                find_backward($/;"	f	struct:boost::algorithm::detail::nth_finderF	access:private	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N) const
find_first	/usr/include/boost/algorithm/string/find.hpp	/^        find_first( $/;"	f	namespace:boost::algorithm	signature:( Range1T& Input, const Range2T& Search)
find_format	/usr/include/boost/algorithm/string/find_format.hpp	/^        inline void find_format( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, FinderT Finder, FormatterT Formatter)
find_format_all	/usr/include/boost/algorithm/string/find_format.hpp	/^        inline void find_format_all( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, FinderT Finder, FormatterT Formatter )
find_format_all_copy	/usr/include/boost/algorithm/string/find_format.hpp	/^        inline OutputIteratorT find_format_all_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, FinderT Finder, FormatterT Formatter)
find_format_all_copy	/usr/include/boost/algorithm/string/find_format.hpp	/^        inline SequenceT find_format_all_copy($/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, FinderT Finder, FormatterT Formatter )
find_format_all_copy_impl	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^            inline InputT find_format_all_copy_impl($/;"	f	namespace:boost::algorithm::detail	signature:( const InputT& Input, FinderT Finder, FormatterT Formatter, const FindResultT& FindResult)
find_format_all_copy_impl	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^            inline OutputIteratorT find_format_all_copy_impl($/;"	f	namespace:boost::algorithm::detail	signature:( OutputIteratorT Output, const InputT& Input, FinderT Finder, FormatterT Formatter, const FindResultT& FindResult )
find_format_all_copy_impl2	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^            inline InputT find_format_all_copy_impl2($/;"	f	namespace:boost::algorithm::detail	signature:( const InputT& Input, FinderT Finder, FormatterT Formatter, const FindResultT& FindResult, const FormatResultT& FormatResult)
find_format_all_copy_impl2	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^            inline OutputIteratorT find_format_all_copy_impl2($/;"	f	namespace:boost::algorithm::detail	signature:( OutputIteratorT Output, const InputT& Input, FinderT Finder, FormatterT Formatter, const FindResultT& FindResult, const FormatResultT& FormatResult )
find_format_all_impl	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^            inline void find_format_all_impl( $/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, FinderT Finder, FormatterT Formatter, FindResultT FindResult)
find_format_all_impl2	/usr/include/boost/algorithm/string/detail/find_format_all.hpp	/^            inline void find_format_all_impl2( $/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, FinderT Finder, FormatterT Formatter, FindResultT FindResult, FormatResultT FormatResult)
find_format_copy	/usr/include/boost/algorithm/string/find_format.hpp	/^        inline OutputIteratorT find_format_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, FinderT Finder, FormatterT Formatter )
find_format_copy	/usr/include/boost/algorithm/string/find_format.hpp	/^        inline SequenceT find_format_copy($/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, FinderT Finder, FormatterT Formatter )
find_format_copy_impl	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^            inline InputT find_format_copy_impl($/;"	f	namespace:boost::algorithm::detail	signature:( const InputT& Input, FormatterT Formatter, const FindResultT& FindResult)
find_format_copy_impl	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^            inline OutputIteratorT find_format_copy_impl($/;"	f	namespace:boost::algorithm::detail	signature:( OutputIteratorT Output, const InputT& Input, FormatterT Formatter, const FindResultT& FindResult )
find_format_copy_impl2	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^            inline InputT find_format_copy_impl2($/;"	f	namespace:boost::algorithm::detail	signature:( const InputT& Input, FormatterT Formatter, const FindResultT& FindResult, const FormatResultT& FormatResult)
find_format_copy_impl2	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^            inline OutputIteratorT find_format_copy_impl2($/;"	f	namespace:boost::algorithm::detail	signature:( OutputIteratorT Output, const InputT& Input, FormatterT Formatter, const FindResultT& FindResult, const FormatResultT& FormatResult )
find_format_impl	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^            inline void find_format_impl( $/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, FormatterT Formatter, const FindResultT& FindResult)
find_format_impl2	/usr/include/boost/algorithm/string/detail/find_format.hpp	/^            inline void find_format_impl2( $/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, FormatterT Formatter, const FindResultT& FindResult, const FormatResultT& FormatResult)
find_format_store	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                find_format_store( $/;"	f	class:boost::algorithm::detail::find_format_store	access:public	signature:( const base_type& FindResult, const format_result_type& FormatResult, const formatter_type& Formatter )
find_format_store	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^            class find_format_store : $/;"	c	namespace:boost::algorithm::detail	inherits:iterator_range
find_forward	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                find_forward($/;"	f	struct:boost::algorithm::detail::nth_finderF	access:private	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N) const
find_head	/usr/include/boost/algorithm/string/find.hpp	/^        find_head( $/;"	f	namespace:boost::algorithm	signature:( RangeT& Input, int N)
find_head_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_head_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N )
find_head_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_head_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N, std::forward_iterator_tag )
find_head_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_head_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N, std::random_access_iterator_tag )
find_if_not	/usr/include/boost/algorithm/cxx11/find_if_not.hpp	/^typename boost::range_iterator<const Range>::type find_if_not ( const Range &r, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, Predicate p )
find_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            find_iterator( const find_iterator& Other ) :$/;"	f	class:boost::algorithm::find_iterator	access:public	signature:( const find_iterator& Other )
find_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            find_iterator($/;"	f	class:boost::algorithm::find_iterator	access:public	signature:( IteratorT Begin, IteratorT End, FinderT Finder )
find_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            find_iterator($/;"	f	class:boost::algorithm::find_iterator	access:public	signature:( RangeT& Col, FinderT Finder )
find_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            find_iterator() {}$/;"	f	class:boost::algorithm::find_iterator	access:public	signature:()
find_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^        class find_iterator : $/;"	c	namespace:boost::algorithm	inherits:iterator_facade,detail::find_iterator_base
find_iterator_base	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                find_iterator_base( FinderT Finder, int ) :$/;"	f	class:boost::algorithm::detail::find_iterator_base	access:protected	signature:( FinderT Finder, int )
find_iterator_base	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                find_iterator_base( const find_iterator_base& Other ) :$/;"	f	class:boost::algorithm::detail::find_iterator_base	access:protected	signature:( const find_iterator_base& Other )
find_iterator_base	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                find_iterator_base() {};$/;"	f	class:boost::algorithm::detail::find_iterator_base	access:protected	signature:()
find_iterator_base	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^            class find_iterator_base$/;"	c	namespace:boost::algorithm::detail
find_last	/usr/include/boost/algorithm/string/find.hpp	/^        find_last( $/;"	f	namespace:boost::algorithm	signature:( Range1T& Input, const Range2T& Search)
find_nth	/usr/include/boost/algorithm/string/find.hpp	/^        find_nth( $/;"	f	namespace:boost::algorithm	signature:( Range1T& Input, const Range2T& Search, int Nth)
find_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        find_regex( $/;"	f	namespace:boost::algorithm	signature:( RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
find_regexF	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                find_regexF( regex_reference_type Rx, match_flag_type MatchFlags = match_default ) : $/;"	f	struct:boost::algorithm::detail::find_regexF	access:public	signature:( regex_reference_type Rx, match_flag_type MatchFlags = match_default )
find_regexF	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^            struct find_regexF$/;"	s	namespace:boost::algorithm::detail
find_tail	/usr/include/boost/algorithm/string/find.hpp	/^        find_tail( $/;"	f	namespace:boost::algorithm	signature:( RangeT& Input, int N)
find_tail_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_tail_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N )
find_tail_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_tail_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N, std::bidirectional_iterator_tag )
find_tail_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_tail_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N, std::forward_iterator_tag )
find_tail_impl	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            find_tail_impl($/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT Begin, ForwardIteratorT End, unsigned int N, std::random_access_iterator_tag )
find_token	/usr/include/boost/algorithm/string/find.hpp	/^        find_token( $/;"	f	namespace:boost::algorithm	signature:( RangeT& Input, PredicateT Pred, token_compress_mode_type eCompress=token_compress_off)
finder_type	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                    input_iterator_type> finder_type;$/;"	t	class:boost::algorithm::detail::find_iterator_base	access:protected
findit	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                findit($/;"	f	struct:boost::algorithm::detail::last_finderF	access:private	signature:( ForwardIteratorT Begin, ForwardIteratorT End, std::bidirectional_iterator_tag ) const
findit	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                findit($/;"	f	struct:boost::algorithm::detail::last_finderF	access:private	signature:( ForwardIteratorT Begin, ForwardIteratorT End, std::forward_iterator_tag ) const
first_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        first_finder( $/;"	f	namespace:boost::algorithm	signature:( const RangeT& Search, PredicateT Comp )
first_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        first_finder( const RangeT& Search )$/;"	f	namespace:boost::algorithm	signature:( const RangeT& Search )
first_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                first_finderF( const SearchT& Search, PredicateT Comp ) :$/;"	f	struct:boost::algorithm::detail::first_finderF	access:public	signature:( const SearchT& Search, PredicateT Comp )
first_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                first_finderF($/;"	f	struct:boost::algorithm::detail::first_finderF	access:public	signature:( search_iterator_type SearchBegin, search_iterator_type SearchEnd, PredicateT Comp )
first_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct first_finderF$/;"	s	namespace:boost::algorithm::detail
first_finder_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                    PredicateT> first_finder_type;$/;"	t	struct:boost::algorithm::detail::last_finderF	access:public
first_finder_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                    PredicateT> first_finder_type;$/;"	t	struct:boost::algorithm::detail::nth_finderF	access:public
first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_max_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_max_element(ForwardIter first, ForwardIter last, BinaryPredicate comp)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
first_min_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_min_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
first_min_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_min_element(ForwardIter first, ForwardIter last, BinaryPredicate comp)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
first_min_first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_min_first_max_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
first_min_first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_min_first_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
first_min_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_min_last_max_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
first_min_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  first_min_last_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
format_iterator	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                    range_const_iterator<RangeT>::type format_iterator;$/;"	t	struct:boost::algorithm::detail::const_formatF	access:private
format_result	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                const format_result_type& format_result()$/;"	f	class:boost::algorithm::detail::find_format_store	access:public	signature:()
format_result_type	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                typedef FormatResultT format_result_type;$/;"	t	class:boost::algorithm::detail::find_format_store	access:public
formatter_type	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                typedef FormatterT  formatter_type;$/;"	t	class:boost::algorithm::detail::find_format_store	access:public
has_const_time_erase	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        class has_const_time_erase$/;"	c	namespace:boost::algorithm
has_const_time_erase_tester	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        no_type has_const_time_erase_tester(...);$/;"	p	namespace:boost::algorithm	signature:(....)
has_const_time_erase_tester	/usr/include/boost/algorithm/string/std/list_traits.hpp	/^        yes_type has_const_time_erase_tester( const ::std::list<T,AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const ::std::list<T,AllocT>* )
has_const_time_erase_tester	/usr/include/boost/algorithm/string/std/rope_traits.hpp	/^        yes_type has_const_time_erase_tester( const std::rope<T, TraitsT, AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const std::rope<T, TraitsT, AllocT>* )
has_const_time_erase_tester	/usr/include/boost/algorithm/string/std/slist_traits.hpp	/^        yes_type has_const_time_erase_tester( const BOOST_STD_EXTENSION_NAMESPACE::slist<T,AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const BOOST_STD_EXTENSION_NAMESPACE::slist<T,AllocT>* )
has_const_time_insert	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        class has_const_time_insert$/;"	c	namespace:boost::algorithm
has_const_time_insert_tester	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        no_type has_const_time_insert_tester(...);$/;"	p	namespace:boost::algorithm	signature:(....)
has_const_time_insert_tester	/usr/include/boost/algorithm/string/std/list_traits.hpp	/^        yes_type has_const_time_insert_tester( const ::std::list<T,AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const ::std::list<T,AllocT>* )
has_const_time_insert_tester	/usr/include/boost/algorithm/string/std/rope_traits.hpp	/^        yes_type has_const_time_insert_tester( const std::rope<T, TraitsT, AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const std::rope<T, TraitsT, AllocT>* )
has_const_time_insert_tester	/usr/include/boost/algorithm/string/std/slist_traits.hpp	/^        yes_type has_const_time_insert_tester( const BOOST_STD_EXTENSION_NAMESPACE::slist<T,AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const BOOST_STD_EXTENSION_NAMESPACE::slist<T,AllocT>* )
has_native_replace	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        class has_native_replace$/;"	c	namespace:boost::algorithm
has_native_replace_tester	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        no_type has_native_replace_tester(...);$/;"	p	namespace:boost::algorithm	signature:(....)
has_native_replace_tester	/usr/include/boost/algorithm/string/std/rope_traits.hpp	/^        yes_type has_native_replace_tester( const std::rope<T, TraitsT, AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const std::rope<T, TraitsT, AllocT>* )
has_native_replace_tester	/usr/include/boost/algorithm/string/std/string_traits.hpp	/^        yes_type has_native_replace_tester( const std::basic_string<T, TraitsT, AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const std::basic_string<T, TraitsT, AllocT>* )
has_stable_iterators	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        class has_stable_iterators$/;"	c	namespace:boost::algorithm
has_stable_iterators_tester	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^        no_type has_stable_iterators_tester(...);$/;"	p	namespace:boost::algorithm	signature:(....)
has_stable_iterators_tester	/usr/include/boost/algorithm/string/std/list_traits.hpp	/^        yes_type has_stable_iterators_tester( const ::std::list<T,AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const ::std::list<T,AllocT>* )
has_stable_iterators_tester	/usr/include/boost/algorithm/string/std/rope_traits.hpp	/^        yes_type has_stable_iterators_tester( const std::rope<T, TraitsT, AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const std::rope<T, TraitsT, AllocT>* )
has_stable_iterators_tester	/usr/include/boost/algorithm/string/std/slist_traits.hpp	/^        yes_type has_stable_iterators_tester( const BOOST_STD_EXTENSION_NAMESPACE::slist<T,AllocT>* );$/;"	p	namespace:boost::algorithm	signature:( const BOOST_STD_EXTENSION_NAMESPACE::slist<T,AllocT>* )
head_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        head_finder( int N )$/;"	f	namespace:boost::algorithm	signature:( int N )
head_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                head_finderF( int N ) : m_N(N) {}$/;"	f	struct:boost::algorithm::detail::head_finderF	access:public	signature:( int N )
head_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct head_finderF$/;"	s	namespace:boost::algorithm::detail
hex	/usr/include/boost/algorithm/hex.hpp	/^String hex ( const String &input ) {$/;"	f	namespace:boost::algorithm	signature:( const String &input )
hex	/usr/include/boost/algorithm/hex.hpp	/^hex ( InputIterator first, InputIterator last, OutputIterator out ) {$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, OutputIterator out )
hex	/usr/include/boost/algorithm/hex.hpp	/^hex ( const Range &r, OutputIterator out ) {$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator out )
hex	/usr/include/boost/algorithm/hex.hpp	/^hex ( const T *ptr, OutputIterator out ) {$/;"	f	namespace:boost::algorithm	signature:( const T *ptr, OutputIterator out )
hex_char_to_int	/usr/include/boost/algorithm/hex.hpp	/^    unsigned hex_char_to_int ( char c ) {$/;"	f	namespace:boost::algorithm::detail::__anon1	signature:( char c )
hex_decode_error	/usr/include/boost/algorithm/hex.hpp	/^struct hex_decode_error : virtual boost::exception, virtual std::exception {};$/;"	s	namespace:boost::algorithm	inherits:boost::exception,std::exception
hex_iterator_traits	/usr/include/boost/algorithm/hex.hpp	/^    struct hex_iterator_traits {$/;"	s	namespace:boost::algorithm::detail
hex_iterator_traits	/usr/include/boost/algorithm/hex.hpp	/^    struct hex_iterator_traits< std::back_insert_iterator<Container> > {$/;"	s	namespace:boost::algorithm::detail
hex_iterator_traits	/usr/include/boost/algorithm/hex.hpp	/^    struct hex_iterator_traits< std::front_insert_iterator<Container> > {$/;"	s	namespace:boost::algorithm::detail
hex_iterator_traits	/usr/include/boost/algorithm/hex.hpp	/^    struct hex_iterator_traits< std::insert_iterator<Container> > {$/;"	s	namespace:boost::algorithm::detail
hex_iterator_traits	/usr/include/boost/algorithm/hex.hpp	/^    struct hex_iterator_traits< std::ostream_iterator<T, charType, traits> > {$/;"	s	namespace:boost::algorithm::detail
i	/usr/include/boost/algorithm/string/concept.hpp	/^            IteratorT i;$/;"	m	struct:boost::algorithm::FinderConcept	access:private
i	/usr/include/boost/algorithm/string/concept.hpp	/^            IteratorT i;$/;"	m	struct:boost::algorithm::FormatterConcept	access:private
icontains	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool icontains( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, const std::locale& Loc=std::locale())
identity_formatF	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^            struct identity_formatF$/;"	s	namespace:boost::algorithm::detail
identity_formatter	/usr/include/boost/algorithm/string/formatter.hpp	/^        identity_formatter()$/;"	f	namespace:boost::algorithm	signature:()
iends_with	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool iends_with( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, const std::locale& Loc=std::locale())
iequals	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool iequals( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, const std::locale& Loc=std::locale())
ierase_all	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void ierase_all( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search, const std::locale& Loc=std::locale() )
ierase_all_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT ierase_all_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const std::locale& Loc=std::locale() )
ierase_all_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT ierase_all_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search, const std::locale& Loc=std::locale() )
ierase_first	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void ierase_first( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search, const std::locale& Loc=std::locale() )
ierase_first_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT ierase_first_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const std::locale& Loc=std::locale() )
ierase_first_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT ierase_first_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search, const std::locale& Loc=std::locale() )
ierase_last	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void ierase_last( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search, const std::locale& Loc=std::locale() )
ierase_last_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT ierase_last_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const std::locale& Loc=std::locale() )
ierase_last_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT ierase_last_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search, const std::locale& Loc=std::locale() )
ierase_nth	/usr/include/boost/algorithm/string/erase.hpp	/^        inline void ierase_nth( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const RangeT& Search, int Nth, const std::locale& Loc=std::locale() )
ierase_nth_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline OutputIteratorT ierase_nth_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, int Nth, const std::locale& Loc=std::locale() )
ierase_nth_copy	/usr/include/boost/algorithm/string/erase.hpp	/^        inline SequenceT ierase_nth_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const RangeT& Search, int Nth, const std::locale& Loc=std::locale() )
ifind_all	/usr/include/boost/algorithm/string/split.hpp	/^        inline SequenceSequenceT& ifind_all($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, Range1T& Input, const Range2T& Search, const std::locale& Loc=std::locale() )
ifind_first	/usr/include/boost/algorithm/string/find.hpp	/^        ifind_first( $/;"	f	namespace:boost::algorithm	signature:( Range1T& Input, const Range2T& Search, const std::locale& Loc=std::locale())
ifind_last	/usr/include/boost/algorithm/string/find.hpp	/^        ifind_last( $/;"	f	namespace:boost::algorithm	signature:( Range1T& Input, const Range2T& Search, const std::locale& Loc=std::locale())
ifind_nth	/usr/include/boost/algorithm/string/find.hpp	/^        ifind_nth( $/;"	f	namespace:boost::algorithm	signature:( Range1T& Input, const Range2T& Search, int Nth, const std::locale& Loc=std::locale())
ilexicographical_compare	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool ilexicographical_compare($/;"	f	namespace:boost::algorithm	signature:( const Range1T& Arg1, const Range2T& Arg2, const std::locale& Loc=std::locale())
increment	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            void increment()$/;"	f	class:boost::algorithm::find_iterator	access:private	signature:()
increment	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            void increment()$/;"	f	class:boost::algorithm::split_iterator	access:private	signature:()
init_skip_table	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        void init_skip_table ( patIter first, patIter last ) {$/;"	f	class:boost::algorithm::knuth_morris_pratt	access:private	signature:( patIter first, patIter last )
input_iterator_type	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                typedef IteratorT input_iterator_type;$/;"	t	class:boost::algorithm::detail::find_iterator_base	access:protected
input_iterator_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                typedef ForwardIterator1T input_iterator_type;$/;"	t	struct:boost::algorithm::detail::range_finderF	access:public
input_iterator_type	/usr/include/boost/algorithm/string/find_iterator.hpp	/^                base_type::input_iterator_type input_iterator_type;$/;"	t	class:boost::algorithm::find_iterator	access:private
input_iterator_type	/usr/include/boost/algorithm/string/find_iterator.hpp	/^                base_type::input_iterator_type input_iterator_type;$/;"	t	class:boost::algorithm::split_iterator	access:private
insert	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        void insert ( key_type key, value_type val ) {$/;"	f	class:boost::algorithm::detail::skip_table	access:public	signature:( key_type key, value_type val )
insert	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            inline void insert($/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator At, ForwardIteratorT Begin, ForwardIteratorT End )
insert	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            inline void insert($/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator At, const InsertT& Insert )
iota	/usr/include/boost/algorithm/cxx11/iota.hpp	/^void iota ( Range &r, T value )$/;"	f	namespace:boost::algorithm	signature:( Range &r, T value )
iota_n	/usr/include/boost/algorithm/cxx11/iota.hpp	/^OutputIterator iota_n ( OutputIterator out, T value, std::size_t n )$/;"	f	namespace:boost::algorithm	signature:( OutputIterator out, T value, std::size_t n )
ireplace_all	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void ireplace_all( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, const Range2T& Format, const std::locale& Loc=std::locale() )
ireplace_all_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT ireplace_all_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const Range3T& Format, const std::locale& Loc=std::locale() )
ireplace_all_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT ireplace_all_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, const Range2T& Format, const std::locale& Loc=std::locale() )
ireplace_first	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void ireplace_first( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, const Range2T& Format, const std::locale& Loc=std::locale() )
ireplace_first_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT ireplace_first_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const Range3T& Format, const std::locale& Loc=std::locale() )
ireplace_first_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT ireplace_first_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range2T& Search, const Range1T& Format, const std::locale& Loc=std::locale() )
ireplace_last	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void ireplace_last( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, const Range2T& Format, const std::locale& Loc=std::locale() )
ireplace_last_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT ireplace_last_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const Range3T& Format, const std::locale& Loc=std::locale() )
ireplace_last_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT ireplace_last_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, const Range2T& Format, const std::locale& Loc=std::locale() )
ireplace_nth	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void ireplace_nth( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, int Nth, const Range2T& Format, const std::locale& Loc=std::locale() )
ireplace_nth_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT ireplace_nth_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, int Nth, const Range3T& Format, const std::locale& Loc=std::locale() )
ireplace_nth_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT ireplace_nth_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, int Nth, const Range2T& Format, const std::locale& Loc=std::locale() )
is_alnum	/usr/include/boost/algorithm/string/classification.hpp	/^        is_alnum(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
is_alpha	/usr/include/boost/algorithm/string/classification.hpp	/^        is_alpha(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
is_any_of	/usr/include/boost/algorithm/string/classification.hpp	/^        is_any_of( const RangeT& Set )$/;"	f	namespace:boost::algorithm	signature:( const RangeT& Set )
is_any_ofF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                is_any_ofF( const RangeT& Range ) : m_Size(0)$/;"	f	struct:boost::algorithm::detail::is_any_ofF	access:public	signature:( const RangeT& Range )
is_any_ofF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                is_any_ofF(const is_any_ofF& Other) : m_Size(Other.m_Size)$/;"	f	struct:boost::algorithm::detail::is_any_ofF	access:public	signature:(const is_any_ofF& Other)
is_any_ofF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^            struct is_any_ofF :$/;"	s	namespace:boost::algorithm::detail	inherits:predicate_facade
is_classified	/usr/include/boost/algorithm/string/classification.hpp	/^        is_classified(std::ctype_base::mask Type, const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(std::ctype_base::mask Type, const std::locale& Loc=std::locale())
is_classifiedF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                is_classifiedF(std::ctype_base::mask Type, std::locale const & Loc = std::locale()) :$/;"	f	struct:boost::algorithm::detail::is_classifiedF	access:public	signature:(std::ctype_base::mask Type, std::locale const & Loc = std::locale())
is_classifiedF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^            struct is_classifiedF :$/;"	s	namespace:boost::algorithm::detail	inherits:predicate_facade
is_cntrl	/usr/include/boost/algorithm/string/classification.hpp	/^        is_cntrl(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
is_decreasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_decreasing ( ForwardIterator first, ForwardIterator last )$/;"	f	namespace:boost::algorithm	signature:( ForwardIterator first, ForwardIterator last )
is_decreasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_decreasing ( const R &range )$/;"	f	namespace:boost::algorithm	signature:( const R &range )
is_digit	/usr/include/boost/algorithm/string/classification.hpp	/^        is_digit(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
is_equal	/usr/include/boost/algorithm/string/compare.hpp	/^        struct is_equal$/;"	s	namespace:boost::algorithm
is_from_range	/usr/include/boost/algorithm/string/classification.hpp	/^        inline detail::is_from_rangeF<CharT> is_from_range(CharT From, CharT To)$/;"	f	namespace:boost::algorithm	signature:(CharT From, CharT To)
is_from_rangeF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                is_from_rangeF( CharT From, CharT To ) : m_From(From), m_To(To) {}$/;"	f	struct:boost::algorithm::detail::is_from_rangeF	access:public	signature:( CharT From, CharT To )
is_from_rangeF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^            struct is_from_rangeF :$/;"	s	namespace:boost::algorithm::detail	inherits:predicate_facade
is_graph	/usr/include/boost/algorithm/string/classification.hpp	/^        is_graph(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
is_iequal	/usr/include/boost/algorithm/string/compare.hpp	/^            is_iequal( const std::locale& Loc=std::locale() ) :$/;"	f	struct:boost::algorithm::is_iequal	access:public	signature:( const std::locale& Loc=std::locale() )
is_iequal	/usr/include/boost/algorithm/string/compare.hpp	/^        struct is_iequal$/;"	s	namespace:boost::algorithm
is_iless	/usr/include/boost/algorithm/string/compare.hpp	/^            is_iless( const std::locale& Loc=std::locale() ) :$/;"	f	struct:boost::algorithm::is_iless	access:public	signature:( const std::locale& Loc=std::locale() )
is_iless	/usr/include/boost/algorithm/string/compare.hpp	/^        struct is_iless$/;"	s	namespace:boost::algorithm
is_increasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_increasing ( ForwardIterator first, ForwardIterator last )$/;"	f	namespace:boost::algorithm	signature:( ForwardIterator first, ForwardIterator last )
is_increasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_increasing ( const R &range )$/;"	f	namespace:boost::algorithm	signature:( const R &range )
is_less	/usr/include/boost/algorithm/string/compare.hpp	/^        struct is_less$/;"	s	namespace:boost::algorithm
is_lower	/usr/include/boost/algorithm/string/classification.hpp	/^        is_lower(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
is_not_greater	/usr/include/boost/algorithm/string/compare.hpp	/^        struct is_not_greater$/;"	s	namespace:boost::algorithm
is_not_igreater	/usr/include/boost/algorithm/string/compare.hpp	/^            is_not_igreater( const std::locale& Loc=std::locale() ) :$/;"	f	struct:boost::algorithm::is_not_igreater	access:public	signature:( const std::locale& Loc=std::locale() )
is_not_igreater	/usr/include/boost/algorithm/string/compare.hpp	/^        struct is_not_igreater$/;"	s	namespace:boost::algorithm
is_null	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                bool is_null() const$/;"	f	class:boost::algorithm::detail::find_iterator_base	access:protected	signature:() const
is_partitioned	/usr/include/boost/algorithm/cxx11/is_partitioned.hpp	/^bool is_partitioned ( const Range &r, UnaryPredicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, UnaryPredicate p )
is_permutation	/usr/include/boost/algorithm/cxx11/is_permutation.hpp	/^bool is_permutation ( const Range &r, ForwardIterator first2 )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, ForwardIterator first2 )
is_permutation	/usr/include/boost/algorithm/cxx11/is_permutation.hpp	/^is_permutation ( const Range &r, ForwardIterator first2, BinaryPredicate pred )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, ForwardIterator first2, BinaryPredicate pred )
is_print	/usr/include/boost/algorithm/string/classification.hpp	/^        is_print(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
is_punct	/usr/include/boost/algorithm/string/classification.hpp	/^        is_punct(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
is_sorted	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_sorted ( const R &range )$/;"	f	namespace:boost::algorithm	signature:( const R &range )
is_sorted	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    is_sorted ( const R &range, Pred p )$/;"	f	namespace:boost::algorithm	signature:( const R &range, Pred p )
is_sorted_until	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    >::type is_sorted_until ( const R &range, Pred p )$/;"	f	namespace:boost::algorithm	signature:( const R &range, Pred p )
is_sorted_until	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    typename boost::range_iterator<const R>::type is_sorted_until ( const R &range )$/;"	f	namespace:boost::algorithm	signature:( const R &range )
is_space	/usr/include/boost/algorithm/string/classification.hpp	/^        is_space(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
is_strictly_decreasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_strictly_decreasing ( ForwardIterator first, ForwardIterator last )$/;"	f	namespace:boost::algorithm	signature:( ForwardIterator first, ForwardIterator last )
is_strictly_decreasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_strictly_decreasing ( const R &range )$/;"	f	namespace:boost::algorithm	signature:( const R &range )
is_strictly_increasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_strictly_increasing ( ForwardIterator first, ForwardIterator last )$/;"	f	namespace:boost::algorithm	signature:( ForwardIterator first, ForwardIterator last )
is_strictly_increasing	/usr/include/boost/algorithm/cxx11/is_sorted.hpp	/^    bool is_strictly_increasing ( const R &range )$/;"	f	namespace:boost::algorithm	signature:( const R &range )
is_upper	/usr/include/boost/algorithm/string/classification.hpp	/^        is_upper(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
is_xdigit	/usr/include/boost/algorithm/string/classification.hpp	/^        is_xdigit(const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const std::locale& Loc=std::locale())
istarts_with	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool istarts_with( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, const std::locale& Loc=std::locale())
iter_end	/usr/include/boost/algorithm/hex.hpp	/^    bool iter_end ( Iterator current, Iterator last ) { return current == last; }$/;"	f	namespace:boost::algorithm::detail	signature:( Iterator current, Iterator last )
iter_find	/usr/include/boost/algorithm/string/iter_find.hpp	/^        iter_find($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, RangeT& Input, FinderT Finder )
iter_split	/usr/include/boost/algorithm/string/iter_find.hpp	/^        iter_split($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, RangeT& Input, FinderT Finder )
iterator	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef BOOST_STRING_TYPENAME base_type::iterator iterator;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
iterator	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef const value_type* iterator;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
join	/usr/include/boost/algorithm/string/join.hpp	/^        join($/;"	f	namespace:boost::algorithm	signature:( const SequenceSequenceT& Input, const Range1T& Separator)
join_if	/usr/include/boost/algorithm/string/join.hpp	/^        join_if($/;"	f	namespace:boost::algorithm	signature:( const SequenceSequenceT& Input, const Range1T& Separator, PredicateT Pred)
join_if	/usr/include/boost/algorithm/string/regex.hpp	/^        join_if($/;"	f	namespace:boost::algorithm	signature:( const SequenceSequenceT& Input, const Range1T& Separator, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
join_if_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        join_if_regex($/;"	f	namespace:boost::algorithm	signature:( const SequenceSequenceT& Input, const Range1T& Separator, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
k_default_value	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        const value_type k_default_value;$/;"	m	class:boost::algorithm::detail::skip_table	access:private
k_pattern_length	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        const difference_type k_pattern_length;$/;"	m	class:boost::algorithm::boyer_moore	access:private
k_pattern_length	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        const difference_type k_pattern_length;$/;"	m	class:boost::algorithm::boyer_moore_horspool	access:private
k_pattern_length	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        const difference_type k_pattern_length;$/;"	m	class:boost::algorithm::knuth_morris_pratt	access:private
knuth_morris_pratt	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        knuth_morris_pratt ( patIter first, patIter last ) $/;"	f	class:boost::algorithm::knuth_morris_pratt	access:public	signature:( patIter first, patIter last )
knuth_morris_pratt	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    class knuth_morris_pratt {$/;"	c	namespace:boost::algorithm
knuth_morris_pratt_search	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    corpusIter knuth_morris_pratt_search ( $/;"	f	namespace:boost::algorithm	signature:( corpusIter corpus_first, corpusIter corpus_last, const PatternRange &pattern )
knuth_morris_pratt_search	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    corpusIter knuth_morris_pratt_search ( $/;"	f	namespace:boost::algorithm	signature:( corpusIter corpus_first, corpusIter corpus_last, patIter pat_first, patIter pat_last )
knuth_morris_pratt_search	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    knuth_morris_pratt_search ( CorpusRange &corpus, const PatternRange &pattern )$/;"	f	namespace:boost::algorithm	signature:( CorpusRange &corpus, const PatternRange &pattern )
knuth_morris_pratt_search	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    knuth_morris_pratt_search ( CorpusRange &corpus, patIter pat_first, patIter pat_last )$/;"	f	namespace:boost::algorithm	signature:( CorpusRange &corpus, patIter pat_first, patIter pat_last )
last_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        last_finder( const RangeT& Search )$/;"	f	namespace:boost::algorithm	signature:( const RangeT& Search )
last_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        last_finder( const RangeT& Search, PredicateT Comp )$/;"	f	namespace:boost::algorithm	signature:( const RangeT& Search, PredicateT Comp )
last_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                last_finderF( const SearchT& Search, PredicateT Comp ) :$/;"	f	struct:boost::algorithm::detail::last_finderF	access:public	signature:( const SearchT& Search, PredicateT Comp )
last_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                last_finderF($/;"	f	struct:boost::algorithm::detail::last_finderF	access:public	signature:( search_iterator_type SearchBegin, search_iterator_type SearchEnd, PredicateT Comp )
last_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct last_finderF$/;"	s	namespace:boost::algorithm::detail
last_finder_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                    PredicateT> last_finder_type;$/;"	t	struct:boost::algorithm::detail::nth_finderF	access:public
last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_max_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_max_element(ForwardIter first, ForwardIter last, BinaryPredicate comp)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
last_min_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_min_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
last_min_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_min_element(ForwardIter first, ForwardIter last, BinaryPredicate comp)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
last_min_first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_min_first_max_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
last_min_first_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_min_first_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
last_min_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_min_last_max_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
last_min_last_max_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  last_min_last_max_element(ForwardIter first, ForwardIter last,$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
less_over_iter	/usr/include/boost/algorithm/minmax_element.hpp	/^    struct less_over_iter {$/;"	s	namespace:boost::detail
lexicographical_compare	/usr/include/boost/algorithm/string/predicate.hpp	/^            inline bool lexicographical_compare($/;"	f	namespace:boost::algorithm	signature:( const Range1T& Arg1, const Range2T& Arg2)
lexicographical_compare	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool lexicographical_compare($/;"	f	namespace:boost::algorithm	signature:( const Range1T& Arg1, const Range2T& Arg2, PredicateT Pred)
m_Comp	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                PredicateT m_Comp;$/;"	m	struct:boost::algorithm::detail::first_finderF	access:private
m_Comp	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                PredicateT m_Comp;$/;"	m	struct:boost::algorithm::detail::last_finderF	access:private
m_Comp	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                PredicateT m_Comp;$/;"	m	struct:boost::algorithm::detail::nth_finderF	access:private
m_End	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            input_iterator_type m_End;$/;"	m	class:boost::algorithm::find_iterator	access:private
m_End	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            input_iterator_type m_End;$/;"	m	class:boost::algorithm::split_iterator	access:private
m_Finder	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                finder_type m_Finder;$/;"	m	class:boost::algorithm::detail::find_iterator_base	access:private
m_Finder	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                FinderT m_Finder;$/;"	m	struct:boost::algorithm::detail::dissect_formatF	access:private
m_Flags	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^                match_flag_type m_Flags;$/;"	m	struct:boost::algorithm::detail::regex_formatF	access:private
m_Fmt	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^                const StringT& m_Fmt;$/;"	m	struct:boost::algorithm::detail::regex_formatF	access:private
m_Format	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                result_type m_Format;$/;"	m	struct:boost::algorithm::detail::const_formatF	access:private
m_FormatResult	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                format_result_type m_FormatResult;$/;"	m	class:boost::algorithm::detail::find_format_store	access:private
m_Formatter	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                const formatter_type& m_Formatter;$/;"	m	class:boost::algorithm::detail::find_format_store	access:private
m_From	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                CharT m_From;$/;"	m	struct:boost::algorithm::detail::is_from_rangeF	access:private
m_Loc	/usr/include/boost/algorithm/string/compare.hpp	/^            std::locale m_Loc;$/;"	m	struct:boost::algorithm::is_iequal	access:private
m_Loc	/usr/include/boost/algorithm/string/compare.hpp	/^            std::locale m_Loc;$/;"	m	struct:boost::algorithm::is_iless	access:private
m_Loc	/usr/include/boost/algorithm/string/compare.hpp	/^            std::locale m_Loc;$/;"	m	struct:boost::algorithm::is_not_igreater	access:private
m_Loc	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^                const std::locale* m_Loc;$/;"	m	struct:boost::algorithm::detail::to_lowerF	access:private
m_Loc	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^                const std::locale* m_Loc;$/;"	m	struct:boost::algorithm::detail::to_upperF	access:private
m_Locale	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                std::locale m_Locale;$/;"	m	struct:boost::algorithm::detail::is_classifiedF	access:private
m_Match	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            match_type m_Match;$/;"	m	class:boost::algorithm::find_iterator	access:private
m_Match	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            match_type m_Match;$/;"	m	class:boost::algorithm::split_iterator	access:private
m_MatchFlags	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                match_flag_type m_MatchFlags;     \/\/ match flags$/;"	m	struct:boost::algorithm::detail::find_regexF	access:private
m_MatchResults	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                match_results_type m_MatchResults;$/;"	m	struct:boost::algorithm::detail::regex_search_result	access:private
m_N	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                int m_N;$/;"	m	struct:boost::algorithm::detail::head_finderF	access:private
m_N	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                int m_N;$/;"	m	struct:boost::algorithm::detail::tail_finderF	access:private
m_Next	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            input_iterator_type m_Next;$/;"	m	class:boost::algorithm::split_iterator	access:private
m_Nth	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                int m_Nth;$/;"	m	struct:boost::algorithm::detail::nth_finderF	access:private
m_Pred	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                PredT m_Pred;$/;"	m	struct:boost::algorithm::detail::pred_notF	access:private
m_Pred	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                PredicateT m_Pred;$/;"	m	struct:boost::algorithm::detail::token_finderF	access:private
m_Pred1	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                Pred1T m_Pred1;$/;"	m	struct:boost::algorithm::detail::pred_andF	access:private
m_Pred1	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                Pred1T m_Pred1;$/;"	m	struct:boost::algorithm::detail::pred_orF	access:private
m_Pred2	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                Pred2T m_Pred2;$/;"	m	struct:boost::algorithm::detail::pred_andF	access:private
m_Pred2	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                Pred2T m_Pred2;$/;"	m	struct:boost::algorithm::detail::pred_orF	access:private
m_Range	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                iterator_range<input_iterator_type> m_Range;$/;"	m	struct:boost::algorithm::detail::range_finderF	access:private
m_Rx	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                regex_reference_type m_Rx; \/\/ Regexp$/;"	m	struct:boost::algorithm::detail::find_regexF	access:private
m_Search	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                iterator_range<search_iterator_type> m_Search;$/;"	m	struct:boost::algorithm::detail::first_finderF	access:private
m_Search	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                iterator_range<search_iterator_type> m_Search;$/;"	m	struct:boost::algorithm::detail::last_finderF	access:private
m_Search	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                iterator_range<search_iterator_type> m_Search;$/;"	m	struct:boost::algorithm::detail::nth_finderF	access:private
m_Size	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                ::std::size_t m_Size;$/;"	m	struct:boost::algorithm::detail::is_any_ofF	access:private
m_Storage	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                m_Storage;$/;"	m	struct:boost::algorithm::detail::is_any_ofF	typeref:union:boost::algorithm::detail::is_any_ofF::__anon2	access:private
m_To	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                CharT m_To;$/;"	m	struct:boost::algorithm::detail::is_from_rangeF	access:private
m_Type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                std::ctype_base::mask m_Type;$/;"	m	struct:boost::algorithm::detail::is_classifiedF	access:private
m_bEof	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            bool m_bEof;$/;"	m	class:boost::algorithm::split_iterator	access:private
m_dynSet	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                    set_value_type* m_dynSet;$/;"	m	union:boost::algorithm::detail::is_any_ofF::__anon2	access:public
m_eCompress	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                token_compress_mode_type m_eCompress;$/;"	m	struct:boost::algorithm::detail::token_finderF	access:private
m_fixSet	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                    set_value_type m_fixSet[sizeof(set_value_type*)*2];$/;"	m	union:boost::algorithm::detail::is_any_ofF::__anon2	access:public
m_p	/usr/include/boost/algorithm/minmax_element.hpp	/^      BinaryPredicate m_p;$/;"	m	struct:boost::detail::binary_pred_over_iter	access:private
make_boyer_moore	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    make_boyer_moore ( Range &r ) {$/;"	f	namespace:boost::algorithm	signature:( Range &r )
make_boyer_moore	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^    make_boyer_moore ( const Range &r ) {$/;"	f	namespace:boost::algorithm	signature:( const Range &r )
make_boyer_moore_horspool	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    make_boyer_moore_horspool ( Range &r ) {$/;"	f	namespace:boost::algorithm	signature:( Range &r )
make_boyer_moore_horspool	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^    make_boyer_moore_horspool ( const Range &r ) {$/;"	f	namespace:boost::algorithm	signature:( const Range &r )
make_find_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^        make_find_iterator($/;"	f	namespace:boost::algorithm	signature:( RangeT& Collection, FinderT Finder)
make_knuth_morris_pratt	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    make_knuth_morris_pratt ( Range &r ) {$/;"	f	namespace:boost::algorithm	signature:( Range &r )
make_knuth_morris_pratt	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^    make_knuth_morris_pratt ( const Range &r ) {$/;"	f	namespace:boost::algorithm	signature:( const Range &r )
make_split_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^        make_split_iterator($/;"	f	namespace:boost::algorithm	signature:( RangeT& Collection, FinderT Finder)
match_results	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                const match_results_type& match_results() const$/;"	f	struct:boost::algorithm::detail::regex_search_result	access:public	signature:() const
match_results_type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef boost::match_results<iterator> match_results_type;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
match_type	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                typedef iterator_range<IteratorT> match_type;$/;"	t	class:boost::algorithm::detail::find_iterator_base	access:protected
match_type	/usr/include/boost/algorithm/string/find_iterator.hpp	/^                base_type::match_type match_type;$/;"	t	class:boost::algorithm::find_iterator	access:private
match_type	/usr/include/boost/algorithm/string/find_iterator.hpp	/^                base_type::match_type match_type;$/;"	t	class:boost::algorithm::split_iterator	access:private
minmax	/usr/include/boost/algorithm/minmax.hpp	/^  minmax(T const& a, T const& b) {$/;"	f	namespace:boost	signature:(T const& a, T const& b)
minmax	/usr/include/boost/algorithm/minmax.hpp	/^  minmax(T const& a, T const& b, BinaryPredicate comp) {$/;"	f	namespace:boost	signature:(T const& a, T const& b, BinaryPredicate comp)
minmax_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  minmax_element(ForwardIter first, ForwardIter last)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last)
minmax_element	/usr/include/boost/algorithm/minmax_element.hpp	/^  minmax_element(ForwardIter first, ForwardIter last, BinaryPredicate comp)$/;"	f	namespace:boost	signature:(ForwardIter first, ForwardIter last, BinaryPredicate comp)
move_from_storage	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^            inline OutputIteratorT move_from_storage($/;"	f	namespace:boost::algorithm::detail	signature:( StorageT& Storage, OutputIteratorT DestBegin, OutputIteratorT DestEnd )
no_type	/usr/include/boost/algorithm/string/yes_no_type.hpp	/^        typedef size_descriptor<2>::type no_type;$/;"	t	namespace:boost::algorithm
non_hex_input	/usr/include/boost/algorithm/hex.hpp	/^struct non_hex_input    : virtual hex_decode_error {};$/;"	s	namespace:boost::algorithm	inherits:hex_decode_error
none_of	/usr/include/boost/algorithm/cxx11/none_of.hpp	/^bool none_of ( const Range &r, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, Predicate p )
none_of_equal	/usr/include/boost/algorithm/cxx11/none_of.hpp	/^bool none_of_equal ( InputIterator first, InputIterator last, const V &val ) $/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, const V &val )
none_of_equal	/usr/include/boost/algorithm/cxx11/none_of.hpp	/^bool none_of_equal ( const Range &r, const V & val ) $/;"	f	namespace:boost::algorithm	signature:( const Range &r, const V & val )
not_enough_input	/usr/include/boost/algorithm/hex.hpp	/^struct not_enough_input : virtual hex_decode_error {};$/;"	s	namespace:boost::algorithm	inherits:hex_decode_error
nth_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        nth_finder( $/;"	f	namespace:boost::algorithm	signature:( const RangeT& Search, int Nth)
nth_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        nth_finder( $/;"	f	namespace:boost::algorithm	signature:( const RangeT& Search, int Nth, PredicateT Comp )
nth_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                nth_finderF($/;"	f	struct:boost::algorithm::detail::nth_finderF	access:public	signature:( const SearchT& Search, int Nth, PredicateT Comp)
nth_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                nth_finderF($/;"	f	struct:boost::algorithm::detail::nth_finderF	access:public	signature:( search_iterator_type SearchBegin, search_iterator_type SearchEnd, int Nth, PredicateT Comp)
nth_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct nth_finderF$/;"	s	namespace:boost::algorithm::detail
one_of	/usr/include/boost/algorithm/cxx11/one_of.hpp	/^bool one_of ( InputIterator first, InputIterator last, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, Predicate p )
one_of	/usr/include/boost/algorithm/cxx11/one_of.hpp	/^bool one_of ( const Range &r, Predicate p ) $/;"	f	namespace:boost::algorithm	signature:( const Range &r, Predicate p )
one_of_equal	/usr/include/boost/algorithm/cxx11/one_of.hpp	/^bool one_of_equal ( InputIterator first, InputIterator last, const V &val )$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, const V &val )
one_of_equal	/usr/include/boost/algorithm/cxx11/one_of.hpp	/^bool one_of_equal ( const Range &r, const V &val )$/;"	f	namespace:boost::algorithm	signature:( const Range &r, const V &val )
operator !	/usr/include/boost/algorithm/string/classification.hpp	/^        operator!( const predicate_facade<PredT>& Pred )$/;"	f	namespace:boost::algorithm	signature:( const predicate_facade<PredT>& Pred )
operator &&	/usr/include/boost/algorithm/string/classification.hpp	/^        operator&&( $/;"	f	namespace:boost::algorithm	signature:( const predicate_facade<Pred1T>& Pred1, const predicate_facade<Pred2T>& Pred2 )
operator ()	/usr/include/boost/algorithm/minmax_element.hpp	/^      bool operator()(Iterator const& it1,$/;"	f	struct:boost::detail::binary_pred_over_iter	access:public	signature:(Iterator const& it1, Iterator const& it2) const
operator ()	/usr/include/boost/algorithm/minmax_element.hpp	/^      bool operator()(Iterator const& it1,$/;"	f	struct:boost::detail::less_over_iter	access:public	signature:(Iterator const& it1, Iterator const& it2) const
operator ()	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        corpusIter operator () ( corpusIter corpus_first, corpusIter corpus_last ) const {$/;"	f	class:boost::algorithm::boyer_moore	access:public	signature:( corpusIter corpus_first, corpusIter corpus_last ) const
operator ()	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        typename boost::range_iterator<Range>::type operator () ( Range &r ) const {$/;"	f	class:boost::algorithm::boyer_moore	access:public	signature:( Range &r ) const
operator ()	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        corpusIter operator () ( corpusIter corpus_first, corpusIter corpus_last ) const {$/;"	f	class:boost::algorithm::boyer_moore_horspool	access:public	signature:( corpusIter corpus_first, corpusIter corpus_last ) const
operator ()	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        typename boost::range_iterator<Range>::type operator () ( Range &r ) const {$/;"	f	class:boost::algorithm::boyer_moore_horspool	access:public	signature:( Range &r ) const
operator ()	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        corpusIter operator () ( corpusIter corpus_first, corpusIter corpus_last ) const {$/;"	f	class:boost::algorithm::knuth_morris_pratt	access:public	signature:( corpusIter corpus_first, corpusIter corpus_last ) const
operator ()	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        typename boost::range_iterator<Range>::type operator () ( Range &r ) const {$/;"	f	class:boost::algorithm::knuth_morris_pratt	access:public	signature:( Range &r ) const
operator ()	/usr/include/boost/algorithm/string/compare.hpp	/^                bool operator()( const T1& Arg1, const T2& Arg2 ) const$/;"	f	struct:boost::algorithm::is_equal	access:public	signature:( const T1& Arg1, const T2& Arg2 ) const
operator ()	/usr/include/boost/algorithm/string/compare.hpp	/^                bool operator()( const T1& Arg1, const T2& Arg2 ) const$/;"	f	struct:boost::algorithm::is_iequal	access:public	signature:( const T1& Arg1, const T2& Arg2 ) const
operator ()	/usr/include/boost/algorithm/string/compare.hpp	/^                bool operator()( const T1& Arg1, const T2& Arg2 ) const$/;"	f	struct:boost::algorithm::is_iless	access:public	signature:( const T1& Arg1, const T2& Arg2 ) const
operator ()	/usr/include/boost/algorithm/string/compare.hpp	/^                bool operator()( const T1& Arg1, const T2& Arg2 ) const$/;"	f	struct:boost::algorithm::is_less	access:public	signature:( const T1& Arg1, const T2& Arg2 ) const
operator ()	/usr/include/boost/algorithm/string/compare.hpp	/^                bool operator()( const T1& Arg1, const T2& Arg2 ) const$/;"	f	struct:boost::algorithm::is_not_greater	access:public	signature:( const T1& Arg1, const T2& Arg2 ) const
operator ()	/usr/include/boost/algorithm/string/compare.hpp	/^                bool operator()( const T1& Arg1, const T2& Arg2 ) const$/;"	f	struct:boost::algorithm::is_not_igreater	access:public	signature:( const T1& Arg1, const T2& Arg2 ) const
operator ()	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^                CharT operator ()( CharT Ch ) const$/;"	f	struct:boost::algorithm::detail::to_lowerF	access:public	signature:( CharT Ch ) const
operator ()	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^                CharT operator ()( CharT Ch ) const$/;"	f	struct:boost::algorithm::detail::to_upperF	access:public	signature:( CharT Ch ) const
operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                    bool operator()( char const Ch ) const$/;"	f	struct:boost::algorithm::detail::is_classifiedF	access:public	signature:( char const Ch ) const
operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                bool operator()( Char2T Ch ) const$/;"	f	struct:boost::algorithm::detail::is_any_ofF	access:public	signature:( Char2T Ch ) const
operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                bool operator()( Char2T Ch ) const$/;"	f	struct:boost::algorithm::detail::is_from_rangeF	access:public	signature:( Char2T Ch ) const
operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                bool operator()( CharT Ch ) const$/;"	f	struct:boost::algorithm::detail::is_classifiedF	access:public	signature:( CharT Ch ) const
operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                bool operator()( CharT Ch ) const$/;"	f	struct:boost::algorithm::detail::pred_andF	access:public	signature:( CharT Ch ) const
operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                bool operator()( CharT Ch ) const$/;"	f	struct:boost::algorithm::detail::pred_notF	access:public	signature:( CharT Ch ) const
operator ()	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                bool operator()( CharT Ch ) const$/;"	f	struct:boost::algorithm::detail::pred_orF	access:public	signature:( CharT Ch ) const
operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::first_finderF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::head_finderF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::last_finderF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::nth_finderF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::range_finderF	access:public	signature:( ForwardIterator2T, ForwardIterator2T ) const
operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::tail_finderF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
operator ()	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                operator()($/;"	f	struct:boost::algorithm::detail::token_finderF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
operator ()	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                operator()( $/;"	f	struct:boost::algorithm::detail::find_regexF	access:public	signature:( ForwardIteratorT Begin, ForwardIteratorT End ) const
operator ()	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                  operator()(const RangeT& Replace) const$/;"	f	struct:boost::algorithm::detail::dissect_formatF	access:public	signature:(const RangeT& Replace) const
operator ()	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                const RangeT& operator()(const Range2T& Replace) const$/;"	f	struct:boost::algorithm::detail::identity_formatF	access:public	signature:(const Range2T& Replace) const
operator ()	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                const result_type& operator()(const Range2T&) const$/;"	f	struct:boost::algorithm::detail::const_formatF	access:public	signature:(const Range2T&) const
operator ()	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                empty_container<CharT> operator()(const ReplaceT&) const$/;"	f	struct:boost::algorithm::detail::empty_formatF	access:public	signature:(const ReplaceT&) const
operator ()	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                result_type& operator()(const Range2T&)$/;"	f	struct:boost::algorithm::detail::const_formatF	access:public	signature:(const Range2T&)
operator ()	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^                result_type operator()( $/;"	f	struct:boost::algorithm::detail::regex_formatF	access:public	signature:( const regex_search_result<InputIteratorT>& Replace ) const
operator ()	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^                ForwardIteratorT operator()($/;"	f	struct:boost::algorithm::detail::process_segment_helper	access:public	signature:( StorageT& Storage, InputT& , ForwardIteratorT InsertIt, ForwardIteratorT SegmentBegin, ForwardIteratorT SegmentEnd )
operator ()	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^                ForwardIteratorT operator()($/;"	f	struct:boost::algorithm::detail::process_segment_helper	access:public	signature:( StorageT& Storage, InputT& Input, ForwardIteratorT InsertIt, ForwardIteratorT SegmentBegin, ForwardIteratorT SegmentEnd )
operator ()	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^                void operator()($/;"	f	struct:boost::algorithm::detail::replace_const_time_helper	access:public	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator From, BOOST_STRING_TYPENAME InputT::iterator To, ForwardIteratorT Begin, ForwardIteratorT End )
operator ()	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^                void operator()($/;"	f	struct:boost::algorithm::detail::replace_native_helper	access:public	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator From, BOOST_STRING_TYPENAME InputT::iterator To, ForwardIteratorT Begin, ForwardIteratorT End )
operator ()	/usr/include/boost/algorithm/string/detail/util.hpp	/^                SeqT operator()( const iterator_range<IteratorT>& Range ) const$/;"	f	struct:boost::algorithm::detail::copy_iterator_rangeF	access:public	signature:( const iterator_range<IteratorT>& Range ) const
operator =	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                is_any_ofF& operator=(const is_any_ofF& Other)$/;"	f	struct:boost::algorithm::detail::is_any_ofF	access:public	signature:(const is_any_ofF& Other)
operator =	/usr/include/boost/algorithm/string/detail/find_format_store.hpp	/^                find_format_store& operator=( FindResultT FindResult )$/;"	f	class:boost::algorithm::detail::find_format_store	access:public	signature:( FindResultT FindResult )
operator =	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                regex_search_result& operator=( const regex_search_result& Other )$/;"	f	struct:boost::algorithm::detail::regex_search_result	access:public	signature:( const regex_search_result& Other )
operator []	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        value_type operator [] ( key_type key ) const {$/;"	f	class:boost::algorithm::detail::skip_table	access:public	signature:( key_type key ) const
operator ||	/usr/include/boost/algorithm/string/classification.hpp	/^        operator||( $/;"	f	namespace:boost::algorithm	signature:( const predicate_facade<Pred1T>& Pred1, const predicate_facade<Pred2T>& Pred2 )
pF	/usr/include/boost/algorithm/string/concept.hpp	/^            FinderT* pF;    $/;"	m	struct:boost::algorithm::FinderConcept	access:private
pF	/usr/include/boost/algorithm/string/concept.hpp	/^            FinderT* pF;$/;"	m	struct:boost::algorithm::FormatterConcept	access:private
pFo	/usr/include/boost/algorithm/string/concept.hpp	/^            FormatterT *pFo;$/;"	m	struct:boost::algorithm::FormatterConcept	access:private
partition_copy	/usr/include/boost/algorithm/cxx11/partition_copy.hpp	/^partition_copy ( const Range &r, OutputIterator1 out_true, OutputIterator2 out_false, $/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator1 out_true, OutputIterator2 out_false, UnaryPredicate p )
partition_point	/usr/include/boost/algorithm/cxx11/partition_point.hpp	/^typename boost::range_iterator<Range> partition_point ( Range &r, Predicate p )$/;"	f	namespace:boost::algorithm	signature:( Range &r, Predicate p )
pat_first	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        patIter pat_first, pat_last;$/;"	m	class:boost::algorithm::boyer_moore	access:private
pat_first	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        patIter pat_first, pat_last;$/;"	m	class:boost::algorithm::boyer_moore_horspool	access:private
pat_first	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        patIter pat_first, pat_last;$/;"	m	class:boost::algorithm::knuth_morris_pratt	access:private
pat_last	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        patIter pat_first, pat_last;$/;"	m	class:boost::algorithm::boyer_moore	access:private
pat_last	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        patIter pat_first, pat_last;$/;"	m	class:boost::algorithm::boyer_moore_horspool	access:private
pat_last	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        patIter pat_first, pat_last;$/;"	m	class:boost::algorithm::knuth_morris_pratt	access:private
preKmp	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        void preKmp ( patIter first, patIter last ) {$/;"	f	class:boost::algorithm::knuth_morris_pratt	access:private	signature:( patIter first, patIter last )
pred_andF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                pred_andF( Pred1T Pred1, Pred2T Pred2 ) :$/;"	f	struct:boost::algorithm::detail::pred_andF	access:public	signature:( Pred1T Pred1, Pred2T Pred2 )
pred_andF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^            struct pred_andF :$/;"	s	namespace:boost::algorithm::detail	inherits:predicate_facade
pred_notF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                pred_notF( PredT Pred ) : m_Pred(Pred) {}$/;"	f	struct:boost::algorithm::detail::pred_notF	access:public	signature:( PredT Pred )
pred_notF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^            struct pred_notF :$/;"	s	namespace:boost::algorithm::detail	inherits:predicate_facade
pred_orF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                pred_orF( Pred1T Pred1, Pred2T Pred2 ) :$/;"	f	struct:boost::algorithm::detail::pred_orF	access:public	signature:( Pred1T Pred1, Pred2T Pred2 )
pred_orF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^            struct pred_orF :$/;"	s	namespace:boost::algorithm::detail	inherits:predicate_facade
predicate_facade	/usr/include/boost/algorithm/string/predicate_facade.hpp	/^        struct predicate_facade {};$/;"	s	namespace:boost::algorithm
process_segment	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^            inline ForwardIteratorT process_segment($/;"	f	namespace:boost::algorithm::detail	signature:( StorageT& Storage, InputT& Input, ForwardIteratorT InsertIt, ForwardIteratorT SegmentBegin, ForwardIteratorT SegmentEnd )
process_segment_helper	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^            struct process_segment_helper$/;"	s	namespace:boost::algorithm::detail
process_segment_helper	/usr/include/boost/algorithm/string/detail/replace_storage.hpp	/^            struct process_segment_helper< true >$/;"	s	namespace:boost::algorithm::detail
ptr_end	/usr/include/boost/algorithm/hex.hpp	/^    bool ptr_end ( const T* ptr, const T* \/*end*\/ ) { return *ptr == '\\0'; }$/;"	f	namespace:boost::algorithm::detail	signature:( const T* ptr, const T* )
r	/usr/include/boost/algorithm/string/concept.hpp	/^            range r;$/;"	m	struct:boost::algorithm::FinderConcept	access:private
range	/usr/include/boost/algorithm/string/concept.hpp	/^            typedef iterator_range<IteratorT> range;$/;"	t	struct:boost::algorithm::FinderConcept	access:private
range_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        range_finder( iterator_range<ForwardIteratorT> Range )$/;"	f	namespace:boost::algorithm	signature:( iterator_range<ForwardIteratorT> Range )
range_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        range_finder($/;"	f	namespace:boost::algorithm	signature:( ForwardIteratorT Begin, ForwardIteratorT End )
range_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                range_finderF($/;"	f	struct:boost::algorithm::detail::range_finderF	access:public	signature:( input_iterator_type Begin, input_iterator_type End )
range_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                range_finderF(const iterator_range<input_iterator_type>& Range) :$/;"	f	struct:boost::algorithm::detail::range_finderF	access:public	signature:(const iterator_range<input_iterator_type>& Range)
range_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct range_finderF$/;"	s	namespace:boost::algorithm::detail
reference	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef const value_type& reference;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
regex_finder	/usr/include/boost/algorithm/string/regex_find_format.hpp	/^        regex_finder($/;"	f	namespace:boost::algorithm	signature:( const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type MatchFlags=match_default )
regex_formatF	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^                regex_formatF( const StringT& Fmt, match_flag_type Flags=format_default ) :$/;"	f	struct:boost::algorithm::detail::regex_formatF	access:public	signature:( const StringT& Fmt, match_flag_type Flags=format_default )
regex_formatF	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^            struct regex_formatF$/;"	s	namespace:boost::algorithm::detail
regex_formatter	/usr/include/boost/algorithm/string/regex_find_format.hpp	/^        regex_formatter( $/;"	f	namespace:boost::algorithm	signature:( const std::basic_string<CharT, TraitsT, AllocT>& Format, match_flag_type Flags=format_default )
regex_reference_type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef const RegExT& regex_reference_type;$/;"	t	struct:boost::algorithm::detail::find_regexF	access:public
regex_search_result	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                regex_search_result( IteratorT End ) :$/;"	f	struct:boost::algorithm::detail::regex_search_result	access:public	signature:( IteratorT End )
regex_search_result	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                regex_search_result( const match_results_type& MatchResults ) :$/;"	f	struct:boost::algorithm::detail::regex_search_result	access:public	signature:( const match_results_type& MatchResults )
regex_search_result	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                regex_search_result( const regex_search_result& Other ) :$/;"	f	struct:boost::algorithm::detail::regex_search_result	access:public	signature:( const regex_search_result& Other )
regex_search_result	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^            struct regex_search_result : $/;"	s	namespace:boost::algorithm::detail	inherits:iterator_range
regex_type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef RegExT regex_type;$/;"	t	struct:boost::algorithm::detail::find_regexF	access:public
replace	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            inline void replace($/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator From, BOOST_STRING_TYPENAME InputT::iterator To, ForwardIteratorT Begin, ForwardIteratorT End )
replace	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            inline void replace($/;"	f	namespace:boost::algorithm::detail	signature:( InputT& Input, BOOST_STRING_TYPENAME InputT::iterator From, BOOST_STRING_TYPENAME InputT::iterator To, const InsertT& Insert )
replace_all	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_all( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, const Range2T& Format )
replace_all_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_all_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const Range3T& Format )
replace_all_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_all_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, const Range2T& Format )
replace_all_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        inline void replace_all_regex( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, const std::basic_string<CharT, FormatStringTraitsT, FormatStringAllocatorT>& Format, match_flag_type Flags=match_default | format_default )
replace_all_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline OutputIteratorT replace_all_regex_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, const std::basic_string<CharT, FormatStringTraitsT, FormatStringAllocatorT>& Format, match_flag_type Flags=match_default | format_default )
replace_all_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline SequenceT replace_all_regex_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, const std::basic_string<CharT, FormatStringTraitsT, FormatStringAllocatorT>& Format, match_flag_type Flags=match_default | format_default )
replace_const_time_helper	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            struct replace_const_time_helper$/;"	s	namespace:boost::algorithm::detail
replace_const_time_helper	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            struct replace_const_time_helper< true >$/;"	s	namespace:boost::algorithm::detail
replace_first	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_first( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, const Range2T& Format )
replace_first_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_first_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const Range3T& Format)
replace_first_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_first_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, const Range2T& Format )
replace_head	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_head( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, int N, const RangeT& Format )
replace_head_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_head_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, int N, const Range2T& Format )
replace_head_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_head_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, int N, const RangeT& Format )
replace_last	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_last( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, const Range2T& Format )
replace_last_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_last_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, const Range3T& Format )
replace_last_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_last_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, const Range2T& Format )
replace_native_helper	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            struct replace_native_helper$/;"	s	namespace:boost::algorithm::detail
replace_native_helper	/usr/include/boost/algorithm/string/detail/sequence.hpp	/^            struct replace_native_helper< true >$/;"	s	namespace:boost::algorithm::detail
replace_nth	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_nth( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const Range1T& Search, int Nth, const Range2T& Format )
replace_nth_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_nth_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const Range2T& Search, int Nth, const Range3T& Format )
replace_nth_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_nth_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const Range1T& Search, int Nth, const Range2T& Format )
replace_range	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_range( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const iterator_range< BOOST_STRING_TYPENAME range_iterator<SequenceT>::type>& SearchRange, const RangeT& Format)
replace_range_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_range_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, const iterator_range< BOOST_STRING_TYPENAME range_const_iterator<Range1T>::type>& SearchRange, const Range2T& Format)
replace_range_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_range_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const iterator_range< BOOST_STRING_TYPENAME range_const_iterator<SequenceT>::type>& SearchRange, const RangeT& Format)
replace_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        inline void replace_regex( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, const std::basic_string<CharT, FormatStringTraitsT, FormatStringAllocatorT>& Format, match_flag_type Flags=match_default | format_default )
replace_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline OutputIteratorT replace_regex_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, const std::basic_string<CharT, FormatStringTraitsT, FormatStringAllocatorT>& Format, match_flag_type Flags=match_default | format_default )
replace_regex_copy	/usr/include/boost/algorithm/string/regex.hpp	/^        inline SequenceT replace_regex_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, const std::basic_string<CharT, FormatStringTraitsT, FormatStringAllocatorT>& Format, match_flag_type Flags=match_default | format_default )
replace_tail	/usr/include/boost/algorithm/string/replace.hpp	/^        inline void replace_tail( $/;"	f	namespace:boost::algorithm	signature:( SequenceT& Input, int N, const RangeT& Format )
replace_tail_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline OutputIteratorT replace_tail_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const Range1T& Input, int N, const Range2T& Format )
replace_tail_copy	/usr/include/boost/algorithm/string/replace.hpp	/^        inline SequenceT replace_tail_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, int N, const RangeT& Format )
result_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef bool result_type;$/;"	t	struct:boost::algorithm::detail::is_any_ofF	access:public
result_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef bool result_type;$/;"	t	struct:boost::algorithm::detail::is_classifiedF	access:public
result_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef bool result_type;$/;"	t	struct:boost::algorithm::detail::is_from_rangeF	access:public
result_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef bool result_type;$/;"	t	struct:boost::algorithm::detail::pred_andF	access:public
result_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef bool result_type;$/;"	t	struct:boost::algorithm::detail::pred_notF	access:public
result_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef bool result_type;$/;"	t	struct:boost::algorithm::detail::pred_orF	access:public
result_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                typedef iterator_range<input_iterator_type> result_type;$/;"	t	struct:boost::algorithm::detail::range_finderF	access:public
result_type	/usr/include/boost/algorithm/string/detail/formatter.hpp	/^                typedef iterator_range<format_iterator> result_type;$/;"	t	struct:boost::algorithm::detail::const_formatF	access:private
result_type	/usr/include/boost/algorithm/string/detail/formatter_regex.hpp	/^                typedef StringT result_type;$/;"	t	struct:boost::algorithm::detail::regex_formatF	access:private
search_iterator_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                typedef SearchIteratorT search_iterator_type;$/;"	t	struct:boost::algorithm::detail::first_finderF	access:public
search_iterator_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                typedef SearchIteratorT search_iterator_type;$/;"	t	struct:boost::algorithm::detail::last_finderF	access:public
search_iterator_type	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                typedef SearchIteratorT search_iterator_type;$/;"	t	struct:boost::algorithm::detail::nth_finderF	access:public
set_value_type	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                typedef typename ::boost::remove_const<CharT>::type set_value_type;$/;"	t	struct:boost::algorithm::detail::is_any_ofF	access:private
size	/usr/include/boost/algorithm/string/detail/util.hpp	/^                size_type size() const$/;"	f	struct:boost::algorithm::detail::empty_container	access:public	signature:() const
size_descriptor	/usr/include/boost/algorithm/string/yes_no_type.hpp	/^        template<int I> struct size_descriptor $/;"	s	namespace:boost::algorithm
size_type	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
skip_	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        typename traits::skip_table_t skip_;$/;"	m	class:boost::algorithm::boyer_moore	access:private
skip_	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        typename traits::skip_table_t skip_;$/;"	m	class:boost::algorithm::boyer_moore_horspool	access:private
skip_	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        skip_map skip_;$/;"	m	class:boost::algorithm::detail::skip_table	access:private
skip_	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        std::vector <difference_type> skip_;$/;"	m	class:boost::algorithm::knuth_morris_pratt	access:private
skip_map	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        typedef std::tr1::unordered_map<key_type, value_type> skip_map;$/;"	t	class:boost::algorithm::detail::skip_table	access:private
skip_table	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        skip_table ( std::size_t patSize, value_type default_value ) $/;"	f	class:boost::algorithm::detail::skip_table	access:public	signature:( std::size_t patSize, value_type default_value )
skip_table	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^    class skip_table<key_type, value_type, false> {$/;"	c	namespace:boost::algorithm::detail
skip_table	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^    class skip_table<key_type, value_type, true> {$/;"	c	namespace:boost::algorithm::detail
split	/usr/include/boost/algorithm/string/split.hpp	/^        inline SequenceSequenceT& split($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, RangeT& Input, PredicateT Pred, token_compress_mode_type eCompress=token_compress_off )
split_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            split_iterator( const split_iterator& Other ) :$/;"	f	class:boost::algorithm::split_iterator	access:public	signature:( const split_iterator& Other )
split_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            split_iterator($/;"	f	class:boost::algorithm::split_iterator	access:public	signature:( IteratorT Begin, IteratorT End, FinderT Finder )
split_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            split_iterator($/;"	f	class:boost::algorithm::split_iterator	access:public	signature:( RangeT& Col, FinderT Finder )
split_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^            split_iterator() {}$/;"	f	class:boost::algorithm::split_iterator	access:public	signature:()
split_iterator	/usr/include/boost/algorithm/string/find_iterator.hpp	/^        class split_iterator : $/;"	c	namespace:boost::algorithm	inherits:iterator_facade,detail::find_iterator_base
split_regex	/usr/include/boost/algorithm/string/regex.hpp	/^        inline SequenceSequenceT& split_regex($/;"	f	namespace:boost::algorithm	signature:( SequenceSequenceT& Result, const RangeT& Input, const basic_regex<CharT, RegexTraitsT>& Rx, match_flag_type Flags=match_default )
starts_with	/usr/include/boost/algorithm/string/predicate.hpp	/^            inline bool starts_with( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test, PredicateT Comp)
starts_with	/usr/include/boost/algorithm/string/predicate.hpp	/^        inline bool starts_with( $/;"	f	namespace:boost::algorithm	signature:( const Range1T& Input, const Range2T& Test)
suffix_	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        std::vector <difference_type> suffix_;$/;"	m	class:boost::algorithm::boyer_moore	access:private
t	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            static T* t;$/;"	m	class:boost::algorithm::has_const_time_erase	access:private
t	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            static T* t;$/;"	m	class:boost::algorithm::has_const_time_insert	access:private
t	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            static T* t;$/;"	m	class:boost::algorithm::has_native_replace	access:private
t	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            static T* t;$/;"	m	class:boost::algorithm::has_stable_iterators	access:private
tail_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        tail_finder( int N )$/;"	f	namespace:boost::algorithm	signature:( int N )
tail_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                tail_finderF( int N ) : m_N(N) {}$/;"	f	struct:boost::algorithm::detail::tail_finderF	access:public	signature:( int N )
tail_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct tail_finderF$/;"	s	namespace:boost::algorithm::detail
to_lower	/usr/include/boost/algorithm/string/case_conv.hpp	/^        inline void to_lower( $/;"	f	namespace:boost::algorithm	signature:( WritableRangeT& Input, const std::locale& Loc=std::locale())
to_lowerF	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^                to_lowerF( const std::locale& Loc ) : m_Loc( &Loc ) {}$/;"	f	struct:boost::algorithm::detail::to_lowerF	access:public	signature:( const std::locale& Loc )
to_lowerF	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^            struct to_lowerF : public std::unary_function<CharT, CharT>$/;"	s	namespace:boost::algorithm::detail	inherits:std::unary_function
to_lower_copy	/usr/include/boost/algorithm/string/case_conv.hpp	/^        inline SequenceT to_lower_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const std::locale& Loc=std::locale())
to_lower_copy	/usr/include/boost/algorithm/string/case_conv.hpp	/^        to_lower_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const std::locale& Loc=std::locale())
to_upper	/usr/include/boost/algorithm/string/case_conv.hpp	/^        inline void to_upper( $/;"	f	namespace:boost::algorithm	signature:( WritableRangeT& Input, const std::locale& Loc=std::locale())
to_upperF	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^                to_upperF( const std::locale& Loc ) : m_Loc( &Loc ) {}$/;"	f	struct:boost::algorithm::detail::to_upperF	access:public	signature:( const std::locale& Loc )
to_upperF	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^            struct to_upperF : public std::unary_function<CharT, CharT>$/;"	s	namespace:boost::algorithm::detail	inherits:std::unary_function
to_upper_copy	/usr/include/boost/algorithm/string/case_conv.hpp	/^        inline SequenceT to_upper_copy( $/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const std::locale& Loc=std::locale())
to_upper_copy	/usr/include/boost/algorithm/string/case_conv.hpp	/^        to_upper_copy($/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, const std::locale& Loc=std::locale())
token_compress_mode_type	/usr/include/boost/algorithm/string/constants.hpp	/^    enum token_compress_mode_type$/;"	g	namespace:boost::algorithm
token_compress_off	/usr/include/boost/algorithm/string/constants.hpp	/^        token_compress_off  \/\/!< Do not compress adjacent tokens$/;"	e	enum:boost::algorithm::token_compress_mode_type
token_compress_on	/usr/include/boost/algorithm/string/constants.hpp	/^        token_compress_on,    \/\/!< Compress adjacent tokens$/;"	e	enum:boost::algorithm::token_compress_mode_type
token_finder	/usr/include/boost/algorithm/string/finder.hpp	/^        token_finder( $/;"	f	namespace:boost::algorithm	signature:( PredicateT Pred, token_compress_mode_type eCompress=token_compress_off )
token_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^                token_finderF($/;"	f	struct:boost::algorithm::detail::token_finderF	access:public	signature:( PredicateT Pred, token_compress_mode_type eCompress=token_compress_off )
token_finderF	/usr/include/boost/algorithm/string/detail/finder.hpp	/^            struct token_finderF$/;"	s	namespace:boost::algorithm::detail
transform_range	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^            void transform_range($/;"	f	namespace:boost::algorithm::detail	signature:( const RangeT& Input, FunctorT Functor)
transform_range_copy	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^            OutputIteratorT transform_range_copy($/;"	f	namespace:boost::algorithm::detail	signature:( OutputIteratorT Output, const RangeT& Input, FunctorT Functor)
transform_range_copy	/usr/include/boost/algorithm/string/detail/case_conv.hpp	/^            inline SequenceT transform_range_copy( $/;"	f	namespace:boost::algorithm::detail	signature:( const RangeT& Input, FunctorT Functor)
trim	/usr/include/boost/algorithm/string/trim.hpp	/^        inline void trim(SequenceT& Input, const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, const std::locale& Loc=std::locale())
trim_all	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline void trim_all(SequenceT& Input, const std::locale& Loc =std::locale())$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, const std::locale& Loc =std::locale())
trim_all_copy	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline SequenceT trim_all_copy(const SequenceT& Input, const std::locale& Loc =std::locale())$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, const std::locale& Loc =std::locale())
trim_all_copy_if	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline SequenceT trim_all_copy_if(const SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, PredicateT IsSpace)
trim_all_if	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline void trim_all_if(SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, PredicateT IsSpace)
trim_begin	/usr/include/boost/algorithm/string/detail/trim.hpp	/^            inline ForwardIteratorT trim_begin( $/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT InBegin, ForwardIteratorT InEnd, PredicateT IsSpace )
trim_copy	/usr/include/boost/algorithm/string/trim.hpp	/^        inline SequenceT trim_copy( const SequenceT& Input, const std::locale& Loc=std::locale() )$/;"	f	namespace:boost::algorithm	signature:( const SequenceT& Input, const std::locale& Loc=std::locale() )
trim_copy_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline OutputIteratorT trim_copy_if( $/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, PredicateT IsSpace)
trim_copy_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline SequenceT trim_copy_if(const SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, PredicateT IsSpace)
trim_end	/usr/include/boost/algorithm/string/detail/trim.hpp	/^            inline ForwardIteratorT trim_end( $/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT InBegin, ForwardIteratorT InEnd, PredicateT IsSpace )
trim_end_iter_select	/usr/include/boost/algorithm/string/detail/trim.hpp	/^            inline ForwardIteratorT trim_end_iter_select( $/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT InBegin, ForwardIteratorT InEnd, PredicateT IsSpace, std::bidirectional_iterator_tag )
trim_end_iter_select	/usr/include/boost/algorithm/string/detail/trim.hpp	/^            inline ForwardIteratorT trim_end_iter_select( $/;"	f	namespace:boost::algorithm::detail	signature:( ForwardIteratorT InBegin, ForwardIteratorT InEnd, PredicateT IsSpace, std::forward_iterator_tag )
trim_fill	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline void trim_fill(SequenceT& Input, const RangeT& Fill, const std::locale& Loc =std::locale())$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, const RangeT& Fill, const std::locale& Loc =std::locale())
trim_fill_copy	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline SequenceT trim_fill_copy(const SequenceT& Input, const RangeT& Fill, const std::locale& Loc =std::locale())$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, const RangeT& Fill, const std::locale& Loc =std::locale())
trim_fill_copy_if	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline SequenceT trim_fill_copy_if(const SequenceT& Input, const RangeT& Fill, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, const RangeT& Fill, PredicateT IsSpace)
trim_fill_if	/usr/include/boost/algorithm/string/trim_all.hpp	/^        inline void trim_fill_if(SequenceT& Input, const RangeT& Fill, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, const RangeT& Fill, PredicateT IsSpace)
trim_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline void trim_if(SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, PredicateT IsSpace)
trim_left	/usr/include/boost/algorithm/string/trim.hpp	/^        inline void trim_left(SequenceT& Input, const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, const std::locale& Loc=std::locale())
trim_left_copy	/usr/include/boost/algorithm/string/trim.hpp	/^        inline SequenceT trim_left_copy(const SequenceT& Input, const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, const std::locale& Loc=std::locale())
trim_left_copy_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline OutputIteratorT trim_left_copy_if( $/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, PredicateT IsSpace)
trim_left_copy_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline SequenceT trim_left_copy_if(const SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, PredicateT IsSpace)
trim_left_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline void trim_left_if(SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, PredicateT IsSpace)
trim_right	/usr/include/boost/algorithm/string/trim.hpp	/^        inline void trim_right(SequenceT& Input, const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, const std::locale& Loc=std::locale())
trim_right_copy	/usr/include/boost/algorithm/string/trim.hpp	/^        inline SequenceT trim_right_copy(const SequenceT& Input, const std::locale& Loc=std::locale())$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, const std::locale& Loc=std::locale())
trim_right_copy_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline OutputIteratorT trim_right_copy_if( $/;"	f	namespace:boost::algorithm	signature:( OutputIteratorT Output, const RangeT& Input, PredicateT IsSpace )
trim_right_copy_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline SequenceT trim_right_copy_if(const SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(const SequenceT& Input, PredicateT IsSpace)
trim_right_if	/usr/include/boost/algorithm/string/trim.hpp	/^        inline void trim_right_if(SequenceT& Input, PredicateT IsSpace)$/;"	f	namespace:boost::algorithm	signature:(SequenceT& Input, PredicateT IsSpace)
type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef regex_search_result<IteratorT> type;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
type	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef empty_container<CharT> type;        $/;"	t	struct:boost::algorithm::detail::empty_container	access:public
type	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            typedef mpl::bool_<has_const_time_erase<T>::value> type;$/;"	t	class:boost::algorithm::has_const_time_erase	access:public
type	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            typedef mpl::bool_<has_const_time_insert<T>::value> type;$/;"	t	class:boost::algorithm::has_const_time_insert	access:public
type	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            typedef mpl::bool_<has_native_replace<T>::value> type;$/;"	t	class:boost::algorithm::has_native_replace	access:public
type	/usr/include/boost/algorithm/string/sequence_traits.hpp	/^            typedef mpl::bool_<has_stable_iterators<T>::value> type;$/;"	t	class:boost::algorithm::has_stable_iterators	access:public
type	/usr/include/boost/algorithm/string/yes_no_type.hpp	/^            typedef char (& type)[I];$/;"	t	struct:boost::algorithm::size_descriptor	access:public
unhex	/usr/include/boost/algorithm/hex.hpp	/^OutputIterator unhex ( InputIterator first, InputIterator last, OutputIterator out ) {$/;"	f	namespace:boost::algorithm	signature:( InputIterator first, InputIterator last, OutputIterator out )
unhex	/usr/include/boost/algorithm/hex.hpp	/^OutputIterator unhex ( const Range &r, OutputIterator out ) {$/;"	f	namespace:boost::algorithm	signature:( const Range &r, OutputIterator out )
unhex	/usr/include/boost/algorithm/hex.hpp	/^OutputIterator unhex ( const T *ptr, OutputIterator out ) {$/;"	f	namespace:boost::algorithm	signature:( const T *ptr, OutputIterator out )
unhex	/usr/include/boost/algorithm/hex.hpp	/^String unhex ( const String &input ) {$/;"	f	namespace:boost::algorithm	signature:( const String &input )
unsigned_key_type	/usr/include/boost/algorithm/searching/detail/bm_traits.hpp	/^        typedef typename boost::make_unsigned<key_type>::type unsigned_key_type;$/;"	t	class:boost::algorithm::detail::skip_table	access:private
use_fixed_storage	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                static bool use_fixed_storage(std::size_t size)$/;"	f	struct:boost::algorithm::detail::is_any_ofF	access:private	signature:(std::size_t size)
value_type	/usr/include/boost/algorithm/hex.hpp	/^        typedef T value_type;$/;"	t	struct:boost::algorithm::detail::hex_iterator_traits	access:public
value_type	/usr/include/boost/algorithm/hex.hpp	/^        typedef typename Container::value_type value_type;$/;"	t	struct:boost::algorithm::detail::hex_iterator_traits	access:public
value_type	/usr/include/boost/algorithm/hex.hpp	/^        typedef typename std::iterator_traits<Iterator>::value_type value_type;$/;"	t	struct:boost::algorithm::detail::hex_iterator_traits	access:public
value_type	/usr/include/boost/algorithm/string/detail/finder_regex.hpp	/^                typedef BOOST_STRING_TYPENAME base_type::value_type value_type;$/;"	t	struct:boost::algorithm::detail::regex_search_result	access:public
value_type	/usr/include/boost/algorithm/string/detail/util.hpp	/^                typedef CharT value_type;$/;"	t	struct:boost::algorithm::detail::empty_container	access:public
yes_type	/usr/include/boost/algorithm/string/yes_no_type.hpp	/^        typedef size_descriptor<1>::type yes_type;$/;"	t	namespace:boost::algorithm
~boyer_moore	/usr/include/boost/algorithm/searching/boyer_moore.hpp	/^        ~boyer_moore () {}$/;"	f	class:boost::algorithm::boyer_moore	access:public	signature:()
~boyer_moore_horspool	/usr/include/boost/algorithm/searching/boyer_moore_horspool.hpp	/^        ~boyer_moore_horspool () {}$/;"	f	class:boost::algorithm::boyer_moore_horspool	access:public	signature:()
~find_iterator_base	/usr/include/boost/algorithm/string/detail/find_iterator.hpp	/^                ~find_iterator_base() {}$/;"	f	class:boost::algorithm::detail::find_iterator_base	access:protected	signature:()
~is_any_ofF	/usr/include/boost/algorithm/string/detail/classification.hpp	/^                ~is_any_ofF()$/;"	f	struct:boost::algorithm::detail::is_any_ofF	access:public	signature:()
~knuth_morris_pratt	/usr/include/boost/algorithm/searching/knuth_morris_pratt.hpp	/^        ~knuth_morris_pratt () {}$/;"	f	class:boost::algorithm::knuth_morris_pratt	access:public	signature:()
