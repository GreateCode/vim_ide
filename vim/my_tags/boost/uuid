!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/uuid/seed_rng.hpp	/^    result_type max BOOST_PREVENT_MACRO_SUBSTITUTION () const$/;"	f	class:boost::uuids::detail::seed_rng	access:public	signature:() const
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/uuid/seed_rng.hpp	/^    result_type min BOOST_PREVENT_MACRO_SUBSTITUTION () const$/;"	f	class:boost::uuids::detail::seed_rng	access:public	signature:() const
BOOST_STATIC_CONSTANT	/usr/include/boost/uuid/seed_rng.hpp	/^    BOOST_STATIC_CONSTANT(bool, has_fixed_range = false);$/;"	p	class:boost::uuids::detail::seed_rng	access:public	signature:(bool, has_fixed_range = false)
BOOST_UUID_GENERATORS_HPP	/usr/include/boost/uuid/uuid_generators.hpp	12;"	d
BOOST_UUID_HPP	/usr/include/boost/uuid/uuid.hpp	33;"	d
BOOST_UUID_IO_HPP	/usr/include/boost/uuid/uuid_io.hpp	13;"	d
BOOST_UUID_NAME_GENERATOR_HPP	/usr/include/boost/uuid/name_generator.hpp	9;"	d
BOOST_UUID_NIL_GENERATOR_HPP	/usr/include/boost/uuid/nil_generator.hpp	9;"	d
BOOST_UUID_RANDOM_GENERATOR_HPP	/usr/include/boost/uuid/random_generator.hpp	9;"	d
BOOST_UUID_SEED_RNG_HPP	/usr/include/boost/uuid/seed_rng.hpp	22;"	d
BOOST_UUID_SERIALIZE_HPP	/usr/include/boost/uuid/uuid_serialize.hpp	13;"	d
BOOST_UUID_SHA1_H	/usr/include/boost/uuid/sha1.hpp	16;"	d
BOOST_UUID_STRING_GENERATOR_HPP	/usr/include/boost/uuid/string_generator.hpp	9;"	d
basic_random_generator	/usr/include/boost/uuid/random_generator.hpp	/^    basic_random_generator()$/;"	f	class:boost::uuids::basic_random_generator	access:public	signature:()
basic_random_generator	/usr/include/boost/uuid/random_generator.hpp	/^    explicit basic_random_generator(UniformRandomNumberGenerator& gen)$/;"	f	class:boost::uuids::basic_random_generator	access:public	signature:(UniformRandomNumberGenerator& gen)
basic_random_generator	/usr/include/boost/uuid/random_generator.hpp	/^    explicit basic_random_generator(UniformRandomNumberGenerator* pGen)$/;"	f	class:boost::uuids::basic_random_generator	access:public	signature:(UniformRandomNumberGenerator* pGen)
basic_random_generator	/usr/include/boost/uuid/random_generator.hpp	/^class basic_random_generator {$/;"	c	namespace:boost::uuids
begin	/usr/include/boost/uuid/uuid.hpp	/^    const_iterator begin() const { return data; } \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:() const
begin	/usr/include/boost/uuid/uuid.hpp	/^    iterator begin() { return data; } \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:()
bit_count_high	/usr/include/boost/uuid/sha1.hpp	/^    std::size_t bit_count_high;$/;"	m	class:boost::uuids::detail::sha1	access:private
bit_count_low	/usr/include/boost/uuid/sha1.hpp	/^    std::size_t bit_count_low;$/;"	m	class:boost::uuids::detail::sha1	access:private
block_	/usr/include/boost/uuid/sha1.hpp	/^    unsigned char block_[64];$/;"	m	class:boost::uuids::detail::sha1	access:private
block_byte_index_	/usr/include/boost/uuid/sha1.hpp	/^    std::size_t block_byte_index_;$/;"	m	class:boost::uuids::detail::sha1	access:private
boost	/usr/include/boost/uuid/name_generator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/uuid/nil_generator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/uuid/random_generator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/uuid/seed_rng.hpp	/^namespace boost { namespace random {$/;"	n
boost	/usr/include/boost/uuid/seed_rng.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/uuid/sha1.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/uuid/string_generator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/uuid/uuid.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/uuid/uuid_io.hpp	/^namespace boost {$/;"	n
boost::is_pod	/usr/include/boost/uuid/uuid.hpp	/^struct is_pod<uuids::uuid> : true_type {};$/;"	s	namespace:boost	inherits:true_type
boost::random	/usr/include/boost/uuid/seed_rng.hpp	/^namespace boost { namespace random {$/;"	n	namespace:boost
boost::uuids	/usr/include/boost/uuid/name_generator.hpp	/^namespace uuids {$/;"	n	namespace:boost
boost::uuids	/usr/include/boost/uuid/nil_generator.hpp	/^namespace uuids {$/;"	n	namespace:boost
boost::uuids	/usr/include/boost/uuid/random_generator.hpp	/^namespace uuids {$/;"	n	namespace:boost
boost::uuids	/usr/include/boost/uuid/seed_rng.hpp	/^namespace uuids {$/;"	n	namespace:boost
boost::uuids	/usr/include/boost/uuid/sha1.hpp	/^namespace uuids {$/;"	n	namespace:boost
boost::uuids	/usr/include/boost/uuid/string_generator.hpp	/^namespace uuids {$/;"	n	namespace:boost
boost::uuids	/usr/include/boost/uuid/uuid.hpp	/^namespace uuids {$/;"	n	namespace:boost
boost::uuids	/usr/include/boost/uuid/uuid_io.hpp	/^namespace uuids {$/;"	n	namespace:boost
boost::uuids::basic_random_generator	/usr/include/boost/uuid/random_generator.hpp	/^class basic_random_generator {$/;"	c	namespace:boost::uuids
boost::uuids::basic_random_generator::basic_random_generator	/usr/include/boost/uuid/random_generator.hpp	/^    basic_random_generator()$/;"	f	class:boost::uuids::basic_random_generator	access:public	signature:()
boost::uuids::basic_random_generator::basic_random_generator	/usr/include/boost/uuid/random_generator.hpp	/^    explicit basic_random_generator(UniformRandomNumberGenerator& gen)$/;"	f	class:boost::uuids::basic_random_generator	access:public	signature:(UniformRandomNumberGenerator& gen)
boost::uuids::basic_random_generator::basic_random_generator	/usr/include/boost/uuid/random_generator.hpp	/^    explicit basic_random_generator(UniformRandomNumberGenerator* pGen)$/;"	f	class:boost::uuids::basic_random_generator	access:public	signature:(UniformRandomNumberGenerator* pGen)
boost::uuids::basic_random_generator::distribution_type	/usr/include/boost/uuid/random_generator.hpp	/^    typedef uniform_int<unsigned long> distribution_type;$/;"	t	class:boost::uuids::basic_random_generator	access:private
boost::uuids::basic_random_generator::generator	/usr/include/boost/uuid/random_generator.hpp	/^    generator_type generator;$/;"	m	class:boost::uuids::basic_random_generator	access:private
boost::uuids::basic_random_generator::generator_type	/usr/include/boost/uuid/random_generator.hpp	/^    typedef variate_generator<UniformRandomNumberGenerator*, distribution_type> generator_type;$/;"	t	class:boost::uuids::basic_random_generator	access:private
boost::uuids::basic_random_generator::null_deleter	/usr/include/boost/uuid/random_generator.hpp	/^    struct null_deleter$/;"	s	class:boost::uuids::basic_random_generator	access:private
boost::uuids::basic_random_generator::null_deleter::operator ()	/usr/include/boost/uuid/random_generator.hpp	/^        void operator()(void const *) const {}$/;"	f	struct:boost::uuids::basic_random_generator::null_deleter	access:public	signature:(void const *) const
boost::uuids::basic_random_generator::operator ()	/usr/include/boost/uuid/random_generator.hpp	/^    uuid operator()()$/;"	f	class:boost::uuids::basic_random_generator	access:public	signature:()
boost::uuids::basic_random_generator::pURNG	/usr/include/boost/uuid/random_generator.hpp	/^    shared_ptr<UniformRandomNumberGenerator> pURNG;$/;"	m	class:boost::uuids::basic_random_generator	access:private
boost::uuids::basic_random_generator::result_type	/usr/include/boost/uuid/random_generator.hpp	/^    typedef uuid result_type;$/;"	t	class:boost::uuids::basic_random_generator	access:public
boost::uuids::detail	/usr/include/boost/uuid/seed_rng.hpp	/^namespace detail {$/;"	n	namespace:boost::uuids
boost::uuids::detail	/usr/include/boost/uuid/sha1.hpp	/^namespace detail {$/;"	n	namespace:boost::uuids
boost::uuids::detail	/usr/include/boost/uuid/uuid_io.hpp	/^namespace detail {$/;"	n	namespace:boost::uuids
boost::uuids::detail::generator_iterator	/usr/include/boost/uuid/seed_rng.hpp	/^class generator_iterator$/;"	c	namespace:boost::uuids::detail	inherits:iterator_facade
boost::uuids::detail::generator_iterator::dereference	/usr/include/boost/uuid/seed_rng.hpp	/^    dereference() const$/;"	f	class:boost::uuids::detail::generator_iterator	access:public	signature:() const
boost::uuids::detail::generator_iterator::equal	/usr/include/boost/uuid/seed_rng.hpp	/^    bool equal(generator_iterator const& y) const$/;"	f	class:boost::uuids::detail::generator_iterator	access:public	signature:(generator_iterator const& y) const
boost::uuids::detail::generator_iterator::generator_iterator	/usr/include/boost/uuid/seed_rng.hpp	/^    generator_iterator() : m_g(NULL), m_value(0) {}$/;"	f	class:boost::uuids::detail::generator_iterator	access:public	signature:()
boost::uuids::detail::generator_iterator::generator_iterator	/usr/include/boost/uuid/seed_rng.hpp	/^    generator_iterator(Generator* g) : m_g(g), m_value((*m_g)()) {}$/;"	f	class:boost::uuids::detail::generator_iterator	access:public	signature:(Generator* g)
boost::uuids::detail::generator_iterator::increment	/usr/include/boost/uuid/seed_rng.hpp	/^    void increment()$/;"	f	class:boost::uuids::detail::generator_iterator	access:public	signature:()
boost::uuids::detail::generator_iterator::m_g	/usr/include/boost/uuid/seed_rng.hpp	/^    Generator* m_g;$/;"	m	class:boost::uuids::detail::generator_iterator	access:private
boost::uuids::detail::generator_iterator::m_value	/usr/include/boost/uuid/seed_rng.hpp	/^    typename Generator::result_type m_value;$/;"	m	class:boost::uuids::detail::generator_iterator	access:private
boost::uuids::detail::generator_iterator::super_t	/usr/include/boost/uuid/seed_rng.hpp	/^    > super_t;$/;"	t	class:boost::uuids::detail::generator_iterator	access:private
boost::uuids::detail::left_rotate	/usr/include/boost/uuid/sha1.hpp	/^inline unsigned int left_rotate(unsigned int x, std::size_t n)$/;"	f	namespace:boost::uuids::detail	signature:(unsigned int x, std::size_t n)
boost::uuids::detail::seed	/usr/include/boost/uuid/seed_rng.hpp	/^inline void seed(UniformRandomNumberGenerator& rng)$/;"	f	namespace:boost::uuids::detail	signature:(UniformRandomNumberGenerator& rng)
boost::uuids::detail::seed	/usr/include/boost/uuid/seed_rng.hpp	/^inline void seed<boost::random::random_device>(boost::random::random_device&) {}$/;"	f	namespace:boost::uuids::detail	signature:(boost::random::random_device&)
boost::uuids::detail::seed	/usr/include/boost/uuid/seed_rng.hpp	/^inline void seed<seed_rng>(seed_rng&) {}$/;"	f	namespace:boost::uuids::detail	signature:(seed_rng&)
boost::uuids::detail::seed_rng	/usr/include/boost/uuid/seed_rng.hpp	/^class seed_rng$/;"	c	namespace:boost::uuids::detail
boost::uuids::detail::seed_rng::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/uuid/seed_rng.hpp	/^    result_type max BOOST_PREVENT_MACRO_SUBSTITUTION () const$/;"	f	class:boost::uuids::detail::seed_rng	access:public	signature:() const
boost::uuids::detail::seed_rng::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/uuid/seed_rng.hpp	/^    result_type min BOOST_PREVENT_MACRO_SUBSTITUTION () const$/;"	f	class:boost::uuids::detail::seed_rng	access:public	signature:() const
boost::uuids::detail::seed_rng::BOOST_STATIC_CONSTANT	/usr/include/boost/uuid/seed_rng.hpp	/^    BOOST_STATIC_CONSTANT(bool, has_fixed_range = false);$/;"	p	class:boost::uuids::detail::seed_rng	access:public	signature:(bool, has_fixed_range = false)
boost::uuids::detail::seed_rng::ignore_size	/usr/include/boost/uuid/seed_rng.hpp	/^    inline void ignore_size(size_t) {}$/;"	f	class:boost::uuids::detail::seed_rng	access:private	signature:(size_t)
boost::uuids::detail::seed_rng::operator ()	/usr/include/boost/uuid/seed_rng.hpp	/^    result_type operator()()$/;"	f	class:boost::uuids::detail::seed_rng	access:public	signature:()
boost::uuids::detail::seed_rng::operator =	/usr/include/boost/uuid/seed_rng.hpp	/^    seed_rng& operator=(seed_rng const&);$/;"	p	class:boost::uuids::detail::seed_rng	access:private	signature:(seed_rng const&)
boost::uuids::detail::seed_rng::random_	/usr/include/boost/uuid/seed_rng.hpp	/^    std::FILE * random_;$/;"	m	class:boost::uuids::detail::seed_rng	access:private
boost::uuids::detail::seed_rng::rd_	/usr/include/boost/uuid/seed_rng.hpp	/^    unsigned int rd_[5];$/;"	m	class:boost::uuids::detail::seed_rng	access:private
boost::uuids::detail::seed_rng::rd_index_	/usr/include/boost/uuid/seed_rng.hpp	/^    int rd_index_;$/;"	m	class:boost::uuids::detail::seed_rng	access:private
boost::uuids::detail::seed_rng::result_type	/usr/include/boost/uuid/seed_rng.hpp	/^    typedef unsigned int result_type;$/;"	t	class:boost::uuids::detail::seed_rng	access:public
boost::uuids::detail::seed_rng::seed_rng	/usr/include/boost/uuid/seed_rng.hpp	/^    seed_rng()$/;"	f	class:boost::uuids::detail::seed_rng	access:public	signature:()
boost::uuids::detail::seed_rng::seed_rng	/usr/include/boost/uuid/seed_rng.hpp	/^    seed_rng(seed_rng const&);$/;"	p	class:boost::uuids::detail::seed_rng	access:private	signature:(seed_rng const&)
boost::uuids::detail::seed_rng::sha1_random_digest_	/usr/include/boost/uuid/seed_rng.hpp	/^    void sha1_random_digest_()$/;"	f	class:boost::uuids::detail::seed_rng	access:private	signature:()
boost::uuids::detail::seed_rng::sha1_random_digest_state_	/usr/include/boost/uuid/seed_rng.hpp	/^    static unsigned int * sha1_random_digest_state_()$/;"	f	class:boost::uuids::detail::seed_rng	access:private	signature:()
boost::uuids::detail::seed_rng::~seed_rng	/usr/include/boost/uuid/seed_rng.hpp	/^    ~seed_rng()$/;"	f	class:boost::uuids::detail::seed_rng	access:public	signature:()
boost::uuids::detail::sha1	/usr/include/boost/uuid/sha1.hpp	/^class sha1$/;"	c	namespace:boost::uuids::detail
boost::uuids::detail::sha1::bit_count_high	/usr/include/boost/uuid/sha1.hpp	/^    std::size_t bit_count_high;$/;"	m	class:boost::uuids::detail::sha1	access:private
boost::uuids::detail::sha1::bit_count_low	/usr/include/boost/uuid/sha1.hpp	/^    std::size_t bit_count_low;$/;"	m	class:boost::uuids::detail::sha1	access:private
boost::uuids::detail::sha1::block_	/usr/include/boost/uuid/sha1.hpp	/^    unsigned char block_[64];$/;"	m	class:boost::uuids::detail::sha1	access:private
boost::uuids::detail::sha1::block_byte_index_	/usr/include/boost/uuid/sha1.hpp	/^    std::size_t block_byte_index_;$/;"	m	class:boost::uuids::detail::sha1	access:private
boost::uuids::detail::sha1::digest_type	/usr/include/boost/uuid/sha1.hpp	/^    typedef unsigned int(&digest_type)[5];$/;"	t	class:boost::uuids::detail::sha1	access:public
boost::uuids::detail::sha1::get_digest	/usr/include/boost/uuid/sha1.hpp	/^    void get_digest(digest_type digest);$/;"	p	class:boost::uuids::detail::sha1	access:public	signature:(digest_type digest)
boost::uuids::detail::sha1::get_digest	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::get_digest(digest_type digest)$/;"	f	class:boost::uuids::detail::sha1	signature:(digest_type digest)
boost::uuids::detail::sha1::h_	/usr/include/boost/uuid/sha1.hpp	/^    unsigned int h_[5];$/;"	m	class:boost::uuids::detail::sha1	access:private
boost::uuids::detail::sha1::process_block	/usr/include/boost/uuid/sha1.hpp	/^    void process_block();$/;"	p	class:boost::uuids::detail::sha1	access:private	signature:()
boost::uuids::detail::sha1::process_block	/usr/include/boost/uuid/sha1.hpp	/^    void process_block(void const* bytes_begin, void const* bytes_end);$/;"	p	class:boost::uuids::detail::sha1	access:public	signature:(void const* bytes_begin, void const* bytes_end)
boost::uuids::detail::sha1::process_block	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::process_block()$/;"	f	class:boost::uuids::detail::sha1	signature:()
boost::uuids::detail::sha1::process_block	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::process_block(void const* bytes_begin, void const* bytes_end)$/;"	f	class:boost::uuids::detail::sha1	signature:(void const* bytes_begin, void const* bytes_end)
boost::uuids::detail::sha1::process_byte	/usr/include/boost/uuid/sha1.hpp	/^    void process_byte(unsigned char byte);$/;"	p	class:boost::uuids::detail::sha1	access:public	signature:(unsigned char byte)
boost::uuids::detail::sha1::process_byte	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::process_byte(unsigned char byte)$/;"	f	class:boost::uuids::detail::sha1	signature:(unsigned char byte)
boost::uuids::detail::sha1::process_byte_impl	/usr/include/boost/uuid/sha1.hpp	/^    void process_byte_impl(unsigned char byte);$/;"	p	class:boost::uuids::detail::sha1	access:private	signature:(unsigned char byte)
boost::uuids::detail::sha1::process_byte_impl	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::process_byte_impl(unsigned char byte)$/;"	f	class:boost::uuids::detail::sha1	signature:(unsigned char byte)
boost::uuids::detail::sha1::process_bytes	/usr/include/boost/uuid/sha1.hpp	/^    void process_bytes(void const* buffer, std::size_t byte_count);$/;"	p	class:boost::uuids::detail::sha1	access:public	signature:(void const* buffer, std::size_t byte_count)
boost::uuids::detail::sha1::process_bytes	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::process_bytes(void const* buffer, std::size_t byte_count)$/;"	f	class:boost::uuids::detail::sha1	signature:(void const* buffer, std::size_t byte_count)
boost::uuids::detail::sha1::reset	/usr/include/boost/uuid/sha1.hpp	/^    void reset();$/;"	p	class:boost::uuids::detail::sha1	access:public	signature:()
boost::uuids::detail::sha1::reset	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::reset()$/;"	f	class:boost::uuids::detail::sha1	signature:()
boost::uuids::detail::sha1::sha1	/usr/include/boost/uuid/sha1.hpp	/^    sha1();$/;"	p	class:boost::uuids::detail::sha1	access:public	signature:()
boost::uuids::detail::sha1::sha1	/usr/include/boost/uuid/sha1.hpp	/^inline sha1::sha1()$/;"	f	class:boost::uuids::detail::sha1	signature:()
boost::uuids::detail::sizeof	/usr/include/boost/uuid/sha1.hpp	/^BOOST_STATIC_ASSERT(sizeof(unsigned char)*8 == 8);$/;"	p	namespace:boost::uuids::detail	signature:(unsigned char)
boost::uuids::detail::sizeof	/usr/include/boost/uuid/sha1.hpp	/^BOOST_STATIC_ASSERT(sizeof(unsigned int)*8 == 32);$/;"	p	namespace:boost::uuids::detail	signature:(unsigned int)
boost::uuids::detail::to_char	/usr/include/boost/uuid/uuid_io.hpp	/^inline char to_char(size_t i) {$/;"	f	namespace:boost::uuids::detail	signature:(size_t i)
boost::uuids::detail::to_wchar	/usr/include/boost/uuid/uuid_io.hpp	/^inline wchar_t to_wchar(size_t i) {$/;"	f	namespace:boost::uuids::detail	signature:(size_t i)
boost::uuids::hash_value	/usr/include/boost/uuid/uuid.hpp	/^inline std::size_t hash_value(uuid const& u) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& u)
boost::uuids::name_generator	/usr/include/boost/uuid/name_generator.hpp	/^class name_generator {$/;"	c	namespace:boost::uuids
boost::uuids::name_generator::name_generator	/usr/include/boost/uuid/name_generator.hpp	/^    explicit name_generator(uuid const& namespace_uuid)$/;"	f	class:boost::uuids::name_generator	access:public	signature:(uuid const& namespace_uuid)
boost::uuids::name_generator::namespace_uuid	/usr/include/boost/uuid/name_generator.hpp	/^    uuid namespace_uuid;$/;"	m	class:boost::uuids::name_generator	access:private
boost::uuids::name_generator::operator ()	/usr/include/boost/uuid/name_generator.hpp	/^    uuid operator()(const char* name) {$/;"	f	class:boost::uuids::name_generator	access:public	signature:(const char* name)
boost::uuids::name_generator::operator ()	/usr/include/boost/uuid/name_generator.hpp	/^    uuid operator()(const wchar_t* name) {$/;"	f	class:boost::uuids::name_generator	access:public	signature:(const wchar_t* name)
boost::uuids::name_generator::operator ()	/usr/include/boost/uuid/name_generator.hpp	/^    uuid operator()(std::basic_string<ch, char_traits, alloc> const& name) {$/;"	f	class:boost::uuids::name_generator	access:public	signature:(std::basic_string<ch, char_traits, alloc> const& name)
boost::uuids::name_generator::operator ()	/usr/include/boost/uuid/name_generator.hpp	/^    uuid operator()(void const* buffer, std::size_t byte_count) {$/;"	f	class:boost::uuids::name_generator	access:public	signature:(void const* buffer, std::size_t byte_count)
boost::uuids::name_generator::process_characters	/usr/include/boost/uuid/name_generator.hpp	/^    void process_characters(char const*const characters, size_t count) {$/;"	f	class:boost::uuids::name_generator	access:private	signature:(char const*const characters, size_t count)
boost::uuids::name_generator::process_characters	/usr/include/boost/uuid/name_generator.hpp	/^    void process_characters(char_type const*const characters, size_t count) {$/;"	f	class:boost::uuids::name_generator	access:private	signature:(char_type const*const characters, size_t count)
boost::uuids::name_generator::reset	/usr/include/boost/uuid/name_generator.hpp	/^    void reset()$/;"	f	class:boost::uuids::name_generator	access:private	signature:()
boost::uuids::name_generator::result_type	/usr/include/boost/uuid/name_generator.hpp	/^    typedef uuid result_type;$/;"	t	class:boost::uuids::name_generator	access:public
boost::uuids::name_generator::sha	/usr/include/boost/uuid/name_generator.hpp	/^    detail::sha1 sha;$/;"	m	class:boost::uuids::name_generator	access:private
boost::uuids::name_generator::sha_to_uuid	/usr/include/boost/uuid/name_generator.hpp	/^    uuid sha_to_uuid()$/;"	f	class:boost::uuids::name_generator	access:private	signature:()
boost::uuids::nil_generator	/usr/include/boost/uuid/nil_generator.hpp	/^struct nil_generator {$/;"	s	namespace:boost::uuids
boost::uuids::nil_generator::operator ()	/usr/include/boost/uuid/nil_generator.hpp	/^    uuid operator()() const {$/;"	f	struct:boost::uuids::nil_generator	access:public	signature:() const
boost::uuids::nil_generator::result_type	/usr/include/boost/uuid/nil_generator.hpp	/^    typedef uuid result_type;$/;"	t	struct:boost::uuids::nil_generator	access:public
boost::uuids::nil_uuid	/usr/include/boost/uuid/nil_generator.hpp	/^inline uuid nil_uuid() {$/;"	f	namespace:boost::uuids	signature:()
boost::uuids::operator !=	/usr/include/boost/uuid/uuid.hpp	/^inline bool operator!=(uuid const& lhs, uuid const& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& lhs, uuid const& rhs)
boost::uuids::operator <	/usr/include/boost/uuid/uuid.hpp	/^inline bool operator<(uuid const& lhs, uuid const& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& lhs, uuid const& rhs)
boost::uuids::operator <<	/usr/include/boost/uuid/uuid_io.hpp	/^    std::basic_ostream<ch, char_traits>& operator<<(std::basic_ostream<ch, char_traits> &os, uuid const& u)$/;"	f	namespace:boost::uuids	signature:(std::basic_ostream<ch, char_traits> &os, uuid const& u)
boost::uuids::operator <=	/usr/include/boost/uuid/uuid.hpp	/^inline bool operator<=(uuid const& lhs, uuid const& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& lhs, uuid const& rhs)
boost::uuids::operator ==	/usr/include/boost/uuid/uuid.hpp	/^inline bool operator==(uuid const& lhs, uuid const& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& lhs, uuid const& rhs)
boost::uuids::operator >	/usr/include/boost/uuid/uuid.hpp	/^inline bool operator>(uuid const& lhs, uuid const& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& lhs, uuid const& rhs)
boost::uuids::operator >=	/usr/include/boost/uuid/uuid.hpp	/^inline bool operator>=(uuid const& lhs, uuid const& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& lhs, uuid const& rhs)
boost::uuids::operator >>	/usr/include/boost/uuid/uuid_io.hpp	/^    std::basic_istream<ch, char_traits>& operator>>(std::basic_istream<ch, char_traits> &is, uuid &u)$/;"	f	namespace:boost::uuids	signature:(std::basic_istream<ch, char_traits> &is, uuid &u)
boost::uuids::random_generator	/usr/include/boost/uuid/random_generator.hpp	/^typedef basic_random_generator<mt19937> random_generator;$/;"	t	namespace:boost::uuids
boost::uuids::string_generator	/usr/include/boost/uuid/string_generator.hpp	/^struct string_generator {$/;"	s	namespace:boost::uuids
boost::uuids::string_generator::check_close_brace	/usr/include/boost/uuid/string_generator.hpp	/^    void check_close_brace(char c, char open_brace) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(char c, char open_brace) const
boost::uuids::string_generator::check_close_brace	/usr/include/boost/uuid/string_generator.hpp	/^    void check_close_brace(wchar_t c, wchar_t open_brace) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(wchar_t c, wchar_t open_brace) const
boost::uuids::string_generator::get_next_char	/usr/include/boost/uuid/string_generator.hpp	/^    get_next_char(CharIterator& begin, CharIterator end) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(CharIterator& begin, CharIterator end) const
boost::uuids::string_generator::get_value	/usr/include/boost/uuid/string_generator.hpp	/^    unsigned char get_value(char c) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(char c) const
boost::uuids::string_generator::get_value	/usr/include/boost/uuid/string_generator.hpp	/^    unsigned char get_value(wchar_t c) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(wchar_t c) const
boost::uuids::string_generator::is_dash	/usr/include/boost/uuid/string_generator.hpp	/^    bool is_dash(char c) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(char c) const
boost::uuids::string_generator::is_dash	/usr/include/boost/uuid/string_generator.hpp	/^    bool is_dash(wchar_t c) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(wchar_t c) const
boost::uuids::string_generator::is_open_brace	/usr/include/boost/uuid/string_generator.hpp	/^    bool is_open_brace(char c) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(char c) const
boost::uuids::string_generator::is_open_brace	/usr/include/boost/uuid/string_generator.hpp	/^    bool is_open_brace(wchar_t c) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(wchar_t c) const
boost::uuids::string_generator::operator ()	/usr/include/boost/uuid/string_generator.hpp	/^    uuid operator()(CharIterator begin, CharIterator end) const$/;"	f	struct:boost::uuids::string_generator	access:public	signature:(CharIterator begin, CharIterator end) const
boost::uuids::string_generator::operator ()	/usr/include/boost/uuid/string_generator.hpp	/^    uuid operator()(char const*const s) const {$/;"	f	struct:boost::uuids::string_generator	access:public	signature:(char const*const s) const
boost::uuids::string_generator::operator ()	/usr/include/boost/uuid/string_generator.hpp	/^    uuid operator()(std::basic_string<ch, char_traits, alloc> const& s) const {$/;"	f	struct:boost::uuids::string_generator	access:public	signature:(std::basic_string<ch, char_traits, alloc> const& s) const
boost::uuids::string_generator::operator ()	/usr/include/boost/uuid/string_generator.hpp	/^    uuid operator()(wchar_t const*const s) const {$/;"	f	struct:boost::uuids::string_generator	access:public	signature:(wchar_t const*const s) const
boost::uuids::string_generator::result_type	/usr/include/boost/uuid/string_generator.hpp	/^    typedef uuid result_type;$/;"	t	struct:boost::uuids::string_generator	access:public
boost::uuids::string_generator::throw_invalid	/usr/include/boost/uuid/string_generator.hpp	/^    void throw_invalid() const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:() const
boost::uuids::swap	/usr/include/boost/uuid/uuid.hpp	/^inline void swap(uuid& lhs, uuid& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid& lhs, uuid& rhs)
boost::uuids::to_string	/usr/include/boost/uuid/uuid_io.hpp	/^inline std::string to_string(uuid const& u)$/;"	f	namespace:boost::uuids	signature:(uuid const& u)
boost::uuids::to_wstring	/usr/include/boost/uuid/uuid_io.hpp	/^inline std::wstring to_wstring(uuid const& u)$/;"	f	namespace:boost::uuids	signature:(uuid const& u)
boost::uuids::uuid	/usr/include/boost/uuid/uuid.hpp	/^struct uuid$/;"	s	namespace:boost::uuids
boost::uuids::uuid::begin	/usr/include/boost/uuid/uuid.hpp	/^    const_iterator begin() const { return data; } \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:() const
boost::uuids::uuid::begin	/usr/include/boost/uuid/uuid.hpp	/^    iterator begin() { return data; } \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:()
boost::uuids::uuid::const_iterator	/usr/include/boost/uuid/uuid.hpp	/^    typedef uint8_t const* const_iterator;$/;"	t	struct:boost::uuids::uuid	access:public
boost::uuids::uuid::const_reference	/usr/include/boost/uuid/uuid.hpp	/^    typedef uint8_t const& const_reference;$/;"	t	struct:boost::uuids::uuid	access:public
boost::uuids::uuid::data	/usr/include/boost/uuid/uuid.hpp	/^    uint8_t data[16];$/;"	m	struct:boost::uuids::uuid	access:public
boost::uuids::uuid::difference_type	/usr/include/boost/uuid/uuid.hpp	/^    typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::uuids::uuid	access:public
boost::uuids::uuid::end	/usr/include/boost/uuid/uuid.hpp	/^    const_iterator end() const { return data+size(); } \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:() const
boost::uuids::uuid::end	/usr/include/boost/uuid/uuid.hpp	/^    iterator end() { return data+size(); } \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:()
boost::uuids::uuid::is_nil	/usr/include/boost/uuid/uuid.hpp	/^    bool is_nil() const \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:() const
boost::uuids::uuid::iterator	/usr/include/boost/uuid/uuid.hpp	/^    typedef uint8_t* iterator;$/;"	t	struct:boost::uuids::uuid	access:public
boost::uuids::uuid::reference	/usr/include/boost/uuid/uuid.hpp	/^    typedef uint8_t& reference;$/;"	t	struct:boost::uuids::uuid	access:public
boost::uuids::uuid::size	/usr/include/boost/uuid/uuid.hpp	/^    size_type size() const { return static_size(); } \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:() const
boost::uuids::uuid::size_type	/usr/include/boost/uuid/uuid.hpp	/^    typedef std::size_t size_type;$/;"	t	struct:boost::uuids::uuid	access:public
boost::uuids::uuid::static_size	/usr/include/boost/uuid/uuid.hpp	/^    static size_type static_size() { return 16; }$/;"	f	struct:boost::uuids::uuid	access:public	signature:()
boost::uuids::uuid::swap	/usr/include/boost/uuid/uuid.hpp	/^    void swap(uuid& rhs) \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:(uuid& rhs)
boost::uuids::uuid::value_type	/usr/include/boost/uuid/uuid.hpp	/^    typedef uint8_t value_type;$/;"	t	struct:boost::uuids::uuid	access:public
boost::uuids::uuid::variant	/usr/include/boost/uuid/uuid.hpp	/^    variant_type variant() const \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:() const
boost::uuids::uuid::variant_future	/usr/include/boost/uuid/uuid.hpp	/^        variant_future \/\/ future definition$/;"	e	enum:boost::uuids::uuid::variant_type
boost::uuids::uuid::variant_microsoft	/usr/include/boost/uuid/uuid.hpp	/^        variant_microsoft, \/\/ Microsoft Corporation backward compatibility$/;"	e	enum:boost::uuids::uuid::variant_type
boost::uuids::uuid::variant_ncs	/usr/include/boost/uuid/uuid.hpp	/^        variant_ncs, \/\/ NCS backward compatibility$/;"	e	enum:boost::uuids::uuid::variant_type
boost::uuids::uuid::variant_rfc_4122	/usr/include/boost/uuid/uuid.hpp	/^        variant_rfc_4122, \/\/ defined in RFC 4122 document$/;"	e	enum:boost::uuids::uuid::variant_type
boost::uuids::uuid::variant_type	/usr/include/boost/uuid/uuid.hpp	/^    enum variant_type$/;"	g	struct:boost::uuids::uuid	access:public
boost::uuids::uuid::version	/usr/include/boost/uuid/uuid.hpp	/^    version_type version() const \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:() const
boost::uuids::uuid::version_dce_security	/usr/include/boost/uuid/uuid.hpp	/^        version_dce_security = 2,$/;"	e	enum:boost::uuids::uuid::version_type
boost::uuids::uuid::version_name_based_md5	/usr/include/boost/uuid/uuid.hpp	/^        version_name_based_md5 = 3,$/;"	e	enum:boost::uuids::uuid::version_type
boost::uuids::uuid::version_name_based_sha1	/usr/include/boost/uuid/uuid.hpp	/^        version_name_based_sha1 = 5$/;"	e	enum:boost::uuids::uuid::version_type
boost::uuids::uuid::version_random_number_based	/usr/include/boost/uuid/uuid.hpp	/^        version_random_number_based = 4,$/;"	e	enum:boost::uuids::uuid::version_type
boost::uuids::uuid::version_time_based	/usr/include/boost/uuid/uuid.hpp	/^        version_time_based = 1,$/;"	e	enum:boost::uuids::uuid::version_type
boost::uuids::uuid::version_type	/usr/include/boost/uuid/uuid.hpp	/^    enum version_type $/;"	g	struct:boost::uuids::uuid	access:public
boost::uuids::uuid::version_unknown	/usr/include/boost/uuid/uuid.hpp	/^        version_unknown = -1,$/;"	e	enum:boost::uuids::uuid::version_type
check_close_brace	/usr/include/boost/uuid/string_generator.hpp	/^    void check_close_brace(char c, char open_brace) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(char c, char open_brace) const
check_close_brace	/usr/include/boost/uuid/string_generator.hpp	/^    void check_close_brace(wchar_t c, wchar_t open_brace) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(wchar_t c, wchar_t open_brace) const
const_iterator	/usr/include/boost/uuid/uuid.hpp	/^    typedef uint8_t const* const_iterator;$/;"	t	struct:boost::uuids::uuid	access:public
const_reference	/usr/include/boost/uuid/uuid.hpp	/^    typedef uint8_t const& const_reference;$/;"	t	struct:boost::uuids::uuid	access:public
data	/usr/include/boost/uuid/uuid.hpp	/^    uint8_t data[16];$/;"	m	struct:boost::uuids::uuid	access:public
dereference	/usr/include/boost/uuid/seed_rng.hpp	/^    dereference() const$/;"	f	class:boost::uuids::detail::generator_iterator	access:public	signature:() const
detail	/usr/include/boost/uuid/seed_rng.hpp	/^namespace detail {$/;"	n	namespace:boost::uuids
detail	/usr/include/boost/uuid/sha1.hpp	/^namespace detail {$/;"	n	namespace:boost::uuids
detail	/usr/include/boost/uuid/uuid_io.hpp	/^namespace detail {$/;"	n	namespace:boost::uuids
difference_type	/usr/include/boost/uuid/uuid.hpp	/^    typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::uuids::uuid	access:public
digest_type	/usr/include/boost/uuid/sha1.hpp	/^    typedef unsigned int(&digest_type)[5];$/;"	t	class:boost::uuids::detail::sha1	access:public
distribution_type	/usr/include/boost/uuid/random_generator.hpp	/^    typedef uniform_int<unsigned long> distribution_type;$/;"	t	class:boost::uuids::basic_random_generator	access:private
end	/usr/include/boost/uuid/uuid.hpp	/^    const_iterator end() const { return data+size(); } \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:() const
end	/usr/include/boost/uuid/uuid.hpp	/^    iterator end() { return data+size(); } \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:()
equal	/usr/include/boost/uuid/seed_rng.hpp	/^    bool equal(generator_iterator const& y) const$/;"	f	class:boost::uuids::detail::generator_iterator	access:public	signature:(generator_iterator const& y) const
generator	/usr/include/boost/uuid/random_generator.hpp	/^    generator_type generator;$/;"	m	class:boost::uuids::basic_random_generator	access:private
generator_iterator	/usr/include/boost/uuid/seed_rng.hpp	/^    generator_iterator() : m_g(NULL), m_value(0) {}$/;"	f	class:boost::uuids::detail::generator_iterator	access:public	signature:()
generator_iterator	/usr/include/boost/uuid/seed_rng.hpp	/^    generator_iterator(Generator* g) : m_g(g), m_value((*m_g)()) {}$/;"	f	class:boost::uuids::detail::generator_iterator	access:public	signature:(Generator* g)
generator_iterator	/usr/include/boost/uuid/seed_rng.hpp	/^class generator_iterator$/;"	c	namespace:boost::uuids::detail	inherits:iterator_facade
generator_type	/usr/include/boost/uuid/random_generator.hpp	/^    typedef variate_generator<UniformRandomNumberGenerator*, distribution_type> generator_type;$/;"	t	class:boost::uuids::basic_random_generator	access:private
get_digest	/usr/include/boost/uuid/sha1.hpp	/^    void get_digest(digest_type digest);$/;"	p	class:boost::uuids::detail::sha1	access:public	signature:(digest_type digest)
get_digest	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::get_digest(digest_type digest)$/;"	f	class:boost::uuids::detail::sha1	signature:(digest_type digest)
get_next_char	/usr/include/boost/uuid/string_generator.hpp	/^    get_next_char(CharIterator& begin, CharIterator end) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(CharIterator& begin, CharIterator end) const
get_value	/usr/include/boost/uuid/string_generator.hpp	/^    unsigned char get_value(char c) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(char c) const
get_value	/usr/include/boost/uuid/string_generator.hpp	/^    unsigned char get_value(wchar_t c) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(wchar_t c) const
h_	/usr/include/boost/uuid/sha1.hpp	/^    unsigned int h_[5];$/;"	m	class:boost::uuids::detail::sha1	access:private
hash_value	/usr/include/boost/uuid/uuid.hpp	/^inline std::size_t hash_value(uuid const& u) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& u)
ignore_size	/usr/include/boost/uuid/seed_rng.hpp	/^    inline void ignore_size(size_t) {}$/;"	f	class:boost::uuids::detail::seed_rng	access:private	signature:(size_t)
increment	/usr/include/boost/uuid/seed_rng.hpp	/^    void increment()$/;"	f	class:boost::uuids::detail::generator_iterator	access:public	signature:()
is_dash	/usr/include/boost/uuid/string_generator.hpp	/^    bool is_dash(char c) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(char c) const
is_dash	/usr/include/boost/uuid/string_generator.hpp	/^    bool is_dash(wchar_t c) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(wchar_t c) const
is_nil	/usr/include/boost/uuid/uuid.hpp	/^    bool is_nil() const \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:() const
is_open_brace	/usr/include/boost/uuid/string_generator.hpp	/^    bool is_open_brace(char c) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(char c) const
is_open_brace	/usr/include/boost/uuid/string_generator.hpp	/^    bool is_open_brace(wchar_t c) const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:(wchar_t c) const
is_pod	/usr/include/boost/uuid/uuid.hpp	/^struct is_pod<uuids::uuid> : true_type {};$/;"	s	namespace:boost	inherits:true_type
iterator	/usr/include/boost/uuid/uuid.hpp	/^    typedef uint8_t* iterator;$/;"	t	struct:boost::uuids::uuid	access:public
left_rotate	/usr/include/boost/uuid/sha1.hpp	/^inline unsigned int left_rotate(unsigned int x, std::size_t n)$/;"	f	namespace:boost::uuids::detail	signature:(unsigned int x, std::size_t n)
m_g	/usr/include/boost/uuid/seed_rng.hpp	/^    Generator* m_g;$/;"	m	class:boost::uuids::detail::generator_iterator	access:private
m_value	/usr/include/boost/uuid/seed_rng.hpp	/^    typename Generator::result_type m_value;$/;"	m	class:boost::uuids::detail::generator_iterator	access:private
name_generator	/usr/include/boost/uuid/name_generator.hpp	/^    explicit name_generator(uuid const& namespace_uuid)$/;"	f	class:boost::uuids::name_generator	access:public	signature:(uuid const& namespace_uuid)
name_generator	/usr/include/boost/uuid/name_generator.hpp	/^class name_generator {$/;"	c	namespace:boost::uuids
namespace_uuid	/usr/include/boost/uuid/name_generator.hpp	/^    uuid namespace_uuid;$/;"	m	class:boost::uuids::name_generator	access:private
nil_generator	/usr/include/boost/uuid/nil_generator.hpp	/^struct nil_generator {$/;"	s	namespace:boost::uuids
nil_uuid	/usr/include/boost/uuid/nil_generator.hpp	/^inline uuid nil_uuid() {$/;"	f	namespace:boost::uuids	signature:()
null_deleter	/usr/include/boost/uuid/random_generator.hpp	/^    struct null_deleter$/;"	s	class:boost::uuids::basic_random_generator	access:private
operator !=	/usr/include/boost/uuid/uuid.hpp	/^inline bool operator!=(uuid const& lhs, uuid const& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& lhs, uuid const& rhs)
operator ()	/usr/include/boost/uuid/name_generator.hpp	/^    uuid operator()(const char* name) {$/;"	f	class:boost::uuids::name_generator	access:public	signature:(const char* name)
operator ()	/usr/include/boost/uuid/name_generator.hpp	/^    uuid operator()(const wchar_t* name) {$/;"	f	class:boost::uuids::name_generator	access:public	signature:(const wchar_t* name)
operator ()	/usr/include/boost/uuid/name_generator.hpp	/^    uuid operator()(std::basic_string<ch, char_traits, alloc> const& name) {$/;"	f	class:boost::uuids::name_generator	access:public	signature:(std::basic_string<ch, char_traits, alloc> const& name)
operator ()	/usr/include/boost/uuid/name_generator.hpp	/^    uuid operator()(void const* buffer, std::size_t byte_count) {$/;"	f	class:boost::uuids::name_generator	access:public	signature:(void const* buffer, std::size_t byte_count)
operator ()	/usr/include/boost/uuid/nil_generator.hpp	/^    uuid operator()() const {$/;"	f	struct:boost::uuids::nil_generator	access:public	signature:() const
operator ()	/usr/include/boost/uuid/random_generator.hpp	/^        void operator()(void const *) const {}$/;"	f	struct:boost::uuids::basic_random_generator::null_deleter	access:public	signature:(void const *) const
operator ()	/usr/include/boost/uuid/random_generator.hpp	/^    uuid operator()()$/;"	f	class:boost::uuids::basic_random_generator	access:public	signature:()
operator ()	/usr/include/boost/uuid/seed_rng.hpp	/^    result_type operator()()$/;"	f	class:boost::uuids::detail::seed_rng	access:public	signature:()
operator ()	/usr/include/boost/uuid/string_generator.hpp	/^    uuid operator()(CharIterator begin, CharIterator end) const$/;"	f	struct:boost::uuids::string_generator	access:public	signature:(CharIterator begin, CharIterator end) const
operator ()	/usr/include/boost/uuid/string_generator.hpp	/^    uuid operator()(char const*const s) const {$/;"	f	struct:boost::uuids::string_generator	access:public	signature:(char const*const s) const
operator ()	/usr/include/boost/uuid/string_generator.hpp	/^    uuid operator()(std::basic_string<ch, char_traits, alloc> const& s) const {$/;"	f	struct:boost::uuids::string_generator	access:public	signature:(std::basic_string<ch, char_traits, alloc> const& s) const
operator ()	/usr/include/boost/uuid/string_generator.hpp	/^    uuid operator()(wchar_t const*const s) const {$/;"	f	struct:boost::uuids::string_generator	access:public	signature:(wchar_t const*const s) const
operator <	/usr/include/boost/uuid/uuid.hpp	/^inline bool operator<(uuid const& lhs, uuid const& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& lhs, uuid const& rhs)
operator <<	/usr/include/boost/uuid/uuid_io.hpp	/^    std::basic_ostream<ch, char_traits>& operator<<(std::basic_ostream<ch, char_traits> &os, uuid const& u)$/;"	f	namespace:boost::uuids	signature:(std::basic_ostream<ch, char_traits> &os, uuid const& u)
operator <=	/usr/include/boost/uuid/uuid.hpp	/^inline bool operator<=(uuid const& lhs, uuid const& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& lhs, uuid const& rhs)
operator =	/usr/include/boost/uuid/seed_rng.hpp	/^    seed_rng& operator=(seed_rng const&);$/;"	p	class:boost::uuids::detail::seed_rng	access:private	signature:(seed_rng const&)
operator ==	/usr/include/boost/uuid/uuid.hpp	/^inline bool operator==(uuid const& lhs, uuid const& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& lhs, uuid const& rhs)
operator >	/usr/include/boost/uuid/uuid.hpp	/^inline bool operator>(uuid const& lhs, uuid const& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& lhs, uuid const& rhs)
operator >=	/usr/include/boost/uuid/uuid.hpp	/^inline bool operator>=(uuid const& lhs, uuid const& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid const& lhs, uuid const& rhs)
operator >>	/usr/include/boost/uuid/uuid_io.hpp	/^    std::basic_istream<ch, char_traits>& operator>>(std::basic_istream<ch, char_traits> &is, uuid &u)$/;"	f	namespace:boost::uuids	signature:(std::basic_istream<ch, char_traits> &is, uuid &u)
pURNG	/usr/include/boost/uuid/random_generator.hpp	/^    shared_ptr<UniformRandomNumberGenerator> pURNG;$/;"	m	class:boost::uuids::basic_random_generator	access:private
process_block	/usr/include/boost/uuid/sha1.hpp	/^    void process_block();$/;"	p	class:boost::uuids::detail::sha1	access:private	signature:()
process_block	/usr/include/boost/uuid/sha1.hpp	/^    void process_block(void const* bytes_begin, void const* bytes_end);$/;"	p	class:boost::uuids::detail::sha1	access:public	signature:(void const* bytes_begin, void const* bytes_end)
process_block	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::process_block()$/;"	f	class:boost::uuids::detail::sha1	signature:()
process_block	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::process_block(void const* bytes_begin, void const* bytes_end)$/;"	f	class:boost::uuids::detail::sha1	signature:(void const* bytes_begin, void const* bytes_end)
process_byte	/usr/include/boost/uuid/sha1.hpp	/^    void process_byte(unsigned char byte);$/;"	p	class:boost::uuids::detail::sha1	access:public	signature:(unsigned char byte)
process_byte	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::process_byte(unsigned char byte)$/;"	f	class:boost::uuids::detail::sha1	signature:(unsigned char byte)
process_byte_impl	/usr/include/boost/uuid/sha1.hpp	/^    void process_byte_impl(unsigned char byte);$/;"	p	class:boost::uuids::detail::sha1	access:private	signature:(unsigned char byte)
process_byte_impl	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::process_byte_impl(unsigned char byte)$/;"	f	class:boost::uuids::detail::sha1	signature:(unsigned char byte)
process_bytes	/usr/include/boost/uuid/sha1.hpp	/^    void process_bytes(void const* buffer, std::size_t byte_count);$/;"	p	class:boost::uuids::detail::sha1	access:public	signature:(void const* buffer, std::size_t byte_count)
process_bytes	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::process_bytes(void const* buffer, std::size_t byte_count)$/;"	f	class:boost::uuids::detail::sha1	signature:(void const* buffer, std::size_t byte_count)
process_characters	/usr/include/boost/uuid/name_generator.hpp	/^    void process_characters(char const*const characters, size_t count) {$/;"	f	class:boost::uuids::name_generator	access:private	signature:(char const*const characters, size_t count)
process_characters	/usr/include/boost/uuid/name_generator.hpp	/^    void process_characters(char_type const*const characters, size_t count) {$/;"	f	class:boost::uuids::name_generator	access:private	signature:(char_type const*const characters, size_t count)
random	/usr/include/boost/uuid/seed_rng.hpp	/^namespace boost { namespace random {$/;"	n	namespace:boost
random_	/usr/include/boost/uuid/seed_rng.hpp	/^    std::FILE * random_;$/;"	m	class:boost::uuids::detail::seed_rng	access:private
random_generator	/usr/include/boost/uuid/random_generator.hpp	/^typedef basic_random_generator<mt19937> random_generator;$/;"	t	namespace:boost::uuids
rd_	/usr/include/boost/uuid/seed_rng.hpp	/^    unsigned int rd_[5];$/;"	m	class:boost::uuids::detail::seed_rng	access:private
rd_index_	/usr/include/boost/uuid/seed_rng.hpp	/^    int rd_index_;$/;"	m	class:boost::uuids::detail::seed_rng	access:private
reference	/usr/include/boost/uuid/uuid.hpp	/^    typedef uint8_t& reference;$/;"	t	struct:boost::uuids::uuid	access:public
reset	/usr/include/boost/uuid/name_generator.hpp	/^    void reset()$/;"	f	class:boost::uuids::name_generator	access:private	signature:()
reset	/usr/include/boost/uuid/sha1.hpp	/^    void reset();$/;"	p	class:boost::uuids::detail::sha1	access:public	signature:()
reset	/usr/include/boost/uuid/sha1.hpp	/^inline void sha1::reset()$/;"	f	class:boost::uuids::detail::sha1	signature:()
result_type	/usr/include/boost/uuid/name_generator.hpp	/^    typedef uuid result_type;$/;"	t	class:boost::uuids::name_generator	access:public
result_type	/usr/include/boost/uuid/nil_generator.hpp	/^    typedef uuid result_type;$/;"	t	struct:boost::uuids::nil_generator	access:public
result_type	/usr/include/boost/uuid/random_generator.hpp	/^    typedef uuid result_type;$/;"	t	class:boost::uuids::basic_random_generator	access:public
result_type	/usr/include/boost/uuid/seed_rng.hpp	/^    typedef unsigned int result_type;$/;"	t	class:boost::uuids::detail::seed_rng	access:public
result_type	/usr/include/boost/uuid/string_generator.hpp	/^    typedef uuid result_type;$/;"	t	struct:boost::uuids::string_generator	access:public
seed	/usr/include/boost/uuid/seed_rng.hpp	/^inline void seed(UniformRandomNumberGenerator& rng)$/;"	f	namespace:boost::uuids::detail	signature:(UniformRandomNumberGenerator& rng)
seed	/usr/include/boost/uuid/seed_rng.hpp	/^inline void seed<boost::random::random_device>(boost::random::random_device&) {}$/;"	f	namespace:boost::uuids::detail	signature:(boost::random::random_device&)
seed	/usr/include/boost/uuid/seed_rng.hpp	/^inline void seed<seed_rng>(seed_rng&) {}$/;"	f	namespace:boost::uuids::detail	signature:(seed_rng&)
seed_rng	/usr/include/boost/uuid/seed_rng.hpp	/^    seed_rng()$/;"	f	class:boost::uuids::detail::seed_rng	access:public	signature:()
seed_rng	/usr/include/boost/uuid/seed_rng.hpp	/^    seed_rng(seed_rng const&);$/;"	p	class:boost::uuids::detail::seed_rng	access:private	signature:(seed_rng const&)
seed_rng	/usr/include/boost/uuid/seed_rng.hpp	/^class seed_rng$/;"	c	namespace:boost::uuids::detail
sha	/usr/include/boost/uuid/name_generator.hpp	/^    detail::sha1 sha;$/;"	m	class:boost::uuids::name_generator	access:private
sha1	/usr/include/boost/uuid/sha1.hpp	/^    sha1();$/;"	p	class:boost::uuids::detail::sha1	access:public	signature:()
sha1	/usr/include/boost/uuid/sha1.hpp	/^class sha1$/;"	c	namespace:boost::uuids::detail
sha1	/usr/include/boost/uuid/sha1.hpp	/^inline sha1::sha1()$/;"	f	class:boost::uuids::detail::sha1	signature:()
sha1_random_digest_	/usr/include/boost/uuid/seed_rng.hpp	/^    void sha1_random_digest_()$/;"	f	class:boost::uuids::detail::seed_rng	access:private	signature:()
sha1_random_digest_state_	/usr/include/boost/uuid/seed_rng.hpp	/^    static unsigned int * sha1_random_digest_state_()$/;"	f	class:boost::uuids::detail::seed_rng	access:private	signature:()
sha_to_uuid	/usr/include/boost/uuid/name_generator.hpp	/^    uuid sha_to_uuid()$/;"	f	class:boost::uuids::name_generator	access:private	signature:()
size	/usr/include/boost/uuid/uuid.hpp	/^    size_type size() const { return static_size(); } \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:() const
size_type	/usr/include/boost/uuid/uuid.hpp	/^    typedef std::size_t size_type;$/;"	t	struct:boost::uuids::uuid	access:public
sizeof	/usr/include/boost/uuid/sha1.hpp	/^BOOST_STATIC_ASSERT(sizeof(unsigned char)*8 == 8);$/;"	p	namespace:boost::uuids::detail	signature:(unsigned char)
sizeof	/usr/include/boost/uuid/sha1.hpp	/^BOOST_STATIC_ASSERT(sizeof(unsigned int)*8 == 32);$/;"	p	namespace:boost::uuids::detail	signature:(unsigned int)
static_size	/usr/include/boost/uuid/uuid.hpp	/^    static size_type static_size() { return 16; }$/;"	f	struct:boost::uuids::uuid	access:public	signature:()
std	/usr/include/boost/uuid/name_generator.hpp	/^namespace std {$/;"	n
std	/usr/include/boost/uuid/seed_rng.hpp	/^namespace std {$/;"	n
std	/usr/include/boost/uuid/sha1.hpp	/^namespace std {$/;"	n
std	/usr/include/boost/uuid/string_generator.hpp	/^namespace std {$/;"	n
std	/usr/include/boost/uuid/uuid.hpp	/^namespace std {$/;"	n
string_generator	/usr/include/boost/uuid/string_generator.hpp	/^struct string_generator {$/;"	s	namespace:boost::uuids
super_t	/usr/include/boost/uuid/seed_rng.hpp	/^    > super_t;$/;"	t	class:boost::uuids::detail::generator_iterator	access:private
swap	/usr/include/boost/uuid/uuid.hpp	/^    void swap(uuid& rhs) \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:(uuid& rhs)
swap	/usr/include/boost/uuid/uuid.hpp	/^inline void swap(uuid& lhs, uuid& rhs) \/* throw() *\/$/;"	f	namespace:boost::uuids	signature:(uuid& lhs, uuid& rhs)
throw_invalid	/usr/include/boost/uuid/string_generator.hpp	/^    void throw_invalid() const {$/;"	f	struct:boost::uuids::string_generator	access:private	signature:() const
to_char	/usr/include/boost/uuid/uuid_io.hpp	/^inline char to_char(size_t i) {$/;"	f	namespace:boost::uuids::detail	signature:(size_t i)
to_string	/usr/include/boost/uuid/uuid_io.hpp	/^inline std::string to_string(uuid const& u)$/;"	f	namespace:boost::uuids	signature:(uuid const& u)
to_wchar	/usr/include/boost/uuid/uuid_io.hpp	/^inline wchar_t to_wchar(size_t i) {$/;"	f	namespace:boost::uuids::detail	signature:(size_t i)
to_wstring	/usr/include/boost/uuid/uuid_io.hpp	/^inline std::wstring to_wstring(uuid const& u)$/;"	f	namespace:boost::uuids	signature:(uuid const& u)
uuid	/usr/include/boost/uuid/uuid.hpp	/^struct uuid$/;"	s	namespace:boost::uuids
uuids	/usr/include/boost/uuid/name_generator.hpp	/^namespace uuids {$/;"	n	namespace:boost
uuids	/usr/include/boost/uuid/nil_generator.hpp	/^namespace uuids {$/;"	n	namespace:boost
uuids	/usr/include/boost/uuid/random_generator.hpp	/^namespace uuids {$/;"	n	namespace:boost
uuids	/usr/include/boost/uuid/seed_rng.hpp	/^namespace uuids {$/;"	n	namespace:boost
uuids	/usr/include/boost/uuid/sha1.hpp	/^namespace uuids {$/;"	n	namespace:boost
uuids	/usr/include/boost/uuid/string_generator.hpp	/^namespace uuids {$/;"	n	namespace:boost
uuids	/usr/include/boost/uuid/uuid.hpp	/^namespace uuids {$/;"	n	namespace:boost
uuids	/usr/include/boost/uuid/uuid_io.hpp	/^namespace uuids {$/;"	n	namespace:boost
value_type	/usr/include/boost/uuid/uuid.hpp	/^    typedef uint8_t value_type;$/;"	t	struct:boost::uuids::uuid	access:public
variant	/usr/include/boost/uuid/uuid.hpp	/^    variant_type variant() const \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:() const
variant_future	/usr/include/boost/uuid/uuid.hpp	/^        variant_future \/\/ future definition$/;"	e	enum:boost::uuids::uuid::variant_type
variant_microsoft	/usr/include/boost/uuid/uuid.hpp	/^        variant_microsoft, \/\/ Microsoft Corporation backward compatibility$/;"	e	enum:boost::uuids::uuid::variant_type
variant_ncs	/usr/include/boost/uuid/uuid.hpp	/^        variant_ncs, \/\/ NCS backward compatibility$/;"	e	enum:boost::uuids::uuid::variant_type
variant_rfc_4122	/usr/include/boost/uuid/uuid.hpp	/^        variant_rfc_4122, \/\/ defined in RFC 4122 document$/;"	e	enum:boost::uuids::uuid::variant_type
variant_type	/usr/include/boost/uuid/uuid.hpp	/^    enum variant_type$/;"	g	struct:boost::uuids::uuid	access:public
version	/usr/include/boost/uuid/uuid.hpp	/^    version_type version() const \/* throw() *\/$/;"	f	struct:boost::uuids::uuid	access:public	signature:() const
version_dce_security	/usr/include/boost/uuid/uuid.hpp	/^        version_dce_security = 2,$/;"	e	enum:boost::uuids::uuid::version_type
version_name_based_md5	/usr/include/boost/uuid/uuid.hpp	/^        version_name_based_md5 = 3,$/;"	e	enum:boost::uuids::uuid::version_type
version_name_based_sha1	/usr/include/boost/uuid/uuid.hpp	/^        version_name_based_sha1 = 5$/;"	e	enum:boost::uuids::uuid::version_type
version_random_number_based	/usr/include/boost/uuid/uuid.hpp	/^        version_random_number_based = 4,$/;"	e	enum:boost::uuids::uuid::version_type
version_time_based	/usr/include/boost/uuid/uuid.hpp	/^        version_time_based = 1,$/;"	e	enum:boost::uuids::uuid::version_type
version_type	/usr/include/boost/uuid/uuid.hpp	/^    enum version_type $/;"	g	struct:boost::uuids::uuid	access:public
version_unknown	/usr/include/boost/uuid/uuid.hpp	/^        version_unknown = -1,$/;"	e	enum:boost::uuids::uuid::version_type
~seed_rng	/usr/include/boost/uuid/seed_rng.hpp	/^    ~seed_rng()$/;"	f	class:boost::uuids::detail::seed_rng	access:public	signature:()
