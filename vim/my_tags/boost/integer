!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_INTEGER_INTEGER_MASK_HPP	/usr/include/boost/integer/integer_mask.hpp	11;"	d
BOOST_INTEGER_STATIC_LOG2_HPP	/usr/include/boost/integer/static_log2.hpp	17;"	d
BOOST_INTEGER_STATIC_MIN_MAX_HPP	/usr/include/boost/integer/static_min_max.hpp	11;"	d
BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_LOW_BITS_MASK_SPECIALIZE( boost::ulong_long_type );$/;"	p	namespace:boost	signature:( boost::ulong_long_type )
BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_LOW_BITS_MASK_SPECIALIZE( unsigned __int64 );$/;"	p	namespace:boost	signature:( unsigned __int64 )
BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	/^BOOST_LOW_BITS_MASK_SPECIALIZE( unsigned char );$/;"	p	namespace:boost	signature:( unsigned char )
BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	/^BOOST_LOW_BITS_MASK_SPECIALIZE( unsigned int );$/;"	p	namespace:boost	signature:( unsigned int )
BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	/^BOOST_LOW_BITS_MASK_SPECIALIZE( unsigned long );$/;"	p	namespace:boost	signature:( unsigned long )
BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	/^BOOST_LOW_BITS_MASK_SPECIALIZE( unsigned short );$/;"	p	namespace:boost	signature:( unsigned short )
BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	120;"	d
BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	74;"	d
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_STATIC_CONSTANT( fast, high_bit_fast = (fast( 1u ) << Bit) );$/;"	p	struct:boost::high_bit_mask_t	access:public	signature:( fast, high_bit_fast = (fast( 1u ) << Bit) )
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_STATIC_CONSTANT( fast, sig_bits_fast = fast(sig_bits) );$/;"	p	struct:boost::low_bits_mask_t	access:public	signature:( fast, sig_bits_fast = fast(sig_bits) )
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_STATIC_CONSTANT( least, high_bit = (least( 1u ) << Bit) );$/;"	p	struct:boost::high_bit_mask_t	access:public	signature:( least, high_bit = (least( 1u ) << Bit) )
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_STATIC_CONSTANT( least, sig_bits = (~( ~(least( 0u )) << Bits )) );$/;"	p	struct:boost::low_bits_mask_t	access:public	signature:( least, sig_bits = (~( ~(least( 0u )) << Bits )) )
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_STATIC_CONSTANT( std::size_t, bit_count = Bits );$/;"	p	struct:boost::low_bits_mask_t	access:public	signature:( std::size_t, bit_count = Bits )
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_STATIC_CONSTANT( std::size_t, bit_position = Bit );$/;"	p	struct:boost::high_bit_mask_t	access:public	signature:( std::size_t, bit_position = Bit )
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^         BOOST_STATIC_CONSTANT($/;"	p	struct:boost::detail::static_log2_impl::choose_initial_n	access:public	signature:( result_type, value = !c*n + choose_initial_n<2*c*n>::value )
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^         BOOST_STATIC_CONSTANT($/;"	p	struct:boost::detail::static_log2_impl::static_log2_impl	access:public	signature:( result_type, value = c*n + (static_log2_impl< (x>>c*n), n/2 >::value) )
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^         BOOST_STATIC_CONSTANT(bool, c = (argument_type(1) << n << n) != 0);$/;"	p	struct:boost::detail::static_log2_impl::choose_initial_n	access:public	signature:(bool, c = (argument_type(1) << n << n) != 0)
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^         BOOST_STATIC_CONSTANT(bool, c = (x >> n) > 0); \/\/ x >= 2**n ?$/;"	p	struct:boost::detail::static_log2_impl::static_log2_impl	access:public	signature:(bool, c = (x >> n) > 0)
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^         BOOST_STATIC_CONSTANT(result_type, value = 0);$/;"	p	struct:boost::detail::static_log2_impl::choose_initial_n	access:public	signature:(result_type, value = 0)
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^        BOOST_STATIC_CONSTANT(result_type, value = 0);$/;"	p	struct:boost::detail::static_log2_impl::static_log2_impl	access:public	signature:(result_type, value = 0)
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^     BOOST_STATIC_CONSTANT($/;"	p	struct:boost::static_log2	access:public	signature:( static_log2_result_type, value = detail::static_log2_impl::static_log2_impl<x>::value )
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_min_max.hpp	/^    BOOST_STATIC_CONSTANT(static_min_max_signed_type, value = (Value1 < Value2) ? Value2 : Value1 );$/;"	p	struct:boost::static_signed_max	access:public	signature:(static_min_max_signed_type, value = (Value1 < Value2) ? Value2 : Value1 )
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_min_max.hpp	/^    BOOST_STATIC_CONSTANT(static_min_max_signed_type, value = (Value1 > Value2) ? Value2 : Value1 );$/;"	p	struct:boost::static_signed_min	access:public	signature:(static_min_max_signed_type, value = (Value1 > Value2) ? Value2 : Value1 )
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_min_max.hpp	/^    BOOST_STATIC_CONSTANT(static_min_max_unsigned_type, value$/;"	p	struct:boost::static_unsigned_max	access:public	signature:(static_min_max_unsigned_type, value = (Value1 < Value2) ? Value2 : Value1 )
BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_min_max.hpp	/^    BOOST_STATIC_CONSTANT(static_min_max_unsigned_type, value$/;"	p	struct:boost::static_unsigned_min	access:public	signature:(static_min_max_unsigned_type, value = (Value1 > Value2) ? Value2 : Value1 )
argument_type	/usr/include/boost/integer/static_log2.hpp	/^     typedef boost::static_log2_argument_type argument_type;$/;"	t	namespace:boost::detail::static_log2_impl
boost	/usr/include/boost/integer/integer_mask.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/integer/static_log2.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/integer/static_min_max.hpp	/^namespace boost$/;"	n
boost::BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_LOW_BITS_MASK_SPECIALIZE( boost::ulong_long_type );$/;"	p	namespace:boost	signature:( boost::ulong_long_type )
boost::BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_LOW_BITS_MASK_SPECIALIZE( unsigned __int64 );$/;"	p	namespace:boost	signature:( unsigned __int64 )
boost::BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	/^BOOST_LOW_BITS_MASK_SPECIALIZE( unsigned char );$/;"	p	namespace:boost	signature:( unsigned char )
boost::BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	/^BOOST_LOW_BITS_MASK_SPECIALIZE( unsigned int );$/;"	p	namespace:boost	signature:( unsigned int )
boost::BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	/^BOOST_LOW_BITS_MASK_SPECIALIZE( unsigned long );$/;"	p	namespace:boost	signature:( unsigned long )
boost::BOOST_LOW_BITS_MASK_SPECIALIZE	/usr/include/boost/integer/integer_mask.hpp	/^BOOST_LOW_BITS_MASK_SPECIALIZE( unsigned short );$/;"	p	namespace:boost	signature:( unsigned short )
boost::detail	/usr/include/boost/integer/static_log2.hpp	/^ namespace detail {$/;"	n	namespace:boost
boost::detail::static_log2_impl	/usr/include/boost/integer/static_log2.hpp	/^     namespace static_log2_impl {$/;"	n	namespace:boost::detail
boost::detail::static_log2_impl::argument_type	/usr/include/boost/integer/static_log2.hpp	/^     typedef boost::static_log2_argument_type argument_type;$/;"	t	namespace:boost::detail::static_log2_impl
boost::detail::static_log2_impl::choose_initial_n	/usr/include/boost/integer/static_log2.hpp	/^     struct choose_initial_n {$/;"	s	namespace:boost::detail::static_log2_impl
boost::detail::static_log2_impl::choose_initial_n	/usr/include/boost/integer/static_log2.hpp	/^     struct choose_initial_n<0> {$/;"	s	namespace:boost::detail::static_log2_impl
boost::detail::static_log2_impl::choose_initial_n::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^         BOOST_STATIC_CONSTANT($/;"	p	struct:boost::detail::static_log2_impl::choose_initial_n	access:public	signature:( result_type, value = !c*n + choose_initial_n<2*c*n>::value )
boost::detail::static_log2_impl::choose_initial_n::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^         BOOST_STATIC_CONSTANT(bool, c = (argument_type(1) << n << n) != 0);$/;"	p	struct:boost::detail::static_log2_impl::choose_initial_n	access:public	signature:(bool, c = (argument_type(1) << n << n) != 0)
boost::detail::static_log2_impl::choose_initial_n::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^         BOOST_STATIC_CONSTANT(result_type, value = 0);$/;"	p	struct:boost::detail::static_log2_impl::choose_initial_n	access:public	signature:(result_type, value = 0)
boost::detail::static_log2_impl::initial_n	/usr/include/boost/integer/static_log2.hpp	/^     const result_type initial_n = choose_initial_n<n_zero>::value;$/;"	m	namespace:boost::detail::static_log2_impl
boost::detail::static_log2_impl::n_zero	/usr/include/boost/integer/static_log2.hpp	/^     const result_type n_zero = 16;$/;"	m	namespace:boost::detail::static_log2_impl
boost::detail::static_log2_impl::result_type	/usr/include/boost/integer/static_log2.hpp	/^     typedef boost::static_log2_result_type result_type;$/;"	t	namespace:boost::detail::static_log2_impl
boost::detail::static_log2_impl::static_log2_impl	/usr/include/boost/integer/static_log2.hpp	/^     struct static_log2_impl {$/;"	s	namespace:boost::detail::static_log2_impl
boost::detail::static_log2_impl::static_log2_impl	/usr/include/boost/integer/static_log2.hpp	/^     struct static_log2_impl<1, 0> {$/;"	s	namespace:boost::detail::static_log2_impl
boost::detail::static_log2_impl::static_log2_impl::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^         BOOST_STATIC_CONSTANT($/;"	p	struct:boost::detail::static_log2_impl::static_log2_impl	access:public	signature:( result_type, value = c*n + (static_log2_impl< (x>>c*n), n/2 >::value) )
boost::detail::static_log2_impl::static_log2_impl::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^         BOOST_STATIC_CONSTANT(bool, c = (x >> n) > 0); \/\/ x >= 2**n ?$/;"	p	struct:boost::detail::static_log2_impl::static_log2_impl	access:public	signature:(bool, c = (x >> n) > 0)
boost::detail::static_log2_impl::static_log2_impl::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^        BOOST_STATIC_CONSTANT(result_type, value = 0);$/;"	p	struct:boost::detail::static_log2_impl::static_log2_impl	access:public	signature:(result_type, value = 0)
boost::high_bit_mask_t	/usr/include/boost/integer/integer_mask.hpp	/^struct high_bit_mask_t$/;"	s	namespace:boost
boost::high_bit_mask_t::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_STATIC_CONSTANT( fast, high_bit_fast = (fast( 1u ) << Bit) );$/;"	p	struct:boost::high_bit_mask_t	access:public	signature:( fast, high_bit_fast = (fast( 1u ) << Bit) )
boost::high_bit_mask_t::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_STATIC_CONSTANT( least, high_bit = (least( 1u ) << Bit) );$/;"	p	struct:boost::high_bit_mask_t	access:public	signature:( least, high_bit = (least( 1u ) << Bit) )
boost::high_bit_mask_t::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_STATIC_CONSTANT( std::size_t, bit_position = Bit );$/;"	p	struct:boost::high_bit_mask_t	access:public	signature:( std::size_t, bit_position = Bit )
boost::high_bit_mask_t::fast	/usr/include/boost/integer/integer_mask.hpp	/^    typedef typename uint_t<(Bit + 1)>::fast   fast;$/;"	t	struct:boost::high_bit_mask_t	access:public
boost::high_bit_mask_t::least	/usr/include/boost/integer/integer_mask.hpp	/^    typedef typename uint_t<(Bit + 1)>::least  least;$/;"	t	struct:boost::high_bit_mask_t	access:public
boost::low_bits_mask_t	/usr/include/boost/integer/integer_mask.hpp	/^struct low_bits_mask_t$/;"	s	namespace:boost
boost::low_bits_mask_t::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_STATIC_CONSTANT( fast, sig_bits_fast = fast(sig_bits) );$/;"	p	struct:boost::low_bits_mask_t	access:public	signature:( fast, sig_bits_fast = fast(sig_bits) )
boost::low_bits_mask_t::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_STATIC_CONSTANT( least, sig_bits = (~( ~(least( 0u )) << Bits )) );$/;"	p	struct:boost::low_bits_mask_t	access:public	signature:( least, sig_bits = (~( ~(least( 0u )) << Bits )) )
boost::low_bits_mask_t::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/integer_mask.hpp	/^    BOOST_STATIC_CONSTANT( std::size_t, bit_count = Bits );$/;"	p	struct:boost::low_bits_mask_t	access:public	signature:( std::size_t, bit_count = Bits )
boost::low_bits_mask_t::fast	/usr/include/boost/integer/integer_mask.hpp	/^    typedef typename uint_t<Bits>::fast   fast;$/;"	t	struct:boost::low_bits_mask_t	access:public
boost::low_bits_mask_t::least	/usr/include/boost/integer/integer_mask.hpp	/^    typedef typename uint_t<Bits>::least  least;$/;"	t	struct:boost::low_bits_mask_t	access:public
boost::static_log2	/usr/include/boost/integer/static_log2.hpp	/^ struct static_log2 {$/;"	s	namespace:boost
boost::static_log2	/usr/include/boost/integer/static_log2.hpp	/^ struct static_log2<0> { };$/;"	s	namespace:boost
boost::static_log2::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_log2.hpp	/^     BOOST_STATIC_CONSTANT($/;"	p	struct:boost::static_log2	access:public	signature:( static_log2_result_type, value = detail::static_log2_impl::static_log2_impl<x>::value )
boost::static_signed_max	/usr/include/boost/integer/static_min_max.hpp	/^struct static_signed_max$/;"	s	namespace:boost
boost::static_signed_max::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_min_max.hpp	/^    BOOST_STATIC_CONSTANT(static_min_max_signed_type, value = (Value1 < Value2) ? Value2 : Value1 );$/;"	p	struct:boost::static_signed_max	access:public	signature:(static_min_max_signed_type, value = (Value1 < Value2) ? Value2 : Value1 )
boost::static_signed_min	/usr/include/boost/integer/static_min_max.hpp	/^struct static_signed_min$/;"	s	namespace:boost
boost::static_signed_min::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_min_max.hpp	/^    BOOST_STATIC_CONSTANT(static_min_max_signed_type, value = (Value1 > Value2) ? Value2 : Value1 );$/;"	p	struct:boost::static_signed_min	access:public	signature:(static_min_max_signed_type, value = (Value1 > Value2) ? Value2 : Value1 )
boost::static_unsigned_max	/usr/include/boost/integer/static_min_max.hpp	/^struct static_unsigned_max$/;"	s	namespace:boost
boost::static_unsigned_max::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_min_max.hpp	/^    BOOST_STATIC_CONSTANT(static_min_max_unsigned_type, value$/;"	p	struct:boost::static_unsigned_max	access:public	signature:(static_min_max_unsigned_type, value = (Value1 < Value2) ? Value2 : Value1 )
boost::static_unsigned_min	/usr/include/boost/integer/static_min_max.hpp	/^struct static_unsigned_min$/;"	s	namespace:boost
boost::static_unsigned_min::BOOST_STATIC_CONSTANT	/usr/include/boost/integer/static_min_max.hpp	/^    BOOST_STATIC_CONSTANT(static_min_max_unsigned_type, value$/;"	p	struct:boost::static_unsigned_min	access:public	signature:(static_min_max_unsigned_type, value = (Value1 > Value2) ? Value2 : Value1 )
choose_initial_n	/usr/include/boost/integer/static_log2.hpp	/^     struct choose_initial_n {$/;"	s	namespace:boost::detail::static_log2_impl
choose_initial_n	/usr/include/boost/integer/static_log2.hpp	/^     struct choose_initial_n<0> {$/;"	s	namespace:boost::detail::static_log2_impl
detail	/usr/include/boost/integer/static_log2.hpp	/^ namespace detail {$/;"	n	namespace:boost
fast	/usr/include/boost/integer/integer_mask.hpp	/^    typedef typename uint_t<(Bit + 1)>::fast   fast;$/;"	t	struct:boost::high_bit_mask_t	access:public
fast	/usr/include/boost/integer/integer_mask.hpp	/^    typedef typename uint_t<Bits>::fast   fast;$/;"	t	struct:boost::low_bits_mask_t	access:public
high_bit_mask_t	/usr/include/boost/integer/integer_mask.hpp	/^struct high_bit_mask_t$/;"	s	namespace:boost
initial_n	/usr/include/boost/integer/static_log2.hpp	/^     const result_type initial_n = choose_initial_n<n_zero>::value;$/;"	m	namespace:boost::detail::static_log2_impl
least	/usr/include/boost/integer/integer_mask.hpp	/^    typedef typename uint_t<(Bit + 1)>::least  least;$/;"	t	struct:boost::high_bit_mask_t	access:public
least	/usr/include/boost/integer/integer_mask.hpp	/^    typedef typename uint_t<Bits>::least  least;$/;"	t	struct:boost::low_bits_mask_t	access:public
low_bits_mask_t	/usr/include/boost/integer/integer_mask.hpp	/^struct low_bits_mask_t$/;"	s	namespace:boost
n_zero	/usr/include/boost/integer/static_log2.hpp	/^     const result_type n_zero = 16;$/;"	m	namespace:boost::detail::static_log2_impl
result_type	/usr/include/boost/integer/static_log2.hpp	/^     typedef boost::static_log2_result_type result_type;$/;"	t	namespace:boost::detail::static_log2_impl
static_log2	/usr/include/boost/integer/static_log2.hpp	/^ struct static_log2 {$/;"	s	namespace:boost
static_log2	/usr/include/boost/integer/static_log2.hpp	/^ struct static_log2<0> { };$/;"	s	namespace:boost
static_log2_impl	/usr/include/boost/integer/static_log2.hpp	/^     namespace static_log2_impl {$/;"	n	namespace:boost::detail
static_log2_impl	/usr/include/boost/integer/static_log2.hpp	/^     struct static_log2_impl {$/;"	s	namespace:boost::detail::static_log2_impl
static_log2_impl	/usr/include/boost/integer/static_log2.hpp	/^     struct static_log2_impl<1, 0> {$/;"	s	namespace:boost::detail::static_log2_impl
static_signed_max	/usr/include/boost/integer/static_min_max.hpp	/^struct static_signed_max$/;"	s	namespace:boost
static_signed_min	/usr/include/boost/integer/static_min_max.hpp	/^struct static_signed_min$/;"	s	namespace:boost
static_unsigned_max	/usr/include/boost/integer/static_min_max.hpp	/^struct static_unsigned_max$/;"	s	namespace:boost
static_unsigned_min	/usr/include/boost/integer/static_min_max.hpp	/^struct static_unsigned_min$/;"	s	namespace:boost
