!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AI_CANONNAME	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	105;"	d
AI_NUMERICHOST	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	109;"	d
AI_PASSIVE	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	101;"	d
BOOST_ASIO_ACCEPT_HANDLER_CHECK	/usr/include/boost/asio/detail/handler_type_requirements.hpp	160;"	d
BOOST_ASIO_ALSO_INHERIT_TRACKED_HANDLER	/usr/include/boost/asio/detail/handler_tracking.hpp	117;"	d
BOOST_ASIO_BASIC_DATAGRAM_SOCKET_HPP	/usr/include/boost/asio/basic_datagram_socket.hpp	12;"	d
BOOST_ASIO_BASIC_DEADLINE_TIMER_HPP	/usr/include/boost/asio/basic_deadline_timer.hpp	12;"	d
BOOST_ASIO_BASIC_IO_OBJECT_HPP	/usr/include/boost/asio/basic_io_object.hpp	12;"	d
BOOST_ASIO_BASIC_RAW_SOCKET_HPP	/usr/include/boost/asio/basic_raw_socket.hpp	12;"	d
BOOST_ASIO_BASIC_SEQ_PACKET_SOCKET_HPP	/usr/include/boost/asio/basic_seq_packet_socket.hpp	12;"	d
BOOST_ASIO_BASIC_SERIAL_PORT_HPP	/usr/include/boost/asio/basic_serial_port.hpp	13;"	d
BOOST_ASIO_BASIC_SIGNAL_SET_HPP	/usr/include/boost/asio/basic_signal_set.hpp	12;"	d
BOOST_ASIO_BASIC_SOCKET_ACCEPTOR_HPP	/usr/include/boost/asio/basic_socket_acceptor.hpp	12;"	d
BOOST_ASIO_BASIC_SOCKET_HPP	/usr/include/boost/asio/basic_socket.hpp	12;"	d
BOOST_ASIO_BASIC_SOCKET_IOSTREAM_HPP	/usr/include/boost/asio/basic_socket_iostream.hpp	12;"	d
BOOST_ASIO_BASIC_SOCKET_STREAMBUF_HPP	/usr/include/boost/asio/basic_socket_streambuf.hpp	12;"	d
BOOST_ASIO_BASIC_STREAMBUF_FWD_HPP	/usr/include/boost/asio/basic_streambuf_fwd.hpp	12;"	d
BOOST_ASIO_BASIC_STREAMBUF_HPP	/usr/include/boost/asio/basic_streambuf.hpp	12;"	d
BOOST_ASIO_BASIC_STREAM_SOCKET_HPP	/usr/include/boost/asio/basic_stream_socket.hpp	12;"	d
BOOST_ASIO_BASIC_WAITABLE_TIMER_HPP	/usr/include/boost/asio/basic_waitable_timer.hpp	12;"	d
BOOST_ASIO_BUFFERED_READ_STREAM_FWD_HPP	/usr/include/boost/asio/buffered_read_stream_fwd.hpp	12;"	d
BOOST_ASIO_BUFFERED_READ_STREAM_HPP	/usr/include/boost/asio/buffered_read_stream.hpp	12;"	d
BOOST_ASIO_BUFFERED_STREAM_FWD_HPP	/usr/include/boost/asio/buffered_stream_fwd.hpp	12;"	d
BOOST_ASIO_BUFFERED_STREAM_HPP	/usr/include/boost/asio/buffered_stream.hpp	12;"	d
BOOST_ASIO_BUFFERED_WRITE_STREAM_FWD_HPP	/usr/include/boost/asio/buffered_write_stream_fwd.hpp	12;"	d
BOOST_ASIO_BUFFERED_WRITE_STREAM_HPP	/usr/include/boost/asio/buffered_write_stream.hpp	12;"	d
BOOST_ASIO_BUFFERS_ITERATOR_HPP	/usr/include/boost/asio/buffers_iterator.hpp	12;"	d
BOOST_ASIO_BUFFER_HPP	/usr/include/boost/asio/buffer.hpp	12;"	d
BOOST_ASIO_COMPLETION_CONDITION_HPP	/usr/include/boost/asio/completion_condition.hpp	12;"	d
BOOST_ASIO_COMPLETION_HANDLER_CHECK	/usr/include/boost/asio/detail/handler_type_requirements.hpp	104;"	d
BOOST_ASIO_COMPOSED_CONNECT_HANDLER_CHECK	/usr/include/boost/asio/detail/handler_type_requirements.hpp	196;"	d
BOOST_ASIO_CONNECT_HANDLER_CHECK	/usr/include/boost/asio/detail/handler_type_requirements.hpp	178;"	d
BOOST_ASIO_CONNECT_HPP	/usr/include/boost/asio/connect.hpp	12;"	d
BOOST_ASIO_DATAGRAM_SOCKET_SERVICE_HPP	/usr/include/boost/asio/datagram_socket_service.hpp	12;"	d
BOOST_ASIO_DEADLINE_TIMER_HPP	/usr/include/boost/asio/deadline_timer.hpp	12;"	d
BOOST_ASIO_DEADLINE_TIMER_SERVICE_HPP	/usr/include/boost/asio/deadline_timer_service.hpp	12;"	d
BOOST_ASIO_DECL	/usr/include/boost/asio/detail/config.hpp	29;"	d
BOOST_ASIO_DECL	/usr/include/boost/asio/detail/config.hpp	37;"	d
BOOST_ASIO_DECL	/usr/include/boost/asio/detail/config.hpp	39;"	d
BOOST_ASIO_DECL	/usr/include/boost/asio/detail/config.hpp	47;"	d
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/completion_handler.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(completion_handler);$/;"	p	class:boost::asio::detail::completion_handler	access:public	signature:(completion_handler)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(descriptor_read_op);$/;"	p	class:boost::asio::detail::descriptor_read_op	access:public	signature:(descriptor_read_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(descriptor_write_op);$/;"	p	class:boost::asio::detail::descriptor_write_op	access:public	signature:(descriptor_write_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	57;"	d
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_null_buffers_op);$/;"	p	class:boost::asio::detail::reactive_null_buffers_op	access:public	signature:(reactive_null_buffers_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_accept_op);$/;"	p	class:boost::asio::detail::reactive_socket_accept_op	access:public	signature:(reactive_socket_accept_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_connect_op);$/;"	p	class:boost::asio::detail::reactive_socket_connect_op	access:public	signature:(reactive_socket_connect_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_recv_op);$/;"	p	class:boost::asio::detail::reactive_socket_recv_op	access:public	signature:(reactive_socket_recv_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_recvfrom_op);$/;"	p	class:boost::asio::detail::reactive_socket_recvfrom_op	access:public	signature:(reactive_socket_recvfrom_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_recvmsg_op);$/;"	p	class:boost::asio::detail::reactive_socket_recvmsg_op	access:public	signature:(reactive_socket_recvmsg_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_send_op);$/;"	p	class:boost::asio::detail::reactive_socket_send_op	access:public	signature:(reactive_socket_send_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_sendto_op);$/;"	p	class:boost::asio::detail::reactive_socket_sendto_op	access:public	signature:(reactive_socket_sendto_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(resolve_endpoint_op);$/;"	p	class:boost::asio::detail::resolve_endpoint_op	access:public	signature:(resolve_endpoint_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/resolve_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(resolve_op);$/;"	p	class:boost::asio::detail::resolve_op	access:public	signature:(resolve_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/signal_handler.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(signal_handler);$/;"	p	class:boost::asio::detail::signal_handler	access:public	signature:(signal_handler)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/wait_handler.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(wait_handler);$/;"	p	class:boost::asio::detail::wait_handler	access:public	signature:(wait_handler)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_handle_read_op);$/;"	p	class:boost::asio::detail::win_iocp_handle_read_op	access:public	signature:(win_iocp_handle_read_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_handle_write_op);$/;"	p	class:boost::asio::detail::win_iocp_handle_write_op	access:public	signature:(win_iocp_handle_write_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_null_buffers_op);$/;"	p	class:boost::asio::detail::win_iocp_null_buffers_op	access:public	signature:(win_iocp_null_buffers_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_overlapped_op);$/;"	p	class:boost::asio::detail::win_iocp_overlapped_op	access:public	signature:(win_iocp_overlapped_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_socket_accept_op);$/;"	p	class:boost::asio::detail::win_iocp_socket_accept_op	access:public	signature:(win_iocp_socket_accept_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_socket_recv_op);$/;"	p	class:boost::asio::detail::win_iocp_socket_recv_op	access:public	signature:(win_iocp_socket_recv_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_socket_recvfrom_op);$/;"	p	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:public	signature:(win_iocp_socket_recvfrom_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_socket_recvmsg_op);$/;"	p	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:public	signature:(win_iocp_socket_recvmsg_op)
BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_socket_send_op);$/;"	p	class:boost::asio::detail::win_iocp_socket_send_op	access:public	signature:(win_iocp_socket_send_op)
BOOST_ASIO_DETAIL_ARRAY_FWD_HPP	/usr/include/boost/asio/detail/array_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_ARRAY_HPP	/usr/include/boost/asio/detail/array.hpp	12;"	d
BOOST_ASIO_DETAIL_ATOMIC_COUNT_HPP	/usr/include/boost/asio/detail/atomic_count.hpp	12;"	d
BOOST_ASIO_DETAIL_BASE_FROM_COMPLETION_COND_HPP	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	12;"	d
BOOST_ASIO_DETAIL_BIND_HANDLER_HPP	/usr/include/boost/asio/detail/bind_handler.hpp	12;"	d
BOOST_ASIO_DETAIL_BUFFERED_STREAM_STORAGE_HPP	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	12;"	d
BOOST_ASIO_DETAIL_BUFFER_RESIZE_GUARD_HPP	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	12;"	d
BOOST_ASIO_DETAIL_BUFFER_SEQUENCE_ADAPTER_HPP	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	12;"	d
BOOST_ASIO_DETAIL_CALL_STACK_HPP	/usr/include/boost/asio/detail/call_stack.hpp	12;"	d
BOOST_ASIO_DETAIL_CHRONO_TIME_TRAITS_HPP	/usr/include/boost/asio/detail/chrono_time_traits.hpp	12;"	d
BOOST_ASIO_DETAIL_COMPLETION_HANDLER_HPP	/usr/include/boost/asio/detail/completion_handler.hpp	12;"	d
BOOST_ASIO_DETAIL_CONFIG_HPP	/usr/include/boost/asio/detail/config.hpp	12;"	d
BOOST_ASIO_DETAIL_CONSUMING_BUFFERS_HPP	/usr/include/boost/asio/detail/consuming_buffers.hpp	12;"	d
BOOST_ASIO_DETAIL_DATE_TIME_FWD_HPP	/usr/include/boost/asio/detail/date_time_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_DEADLINE_TIMER_SERVICE_HPP	/usr/include/boost/asio/detail/deadline_timer_service.hpp	12;"	d
BOOST_ASIO_DETAIL_DEPENDENT_TYPE_HPP	/usr/include/boost/asio/detail/dependent_type.hpp	12;"	d
BOOST_ASIO_DETAIL_DESCRIPTOR_OPS_HPP	/usr/include/boost/asio/detail/descriptor_ops.hpp	12;"	d
BOOST_ASIO_DETAIL_DESCRIPTOR_READ_OP_HPP	/usr/include/boost/asio/detail/descriptor_read_op.hpp	12;"	d
BOOST_ASIO_DETAIL_DESCRIPTOR_WRITE_OP_HPP	/usr/include/boost/asio/detail/descriptor_write_op.hpp	12;"	d
BOOST_ASIO_DETAIL_DEV_POLL_REACTOR_FWD_HPP	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_DEV_POLL_REACTOR_HPP	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	12;"	d
BOOST_ASIO_DETAIL_EPOLL_REACTOR_FWD_HPP	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_EPOLL_REACTOR_HPP	/usr/include/boost/asio/detail/epoll_reactor.hpp	12;"	d
BOOST_ASIO_DETAIL_EVENTFD_SELECT_INTERRUPTER_HPP	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	13;"	d
BOOST_ASIO_DETAIL_EVENT_HPP	/usr/include/boost/asio/detail/event.hpp	12;"	d
BOOST_ASIO_DETAIL_FD_SET_ADAPTER_HPP	/usr/include/boost/asio/detail/fd_set_adapter.hpp	12;"	d
BOOST_ASIO_DETAIL_FENCED_BLOCK_HPP	/usr/include/boost/asio/detail/fenced_block.hpp	12;"	d
BOOST_ASIO_DETAIL_GCC_ARM_FENCED_BLOCK_HPP	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	12;"	d
BOOST_ASIO_DETAIL_GCC_HPPA_FENCED_BLOCK_HPP	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	12;"	d
BOOST_ASIO_DETAIL_GCC_SYNC_FENCED_BLOCK_HPP	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	12;"	d
BOOST_ASIO_DETAIL_GCC_X86_FENCED_BLOCK_HPP	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	12;"	d
BOOST_ASIO_DETAIL_HANDLER_ALLOC_HELPERS_HPP	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	12;"	d
BOOST_ASIO_DETAIL_HANDLER_INVOKE_HELPERS_HPP	/usr/include/boost/asio/detail/handler_invoke_helpers.hpp	12;"	d
BOOST_ASIO_DETAIL_HANDLER_TRACKING_HPP	/usr/include/boost/asio/detail/handler_tracking.hpp	12;"	d
BOOST_ASIO_DETAIL_HANDLER_TYPE_REQUIREMENTS_HPP	/usr/include/boost/asio/detail/handler_type_requirements.hpp	12;"	d
BOOST_ASIO_DETAIL_HASH_MAP_HPP	/usr/include/boost/asio/detail/hash_map.hpp	12;"	d
BOOST_ASIO_DETAIL_IMPL_DESCRIPTOR_OPS_IPP	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_DEV_POLL_REACTOR_HPP	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	12;"	d
BOOST_ASIO_DETAIL_IMPL_DEV_POLL_REACTOR_IPP	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_EPOLL_REACTOR_HPP	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	12;"	d
BOOST_ASIO_DETAIL_IMPL_EPOLL_REACTOR_IPP	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_EVENTFD_SELECT_INTERRUPTER_IPP	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	13;"	d	file:
BOOST_ASIO_DETAIL_IMPL_HANDLER_TRACKING_IPP	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_KQUEUE_REACTOR_HPP	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	13;"	d
BOOST_ASIO_DETAIL_IMPL_KQUEUE_REACTOR_IPP	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	13;"	d	file:
BOOST_ASIO_DETAIL_IMPL_PIPE_SELECT_INTERRUPTER_IPP	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_POSIX_EVENT_IPP	/usr/include/boost/asio/detail/impl/posix_event.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_POSIX_MUTEX_IPP	/usr/include/boost/asio/detail/impl/posix_mutex.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_POSIX_THREAD_IPP	/usr/include/boost/asio/detail/impl/posix_thread.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_POSIX_TSS_PTR_IPP	/usr/include/boost/asio/detail/impl/posix_tss_ptr.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_REACTIVE_DESCRIPTOR_SERVICE_IPP	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_REACTIVE_SERIAL_PORT_SERVICE_IPP	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	13;"	d	file:
BOOST_ASIO_DETAIL_IMPL_REACTIVE_SOCKET_SERVICE_BASE_IPP	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_RESOLVER_SERVICE_BASE_IPP	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_SELECT_REACTOR_HPP	/usr/include/boost/asio/detail/impl/select_reactor.hpp	12;"	d
BOOST_ASIO_DETAIL_IMPL_SELECT_REACTOR_IPP	/usr/include/boost/asio/detail/impl/select_reactor.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_SERVICE_REGISTRY_HPP	/usr/include/boost/asio/detail/impl/service_registry.hpp	12;"	d
BOOST_ASIO_DETAIL_IMPL_SERVICE_REGISTRY_IPP	/usr/include/boost/asio/detail/impl/service_registry.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_SIGNAL_SET_SERVICE_IPP	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_SOCKET_SELECT_INTERRUPTER_IPP	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_STRAND_SERVICE_HPP	/usr/include/boost/asio/detail/impl/strand_service.hpp	12;"	d
BOOST_ASIO_DETAIL_IMPL_STRAND_SERVICE_IPP	/usr/include/boost/asio/detail/impl/strand_service.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_TASK_IO_SERVICE_HPP	/usr/include/boost/asio/detail/impl/task_io_service.hpp	12;"	d
BOOST_ASIO_DETAIL_IMPL_TASK_IO_SERVICE_IPP	/usr/include/boost/asio/detail/impl/task_io_service.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_THROW_ERROR_IPP	/usr/include/boost/asio/detail/impl/throw_error.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_TIMER_QUEUE_PTIME_IPP	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_TIMER_QUEUE_SET_IPP	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_WINSOCK_INIT_IPP	/usr/include/boost/asio/detail/impl/winsock_init.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_WIN_EVENT_IPP	/usr/include/boost/asio/detail/impl/win_event.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_WIN_IOCP_HANDLE_SERVICE_IPP	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	13;"	d	file:
BOOST_ASIO_DETAIL_IMPL_WIN_IOCP_IO_SERVICE_HPP	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	12;"	d
BOOST_ASIO_DETAIL_IMPL_WIN_IOCP_IO_SERVICE_IPP	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_WIN_IOCP_SERIAL_PORT_SERVICE_IPP	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	13;"	d	file:
BOOST_ASIO_DETAIL_IMPL_WIN_IOCP_SOCKET_SERVICE_BASE_IPP	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_WIN_MUTEX_IPP	/usr/include/boost/asio/detail/impl/win_mutex.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_WIN_OBJECT_HANDLE_SERVICE_IPP	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	13;"	d	file:
BOOST_ASIO_DETAIL_IMPL_WIN_STATIC_MUTEX_IPP	/usr/include/boost/asio/detail/impl/win_static_mutex.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_WIN_THREAD_IPP	/usr/include/boost/asio/detail/impl/win_thread.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IMPL_WIN_TSS_PTR_IPP	/usr/include/boost/asio/detail/impl/win_tss_ptr.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_IO_CONTROL_HPP	/usr/include/boost/asio/detail/io_control.hpp	12;"	d
BOOST_ASIO_DETAIL_KEYWORD_TSS_PTR_HPP	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_KQUEUE_REACTOR_FWD_HPP	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	13;"	d
BOOST_ASIO_DETAIL_KQUEUE_REACTOR_HPP	/usr/include/boost/asio/detail/kqueue_reactor.hpp	13;"	d
BOOST_ASIO_DETAIL_LOCAL_FREE_ON_BLOCK_EXIT_HPP	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	12;"	d
BOOST_ASIO_DETAIL_MACOS_FENCED_BLOCK_HPP	/usr/include/boost/asio/detail/macos_fenced_block.hpp	12;"	d
BOOST_ASIO_DETAIL_MUTEX_HPP	/usr/include/boost/asio/detail/mutex.hpp	12;"	d
BOOST_ASIO_DETAIL_NONCOPYABLE_HPP	/usr/include/boost/asio/detail/noncopyable.hpp	12;"	d
BOOST_ASIO_DETAIL_NULL_EVENT_HPP	/usr/include/boost/asio/detail/null_event.hpp	12;"	d
BOOST_ASIO_DETAIL_NULL_FENCED_BLOCK_HPP	/usr/include/boost/asio/detail/null_fenced_block.hpp	12;"	d
BOOST_ASIO_DETAIL_NULL_MUTEX_HPP	/usr/include/boost/asio/detail/null_mutex.hpp	12;"	d
BOOST_ASIO_DETAIL_NULL_SIGNAL_BLOCKER_HPP	/usr/include/boost/asio/detail/null_signal_blocker.hpp	12;"	d
BOOST_ASIO_DETAIL_NULL_STATIC_MUTEX_HPP	/usr/include/boost/asio/detail/null_static_mutex.hpp	12;"	d
BOOST_ASIO_DETAIL_NULL_THREAD_HPP	/usr/include/boost/asio/detail/null_thread.hpp	12;"	d
BOOST_ASIO_DETAIL_NULL_TSS_PTR_HPP	/usr/include/boost/asio/detail/null_tss_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_OBJECT_POOL_HPP	/usr/include/boost/asio/detail/object_pool.hpp	12;"	d
BOOST_ASIO_DETAIL_OLD_WIN_SDK_COMPAT_HPP	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	12;"	d
BOOST_ASIO_DETAIL_OPERATION_HPP	/usr/include/boost/asio/detail/operation.hpp	12;"	d
BOOST_ASIO_DETAIL_OP_QUEUE_HPP	/usr/include/boost/asio/detail/op_queue.hpp	12;"	d
BOOST_ASIO_DETAIL_PIPE_SELECT_INTERRUPTER_HPP	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	12;"	d
BOOST_ASIO_DETAIL_POSIX_EVENT_HPP	/usr/include/boost/asio/detail/posix_event.hpp	12;"	d
BOOST_ASIO_DETAIL_POSIX_FD_SET_ADAPTER_HPP	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	12;"	d
BOOST_ASIO_DETAIL_POSIX_MUTEX_HPP	/usr/include/boost/asio/detail/posix_mutex.hpp	12;"	d
BOOST_ASIO_DETAIL_POSIX_SIGNAL_BLOCKER_HPP	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	12;"	d
BOOST_ASIO_DETAIL_POSIX_STATIC_MUTEX_HPP	/usr/include/boost/asio/detail/posix_static_mutex.hpp	12;"	d
BOOST_ASIO_DETAIL_POSIX_THREAD_HPP	/usr/include/boost/asio/detail/posix_thread.hpp	12;"	d
BOOST_ASIO_DETAIL_POSIX_TSS_PTR_HPP	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_DESCRIPTOR_SERVICE_HPP	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_NULL_BUFFERS_OP_HPP	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_SERIAL_PORT_SERVICE_HPP	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	13;"	d
BOOST_ASIO_DETAIL_REACTIVE_SOCKET_ACCEPT_OP_HPP	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_SOCKET_CONNECT_OP_HPP	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_SOCKET_RECVFROM_OP_HPP	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_SOCKET_RECVMSG_OP_HPP	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_SOCKET_RECV_OP_HPP	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_SOCKET_SENDTO_OP_HPP	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_SOCKET_SEND_OP_HPP	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_SOCKET_SERVICE_BASE_HPP	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_SOCKET_SERVICE_HPP	/usr/include/boost/asio/detail/reactive_socket_service.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTOR_FWD_HPP	/usr/include/boost/asio/detail/reactor_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTOR_HPP	/usr/include/boost/asio/detail/reactor.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTOR_OP_HPP	/usr/include/boost/asio/detail/reactor_op.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTOR_OP_QUEUE_HPP	/usr/include/boost/asio/detail/reactor_op_queue.hpp	12;"	d
BOOST_ASIO_DETAIL_REGEX_FWD_HPP	/usr/include/boost/asio/detail/regex_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_RESOLVER_ENDPOINT_OP_HPP	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	12;"	d
BOOST_ASIO_DETAIL_RESOLVER_SERVICE_BASE_HPP	/usr/include/boost/asio/detail/resolver_service_base.hpp	12;"	d
BOOST_ASIO_DETAIL_RESOLVER_SERVICE_HPP	/usr/include/boost/asio/detail/resolver_service.hpp	12;"	d
BOOST_ASIO_DETAIL_RESOLVE_OP_HPP	/usr/include/boost/asio/detail/resolve_op.hpp	12;"	d
BOOST_ASIO_DETAIL_SCOPED_LOCK_HPP	/usr/include/boost/asio/detail/scoped_lock.hpp	12;"	d
BOOST_ASIO_DETAIL_SCOPED_PTR_HPP	/usr/include/boost/asio/detail/scoped_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_SELECT_INTERRUPTER_HPP	/usr/include/boost/asio/detail/select_interrupter.hpp	12;"	d
BOOST_ASIO_DETAIL_SELECT_REACTOR_FWD_HPP	/usr/include/boost/asio/detail/select_reactor_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_SELECT_REACTOR_HPP	/usr/include/boost/asio/detail/select_reactor.hpp	12;"	d
BOOST_ASIO_DETAIL_SERVICE_REGISTRY_FWD_HPP	/usr/include/boost/asio/detail/service_registry_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_SERVICE_REGISTRY_HPP	/usr/include/boost/asio/detail/service_registry.hpp	12;"	d
BOOST_ASIO_DETAIL_SHARED_PTR_HPP	/usr/include/boost/asio/detail/shared_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_SIGNAL_BLOCKER_HPP	/usr/include/boost/asio/detail/signal_blocker.hpp	12;"	d
BOOST_ASIO_DETAIL_SIGNAL_HANDLER_HPP	/usr/include/boost/asio/detail/signal_handler.hpp	12;"	d
BOOST_ASIO_DETAIL_SIGNAL_INIT_HPP	/usr/include/boost/asio/detail/signal_init.hpp	12;"	d
BOOST_ASIO_DETAIL_SIGNAL_OP_HPP	/usr/include/boost/asio/detail/signal_op.hpp	12;"	d
BOOST_ASIO_DETAIL_SIGNAL_SET_SERVICE_HPP	/usr/include/boost/asio/detail/signal_set_service.hpp	12;"	d
BOOST_ASIO_DETAIL_SOCKET_HOLDER_HPP	/usr/include/boost/asio/detail/socket_holder.hpp	12;"	d
BOOST_ASIO_DETAIL_SOCKET_OPS_HPP	/usr/include/boost/asio/detail/socket_ops.hpp	12;"	d
BOOST_ASIO_DETAIL_SOCKET_OPS_IPP	/usr/include/boost/asio/detail/impl/socket_ops.ipp	12;"	d	file:
BOOST_ASIO_DETAIL_SOCKET_OPTION_HPP	/usr/include/boost/asio/detail/socket_option.hpp	12;"	d
BOOST_ASIO_DETAIL_SOCKET_SELECT_INTERRUPTER_HPP	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	12;"	d
BOOST_ASIO_DETAIL_SOCKET_TYPES_HPP	/usr/include/boost/asio/detail/socket_types.hpp	12;"	d
BOOST_ASIO_DETAIL_SOLARIS_FENCED_BLOCK_HPP	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	12;"	d
BOOST_ASIO_DETAIL_STATIC_MUTEX_HPP	/usr/include/boost/asio/detail/static_mutex.hpp	12;"	d
BOOST_ASIO_DETAIL_STRAND_SERVICE_HPP	/usr/include/boost/asio/detail/strand_service.hpp	12;"	d
BOOST_ASIO_DETAIL_TASK_IO_SERVICE_FWD_HPP	/usr/include/boost/asio/detail/task_io_service_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_TASK_IO_SERVICE_HPP	/usr/include/boost/asio/detail/task_io_service.hpp	12;"	d
BOOST_ASIO_DETAIL_TASK_IO_SERVICE_OPERATION_HPP	/usr/include/boost/asio/detail/task_io_service_operation.hpp	12;"	d
BOOST_ASIO_DETAIL_TASK_IO_SERVICE_THREAD_INFO_HPP	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	12;"	d
BOOST_ASIO_DETAIL_THREAD_HPP	/usr/include/boost/asio/detail/thread.hpp	12;"	d
BOOST_ASIO_DETAIL_THREAD_INFO_BASE_HPP	/usr/include/boost/asio/detail/thread_info_base.hpp	12;"	d
BOOST_ASIO_DETAIL_THROW_ERROR_HPP	/usr/include/boost/asio/detail/throw_error.hpp	12;"	d
BOOST_ASIO_DETAIL_TIMER_QUEUE_BASE_HPP	/usr/include/boost/asio/detail/timer_queue_base.hpp	12;"	d
BOOST_ASIO_DETAIL_TIMER_QUEUE_FWD_HPP	/usr/include/boost/asio/detail/timer_queue_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_TIMER_QUEUE_HPP	/usr/include/boost/asio/detail/timer_queue.hpp	12;"	d
BOOST_ASIO_DETAIL_TIMER_QUEUE_PTIME_HPP	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	12;"	d
BOOST_ASIO_DETAIL_TIMER_QUEUE_SET_HPP	/usr/include/boost/asio/detail/timer_queue_set.hpp	12;"	d
BOOST_ASIO_DETAIL_TIMER_SCHEDULER_FWD_HPP	/usr/include/boost/asio/detail/timer_scheduler_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_TIMER_SCHEDULER_HPP	/usr/include/boost/asio/detail/timer_scheduler.hpp	12;"	d
BOOST_ASIO_DETAIL_TSS_PTR_HPP	/usr/include/boost/asio/detail/tss_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_WAIT_HANDLER_HPP	/usr/include/boost/asio/detail/wait_handler.hpp	12;"	d
BOOST_ASIO_DETAIL_WAIT_OP_HPP	/usr/include/boost/asio/detail/wait_op.hpp	12;"	d
BOOST_ASIO_DETAIL_WEAK_PTR_HPP	/usr/include/boost/asio/detail/weak_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_WINCE_THREAD_HPP	/usr/include/boost/asio/detail/wince_thread.hpp	12;"	d
BOOST_ASIO_DETAIL_WINSOCK_INIT_HPP	/usr/include/boost/asio/detail/winsock_init.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_EVENT_HPP	/usr/include/boost/asio/detail/win_event.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_FD_SET_ADAPTER_HPP	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_FENCED_BLOCK_HPP	/usr/include/boost/asio/detail/win_fenced_block.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_HANDLE_READ_OP_HPP	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	13;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_HANDLE_SERVICE_HPP	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	13;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_HANDLE_WRITE_OP_HPP	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	13;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_IO_SERVICE_FWD_HPP	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_IO_SERVICE_HPP	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_NULL_BUFFERS_OP_HPP	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_OPERATION_HPP	/usr/include/boost/asio/detail/win_iocp_operation.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_OVERLAPPED_OP_HPP	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_OVERLAPPED_PTR_HPP	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_SERIAL_PORT_SERVICE_HPP	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	13;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_SOCKET_ACCEPT_OP_HPP	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_SOCKET_RECVFROM_OP_HPP	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_SOCKET_RECVMSG_OP_HPP	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_SOCKET_RECV_OP_HPP	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_SOCKET_SEND_OP_HPP	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_SOCKET_SERVICE_BASE_HPP	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_SOCKET_SERVICE_HPP	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_THREAD_INFO_HPP	/usr/include/boost/asio/detail/win_iocp_thread_info.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_MUTEX_HPP	/usr/include/boost/asio/detail/win_mutex.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_OBJECT_HANDLE_SERVICE_HPP	/usr/include/boost/asio/detail/win_object_handle_service.hpp	13;"	d
BOOST_ASIO_DETAIL_WIN_STATIC_MUTEX_HPP	/usr/include/boost/asio/detail/win_static_mutex.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_THREAD_HPP	/usr/include/boost/asio/detail/win_thread.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_TSS_PTR_HPP	/usr/include/boost/asio/detail/win_tss_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_WRAPPED_HANDLER_HPP	/usr/include/boost/asio/detail/wrapped_handler.hpp	12;"	d
BOOST_ASIO_ENABLE_BUFFER_DEBUGGING	/usr/include/boost/asio/buffer.hpp	29;"	d
BOOST_ASIO_ENABLE_BUFFER_DEBUGGING	/usr/include/boost/asio/buffer.hpp	37;"	d
BOOST_ASIO_ENABLE_HANDLER_TYPE_REQUIREMENTS	/usr/include/boost/asio/detail/handler_type_requirements.hpp	25;"	d
BOOST_ASIO_ENABLE_HANDLER_TYPE_REQUIREMENTS_ASSERT	/usr/include/boost/asio/detail/handler_type_requirements.hpp	36;"	d
BOOST_ASIO_ENABLE_HANDLER_TYPE_REQUIREMENTS_ASSERT	/usr/include/boost/asio/detail/handler_type_requirements.hpp	42;"	d
BOOST_ASIO_ERROR_CATEGORY_NOEXCEPT	/usr/include/boost/asio/detail/config.hpp	118;"	d
BOOST_ASIO_ERROR_CATEGORY_NOEXCEPT	/usr/include/boost/asio/detail/config.hpp	122;"	d
BOOST_ASIO_ERROR_CATEGORY_NOEXCEPT	/usr/include/boost/asio/detail/config.hpp	127;"	d
BOOST_ASIO_ERROR_HPP	/usr/include/boost/asio/error.hpp	12;"	d
BOOST_ASIO_GETADDRINFO_ERROR	/usr/include/boost/asio/error.hpp	320;"	d
BOOST_ASIO_GETADDRINFO_ERROR	/usr/include/boost/asio/error.hpp	36;"	d
BOOST_ASIO_GETADDRINFO_ERROR	/usr/include/boost/asio/error.hpp	43;"	d
BOOST_ASIO_GETADDRINFO_ERROR	/usr/include/boost/asio/error.hpp	49;"	d
BOOST_ASIO_HANDLER_ALLOC_HOOK_HPP	/usr/include/boost/asio/handler_alloc_hook.hpp	12;"	d
BOOST_ASIO_HANDLER_COMPLETION	/usr/include/boost/asio/detail/handler_tracking.hpp	126;"	d
BOOST_ASIO_HANDLER_CREATION	/usr/include/boost/asio/detail/handler_tracking.hpp	123;"	d
BOOST_ASIO_HANDLER_INVOCATION_BEGIN	/usr/include/boost/asio/detail/handler_tracking.hpp	129;"	d
BOOST_ASIO_HANDLER_INVOCATION_END	/usr/include/boost/asio/detail/handler_tracking.hpp	132;"	d
BOOST_ASIO_HANDLER_INVOKE_HOOK_HPP	/usr/include/boost/asio/handler_invoke_hook.hpp	12;"	d
BOOST_ASIO_HANDLER_OPERATION	/usr/include/boost/asio/detail/handler_tracking.hpp	135;"	d
BOOST_ASIO_HANDLER_TRACKING_INIT	/usr/include/boost/asio/detail/handler_tracking.hpp	120;"	d
BOOST_ASIO_HANDLER_TYPE_REQUIREMENTS_ASSERT	/usr/include/boost/asio/detail/handler_type_requirements.hpp	85;"	d
BOOST_ASIO_HANDSHAKE_HANDLER_CHECK	/usr/include/boost/asio/detail/handler_type_requirements.hpp	274;"	d
BOOST_ASIO_HAS_BOOST_CHRONO	/usr/include/boost/asio/detail/config.hpp	193;"	d
BOOST_ASIO_HAS_DEV_POLL	/usr/include/boost/asio/detail/config.hpp	303;"	d
BOOST_ASIO_HAS_EPOLL	/usr/include/boost/asio/detail/config.hpp	272;"	d
BOOST_ASIO_HAS_EVENTFD	/usr/include/boost/asio/detail/config.hpp	277;"	d
BOOST_ASIO_HAS_IOCP	/usr/include/boost/asio/detail/config.hpp	261;"	d
BOOST_ASIO_HAS_KQUEUE	/usr/include/boost/asio/detail/config.hpp	293;"	d
BOOST_ASIO_HAS_LOCAL_SOCKETS	/usr/include/boost/asio/detail/config.hpp	358;"	d
BOOST_ASIO_HAS_MOVE	/usr/include/boost/asio/detail/config.hpp	55;"	d
BOOST_ASIO_HAS_OLD_WIN_SDK	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	24;"	d
BOOST_ASIO_HAS_POSIX_STREAM_DESCRIPTOR	/usr/include/boost/asio/detail/config.hpp	351;"	d
BOOST_ASIO_HAS_SERIAL_PORT	/usr/include/boost/asio/detail/config.hpp	312;"	d
BOOST_ASIO_HAS_SIGACTION	/usr/include/boost/asio/detail/config.hpp	365;"	d
BOOST_ASIO_HAS_SIGNAL	/usr/include/boost/asio/detail/config.hpp	372;"	d
BOOST_ASIO_HAS_SSIZE_T	/usr/include/boost/asio/detail/config.hpp	395;"	d
BOOST_ASIO_HAS_STD_ARRAY	/usr/include/boost/asio/detail/config.hpp	136;"	d
BOOST_ASIO_HAS_STD_ARRAY	/usr/include/boost/asio/detail/config.hpp	142;"	d
BOOST_ASIO_HAS_STD_ATOMIC	/usr/include/boost/asio/detail/config.hpp	168;"	d
BOOST_ASIO_HAS_STD_CHRONO	/usr/include/boost/asio/detail/config.hpp	181;"	d
BOOST_ASIO_HAS_STD_CHRONO_MONOTONIC_CLOCK	/usr/include/boost/asio/detail/config.hpp	183;"	d
BOOST_ASIO_HAS_STD_SHARED_PTR	/usr/include/boost/asio/detail/config.hpp	152;"	d
BOOST_ASIO_HAS_STD_SHARED_PTR	/usr/include/boost/asio/detail/config.hpp	158;"	d
BOOST_ASIO_HAS_STD_SYSTEM_ERROR	/usr/include/boost/asio/detail/config.hpp	109;"	d
BOOST_ASIO_HAS_THREAD_KEYWORD_EXTENSION	/usr/include/boost/asio/detail/config.hpp	382;"	d
BOOST_ASIO_HAS_THREAD_KEYWORD_EXTENSION	/usr/include/boost/asio/detail/config.hpp	384;"	d
BOOST_ASIO_HAS_TIMERFD	/usr/include/boost/asio/detail/config.hpp	282;"	d
BOOST_ASIO_HAS_VARIADIC_TEMPLATES	/usr/include/boost/asio/detail/config.hpp	98;"	d
BOOST_ASIO_HAS_WINDOWS_OBJECT_HANDLE	/usr/include/boost/asio/detail/config.hpp	336;"	d
BOOST_ASIO_HAS_WINDOWS_OVERLAPPED_PTR	/usr/include/boost/asio/detail/config.hpp	344;"	d
BOOST_ASIO_HAS_WINDOWS_RANDOM_ACCESS_HANDLE	/usr/include/boost/asio/detail/config.hpp	328;"	d
BOOST_ASIO_HAS_WINDOWS_STREAM_HANDLE	/usr/include/boost/asio/detail/config.hpp	321;"	d
BOOST_ASIO_HEADER_ONLY	/usr/include/boost/asio/detail/config.hpp	23;"	d
BOOST_ASIO_HIGH_RESOLUTION_TIMER_HPP	/usr/include/boost/asio/high_resolution_timer.hpp	12;"	d
BOOST_ASIO_IMPL_CONNECT_HPP	/usr/include/boost/asio/impl/connect.hpp	12;"	d
BOOST_ASIO_IMPL_ERROR_IPP	/usr/include/boost/asio/impl/error.ipp	12;"	d	file:
BOOST_ASIO_IMPL_HANDLER_ALLOC_HOOK_IPP	/usr/include/boost/asio/impl/handler_alloc_hook.ipp	12;"	d	file:
BOOST_ASIO_IMPL_IO_SERVICE_HPP	/usr/include/boost/asio/impl/io_service.hpp	12;"	d
BOOST_ASIO_IMPL_IO_SERVICE_IPP	/usr/include/boost/asio/impl/io_service.ipp	12;"	d	file:
BOOST_ASIO_IMPL_READ_AT_HPP	/usr/include/boost/asio/impl/read_at.hpp	12;"	d
BOOST_ASIO_IMPL_READ_HPP	/usr/include/boost/asio/impl/read.hpp	12;"	d
BOOST_ASIO_IMPL_READ_UNTIL_HPP	/usr/include/boost/asio/impl/read_until.hpp	12;"	d
BOOST_ASIO_IMPL_SERIAL_PORT_BASE_HPP	/usr/include/boost/asio/impl/serial_port_base.hpp	13;"	d
BOOST_ASIO_IMPL_SERIAL_PORT_BASE_IPP	/usr/include/boost/asio/impl/serial_port_base.ipp	13;"	d	file:
BOOST_ASIO_IMPL_SRC_HPP	/usr/include/boost/asio/impl/src.hpp	12;"	d
BOOST_ASIO_IMPL_WRITE_AT_HPP	/usr/include/boost/asio/impl/write_at.hpp	12;"	d
BOOST_ASIO_IMPL_WRITE_HPP	/usr/include/boost/asio/impl/write.hpp	12;"	d
BOOST_ASIO_INHERIT_TRACKED_HANDLER	/usr/include/boost/asio/detail/handler_tracking.hpp	114;"	d
BOOST_ASIO_INHERIT_TRACKED_HANDLER	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^class task_io_service_operation BOOST_ASIO_INHERIT_TRACKED_HANDLER$/;"	c	namespace:boost::asio::detail
BOOST_ASIO_IO_SERVICE_HPP	/usr/include/boost/asio/io_service.hpp	12;"	d
BOOST_ASIO_IP_ADDRESS_HPP	/usr/include/boost/asio/ip/address.hpp	12;"	d
BOOST_ASIO_IP_ADDRESS_V4_HPP	/usr/include/boost/asio/ip/address_v4.hpp	12;"	d
BOOST_ASIO_IP_ADDRESS_V6_HPP	/usr/include/boost/asio/ip/address_v6.hpp	12;"	d
BOOST_ASIO_IP_BASIC_ENDPOINT_HPP	/usr/include/boost/asio/ip/basic_endpoint.hpp	12;"	d
BOOST_ASIO_IP_BASIC_RESOLVER_ENTRY_HPP	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	12;"	d
BOOST_ASIO_IP_BASIC_RESOLVER_HPP	/usr/include/boost/asio/ip/basic_resolver.hpp	12;"	d
BOOST_ASIO_IP_BASIC_RESOLVER_ITERATOR_HPP	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	12;"	d
BOOST_ASIO_IP_BASIC_RESOLVER_QUERY_HPP	/usr/include/boost/asio/ip/basic_resolver_query.hpp	12;"	d
BOOST_ASIO_IP_DETAIL_ENDPOINT_HPP	/usr/include/boost/asio/ip/detail/endpoint.hpp	12;"	d
BOOST_ASIO_IP_DETAIL_IMPL_ENDPOINT_IPP	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	12;"	d	file:
BOOST_ASIO_IP_DETAIL_SOCKET_OPTION_HPP	/usr/include/boost/asio/ip/detail/socket_option.hpp	12;"	d
BOOST_ASIO_IP_HOST_NAME_HPP	/usr/include/boost/asio/ip/host_name.hpp	12;"	d
BOOST_ASIO_IP_ICMP_HPP	/usr/include/boost/asio/ip/icmp.hpp	12;"	d
BOOST_ASIO_IP_IMPL_ADDRESS_HPP	/usr/include/boost/asio/ip/impl/address.hpp	12;"	d
BOOST_ASIO_IP_IMPL_ADDRESS_IPP	/usr/include/boost/asio/ip/impl/address.ipp	12;"	d	file:
BOOST_ASIO_IP_IMPL_ADDRESS_V4_HPP	/usr/include/boost/asio/ip/impl/address_v4.hpp	12;"	d
BOOST_ASIO_IP_IMPL_ADDRESS_V4_IPP	/usr/include/boost/asio/ip/impl/address_v4.ipp	12;"	d	file:
BOOST_ASIO_IP_IMPL_ADDRESS_V6_HPP	/usr/include/boost/asio/ip/impl/address_v6.hpp	12;"	d
BOOST_ASIO_IP_IMPL_ADDRESS_V6_IPP	/usr/include/boost/asio/ip/impl/address_v6.ipp	12;"	d	file:
BOOST_ASIO_IP_IMPL_BASIC_ENDPOINT_HPP	/usr/include/boost/asio/ip/impl/basic_endpoint.hpp	12;"	d
BOOST_ASIO_IP_IMPL_HOST_NAME_IPP	/usr/include/boost/asio/ip/impl/host_name.ipp	12;"	d	file:
BOOST_ASIO_IP_MULTICAST_HPP	/usr/include/boost/asio/ip/multicast.hpp	12;"	d
BOOST_ASIO_IP_RESOLVER_QUERY_BASE_HPP	/usr/include/boost/asio/ip/resolver_query_base.hpp	12;"	d
BOOST_ASIO_IP_RESOLVER_SERVICE_HPP	/usr/include/boost/asio/ip/resolver_service.hpp	12;"	d
BOOST_ASIO_IP_TCP_HPP	/usr/include/boost/asio/ip/tcp.hpp	12;"	d
BOOST_ASIO_IP_UDP_HPP	/usr/include/boost/asio/ip/udp.hpp	12;"	d
BOOST_ASIO_IP_UNICAST_HPP	/usr/include/boost/asio/ip/unicast.hpp	12;"	d
BOOST_ASIO_IP_V6_ONLY_HPP	/usr/include/boost/asio/ip/v6_only.hpp	12;"	d
BOOST_ASIO_IS_READ_BUFFERED_HPP	/usr/include/boost/asio/is_read_buffered.hpp	12;"	d
BOOST_ASIO_IS_WRITE_BUFFERED_HPP	/usr/include/boost/asio/is_write_buffered.hpp	12;"	d
BOOST_ASIO_KQUEUE_EV_SET	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	30;"	d	file:
BOOST_ASIO_KQUEUE_EV_SET	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	34;"	d	file:
BOOST_ASIO_KQUEUE_EV_SET	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	521;"	d	file:
BOOST_ASIO_LOCAL_BASIC_ENDPOINT_HPP	/usr/include/boost/asio/local/basic_endpoint.hpp	13;"	d
BOOST_ASIO_LOCAL_CONNECT_PAIR_HPP	/usr/include/boost/asio/local/connect_pair.hpp	12;"	d
BOOST_ASIO_LOCAL_DATAGRAM_PROTOCOL_HPP	/usr/include/boost/asio/local/datagram_protocol.hpp	12;"	d
BOOST_ASIO_LOCAL_DETAIL_ENDPOINT_HPP	/usr/include/boost/asio/local/detail/endpoint.hpp	13;"	d
BOOST_ASIO_LOCAL_DETAIL_IMPL_ENDPOINT_IPP	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	13;"	d	file:
BOOST_ASIO_LOCAL_STREAM_PROTOCOL_HPP	/usr/include/boost/asio/local/stream_protocol.hpp	12;"	d
BOOST_ASIO_MOVE_ARG	/usr/include/boost/asio/detail/config.hpp	65;"	d
BOOST_ASIO_MOVE_ARG	/usr/include/boost/asio/detail/config.hpp	77;"	d
BOOST_ASIO_MOVE_ARG	/usr/include/boost/asio/detail/config.hpp	79;"	d
BOOST_ASIO_MOVE_ARG	/usr/include/boost/asio/detail/config.hpp	83;"	d
BOOST_ASIO_MOVE_ARG	/usr/include/boost/asio/detail/config.hpp	85;"	d
BOOST_ASIO_MOVE_ARG	/usr/include/boost/asio/detail/config.hpp	88;"	d
BOOST_ASIO_MOVE_CAST	/usr/include/boost/asio/detail/config.hpp	66;"	d
BOOST_ASIO_MOVE_CAST	/usr/include/boost/asio/detail/config.hpp	90;"	d
BOOST_ASIO_NATIVE_ERROR	/usr/include/boost/asio/error.hpp	30;"	d
BOOST_ASIO_NATIVE_ERROR	/usr/include/boost/asio/error.hpp	317;"	d
BOOST_ASIO_NATIVE_ERROR	/usr/include/boost/asio/error.hpp	40;"	d
BOOST_ASIO_NATIVE_ERROR	/usr/include/boost/asio/error.hpp	46;"	d
BOOST_ASIO_NETDB_ERROR	/usr/include/boost/asio/error.hpp	319;"	d
BOOST_ASIO_NETDB_ERROR	/usr/include/boost/asio/error.hpp	34;"	d
BOOST_ASIO_NETDB_ERROR	/usr/include/boost/asio/error.hpp	42;"	d
BOOST_ASIO_NETDB_ERROR	/usr/include/boost/asio/error.hpp	48;"	d
BOOST_ASIO_NO_TYPEID	/usr/include/boost/asio/detail/service_registry.hpp	26;"	d
BOOST_ASIO_NULL_STATIC_MUTEX_INIT	/usr/include/boost/asio/detail/null_static_mutex.hpp	52;"	d
BOOST_ASIO_OBJC_WORKAROUND	/usr/include/boost/asio/detail/pop_options.hpp	39;"	d
BOOST_ASIO_OBJC_WORKAROUND	/usr/include/boost/asio/detail/push_options.hpp	40;"	d
BOOST_ASIO_OPTION_STORAGE	/usr/include/boost/asio/impl/serial_port_base.ipp	29;"	d	file:
BOOST_ASIO_OPTION_STORAGE	/usr/include/boost/asio/impl/serial_port_base.ipp	31;"	d	file:
BOOST_ASIO_OPTION_STORAGE	/usr/include/boost/asio/impl/serial_port_base.ipp	33;"	d	file:
BOOST_ASIO_OPTION_STORAGE	/usr/include/boost/asio/impl/serial_port_base.ipp	553;"	d	file:
BOOST_ASIO_OPTION_STORAGE	/usr/include/boost/asio/serial_port_base.hpp	166;"	d
BOOST_ASIO_OPTION_STORAGE	/usr/include/boost/asio/serial_port_base.hpp	33;"	d
BOOST_ASIO_OPTION_STORAGE	/usr/include/boost/asio/serial_port_base.hpp	35;"	d
BOOST_ASIO_OPTION_STORAGE	/usr/include/boost/asio/serial_port_base.hpp	37;"	d
BOOST_ASIO_PLACEHOLDERS_HPP	/usr/include/boost/asio/placeholders.hpp	12;"	d
BOOST_ASIO_POSIX_BASIC_DESCRIPTOR_HPP	/usr/include/boost/asio/posix/basic_descriptor.hpp	12;"	d
BOOST_ASIO_POSIX_BASIC_STREAM_DESCRIPTOR_HPP	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	12;"	d
BOOST_ASIO_POSIX_DESCRIPTOR_BASE_HPP	/usr/include/boost/asio/posix/descriptor_base.hpp	12;"	d
BOOST_ASIO_POSIX_STATIC_MUTEX_INIT	/usr/include/boost/asio/detail/posix_static_mutex.hpp	56;"	d
BOOST_ASIO_POSIX_STREAM_DESCRIPTOR_HPP	/usr/include/boost/asio/posix/stream_descriptor.hpp	12;"	d
BOOST_ASIO_POSIX_STREAM_DESCRIPTOR_SERVICE_HPP	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	12;"	d
BOOST_ASIO_PRIVATE_CONNECT_DEF	/usr/include/boost/asio/basic_socket_iostream.hpp	255;"	d
BOOST_ASIO_PRIVATE_CONNECT_DEF	/usr/include/boost/asio/basic_socket_iostream.hpp	71;"	d
BOOST_ASIO_PRIVATE_CONNECT_DEF	/usr/include/boost/asio/basic_socket_streambuf.hpp	543;"	d
BOOST_ASIO_PRIVATE_CONNECT_DEF	/usr/include/boost/asio/basic_socket_streambuf.hpp	63;"	d
BOOST_ASIO_PRIVATE_CTR_DEF	/usr/include/boost/asio/basic_socket_iostream.hpp	254;"	d
BOOST_ASIO_PRIVATE_CTR_DEF	/usr/include/boost/asio/basic_socket_iostream.hpp	49;"	d
BOOST_ASIO_RAW_SOCKET_SERVICE_HPP	/usr/include/boost/asio/raw_socket_service.hpp	12;"	d
BOOST_ASIO_READ_AT_HPP	/usr/include/boost/asio/read_at.hpp	12;"	d
BOOST_ASIO_READ_HANDLER_CHECK	/usr/include/boost/asio/detail/handler_type_requirements.hpp	120;"	d
BOOST_ASIO_READ_HPP	/usr/include/boost/asio/read.hpp	12;"	d
BOOST_ASIO_READ_UNTIL_HPP	/usr/include/boost/asio/read_until.hpp	12;"	d
BOOST_ASIO_RESOLVE_HANDLER_CHECK	/usr/include/boost/asio/detail/handler_type_requirements.hpp	216;"	d
BOOST_ASIO_SEQ_PACKET_SOCKET_SERVICE_HPP	/usr/include/boost/asio/seq_packet_socket_service.hpp	12;"	d
BOOST_ASIO_SERIAL_PORT_BASE_HPP	/usr/include/boost/asio/serial_port_base.hpp	13;"	d
BOOST_ASIO_SERIAL_PORT_HPP	/usr/include/boost/asio/serial_port.hpp	13;"	d
BOOST_ASIO_SERIAL_PORT_SERVICE_HPP	/usr/include/boost/asio/serial_port_service.hpp	12;"	d
BOOST_ASIO_SHUTDOWN_HANDLER_CHECK	/usr/include/boost/asio/detail/handler_type_requirements.hpp	292;"	d
BOOST_ASIO_SIGNAL_HANDLER_CHECK	/usr/include/boost/asio/detail/handler_type_requirements.hpp	254;"	d
BOOST_ASIO_SIGNAL_SET_HPP	/usr/include/boost/asio/signal_set.hpp	12;"	d
BOOST_ASIO_SIGNAL_SET_SERVICE_HPP	/usr/include/boost/asio/signal_set_service.hpp	12;"	d
BOOST_ASIO_SOCKET_ACCEPTOR_SERVICE_HPP	/usr/include/boost/asio/socket_acceptor_service.hpp	12;"	d
BOOST_ASIO_SOCKET_BASE_HPP	/usr/include/boost/asio/socket_base.hpp	12;"	d
BOOST_ASIO_SOCKET_ERROR	/usr/include/boost/asio/error.hpp	318;"	d
BOOST_ASIO_SOCKET_ERROR	/usr/include/boost/asio/error.hpp	32;"	d
BOOST_ASIO_SOCKET_ERROR	/usr/include/boost/asio/error.hpp	41;"	d
BOOST_ASIO_SOCKET_ERROR	/usr/include/boost/asio/error.hpp	47;"	d
BOOST_ASIO_SOCKET_IOSTREAM_MAX_ARITY	/usr/include/boost/asio/basic_socket_iostream.hpp	34;"	d
BOOST_ASIO_SOCKET_STREAMBUF_MAX_ARITY	/usr/include/boost/asio/basic_socket_streambuf.hpp	44;"	d
BOOST_ASIO_SOURCE	/usr/include/boost/asio/impl/src.hpp	14;"	d
BOOST_ASIO_SOURCE	/usr/include/boost/asio/ssl/impl/src.hpp	14;"	d
BOOST_ASIO_SSL_BASIC_CONTEXT_HPP	/usr/include/boost/asio/ssl/basic_context.hpp	12;"	d
BOOST_ASIO_SSL_CONTEXT_BASE_HPP	/usr/include/boost/asio/ssl/context_base.hpp	12;"	d
BOOST_ASIO_SSL_CONTEXT_HPP	/usr/include/boost/asio/ssl/context.hpp	12;"	d
BOOST_ASIO_SSL_CONTEXT_SERVICE_HPP	/usr/include/boost/asio/ssl/context_service.hpp	12;"	d
BOOST_ASIO_SSL_DETAIL_ENGINE_HPP	/usr/include/boost/asio/ssl/detail/engine.hpp	12;"	d
BOOST_ASIO_SSL_DETAIL_HANDSHAKE_OP_HPP	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	12;"	d
BOOST_ASIO_SSL_DETAIL_IMPL_ENGINE_IPP	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	12;"	d	file:
BOOST_ASIO_SSL_DETAIL_IMPL_OPENSSL_INIT_IPP	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	13;"	d	file:
BOOST_ASIO_SSL_DETAIL_IO_HPP	/usr/include/boost/asio/ssl/detail/io.hpp	12;"	d
BOOST_ASIO_SSL_DETAIL_OPENSSL_INIT_HPP	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	12;"	d
BOOST_ASIO_SSL_DETAIL_OPENSSL_TYPES_HPP	/usr/include/boost/asio/ssl/detail/openssl_types.hpp	12;"	d
BOOST_ASIO_SSL_DETAIL_PASSWORD_CALLBACK_HPP	/usr/include/boost/asio/ssl/detail/password_callback.hpp	12;"	d
BOOST_ASIO_SSL_DETAIL_READ_OP_HPP	/usr/include/boost/asio/ssl/detail/read_op.hpp	12;"	d
BOOST_ASIO_SSL_DETAIL_SHUTDOWN_OP_HPP	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	12;"	d
BOOST_ASIO_SSL_DETAIL_STREAM_CORE_HPP	/usr/include/boost/asio/ssl/detail/stream_core.hpp	12;"	d
BOOST_ASIO_SSL_DETAIL_VERIFY_CALLBACK_HPP	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	12;"	d
BOOST_ASIO_SSL_DETAIL_WRITE_OP_HPP	/usr/include/boost/asio/ssl/detail/write_op.hpp	12;"	d
BOOST_ASIO_SSL_ERROR_HPP	/usr/include/boost/asio/ssl/error.hpp	12;"	d
BOOST_ASIO_SSL_HPP	/usr/include/boost/asio/ssl.hpp	12;"	d
BOOST_ASIO_SSL_IMPL_CONTEXT_HPP	/usr/include/boost/asio/ssl/impl/context.hpp	13;"	d
BOOST_ASIO_SSL_IMPL_CONTEXT_IPP	/usr/include/boost/asio/ssl/impl/context.ipp	13;"	d	file:
BOOST_ASIO_SSL_IMPL_ERROR_IPP	/usr/include/boost/asio/ssl/impl/error.ipp	12;"	d	file:
BOOST_ASIO_SSL_IMPL_RFC2818_VERIFICATION_IPP	/usr/include/boost/asio/ssl/impl/rfc2818_verification.ipp	12;"	d	file:
BOOST_ASIO_SSL_IMPL_SRC_HPP	/usr/include/boost/asio/ssl/impl/src.hpp	12;"	d
BOOST_ASIO_SSL_OLD_BASIC_CONTEXT_HPP	/usr/include/boost/asio/ssl/old/basic_context.hpp	13;"	d
BOOST_ASIO_SSL_OLD_CONTEXT_SERVICE_HPP	/usr/include/boost/asio/ssl/old/context_service.hpp	13;"	d
BOOST_ASIO_SSL_OLD_DETAIL_OPENSSL_CONTEXT_SERVICE_HPP	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	13;"	d
BOOST_ASIO_SSL_OLD_DETAIL_OPENSSL_OPERATION_HPP	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	12;"	d
BOOST_ASIO_SSL_OLD_DETAIL_OPENSSL_STREAM_SERVICE_HPP	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	13;"	d
BOOST_ASIO_SSL_OLD_STREAM_HPP	/usr/include/boost/asio/ssl/old/stream.hpp	13;"	d
BOOST_ASIO_SSL_OLD_STREAM_SERVICE_HPP	/usr/include/boost/asio/ssl/old/stream_service.hpp	13;"	d
BOOST_ASIO_SSL_RFC2818_VERIFICATION_HPP	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	12;"	d
BOOST_ASIO_SSL_STREAM_BASE_HPP	/usr/include/boost/asio/ssl/stream_base.hpp	12;"	d
BOOST_ASIO_SSL_STREAM_HPP	/usr/include/boost/asio/ssl/stream.hpp	12;"	d
BOOST_ASIO_SSL_STREAM_SERVICE_HPP	/usr/include/boost/asio/ssl/stream_service.hpp	12;"	d
BOOST_ASIO_SSL_VERIFY_CONTEXT_HPP	/usr/include/boost/asio/ssl/verify_context.hpp	12;"	d
BOOST_ASIO_SSL_VERIFY_MODE_HPP	/usr/include/boost/asio/ssl/verify_mode.hpp	12;"	d
BOOST_ASIO_STATIC_MUTEX_INIT	/usr/include/boost/asio/detail/static_mutex.hpp	36;"	d
BOOST_ASIO_STEADY_TIMER_HPP	/usr/include/boost/asio/steady_timer.hpp	12;"	d
BOOST_ASIO_STRAND_HPP	/usr/include/boost/asio/strand.hpp	12;"	d
BOOST_ASIO_STREAMBUF_HPP	/usr/include/boost/asio/streambuf.hpp	12;"	d
BOOST_ASIO_STREAM_SOCKET_SERVICE_HPP	/usr/include/boost/asio/stream_socket_service.hpp	12;"	d
BOOST_ASIO_SYSTEM_TIMER_HPP	/usr/include/boost/asio/system_timer.hpp	12;"	d
BOOST_ASIO_TIME_TRAITS_HPP	/usr/include/boost/asio/time_traits.hpp	12;"	d
BOOST_ASIO_VERSION	/usr/include/boost/asio/version.hpp	21;"	d
BOOST_ASIO_VERSION_HPP	/usr/include/boost/asio/version.hpp	12;"	d
BOOST_ASIO_WAITABLE_TIMER_SERVICE_HPP	/usr/include/boost/asio/waitable_timer_service.hpp	12;"	d
BOOST_ASIO_WAIT_HANDLER_CHECK	/usr/include/boost/asio/detail/handler_type_requirements.hpp	236;"	d
BOOST_ASIO_WAIT_TRAITS_HPP	/usr/include/boost/asio/wait_traits.hpp	12;"	d
BOOST_ASIO_WINDOWS_BASIC_HANDLE_HPP	/usr/include/boost/asio/windows/basic_handle.hpp	12;"	d
BOOST_ASIO_WINDOWS_BASIC_OBJECT_HANDLE_HPP	/usr/include/boost/asio/windows/basic_object_handle.hpp	13;"	d
BOOST_ASIO_WINDOWS_BASIC_RANDOM_ACCESS_HANDLE_HPP	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	12;"	d
BOOST_ASIO_WINDOWS_BASIC_STREAM_HANDLE_HPP	/usr/include/boost/asio/windows/basic_stream_handle.hpp	12;"	d
BOOST_ASIO_WINDOWS_OBJECT_HANDLE_HPP	/usr/include/boost/asio/windows/object_handle.hpp	13;"	d
BOOST_ASIO_WINDOWS_OBJECT_HANDLE_SERVICE_HPP	/usr/include/boost/asio/windows/object_handle_service.hpp	13;"	d
BOOST_ASIO_WINDOWS_OVERLAPPED_PTR_HPP	/usr/include/boost/asio/windows/overlapped_ptr.hpp	12;"	d
BOOST_ASIO_WINDOWS_RANDOM_ACCESS_HANDLE_HPP	/usr/include/boost/asio/windows/random_access_handle.hpp	12;"	d
BOOST_ASIO_WINDOWS_RANDOM_ACCESS_HANDLE_SERVICE_HPP	/usr/include/boost/asio/windows/random_access_handle_service.hpp	12;"	d
BOOST_ASIO_WINDOWS_STREAM_HANDLE_HPP	/usr/include/boost/asio/windows/stream_handle.hpp	12;"	d
BOOST_ASIO_WINDOWS_STREAM_HANDLE_SERVICE_HPP	/usr/include/boost/asio/windows/stream_handle_service.hpp	12;"	d
BOOST_ASIO_WIN_OR_POSIX	/usr/include/boost/asio/error.hpp	321;"	d
BOOST_ASIO_WIN_OR_POSIX	/usr/include/boost/asio/error.hpp	38;"	d
BOOST_ASIO_WIN_OR_POSIX	/usr/include/boost/asio/error.hpp	44;"	d
BOOST_ASIO_WIN_OR_POSIX	/usr/include/boost/asio/error.hpp	50;"	d
BOOST_ASIO_WIN_STATIC_MUTEX_INIT	/usr/include/boost/asio/detail/win_static_mutex.hpp	59;"	d
BOOST_ASIO_WIN_STATIC_MUTEX_INIT	/usr/include/boost/asio/detail/win_static_mutex.hpp	61;"	d
BOOST_ASIO_WRITE_AT_HPP	/usr/include/boost/asio/write_at.hpp	12;"	d
BOOST_ASIO_WRITE_HANDLER_CHECK	/usr/include/boost/asio/detail/handler_type_requirements.hpp	140;"	d
BOOST_ASIO_WRITE_HPP	/usr/include/boost/asio/write.hpp	12;"	d
BOOST_ASIO_WSPIAPI_H_DEFINED	/usr/include/boost/asio/detail/socket_types.hpp	28;"	d
BOOST_ASIO_WSPIAPI_H_DEFINED	/usr/include/boost/asio/detail/socket_types.hpp	36;"	d
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/asio/detail/socket_option.hpp	/^  int timeout BOOST_PREVENT_MACRO_SUBSTITUTION() const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:() const
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/asio/detail/socket_option.hpp	/^  void timeout BOOST_PREVENT_MACRO_SUBSTITUTION(int value)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(int value)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/buffered_read_stream.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, default_buffer_size = 1024);$/;"	p	class:boost::asio::buffered_read_stream	access:public	signature:(std::size_t, default_buffer_size = 1024)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/buffered_write_stream.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, default_buffer_size = 1024);$/;"	p	class:boost::asio::buffered_write_stream	access:public	signature:(std::size_t, default_buffer_size = 1024)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int, max_connections = SOMAXCONN);$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, max_connections = SOMAXCONN)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_do_not_route = boost::asio::detail::message_do_not_route)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_end_of_record = boost::asio::detail::message_end_of_record)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_out_of_band = boost::asio::detail::message_out_of_band)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_peek = boost::asio::detail::message_peek)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, verify_client_once = SSL_VERIFY_CLIENT_ONCE);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_client_once = SSL_VERIFY_CLIENT_ONCE)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, verify_none = SSL_VERIFY_NONE);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_none = SSL_VERIFY_NONE)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, verify_peer = SSL_VERIFY_PEER);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_peer = SSL_VERIFY_PEER)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_fail_if_no_peer_cert = SSL_VERIFY_FAIL_IF_NO_PEER_CERT)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(long, default_workarounds = SSL_OP_ALL);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(long, default_workarounds = SSL_OP_ALL)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(long, no_sslv2 = SSL_OP_NO_SSLv2);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(long, no_sslv2 = SSL_OP_NO_SSLv2)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(long, no_sslv3 = SSL_OP_NO_SSLv3);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(long, no_sslv3 = SSL_OP_NO_SSLv3)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(long, no_tlsv1 = SSL_OP_NO_TLSv1);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(long, no_tlsv1 = SSL_OP_NO_TLSv1)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(long, single_dh_use = SSL_OP_SINGLE_DH_USE);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(long, single_dh_use = SSL_OP_SINGLE_DH_USE)
Byte	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^    u_char Byte[16];$/;"	m	union:boost::asio::detail::in6_addr_emulation::__anon13	access:public
EAI_AGAIN	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	113;"	d
EAI_BADFLAGS	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	117;"	d
EAI_FAIL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	121;"	d
EAI_FAMILY	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	125;"	d
EAI_MEMORY	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	129;"	d
EAI_NODATA	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	133;"	d
EAI_NONAME	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	137;"	d
EAI_SERVICE	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	141;"	d
EAI_SOCKTYPE	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	145;"	d
EV_OOBAND	/usr/include/boost/asio/detail/kqueue_reactor.hpp	44;"	d
IPPROTO_ICMPV6	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	211;"	d
IPPROTO_IPV6	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	169;"	d
IPV6_JOIN_GROUP	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	189;"	d
IPV6_LEAVE_GROUP	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	193;"	d
IPV6_MULTICAST_HOPS	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	181;"	d
IPV6_MULTICAST_IF	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	177;"	d
IPV6_MULTICAST_LOOP	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	185;"	d
IPV6_UNICAST_HOPS	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	173;"	d
IPV6_V6ONLY	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	206;"	d
NET_BUF_SIZE	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  static const int  NET_BUF_SIZE = 16*1024 + 256; \/\/ SSL record size + spare$/;"	m	class:boost::asio::ssl::old::detail::net_buffer	access:private
NI_DGRAM	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	165;"	d
NI_NAMEREQD	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	157;"	d
NI_NOFQDN	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	149;"	d
NI_NUMERICHOST	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	153;"	d
NI_NUMERICSERV	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	161;"	d
NOMINMAX	/usr/include/boost/asio/detail/config.hpp	251;"	d
PodType	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const PodType (&data)[N],$/;"	m	namespace:boost::asio
PodType	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(PodType (&data)[N],$/;"	m	namespace:boost::asio
Protocol	/usr/include/boost/asio/detail/pop_options.hpp	37;"	d
Protocol	/usr/include/boost/asio/detail/push_options.hpp	38;"	d
SSL_accept	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    static int SSL_accept(SSL *ssl)$/;"	f	struct:boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap	access:public	signature:(SSL *ssl)
SSL_connect	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    static int SSL_connect(SSL *ssl)$/;"	f	struct:boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap	access:public	signature:(SSL *ssl)
SSL_shutdown	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    static int SSL_shutdown(SSL *ssl)$/;"	f	struct:boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap	access:public	signature:(SSL *ssl)
WIN32	/usr/include/boost/asio/detail/config.hpp	216;"	d
WIN32	/usr/include/boost/asio/detail/config.hpp	225;"	d
WIN32_LEAN_AND_MEAN	/usr/include/boost/asio/detail/config.hpp	242;"	d
Word	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^    u_short Word[8];$/;"	m	union:boost::asio::detail::in6_addr_emulation::__anon13	access:public
_S6_u8	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	69;"	d
_S6_un	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	68;"	d
_WIN32_WINNT	/usr/include/boost/asio/detail/config.hpp	211;"	d
_WSPIAPI_H_	/usr/include/boost/asio/detail/socket_types.hpp	27;"	d
_WSPIAPI_H_	/usr/include/boost/asio/detail/socket_types.hpp	35;"	d
__ss_align	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  __int64 __ss_align;$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
__ss_pad1	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  char __ss_pad1[sockaddr_storage_pad1size];$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
__ss_pad2	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  char __ss_pad2[sockaddr_storage_pad2size];$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
abandon_operations	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::abandon_operations($/;"	f	class:boost::asio::detail::task_io_service	signature:( op_queue<task_io_service::operation>& ops)
abandon_operations	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::abandon_operations($/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:( op_queue<win_iocp_operation>& ops)
abandon_operations	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void abandon_operations(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(op_queue<operation>& ops)
abandon_operations	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void abandon_operations(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(op_queue<operation>& ops)
accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code accept($/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:( basic_socket<protocol_type, SocketService>& peer, boost::system::error_code& ec)
accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code accept($/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:( basic_socket<protocol_type, SocketService>& peer, endpoint_type& peer_endpoint, boost::system::error_code& ec)
accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void accept(basic_socket<protocol_type, SocketService>& peer)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer)
accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer, endpoint_type& peer_endpoint)
accept	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^socket_type accept(socket_type s, socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
accept	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code accept(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, Socket& peer, endpoint_type* peer_endpoint, boost::system::error_code& ec)
accept	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL socket_type accept(socket_type s, socket_addr_type* addr,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
accept	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code accept(implementation_type& impl, Socket& peer,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, Socket& peer, endpoint_type* peer_endpoint, boost::system::error_code& ec)
accept	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code accept(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, basic_socket<protocol_type, SocketService>& peer, endpoint_type* peer_endpoint, boost::system::error_code& ec)
accept_mutex	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL static boost::asio::detail::static_mutex& accept_mutex();$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:()
accept_mutex	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^boost::asio::detail::static_mutex& engine::accept_mutex()$/;"	f	class:boost::asio::ssl::detail::engine	signature:()
acceptor	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_socket_acceptor<tcp> acceptor;$/;"	t	class:boost::asio::ip::tcp	access:public
acceptor	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_socket_acceptor<stream_protocol> acceptor;$/;"	t	class:boost::asio::local::stream_protocol	access:public
access_denied	/usr/include/boost/asio/error.hpp	/^  access_denied = BOOST_ASIO_SOCKET_ERROR(EACCES),$/;"	e	enum:boost::asio::error::basic_errors
adapt_completion_condition_result	/usr/include/boost/asio/completion_condition.hpp	/^inline std::size_t adapt_completion_condition_result(bool result)$/;"	f	namespace:boost::asio::detail	signature:(bool result)
adapt_completion_condition_result	/usr/include/boost/asio/completion_condition.hpp	/^inline std::size_t adapt_completion_condition_result(std::size_t result)$/;"	f	namespace:boost::asio::detail	signature:(std::size_t result)
add	/usr/include/boost/asio/basic_signal_set.hpp	/^  boost::system::error_code add(int signal_number,$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(int signal_number, boost::system::error_code& ec)
add	/usr/include/boost/asio/basic_signal_set.hpp	/^  void add(int signal_number)$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(int signal_number)
add	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  static time_type add(const time_type& t, const duration_type& d)$/;"	f	struct:boost::asio::detail::chrono_time_traits	access:public	signature:(const time_type& t, const duration_type& d)
add	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^boost::system::error_code signal_set_service::add($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl, int signal_number, boost::system::error_code& ec)
add	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code add(implementation_type& impl,$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl, int signal_number, boost::system::error_code& ec)
add	/usr/include/boost/asio/signal_set_service.hpp	/^  boost::system::error_code add(implementation_type& impl,$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl, int signal_number, boost::system::error_code& ec)
add	/usr/include/boost/asio/time_traits.hpp	/^  static time_type add(const time_type& t, const duration_type& d)$/;"	f	struct:boost::asio::time_traits	access:public	signature:(const time_type& t, const duration_type& d)
add_pending_event_change	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL ::pollfd& add_pending_event_change(int descriptor);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(int descriptor)
add_pending_event_change	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^::pollfd& dev_poll_reactor::add_pending_event_change(int descriptor)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(int descriptor)
add_service	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^void service_registry::add_service(Service* new_service)$/;"	f	class:boost::asio::detail::service_registry	signature:(Service* new_service)
add_service	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::add_service(signal_set_service* service)$/;"	f	class:boost::asio::detail::signal_set_service	signature:(signal_set_service* service)
add_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  void add_service(Service* new_service);$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:(Service* new_service)
add_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL static void add_service(signal_set_service* service);$/;"	p	class:boost::asio::detail::signal_set_service	access:private	signature:(signal_set_service* service)
add_service	/usr/include/boost/asio/impl/io_service.hpp	/^inline void add_service(io_service& ios, Service* svc)$/;"	f	namespace:boost::asio	signature:(io_service& ios, Service* svc)
add_service	/usr/include/boost/asio/io_service.hpp	/^  friend void add_service(io_service& ios, Service* svc);$/;"	p	class:boost::asio::io_service	access:friend	signature:(io_service& ios, Service* svc)
add_service	/usr/include/boost/asio/io_service.hpp	/^template <typename Service> void add_service(io_service& ios, Service* svc);$/;"	p	namespace:boost::asio	signature:(io_service& ios, Service* svc)
add_timer_queue	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& queue);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& queue)
add_timer_queue	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue);$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
add_timer_queue	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^void dev_poll_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(timer_queue<Time_Traits>& queue)
add_timer_queue	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^void epoll_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(timer_queue<Time_Traits>& queue)
add_timer_queue	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^void kqueue_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timer_queue<Time_Traits>& queue)
add_timer_queue	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^void select_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::select_reactor	signature:(timer_queue<Time_Traits>& queue)
add_timer_queue	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^void win_iocp_io_service::add_timer_queue($/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:( timer_queue<Time_Traits>& queue)
add_timer_queue	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& queue);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& queue)
add_timer_queue	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& queue);$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& queue)
add_timer_queue	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
add_verify_path	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::add_verify_path($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& path, boost::system::error_code& ec)
add_verify_path	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::add_verify_path(const std::string& path)$/;"	f	class:boost::asio::ssl::context	signature:(const std::string& path)
add_verify_path	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code add_verify_path(const std::string& path,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& path, boost::system::error_code& ec)
add_verify_path	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void add_verify_path(const std::string& path)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& path)
add_verify_path	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code add_verify_path(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& path, boost::system::error_code& ec)
add_verify_path	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code add_verify_path(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& path, boost::system::error_code& ec)
addr_	/usr/include/boost/asio/ip/address_v4.hpp	/^  boost::asio::detail::in4_addr_type addr_;$/;"	m	class:boost::asio::ip::address_v4	access:private
addr_	/usr/include/boost/asio/ip/address_v6.hpp	/^  boost::asio::detail::in6_addr_type addr_;$/;"	m	class:boost::asio::ip::address_v6	access:private
address	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address();$/;"	p	class:boost::asio::ip::address	access:public	signature:()
address	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address(address&& other);$/;"	p	class:boost::asio::ip::address	access:public	signature:(address&& other)
address	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address(const address& other);$/;"	p	class:boost::asio::ip::address	access:public	signature:(const address& other)
address	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address(const boost::asio::ip::address_v4& ipv4_address);$/;"	p	class:boost::asio::ip::address	access:public	signature:(const boost::asio::ip::address_v4& ipv4_address)
address	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address(const boost::asio::ip::address_v6& ipv6_address);$/;"	p	class:boost::asio::ip::address	access:public	signature:(const boost::asio::ip::address_v6& ipv6_address)
address	/usr/include/boost/asio/ip/address.hpp	/^class address$/;"	c	namespace:boost::asio::ip
address	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  boost::asio::ip::address address() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
address	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  void address(const boost::asio::ip::address& addr)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const boost::asio::ip::address& addr)
address	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL boost::asio::ip::address address() const;$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:() const
address	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void address(const boost::asio::ip::address& addr);$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:(const boost::asio::ip::address& addr)
address	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^boost::asio::ip::address endpoint::address() const$/;"	f	class:boost::asio::ip::detail::endpoint	signature:() const
address	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^void endpoint::address(const boost::asio::ip::address& addr)$/;"	f	class:boost::asio::ip::detail::endpoint	signature:(const boost::asio::ip::address& addr)
address	/usr/include/boost/asio/ip/impl/address.ipp	/^address::address()$/;"	f	class:boost::asio::ip::address	signature:()
address	/usr/include/boost/asio/ip/impl/address.ipp	/^address::address(address&& other)$/;"	f	class:boost::asio::ip::address	signature:(address&& other)
address	/usr/include/boost/asio/ip/impl/address.ipp	/^address::address(const address& other)$/;"	f	class:boost::asio::ip::address	signature:(const address& other)
address	/usr/include/boost/asio/ip/impl/address.ipp	/^address::address(const boost::asio::ip::address_v4& ipv4_address)$/;"	f	class:boost::asio::ip::address	signature:(const boost::asio::ip::address_v4& ipv4_address)
address	/usr/include/boost/asio/ip/impl/address.ipp	/^address::address(const boost::asio::ip::address_v6& ipv6_address)$/;"	f	class:boost::asio::ip::address	signature:(const boost::asio::ip::address_v6& ipv6_address)
address_configured	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags address_configured = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
address_family_not_supported	/usr/include/boost/asio/error.hpp	/^  address_family_not_supported = BOOST_ASIO_SOCKET_ERROR(EAFNOSUPPORT),$/;"	e	enum:boost::asio::error::basic_errors
address_in_use	/usr/include/boost/asio/error.hpp	/^  address_in_use = BOOST_ASIO_SOCKET_ERROR(EADDRINUSE),$/;"	e	enum:boost::asio::error::basic_errors
address_length	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  DWORD address_length()$/;"	f	class:boost::asio::detail::win_iocp_socket_accept_op	access:public	signature:()
address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL explicit address_v4(const bytes_type& bytes);$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:(const bytes_type& bytes)
address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL explicit address_v4(unsigned long addr);$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:(unsigned long addr)
address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4(address_v4&& other)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(address_v4&& other)
address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4(const address_v4& other)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& other)
address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^class address_v4$/;"	c	namespace:boost::asio::ip
address_v4	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4::address_v4(const address_v4::bytes_type& bytes)$/;"	f	class:boost::asio::ip::address_v4	signature:(const address_v4::bytes_type& bytes)
address_v4	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4::address_v4(unsigned long addr)$/;"	f	class:boost::asio::ip::address_v4	signature:(unsigned long addr)
address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL address_v6();$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:()
address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL address_v6(address_v6&& other);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(address_v6&& other)
address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL address_v6(const address_v6& other);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const address_v6& other)
address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL explicit address_v6(const bytes_type& bytes,$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const bytes_type& bytes, unsigned long scope_id = 0)
address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^class address_v6$/;"	c	namespace:boost::asio::ip
address_v6	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6::address_v6()$/;"	f	class:boost::asio::ip::address_v6	signature:()
address_v6	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6::address_v6(address_v6&& other)$/;"	f	class:boost::asio::ip::address_v6	signature:(address_v6&& other)
address_v6	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6::address_v6(const address_v6& other)$/;"	f	class:boost::asio::ip::address_v6	signature:(const address_v6& other)
address_v6	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6::address_v6(const address_v6::bytes_type& bytes,$/;"	f	class:boost::asio::ip::address_v6	signature:(const address_v6::bytes_type& bytes, unsigned long scope)
addrinfo_	/usr/include/boost/asio/detail/resolve_op.hpp	/^  boost::asio::detail::addrinfo_type* addrinfo_;$/;"	m	class:boost::asio::detail::resolve_op	access:private
addrinfo_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& addrinfo_category$/;"	m	namespace:boost::asio::error
addrinfo_category	/usr/include/boost/asio/impl/error.ipp	/^class addrinfo_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	file:	inherits:boost::system::error_category
addrinfo_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct addrinfo_emulation$/;"	s	namespace:boost::asio::detail
addrinfo_errors	/usr/include/boost/asio/error.hpp	/^enum addrinfo_errors$/;"	g	namespace:boost::asio::error
addrinfo_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef addrinfo addrinfo_type;$/;"	t	namespace:boost::asio::detail
addrinfo_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef addrinfo_emulation addrinfo_type;$/;"	t	namespace:boost::asio::detail
advance	/usr/include/boost/asio/buffers_iterator.hpp	/^  void advance(std::ptrdiff_t n)$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:(std::ptrdiff_t n)
ai_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^    boost::asio::detail::addrinfo_type* ai_;$/;"	m	class:boost::asio::detail::resolver_service_base::auto_addrinfo	access:private
ai_addr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr* ai_addr;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
ai_addrlen	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  size_t ai_addrlen;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
ai_canonname	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  char* ai_canonname;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
ai_family	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_family;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
ai_flags	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_flags;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
ai_next	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  addrinfo_emulation* ai_next;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
ai_protocol	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_protocol;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
ai_socktype	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_socktype;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
all_empty	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  bool all_empty() const$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:() const
all_empty	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  static bool all_empty(const Buffers& buffer_sequence)$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:(const Buffers& buffer_sequence)
all_empty	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^bool timer_queue_set::all_empty() const$/;"	f	class:boost::asio::detail::timer_queue_set	signature:() const
all_empty	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL bool all_empty() const;$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:() const
all_matching	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags all_matching = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
alloc	/usr/include/boost/asio/detail/object_pool.hpp	/^  Object* alloc()$/;"	f	class:boost::asio::detail::object_pool	access:public	signature:()
allocate	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^inline void* allocate(std::size_t s, Handler& h)$/;"	f	namespace:boost_asio_handler_alloc_helpers	signature:(std::size_t s, Handler& h)
allocate	/usr/include/boost/asio/detail/thread_info_base.hpp	/^  static void* allocate(thread_info_base* this_thread, std::size_t size)$/;"	f	class:boost::asio::detail::thread_info_base	access:public	signature:(thread_info_base* this_thread, std::size_t size)
allocate_descriptor_state	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL descriptor_state* allocate_descriptor_state();$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:()
allocate_descriptor_state	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^epoll_reactor::descriptor_state* epoll_reactor::allocate_descriptor_state()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
allocate_descriptor_state	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^kqueue_reactor::descriptor_state* kqueue_reactor::allocate_descriptor_state()$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:()
allocate_descriptor_state	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL descriptor_state* allocate_descriptor_state();$/;"	p	class:boost::asio::detail::kqueue_reactor	access:private	signature:()
already_connected	/usr/include/boost/asio/error.hpp	/^  already_connected = BOOST_ASIO_SOCKET_ERROR(EISCONN),$/;"	e	enum:boost::asio::error::basic_errors
already_open	/usr/include/boost/asio/error.hpp	/^  already_open = 1,$/;"	e	enum:boost::asio::error::misc_errors
already_started	/usr/include/boost/asio/error.hpp	/^  already_started = BOOST_ASIO_SOCKET_ERROR(EALREADY),$/;"	e	enum:boost::asio::error::basic_errors
always_fail_option	/usr/include/boost/asio/detail/socket_types.hpp	/^const int always_fail_option = 2;$/;"	m	namespace:boost::asio::detail
any	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 any()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
any	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 any()$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:()
apc_function	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^void __stdcall apc_function(ULONG) {}$/;"	f	namespace:boost::asio::detail	signature:(ULONG)
apc_function	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^void __stdcall apc_function(ULONG_PTR) {}$/;"	f	namespace:boost::asio::detail	signature:(ULONG_PTR)
apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^  friend BOOST_ASIO_DECL void __stdcall apc_function(ULONG);$/;"	p	class:boost::asio::detail::win_thread	access:friend	signature:(ULONG)
apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^  friend BOOST_ASIO_DECL void __stdcall apc_function(ULONG_PTR);$/;"	p	class:boost::asio::detail::win_thread	access:friend	signature:(ULONG_PTR)
apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^BOOST_ASIO_DECL void __stdcall apc_function(ULONG data);$/;"	p	namespace:boost::asio::detail	signature:(ULONG data)
apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^BOOST_ASIO_DECL void __stdcall apc_function(ULONG_PTR data);$/;"	p	namespace:boost::asio::detail	signature:(ULONG_PTR data)
arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder1	access:public
arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder2	access:public
arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder3	access:public
arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder4	access:public
arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder5	access:public
arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder2	access:public
arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder3	access:public
arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder4	access:public
arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder5	access:public
arg3_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:boost::asio::detail::binder3	access:public
arg3_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:boost::asio::detail::binder4	access:public
arg3_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:boost::asio::detail::binder5	access:public
arg4_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg4 arg4_;$/;"	m	class:boost::asio::detail::binder4	access:public
arg4_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg4 arg4_;$/;"	m	class:boost::asio::detail::binder5	access:public
arg5_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg5 arg5_;$/;"	m	class:boost::asio::detail::binder5	access:public
argbyv	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^template <typename T> char argbyv(T);$/;"	p	namespace:boost::asio::detail	signature:(T)
asio	/usr/include/boost/asio/basic_datagram_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_deadline_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_io_object.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_raw_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_serial_port.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_signal_set.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_socket_iostream.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_stream_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_streambuf.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_streambuf_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_waitable_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffer.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffered_read_stream.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffered_read_stream_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffered_stream.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffered_stream_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffered_write_stream.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffered_write_stream_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffers_iterator.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/completion_condition.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/connect.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/datagram_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/deadline_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/deadline_timer_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/array.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/atomic_count.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/bind_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/call_stack.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/completion_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/dependent_type.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/event.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/handler_tracking.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/hash_map.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/posix_event.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/posix_mutex.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/posix_tss_ptr.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/task_io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/throw_error.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/win_event.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/win_mutex.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/win_static_mutex.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/win_tss_ptr.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/impl/winsock_init.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/detail/io_control.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/noncopyable.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/null_event.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/null_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/null_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/object_pool.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/op_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/operation.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_event.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactor_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/resolve_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/resolver_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/scoped_lock.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/select_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/select_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/service_registry.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/service_registry_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/shared_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/signal_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/signal_init.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/signal_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/signal_set_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/socket_holder.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/socket_types.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/static_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/strand_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/task_io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/task_io_service_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/thread.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/thread_info_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/throw_error.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/timer_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/timer_queue_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/timer_scheduler_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/wait_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/wait_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/weak_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_event.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_thread_info.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/wince_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/winsock_init.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/error.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/handler_alloc_hook.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/handler_invoke_hook.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/high_resolution_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/impl/connect.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/impl/error.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/impl/handler_alloc_hook.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/impl/io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/impl/io_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/impl/read.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/impl/read_at.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/impl/read_until.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/impl/serial_port_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/impl/serial_port_base.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/impl/write.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/impl/write_at.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/address.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/address_v4.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/address_v6.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/basic_resolver.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/host_name.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/icmp.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/impl/address.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/impl/address.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/ip/impl/address_v4.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/ip/impl/address_v6.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/ip/impl/basic_endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/impl/host_name.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/ip/multicast.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/resolver_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/tcp.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/udp.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/unicast.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/v6_only.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/is_read_buffered.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/is_write_buffered.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/local/basic_endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/local/connect_pair.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/local/datagram_protocol.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/local/detail/endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/local/stream_protocol.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/placeholders.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/posix/descriptor_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/raw_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/read.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/read_at.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/read_until.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/serial_port.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/serial_port_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/serial_port_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/signal_set.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/signal_set_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/socket_acceptor_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/socket_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/basic_context.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/context.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/context_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/context_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/engine.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/ssl/detail/io.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/error.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/impl/context.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/impl/context.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/ssl/impl/error.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/ssl/impl/rfc2818_verification.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
asio	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/old/context_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/old/stream.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/stream.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/stream_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/stream_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/verify_context.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/verify_mode.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/steady_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/strand.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/stream_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/streambuf.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/system_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/time_traits.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/wait_traits.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/waitable_timer_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/basic_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/object_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/object_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/random_access_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/stream_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/write.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/write_at.hpp	/^namespace asio {$/;"	n	namespace:boost
asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder1<Handler, Arg1>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder2<Handler, Arg1, Arg2>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, rewrapped_handler<Handler, Context>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, wrapped_handler<Dispatcher, Handler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/handler_alloc_hook.hpp	/^BOOST_ASIO_DECL void* asio_handler_allocate($/;"	p	namespace:boost::asio	signature:( std::size_t size, ...)
asio_handler_allocate	/usr/include/boost/asio/impl/connect.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, connect_op<Protocol, SocketService, Iterator, ConnectCondition, ComposedConnectHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/impl/handler_alloc_hook.ipp	/^void* asio_handler_allocate(std::size_t size, ...)$/;"	f	namespace:boost::asio	signature:(std::size_t size, ...)
asio_handler_allocate	/usr/include/boost/asio/impl/read.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_op<AsyncReadStream, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/impl/read.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_streambuf_op<AsyncReadStream, Allocator, CompletionCondition, ReadHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator, CompletionCondition, ReadHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_until_delim_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_until_delim_string_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_until_expr_op<AsyncReadStream, Allocator, RegEx, ReadHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_until_match_op<AsyncReadStream, Allocator, MatchCondition, ReadHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/impl/write.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, write_op<AsyncWriteStream, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/impl/write.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, write_streambuf_handler<Allocator, WriteHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/ssl/detail/io.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::ssl::detail	signature:(std::size_t size, io_op<Stream, Operation, Handler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder1<Handler, Arg1>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder2<Handler, Arg1, Arg2>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, rewrapped_handler<Handler, Context>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, wrapped_handler<Dispatcher, Handler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/handler_alloc_hook.hpp	/^BOOST_ASIO_DECL void asio_handler_deallocate($/;"	p	namespace:boost::asio	signature:( void* pointer, std::size_t size, ...)
asio_handler_deallocate	/usr/include/boost/asio/impl/connect.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, connect_op<Protocol, SocketService, Iterator, ConnectCondition, ComposedConnectHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/impl/handler_alloc_hook.ipp	/^void asio_handler_deallocate(void* pointer, std::size_t size, ...)$/;"	f	namespace:boost::asio	signature:(void* pointer, std::size_t size, ...)
asio_handler_deallocate	/usr/include/boost/asio/impl/read.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_op<AsyncReadStream, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/impl/read.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_streambuf_op<AsyncReadStream, Allocator, CompletionCondition, ReadHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator, CompletionCondition, ReadHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_until_delim_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_until_delim_string_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_until_expr_op<AsyncReadStream, Allocator, RegEx, ReadHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_until_match_op<AsyncReadStream, Allocator, MatchCondition, ReadHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/impl/write.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, write_op<AsyncWriteStream, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/impl/write.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, write_streambuf_handler<Allocator, WriteHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/ssl/detail/io.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::ssl::detail	signature:(void* pointer, std::size_t size, io_op<Stream, Operation, Handler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, binder1<Handler, Arg1>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, binder2<Handler, Arg1, Arg2>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder1<Handler, Arg1>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder2<Handler, Arg1, Arg2>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, rewrapped_handler<Handler, Context>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, wrapped_handler<Dispatcher, Handler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, rewrapped_handler<Handler, Context>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, wrapped_handler<Dispatcher, Handler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/handler_invoke_hook.hpp	/^inline void asio_handler_invoke(Function function, ...)$/;"	f	namespace:boost::asio	signature:(Function function, ...)
asio_handler_invoke	/usr/include/boost/asio/impl/connect.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, connect_op<Protocol, SocketService, Iterator, ConnectCondition, ComposedConnectHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/connect.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, connect_op<Protocol, SocketService, Iterator, ConnectCondition, ComposedConnectHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_op<AsyncReadStream, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_streambuf_op<AsyncReadStream, Allocator, CompletionCondition, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_op<AsyncReadStream, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_streambuf_op<AsyncReadStream, Allocator, CompletionCondition, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator, CompletionCondition, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator, CompletionCondition, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_until_delim_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_until_delim_string_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_until_expr_op<AsyncReadStream, Allocator, RegEx, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_until_match_op<AsyncReadStream, Allocator, MatchCondition, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_until_delim_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_until_delim_string_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_until_expr_op<AsyncReadStream, Allocator, RegEx, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_until_match_op<AsyncReadStream, Allocator, MatchCondition, ReadHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/write.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, write_op<AsyncWriteStream, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/write.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, write_streambuf_handler<Allocator, WriteHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/write.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, write_op<AsyncWriteStream, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/write.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, write_streambuf_handler<Allocator, WriteHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/ssl/detail/io.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::ssl::detail	signature:(Function& function, io_op<Stream, Operation, Handler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/ssl/detail/io.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::ssl::detail	signature:(const Function& function, io_op<Stream, Operation, Handler>* this_handler)
asio_signal_handler	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void asio_signal_handler(int signal_number)$/;"	f	namespace:boost::asio::detail	signature:(int signal_number)
asio_signal_handler	/usr/include/boost/asio/detail/signal_set_service.hpp	/^extern "C" BOOST_ASIO_DECL void asio_signal_handler(int signal_number);$/;"	p	namespace:boost::asio::detail	signature:(int signal_number)
asn1	/usr/include/boost/asio/ssl/context_base.hpp	/^    asn1,$/;"	e	enum:boost::asio::ssl::context_base::file_format
assign	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code assign(const native_handle_type& native_serial_port,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const native_handle_type& native_serial_port, boost::system::error_code& ec)
assign	/usr/include/boost/asio/basic_serial_port.hpp	/^  void assign(const native_handle_type& native_serial_port)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const native_handle_type& native_serial_port)
assign	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code assign(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
assign	/usr/include/boost/asio/basic_socket.hpp	/^  void assign(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol, const native_handle_type& native_socket)
assign	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code assign(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol, const native_handle_type& native_acceptor, boost::system::error_code& ec)
assign	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void assign(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol, const native_handle_type& native_acceptor)
assign	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^boost::system::error_code reactive_descriptor_service::assign($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl, const native_handle_type& native_descriptor, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^boost::system::error_code win_iocp_handle_service::assign($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^boost::system::error_code win_object_handle_service::assign($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code assign(implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const native_handle_type& native_descriptor, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const native_handle_type& native_descriptor, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code assign(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code assign(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code assign(const native_handle_type& native_descriptor,$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(const native_handle_type& native_descriptor, boost::system::error_code& ec)
assign	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void assign(const native_handle_type& native_descriptor)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(const native_handle_type& native_descriptor)
assign	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const native_handle_type& native_descriptor, boost::system::error_code& ec)
assign	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
assign	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
assign	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_acceptor, boost::system::error_code& ec)
assign	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
assign	/usr/include/boost/asio/windows/basic_handle.hpp	/^  boost::system::error_code assign(const native_handle_type& handle,$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(const native_handle_type& handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/windows/basic_handle.hpp	/^  void assign(const native_handle_type& handle)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(const native_handle_type& handle)
assign	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
async_accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void async_accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer, BOOST_ASIO_MOVE_ARG(AcceptHandler) handler)
async_accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void async_accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer, endpoint_type& peer_endpoint, BOOST_ASIO_MOVE_ARG(AcceptHandler) handler)
async_accept	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_accept(implementation_type& impl, Socket& peer,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, Socket& peer, endpoint_type* peer_endpoint, Handler handler)
async_accept	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void async_accept(implementation_type& impl, Socket& peer,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, Socket& peer, endpoint_type* peer_endpoint, Handler handler)
async_accept	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void async_accept(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, basic_socket<protocol_type, SocketService>& peer, endpoint_type* peer_endpoint, BOOST_ASIO_MOVE_ARG(AcceptHandler) handler)
async_connect	/usr/include/boost/asio/basic_socket.hpp	/^  void async_connect(const endpoint_type& peer_endpoint,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& peer_endpoint, BOOST_ASIO_MOVE_ARG(ConnectHandler) handler)
async_connect	/usr/include/boost/asio/connect.hpp	/^void async_connect(basic_socket<Protocol, SocketService>& s, Iterator begin,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, ConnectCondition connect_condition, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
async_connect	/usr/include/boost/asio/connect.hpp	/^void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
async_connect	/usr/include/boost/asio/connect.hpp	/^void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
async_connect	/usr/include/boost/asio/connect.hpp	/^void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, ConnectCondition connect_condition, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
async_connect	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, BOOST_ASIO_MOVE_ARG(ConnectHandler) handler)
async_connect	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, Handler handler)
async_connect	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, Handler handler)
async_connect	/usr/include/boost/asio/impl/connect.hpp	/^inline void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
async_connect	/usr/include/boost/asio/impl/connect.hpp	/^inline void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, ConnectCondition connect_condition, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
async_connect	/usr/include/boost/asio/impl/connect.hpp	/^inline void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
async_connect	/usr/include/boost/asio/impl/connect.hpp	/^void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, ConnectCondition connect_condition, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
async_connect	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, BOOST_ASIO_MOVE_ARG(ConnectHandler) handler)
async_connect	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, BOOST_ASIO_MOVE_ARG(ConnectHandler) handler)
async_connect	/usr/include/boost/asio/stream_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, BOOST_ASIO_MOVE_ARG(ConnectHandler) handler)
async_fill	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void async_fill(ReadHandler handler)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(ReadHandler handler)
async_fill	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_fill(ReadHandler handler)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(ReadHandler handler)
async_flush	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_flush(WriteHandler handler)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(WriteHandler handler)
async_flush	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void async_flush(WriteHandler handler)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(WriteHandler handler)
async_handshake	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void async_handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, Handler handler)
async_handshake	/usr/include/boost/asio/ssl/old/stream.hpp	/^  void async_handshake(handshake_type type, HandshakeHandler handler)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(handshake_type type, HandshakeHandler handler)
async_handshake	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void async_handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, HandshakeHandler handler)
async_io	/usr/include/boost/asio/ssl/detail/io.hpp	/^inline void async_io(Stream& next_layer, stream_core& core,$/;"	f	namespace:boost::asio::ssl::detail	signature:(Stream& next_layer, stream_core& core, const Operation& op, Handler handler)
async_read	/usr/include/boost/asio/impl/read.hpp	/^inline void async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read	/usr/include/boost/asio/impl/read.hpp	/^inline void async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read	/usr/include/boost/asio/impl/read.hpp	/^inline void async_read(AsyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read	/usr/include/boost/asio/impl/read.hpp	/^inline void async_read(AsyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_handler	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  void async_read_handler(const boost::system::error_code& error,$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:(const boost::system::error_code& error, size_t bytes_recvd)
async_read_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
async_read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const null_buffers&, Handler handler)
async_read_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
async_read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
async_read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, Handler handler)
async_read_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
async_read_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_some	/usr/include/boost/asio/serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_some	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void async_read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Mutable_Buffers& buffers, Handler handler)
async_read_some	/usr/include/boost/asio/ssl/old/stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void async_read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, Handler handler)
async_read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, Handler handler)
async_read_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  void async_read_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_until	/usr/include/boost/asio/impl/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler, typename boost::enable_if<is_match_condition<MatchCondition> >::type*)
async_read_until	/usr/include/boost/asio/impl/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_until	/usr/include/boost/asio/impl/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_until	/usr/include/boost/asio/impl/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler, typename boost::enable_if<is_match_condition<MatchCondition> >::type* = 0)
async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags& out_flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  void async_receive(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags flags, Handler handler)
async_receive	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  void async_receive(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, Handler handler)
async_receive	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  void async_receive(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags flags, Handler handler)
async_receive	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  void async_receive(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, Handler handler)
async_receive	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive	/usr/include/boost/asio/stream_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive_from	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, Handler handler)
async_receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, endpoint_type& sender_endpoint, socket_base::message_flags flags, Handler handler)
async_receive_from	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endp, socket_base::message_flags flags, Handler handler)
async_receive_from	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, endpoint_type& sender_endpoint, socket_base::message_flags flags, Handler handler)
async_receive_from	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
async_receive_with_flags	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  void async_receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, Handler handler)
async_receive_with_flags	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  void async_receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, Handler handler)
async_receive_with_flags	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  void async_receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, Handler handler)
async_receive_with_flags	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  void async_receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, Handler handler)
async_resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void async_resolve(implementation_type& impl,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, Handler handler)
async_resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void async_resolve(implementation_type& impl,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type& impl, const query_type& query, Handler handler)
async_resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  void async_resolve(const endpoint_type& e,$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const endpoint_type& e, BOOST_ASIO_MOVE_ARG(ResolveHandler) handler)
async_resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  void async_resolve(const query& q,$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const query& q, BOOST_ASIO_MOVE_ARG(ResolveHandler) handler)
async_resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void async_resolve(implementation_type& impl, const endpoint_type& endpoint,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, BOOST_ASIO_MOVE_ARG(ResolveHandler) handler)
async_resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void async_resolve(implementation_type& impl, const query_type& query,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const query_type& query, BOOST_ASIO_MOVE_ARG(ResolveHandler) handler)
async_send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_send(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  void async_send(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, Handler handler)
async_send	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  void async_send(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, Handler handler)
async_send	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  void async_send(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, Handler handler)
async_send	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  void async_send(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, Handler handler)
async_send	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_send(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void async_send(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send	/usr/include/boost/asio/stream_socket_service.hpp	/^  void async_send(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send_to	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_send_to(implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, const endpoint_type&, socket_base::message_flags, Handler handler)
async_send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, Handler handler)
async_send_to	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void async_send_to(implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, const endpoint_type&, socket_base::message_flags, Handler handler)
async_send_to	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, Handler handler)
async_send_to	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_shutdown	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void async_shutdown(impl_type& impl, Stream& next_layer, Handler handler)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, Handler handler)
async_shutdown	/usr/include/boost/asio/ssl/old/stream.hpp	/^  void async_shutdown(ShutdownHandler handler)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(ShutdownHandler handler)
async_shutdown	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void async_shutdown(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, ShutdownHandler handler)
async_user_handler	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int async_user_handler(boost::system::error_code error, int rc)$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:(boost::system::error_code error, int rc)
async_wait	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void async_wait(implementation_type& impl,$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, BOOST_ASIO_MOVE_ARG(WaitHandler) handler)
async_wait	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void async_wait(implementation_type& impl, Handler handler)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, Handler handler)
async_wait	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  void async_wait(implementation_type& impl, Handler handler)$/;"	f	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl, Handler handler)
async_wait	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  void async_wait(implementation_type& impl, Handler handler)$/;"	f	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, Handler handler)
async_wait	/usr/include/boost/asio/signal_set_service.hpp	/^  void async_wait(implementation_type& impl,$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl, BOOST_ASIO_MOVE_ARG(SignalHandler) handler)
async_wait	/usr/include/boost/asio/waitable_timer_service.hpp	/^  void async_wait(implementation_type& impl,$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl, BOOST_ASIO_MOVE_ARG(WaitHandler) handler)
async_wait	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  void async_wait(WaitHandler handler)$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:(WaitHandler handler)
async_wait	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void async_wait(implementation_type& impl,$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, BOOST_ASIO_MOVE_ARG(WaitHandler) handler)
async_write	/usr/include/boost/asio/impl/write.hpp	/^inline void async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write	/usr/include/boost/asio/impl/write.hpp	/^inline void async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write	/usr/include/boost/asio/impl/write.hpp	/^inline void async_write(AsyncWriteStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncWriteStream& s, boost::asio::basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write	/usr/include/boost/asio/impl/write.hpp	/^inline void async_write(AsyncWriteStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncWriteStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline void async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline void async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline void async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline void async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_handler	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  void async_write_handler(bool is_operation_done, int rc, $/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:(bool is_operation_done, int rc, const boost::system::error_code& error, size_t bytes_sent)
async_write_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
async_write_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const null_buffers&, Handler handler)
async_write_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
async_write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
async_write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, Handler handler)
async_write_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
async_write_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_some	/usr/include/boost/asio/serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_some	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void async_write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Const_Buffers& buffers, Handler handler)
async_write_some	/usr/include/boost/asio/ssl/old/stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void async_write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, Handler handler)
async_write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, Handler handler)
async_write_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  void async_write_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
async_write_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
at_end_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  bool at_end_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
at_end_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  bool at_end_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
at_mark	/usr/include/boost/asio/basic_socket.hpp	/^  bool at_mark() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
at_mark	/usr/include/boost/asio/basic_socket.hpp	/^  bool at_mark(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
at_mark	/usr/include/boost/asio/datagram_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
at_mark	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  bool at_mark(const base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(const base_implementation_type& impl, boost::system::error_code& ec) const
at_mark	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  bool at_mark(const base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(const base_implementation_type& impl, boost::system::error_code& ec) const
at_mark	/usr/include/boost/asio/raw_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
at_mark	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
at_mark	/usr/include/boost/asio/stream_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
atomic_count	/usr/include/boost/asio/detail/atomic_count.hpp	/^typedef long atomic_count;$/;"	t	namespace:boost::asio::detail
auto_addrinfo	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^    explicit auto_addrinfo(boost::asio::detail::addrinfo_type* ai)$/;"	f	class:boost::asio::detail::resolver_service_base::auto_addrinfo	access:public	signature:(boost::asio::detail::addrinfo_type* ai)
auto_addrinfo	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  class auto_addrinfo$/;"	c	class:boost::asio::detail::resolver_service_base	inherits:boost::asio::detail::noncopyable	access:protected
auto_func_base_ptr	/usr/include/boost/asio/detail/posix_thread.hpp	/^  struct auto_func_base_ptr$/;"	s	class:boost::asio::detail::posix_thread	access:private
auto_func_base_ptr	/usr/include/boost/asio/detail/win_thread.hpp	/^  struct auto_func_base_ptr$/;"	s	class:boost::asio::detail::win_thread	access:private
auto_handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    auto_handle() : handle(0) {}$/;"	f	struct:boost::asio::detail::win_iocp_io_service::auto_handle	access:public	signature:()
auto_handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  struct auto_handle$/;"	s	class:boost::asio::detail::win_iocp_io_service	access:private
auto_service_ptr	/usr/include/boost/asio/detail/service_registry.hpp	/^  struct auto_service_ptr$/;"	s	class:boost::asio::detail::service_registry	access:private
available	/usr/include/boost/asio/basic_socket.hpp	/^  std::size_t available() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
available	/usr/include/boost/asio/basic_socket.hpp	/^  std::size_t available(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
available	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
available	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^size_t available(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
available	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  std::size_t available(const base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(const base_implementation_type& impl, boost::system::error_code& ec) const
available	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL size_t available(socket_type s, boost::system::error_code& ec);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
available	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  std::size_t available(const base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(const base_implementation_type& impl, boost::system::error_code& ec) const
available	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
available	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
available	/usr/include/boost/asio/stream_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
back	/usr/include/boost/asio/detail/op_queue.hpp	/^  static Operation*& back(op_queue<Operation>& q)$/;"	f	class:boost::asio::detail::op_queue_access	access:public	signature:(op_queue<Operation>& q)
back_	/usr/include/boost/asio/detail/op_queue.hpp	/^  Operation* back_;$/;"	m	class:boost::asio::detail::op_queue	access:private
background_getaddrinfo	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^boost::system::error_code background_getaddrinfo($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, const char* host, const char* service, const addrinfo_type& hints, addrinfo_type** result, boost::system::error_code& ec)
background_getaddrinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL boost::system::error_code background_getaddrinfo($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, const char* host, const char* service, const addrinfo_type& hints, addrinfo_type** result, boost::system::error_code& ec)
background_getnameinfo	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^boost::system::error_code background_getnameinfo($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int sock_type, boost::system::error_code& ec)
background_getnameinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL boost::system::error_code background_getnameinfo($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int sock_type, boost::system::error_code& ec)
bad_descriptor	/usr/include/boost/asio/error.hpp	/^  bad_descriptor = BOOST_ASIO_SOCKET_ERROR(EBADF),$/;"	e	enum:boost::asio::error::basic_errors
barrier	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  static void barrier()$/;"	f	class:boost::asio::detail::gcc_arm_fenced_block	access:private	signature:()
barrier	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  static void barrier()$/;"	f	class:boost::asio::detail::gcc_hppa_fenced_block	access:private	signature:()
barrier	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  static int barrier()$/;"	f	class:boost::asio::detail::gcc_x86_fenced_block	access:private	signature:()
base	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^    boost::asio::detail::socket_addr_type base;$/;"	m	union:boost::asio::ip::detail::endpoint::data_union	access:public
base	/usr/include/boost/asio/local/detail/endpoint.hpp	/^    boost::asio::detail::socket_addr_type base;$/;"	m	union:boost::asio::local::detail::endpoint::data_union	access:public
base_from_completion_cond	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^  explicit base_from_completion_cond(CompletionCondition completion_condition)$/;"	f	class:boost::asio::detail::base_from_completion_cond	access:protected	signature:(CompletionCondition completion_condition)
base_from_completion_cond	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^  explicit base_from_completion_cond(transfer_all_t)$/;"	f	class:boost::asio::detail::base_from_completion_cond	access:protected	signature:(transfer_all_t)
base_from_completion_cond	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^class base_from_completion_cond$/;"	c	namespace:boost::asio::detail
base_from_completion_cond	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^class base_from_completion_cond<transfer_all_t>$/;"	c	namespace:boost::asio::detail
base_from_connect_condition	/usr/include/boost/asio/impl/connect.hpp	/^    explicit base_from_connect_condition($/;"	f	class:boost::asio::detail::base_from_connect_condition	access:protected	signature:( const ConnectCondition& connect_condition)
base_from_connect_condition	/usr/include/boost/asio/impl/connect.hpp	/^    explicit base_from_connect_condition(const default_connect_condition&)$/;"	f	class:boost::asio::detail::base_from_connect_condition	access:protected	signature:(const default_connect_condition&)
base_from_connect_condition	/usr/include/boost/asio/impl/connect.hpp	/^  class base_from_connect_condition$/;"	c	namespace:boost::asio::detail
base_from_connect_condition	/usr/include/boost/asio/impl/connect.hpp	/^  class base_from_connect_condition<default_connect_condition>$/;"	c	namespace:boost::asio::detail
base_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    base_handler(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:public	signature:(boost::asio::io_service& io_service)
base_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  class base_handler$/;"	c	class:boost::asio::ssl::old::detail::openssl_stream_service	access:private
base_implementation_type	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  struct base_implementation_type$/;"	s	class:boost::asio::detail::reactive_socket_service_base	access:public
base_implementation_type	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  struct base_implementation_type$/;"	s	class:boost::asio::detail::win_iocp_socket_service_base	access:public
base_move_assign	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::base_move_assign($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, reactive_socket_service_base& other_service, reactive_socket_service_base::base_implementation_type& other_impl)
base_move_assign	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::base_move_assign($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, win_iocp_socket_service_base& other_service, win_iocp_socket_service_base::base_implementation_type& other_impl)
base_move_assign	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void base_move_assign(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, reactive_socket_service_base& other_service, base_implementation_type& other_impl)
base_move_assign	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void base_move_assign(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, win_iocp_socket_service_base& other_service, base_implementation_type& other_impl)
base_move_construct	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::base_move_construct($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, reactive_socket_service_base::base_implementation_type& other_impl)
base_move_construct	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::base_move_construct($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, win_iocp_socket_service_base::base_implementation_type& other_impl)
base_move_construct	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void base_move_construct(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, base_implementation_type& other_impl)
base_move_construct	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void base_move_construct(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, base_implementation_type& other_impl)
basic_context	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  basic_context(boost::asio::io_service& io_service, method m)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(boost::asio::io_service& io_service, method m)
basic_context	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^class basic_context$/;"	c	namespace:boost::asio::ssl::old	inherits:context_base,boost::noncopyable
basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(basic_datagram_socket&& other)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(basic_datagram_socket&& other)
basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_handle_type& native_socket)
basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  explicit basic_datagram_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service)
basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^class basic_datagram_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  basic_deadline_timer(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::asio::io_service& io_service, const duration_type& expiry_time)
basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  basic_deadline_timer(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::asio::io_service& io_service, const time_type& expiry_time)
basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  explicit basic_deadline_timer(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::asio::io_service& io_service)
basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^class basic_deadline_timer$/;"	c	namespace:boost::asio	inherits:basic_io_object
basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  basic_descriptor(basic_descriptor&& other)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(basic_descriptor&& other)
basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  basic_descriptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& native_descriptor)
basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  explicit basic_descriptor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::asio::io_service& io_service)
basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^class basic_descriptor$/;"	c	namespace:boost::asio::posix	inherits:basic_io_object,descriptor_base
basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint()$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:()
basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(basic_endpoint&& other)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(basic_endpoint&& other)
basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(const InternetProtocol& internet_protocol,$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const InternetProtocol& internet_protocol, unsigned short port_num)
basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(const basic_endpoint& other)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const basic_endpoint& other)
basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(const boost::asio::ip::address& addr, unsigned short port_num)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const boost::asio::ip::address& addr, unsigned short port_num)
basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^class basic_endpoint$/;"	c	namespace:boost::asio::ip
basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint()$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:()
basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(basic_endpoint&& other)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(basic_endpoint&& other)
basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(const basic_endpoint& other)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const basic_endpoint& other)
basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(const char* path_name)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const char* path_name)
basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(const std::string& path_name)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const std::string& path_name)
basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^class basic_endpoint$/;"	c	namespace:boost::asio::local
basic_errors	/usr/include/boost/asio/error.hpp	/^enum basic_errors$/;"	g	namespace:boost::asio::error
basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  basic_handle(basic_handle&& other)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(basic_handle&& other)
basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  basic_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& handle)
basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  explicit basic_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::asio::io_service& io_service)
basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^class basic_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_io_object
basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  basic_io_object(basic_io_object&& other)$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:(basic_io_object&& other)
basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  basic_io_object(basic_io_object&& other);$/;"	p	class:boost::asio::basic_io_object	access:protected	signature:(basic_io_object&& other)
basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  basic_io_object(const basic_io_object&);$/;"	p	class:boost::asio::basic_io_object	access:private	signature:(const basic_io_object&)
basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  explicit basic_io_object(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:(boost::asio::io_service& io_service)
basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^class basic_io_object$/;"	c	namespace:boost::asio
basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^class basic_io_object<IoObjectService, true>$/;"	c	namespace:boost::asio
basic_object_handle	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  basic_object_handle(basic_object_handle&& other)$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:(basic_object_handle&& other)
basic_object_handle	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  basic_object_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& native_handle)
basic_object_handle	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  explicit basic_object_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:(boost::asio::io_service& io_service)
basic_object_handle	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^class basic_object_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_handle
basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  basic_random_access_handle(basic_random_access_handle&& other)$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(basic_random_access_handle&& other)
basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  basic_random_access_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& handle)
basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  explicit basic_random_access_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::asio::io_service& io_service)
basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^class basic_random_access_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_handle
basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(basic_raw_socket&& other)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(basic_raw_socket&& other)
basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_handle_type& native_socket)
basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  explicit basic_raw_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service)
basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^class basic_raw_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
basic_resolver	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  explicit basic_resolver(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(boost::asio::io_service& io_service)
basic_resolver	/usr/include/boost/asio/ip/basic_resolver.hpp	/^class basic_resolver$/;"	c	namespace:boost::asio::ip	inherits:basic_io_object
basic_resolver_entry	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  basic_resolver_entry()$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:()
basic_resolver_entry	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  basic_resolver_entry(const endpoint_type& ep,$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:(const endpoint_type& ep, const std::string& host, const std::string& service)
basic_resolver_entry	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^class basic_resolver_entry$/;"	c	namespace:boost::asio::ip
basic_resolver_iterator	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  basic_resolver_iterator()$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:()
basic_resolver_iterator	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^class basic_resolver_iterator$/;"	c	namespace:boost::asio::ip
basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const protocol_type& protocol,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const protocol_type& protocol, const std::string& host, const std::string& service, resolver_query_base::flags resolve_flags = address_configured)
basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const protocol_type& protocol,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const protocol_type& protocol, const std::string& service, resolver_query_base::flags resolve_flags = passive | address_configured)
basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const std::string& host, const std::string& service,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const std::string& host, const std::string& service, resolver_query_base::flags resolve_flags = address_configured)
basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const std::string& service,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const std::string& service, resolver_query_base::flags resolve_flags = passive | address_configured)
basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^class basic_resolver_query$/;"	c	namespace:boost::asio::ip	inherits:resolver_query_base
basic_seq_packet_socket	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket(basic_seq_packet_socket&& other)$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(basic_seq_packet_socket&& other)
basic_seq_packet_socket	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
basic_seq_packet_socket	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
basic_seq_packet_socket	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_handle_type& native_socket)
basic_seq_packet_socket	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  explicit basic_seq_packet_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(boost::asio::io_service& io_service)
basic_seq_packet_socket	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^class basic_seq_packet_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  basic_serial_port(basic_serial_port&& other)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(basic_serial_port&& other)
basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  basic_serial_port(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& native_serial_port)
basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  explicit basic_serial_port(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service)
basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  explicit basic_serial_port(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service, const char* device)
basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  explicit basic_serial_port(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service, const std::string& device)
basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^class basic_serial_port$/;"	c	namespace:boost::asio	inherits:basic_io_object,serial_port_base
basic_signal_set	/usr/include/boost/asio/basic_signal_set.hpp	/^  basic_signal_set(boost::asio::io_service& io_service, int signal_number_1)$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(boost::asio::io_service& io_service, int signal_number_1)
basic_signal_set	/usr/include/boost/asio/basic_signal_set.hpp	/^  basic_signal_set(boost::asio::io_service& io_service, int signal_number_1,$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(boost::asio::io_service& io_service, int signal_number_1, int signal_number_2)
basic_signal_set	/usr/include/boost/asio/basic_signal_set.hpp	/^  basic_signal_set(boost::asio::io_service& io_service, int signal_number_1,$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(boost::asio::io_service& io_service, int signal_number_1, int signal_number_2, int signal_number_3)
basic_signal_set	/usr/include/boost/asio/basic_signal_set.hpp	/^  explicit basic_signal_set(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(boost::asio::io_service& io_service)
basic_signal_set	/usr/include/boost/asio/basic_signal_set.hpp	/^class basic_signal_set$/;"	c	namespace:boost::asio	inherits:basic_io_object
basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(basic_socket&& other)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(basic_socket&& other)
basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_handle_type& native_socket)
basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  explicit basic_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service)
basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^class basic_socket$/;"	c	namespace:boost::asio	inherits:basic_io_object,socket_base
basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(basic_socket_acceptor&& other)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket_acceptor&& other)
basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint, bool reuse_addr = true)
basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_handle_type& native_acceptor)
basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  explicit basic_socket_acceptor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service)
basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^class basic_socket_acceptor$/;"	c	namespace:boost::asio	inherits:basic_io_object,socket_base
basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  basic_socket_iostream()$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:()
basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  explicit basic_socket_iostream(T... x)$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:(T.... x)
basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  explicit basic_socket_iostream(T1 t1, ..., TN tn);$/;"	p	class:boost::asio::basic_socket_iostream	access:public	signature:(T1 t1, ..., TN tn)
basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^class basic_socket_iostream$/;"	c	namespace:boost::asio	inherits:boost::base_from_member,std::basic_iostream
basic_socket_streambuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  basic_socket_streambuf()$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:()
basic_socket_streambuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^class basic_socket_streambuf$/;"	c	namespace:boost::asio	inherits:std::streambuf,boost::base_from_member,basic_socket
basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  basic_stream_descriptor(basic_stream_descriptor&& other)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(basic_stream_descriptor&& other)
basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  basic_stream_descriptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& native_descriptor)
basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  explicit basic_stream_descriptor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(boost::asio::io_service& io_service)
basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^class basic_stream_descriptor$/;"	c	namespace:boost::asio::posix	inherits:basic_descriptor
basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  basic_stream_handle(basic_stream_handle&& other)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(basic_stream_handle&& other)
basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  basic_stream_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& handle)
basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  explicit basic_stream_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(boost::asio::io_service& io_service)
basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^class basic_stream_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_handle
basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(basic_stream_socket&& other)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(basic_stream_socket&& other)
basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_handle_type& native_socket)
basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  explicit basic_stream_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service)
basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^class basic_stream_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
basic_streambuf	/usr/include/boost/asio/basic_streambuf.hpp	/^  explicit basic_streambuf($/;"	f	class:boost::asio::basic_streambuf	access:public	signature:( std::size_t maximum_size = (std::numeric_limits<std::size_t>::max)(), const Allocator& allocator = Allocator())
basic_streambuf	/usr/include/boost/asio/basic_streambuf.hpp	/^class basic_streambuf$/;"	c	namespace:boost::asio	inherits:std::streambuf,noncopyable
basic_waitable_timer	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  basic_waitable_timer(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(boost::asio::io_service& io_service, const duration& expiry_time)
basic_waitable_timer	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  basic_waitable_timer(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(boost::asio::io_service& io_service, const time_point& expiry_time)
basic_waitable_timer	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  explicit basic_waitable_timer(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(boost::asio::io_service& io_service)
basic_waitable_timer	/usr/include/boost/asio/basic_waitable_timer.hpp	/^class basic_waitable_timer$/;"	c	namespace:boost::asio	inherits:basic_io_object
baud_rate	/usr/include/boost/asio/impl/serial_port_base.hpp	/^inline serial_port_base::baud_rate::baud_rate(unsigned int rate)$/;"	f	class:boost::asio::serial_port_base::baud_rate	signature:(unsigned int rate)
baud_rate	/usr/include/boost/asio/serial_port_base.hpp	/^    explicit baud_rate(unsigned int rate = 0);$/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:(unsigned int rate = 0)
baud_rate	/usr/include/boost/asio/serial_port_base.hpp	/^  class baud_rate$/;"	c	class:boost::asio::serial_port_base	access:public
begin	/usr/include/boost/asio/buffer.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:() const
begin	/usr/include/boost/asio/buffer.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:() const
begin	/usr/include/boost/asio/buffer.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::null_buffers	access:public	signature:() const
begin	/usr/include/boost/asio/buffers_iterator.hpp	/^  static buffers_iterator begin(const BufferSequence& buffers)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(const BufferSequence& buffers)
begin	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:() const
begin	/usr/include/boost/asio/detail/hash_map.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:() const
begin	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator begin()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
begin_	/usr/include/boost/asio/buffers_iterator.hpp	/^  typename BufferSequence::const_iterator begin_;$/;"	m	class:boost::asio::buffers_iterator	access:private
begin_offset_	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type begin_offset_;$/;"	m	class:boost::asio::detail::buffered_stream_storage	access:private
begin_remainder_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer_Iterator begin_remainder_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
begin_remainder_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  typename Buffers::const_iterator begin_remainder_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
bind	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code bind(const endpoint_type& endpoint,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/basic_socket.hpp	/^  void bind(const endpoint_type& endpoint)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& endpoint)
bind	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code bind(const endpoint_type& endpoint,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void bind(const endpoint_type& endpoint)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const endpoint_type& endpoint)
bind	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int bind(socket_type s, const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
bind	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int bind(socket_type s, const socket_addr_type* addr,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
bind	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder1<Handler, Arg1> bind_handler(Handler handler,$/;"	f	namespace:boost::asio::detail	signature:(Handler handler, const Arg1& arg1)
bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder2<Handler, Arg1, Arg2> bind_handler(Handler handler,$/;"	f	namespace:boost::asio::detail	signature:(Handler handler, const Arg1& arg1, const Arg2& arg2)
bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder3<Handler, Arg1, Arg2, Arg3> bind_handler(Handler handler,$/;"	f	namespace:boost::asio::detail	signature:(Handler handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder4<Handler, Arg1, Arg2, Arg3, Arg4> bind_handler($/;"	f	namespace:boost::asio::detail	signature:( Handler handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5> bind_handler($/;"	f	namespace:boost::asio::detail	signature:( Handler handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
binder1	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder1(Handler& handler, const Arg1& arg1)$/;"	f	class:boost::asio::detail::binder1	access:public	signature:(Handler& handler, const Arg1& arg1)
binder1	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder1(const Handler& handler, const Arg1& arg1)$/;"	f	class:boost::asio::detail::binder1	access:public	signature:(const Handler& handler, const Arg1& arg1)
binder1	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder1$/;"	c	namespace:boost::asio::detail
binder2	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder2(Handler& handler, const Arg1& arg1, const Arg2& arg2)$/;"	f	class:boost::asio::detail::binder2	access:public	signature:(Handler& handler, const Arg1& arg1, const Arg2& arg2)
binder2	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder2(const Handler& handler, const Arg1& arg1, const Arg2& arg2)$/;"	f	class:boost::asio::detail::binder2	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2)
binder2	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder2$/;"	c	namespace:boost::asio::detail
binder3	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder3(Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder3	access:public	signature:(Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
binder3	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder3(const Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder3	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
binder3	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder3$/;"	c	namespace:boost::asio::detail
binder4	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder4(Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder4	access:public	signature:(Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
binder4	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder4(const Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder4	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
binder4	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder4$/;"	c	namespace:boost::asio::detail
binder5	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder5(Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder5	access:public	signature:(Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
binder5	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder5(const Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder5	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
binder5	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder5$/;"	c	namespace:boost::asio::detail
block	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  void block()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
block	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  void block()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
blocked_	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  bool blocked_;$/;"	m	class:boost::asio::detail::posix_signal_blocker	access:private
boolean	/usr/include/boost/asio/detail/socket_option.hpp	/^  boolean()$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:()
boolean	/usr/include/boost/asio/detail/socket_option.hpp	/^  explicit boolean(bool v)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(bool v)
boolean	/usr/include/boost/asio/detail/socket_option.hpp	/^class boolean$/;"	c	namespace:boost::asio::detail::socket_option
boost	/usr/include/boost/asio/basic_datagram_socket.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_deadline_timer.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_io_object.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_raw_socket.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_serial_port.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_signal_set.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_socket.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_socket_iostream.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_stream_socket.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_streambuf.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_streambuf_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_waitable_timer.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffer.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffered_read_stream.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffered_read_stream_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffered_stream.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffered_stream_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffered_write_stream.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffered_write_stream_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffers_iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/completion_condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/connect.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/datagram_socket_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/deadline_timer.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/deadline_timer_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/array.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/array_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/atomic_count.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/bind_handler.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/call_stack.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/completion_handler.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/date_time_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/dependent_type.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/event.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/fenced_block.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/handler_tracking.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/hash_map.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/posix_event.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/posix_mutex.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/posix_tss_ptr.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/task_io_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/throw_error.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/win_event.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/win_mutex.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/win_static_mutex.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/win_tss_ptr.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/impl/winsock_init.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/detail/io_control.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/noncopyable.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/null_event.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/null_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/null_thread.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/object_pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/op_queue.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/operation.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_event.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_thread.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactor_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactor_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/regex_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/resolve_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/resolver_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/scoped_lock.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/select_interrupter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/select_reactor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/select_reactor_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/service_registry.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/service_registry_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/shared_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/signal_blocker.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/signal_handler.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/signal_init.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/signal_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/signal_set_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/socket_holder.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/socket_types.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/static_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/strand_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/task_io_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/task_io_service_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/thread.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/thread_info_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/throw_error.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/timer_queue.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/timer_queue_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/timer_scheduler_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/tss_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/wait_handler.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/wait_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/weak_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_event.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_thread_info.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_thread.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/wince_thread.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/winsock_init.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/error.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/handler_alloc_hook.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/handler_invoke_hook.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/high_resolution_timer.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/impl/connect.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/impl/error.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/impl/handler_alloc_hook.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/impl/io_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/impl/io_service.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/impl/read.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/impl/read_at.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/impl/read_until.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/impl/serial_port_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/impl/serial_port_base.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/impl/write.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/impl/write_at.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/io_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/address.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/address_v4.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/address_v6.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/basic_resolver.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/host_name.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/icmp.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/impl/address.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/impl/address.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/ip/impl/address_v4.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/ip/impl/address_v6.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/ip/impl/basic_endpoint.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/impl/host_name.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/ip/multicast.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/resolver_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/tcp.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/udp.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/unicast.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/v6_only.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/is_read_buffered.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/is_write_buffered.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/local/basic_endpoint.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/local/connect_pair.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/local/datagram_protocol.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/local/detail/endpoint.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/local/stream_protocol.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/placeholders.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/posix/descriptor_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/raw_socket_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/read.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/read_at.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/read_until.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/serial_port.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/serial_port_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/serial_port_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/signal_set.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/signal_set_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/socket_acceptor_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/socket_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/basic_context.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/context.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/context_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/context_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/engine.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/ssl/detail/io.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/error.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/impl/context.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/impl/context.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/ssl/impl/error.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/ssl/impl/rfc2818_verification.ipp	/^namespace boost {$/;"	n	file:
boost	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/old/context_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/old/stream.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/stream.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/stream_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/stream_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/verify_context.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/verify_mode.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/steady_timer.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/strand.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/stream_socket_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/streambuf.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/system_timer.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/time_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/wait_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/waitable_timer_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/basic_handle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/object_handle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/object_handle_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/random_access_handle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/stream_handle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/write.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/write_at.hpp	/^namespace boost {$/;"	n
boost::asio	/usr/include/boost/asio/basic_datagram_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_deadline_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_io_object.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_raw_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_serial_port.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_signal_set.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_socket_iostream.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_stream_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_streambuf.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_streambuf_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_waitable_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffer.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffered_read_stream.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffered_read_stream_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffered_stream.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffered_stream_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffered_write_stream.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffered_write_stream_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffers_iterator.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/completion_condition.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/connect.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/datagram_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/deadline_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/deadline_timer_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/array.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/atomic_count.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/bind_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/call_stack.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/completion_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/dependent_type.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/event.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/handler_tracking.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/hash_map.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/posix_event.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/posix_mutex.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/posix_tss_ptr.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/task_io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/throw_error.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/win_event.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/win_mutex.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/win_static_mutex.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/win_tss_ptr.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/impl/winsock_init.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/detail/io_control.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/noncopyable.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/null_event.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/null_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/null_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/object_pool.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/op_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/operation.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_event.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactor_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/resolve_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/resolver_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/scoped_lock.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/select_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/select_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/service_registry.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/service_registry_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/shared_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/signal_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/signal_init.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/signal_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/signal_set_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/socket_holder.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/socket_types.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/static_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/strand_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/task_io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/task_io_service_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/thread.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/thread_info_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/throw_error.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/timer_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/timer_queue_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/timer_scheduler_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/wait_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/wait_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/weak_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_event.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_thread_info.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/wince_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/winsock_init.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/error.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/handler_alloc_hook.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/handler_invoke_hook.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/high_resolution_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/impl/connect.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/impl/error.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/impl/handler_alloc_hook.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/impl/io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/impl/io_service.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/impl/read.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/impl/read_at.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/impl/read_until.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/impl/serial_port_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/impl/serial_port_base.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/impl/write.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/impl/write_at.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/address.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/address_v4.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/address_v6.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/basic_resolver.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/host_name.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/icmp.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/impl/address.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/impl/address.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/ip/impl/address_v4.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/ip/impl/address_v6.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/ip/impl/basic_endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/impl/host_name.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/ip/multicast.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/resolver_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/tcp.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/udp.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/unicast.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/v6_only.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/is_read_buffered.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/is_write_buffered.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/local/basic_endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/local/connect_pair.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/local/datagram_protocol.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/local/detail/endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/local/stream_protocol.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/placeholders.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/posix/descriptor_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/raw_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/read.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/read_at.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/read_until.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/serial_port.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/serial_port_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/serial_port_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/signal_set.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/signal_set_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/socket_acceptor_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/socket_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/basic_context.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/context.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/context_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/context_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/engine.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/ssl/detail/io.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/error.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/impl/context.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/impl/context.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/ssl/impl/error.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/ssl/impl/rfc2818_verification.ipp	/^namespace asio {$/;"	n	namespace:boost	file:
boost::asio	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/old/context_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/old/stream.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/stream.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/stream_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/stream_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/verify_context.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/verify_mode.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/steady_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/strand.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/stream_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/streambuf.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/system_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/time_traits.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/wait_traits.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/waitable_timer_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/basic_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/object_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/object_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/random_access_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/stream_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/write.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/write_at.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio::PodType	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const PodType (&data)[N],$/;"	m	namespace:boost::asio
boost::asio::PodType	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(PodType (&data)[N],$/;"	m	namespace:boost::asio
boost::asio::add_service	/usr/include/boost/asio/impl/io_service.hpp	/^inline void add_service(io_service& ios, Service* svc)$/;"	f	namespace:boost::asio	signature:(io_service& ios, Service* svc)
boost::asio::add_service	/usr/include/boost/asio/io_service.hpp	/^template <typename Service> void add_service(io_service& ios, Service* svc);$/;"	p	namespace:boost::asio	signature:(io_service& ios, Service* svc)
boost::asio::asio_handler_allocate	/usr/include/boost/asio/handler_alloc_hook.hpp	/^BOOST_ASIO_DECL void* asio_handler_allocate($/;"	p	namespace:boost::asio	signature:( std::size_t size, ...)
boost::asio::asio_handler_allocate	/usr/include/boost/asio/impl/handler_alloc_hook.ipp	/^void* asio_handler_allocate(std::size_t size, ...)$/;"	f	namespace:boost::asio	signature:(std::size_t size, ...)
boost::asio::asio_handler_deallocate	/usr/include/boost/asio/handler_alloc_hook.hpp	/^BOOST_ASIO_DECL void asio_handler_deallocate($/;"	p	namespace:boost::asio	signature:( void* pointer, std::size_t size, ...)
boost::asio::asio_handler_deallocate	/usr/include/boost/asio/impl/handler_alloc_hook.ipp	/^void asio_handler_deallocate(void* pointer, std::size_t size, ...)$/;"	f	namespace:boost::asio	signature:(void* pointer, std::size_t size, ...)
boost::asio::asio_handler_invoke	/usr/include/boost/asio/handler_invoke_hook.hpp	/^inline void asio_handler_invoke(Function function, ...)$/;"	f	namespace:boost::asio	signature:(Function function, ...)
boost::asio::async_connect	/usr/include/boost/asio/connect.hpp	/^void async_connect(basic_socket<Protocol, SocketService>& s, Iterator begin,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, ConnectCondition connect_condition, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
boost::asio::async_connect	/usr/include/boost/asio/connect.hpp	/^void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
boost::asio::async_connect	/usr/include/boost/asio/connect.hpp	/^void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
boost::asio::async_connect	/usr/include/boost/asio/connect.hpp	/^void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, ConnectCondition connect_condition, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
boost::asio::async_connect	/usr/include/boost/asio/impl/connect.hpp	/^inline void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
boost::asio::async_connect	/usr/include/boost/asio/impl/connect.hpp	/^inline void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, ConnectCondition connect_condition, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
boost::asio::async_connect	/usr/include/boost/asio/impl/connect.hpp	/^inline void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
boost::asio::async_connect	/usr/include/boost/asio/impl/connect.hpp	/^void async_connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, ConnectCondition connect_condition, BOOST_ASIO_MOVE_ARG(ComposedConnectHandler) handler)
boost::asio::async_read	/usr/include/boost/asio/impl/read.hpp	/^inline void async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read	/usr/include/boost/asio/impl/read.hpp	/^inline void async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read	/usr/include/boost/asio/impl/read.hpp	/^inline void async_read(AsyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read	/usr/include/boost/asio/impl/read.hpp	/^inline void async_read(AsyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_until	/usr/include/boost/asio/impl/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler, typename boost::enable_if<is_match_condition<MatchCondition> >::type*)
boost::asio::async_read_until	/usr/include/boost/asio/impl/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_until	/usr/include/boost/asio/impl/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_until	/usr/include/boost/asio/impl/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, BOOST_ASIO_MOVE_ARG(ReadHandler) handler, typename boost::enable_if<is_match_condition<MatchCondition> >::type* = 0)
boost::asio::async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::async_write	/usr/include/boost/asio/impl/write.hpp	/^inline void async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write	/usr/include/boost/asio/impl/write.hpp	/^inline void async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write	/usr/include/boost/asio/impl/write.hpp	/^inline void async_write(AsyncWriteStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncWriteStream& s, boost::asio::basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write	/usr/include/boost/asio/impl/write.hpp	/^inline void async_write(AsyncWriteStream& s,$/;"	f	namespace:boost::asio	signature:(AsyncWriteStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline void async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline void async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline void async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline void async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^class basic_datagram_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
boost::asio::basic_datagram_socket::async_receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_datagram_socket::async_receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_datagram_socket::async_receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_datagram_socket::async_receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_datagram_socket::async_send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_datagram_socket::async_send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_datagram_socket::async_send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_datagram_socket::async_send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_datagram_socket::basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(basic_datagram_socket&& other)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(basic_datagram_socket&& other)
boost::asio::basic_datagram_socket::basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
boost::asio::basic_datagram_socket::basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
boost::asio::basic_datagram_socket::basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_handle_type& native_socket)
boost::asio::basic_datagram_socket::basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  explicit basic_datagram_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_datagram_socket::endpoint_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
boost::asio::basic_datagram_socket::native_handle_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef typename DatagramSocketService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
boost::asio::basic_datagram_socket::native_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef typename DatagramSocketService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
boost::asio::basic_datagram_socket::operator =	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket& operator=(basic_datagram_socket&& other)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(basic_datagram_socket&& other)
boost::asio::basic_datagram_socket::protocol_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
boost::asio::basic_datagram_socket::receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::basic_datagram_socket::receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_datagram_socket::receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_datagram_socket::receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint)
boost::asio::basic_datagram_socket::receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags)
boost::asio::basic_datagram_socket::receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_datagram_socket::send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::basic_datagram_socket::send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_datagram_socket::send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_datagram_socket::send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination)
boost::asio::basic_datagram_socket::send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags)
boost::asio::basic_datagram_socket::send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^class basic_deadline_timer$/;"	c	namespace:boost::asio	inherits:basic_io_object
boost::asio::basic_deadline_timer::basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  basic_deadline_timer(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::asio::io_service& io_service, const duration_type& expiry_time)
boost::asio::basic_deadline_timer::basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  basic_deadline_timer(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::asio::io_service& io_service, const time_type& expiry_time)
boost::asio::basic_deadline_timer::basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  explicit basic_deadline_timer(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_deadline_timer::cancel	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t cancel()$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:()
boost::asio::basic_deadline_timer::cancel	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_deadline_timer::cancel_one	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t cancel_one()$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:()
boost::asio::basic_deadline_timer::cancel_one	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t cancel_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_deadline_timer::duration_type	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  typedef typename traits_type::duration_type duration_type;$/;"	t	class:boost::asio::basic_deadline_timer	access:public
boost::asio::basic_deadline_timer::expires_at	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_at(const time_type& expiry_time)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const time_type& expiry_time)
boost::asio::basic_deadline_timer::expires_at	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_at(const time_type& expiry_time,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const time_type& expiry_time, boost::system::error_code& ec)
boost::asio::basic_deadline_timer::expires_at	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  time_type expires_at() const$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:() const
boost::asio::basic_deadline_timer::expires_from_now	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  duration_type expires_from_now() const$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:() const
boost::asio::basic_deadline_timer::expires_from_now	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_from_now(const duration_type& expiry_time)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const duration_type& expiry_time)
boost::asio::basic_deadline_timer::expires_from_now	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_from_now(const duration_type& expiry_time,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const duration_type& expiry_time, boost::system::error_code& ec)
boost::asio::basic_deadline_timer::time_type	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  typedef typename traits_type::time_type time_type;$/;"	t	class:boost::asio::basic_deadline_timer	access:public
boost::asio::basic_deadline_timer::traits_type	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  typedef TimeTraits traits_type;$/;"	t	class:boost::asio::basic_deadline_timer	access:public
boost::asio::basic_deadline_timer::wait	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  void wait()$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:()
boost::asio::basic_deadline_timer::wait	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  void wait(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^class basic_io_object$/;"	c	namespace:boost::asio
boost::asio::basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^class basic_io_object<IoObjectService, true>$/;"	c	namespace:boost::asio
boost::asio::basic_io_object::basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  basic_io_object(basic_io_object&& other)$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:(basic_io_object&& other)
boost::asio::basic_io_object::basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  basic_io_object(basic_io_object&& other);$/;"	p	class:boost::asio::basic_io_object	access:protected	signature:(basic_io_object&& other)
boost::asio::basic_io_object::basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  basic_io_object(const basic_io_object&);$/;"	p	class:boost::asio::basic_io_object	access:private	signature:(const basic_io_object&)
boost::asio::basic_io_object::basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  explicit basic_io_object(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:(boost::asio::io_service& io_service)
boost::asio::basic_io_object::get_implementation	/usr/include/boost/asio/basic_io_object.hpp	/^  const implementation_type& get_implementation() const$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:() const
boost::asio::basic_io_object::get_implementation	/usr/include/boost/asio/basic_io_object.hpp	/^  implementation_type& get_implementation()$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:()
boost::asio::basic_io_object::get_io_service	/usr/include/boost/asio/basic_io_object.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::basic_io_object	access:public	signature:()
boost::asio::basic_io_object::get_service	/usr/include/boost/asio/basic_io_object.hpp	/^  const service_type& get_service() const$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:() const
boost::asio::basic_io_object::get_service	/usr/include/boost/asio/basic_io_object.hpp	/^  service_type& get_service()$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:()
boost::asio::basic_io_object::implementation	/usr/include/boost/asio/basic_io_object.hpp	/^  implementation_type implementation;$/;"	m	class:boost::asio::basic_io_object	access:protected
boost::asio::basic_io_object::implementation_type	/usr/include/boost/asio/basic_io_object.hpp	/^  typedef typename service_type::implementation_type implementation_type;$/;"	t	class:boost::asio::basic_io_object	access:public
boost::asio::basic_io_object::operator =	/usr/include/boost/asio/basic_io_object.hpp	/^  basic_io_object& operator=(basic_io_object&& other)$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:(basic_io_object&& other)
boost::asio::basic_io_object::operator =	/usr/include/boost/asio/basic_io_object.hpp	/^  basic_io_object& operator=(basic_io_object&& other);$/;"	p	class:boost::asio::basic_io_object	access:protected	signature:(basic_io_object&& other)
boost::asio::basic_io_object::operator =	/usr/include/boost/asio/basic_io_object.hpp	/^  basic_io_object& operator=(const basic_io_object&);$/;"	p	class:boost::asio::basic_io_object	access:private	signature:(const basic_io_object&)
boost::asio::basic_io_object::operator =	/usr/include/boost/asio/basic_io_object.hpp	/^  void operator=(const basic_io_object&);$/;"	p	class:boost::asio::basic_io_object	access:private	signature:(const basic_io_object&)
boost::asio::basic_io_object::service	/usr/include/boost/asio/basic_io_object.hpp	/^  service_type& service;$/;"	m	class:boost::asio::basic_io_object	access:protected
boost::asio::basic_io_object::service_	/usr/include/boost/asio/basic_io_object.hpp	/^  IoObjectService* service_;$/;"	m	class:boost::asio::basic_io_object	access:private
boost::asio::basic_io_object::service_type	/usr/include/boost/asio/basic_io_object.hpp	/^  typedef IoObjectService service_type;$/;"	t	class:boost::asio::basic_io_object	access:public
boost::asio::basic_io_object::~basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  ~basic_io_object()$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:()
boost::asio::basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^class basic_raw_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
boost::asio::basic_raw_socket::async_receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_raw_socket::async_receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_raw_socket::async_receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_raw_socket::async_receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_raw_socket::async_send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_raw_socket::async_send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_raw_socket::async_send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_raw_socket::async_send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_raw_socket::basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(basic_raw_socket&& other)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(basic_raw_socket&& other)
boost::asio::basic_raw_socket::basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
boost::asio::basic_raw_socket::basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
boost::asio::basic_raw_socket::basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_handle_type& native_socket)
boost::asio::basic_raw_socket::basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  explicit basic_raw_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_raw_socket::endpoint_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
boost::asio::basic_raw_socket::native_handle_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef typename RawSocketService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
boost::asio::basic_raw_socket::native_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef typename RawSocketService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
boost::asio::basic_raw_socket::operator =	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket& operator=(basic_raw_socket&& other)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(basic_raw_socket&& other)
boost::asio::basic_raw_socket::protocol_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
boost::asio::basic_raw_socket::receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::basic_raw_socket::receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_raw_socket::receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_raw_socket::receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint)
boost::asio::basic_raw_socket::receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags)
boost::asio::basic_raw_socket::receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_raw_socket::send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::basic_raw_socket::send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_raw_socket::send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_raw_socket::send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination)
boost::asio::basic_raw_socket::send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags)
boost::asio::basic_raw_socket::send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_seq_packet_socket	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^class basic_seq_packet_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
boost::asio::basic_seq_packet_socket::async_receive	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_seq_packet_socket::async_receive	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags& out_flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_seq_packet_socket::async_send	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_seq_packet_socket::basic_seq_packet_socket	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket(basic_seq_packet_socket&& other)$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(basic_seq_packet_socket&& other)
boost::asio::basic_seq_packet_socket::basic_seq_packet_socket	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
boost::asio::basic_seq_packet_socket::basic_seq_packet_socket	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
boost::asio::basic_seq_packet_socket::basic_seq_packet_socket	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_handle_type& native_socket)
boost::asio::basic_seq_packet_socket::basic_seq_packet_socket	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  explicit basic_seq_packet_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_seq_packet_socket::endpoint_type	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_seq_packet_socket	access:public
boost::asio::basic_seq_packet_socket::native_handle_type	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^    native_handle_type;$/;"	t	class:boost::asio::basic_seq_packet_socket	access:public
boost::asio::basic_seq_packet_socket::native_type	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  typedef typename SeqPacketSocketService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_seq_packet_socket	access:public
boost::asio::basic_seq_packet_socket::operator =	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket& operator=(basic_seq_packet_socket&& other)$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(basic_seq_packet_socket&& other)
boost::asio::basic_seq_packet_socket::protocol_type	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_seq_packet_socket	access:public
boost::asio::basic_seq_packet_socket::receive	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags)
boost::asio::basic_seq_packet_socket::receive	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, boost::system::error_code& ec)
boost::asio::basic_seq_packet_socket::receive	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags& out_flags)
boost::asio::basic_seq_packet_socket::send	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_seq_packet_socket::send	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^class basic_serial_port$/;"	c	namespace:boost::asio	inherits:basic_io_object,serial_port_base
boost::asio::basic_serial_port::assign	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code assign(const native_handle_type& native_serial_port,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const native_handle_type& native_serial_port, boost::system::error_code& ec)
boost::asio::basic_serial_port::assign	/usr/include/boost/asio/basic_serial_port.hpp	/^  void assign(const native_handle_type& native_serial_port)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const native_handle_type& native_serial_port)
boost::asio::basic_serial_port::async_read_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_serial_port::async_write_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_serial_port::basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  basic_serial_port(basic_serial_port&& other)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(basic_serial_port&& other)
boost::asio::basic_serial_port::basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  basic_serial_port(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& native_serial_port)
boost::asio::basic_serial_port::basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  explicit basic_serial_port(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_serial_port::basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  explicit basic_serial_port(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service, const char* device)
boost::asio::basic_serial_port::basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  explicit basic_serial_port(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service, const std::string& device)
boost::asio::basic_serial_port::cancel	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_serial_port::cancel	/usr/include/boost/asio/basic_serial_port.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
boost::asio::basic_serial_port::close	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_serial_port::close	/usr/include/boost/asio/basic_serial_port.hpp	/^  void close()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
boost::asio::basic_serial_port::get_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code get_option(GettableSerialPortOption& option,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(GettableSerialPortOption& option, boost::system::error_code& ec)
boost::asio::basic_serial_port::get_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  void get_option(GettableSerialPortOption& option)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(GettableSerialPortOption& option)
boost::asio::basic_serial_port::is_open	/usr/include/boost/asio/basic_serial_port.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:() const
boost::asio::basic_serial_port::lowest_layer	/usr/include/boost/asio/basic_serial_port.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:() const
boost::asio::basic_serial_port::lowest_layer	/usr/include/boost/asio/basic_serial_port.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
boost::asio::basic_serial_port::lowest_layer_type	/usr/include/boost/asio/basic_serial_port.hpp	/^  typedef basic_serial_port<SerialPortService> lowest_layer_type;$/;"	t	class:boost::asio::basic_serial_port	access:public
boost::asio::basic_serial_port::native	/usr/include/boost/asio/basic_serial_port.hpp	/^  native_type native()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
boost::asio::basic_serial_port::native_handle	/usr/include/boost/asio/basic_serial_port.hpp	/^  native_handle_type native_handle()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
boost::asio::basic_serial_port::native_handle_type	/usr/include/boost/asio/basic_serial_port.hpp	/^  typedef typename SerialPortService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::basic_serial_port	access:public
boost::asio::basic_serial_port::native_type	/usr/include/boost/asio/basic_serial_port.hpp	/^  typedef typename SerialPortService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_serial_port	access:public
boost::asio::basic_serial_port::open	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code open(const std::string& device,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const std::string& device, boost::system::error_code& ec)
boost::asio::basic_serial_port::open	/usr/include/boost/asio/basic_serial_port.hpp	/^  void open(const std::string& device)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const std::string& device)
boost::asio::basic_serial_port::operator =	/usr/include/boost/asio/basic_serial_port.hpp	/^  basic_serial_port& operator=(basic_serial_port&& other)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(basic_serial_port&& other)
boost::asio::basic_serial_port::read_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::basic_serial_port::read_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::basic_serial_port::send_break	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code send_break(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_serial_port::send_break	/usr/include/boost/asio/basic_serial_port.hpp	/^  void send_break()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
boost::asio::basic_serial_port::set_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code set_option(const SettableSerialPortOption& option,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const SettableSerialPortOption& option, boost::system::error_code& ec)
boost::asio::basic_serial_port::set_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  void set_option(const SettableSerialPortOption& option)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const SettableSerialPortOption& option)
boost::asio::basic_serial_port::write_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::basic_serial_port::write_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::basic_signal_set	/usr/include/boost/asio/basic_signal_set.hpp	/^class basic_signal_set$/;"	c	namespace:boost::asio	inherits:basic_io_object
boost::asio::basic_signal_set::add	/usr/include/boost/asio/basic_signal_set.hpp	/^  boost::system::error_code add(int signal_number,$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(int signal_number, boost::system::error_code& ec)
boost::asio::basic_signal_set::add	/usr/include/boost/asio/basic_signal_set.hpp	/^  void add(int signal_number)$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(int signal_number)
boost::asio::basic_signal_set::basic_signal_set	/usr/include/boost/asio/basic_signal_set.hpp	/^  basic_signal_set(boost::asio::io_service& io_service, int signal_number_1)$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(boost::asio::io_service& io_service, int signal_number_1)
boost::asio::basic_signal_set::basic_signal_set	/usr/include/boost/asio/basic_signal_set.hpp	/^  basic_signal_set(boost::asio::io_service& io_service, int signal_number_1,$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(boost::asio::io_service& io_service, int signal_number_1, int signal_number_2)
boost::asio::basic_signal_set::basic_signal_set	/usr/include/boost/asio/basic_signal_set.hpp	/^  basic_signal_set(boost::asio::io_service& io_service, int signal_number_1,$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(boost::asio::io_service& io_service, int signal_number_1, int signal_number_2, int signal_number_3)
boost::asio::basic_signal_set::basic_signal_set	/usr/include/boost/asio/basic_signal_set.hpp	/^  explicit basic_signal_set(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_signal_set::cancel	/usr/include/boost/asio/basic_signal_set.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_signal_set::cancel	/usr/include/boost/asio/basic_signal_set.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:()
boost::asio::basic_signal_set::clear	/usr/include/boost/asio/basic_signal_set.hpp	/^  boost::system::error_code clear(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_signal_set::clear	/usr/include/boost/asio/basic_signal_set.hpp	/^  void clear()$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:()
boost::asio::basic_signal_set::remove	/usr/include/boost/asio/basic_signal_set.hpp	/^  boost::system::error_code remove(int signal_number,$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(int signal_number, boost::system::error_code& ec)
boost::asio::basic_signal_set::remove	/usr/include/boost/asio/basic_signal_set.hpp	/^  void remove(int signal_number)$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(int signal_number)
boost::asio::basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^class basic_socket$/;"	c	namespace:boost::asio	inherits:basic_io_object,socket_base
boost::asio::basic_socket::assign	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code assign(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
boost::asio::basic_socket::assign	/usr/include/boost/asio/basic_socket.hpp	/^  void assign(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol, const native_handle_type& native_socket)
boost::asio::basic_socket::async_connect	/usr/include/boost/asio/basic_socket.hpp	/^  void async_connect(const endpoint_type& peer_endpoint,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& peer_endpoint, BOOST_ASIO_MOVE_ARG(ConnectHandler) handler)
boost::asio::basic_socket::at_mark	/usr/include/boost/asio/basic_socket.hpp	/^  bool at_mark() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::at_mark	/usr/include/boost/asio/basic_socket.hpp	/^  bool at_mark(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
boost::asio::basic_socket::available	/usr/include/boost/asio/basic_socket.hpp	/^  std::size_t available() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::available	/usr/include/boost/asio/basic_socket.hpp	/^  std::size_t available(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
boost::asio::basic_socket::basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(basic_socket&& other)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(basic_socket&& other)
boost::asio::basic_socket::basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
boost::asio::basic_socket::basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
boost::asio::basic_socket::basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_handle_type& native_socket)
boost::asio::basic_socket::basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  explicit basic_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_socket::bind	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code bind(const endpoint_type& endpoint,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::basic_socket::bind	/usr/include/boost/asio/basic_socket.hpp	/^  void bind(const endpoint_type& endpoint)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& endpoint)
boost::asio::basic_socket::cancel	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_socket::cancel	/usr/include/boost/asio/basic_socket.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
boost::asio::basic_socket::close	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_socket::close	/usr/include/boost/asio/basic_socket.hpp	/^  void close()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
boost::asio::basic_socket::connect	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code connect(const endpoint_type& peer_endpoint,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::basic_socket::connect	/usr/include/boost/asio/basic_socket.hpp	/^  void connect(const endpoint_type& peer_endpoint)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& peer_endpoint)
boost::asio::basic_socket::endpoint_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket	access:public
boost::asio::basic_socket::get_option	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code get_option(GettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(GettableSocketOption& option, boost::system::error_code& ec) const
boost::asio::basic_socket::get_option	/usr/include/boost/asio/basic_socket.hpp	/^  void get_option(GettableSocketOption& option) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(GettableSocketOption& option) const
boost::asio::basic_socket::io_control	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code io_control(IoControlCommand& command,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(IoControlCommand& command, boost::system::error_code& ec)
boost::asio::basic_socket::io_control	/usr/include/boost/asio/basic_socket.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(IoControlCommand& command)
boost::asio::basic_socket::is_open	/usr/include/boost/asio/basic_socket.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::local_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type local_endpoint() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::local_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type local_endpoint(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
boost::asio::basic_socket::lowest_layer	/usr/include/boost/asio/basic_socket.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::lowest_layer	/usr/include/boost/asio/basic_socket.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
boost::asio::basic_socket::lowest_layer_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef basic_socket<Protocol, SocketService> lowest_layer_type;$/;"	t	class:boost::asio::basic_socket	access:public
boost::asio::basic_socket::native	/usr/include/boost/asio/basic_socket.hpp	/^  native_type native()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
boost::asio::basic_socket::native_handle	/usr/include/boost/asio/basic_socket.hpp	/^  native_handle_type native_handle()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
boost::asio::basic_socket::native_handle_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef typename SocketService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::basic_socket	access:public
boost::asio::basic_socket::native_non_blocking	/usr/include/boost/asio/basic_socket.hpp	/^  bool native_non_blocking() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::native_non_blocking	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code native_non_blocking($/;"	f	class:boost::asio::basic_socket	access:public	signature:( bool mode, boost::system::error_code& ec)
boost::asio::basic_socket::native_non_blocking	/usr/include/boost/asio/basic_socket.hpp	/^  void native_non_blocking(bool mode)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(bool mode)
boost::asio::basic_socket::native_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef typename SocketService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_socket	access:public
boost::asio::basic_socket::non_blocking	/usr/include/boost/asio/basic_socket.hpp	/^  bool non_blocking() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::non_blocking	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code non_blocking($/;"	f	class:boost::asio::basic_socket	access:public	signature:( bool mode, boost::system::error_code& ec)
boost::asio::basic_socket::non_blocking	/usr/include/boost/asio/basic_socket.hpp	/^  void non_blocking(bool mode)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(bool mode)
boost::asio::basic_socket::open	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code open(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::basic_socket::open	/usr/include/boost/asio/basic_socket.hpp	/^  void open(const protocol_type& protocol = protocol_type())$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol = protocol_type())
boost::asio::basic_socket::operator =	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket& operator=(basic_socket&& other)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(basic_socket&& other)
boost::asio::basic_socket::protocol_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_socket	access:public
boost::asio::basic_socket::remote_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type remote_endpoint() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::remote_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type remote_endpoint(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
boost::asio::basic_socket::set_option	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code set_option(const SettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::basic_socket::set_option	/usr/include/boost/asio/basic_socket.hpp	/^  void set_option(const SettableSocketOption& option)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const SettableSocketOption& option)
boost::asio::basic_socket::shutdown	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code shutdown(shutdown_type what,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(shutdown_type what, boost::system::error_code& ec)
boost::asio::basic_socket::shutdown	/usr/include/boost/asio/basic_socket.hpp	/^  void shutdown(shutdown_type what)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(shutdown_type what)
boost::asio::basic_socket::~basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  ~basic_socket()$/;"	f	class:boost::asio::basic_socket	access:protected	signature:()
boost::asio::basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^class basic_socket_acceptor$/;"	c	namespace:boost::asio	inherits:basic_io_object,socket_base
boost::asio::basic_socket_acceptor::accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code accept($/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:( basic_socket<protocol_type, SocketService>& peer, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code accept($/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:( basic_socket<protocol_type, SocketService>& peer, endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void accept(basic_socket<protocol_type, SocketService>& peer)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer)
boost::asio::basic_socket_acceptor::accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer, endpoint_type& peer_endpoint)
boost::asio::basic_socket_acceptor::assign	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code assign(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol, const native_handle_type& native_acceptor, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::assign	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void assign(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol, const native_handle_type& native_acceptor)
boost::asio::basic_socket_acceptor::async_accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void async_accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer, BOOST_ASIO_MOVE_ARG(AcceptHandler) handler)
boost::asio::basic_socket_acceptor::async_accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void async_accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer, endpoint_type& peer_endpoint, BOOST_ASIO_MOVE_ARG(AcceptHandler) handler)
boost::asio::basic_socket_acceptor::basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(basic_socket_acceptor&& other)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket_acceptor&& other)
boost::asio::basic_socket_acceptor::basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint, bool reuse_addr = true)
boost::asio::basic_socket_acceptor::basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
boost::asio::basic_socket_acceptor::basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_handle_type& native_acceptor)
boost::asio::basic_socket_acceptor::basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  explicit basic_socket_acceptor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_socket_acceptor::bind	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code bind(const endpoint_type& endpoint,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::bind	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void bind(const endpoint_type& endpoint)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const endpoint_type& endpoint)
boost::asio::basic_socket_acceptor::cancel	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::cancel	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
boost::asio::basic_socket_acceptor::close	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::close	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void close()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
boost::asio::basic_socket_acceptor::endpoint_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
boost::asio::basic_socket_acceptor::get_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code get_option(GettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(GettableSocketOption& option, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::get_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void get_option(GettableSocketOption& option)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(GettableSocketOption& option)
boost::asio::basic_socket_acceptor::io_control	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code io_control(IoControlCommand& command,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(IoControlCommand& command, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::io_control	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(IoControlCommand& command)
boost::asio::basic_socket_acceptor::is_open	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:() const
boost::asio::basic_socket_acceptor::listen	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code listen(int backlog, boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(int backlog, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::listen	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void listen(int backlog = socket_base::max_connections)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(int backlog = socket_base::max_connections)
boost::asio::basic_socket_acceptor::local_endpoint	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  endpoint_type local_endpoint() const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:() const
boost::asio::basic_socket_acceptor::local_endpoint	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  endpoint_type local_endpoint(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::system::error_code& ec) const
boost::asio::basic_socket_acceptor::native	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  native_type native()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
boost::asio::basic_socket_acceptor::native_handle	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  native_handle_type native_handle()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
boost::asio::basic_socket_acceptor::native_handle_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef typename SocketAcceptorService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
boost::asio::basic_socket_acceptor::native_non_blocking	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  bool native_non_blocking() const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:() const
boost::asio::basic_socket_acceptor::native_non_blocking	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code native_non_blocking($/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:( bool mode, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::native_non_blocking	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void native_non_blocking(bool mode)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(bool mode)
boost::asio::basic_socket_acceptor::native_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef typename SocketAcceptorService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
boost::asio::basic_socket_acceptor::non_blocking	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  bool non_blocking() const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:() const
boost::asio::basic_socket_acceptor::non_blocking	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code non_blocking($/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:( bool mode, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::non_blocking	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void non_blocking(bool mode)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(bool mode)
boost::asio::basic_socket_acceptor::open	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code open(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::open	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void open(const protocol_type& protocol = protocol_type())$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol = protocol_type())
boost::asio::basic_socket_acceptor::operator =	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor& operator=(basic_socket_acceptor&& other)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket_acceptor&& other)
boost::asio::basic_socket_acceptor::protocol_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
boost::asio::basic_socket_acceptor::set_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code set_option(const SettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::set_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void set_option(const SettableSocketOption& option)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const SettableSocketOption& option)
boost::asio::basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^class basic_socket_iostream$/;"	c	namespace:boost::asio	inherits:boost::base_from_member,std::basic_iostream
boost::asio::basic_socket_iostream::basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  basic_socket_iostream()$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:()
boost::asio::basic_socket_iostream::basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  explicit basic_socket_iostream(T... x)$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:(T.... x)
boost::asio::basic_socket_iostream::basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  explicit basic_socket_iostream(T1 t1, ..., TN tn);$/;"	p	class:boost::asio::basic_socket_iostream	access:public	signature:(T1 t1, ..., TN tn)
boost::asio::basic_socket_iostream::close	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  void close()$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:()
boost::asio::basic_socket_iostream::connect	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  void connect(T1 t1, ..., TN tn);$/;"	p	class:boost::asio::basic_socket_iostream	access:public	signature:(T1 t1, ..., TN tn)
boost::asio::basic_socket_iostream::duration_type	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  typedef typename TimeTraits::duration_type duration_type;$/;"	t	class:boost::asio::basic_socket_iostream	access:public
boost::asio::basic_socket_iostream::endpoint_type	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket_iostream	access:public
boost::asio::basic_socket_iostream::error	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  const boost::system::error_code& error() const$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:() const
boost::asio::basic_socket_iostream::expires_at	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  time_type expires_at() const$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:() const
boost::asio::basic_socket_iostream::expires_at	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  void expires_at(const time_type& expiry_time)$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:(const time_type& expiry_time)
boost::asio::basic_socket_iostream::expires_from_now	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  duration_type expires_from_now() const$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:() const
boost::asio::basic_socket_iostream::expires_from_now	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  void expires_from_now(const duration_type& expiry_time)$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:(const duration_type& expiry_time)
boost::asio::basic_socket_iostream::rdbuf	/usr/include/boost/asio/basic_socket_iostream.hpp	/^    Time, TimeTraits, TimerService>* rdbuf() const$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:() const
boost::asio::basic_socket_iostream::time_type	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  typedef typename TimeTraits::time_type time_type;$/;"	t	class:boost::asio::basic_socket_iostream	access:public
boost::asio::basic_socket_streambuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^class basic_socket_streambuf$/;"	c	namespace:boost::asio	inherits:std::streambuf,boost::base_from_member,basic_socket
boost::asio::basic_socket_streambuf::basic_socket_streambuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  basic_socket_streambuf()$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:()
boost::asio::basic_socket_streambuf::buffer_size	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum { buffer_size = 512 };$/;"	e	enum:boost::asio::basic_socket_streambuf::__anon4
boost::asio::basic_socket_streambuf::bytes_transferred_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  std::size_t bytes_transferred_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::close	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    Time, TimeTraits, TimerService>* close()$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:()
boost::asio::basic_socket_streambuf::connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    Time, TimeTraits, TimerService>* connect($/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:( const endpoint_type& endpoint)
boost::asio::basic_socket_streambuf::connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    Time, TimeTraits, TimerService>* connect(T... x)$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:(T.... x)
boost::asio::basic_socket_streambuf::connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  basic_socket_streambuf<Protocol, StreamSocketService>* connect($/;"	p	class:boost::asio::basic_socket_streambuf	access:public	signature:( T1 t1, ..., TN tn)
boost::asio::basic_socket_streambuf::construct_timer	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void construct_timer()$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:()
boost::asio::basic_socket_streambuf::destroy_timer	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void destroy_timer()$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:()
boost::asio::basic_socket_streambuf::duration_type	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  typedef typename TimeTraits::duration_type duration_type;$/;"	t	class:boost::asio::basic_socket_streambuf	access:public
boost::asio::basic_socket_streambuf::ec_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::endpoint_type	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket_streambuf	access:public
boost::asio::basic_socket_streambuf::error	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  virtual const boost::system::error_code& error() const$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:() const
boost::asio::basic_socket_streambuf::expires_at	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  time_type expires_at() const$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:() const
boost::asio::basic_socket_streambuf::expires_at	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void expires_at(const time_type& expiry_time)$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:(const time_type& expiry_time)
boost::asio::basic_socket_streambuf::expires_from_now	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  duration_type expires_from_now() const$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:() const
boost::asio::basic_socket_streambuf::expires_from_now	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void expires_from_now(const duration_type& expiry_time)$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:(const duration_type& expiry_time)
boost::asio::basic_socket_streambuf::get_buffer_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  boost::asio::detail::array<char, buffer_size> get_buffer_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::init_buffers	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void init_buffers()$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:()
boost::asio::basic_socket_streambuf::io_handler	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  struct io_handler$/;"	s	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::io_handler::operator ()	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	struct:boost::asio::basic_socket_streambuf::io_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred = 0)
boost::asio::basic_socket_streambuf::io_handler::this_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    basic_socket_streambuf* this_;$/;"	m	struct:boost::asio::basic_socket_streambuf::io_handler	access:public
boost::asio::basic_socket_streambuf::no_timer	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum state { no_timer, timer_is_pending, timer_has_expired } timer_state_;$/;"	e	enum:boost::asio::basic_socket_streambuf::state
boost::asio::basic_socket_streambuf::overflow	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  int_type overflow(int_type c)$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:(int_type c)
boost::asio::basic_socket_streambuf::puberror	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  const boost::system::error_code& puberror() const$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:() const
boost::asio::basic_socket_streambuf::put_buffer_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  boost::asio::detail::array<char, buffer_size> put_buffer_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::putback_max	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum { putback_max = 8 };$/;"	e	enum:boost::asio::basic_socket_streambuf::__anon3
boost::asio::basic_socket_streambuf::resolve_and_connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void resolve_and_connect(const ResolverQuery& query)$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:(const ResolverQuery& query)
boost::asio::basic_socket_streambuf::setbuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  std::streambuf* setbuf(char_type* s, std::streamsize n)$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:(char_type* s, std::streamsize n)
boost::asio::basic_socket_streambuf::start_timer	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void start_timer()$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:()
boost::asio::basic_socket_streambuf::state	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum state { no_timer, timer_is_pending, timer_has_expired } timer_state_;$/;"	g	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::sync	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  int sync()$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:()
boost::asio::basic_socket_streambuf::time_type	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  typedef typename TimeTraits::time_type time_type;$/;"	t	class:boost::asio::basic_socket_streambuf	access:public
boost::asio::basic_socket_streambuf::timer_handler	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  struct timer_handler$/;"	s	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::timer_handler::operator ()	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    void operator()(const boost::system::error_code&)$/;"	f	struct:boost::asio::basic_socket_streambuf::timer_handler	access:public	signature:(const boost::system::error_code&)
boost::asio::basic_socket_streambuf::timer_handler::this_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    basic_socket_streambuf* this_;$/;"	m	struct:boost::asio::basic_socket_streambuf::timer_handler	access:public
boost::asio::basic_socket_streambuf::timer_has_expired	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum state { no_timer, timer_is_pending, timer_has_expired } timer_state_;$/;"	e	enum:boost::asio::basic_socket_streambuf::state
boost::asio::basic_socket_streambuf::timer_implementation_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  typename TimerService::implementation_type timer_implementation_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::timer_is_pending	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum state { no_timer, timer_is_pending, timer_has_expired } timer_state_;$/;"	e	enum:boost::asio::basic_socket_streambuf::state
boost::asio::basic_socket_streambuf::timer_service_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  TimerService* timer_service_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::timer_state_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum state { no_timer, timer_is_pending, timer_has_expired } timer_state_;$/;"	m	class:boost::asio::basic_socket_streambuf	typeref:enum:boost::asio::basic_socket_streambuf::state	access:private
boost::asio::basic_socket_streambuf::unbuffered_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  bool unbuffered_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::underflow	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  int_type underflow()$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:()
boost::asio::basic_socket_streambuf::~basic_socket_streambuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  virtual ~basic_socket_streambuf()$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:()
boost::asio::basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^class basic_stream_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
boost::asio::basic_stream_socket::async_read_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_stream_socket::async_receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_stream_socket::async_receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::basic_stream_socket::async_send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_stream_socket::async_send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_stream_socket::async_write_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::basic_stream_socket::basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(basic_stream_socket&& other)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(basic_stream_socket&& other)
boost::asio::basic_stream_socket::basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
boost::asio::basic_stream_socket::basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
boost::asio::basic_stream_socket::basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_handle_type& native_socket)
boost::asio::basic_stream_socket::basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  explicit basic_stream_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_stream_socket::endpoint_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
boost::asio::basic_stream_socket::native_handle_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef typename StreamSocketService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
boost::asio::basic_stream_socket::native_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef typename StreamSocketService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
boost::asio::basic_stream_socket::operator =	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket& operator=(basic_stream_socket&& other)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(basic_stream_socket&& other)
boost::asio::basic_stream_socket::protocol_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
boost::asio::basic_stream_socket::read_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::basic_stream_socket::read_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::basic_stream_socket::receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::basic_stream_socket::receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_stream_socket::receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_stream_socket::send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::basic_stream_socket::send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_stream_socket::send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_stream_socket::write_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::basic_stream_socket::write_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::basic_streambuf	/usr/include/boost/asio/basic_streambuf.hpp	/^class basic_streambuf$/;"	c	namespace:boost::asio	inherits:std::streambuf,noncopyable
boost::asio::basic_streambuf::basic_streambuf	/usr/include/boost/asio/basic_streambuf.hpp	/^  explicit basic_streambuf($/;"	f	class:boost::asio::basic_streambuf	access:public	signature:( std::size_t maximum_size = (std::numeric_limits<std::size_t>::max)(), const Allocator& allocator = Allocator())
boost::asio::basic_streambuf::buffer_	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::vector<char_type, Allocator> buffer_;$/;"	m	class:boost::asio::basic_streambuf	access:private
boost::asio::basic_streambuf::buffer_delta	/usr/include/boost/asio/basic_streambuf.hpp	/^  enum { buffer_delta = 128 };$/;"	e	enum:boost::asio::basic_streambuf::__anon5
boost::asio::basic_streambuf::commit	/usr/include/boost/asio/basic_streambuf.hpp	/^  void commit(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:(std::size_t n)
boost::asio::basic_streambuf::const_buffers_type	/usr/include/boost/asio/basic_streambuf.hpp	/^  typedef implementation_defined const_buffers_type;$/;"	t	class:boost::asio::basic_streambuf	access:public
boost::asio::basic_streambuf::consume	/usr/include/boost/asio/basic_streambuf.hpp	/^  void consume(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:(std::size_t n)
boost::asio::basic_streambuf::data	/usr/include/boost/asio/basic_streambuf.hpp	/^  const_buffers_type data() const$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:() const
boost::asio::basic_streambuf::max_size	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::size_t max_size() const$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:() const
boost::asio::basic_streambuf::max_size_	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::size_t max_size_;$/;"	m	class:boost::asio::basic_streambuf	access:private
boost::asio::basic_streambuf::mutable_buffers_type	/usr/include/boost/asio/basic_streambuf.hpp	/^  typedef implementation_defined mutable_buffers_type;$/;"	t	class:boost::asio::basic_streambuf	access:public
boost::asio::basic_streambuf::overflow	/usr/include/boost/asio/basic_streambuf.hpp	/^  int_type overflow(int_type c)$/;"	f	class:boost::asio::basic_streambuf	access:protected	signature:(int_type c)
boost::asio::basic_streambuf::prepare	/usr/include/boost/asio/basic_streambuf.hpp	/^  mutable_buffers_type prepare(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:(std::size_t n)
boost::asio::basic_streambuf::read_size_helper	/usr/include/boost/asio/basic_streambuf.hpp	/^  friend std::size_t read_size_helper($/;"	f	class:boost::asio::basic_streambuf	access:friend	signature:( basic_streambuf& sb, std::size_t max_size)
boost::asio::basic_streambuf::reserve	/usr/include/boost/asio/basic_streambuf.hpp	/^  void reserve(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:protected	signature:(std::size_t n)
boost::asio::basic_streambuf::size	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:() const
boost::asio::basic_streambuf::underflow	/usr/include/boost/asio/basic_streambuf.hpp	/^  int_type underflow()$/;"	f	class:boost::asio::basic_streambuf	access:protected	signature:()
boost::asio::basic_waitable_timer	/usr/include/boost/asio/basic_waitable_timer.hpp	/^class basic_waitable_timer$/;"	c	namespace:boost::asio	inherits:basic_io_object
boost::asio::basic_waitable_timer::basic_waitable_timer	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  basic_waitable_timer(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(boost::asio::io_service& io_service, const duration& expiry_time)
boost::asio::basic_waitable_timer::basic_waitable_timer	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  basic_waitable_timer(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(boost::asio::io_service& io_service, const time_point& expiry_time)
boost::asio::basic_waitable_timer::basic_waitable_timer	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  explicit basic_waitable_timer(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_waitable_timer::cancel	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t cancel()$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:()
boost::asio::basic_waitable_timer::cancel	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_waitable_timer::cancel_one	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t cancel_one()$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:()
boost::asio::basic_waitable_timer::cancel_one	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t cancel_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_waitable_timer::clock_type	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  typedef Clock clock_type;$/;"	t	class:boost::asio::basic_waitable_timer	access:public
boost::asio::basic_waitable_timer::duration	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  typedef typename clock_type::duration duration;$/;"	t	class:boost::asio::basic_waitable_timer	access:public
boost::asio::basic_waitable_timer::expires_at	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t expires_at(const time_point& expiry_time)$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(const time_point& expiry_time)
boost::asio::basic_waitable_timer::expires_at	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t expires_at(const time_point& expiry_time,$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(const time_point& expiry_time, boost::system::error_code& ec)
boost::asio::basic_waitable_timer::expires_at	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  time_point expires_at() const$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:() const
boost::asio::basic_waitable_timer::expires_from_now	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  duration expires_from_now() const$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:() const
boost::asio::basic_waitable_timer::expires_from_now	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t expires_from_now(const duration& expiry_time)$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(const duration& expiry_time)
boost::asio::basic_waitable_timer::expires_from_now	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t expires_from_now(const duration& expiry_time,$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(const duration& expiry_time, boost::system::error_code& ec)
boost::asio::basic_waitable_timer::time_point	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  typedef typename clock_type::time_point time_point;$/;"	t	class:boost::asio::basic_waitable_timer	access:public
boost::asio::basic_waitable_timer::traits_type	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  typedef WaitTraits traits_type;$/;"	t	class:boost::asio::basic_waitable_timer	access:public
boost::asio::basic_waitable_timer::wait	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  void wait()$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:()
boost::asio::basic_waitable_timer::wait	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  void wait(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^buffer(boost::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^buffer(boost::array<PodType, N>& data, std::size_t max_size_in_bytes)$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer($/;"	f	namespace:boost::asio	signature:( const std::basic_string<Elem, Traits, Allocator>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer($/;"	f	namespace:boost::asio	signature:( const std::basic_string<Elem, Traits, Allocator>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer($/;"	f	namespace:boost::asio	signature:( const std::vector<PodType, Allocator>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer($/;"	f	namespace:boost::asio	signature:( const std::vector<PodType, Allocator>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(boost::array<const PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(boost::array<const PodType, N>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(boost::array<const PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(boost::array<const PodType, N>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const boost::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(const boost::array<PodType, N>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const boost::array<PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(const boost::array<PodType, N>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const const_buffer& b,$/;"	f	namespace:boost::asio	signature:(const const_buffer& b, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const std::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(const std::array<PodType, N>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const std::array<PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(const std::array<PodType, N>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const void* data,$/;"	f	namespace:boost::asio	signature:(const void* data, std::size_t size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(std::array<const PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(std::array<const PodType, N>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(std::array<const PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(std::array<const PodType, N>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(boost::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(boost::array<PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(const mutable_buffer& b,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(std::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(std::array<PodType, N>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(std::array<PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(std::array<PodType, N>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(std::vector<PodType, Allocator>& data)$/;"	f	namespace:boost::asio	signature:(std::vector<PodType, Allocator>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(std::vector<PodType, Allocator>& data,$/;"	f	namespace:boost::asio	signature:(std::vector<PodType, Allocator>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(void* data, std::size_t size_in_bytes)$/;"	f	namespace:boost::asio	signature:(void* data, std::size_t size_in_bytes)
boost::asio::buffer_cast	/usr/include/boost/asio/buffer.hpp	/^inline PointerToPodType buffer_cast(const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b)
boost::asio::buffer_cast	/usr/include/boost/asio/buffer.hpp	/^inline PointerToPodType buffer_cast(const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const const_buffer& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const const_buffers_1& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const const_buffers_1& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const mutable_buffer& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const mutable_buffer& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const mutable_buffers_1& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const mutable_buffers_1& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const ConstBufferSequence& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const const_buffer& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const const_buffer& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const const_buffers_1& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const const_buffers_1& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const mutable_buffer& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const mutable_buffer& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const mutable_buffers_1& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const mutable_buffers_1& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const ConstBufferSequence& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const ConstBufferSequence& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const const_buffer& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const const_buffer& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const const_buffers_1& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const const_buffers_1& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const mutable_buffer& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const mutable_buffer& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const mutable_buffers_1& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const mutable_buffers_1& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const ConstBufferSequence& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const ConstBufferSequence& source, std::size_t max_bytes_to_copy)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const const_buffer& source)
boost::asio::buffer_copy	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const ConstBufferSequence& source)
boost::asio::buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const BufferSequence& b)$/;"	f	namespace:boost::asio	signature:(const BufferSequence& b)
boost::asio::buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b)
boost::asio::buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const const_buffers_1& b)$/;"	f	namespace:boost::asio	signature:(const const_buffers_1& b)
boost::asio::buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b)
boost::asio::buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const mutable_buffers_1& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& b)
boost::asio::buffered_read_stream	/usr/include/boost/asio/buffered_read_stream.hpp	/^class buffered_read_stream$/;"	c	namespace:boost::asio	inherits:noncopyable
boost::asio::buffered_read_stream::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/buffered_read_stream.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, default_buffer_size = 1024);$/;"	p	class:boost::asio::buffered_read_stream	access:public	signature:(std::size_t, default_buffer_size = 1024)
boost::asio::buffered_read_stream::async_fill	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void async_fill(ReadHandler handler)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(ReadHandler handler)
boost::asio::buffered_read_stream::async_read_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::buffered_read_stream::async_write_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::buffered_read_stream::buffered_read_stream	/usr/include/boost/asio/buffered_read_stream.hpp	/^  buffered_read_stream(Arg& a, std::size_t buffer_size)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(Arg& a, std::size_t buffer_size)
boost::asio::buffered_read_stream::buffered_read_stream	/usr/include/boost/asio/buffered_read_stream.hpp	/^  explicit buffered_read_stream(Arg& a)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(Arg& a)
boost::asio::buffered_read_stream::close	/usr/include/boost/asio/buffered_read_stream.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_read_stream::close	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void close()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::copy	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t copy(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:private	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_read_stream::default_buffer_size	/usr/include/boost/asio/buffered_read_stream.hpp	/^  static const std::size_t default_buffer_size = implementation_defined;$/;"	m	class:boost::asio::buffered_read_stream	access:public
boost::asio::buffered_read_stream::fill	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t fill()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::fill	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t fill(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_read_stream::fill_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^  class fill_handler$/;"	c	class:boost::asio::buffered_read_stream	access:public
boost::asio::buffered_read_stream::fill_handler::fill_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^    fill_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_read_stream::fill_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, std::size_t previous_size, ReadHandler handler)
boost::asio::buffered_read_stream::fill_handler::handler_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
boost::asio::buffered_read_stream::fill_handler::io_service_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
boost::asio::buffered_read_stream::fill_handler::operator ()	/usr/include/boost/asio/buffered_read_stream.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::buffered_read_stream::fill_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::buffered_read_stream::fill_handler::previous_size_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    std::size_t previous_size_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
boost::asio::buffered_read_stream::fill_handler::storage_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
boost::asio::buffered_read_stream::get_io_service	/usr/include/boost/asio/buffered_read_stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::in_avail	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::in_avail	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_read_stream::lowest_layer	/usr/include/boost/asio/buffered_read_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:() const
boost::asio::buffered_read_stream::lowest_layer	/usr/include/boost/asio/buffered_read_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::lowest_layer_type	/usr/include/boost/asio/buffered_read_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::buffered_read_stream	access:public
boost::asio::buffered_read_stream::next_layer	/usr/include/boost/asio/buffered_read_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::next_layer_	/usr/include/boost/asio/buffered_read_stream.hpp	/^  Stream next_layer_;$/;"	m	class:boost::asio::buffered_read_stream	access:private
boost::asio::buffered_read_stream::next_layer_type	/usr/include/boost/asio/buffered_read_stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::buffered_read_stream	access:public
boost::asio::buffered_read_stream::peek	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_read_stream::peek	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_read_stream::peek_copy	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t peek_copy(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:private	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_read_stream::read_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_read_stream::read_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_read_stream::read_some_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^  class read_some_handler$/;"	c	class:boost::asio::buffered_read_stream	access:public
boost::asio::buffered_read_stream::read_some_handler::buffers_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
boost::asio::buffered_read_stream::read_some_handler::handler_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
boost::asio::buffered_read_stream::read_some_handler::io_service_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
boost::asio::buffered_read_stream::read_some_handler::operator ()	/usr/include/boost/asio/buffered_read_stream.hpp	/^    void operator()(const boost::system::error_code& ec, std::size_t)$/;"	f	class:boost::asio::buffered_read_stream::read_some_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t)
boost::asio::buffered_read_stream::read_some_handler::read_some_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^    read_some_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_read_stream::read_some_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::buffered_read_stream::read_some_handler::storage_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
boost::asio::buffered_read_stream::storage_	/usr/include/boost/asio/buffered_read_stream.hpp	/^  detail::buffered_stream_storage storage_;$/;"	m	class:boost::asio::buffered_read_stream	access:private
boost::asio::buffered_read_stream::write_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::buffered_read_stream::write_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_stream	/usr/include/boost/asio/buffered_stream.hpp	/^class buffered_stream$/;"	c	namespace:boost::asio	inherits:noncopyable
boost::asio::buffered_stream::async_fill	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_fill(ReadHandler handler)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(ReadHandler handler)
boost::asio::buffered_stream::async_flush	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_flush(WriteHandler handler)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(WriteHandler handler)
boost::asio::buffered_stream::async_read_some	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::buffered_stream::async_write_some	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::buffered_stream::buffered_stream	/usr/include/boost/asio/buffered_stream.hpp	/^  explicit buffered_stream(Arg& a)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(Arg& a)
boost::asio::buffered_stream::buffered_stream	/usr/include/boost/asio/buffered_stream.hpp	/^  explicit buffered_stream(Arg& a, std::size_t read_buffer_size,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(Arg& a, std::size_t read_buffer_size, std::size_t write_buffer_size)
boost::asio::buffered_stream::close	/usr/include/boost/asio/buffered_stream.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_stream::close	/usr/include/boost/asio/buffered_stream.hpp	/^  void close()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::fill	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t fill()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::fill	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t fill(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_stream::flush	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t flush()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::flush	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t flush(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_stream::get_io_service	/usr/include/boost/asio/buffered_stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::in_avail	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::in_avail	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_stream::inner_stream_impl_	/usr/include/boost/asio/buffered_stream.hpp	/^  write_stream_type inner_stream_impl_;$/;"	m	class:boost::asio::buffered_stream	access:private
boost::asio::buffered_stream::lowest_layer	/usr/include/boost/asio/buffered_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::buffered_stream	access:public	signature:() const
boost::asio::buffered_stream::lowest_layer	/usr/include/boost/asio/buffered_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::lowest_layer_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::buffered_stream	access:public
boost::asio::buffered_stream::next_layer	/usr/include/boost/asio/buffered_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::next_layer_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::buffered_stream	access:public
boost::asio::buffered_stream::peek	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_stream::peek	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_stream::read_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_stream::read_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_stream::read_stream_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef buffered_read_stream<write_stream_type&> read_stream_type;$/;"	t	class:boost::asio::buffered_stream	access:private
boost::asio::buffered_stream::stream_impl_	/usr/include/boost/asio/buffered_stream.hpp	/^  read_stream_type stream_impl_;$/;"	m	class:boost::asio::buffered_stream	access:private
boost::asio::buffered_stream::write_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::buffered_stream::write_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_stream::write_stream_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef buffered_write_stream<Stream> write_stream_type;$/;"	t	class:boost::asio::buffered_stream	access:private
boost::asio::buffered_write_stream	/usr/include/boost/asio/buffered_write_stream.hpp	/^class buffered_write_stream$/;"	c	namespace:boost::asio	inherits:noncopyable
boost::asio::buffered_write_stream::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/buffered_write_stream.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, default_buffer_size = 1024);$/;"	p	class:boost::asio::buffered_write_stream	access:public	signature:(std::size_t, default_buffer_size = 1024)
boost::asio::buffered_write_stream::async_flush	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void async_flush(WriteHandler handler)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(WriteHandler handler)
boost::asio::buffered_write_stream::async_read_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::buffered_write_stream::async_write_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::buffered_write_stream::buffered_write_stream	/usr/include/boost/asio/buffered_write_stream.hpp	/^  buffered_write_stream(Arg& a, std::size_t buffer_size)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(Arg& a, std::size_t buffer_size)
boost::asio::buffered_write_stream::buffered_write_stream	/usr/include/boost/asio/buffered_write_stream.hpp	/^  explicit buffered_write_stream(Arg& a)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(Arg& a)
boost::asio::buffered_write_stream::close	/usr/include/boost/asio/buffered_write_stream.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_write_stream::close	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void close()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::copy	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t copy(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:private	signature:(const ConstBufferSequence& buffers)
boost::asio::buffered_write_stream::default_buffer_size	/usr/include/boost/asio/buffered_write_stream.hpp	/^  static const std::size_t default_buffer_size = implementation_defined;$/;"	m	class:boost::asio::buffered_write_stream	access:public
boost::asio::buffered_write_stream::flush	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t flush()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::flush	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t flush(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_write_stream::flush_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^  class flush_handler$/;"	c	class:boost::asio::buffered_write_stream	access:public
boost::asio::buffered_write_stream::flush_handler::flush_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^    flush_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_write_stream::flush_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, WriteHandler handler)
boost::asio::buffered_write_stream::flush_handler::handler_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::buffered_write_stream::flush_handler	access:private
boost::asio::buffered_write_stream::flush_handler::io_service_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_write_stream::flush_handler	access:private
boost::asio::buffered_write_stream::flush_handler::operator ()	/usr/include/boost/asio/buffered_write_stream.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::buffered_write_stream::flush_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_written)
boost::asio::buffered_write_stream::flush_handler::storage_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_write_stream::flush_handler	access:private
boost::asio::buffered_write_stream::get_io_service	/usr/include/boost/asio/buffered_write_stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::in_avail	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::in_avail	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_write_stream::lowest_layer	/usr/include/boost/asio/buffered_write_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:() const
boost::asio::buffered_write_stream::lowest_layer	/usr/include/boost/asio/buffered_write_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::lowest_layer_type	/usr/include/boost/asio/buffered_write_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::buffered_write_stream	access:public
boost::asio::buffered_write_stream::next_layer	/usr/include/boost/asio/buffered_write_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::next_layer_	/usr/include/boost/asio/buffered_write_stream.hpp	/^  Stream next_layer_;$/;"	m	class:boost::asio::buffered_write_stream	access:private
boost::asio::buffered_write_stream::next_layer_type	/usr/include/boost/asio/buffered_write_stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::buffered_write_stream	access:public
boost::asio::buffered_write_stream::peek	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_write_stream::peek	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_write_stream::read_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_write_stream::read_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_write_stream::storage_	/usr/include/boost/asio/buffered_write_stream.hpp	/^  detail::buffered_stream_storage storage_;$/;"	m	class:boost::asio::buffered_write_stream	access:private
boost::asio::buffered_write_stream::write_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::buffered_write_stream::write_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_write_stream::write_some_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^  class write_some_handler$/;"	c	class:boost::asio::buffered_write_stream	access:public
boost::asio::buffered_write_stream::write_some_handler::buffers_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    ConstBufferSequence buffers_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
boost::asio::buffered_write_stream::write_some_handler::handler_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
boost::asio::buffered_write_stream::write_some_handler::io_service_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
boost::asio::buffered_write_stream::write_some_handler::operator ()	/usr/include/boost/asio/buffered_write_stream.hpp	/^    void operator()(const boost::system::error_code& ec, std::size_t)$/;"	f	class:boost::asio::buffered_write_stream::write_some_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t)
boost::asio::buffered_write_stream::write_some_handler::storage_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
boost::asio::buffered_write_stream::write_some_handler::write_some_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^    write_some_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_write_stream::write_some_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::buffers_begin	/usr/include/boost/asio/buffers_iterator.hpp	/^inline buffers_iterator<BufferSequence> buffers_begin($/;"	f	namespace:boost::asio	signature:( const BufferSequence& buffers)
boost::asio::buffers_end	/usr/include/boost/asio/buffers_iterator.hpp	/^inline buffers_iterator<BufferSequence> buffers_end($/;"	f	namespace:boost::asio	signature:( const BufferSequence& buffers)
boost::asio::buffers_iterator	/usr/include/boost/asio/buffers_iterator.hpp	/^class buffers_iterator$/;"	c	namespace:boost::asio
boost::asio::buffers_iterator::advance	/usr/include/boost/asio/buffers_iterator.hpp	/^  void advance(std::ptrdiff_t n)$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:(std::ptrdiff_t n)
boost::asio::buffers_iterator::begin	/usr/include/boost/asio/buffers_iterator.hpp	/^  static buffers_iterator begin(const BufferSequence& buffers)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(const BufferSequence& buffers)
boost::asio::buffers_iterator::begin_	/usr/include/boost/asio/buffers_iterator.hpp	/^  typename BufferSequence::const_iterator begin_;$/;"	m	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^      BufferSequence, ByteType>::buffer_type buffer_type;$/;"	t	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::buffers_iterator	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator()$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:()
boost::asio::buffers_iterator::current_	/usr/include/boost/asio/buffers_iterator.hpp	/^  typename BufferSequence::const_iterator current_;$/;"	m	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::current_buffer_	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffer_type current_buffer_;$/;"	m	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::current_buffer_position_	/usr/include/boost/asio/buffers_iterator.hpp	/^  std::size_t current_buffer_position_;$/;"	m	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::decrement	/usr/include/boost/asio/buffers_iterator.hpp	/^  void decrement()$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:()
boost::asio::buffers_iterator::dereference	/usr/include/boost/asio/buffers_iterator.hpp	/^  reference dereference() const$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:() const
boost::asio::buffers_iterator::difference_type	/usr/include/boost/asio/buffers_iterator.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::asio::buffers_iterator	access:public
boost::asio::buffers_iterator::distance_to	/usr/include/boost/asio/buffers_iterator.hpp	/^  std::ptrdiff_t distance_to(const buffers_iterator& other) const$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:(const buffers_iterator& other) const
boost::asio::buffers_iterator::end	/usr/include/boost/asio/buffers_iterator.hpp	/^  static buffers_iterator end(const BufferSequence& buffers)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(const BufferSequence& buffers)
boost::asio::buffers_iterator::end_	/usr/include/boost/asio/buffers_iterator.hpp	/^  typename BufferSequence::const_iterator end_;$/;"	m	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::equal	/usr/include/boost/asio/buffers_iterator.hpp	/^  bool equal(const buffers_iterator& other) const$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:(const buffers_iterator& other) const
boost::asio::buffers_iterator::increment	/usr/include/boost/asio/buffers_iterator.hpp	/^  void increment()$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:()
boost::asio::buffers_iterator::iterator_category	/usr/include/boost/asio/buffers_iterator.hpp	/^  typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:boost::asio::buffers_iterator	access:public
boost::asio::buffers_iterator::operator !=	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend bool operator!=(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
boost::asio::buffers_iterator::operator *	/usr/include/boost/asio/buffers_iterator.hpp	/^  reference operator*() const$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:() const
boost::asio::buffers_iterator::operator +	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend buffers_iterator operator+(const buffers_iterator& iter,$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& iter, std::ptrdiff_t difference)
boost::asio::buffers_iterator::operator +	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend buffers_iterator operator+(std::ptrdiff_t difference,$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(std::ptrdiff_t difference, const buffers_iterator& iter)
boost::asio::buffers_iterator::operator ++	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator operator++(int)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(int)
boost::asio::buffers_iterator::operator ++	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator& operator++()$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:()
boost::asio::buffers_iterator::operator +=	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator& operator+=(std::ptrdiff_t difference)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(std::ptrdiff_t difference)
boost::asio::buffers_iterator::operator -	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend buffers_iterator operator-(const buffers_iterator& iter,$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& iter, std::ptrdiff_t difference)
boost::asio::buffers_iterator::operator -	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend std::ptrdiff_t operator-(const buffers_iterator& a,$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
boost::asio::buffers_iterator::operator --	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator operator--(int)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(int)
boost::asio::buffers_iterator::operator --	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator& operator--()$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:()
boost::asio::buffers_iterator::operator -=	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator& operator-=(std::ptrdiff_t difference)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(std::ptrdiff_t difference)
boost::asio::buffers_iterator::operator ->	/usr/include/boost/asio/buffers_iterator.hpp	/^  pointer operator->() const$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:() const
boost::asio::buffers_iterator::operator <	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend bool operator<(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
boost::asio::buffers_iterator::operator <=	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend bool operator<=(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
boost::asio::buffers_iterator::operator ==	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend bool operator==(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
boost::asio::buffers_iterator::operator >	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend bool operator>(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
boost::asio::buffers_iterator::operator >=	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend bool operator>=(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
boost::asio::buffers_iterator::operator []	/usr/include/boost/asio/buffers_iterator.hpp	/^  reference operator[](std::ptrdiff_t difference) const$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(std::ptrdiff_t difference) const
boost::asio::buffers_iterator::pointer	/usr/include/boost/asio/buffers_iterator.hpp	/^      BufferSequence, ByteType>::byte_type* pointer;$/;"	t	class:boost::asio::buffers_iterator	access:public
boost::asio::buffers_iterator::pointer	/usr/include/boost/asio/buffers_iterator.hpp	/^  typedef const_or_non_const_ByteType* pointer;$/;"	t	class:boost::asio::buffers_iterator	access:public
boost::asio::buffers_iterator::position_	/usr/include/boost/asio/buffers_iterator.hpp	/^  std::size_t position_;$/;"	m	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::reference	/usr/include/boost/asio/buffers_iterator.hpp	/^      BufferSequence, ByteType>::byte_type& reference;$/;"	t	class:boost::asio::buffers_iterator	access:public
boost::asio::buffers_iterator::reference	/usr/include/boost/asio/buffers_iterator.hpp	/^  typedef const_or_non_const_ByteType& reference;$/;"	t	class:boost::asio::buffers_iterator	access:public
boost::asio::buffers_iterator::value_type	/usr/include/boost/asio/buffers_iterator.hpp	/^  typedef ByteType value_type;$/;"	t	class:boost::asio::buffers_iterator	access:public
boost::asio::connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin);$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin)
boost::asio::connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, ConnectCondition connect_condition, boost::system::error_code& ec)
boost::asio::connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, ConnectCondition connect_condition)
boost::asio::connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, ConnectCondition connect_condition)
boost::asio::connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end)
boost::asio::connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, ConnectCondition connect_condition, boost::system::error_code& ec)
boost::asio::connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, boost::system::error_code& ec)
boost::asio::connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, boost::system::error_code& ec)
boost::asio::connect	/usr/include/boost/asio/impl/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin)$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin)
boost::asio::connect	/usr/include/boost/asio/impl/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, ConnectCondition connect_condition)
boost::asio::connect	/usr/include/boost/asio/impl/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end)
boost::asio::connect	/usr/include/boost/asio/impl/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, ConnectCondition connect_condition)
boost::asio::connect	/usr/include/boost/asio/impl/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, ConnectCondition connect_condition, boost::system::error_code& ec)
boost::asio::connect	/usr/include/boost/asio/impl/connect.hpp	/^inline Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, ConnectCondition connect_condition, boost::system::error_code& ec)
boost::asio::connect	/usr/include/boost/asio/impl/connect.hpp	/^inline Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, boost::system::error_code& ec)
boost::asio::connect	/usr/include/boost/asio/impl/connect.hpp	/^inline Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, boost::system::error_code& ec)
boost::asio::const_buffer	/usr/include/boost/asio/buffer.hpp	/^class const_buffer$/;"	c	namespace:boost::asio
boost::asio::const_buffer::boost::asio::detail::buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^  friend const void* boost::asio::detail::buffer_cast_helper($/;"	p	class:boost::asio::const_buffer::boost::asio::detail	access:friend	signature:( const const_buffer& b)
boost::asio::const_buffer::boost::asio::detail::buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^  friend std::size_t boost::asio::detail::buffer_size_helper($/;"	p	class:boost::asio::const_buffer::boost::asio::detail	access:friend	signature:( const const_buffer& b)
boost::asio::const_buffer::const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer()$/;"	f	class:boost::asio::const_buffer	access:public	signature:()
boost::asio::const_buffer::const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer(const mutable_buffer& b)$/;"	f	class:boost::asio::const_buffer	access:public	signature:(const mutable_buffer& b)
boost::asio::const_buffer::const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer(const void* data, std::size_t size)$/;"	f	class:boost::asio::const_buffer	access:public	signature:(const void* data, std::size_t size)
boost::asio::const_buffer::const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer(const void* data, std::size_t size,$/;"	f	class:boost::asio::const_buffer	access:public	signature:(const void* data, std::size_t size, boost::function<void()> debug_check)
boost::asio::const_buffer::data_	/usr/include/boost/asio/buffer.hpp	/^  const void* data_;$/;"	m	class:boost::asio::const_buffer	access:private
boost::asio::const_buffer::debug_check_	/usr/include/boost/asio/buffer.hpp	/^  boost::function<void()> debug_check_;$/;"	m	class:boost::asio::const_buffer	access:private
boost::asio::const_buffer::get_debug_check	/usr/include/boost/asio/buffer.hpp	/^  const boost::function<void()>& get_debug_check() const$/;"	f	class:boost::asio::const_buffer	access:public	signature:() const
boost::asio::const_buffer::size_	/usr/include/boost/asio/buffer.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::const_buffer	access:private
boost::asio::const_buffers_1	/usr/include/boost/asio/buffer.hpp	/^class const_buffers_1$/;"	c	namespace:boost::asio	inherits:const_buffer
boost::asio::const_buffers_1::begin	/usr/include/boost/asio/buffer.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:() const
boost::asio::const_buffers_1::const_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  const_buffers_1(const void* data, std::size_t size)$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:(const void* data, std::size_t size)
boost::asio::const_buffers_1::const_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  explicit const_buffers_1(const const_buffer& b)$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:(const const_buffer& b)
boost::asio::const_buffers_1::const_iterator	/usr/include/boost/asio/buffer.hpp	/^  typedef const const_buffer* const_iterator;$/;"	t	class:boost::asio::const_buffers_1	access:public
boost::asio::const_buffers_1::end	/usr/include/boost/asio/buffer.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:() const
boost::asio::const_buffers_1::value_type	/usr/include/boost/asio/buffer.hpp	/^  typedef const_buffer value_type;$/;"	t	class:boost::asio::const_buffers_1	access:public
boost::asio::datagram_socket_service	/usr/include/boost/asio/datagram_socket_service.hpp	/^class datagram_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::datagram_socket_service::assign	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
boost::asio::datagram_socket_service::async_connect	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, BOOST_ASIO_MOVE_ARG(ConnectHandler) handler)
boost::asio::datagram_socket_service::async_receive	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::datagram_socket_service::async_receive_from	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::datagram_socket_service::async_send	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_send(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::datagram_socket_service::async_send_to	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::datagram_socket_service::at_mark	/usr/include/boost/asio/datagram_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::datagram_socket_service::available	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::datagram_socket_service::bind	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::datagram_socket_service::cancel	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::datagram_socket_service::close	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::datagram_socket_service::connect	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::datagram_socket_service::construct	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::datagram_socket_service::datagram_socket_service	/usr/include/boost/asio/datagram_socket_service.hpp	/^  explicit datagram_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::datagram_socket_service::destroy	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::datagram_socket_service::endpoint_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::get_option	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
boost::asio::datagram_socket_service::id	/usr/include/boost/asio/datagram_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::implementation_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::implementation_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::io_control	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
boost::asio::datagram_socket_service::is_open	/usr/include/boost/asio/datagram_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::datagram_socket_service::local_endpoint	/usr/include/boost/asio/datagram_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::datagram_socket_service::move_assign	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, datagram_socket_service& other_service, implementation_type& other_impl)
boost::asio::datagram_socket_service::move_construct	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::datagram_socket_service::native	/usr/include/boost/asio/datagram_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::datagram_socket_service::native_handle	/usr/include/boost/asio/datagram_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::datagram_socket_service::native_handle_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::native_handle_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::native_non_blocking	/usr/include/boost/asio/datagram_socket_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::datagram_socket_service::native_non_blocking	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::datagram_socket_service::native_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::native_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::non_blocking	/usr/include/boost/asio/datagram_socket_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::datagram_socket_service::non_blocking	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::datagram_socket_service::open	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::datagram_socket_service::protocol_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::receive	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::datagram_socket_service::receive_from	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::datagram_socket_service::remote_endpoint	/usr/include/boost/asio/datagram_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::datagram_socket_service::send	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::datagram_socket_service::send_to	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t send_to(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::datagram_socket_service::service_impl_	/usr/include/boost/asio/datagram_socket_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::datagram_socket_service	access:private
boost::asio::datagram_socket_service::service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
boost::asio::datagram_socket_service::service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
boost::asio::datagram_socket_service::set_option	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::datagram_socket_service::shutdown	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
boost::asio::datagram_socket_service::shutdown_service	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::datagram_socket_service	access:private	signature:()
boost::asio::deadline_timer	/usr/include/boost/asio/deadline_timer.hpp	/^typedef basic_deadline_timer<boost::posix_time::ptime> deadline_timer;$/;"	t	namespace:boost::asio
boost::asio::deadline_timer_service	/usr/include/boost/asio/deadline_timer_service.hpp	/^class deadline_timer_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::deadline_timer_service::async_wait	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void async_wait(implementation_type& impl,$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, BOOST_ASIO_MOVE_ARG(WaitHandler) handler)
boost::asio::deadline_timer_service::cancel	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::deadline_timer_service::cancel_one	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t cancel_one(implementation_type& impl,$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::deadline_timer_service::construct	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl)
boost::asio::deadline_timer_service::deadline_timer_service	/usr/include/boost/asio/deadline_timer_service.hpp	/^  explicit deadline_timer_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::deadline_timer_service::destroy	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl)
boost::asio::deadline_timer_service::duration_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef typename traits_type::duration_type duration_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
boost::asio::deadline_timer_service::expires_at	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, const time_type& expiry_time, boost::system::error_code& ec)
boost::asio::deadline_timer_service::expires_at	/usr/include/boost/asio/deadline_timer_service.hpp	/^  time_type expires_at(const implementation_type& impl) const$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
boost::asio::deadline_timer_service::expires_from_now	/usr/include/boost/asio/deadline_timer_service.hpp	/^  duration_type expires_from_now(const implementation_type& impl) const$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
boost::asio::deadline_timer_service::expires_from_now	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, const duration_type& expiry_time, boost::system::error_code& ec)
boost::asio::deadline_timer_service::id	/usr/include/boost/asio/deadline_timer_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::deadline_timer_service	access:public
boost::asio::deadline_timer_service::implementation_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
boost::asio::deadline_timer_service::implementation_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
boost::asio::deadline_timer_service::service_impl_	/usr/include/boost/asio/deadline_timer_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::deadline_timer_service	access:private
boost::asio::deadline_timer_service::service_impl_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef detail::deadline_timer_service<traits_type> service_impl_type;$/;"	t	class:boost::asio::deadline_timer_service	access:private
boost::asio::deadline_timer_service::shutdown_service	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::deadline_timer_service	access:private	signature:()
boost::asio::deadline_timer_service::time_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef typename traits_type::time_type time_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
boost::asio::deadline_timer_service::traits_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef TimeTraits traits_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
boost::asio::deadline_timer_service::wait	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void wait(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail	/usr/include/boost/asio/basic_io_object.hpp	/^namespace detail$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/buffer.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/buffers_iterator.hpp	/^namespace detail$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/completion_condition.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/array.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/atomic_count.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/bind_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/call_stack.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/completion_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/dependent_type.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/handler_tracking.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/hash_map.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/posix_event.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/posix_mutex.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/posix_tss_ptr.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/task_io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/throw_error.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/win_event.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/win_mutex.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/win_static_mutex.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/win_tss_ptr.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/impl/winsock_init.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
boost::asio::detail	/usr/include/boost/asio/detail/io_control.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/noncopyable.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/null_event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/null_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/null_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/object_pool.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/op_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/operation.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactor_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/resolve_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/resolver_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/scoped_lock.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/select_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/select_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/service_registry.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/service_registry_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/shared_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/signal_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/signal_init.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/signal_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/signal_set_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/socket_holder.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/socket_types.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/static_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/strand_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/task_io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/task_io_service_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/thread_info_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/throw_error.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/timer_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/timer_queue_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/timer_scheduler_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/wait_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/wait_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/weak_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_thread_info.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/wince_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/winsock_init.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/impl/connect.hpp	/^namespace detail$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/impl/read.hpp	/^namespace detail$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/impl/read_at.hpp	/^namespace detail$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/impl/read_until.hpp	/^namespace detail$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/impl/write.hpp	/^namespace detail$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/impl/write_at.hpp	/^namespace detail$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/io_service.hpp	/^namespace detail { typedef win_iocp_io_service io_service_impl; }$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/is_read_buffered.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/is_write_buffered.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/read_until.hpp	/^namespace detail$/;"	n	namespace:boost::asio
boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^class task_io_service_operation BOOST_ASIO_INHERIT_TRACKED_HANDLER$/;"	c	namespace:boost::asio::detail
boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER::complete	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  void complete(task_io_service& owner,$/;"	f	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:public	signature:(task_io_service& owner, const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER::destroy	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  void destroy()$/;"	f	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:public	signature:()
boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER::func_	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  func_type func_;$/;"	m	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:private
boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER::func_type	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  typedef void (*func_type)(task_io_service*,$/;"	t	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:protected
boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER::next_	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  task_io_service_operation* next_;$/;"	m	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:private
boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER::task_io_service_operation	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  task_io_service_operation(func_type func)$/;"	f	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:protected	signature:(func_type func)
boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER::task_result_	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  unsigned int task_result_; \/\/ Passed into bytes transferred.$/;"	m	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:protected
boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER::~task_io_service_operation	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  ~task_io_service_operation()$/;"	f	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:protected	signature:()
boost::asio::detail::adapt_completion_condition_result	/usr/include/boost/asio/completion_condition.hpp	/^inline std::size_t adapt_completion_condition_result(bool result)$/;"	f	namespace:boost::asio::detail	signature:(bool result)
boost::asio::detail::adapt_completion_condition_result	/usr/include/boost/asio/completion_condition.hpp	/^inline std::size_t adapt_completion_condition_result(std::size_t result)$/;"	f	namespace:boost::asio::detail	signature:(std::size_t result)
boost::asio::detail::addrinfo_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct addrinfo_emulation$/;"	s	namespace:boost::asio::detail
boost::asio::detail::addrinfo_emulation::ai_addr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr* ai_addr;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_addrlen	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  size_t ai_addrlen;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_canonname	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  char* ai_canonname;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_family	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_family;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_flags	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_flags;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_next	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  addrinfo_emulation* ai_next;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_protocol	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_protocol;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_socktype	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_socktype;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef addrinfo addrinfo_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::addrinfo_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef addrinfo_emulation addrinfo_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::always_fail_option	/usr/include/boost/asio/detail/socket_types.hpp	/^const int always_fail_option = 2;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::apc_function	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^void __stdcall apc_function(ULONG) {}$/;"	f	namespace:boost::asio::detail	signature:(ULONG)
boost::asio::detail::apc_function	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^void __stdcall apc_function(ULONG_PTR) {}$/;"	f	namespace:boost::asio::detail	signature:(ULONG_PTR)
boost::asio::detail::apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^BOOST_ASIO_DECL void __stdcall apc_function(ULONG data);$/;"	p	namespace:boost::asio::detail	signature:(ULONG data)
boost::asio::detail::apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^BOOST_ASIO_DECL void __stdcall apc_function(ULONG_PTR data);$/;"	p	namespace:boost::asio::detail	signature:(ULONG_PTR data)
boost::asio::detail::argbyv	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^template <typename T> char argbyv(T);$/;"	p	namespace:boost::asio::detail	signature:(T)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder1<Handler, Arg1>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder2<Handler, Arg1, Arg2>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, rewrapped_handler<Handler, Context>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, wrapped_handler<Dispatcher, Handler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/connect.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, connect_op<Protocol, SocketService, Iterator, ConnectCondition, ComposedConnectHandler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/read.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_op<AsyncReadStream, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/read.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_streambuf_op<AsyncReadStream, Allocator, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_until_delim_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_until_delim_string_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_until_expr_op<AsyncReadStream, Allocator, RegEx, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, read_until_match_op<AsyncReadStream, Allocator, MatchCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/write.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, write_op<AsyncWriteStream, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/write.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, write_streambuf_handler<Allocator, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder1<Handler, Arg1>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder2<Handler, Arg1, Arg2>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, rewrapped_handler<Handler, Context>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, wrapped_handler<Dispatcher, Handler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/connect.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, connect_op<Protocol, SocketService, Iterator, ConnectCondition, ComposedConnectHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/read.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_op<AsyncReadStream, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/read.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_streambuf_op<AsyncReadStream, Allocator, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_until_delim_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_until_delim_string_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_until_expr_op<AsyncReadStream, Allocator, RegEx, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, read_until_match_op<AsyncReadStream, Allocator, MatchCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/write.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, write_op<AsyncWriteStream, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/write.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, write_streambuf_handler<Allocator, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, binder1<Handler, Arg1>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, binder2<Handler, Arg1, Arg2>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder1<Handler, Arg1>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder2<Handler, Arg1, Arg2>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, rewrapped_handler<Handler, Context>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, wrapped_handler<Dispatcher, Handler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, rewrapped_handler<Handler, Context>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, wrapped_handler<Dispatcher, Handler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/connect.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, connect_op<Protocol, SocketService, Iterator, ConnectCondition, ComposedConnectHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/connect.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, connect_op<Protocol, SocketService, Iterator, ConnectCondition, ComposedConnectHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_op<AsyncReadStream, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_streambuf_op<AsyncReadStream, Allocator, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_op<AsyncReadStream, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_streambuf_op<AsyncReadStream, Allocator, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read_at.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator, CompletionCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_until_delim_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_until_delim_string_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_until_expr_op<AsyncReadStream, Allocator, RegEx, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, read_until_match_op<AsyncReadStream, Allocator, MatchCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_until_delim_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_until_delim_string_op<AsyncReadStream, Allocator, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_until_expr_op<AsyncReadStream, Allocator, RegEx, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/read_until.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, read_until_match_op<AsyncReadStream, Allocator, MatchCondition, ReadHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/write.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, write_op<AsyncWriteStream, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/write.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, write_streambuf_handler<Allocator, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/write.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, write_op<AsyncWriteStream, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/write.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, write_streambuf_handler<Allocator, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::detail	signature:(Function& function, write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence, CompletionCondition, WriteHandler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/impl/write_at.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
boost::asio::detail::asio_signal_handler	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void asio_signal_handler(int signal_number)$/;"	f	namespace:boost::asio::detail	signature:(int signal_number)
boost::asio::detail::asio_signal_handler	/usr/include/boost/asio/detail/signal_set_service.hpp	/^extern "C" BOOST_ASIO_DECL void asio_signal_handler(int signal_number);$/;"	p	namespace:boost::asio::detail	signature:(int signal_number)
boost::asio::detail::atomic_count	/usr/include/boost/asio/detail/atomic_count.hpp	/^typedef long atomic_count;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::base_from_completion_cond	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^class base_from_completion_cond$/;"	c	namespace:boost::asio::detail
boost::asio::detail::base_from_completion_cond	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^class base_from_completion_cond<transfer_all_t>$/;"	c	namespace:boost::asio::detail
boost::asio::detail::base_from_completion_cond::base_from_completion_cond	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^  explicit base_from_completion_cond(CompletionCondition completion_condition)$/;"	f	class:boost::asio::detail::base_from_completion_cond	access:protected	signature:(CompletionCondition completion_condition)
boost::asio::detail::base_from_completion_cond::base_from_completion_cond	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^  explicit base_from_completion_cond(transfer_all_t)$/;"	f	class:boost::asio::detail::base_from_completion_cond	access:protected	signature:(transfer_all_t)
boost::asio::detail::base_from_completion_cond::check_for_completion	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^  static std::size_t check_for_completion($/;"	f	class:boost::asio::detail::base_from_completion_cond	access:protected	signature:( const boost::system::error_code& ec, std::size_t total_transferred)
boost::asio::detail::base_from_completion_cond::check_for_completion	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^  std::size_t check_for_completion($/;"	f	class:boost::asio::detail::base_from_completion_cond	access:protected	signature:( const boost::system::error_code& ec, std::size_t total_transferred)
boost::asio::detail::base_from_completion_cond::completion_condition_	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^  CompletionCondition completion_condition_;$/;"	m	class:boost::asio::detail::base_from_completion_cond	access:private
boost::asio::detail::base_from_connect_condition	/usr/include/boost/asio/impl/connect.hpp	/^  class base_from_connect_condition$/;"	c	namespace:boost::asio::detail
boost::asio::detail::base_from_connect_condition	/usr/include/boost/asio/impl/connect.hpp	/^  class base_from_connect_condition<default_connect_condition>$/;"	c	namespace:boost::asio::detail
boost::asio::detail::base_from_connect_condition::base_from_connect_condition	/usr/include/boost/asio/impl/connect.hpp	/^    explicit base_from_connect_condition($/;"	f	class:boost::asio::detail::base_from_connect_condition	access:protected	signature:( const ConnectCondition& connect_condition)
boost::asio::detail::base_from_connect_condition::base_from_connect_condition	/usr/include/boost/asio/impl/connect.hpp	/^    explicit base_from_connect_condition(const default_connect_condition&)$/;"	f	class:boost::asio::detail::base_from_connect_condition	access:protected	signature:(const default_connect_condition&)
boost::asio::detail::base_from_connect_condition::check_condition	/usr/include/boost/asio/impl/connect.hpp	/^    void check_condition(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::base_from_connect_condition	access:protected	signature:(const boost::system::error_code& ec, Iterator& iter, Iterator& end)
boost::asio::detail::base_from_connect_condition::check_condition	/usr/include/boost/asio/impl/connect.hpp	/^    void check_condition(const boost::system::error_code&, Iterator&, Iterator&)$/;"	f	class:boost::asio::detail::base_from_connect_condition	access:protected	signature:(const boost::system::error_code&, Iterator&, Iterator&)
boost::asio::detail::base_from_connect_condition::connect_condition_	/usr/include/boost/asio/impl/connect.hpp	/^    ConnectCondition connect_condition_;$/;"	m	class:boost::asio::detail::base_from_connect_condition	access:private
boost::asio::detail::bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder1<Handler, Arg1> bind_handler(Handler handler,$/;"	f	namespace:boost::asio::detail	signature:(Handler handler, const Arg1& arg1)
boost::asio::detail::bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder2<Handler, Arg1, Arg2> bind_handler(Handler handler,$/;"	f	namespace:boost::asio::detail	signature:(Handler handler, const Arg1& arg1, const Arg2& arg2)
boost::asio::detail::bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder3<Handler, Arg1, Arg2, Arg3> bind_handler(Handler handler,$/;"	f	namespace:boost::asio::detail	signature:(Handler handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
boost::asio::detail::bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder4<Handler, Arg1, Arg2, Arg3, Arg4> bind_handler($/;"	f	namespace:boost::asio::detail	signature:( Handler handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
boost::asio::detail::bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5> bind_handler($/;"	f	namespace:boost::asio::detail	signature:( Handler handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
boost::asio::detail::binder1	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder1$/;"	c	namespace:boost::asio::detail
boost::asio::detail::binder1::arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder1	access:public
boost::asio::detail::binder1::binder1	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder1(Handler& handler, const Arg1& arg1)$/;"	f	class:boost::asio::detail::binder1	access:public	signature:(Handler& handler, const Arg1& arg1)
boost::asio::detail::binder1::binder1	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder1(const Handler& handler, const Arg1& arg1)$/;"	f	class:boost::asio::detail::binder1	access:public	signature:(const Handler& handler, const Arg1& arg1)
boost::asio::detail::binder1::handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder1	access:public
boost::asio::detail::binder1::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder1	access:public	signature:() const
boost::asio::detail::binder1::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder1	access:public	signature:()
boost::asio::detail::binder2	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder2$/;"	c	namespace:boost::asio::detail
boost::asio::detail::binder2::arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder2	access:public
boost::asio::detail::binder2::arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder2	access:public
boost::asio::detail::binder2::binder2	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder2(Handler& handler, const Arg1& arg1, const Arg2& arg2)$/;"	f	class:boost::asio::detail::binder2	access:public	signature:(Handler& handler, const Arg1& arg1, const Arg2& arg2)
boost::asio::detail::binder2::binder2	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder2(const Handler& handler, const Arg1& arg1, const Arg2& arg2)$/;"	f	class:boost::asio::detail::binder2	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2)
boost::asio::detail::binder2::handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder2	access:public
boost::asio::detail::binder2::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder2	access:public	signature:() const
boost::asio::detail::binder2::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder2	access:public	signature:()
boost::asio::detail::binder3	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder3$/;"	c	namespace:boost::asio::detail
boost::asio::detail::binder3::arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder3	access:public
boost::asio::detail::binder3::arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder3	access:public
boost::asio::detail::binder3::arg3_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:boost::asio::detail::binder3	access:public
boost::asio::detail::binder3::binder3	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder3(Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder3	access:public	signature:(Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
boost::asio::detail::binder3::binder3	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder3(const Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder3	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
boost::asio::detail::binder3::handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder3	access:public
boost::asio::detail::binder3::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder3	access:public	signature:() const
boost::asio::detail::binder3::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder3	access:public	signature:()
boost::asio::detail::binder4	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder4$/;"	c	namespace:boost::asio::detail
boost::asio::detail::binder4::arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder4	access:public
boost::asio::detail::binder4::arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder4	access:public
boost::asio::detail::binder4::arg3_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:boost::asio::detail::binder4	access:public
boost::asio::detail::binder4::arg4_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg4 arg4_;$/;"	m	class:boost::asio::detail::binder4	access:public
boost::asio::detail::binder4::binder4	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder4(Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder4	access:public	signature:(Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
boost::asio::detail::binder4::binder4	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder4(const Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder4	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
boost::asio::detail::binder4::handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder4	access:public
boost::asio::detail::binder4::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder4	access:public	signature:() const
boost::asio::detail::binder4::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder4	access:public	signature:()
boost::asio::detail::binder5	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder5$/;"	c	namespace:boost::asio::detail
boost::asio::detail::binder5::arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder5	access:public
boost::asio::detail::binder5::arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder5	access:public
boost::asio::detail::binder5::arg3_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:boost::asio::detail::binder5	access:public
boost::asio::detail::binder5::arg4_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg4 arg4_;$/;"	m	class:boost::asio::detail::binder5	access:public
boost::asio::detail::binder5::arg5_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg5 arg5_;$/;"	m	class:boost::asio::detail::binder5	access:public
boost::asio::detail::binder5::binder5	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder5(Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder5	access:public	signature:(Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
boost::asio::detail::binder5::binder5	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder5(const Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder5	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
boost::asio::detail::binder5::handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder5	access:public
boost::asio::detail::binder5::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder5	access:public	signature:() const
boost::asio::detail::binder5::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder5	access:public	signature:()
boost::asio::detail::boost_asio_detail_posix_thread_function	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^void* boost_asio_detail_posix_thread_function(void* arg)$/;"	f	namespace:boost::asio::detail	signature:(void* arg)
boost::asio::detail::boost_asio_detail_posix_thread_function	/usr/include/boost/asio/detail/posix_thread.hpp	/^  BOOST_ASIO_DECL void* boost_asio_detail_posix_thread_function(void* arg);$/;"	p	signature:(void* arg)
boost::asio::detail::buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^const void* buffer_cast_helper(const const_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const const_buffer&)
boost::asio::detail::buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^inline const void* buffer_cast_helper(const const_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const const_buffer& b)
boost::asio::detail::buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^inline void* buffer_cast_helper(const mutable_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const mutable_buffer& b)
boost::asio::detail::buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^void* buffer_cast_helper(const mutable_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const mutable_buffer&)
boost::asio::detail::buffer_debug_check	/usr/include/boost/asio/buffer.hpp	/^class buffer_debug_check$/;"	c	namespace:boost::asio::detail
boost::asio::detail::buffer_debug_check::buffer_debug_check	/usr/include/boost/asio/buffer.hpp	/^  buffer_debug_check(Iterator iter)$/;"	f	class:boost::asio::detail::buffer_debug_check	access:public	signature:(Iterator iter)
boost::asio::detail::buffer_debug_check::iter_	/usr/include/boost/asio/buffer.hpp	/^  Iterator iter_;$/;"	m	class:boost::asio::detail::buffer_debug_check	access:private
boost::asio::detail::buffer_debug_check::operator ()	/usr/include/boost/asio/buffer.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::buffer_debug_check	access:public	signature:()
boost::asio::detail::buffer_debug_check::~buffer_debug_check	/usr/include/boost/asio/buffer.hpp	/^  ~buffer_debug_check()$/;"	f	class:boost::asio::detail::buffer_debug_check	access:public	signature:()
boost::asio::detail::buffer_resize_guard	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^class buffer_resize_guard$/;"	c	namespace:boost::asio::detail
boost::asio::detail::buffer_resize_guard::buffer_	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  Buffer& buffer_;$/;"	m	class:boost::asio::detail::buffer_resize_guard	access:private
boost::asio::detail::buffer_resize_guard::buffer_resize_guard	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  buffer_resize_guard(Buffer& buffer)$/;"	f	class:boost::asio::detail::buffer_resize_guard	access:public	signature:(Buffer& buffer)
boost::asio::detail::buffer_resize_guard::commit	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  void commit()$/;"	f	class:boost::asio::detail::buffer_resize_guard	access:public	signature:()
boost::asio::detail::buffer_resize_guard::old_size_	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  size_t old_size_;$/;"	m	class:boost::asio::detail::buffer_resize_guard	access:private
boost::asio::detail::buffer_resize_guard::~buffer_resize_guard	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  ~buffer_resize_guard()$/;"	f	class:boost::asio::detail::buffer_resize_guard	access:public	signature:()
boost::asio::detail::buffer_sequence_adapter	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^class buffer_sequence_adapter$/;"	c	namespace:boost::asio::detail	inherits:buffer_sequence_adapter_base
boost::asio::detail::buffer_sequence_adapter::all_empty	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  bool all_empty() const$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:() const
boost::asio::detail::buffer_sequence_adapter::all_empty	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  static bool all_empty(const Buffers& buffer_sequence)$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:(const Buffers& buffer_sequence)
boost::asio::detail::buffer_sequence_adapter::buffer_sequence_adapter	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  explicit buffer_sequence_adapter(const Buffers& buffer_sequence)$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:(const Buffers& buffer_sequence)
boost::asio::detail::buffer_sequence_adapter::buffers	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  native_buffer_type* buffers()$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:()
boost::asio::detail::buffer_sequence_adapter::count	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  std::size_t count() const$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:() const
boost::asio::detail::buffer_sequence_adapter::first	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  static Buffer first(const Buffers& buffer_sequence)$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:(const Buffers& buffer_sequence)
boost::asio::detail::buffer_sequence_adapter::max_buffers	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  enum { max_buffers = 64 < max_iov_len ? 64 : max_iov_len };$/;"	e	enum:boost::asio::detail::buffer_sequence_adapter::__anon8
boost::asio::detail::buffer_sequence_adapter::validate	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  static void validate(const Buffers& buffer_sequence)$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:(const Buffers& buffer_sequence)
boost::asio::detail::buffer_sequence_adapter_base	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^class buffer_sequence_adapter_base$/;"	c	namespace:boost::asio::detail
boost::asio::detail::buffer_sequence_adapter_base::init_native_buffer	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  static void init_native_buffer(WSABUF& buf,$/;"	f	class:boost::asio::detail::buffer_sequence_adapter_base	access:protected	signature:(WSABUF& buf, const boost::asio::const_buffer& buffer)
boost::asio::detail::buffer_sequence_adapter_base::init_native_buffer	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  static void init_native_buffer(WSABUF& buf,$/;"	f	class:boost::asio::detail::buffer_sequence_adapter_base	access:protected	signature:(WSABUF& buf, const boost::asio::mutable_buffer& buffer)
boost::asio::detail::buffer_sequence_adapter_base::native_buffer_type	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  typedef WSABUF native_buffer_type;$/;"	t	class:boost::asio::detail::buffer_sequence_adapter_base	access:protected
boost::asio::detail::buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size_helper(const const_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const const_buffer& b)
boost::asio::detail::buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size_helper(const mutable_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const mutable_buffer& b)
boost::asio::detail::buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_size_helper(const const_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const const_buffer&)
boost::asio::detail::buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_size_helper(const mutable_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const mutable_buffer&)
boost::asio::detail::buffer_types	/usr/include/boost/asio/buffer.hpp	/^struct buffer_types$/;"	s	namespace:boost::asio::detail	inherits:buffer_types_base
boost::asio::detail::buffer_types_base	/usr/include/boost/asio/buffer.hpp	/^struct buffer_types_base<false>$/;"	s	namespace:boost::asio::detail
boost::asio::detail::buffer_types_base	/usr/include/boost/asio/buffer.hpp	/^struct buffer_types_base<true>$/;"	s	namespace:boost::asio::detail
boost::asio::detail::buffer_types_base::buffer_type	/usr/include/boost/asio/buffer.hpp	/^  typedef const_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
boost::asio::detail::buffer_types_base::buffer_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
boost::asio::detail::buffer_types_base::container_type	/usr/include/boost/asio/buffer.hpp	/^  typedef const_buffers_1 container_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
boost::asio::detail::buffer_types_base::container_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffers_1 container_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
boost::asio::detail::buffered_stream_storage	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^class buffered_stream_storage$/;"	c	namespace:boost::asio::detail
boost::asio::detail::buffered_stream_storage::begin_offset_	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type begin_offset_;$/;"	m	class:boost::asio::detail::buffered_stream_storage	access:private
boost::asio::detail::buffered_stream_storage::buffer_	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  std::vector<byte_type> buffer_;$/;"	m	class:boost::asio::detail::buffered_stream_storage	access:private
boost::asio::detail::buffered_stream_storage::buffered_stream_storage	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  explicit buffered_stream_storage(std::size_t buffer_capacity)$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:(std::size_t buffer_capacity)
boost::asio::detail::buffered_stream_storage::byte_type	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  typedef unsigned char byte_type;$/;"	t	class:boost::asio::detail::buffered_stream_storage	access:public
boost::asio::detail::buffered_stream_storage::capacity	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type capacity() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
boost::asio::detail::buffered_stream_storage::clear	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  void clear()$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:()
boost::asio::detail::buffered_stream_storage::consume	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  void consume(size_type count)$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:(size_type count)
boost::asio::detail::buffered_stream_storage::data	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  const_buffer data() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
boost::asio::detail::buffered_stream_storage::data	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  mutable_buffer data()$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:()
boost::asio::detail::buffered_stream_storage::empty	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
boost::asio::detail::buffered_stream_storage::end_offset_	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type end_offset_;$/;"	m	class:boost::asio::detail::buffered_stream_storage	access:private
boost::asio::detail::buffered_stream_storage::resize	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  void resize(size_type length)$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:(size_type length)
boost::asio::detail::buffered_stream_storage::size	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type size() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
boost::asio::detail::buffered_stream_storage::size_type	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  typedef std::size_t size_type;$/;"	t	class:boost::asio::detail::buffered_stream_storage	access:public
boost::asio::detail::buffers_iterator_types	/usr/include/boost/asio/buffers_iterator.hpp	/^  struct buffers_iterator_types$/;"	s	namespace:boost::asio::detail
boost::asio::detail::buffers_iterator_types::buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef typename helper::buffer_type buffer_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types	access:public
boost::asio::detail::buffers_iterator_types::byte_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef typename helper::template byte_type<ByteType>::type byte_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types	access:public
boost::asio::detail::buffers_iterator_types::helper	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef buffers_iterator_types_helper<is_mutable> helper;$/;"	t	struct:boost::asio::detail::buffers_iterator_types	access:public
boost::asio::detail::buffers_iterator_types::is_mutable	/usr/include/boost/asio/buffers_iterator.hpp	/^      is_mutable = boost::is_convertible<$/;"	e	enum:boost::asio::detail::buffers_iterator_types::__anon6
boost::asio::detail::buffers_iterator_types_helper	/usr/include/boost/asio/buffers_iterator.hpp	/^  struct buffers_iterator_types_helper<false>$/;"	s	namespace:boost::asio::detail
boost::asio::detail::buffers_iterator_types_helper	/usr/include/boost/asio/buffers_iterator.hpp	/^  struct buffers_iterator_types_helper<true>$/;"	s	namespace:boost::asio::detail
boost::asio::detail::buffers_iterator_types_helper::buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef const_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper	access:public
boost::asio::detail::buffers_iterator_types_helper::buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef mutable_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper	access:public
boost::asio::detail::buffers_iterator_types_helper::byte_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    struct byte_type$/;"	s	struct:boost::asio::detail::buffers_iterator_types_helper	access:public
boost::asio::detail::buffers_iterator_types_helper::byte_type::type	/usr/include/boost/asio/buffers_iterator.hpp	/^      typedef ByteType type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper::byte_type	access:public
boost::asio::detail::buffers_iterator_types_helper::byte_type::type	/usr/include/boost/asio/buffers_iterator.hpp	/^      typedef typename boost::add_const<ByteType>::type type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper::byte_type	access:public
boost::asio::detail::calculate_hash_value	/usr/include/boost/asio/detail/hash_map.hpp	/^inline std::size_t calculate_hash_value(SOCKET s)$/;"	f	namespace:boost::asio::detail	signature:(SOCKET s)
boost::asio::detail::calculate_hash_value	/usr/include/boost/asio/detail/hash_map.hpp	/^inline std::size_t calculate_hash_value(int i)$/;"	f	namespace:boost::asio::detail	signature:(int i)
boost::asio::detail::calculate_hash_value	/usr/include/boost/asio/detail/hash_map.hpp	/^inline std::size_t calculate_hash_value(void* p)$/;"	f	namespace:boost::asio::detail	signature:(void* p)
boost::asio::detail::call_stack	/usr/include/boost/asio/detail/call_stack.hpp	/^class call_stack$/;"	c	namespace:boost::asio::detail
boost::asio::detail::call_stack::contains	/usr/include/boost/asio/detail/call_stack.hpp	/^  static Value* contains(Key* k)$/;"	f	class:boost::asio::detail::call_stack	access:public	signature:(Key* k)
boost::asio::detail::call_stack::context	/usr/include/boost/asio/detail/call_stack.hpp	/^  class context$/;"	c	class:boost::asio::detail::call_stack	inherits:noncopyable	access:public
boost::asio::detail::call_stack::context::context	/usr/include/boost/asio/detail/call_stack.hpp	/^    context(Key* k, Value& v)$/;"	f	class:boost::asio::detail::call_stack::context	access:public	signature:(Key* k, Value& v)
boost::asio::detail::call_stack::context::context	/usr/include/boost/asio/detail/call_stack.hpp	/^    explicit context(Key* k)$/;"	f	class:boost::asio::detail::call_stack::context	access:public	signature:(Key* k)
boost::asio::detail::call_stack::context::key_	/usr/include/boost/asio/detail/call_stack.hpp	/^    Key* key_;$/;"	m	class:boost::asio::detail::call_stack::context	access:private
boost::asio::detail::call_stack::context::next_	/usr/include/boost/asio/detail/call_stack.hpp	/^    context* next_;$/;"	m	class:boost::asio::detail::call_stack::context	access:private
boost::asio::detail::call_stack::context::next_by_key	/usr/include/boost/asio/detail/call_stack.hpp	/^    Value* next_by_key() const$/;"	f	class:boost::asio::detail::call_stack::context	access:public	signature:() const
boost::asio::detail::call_stack::context::value_	/usr/include/boost/asio/detail/call_stack.hpp	/^    Value* value_;$/;"	m	class:boost::asio::detail::call_stack::context	access:private
boost::asio::detail::call_stack::context::~context	/usr/include/boost/asio/detail/call_stack.hpp	/^    ~context()$/;"	f	class:boost::asio::detail::call_stack::context	access:public	signature:()
boost::asio::detail::call_stack::top	/usr/include/boost/asio/detail/call_stack.hpp	/^  static Value* top()$/;"	f	class:boost::asio::detail::call_stack	access:public	signature:()
boost::asio::detail::call_stack::top_	/usr/include/boost/asio/detail/call_stack.hpp	/^  static tss_ptr<context> top_;$/;"	m	class:boost::asio::detail::call_stack	access:private
boost::asio::detail::call_stack::top_	/usr/include/boost/asio/detail/call_stack.hpp	/^call_stack<Key, Value>::top_;$/;"	m	class:boost::asio::detail::call_stack
boost::asio::detail::chrono_time_traits	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^struct chrono_time_traits$/;"	s	namespace:boost::asio::detail
boost::asio::detail::chrono_time_traits::add	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  static time_type add(const time_type& t, const duration_type& d)$/;"	f	struct:boost::asio::detail::chrono_time_traits	access:public	signature:(const time_type& t, const duration_type& d)
boost::asio::detail::chrono_time_traits::clock_type	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  typedef Clock clock_type;$/;"	t	struct:boost::asio::detail::chrono_time_traits	access:public
boost::asio::detail::chrono_time_traits::duration_type	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  typedef typename clock_type::duration duration_type;$/;"	t	struct:boost::asio::detail::chrono_time_traits	access:public
boost::asio::detail::chrono_time_traits::less_than	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  static bool less_than(const time_type& t1, const time_type& t2)$/;"	f	struct:boost::asio::detail::chrono_time_traits	access:public	signature:(const time_type& t1, const time_type& t2)
boost::asio::detail::chrono_time_traits::now	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  static time_type now()$/;"	f	struct:boost::asio::detail::chrono_time_traits	access:public	signature:()
boost::asio::detail::chrono_time_traits::period_type	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  typedef typename duration_type::period period_type;$/;"	t	struct:boost::asio::detail::chrono_time_traits	access:public
boost::asio::detail::chrono_time_traits::posix_time_duration	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  class posix_time_duration$/;"	c	struct:boost::asio::detail::chrono_time_traits	access:public
boost::asio::detail::chrono_time_traits::posix_time_duration::d_	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    duration_type d_;$/;"	m	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:private
boost::asio::detail::chrono_time_traits::posix_time_duration::duration_cast	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    boost::int64_t duration_cast() const$/;"	f	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:private	signature:() const
boost::asio::detail::chrono_time_traits::posix_time_duration::posix_time_duration	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    explicit posix_time_duration(const duration_type& d)$/;"	f	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:public	signature:(const duration_type& d)
boost::asio::detail::chrono_time_traits::posix_time_duration::ticks	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    boost::int64_t ticks() const$/;"	f	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:public	signature:() const
boost::asio::detail::chrono_time_traits::posix_time_duration::total_microseconds	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    boost::int64_t total_microseconds() const$/;"	f	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:public	signature:() const
boost::asio::detail::chrono_time_traits::posix_time_duration::total_milliseconds	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    boost::int64_t total_milliseconds() const$/;"	f	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:public	signature:() const
boost::asio::detail::chrono_time_traits::posix_time_duration::total_seconds	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    boost::int64_t total_seconds() const$/;"	f	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:public	signature:() const
boost::asio::detail::chrono_time_traits::subtract	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  static duration_type subtract(const time_type& t1, const time_type& t2)$/;"	f	struct:boost::asio::detail::chrono_time_traits	access:public	signature:(const time_type& t1, const time_type& t2)
boost::asio::detail::chrono_time_traits::time_type	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  typedef typename clock_type::time_point time_type;$/;"	t	struct:boost::asio::detail::chrono_time_traits	access:public
boost::asio::detail::chrono_time_traits::to_posix_duration	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  static posix_time_duration to_posix_duration(const duration_type& d)$/;"	f	struct:boost::asio::detail::chrono_time_traits	access:public	signature:(const duration_type& d)
boost::asio::detail::clvref	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^template <typename T> const T& clvref(T);$/;"	p	namespace:boost::asio::detail	signature:(T)
boost::asio::detail::completion_handler	/usr/include/boost/asio/detail/completion_handler.hpp	/^class completion_handler : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::completion_handler::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/completion_handler.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(completion_handler);$/;"	p	class:boost::asio::detail::completion_handler	access:public	signature:(completion_handler)
boost::asio::detail::completion_handler::completion_handler	/usr/include/boost/asio/detail/completion_handler.hpp	/^  completion_handler(Handler& h)$/;"	f	class:boost::asio::detail::completion_handler	access:public	signature:(Handler& h)
boost::asio::detail::completion_handler::do_complete	/usr/include/boost/asio/detail/completion_handler.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::completion_handler	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::completion_handler::handler_	/usr/include/boost/asio/detail/completion_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::completion_handler	access:private
boost::asio::detail::connect_op	/usr/include/boost/asio/impl/connect.hpp	/^  class connect_op : base_from_connect_condition<ConnectCondition>$/;"	c	namespace:boost::asio::detail	inherits:base_from_connect_condition
boost::asio::detail::connect_op::connect_op	/usr/include/boost/asio/impl/connect.hpp	/^    connect_op(basic_socket<Protocol, SocketService>& sock,$/;"	f	class:boost::asio::detail::connect_op	access:public	signature:(basic_socket<Protocol, SocketService>& sock, const Iterator& begin, const Iterator& end, const ConnectCondition& connect_condition, ComposedConnectHandler& handler)
boost::asio::detail::connect_op::connect_op	/usr/include/boost/asio/impl/connect.hpp	/^    connect_op(connect_op&& other)$/;"	f	class:boost::asio::detail::connect_op	access:public	signature:(connect_op&& other)
boost::asio::detail::connect_op::connect_op	/usr/include/boost/asio/impl/connect.hpp	/^    connect_op(const connect_op& other)$/;"	f	class:boost::asio::detail::connect_op	access:public	signature:(const connect_op& other)
boost::asio::detail::connect_op::end_	/usr/include/boost/asio/impl/connect.hpp	/^    Iterator end_;$/;"	m	class:boost::asio::detail::connect_op	access:public
boost::asio::detail::connect_op::handler_	/usr/include/boost/asio/impl/connect.hpp	/^    ComposedConnectHandler handler_;$/;"	m	class:boost::asio::detail::connect_op	access:public
boost::asio::detail::connect_op::iter_	/usr/include/boost/asio/impl/connect.hpp	/^    Iterator iter_;$/;"	m	class:boost::asio::detail::connect_op	access:public
boost::asio::detail::connect_op::operator ()	/usr/include/boost/asio/impl/connect.hpp	/^    void operator()(boost::system::error_code ec, int start = 0)$/;"	f	class:boost::asio::detail::connect_op	access:public	signature:(boost::system::error_code ec, int start = 0)
boost::asio::detail::connect_op::socket_	/usr/include/boost/asio/impl/connect.hpp	/^    basic_socket<Protocol, SocketService>& socket_;$/;"	m	class:boost::asio::detail::connect_op	access:public
boost::asio::detail::consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^class consuming_buffers$/;"	c	namespace:boost::asio::detail
boost::asio::detail::consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^class consuming_buffers<Buffer, boost::asio::null_buffers>$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::null_buffers
boost::asio::detail::consuming_buffers::at_end_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  bool at_end_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
boost::asio::detail::consuming_buffers::begin	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:() const
boost::asio::detail::consuming_buffers::begin_remainder_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  typename Buffers::const_iterator begin_remainder_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
boost::asio::detail::consuming_buffers::buffers_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffers buffers_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
boost::asio::detail::consuming_buffers::const_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^    const_iterator;$/;"	t	class:boost::asio::detail::consuming_buffers	access:public
boost::asio::detail::consuming_buffers::consume	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void consume(std::size_t size)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t size)
boost::asio::detail::consuming_buffers::consume	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void consume(std::size_t)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t)
boost::asio::detail::consuming_buffers::consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers(const Buffers& buffers)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const Buffers& buffers)
boost::asio::detail::consuming_buffers::consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers(const boost::asio::null_buffers&)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const boost::asio::null_buffers&)
boost::asio::detail::consuming_buffers::consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers(const consuming_buffers& other)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const consuming_buffers& other)
boost::asio::detail::consuming_buffers::end	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:() const
boost::asio::detail::consuming_buffers::first_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer first_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
boost::asio::detail::consuming_buffers::max_size_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  std::size_t max_size_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
boost::asio::detail::consuming_buffers::operator =	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers& operator=(const consuming_buffers& other)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const consuming_buffers& other)
boost::asio::detail::consuming_buffers::prepare	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void prepare(std::size_t max_size)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t max_size)
boost::asio::detail::consuming_buffers::prepare	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void prepare(std::size_t)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t)
boost::asio::detail::consuming_buffers::value_type	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  typedef Buffer value_type;$/;"	t	class:boost::asio::detail::consuming_buffers	access:public
boost::asio::detail::consuming_buffers_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^class consuming_buffers_iterator$/;"	c	namespace:boost::asio::detail	inherits:boost::iterator
boost::asio::detail::consuming_buffers_iterator::at_end_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  bool at_end_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
boost::asio::detail::consuming_buffers_iterator::begin_remainder_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer_Iterator begin_remainder_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
boost::asio::detail::consuming_buffers_iterator::consuming_buffers_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers_iterator()$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:()
boost::asio::detail::consuming_buffers_iterator::consuming_buffers_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers_iterator(bool at_end, const Buffer& first,$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:(bool at_end, const Buffer& first, Buffer_Iterator begin_remainder, Buffer_Iterator end_remainder, std::size_t max_size)
boost::asio::detail::consuming_buffers_iterator::dereference	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const Buffer& dereference() const$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:private	signature:() const
boost::asio::detail::consuming_buffers_iterator::end_remainder_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer_Iterator end_remainder_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
boost::asio::detail::consuming_buffers_iterator::equal	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  bool equal(const consuming_buffers_iterator& other) const$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:private	signature:(const consuming_buffers_iterator& other) const
boost::asio::detail::consuming_buffers_iterator::first_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer first_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
boost::asio::detail::consuming_buffers_iterator::increment	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void increment()$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:private	signature:()
boost::asio::detail::consuming_buffers_iterator::max_size_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  std::size_t max_size_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
boost::asio::detail::consuming_buffers_iterator::offset_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  std::size_t offset_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
boost::asio::detail::consuming_buffers_iterator::operator !=	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  friend bool operator!=(const consuming_buffers_iterator& a,$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:friend	signature:(const consuming_buffers_iterator& a, const consuming_buffers_iterator& b)
boost::asio::detail::consuming_buffers_iterator::operator *	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const Buffer& operator*() const$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:() const
boost::asio::detail::consuming_buffers_iterator::operator ++	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers_iterator operator++(int)$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:(int)
boost::asio::detail::consuming_buffers_iterator::operator ++	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers_iterator& operator++()$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:()
boost::asio::detail::consuming_buffers_iterator::operator ->	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const Buffer* operator->() const$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:() const
boost::asio::detail::consuming_buffers_iterator::operator ==	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  friend bool operator==(const consuming_buffers_iterator& a,$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:friend	signature:(const consuming_buffers_iterator& a, const consuming_buffers_iterator& b)
boost::asio::detail::custom_socket_option_level	/usr/include/boost/asio/detail/socket_types.hpp	/^const int custom_socket_option_level = 0xA5100000;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::deadline_timer_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^class deadline_timer_service$/;"	c	namespace:boost::asio::detail
boost::asio::detail::deadline_timer_service::async_wait	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void async_wait(implementation_type& impl, Handler handler)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, Handler handler)
boost::asio::detail::deadline_timer_service::cancel	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::deadline_timer_service::cancel_one	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t cancel_one(implementation_type& impl,$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::deadline_timer_service::construct	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::deadline_timer_service::deadline_timer_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  deadline_timer_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::deadline_timer_service::destroy	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::deadline_timer_service::do_wait	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void do_wait(const Duration& timeout, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:private	signature:(const Duration& timeout, boost::system::error_code& ec)
boost::asio::detail::deadline_timer_service::duration_type	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  typedef typename Time_Traits::duration_type duration_type;$/;"	t	class:boost::asio::detail::deadline_timer_service	access:public
boost::asio::detail::deadline_timer_service::expires_at	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, const time_type& expiry_time, boost::system::error_code& ec)
boost::asio::detail::deadline_timer_service::expires_at	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  time_type expires_at(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::deadline_timer_service::expires_from_now	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  duration_type expires_from_now(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::deadline_timer_service::expires_from_now	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, const duration_type& expiry_time, boost::system::error_code& ec)
boost::asio::detail::deadline_timer_service::implementation_type	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  struct implementation_type$/;"	s	class:boost::asio::detail::deadline_timer_service	inherits:boost::asio::detail::noncopyable	access:public
boost::asio::detail::deadline_timer_service::implementation_type::expiry	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    time_type expiry;$/;"	m	struct:boost::asio::detail::deadline_timer_service::implementation_type	access:public
boost::asio::detail::deadline_timer_service::implementation_type::might_have_pending_waits	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    bool might_have_pending_waits;$/;"	m	struct:boost::asio::detail::deadline_timer_service::implementation_type	access:public
boost::asio::detail::deadline_timer_service::implementation_type::timer_data	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    typename timer_queue<Time_Traits>::per_timer_data timer_data;$/;"	m	struct:boost::asio::detail::deadline_timer_service::implementation_type	access:public
boost::asio::detail::deadline_timer_service::scheduler_	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  timer_scheduler& scheduler_;$/;"	m	class:boost::asio::detail::deadline_timer_service	access:private
boost::asio::detail::deadline_timer_service::shutdown_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:()
boost::asio::detail::deadline_timer_service::time_type	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  typedef typename Time_Traits::time_type time_type;$/;"	t	class:boost::asio::detail::deadline_timer_service	access:public
boost::asio::detail::deadline_timer_service::timer_queue_	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  timer_queue<Time_Traits> timer_queue_;$/;"	m	class:boost::asio::detail::deadline_timer_service	access:private
boost::asio::detail::deadline_timer_service::wait	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void wait(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::deadline_timer_service::~deadline_timer_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  ~deadline_timer_service()$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:()
boost::asio::detail::default_connect_condition	/usr/include/boost/asio/impl/connect.hpp	/^  struct default_connect_condition$/;"	s	namespace:boost::asio::detail
boost::asio::detail::default_connect_condition::operator ()	/usr/include/boost/asio/impl/connect.hpp	/^    Iterator operator()(const boost::system::error_code&, Iterator next)$/;"	f	struct:boost::asio::detail::default_connect_condition	access:public	signature:(const boost::system::error_code&, Iterator next)
boost::asio::detail::default_max_transfer_size	/usr/include/boost/asio/completion_condition.hpp	/^enum { default_max_transfer_size = 65536 };$/;"	e	enum:boost::asio::detail::__anon7
boost::asio::detail::dependent_type	/usr/include/boost/asio/detail/dependent_type.hpp	/^struct dependent_type$/;"	s	namespace:boost::asio::detail
boost::asio::detail::dependent_type::type	/usr/include/boost/asio/detail/dependent_type.hpp	/^  typedef T type;$/;"	t	struct:boost::asio::detail::dependent_type	access:public
boost::asio::detail::descriptor_ops	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace descriptor_ops {$/;"	n	namespace:boost::asio::detail
boost::asio::detail::descriptor_ops	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^namespace descriptor_ops {$/;"	n	namespace:boost::asio::detail	file:
boost::asio::detail::descriptor_ops::buf	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^typedef iovec buf;$/;"	t	namespace:boost::asio::detail::descriptor_ops
boost::asio::detail::descriptor_ops::close	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int close(int d, state_type& state,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::close	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int close(int d, state_type& state, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::error_wrapper	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline ReturnType error_wrapper(ReturnType return_value,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(ReturnType return_value, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::fcntl	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int fcntl(int d, int cmd, boost::system::error_code& ec);$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, int cmd, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::fcntl	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int fcntl(int d, int cmd,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, int cmd, long arg, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::fcntl	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int fcntl(int d, int cmd, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, int cmd, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::fcntl	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int fcntl(int d, int cmd, long arg, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, int cmd, long arg, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::internal_non_blocking	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^  internal_non_blocking = 2,$/;"	e	enum:boost::asio::detail::descriptor_ops::__anon9
boost::asio::detail::descriptor_ops::ioctl	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int ioctl(int d, state_type& state, long cmd,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, long cmd, ioctl_arg_type* arg, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::ioctl	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int ioctl(int d, state_type& state, long cmd,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, long cmd, ioctl_arg_type* arg, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::non_blocking	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^  non_blocking = user_set_non_blocking | internal_non_blocking,$/;"	e	enum:boost::asio::detail::descriptor_ops::__anon9
boost::asio::detail::descriptor_ops::non_blocking_read	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_read(int d, buf* bufs, std::size_t count,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, buf* bufs, std::size_t count, boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::detail::descriptor_ops::non_blocking_read	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^bool non_blocking_read(int d, buf* bufs, std::size_t count,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, buf* bufs, std::size_t count, boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::detail::descriptor_ops::non_blocking_write	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_write(int d,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, const buf* bufs, std::size_t count, boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::detail::descriptor_ops::non_blocking_write	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^bool non_blocking_write(int d, const buf* bufs, std::size_t count,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, const buf* bufs, std::size_t count, boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::detail::descriptor_ops::open	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int open(const char* path, int flags,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(const char* path, int flags, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::open	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int open(const char* path, int flags, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(const char* path, int flags, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::poll_read	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int poll_read(int d,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::poll_read	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int poll_read(int d, state_type state, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::poll_write	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int poll_write(int d,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::poll_write	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int poll_write(int d, state_type state, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::possible_dup	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^  possible_dup = 4$/;"	e	enum:boost::asio::detail::descriptor_ops::__anon9
boost::asio::detail::descriptor_ops::set_internal_non_blocking	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL bool set_internal_non_blocking(int d,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, bool value, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::set_internal_non_blocking	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^bool set_internal_non_blocking(int d, state_type& state,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, bool value, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::set_user_non_blocking	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL bool set_user_non_blocking(int d,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, bool value, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::set_user_non_blocking	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^bool set_user_non_blocking(int d, state_type& state,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, bool value, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::state_type	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^typedef unsigned char state_type;$/;"	t	namespace:boost::asio::detail::descriptor_ops
boost::asio::detail::descriptor_ops::sync_read	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL std::size_t sync_read(int d, state_type state, buf* bufs,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, buf* bufs, std::size_t count, bool all_empty, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::sync_read	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^std::size_t sync_read(int d, state_type state, buf* bufs,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, buf* bufs, std::size_t count, bool all_empty, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::sync_write	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL std::size_t sync_write(int d, state_type state,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, const buf* bufs, std::size_t count, bool all_empty, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::sync_write	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^std::size_t sync_write(int d, state_type state, const buf* bufs,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, const buf* bufs, std::size_t count, bool all_empty, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::user_set_non_blocking	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^  user_set_non_blocking = 1,$/;"	e	enum:boost::asio::detail::descriptor_ops::__anon9
boost::asio::detail::descriptor_read_op	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^class descriptor_read_op$/;"	c	namespace:boost::asio::detail	inherits:descriptor_read_op_base
boost::asio::detail::descriptor_read_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(descriptor_read_op);$/;"	p	class:boost::asio::detail::descriptor_read_op	access:public	signature:(descriptor_read_op)
boost::asio::detail::descriptor_read_op::descriptor_read_op	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  descriptor_read_op(int descriptor,$/;"	f	class:boost::asio::detail::descriptor_read_op	access:public	signature:(int descriptor, const MutableBufferSequence& buffers, Handler& handler)
boost::asio::detail::descriptor_read_op::do_complete	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::descriptor_read_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::descriptor_read_op::handler_	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::descriptor_read_op	access:private
boost::asio::detail::descriptor_read_op_base	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^class descriptor_read_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
boost::asio::detail::descriptor_read_op_base::buffers_	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::descriptor_read_op_base	access:private
boost::asio::detail::descriptor_read_op_base::descriptor_	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  int descriptor_;$/;"	m	class:boost::asio::detail::descriptor_read_op_base	access:private
boost::asio::detail::descriptor_read_op_base::descriptor_read_op_base	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  descriptor_read_op_base(int descriptor,$/;"	f	class:boost::asio::detail::descriptor_read_op_base	access:public	signature:(int descriptor, const MutableBufferSequence& buffers, func_type complete_func)
boost::asio::detail::descriptor_read_op_base::do_perform	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::descriptor_read_op_base	access:public	signature:(reactor_op* base)
boost::asio::detail::descriptor_write_op	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^class descriptor_write_op$/;"	c	namespace:boost::asio::detail	inherits:descriptor_write_op_base
boost::asio::detail::descriptor_write_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(descriptor_write_op);$/;"	p	class:boost::asio::detail::descriptor_write_op	access:public	signature:(descriptor_write_op)
boost::asio::detail::descriptor_write_op::descriptor_write_op	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  descriptor_write_op(int descriptor,$/;"	f	class:boost::asio::detail::descriptor_write_op	access:public	signature:(int descriptor, const ConstBufferSequence& buffers, Handler& handler)
boost::asio::detail::descriptor_write_op::do_complete	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::descriptor_write_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::descriptor_write_op::handler_	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::descriptor_write_op	access:private
boost::asio::detail::descriptor_write_op_base	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^class descriptor_write_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
boost::asio::detail::descriptor_write_op_base::buffers_	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::descriptor_write_op_base	access:private
boost::asio::detail::descriptor_write_op_base::descriptor_	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  int descriptor_;$/;"	m	class:boost::asio::detail::descriptor_write_op_base	access:private
boost::asio::detail::descriptor_write_op_base::descriptor_write_op_base	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  descriptor_write_op_base(int descriptor,$/;"	f	class:boost::asio::detail::descriptor_write_op_base	access:public	signature:(int descriptor, const ConstBufferSequence& buffers, func_type complete_func)
boost::asio::detail::descriptor_write_op_base::do_perform	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::descriptor_write_op_base	access:public	signature:(reactor_op* base)
boost::asio::detail::dev_poll_reactor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^class dev_poll_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::dev_poll_reactor::add_pending_event_change	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL ::pollfd& add_pending_event_change(int descriptor);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(int descriptor)
boost::asio::detail::dev_poll_reactor::add_pending_event_change	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^::pollfd& dev_poll_reactor::add_pending_event_change(int descriptor)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(int descriptor)
boost::asio::detail::dev_poll_reactor::add_timer_queue	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& queue);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::dev_poll_reactor::add_timer_queue	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^void dev_poll_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::dev_poll_reactor::cancel_ops	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void cancel_ops(socket_type descriptor, per_descriptor_data&);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
boost::asio::detail::dev_poll_reactor::cancel_ops	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::cancel_ops(socket_type descriptor,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(socket_type descriptor, dev_poll_reactor::per_descriptor_data&)
boost::asio::detail::dev_poll_reactor::cancel_ops_unlocked	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void cancel_ops_unlocked(socket_type descriptor,$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(socket_type descriptor, const boost::system::error_code& ec)
boost::asio::detail::dev_poll_reactor::cancel_ops_unlocked	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::cancel_ops_unlocked(socket_type descriptor,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(socket_type descriptor, const boost::system::error_code& ec)
boost::asio::detail::dev_poll_reactor::cancel_timer	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
boost::asio::detail::dev_poll_reactor::cancel_timer	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^std::size_t dev_poll_reactor::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled)
boost::asio::detail::dev_poll_reactor::connect_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::dev_poll_reactor::op_types
boost::asio::detail::dev_poll_reactor::deregister_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, bool closing)
boost::asio::detail::dev_poll_reactor::deregister_descriptor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::deregister_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(socket_type descriptor, dev_poll_reactor::per_descriptor_data&, bool)
boost::asio::detail::dev_poll_reactor::deregister_internal_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_internal_descriptor($/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:( socket_type descriptor, per_descriptor_data&)
boost::asio::detail::dev_poll_reactor::deregister_internal_descriptor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::deregister_internal_descriptor($/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:( socket_type descriptor, dev_poll_reactor::per_descriptor_data&)
boost::asio::detail::dev_poll_reactor::dev_poll_fd_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  int dev_poll_fd_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::dev_poll_reactor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL dev_poll_reactor(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::dev_poll_reactor::dev_poll_reactor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^dev_poll_reactor::dev_poll_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(boost::asio::io_service& io_service)
boost::asio::detail::dev_poll_reactor::do_add_timer_queue	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void do_add_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(timer_queue_base& queue)
boost::asio::detail::dev_poll_reactor::do_add_timer_queue	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::do_add_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(timer_queue_base& queue)
boost::asio::detail::dev_poll_reactor::do_dev_poll_create	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL static int do_dev_poll_create();$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:private	signature:()
boost::asio::detail::dev_poll_reactor::do_dev_poll_create	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^int dev_poll_reactor::do_dev_poll_create()$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:()
boost::asio::detail::dev_poll_reactor::do_remove_timer_queue	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void do_remove_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(timer_queue_base& queue)
boost::asio::detail::dev_poll_reactor::do_remove_timer_queue	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::do_remove_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(timer_queue_base& queue)
boost::asio::detail::dev_poll_reactor::except_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::dev_poll_reactor::op_types
boost::asio::detail::dev_poll_reactor::fork_helper	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^class dev_poll_reactor::fork_helper$/;"	c	class:boost::asio::detail::dev_poll_reactor	file:
boost::asio::detail::dev_poll_reactor::fork_helper::events_	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^  short events_;$/;"	m	class:boost::asio::detail::dev_poll_reactor::fork_helper	file:	access:private
boost::asio::detail::dev_poll_reactor::fork_helper::fork_helper	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^  fork_helper(dev_poll_reactor* reactor, short events)$/;"	f	class:boost::asio::detail::dev_poll_reactor::fork_helper	access:public	signature:(dev_poll_reactor* reactor, short events)
boost::asio::detail::dev_poll_reactor::fork_helper::reactor_	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^  dev_poll_reactor* reactor_;$/;"	m	class:boost::asio::detail::dev_poll_reactor::fork_helper	file:	access:private
boost::asio::detail::dev_poll_reactor::fork_helper::set	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^  bool set(int descriptor)$/;"	f	class:boost::asio::detail::dev_poll_reactor::fork_helper	access:public	signature:(int descriptor)
boost::asio::detail::dev_poll_reactor::fork_service	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void fork_service($/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:( boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::dev_poll_reactor::fork_service	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::fork_service(boost::asio::io_service::fork_event fork_ev)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::dev_poll_reactor::get_timeout	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL int get_timeout();$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:private	signature:()
boost::asio::detail::dev_poll_reactor::get_timeout	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^int dev_poll_reactor::get_timeout()$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:()
boost::asio::detail::dev_poll_reactor::init_task	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void init_task();$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
boost::asio::detail::dev_poll_reactor::init_task	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::init_task()$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:()
boost::asio::detail::dev_poll_reactor::interrupt	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
boost::asio::detail::dev_poll_reactor::interrupt	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::interrupt()$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:()
boost::asio::detail::dev_poll_reactor::interrupter_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::io_service_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::max_ops	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::dev_poll_reactor::op_types
boost::asio::detail::dev_poll_reactor::move_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void move_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& target_descriptor_data, per_descriptor_data& source_descriptor_data)
boost::asio::detail::dev_poll_reactor::move_descriptor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::move_descriptor(socket_type,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(socket_type, dev_poll_reactor::per_descriptor_data&, dev_poll_reactor::per_descriptor_data&)
boost::asio::detail::dev_poll_reactor::mutex_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::op_queue_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  reactor_op_queue<socket_type> op_queue_[max_ops];$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::op_types	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	g	class:boost::asio::detail::dev_poll_reactor	access:public
boost::asio::detail::dev_poll_reactor::pending_event_change_index_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  hash_map<int, std::size_t> pending_event_change_index_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::pending_event_changes_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::vector< ::pollfd> pending_event_changes_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::per_descriptor_data	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:boost::asio::detail::dev_poll_reactor	access:public
boost::asio::detail::dev_poll_reactor::post_immediate_completion	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void post_immediate_completion(reactor_op* op)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(reactor_op* op)
boost::asio::detail::dev_poll_reactor::read_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:boost::asio::detail::dev_poll_reactor::op_types
boost::asio::detail::dev_poll_reactor::register_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL int register_descriptor(socket_type, per_descriptor_data&);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type, per_descriptor_data&)
boost::asio::detail::dev_poll_reactor::register_descriptor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^int dev_poll_reactor::register_descriptor(socket_type, per_descriptor_data&)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(socket_type, per_descriptor_data&)
boost::asio::detail::dev_poll_reactor::register_internal_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL int register_internal_descriptor($/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:( int op_type, socket_type descriptor, per_descriptor_data& descriptor_data, reactor_op* op)
boost::asio::detail::dev_poll_reactor::register_internal_descriptor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^int dev_poll_reactor::register_internal_descriptor(int op_type,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(int op_type, socket_type descriptor, per_descriptor_data&, reactor_op* op)
boost::asio::detail::dev_poll_reactor::remove_timer_queue	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& queue);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::dev_poll_reactor::remove_timer_queue	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^void dev_poll_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::dev_poll_reactor::run	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void run(bool block, op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(bool block, op_queue<operation>& ops)
boost::asio::detail::dev_poll_reactor::run	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::run(bool block, op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(bool block, op_queue<operation>& ops)
boost::asio::detail::dev_poll_reactor::schedule_timer	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
boost::asio::detail::dev_poll_reactor::schedule_timer	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^void dev_poll_reactor::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
boost::asio::detail::dev_poll_reactor::shutdown_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::shutdown_service	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
boost::asio::detail::dev_poll_reactor::shutdown_service	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::shutdown_service()$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:()
boost::asio::detail::dev_poll_reactor::start_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void start_op(int op_type, socket_type descriptor,$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(int op_type, socket_type descriptor, per_descriptor_data&, reactor_op* op, bool allow_speculative)
boost::asio::detail::dev_poll_reactor::start_op	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::start_op(int op_type, socket_type descriptor,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(int op_type, socket_type descriptor, dev_poll_reactor::per_descriptor_data&, reactor_op* op, bool allow_speculative)
boost::asio::detail::dev_poll_reactor::timer_queues_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::write_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:boost::asio::detail::dev_poll_reactor::op_types
boost::asio::detail::dev_poll_reactor::~dev_poll_reactor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL ~dev_poll_reactor();$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
boost::asio::detail::dev_poll_reactor::~dev_poll_reactor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^dev_poll_reactor::~dev_poll_reactor()$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:()
boost::asio::detail::do_throw_error	/usr/include/boost/asio/detail/impl/throw_error.ipp	/^void do_throw_error(const boost::system::error_code& err)$/;"	f	namespace:boost::asio::detail	signature:(const boost::system::error_code& err)
boost::asio::detail::do_throw_error	/usr/include/boost/asio/detail/impl/throw_error.ipp	/^void do_throw_error(const boost::system::error_code& err, const char* location)$/;"	f	namespace:boost::asio::detail	signature:(const boost::system::error_code& err, const char* location)
boost::asio::detail::do_throw_error	/usr/include/boost/asio/detail/throw_error.hpp	/^BOOST_ASIO_DECL void do_throw_error(const boost::system::error_code& err);$/;"	p	namespace:boost::asio::detail	signature:(const boost::system::error_code& err)
boost::asio::detail::do_throw_error	/usr/include/boost/asio/detail/throw_error.hpp	/^BOOST_ASIO_DECL void do_throw_error(const boost::system::error_code& err,$/;"	p	namespace:boost::asio::detail	signature:(const boost::system::error_code& err, const char* location)
boost::asio::detail::enable_connection_aborted_option	/usr/include/boost/asio/detail/socket_types.hpp	/^const int enable_connection_aborted_option = 1;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::epoll_reactor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^class epoll_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::epoll_reactor::add_timer_queue	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue);$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::epoll_reactor::add_timer_queue	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^void epoll_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::epoll_reactor::allocate_descriptor_state	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL descriptor_state* allocate_descriptor_state();$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:()
boost::asio::detail::epoll_reactor::allocate_descriptor_state	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^epoll_reactor::descriptor_state* epoll_reactor::allocate_descriptor_state()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
boost::asio::detail::epoll_reactor::cancel_ops	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void cancel_ops(socket_type descriptor,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data)
boost::asio::detail::epoll_reactor::cancel_ops	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::cancel_ops(socket_type,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(socket_type, epoll_reactor::per_descriptor_data& descriptor_data)
boost::asio::detail::epoll_reactor::cancel_timer	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
boost::asio::detail::epoll_reactor::cancel_timer	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^std::size_t epoll_reactor::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled)
boost::asio::detail::epoll_reactor::connect_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::epoll_reactor::op_types
boost::asio::detail::epoll_reactor::deregister_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, bool closing)
boost::asio::detail::epoll_reactor::deregister_descriptor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::deregister_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(socket_type descriptor, epoll_reactor::per_descriptor_data& descriptor_data, bool closing)
boost::asio::detail::epoll_reactor::deregister_internal_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_internal_descriptor($/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:( socket_type descriptor, per_descriptor_data& descriptor_data)
boost::asio::detail::epoll_reactor::deregister_internal_descriptor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::deregister_internal_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(socket_type descriptor, epoll_reactor::per_descriptor_data& descriptor_data)
boost::asio::detail::epoll_reactor::descriptor_state	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  class descriptor_state : operation$/;"	c	class:boost::asio::detail::epoll_reactor	inherits:operation	access:public
boost::asio::detail::epoll_reactor::descriptor_state::descriptor_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    int descriptor_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
boost::asio::detail::epoll_reactor::descriptor_state::descriptor_state	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    BOOST_ASIO_DECL descriptor_state();$/;"	p	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private	signature:()
boost::asio::detail::epoll_reactor::descriptor_state::descriptor_state	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^epoll_reactor::descriptor_state::descriptor_state()$/;"	f	class:boost::asio::detail::epoll_reactor::descriptor_state	signature:()
boost::asio::detail::epoll_reactor::descriptor_state::do_complete	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    BOOST_ASIO_DECL static void do_complete($/;"	p	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private	signature:( io_service_impl* owner, operation* base, const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::epoll_reactor::descriptor_state::do_complete	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::descriptor_state::do_complete($/;"	f	class:boost::asio::detail::epoll_reactor::descriptor_state	signature:( io_service_impl* owner, operation* base, const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::epoll_reactor::descriptor_state::mutex_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    mutex mutex_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
boost::asio::detail::epoll_reactor::descriptor_state::next_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    descriptor_state* next_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
boost::asio::detail::epoll_reactor::descriptor_state::op_queue_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    op_queue<reactor_op> op_queue_[max_ops];$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
boost::asio::detail::epoll_reactor::descriptor_state::perform_io	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    BOOST_ASIO_DECL operation* perform_io(uint32_t events);$/;"	p	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private	signature:(uint32_t events)
boost::asio::detail::epoll_reactor::descriptor_state::perform_io	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^operation* epoll_reactor::descriptor_state::perform_io(uint32_t events)$/;"	f	class:boost::asio::detail::epoll_reactor::descriptor_state	signature:(uint32_t events)
boost::asio::detail::epoll_reactor::descriptor_state::prev_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    descriptor_state* prev_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
boost::asio::detail::epoll_reactor::descriptor_state::reactor_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    epoll_reactor* reactor_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
boost::asio::detail::epoll_reactor::descriptor_state::registered_events_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    boost::uint32_t registered_events_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
boost::asio::detail::epoll_reactor::descriptor_state::set_ready_events	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    void set_ready_events(uint32_t events) { task_result_ = events; }$/;"	f	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private	signature:(uint32_t events)
boost::asio::detail::epoll_reactor::descriptor_state::shutdown_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    bool shutdown_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
boost::asio::detail::epoll_reactor::do_add_timer_queue	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void do_add_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:(timer_queue_base& queue)
boost::asio::detail::epoll_reactor::do_add_timer_queue	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::do_add_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(timer_queue_base& queue)
boost::asio::detail::epoll_reactor::do_epoll_create	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL static int do_epoll_create();$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:()
boost::asio::detail::epoll_reactor::do_epoll_create	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^int epoll_reactor::do_epoll_create()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
boost::asio::detail::epoll_reactor::do_remove_timer_queue	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void do_remove_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:(timer_queue_base& queue)
boost::asio::detail::epoll_reactor::do_remove_timer_queue	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::do_remove_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(timer_queue_base& queue)
boost::asio::detail::epoll_reactor::do_timerfd_create	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL static int do_timerfd_create();$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:()
boost::asio::detail::epoll_reactor::do_timerfd_create	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^int epoll_reactor::do_timerfd_create()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
boost::asio::detail::epoll_reactor::epoll_fd_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  int epoll_fd_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::epoll_reactor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL epoll_reactor(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::epoll_reactor::epoll_reactor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^epoll_reactor::epoll_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(boost::asio::io_service& io_service)
boost::asio::detail::epoll_reactor::epoll_size	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  enum { epoll_size = 20000 };$/;"	e	enum:boost::asio::detail::epoll_reactor::__anon10
boost::asio::detail::epoll_reactor::except_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::epoll_reactor::op_types
boost::asio::detail::epoll_reactor::fork_service	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void fork_service($/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:( boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::epoll_reactor::fork_service	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::fork_service(boost::asio::io_service::fork_event fork_ev)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::epoll_reactor::free_descriptor_state	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void free_descriptor_state(descriptor_state* s);$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:(descriptor_state* s)
boost::asio::detail::epoll_reactor::free_descriptor_state	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::free_descriptor_state(epoll_reactor::descriptor_state* s)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(epoll_reactor::descriptor_state* s)
boost::asio::detail::epoll_reactor::get_timeout	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL int get_timeout();$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:()
boost::asio::detail::epoll_reactor::get_timeout	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL int get_timeout(itimerspec& ts);$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:(itimerspec& ts)
boost::asio::detail::epoll_reactor::get_timeout	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^int epoll_reactor::get_timeout()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
boost::asio::detail::epoll_reactor::get_timeout	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^int epoll_reactor::get_timeout(itimerspec& ts)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(itimerspec& ts)
boost::asio::detail::epoll_reactor::init_task	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void init_task();$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:()
boost::asio::detail::epoll_reactor::init_task	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::init_task()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
boost::asio::detail::epoll_reactor::interrupt	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:()
boost::asio::detail::epoll_reactor::interrupt	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::interrupt()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
boost::asio::detail::epoll_reactor::interrupter_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::io_service_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::max_ops	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::epoll_reactor::op_types
boost::asio::detail::epoll_reactor::move_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void move_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& target_descriptor_data, per_descriptor_data& source_descriptor_data)
boost::asio::detail::epoll_reactor::move_descriptor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::move_descriptor(socket_type,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(socket_type, epoll_reactor::per_descriptor_data& target_descriptor_data, epoll_reactor::per_descriptor_data& source_descriptor_data)
boost::asio::detail::epoll_reactor::mutex_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  mutex mutex_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::op_types	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	g	class:boost::asio::detail::epoll_reactor	access:public
boost::asio::detail::epoll_reactor::per_descriptor_data	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  typedef descriptor_state* per_descriptor_data;$/;"	t	class:boost::asio::detail::epoll_reactor	access:public
boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^struct epoll_reactor::perform_io_cleanup_on_block_exit$/;"	s	class:boost::asio::detail::epoll_reactor	file:
boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit::first_op_	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^  operation* first_op_;$/;"	m	struct:boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit	file:	access:public
boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit::ops_	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^  op_queue<operation> ops_;$/;"	m	struct:boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit	file:	access:public
boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit::perform_io_cleanup_on_block_exit	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^  explicit perform_io_cleanup_on_block_exit(epoll_reactor* r)$/;"	f	struct:boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit	access:public	signature:(epoll_reactor* r)
boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit::reactor_	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^  epoll_reactor* reactor_;$/;"	m	struct:boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit	file:	access:public
boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit::~perform_io_cleanup_on_block_exit	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^  ~perform_io_cleanup_on_block_exit()$/;"	f	struct:boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit	access:public	signature:()
boost::asio::detail::epoll_reactor::post_immediate_completion	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void post_immediate_completion(reactor_op* op)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(reactor_op* op)
boost::asio::detail::epoll_reactor::read_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:boost::asio::detail::epoll_reactor::op_types
boost::asio::detail::epoll_reactor::register_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL int register_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data)
boost::asio::detail::epoll_reactor::register_descriptor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^int epoll_reactor::register_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(socket_type descriptor, epoll_reactor::per_descriptor_data& descriptor_data)
boost::asio::detail::epoll_reactor::register_internal_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL int register_internal_descriptor($/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:( int op_type, socket_type descriptor, per_descriptor_data& descriptor_data, reactor_op* op)
boost::asio::detail::epoll_reactor::register_internal_descriptor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^int epoll_reactor::register_internal_descriptor($/;"	f	class:boost::asio::detail::epoll_reactor	signature:( int op_type, socket_type descriptor, epoll_reactor::per_descriptor_data& descriptor_data, reactor_op* op)
boost::asio::detail::epoll_reactor::registered_descriptors_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  object_pool<descriptor_state> registered_descriptors_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::registered_descriptors_mutex_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  mutex registered_descriptors_mutex_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::remove_timer_queue	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue);$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::epoll_reactor::remove_timer_queue	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^void epoll_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::epoll_reactor::run	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void run(bool block, op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(bool block, op_queue<operation>& ops)
boost::asio::detail::epoll_reactor::run	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::run(bool block, op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(bool block, op_queue<operation>& ops)
boost::asio::detail::epoll_reactor::schedule_timer	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
boost::asio::detail::epoll_reactor::schedule_timer	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^void epoll_reactor::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
boost::asio::detail::epoll_reactor::shutdown_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::shutdown_service	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:()
boost::asio::detail::epoll_reactor::shutdown_service	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::shutdown_service()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
boost::asio::detail::epoll_reactor::start_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void start_op(int op_type, socket_type descriptor,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(int op_type, socket_type descriptor, per_descriptor_data& descriptor_data, reactor_op* op, bool allow_speculative)
boost::asio::detail::epoll_reactor::start_op	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::start_op(int op_type, socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(int op_type, socket_type descriptor, epoll_reactor::per_descriptor_data& descriptor_data, reactor_op* op, bool allow_speculative)
boost::asio::detail::epoll_reactor::timer_fd_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  int timer_fd_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::timer_queues_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::update_timeout	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void update_timeout();$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:()
boost::asio::detail::epoll_reactor::update_timeout	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::update_timeout()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
boost::asio::detail::epoll_reactor::write_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:boost::asio::detail::epoll_reactor::op_types
boost::asio::detail::epoll_reactor::~epoll_reactor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL ~epoll_reactor();$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:()
boost::asio::detail::epoll_reactor::~epoll_reactor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^epoll_reactor::~epoll_reactor()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
boost::asio::detail::event	/usr/include/boost/asio/detail/event.hpp	/^typedef null_event event;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::eventfd_select_interrupter	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^class eventfd_select_interrupter$/;"	c	namespace:boost::asio::detail
boost::asio::detail::eventfd_select_interrupter::close_descriptors	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL void close_descriptors();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:private	signature:()
boost::asio::detail::eventfd_select_interrupter::close_descriptors	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^void eventfd_select_interrupter::close_descriptors()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
boost::asio::detail::eventfd_select_interrupter::eventfd_select_interrupter	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL eventfd_select_interrupter();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
boost::asio::detail::eventfd_select_interrupter::eventfd_select_interrupter	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^eventfd_select_interrupter::eventfd_select_interrupter()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
boost::asio::detail::eventfd_select_interrupter::interrupt	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
boost::asio::detail::eventfd_select_interrupter::interrupt	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^void eventfd_select_interrupter::interrupt()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
boost::asio::detail::eventfd_select_interrupter::open_descriptors	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL void open_descriptors();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:private	signature:()
boost::asio::detail::eventfd_select_interrupter::open_descriptors	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^void eventfd_select_interrupter::open_descriptors()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
boost::asio::detail::eventfd_select_interrupter::read_descriptor	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  int read_descriptor() const$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:() const
boost::asio::detail::eventfd_select_interrupter::read_descriptor_	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  int read_descriptor_;$/;"	m	class:boost::asio::detail::eventfd_select_interrupter	access:private
boost::asio::detail::eventfd_select_interrupter::recreate	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL void recreate();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
boost::asio::detail::eventfd_select_interrupter::recreate	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^void eventfd_select_interrupter::recreate()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
boost::asio::detail::eventfd_select_interrupter::reset	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL bool reset();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
boost::asio::detail::eventfd_select_interrupter::reset	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^bool eventfd_select_interrupter::reset()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
boost::asio::detail::eventfd_select_interrupter::write_descriptor_	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  int write_descriptor_;$/;"	m	class:boost::asio::detail::eventfd_select_interrupter	access:private
boost::asio::detail::eventfd_select_interrupter::~eventfd_select_interrupter	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL ~eventfd_select_interrupter();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
boost::asio::detail::eventfd_select_interrupter::~eventfd_select_interrupter	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^eventfd_select_interrupter::~eventfd_select_interrupter()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
boost::asio::detail::fd_set_adapter	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^typedef win_fd_set_adapter fd_set_adapter;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::fenced_block	/usr/include/boost/asio/detail/fenced_block.hpp	/^typedef null_fenced_block fenced_block;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::forwarding_posix_time_traits	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^struct forwarding_posix_time_traits : time_traits<boost::posix_time::ptime> {};$/;"	s	namespace:boost::asio::detail	inherits:time_traits
boost::asio::detail::gcc_arm_fenced_block	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^class gcc_arm_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::gcc_arm_fenced_block::barrier	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  static void barrier()$/;"	f	class:boost::asio::detail::gcc_arm_fenced_block	access:private	signature:()
boost::asio::detail::gcc_arm_fenced_block::full	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:boost::asio::detail::gcc_arm_fenced_block::full_t
boost::asio::detail::gcc_arm_fenced_block::full_t	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:boost::asio::detail::gcc_arm_fenced_block	access:public
boost::asio::detail::gcc_arm_fenced_block::gcc_arm_fenced_block	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  explicit gcc_arm_fenced_block(full_t)$/;"	f	class:boost::asio::detail::gcc_arm_fenced_block	access:public	signature:(full_t)
boost::asio::detail::gcc_arm_fenced_block::gcc_arm_fenced_block	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  explicit gcc_arm_fenced_block(half_t)$/;"	f	class:boost::asio::detail::gcc_arm_fenced_block	access:public	signature:(half_t)
boost::asio::detail::gcc_arm_fenced_block::half	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:boost::asio::detail::gcc_arm_fenced_block::half_t
boost::asio::detail::gcc_arm_fenced_block::half_t	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:boost::asio::detail::gcc_arm_fenced_block	access:public
boost::asio::detail::gcc_arm_fenced_block::~gcc_arm_fenced_block	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  ~gcc_arm_fenced_block()$/;"	f	class:boost::asio::detail::gcc_arm_fenced_block	access:public	signature:()
boost::asio::detail::gcc_hppa_fenced_block	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^class gcc_hppa_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::gcc_hppa_fenced_block::barrier	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  static void barrier()$/;"	f	class:boost::asio::detail::gcc_hppa_fenced_block	access:private	signature:()
boost::asio::detail::gcc_hppa_fenced_block::full	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:boost::asio::detail::gcc_hppa_fenced_block::full_t
boost::asio::detail::gcc_hppa_fenced_block::full_t	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:boost::asio::detail::gcc_hppa_fenced_block	access:public
boost::asio::detail::gcc_hppa_fenced_block::gcc_hppa_fenced_block	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  explicit gcc_hppa_fenced_block(full_t)$/;"	f	class:boost::asio::detail::gcc_hppa_fenced_block	access:public	signature:(full_t)
boost::asio::detail::gcc_hppa_fenced_block::gcc_hppa_fenced_block	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  explicit gcc_hppa_fenced_block(half_t)$/;"	f	class:boost::asio::detail::gcc_hppa_fenced_block	access:public	signature:(half_t)
boost::asio::detail::gcc_hppa_fenced_block::half	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:boost::asio::detail::gcc_hppa_fenced_block::half_t
boost::asio::detail::gcc_hppa_fenced_block::half_t	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:boost::asio::detail::gcc_hppa_fenced_block	access:public
boost::asio::detail::gcc_hppa_fenced_block::~gcc_hppa_fenced_block	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  ~gcc_hppa_fenced_block()$/;"	f	class:boost::asio::detail::gcc_hppa_fenced_block	access:public	signature:()
boost::asio::detail::gcc_sync_fenced_block	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^class gcc_sync_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::gcc_sync_fenced_block::full	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	e	enum:boost::asio::detail::gcc_sync_fenced_block::half_or_full_t
boost::asio::detail::gcc_sync_fenced_block::gcc_sync_fenced_block	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^  explicit gcc_sync_fenced_block(half_or_full_t)$/;"	f	class:boost::asio::detail::gcc_sync_fenced_block	access:public	signature:(half_or_full_t)
boost::asio::detail::gcc_sync_fenced_block::half	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	e	enum:boost::asio::detail::gcc_sync_fenced_block::half_or_full_t
boost::asio::detail::gcc_sync_fenced_block::half_or_full_t	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	g	class:boost::asio::detail::gcc_sync_fenced_block	access:public
boost::asio::detail::gcc_sync_fenced_block::value_	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^  int value_;$/;"	m	class:boost::asio::detail::gcc_sync_fenced_block	access:private
boost::asio::detail::gcc_sync_fenced_block::~gcc_sync_fenced_block	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^  ~gcc_sync_fenced_block()$/;"	f	class:boost::asio::detail::gcc_sync_fenced_block	access:public	signature:()
boost::asio::detail::gcc_x86_fenced_block	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^class gcc_x86_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::gcc_x86_fenced_block::barrier	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  static int barrier()$/;"	f	class:boost::asio::detail::gcc_x86_fenced_block	access:private	signature:()
boost::asio::detail::gcc_x86_fenced_block::full	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:boost::asio::detail::gcc_x86_fenced_block::full_t
boost::asio::detail::gcc_x86_fenced_block::full_t	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:boost::asio::detail::gcc_x86_fenced_block	access:public
boost::asio::detail::gcc_x86_fenced_block::gcc_x86_fenced_block	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  explicit gcc_x86_fenced_block(full_t)$/;"	f	class:boost::asio::detail::gcc_x86_fenced_block	access:public	signature:(full_t)
boost::asio::detail::gcc_x86_fenced_block::gcc_x86_fenced_block	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  explicit gcc_x86_fenced_block(half_t)$/;"	f	class:boost::asio::detail::gcc_x86_fenced_block	access:public	signature:(half_t)
boost::asio::detail::gcc_x86_fenced_block::half	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:boost::asio::detail::gcc_x86_fenced_block::half_t
boost::asio::detail::gcc_x86_fenced_block::half_t	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:boost::asio::detail::gcc_x86_fenced_block	access:public
boost::asio::detail::gcc_x86_fenced_block::lbarrier	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  static void lbarrier()$/;"	f	class:boost::asio::detail::gcc_x86_fenced_block	access:private	signature:()
boost::asio::detail::gcc_x86_fenced_block::sbarrier	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  static void sbarrier()$/;"	f	class:boost::asio::detail::gcc_x86_fenced_block	access:private	signature:()
boost::asio::detail::gcc_x86_fenced_block::~gcc_x86_fenced_block	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  ~gcc_x86_fenced_block()$/;"	f	class:boost::asio::detail::gcc_x86_fenced_block	access:public	signature:()
boost::asio::detail::get_signal_state	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^signal_state* get_signal_state()$/;"	f	namespace:boost::asio::detail	signature:()
boost::asio::detail::get_signal_state	/usr/include/boost/asio/detail/signal_set_service.hpp	/^extern BOOST_ASIO_DECL struct signal_state* get_signal_state();$/;"	p	namespace:boost::asio::detail	signature:()
boost::asio::detail::handler_tracking	/usr/include/boost/asio/detail/handler_tracking.hpp	/^class handler_tracking$/;"	c	namespace:boost::asio::detail
boost::asio::detail::handler_tracking::completion	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  class completion$/;"	c	class:boost::asio::detail::handler_tracking	access:public
boost::asio::detail::handler_tracking::completion::completion	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL explicit completion(tracked_handler* h);$/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:(tracked_handler* h)
boost::asio::detail::handler_tracking::completion::completion	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^handler_tracking::completion::completion(handler_tracking::tracked_handler* h)$/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:(handler_tracking::tracked_handler* h)
boost::asio::detail::handler_tracking::completion::id_	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    boost::uint64_t id_;$/;"	m	class:boost::asio::detail::handler_tracking::completion	access:private
boost::asio::detail::handler_tracking::completion::invocation_begin	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL void invocation_begin($/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:( const boost::system::error_code& ec, const char* arg)
boost::asio::detail::handler_tracking::completion::invocation_begin	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL void invocation_begin($/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:( const boost::system::error_code& ec, int signal_number)
boost::asio::detail::handler_tracking::completion::invocation_begin	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL void invocation_begin($/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:( const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::handler_tracking::completion::invocation_begin	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL void invocation_begin();$/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:()
boost::asio::detail::handler_tracking::completion::invocation_begin	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL void invocation_begin(const boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:(const boost::system::error_code& ec)
boost::asio::detail::handler_tracking::completion::invocation_begin	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::completion::invocation_begin($/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:( const boost::system::error_code& ec)
boost::asio::detail::handler_tracking::completion::invocation_begin	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::completion::invocation_begin($/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:( const boost::system::error_code& ec, const char* arg)
boost::asio::detail::handler_tracking::completion::invocation_begin	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::completion::invocation_begin($/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:( const boost::system::error_code& ec, int signal_number)
boost::asio::detail::handler_tracking::completion::invocation_begin	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::completion::invocation_begin($/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:( const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::handler_tracking::completion::invocation_begin	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::completion::invocation_begin()$/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:()
boost::asio::detail::handler_tracking::completion::invocation_end	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL void invocation_end();$/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:()
boost::asio::detail::handler_tracking::completion::invocation_end	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::completion::invocation_end()$/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:()
boost::asio::detail::handler_tracking::completion::invoked_	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    bool invoked_;$/;"	m	class:boost::asio::detail::handler_tracking::completion	access:private
boost::asio::detail::handler_tracking::completion::next_	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    completion* next_;$/;"	m	class:boost::asio::detail::handler_tracking::completion	access:private
boost::asio::detail::handler_tracking::completion::~completion	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL ~completion();$/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:()
boost::asio::detail::handler_tracking::completion::~completion	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^handler_tracking::completion::~completion()$/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:()
boost::asio::detail::handler_tracking::creation	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  BOOST_ASIO_DECL static void creation(tracked_handler* h,$/;"	p	class:boost::asio::detail::handler_tracking	access:public	signature:(tracked_handler* h, const char* object_type, void* object, const char* op_name)
boost::asio::detail::handler_tracking::creation	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::creation(handler_tracking::tracked_handler* h,$/;"	f	class:boost::asio::detail::handler_tracking	signature:(handler_tracking::tracked_handler* h, const char* object_type, void* object, const char* op_name)
boost::asio::detail::handler_tracking::get_state	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  BOOST_ASIO_DECL static tracking_state* get_state();$/;"	p	class:boost::asio::detail::handler_tracking	access:private	signature:()
boost::asio::detail::handler_tracking::get_state	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^handler_tracking::tracking_state* handler_tracking::get_state()$/;"	f	class:boost::asio::detail::handler_tracking	signature:()
boost::asio::detail::handler_tracking::init	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  BOOST_ASIO_DECL static void init();$/;"	p	class:boost::asio::detail::handler_tracking	access:public	signature:()
boost::asio::detail::handler_tracking::init	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::init()$/;"	f	class:boost::asio::detail::handler_tracking	signature:()
boost::asio::detail::handler_tracking::operation	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  BOOST_ASIO_DECL static void operation(const char* object_type,$/;"	p	class:boost::asio::detail::handler_tracking	access:public	signature:(const char* object_type, void* object, const char* op_name)
boost::asio::detail::handler_tracking::operation	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::operation(const char* object_type,$/;"	f	class:boost::asio::detail::handler_tracking	signature:(const char* object_type, void* object, const char* op_name)
boost::asio::detail::handler_tracking::tracked_handler	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  class tracked_handler$/;"	c	class:boost::asio::detail::handler_tracking	access:public
boost::asio::detail::handler_tracking::tracked_handler::id_	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    boost::uint64_t id_;$/;"	m	class:boost::asio::detail::handler_tracking::tracked_handler	access:private
boost::asio::detail::handler_tracking::tracked_handler::tracked_handler	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    tracked_handler() : id_(0) {}$/;"	f	class:boost::asio::detail::handler_tracking::tracked_handler	access:protected	signature:()
boost::asio::detail::handler_tracking::tracked_handler::~tracked_handler	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    ~tracked_handler() {}$/;"	f	class:boost::asio::detail::handler_tracking::tracked_handler	access:protected	signature:()
boost::asio::detail::handler_tracking::tracking_state	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^struct handler_tracking::tracking_state$/;"	s	class:boost::asio::detail::handler_tracking	file:
boost::asio::detail::handler_tracking::tracking_state::current_completion_	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^  tss_ptr<completion>* current_completion_;$/;"	m	struct:boost::asio::detail::handler_tracking::tracking_state	file:	access:public
boost::asio::detail::handler_tracking::tracking_state::mutex_	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^  static_mutex mutex_;$/;"	m	struct:boost::asio::detail::handler_tracking::tracking_state	file:	access:public
boost::asio::detail::handler_tracking::tracking_state::next_id_	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^  boost::uint64_t next_id_;$/;"	m	struct:boost::asio::detail::handler_tracking::tracking_state	file:	access:public
boost::asio::detail::handler_tracking::write_line	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  BOOST_ASIO_DECL static void write_line(const char* format, ...);$/;"	p	class:boost::asio::detail::handler_tracking	access:public	signature:(const char* format, ...)
boost::asio::detail::handler_tracking::write_line	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::write_line(const char* format, ...)$/;"	f	class:boost::asio::detail::handler_tracking	signature:(const char* format, ...)
boost::asio::detail::handler_type_requirements	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^struct handler_type_requirements$/;"	s	namespace:boost::asio::detail
boost::asio::detail::has_result_type	/usr/include/boost/asio/read_until.hpp	/^  struct has_result_type$/;"	s	namespace:boost::asio::detail
boost::asio::detail::has_result_type::value	/usr/include/boost/asio/read_until.hpp	/^    enum { value = (sizeof((has_result_type_helper)((T*)(0))) == 1) };$/;"	e	enum:boost::asio::detail::has_result_type::__anon21
boost::asio::detail::has_result_type_helper	/usr/include/boost/asio/read_until.hpp	/^  char (&has_result_type_helper(...))[2];$/;"	p	namespace:boost::asio::detail	signature:(....)
boost::asio::detail::has_result_type_helper	/usr/include/boost/asio/read_until.hpp	/^  char has_result_type_helper(T*, typename T::result_type* = 0);$/;"	p	namespace:boost::asio::detail	signature:(T*, typename T::result_type* = 0)
boost::asio::detail::hash_map	/usr/include/boost/asio/detail/hash_map.hpp	/^class hash_map$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::hash_map::begin	/usr/include/boost/asio/detail/hash_map.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:() const
boost::asio::detail::hash_map::begin	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator begin()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
boost::asio::detail::hash_map::bucket_type	/usr/include/boost/asio/detail/hash_map.hpp	/^  struct bucket_type$/;"	s	class:boost::asio::detail::hash_map	access:private
boost::asio::detail::hash_map::bucket_type::first	/usr/include/boost/asio/detail/hash_map.hpp	/^    iterator first;$/;"	m	struct:boost::asio::detail::hash_map::bucket_type	access:public
boost::asio::detail::hash_map::bucket_type::last	/usr/include/boost/asio/detail/hash_map.hpp	/^    iterator last;$/;"	m	struct:boost::asio::detail::hash_map::bucket_type	access:public
boost::asio::detail::hash_map::buckets_	/usr/include/boost/asio/detail/hash_map.hpp	/^  bucket_type* buckets_;$/;"	m	class:boost::asio::detail::hash_map	access:private
boost::asio::detail::hash_map::clear	/usr/include/boost/asio/detail/hash_map.hpp	/^  void clear()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
boost::asio::detail::hash_map::const_iterator	/usr/include/boost/asio/detail/hash_map.hpp	/^  typedef typename std::list<value_type>::const_iterator const_iterator;$/;"	t	class:boost::asio::detail::hash_map	access:public
boost::asio::detail::hash_map::empty	/usr/include/boost/asio/detail/hash_map.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:() const
boost::asio::detail::hash_map::end	/usr/include/boost/asio/detail/hash_map.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:() const
boost::asio::detail::hash_map::end	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator end()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
boost::asio::detail::hash_map::erase	/usr/include/boost/asio/detail/hash_map.hpp	/^  void erase(const K& k)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const K& k)
boost::asio::detail::hash_map::erase	/usr/include/boost/asio/detail/hash_map.hpp	/^  void erase(iterator it)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(iterator it)
boost::asio::detail::hash_map::find	/usr/include/boost/asio/detail/hash_map.hpp	/^  const_iterator find(const K& k) const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const K& k) const
boost::asio::detail::hash_map::find	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator find(const K& k)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const K& k)
boost::asio::detail::hash_map::hash_map	/usr/include/boost/asio/detail/hash_map.hpp	/^  hash_map()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
boost::asio::detail::hash_map::hash_size	/usr/include/boost/asio/detail/hash_map.hpp	/^  static std::size_t hash_size(std::size_t num_elems)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(std::size_t num_elems)
boost::asio::detail::hash_map::insert	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::pair<iterator, bool> insert(const value_type& v)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const value_type& v)
boost::asio::detail::hash_map::iterator	/usr/include/boost/asio/detail/hash_map.hpp	/^  typedef typename std::list<value_type>::iterator iterator;$/;"	t	class:boost::asio::detail::hash_map	access:public
boost::asio::detail::hash_map::num_buckets_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::size_t num_buckets_;$/;"	m	class:boost::asio::detail::hash_map	access:private
boost::asio::detail::hash_map::rehash	/usr/include/boost/asio/detail/hash_map.hpp	/^  void rehash(std::size_t num_buckets)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(std::size_t num_buckets)
boost::asio::detail::hash_map::size_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::detail::hash_map	access:private
boost::asio::detail::hash_map::spares_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::list<value_type> spares_;$/;"	m	class:boost::asio::detail::hash_map	access:private
boost::asio::detail::hash_map::value_type	/usr/include/boost/asio/detail/hash_map.hpp	/^  typedef std::pair<K, V> value_type;$/;"	t	class:boost::asio::detail::hash_map	access:public
boost::asio::detail::hash_map::values_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::list<value_type> values_;$/;"	m	class:boost::asio::detail::hash_map	access:private
boost::asio::detail::hash_map::values_erase	/usr/include/boost/asio/detail/hash_map.hpp	/^  void values_erase(iterator it)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(iterator it)
boost::asio::detail::hash_map::values_insert	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator values_insert(iterator it, const value_type& v)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(iterator it, const value_type& v)
boost::asio::detail::hash_map::~hash_map	/usr/include/boost/asio/detail/hash_map.hpp	/^  ~hash_map()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
boost::asio::detail::in4_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef in_addr in4_addr_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::in4_mreq_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef ip_mreq in4_mreq_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::in6_addr_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct in6_addr_emulation$/;"	s	namespace:boost::asio::detail
boost::asio::detail::in6_addr_emulation::__anon13::Byte	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^    u_char Byte[16];$/;"	m	union:boost::asio::detail::in6_addr_emulation::__anon13	access:public
boost::asio::detail::in6_addr_emulation::__anon13::Word	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^    u_short Word[8];$/;"	m	union:boost::asio::detail::in6_addr_emulation::__anon13	access:public
boost::asio::detail::in6_addr_emulation::u	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  } u;$/;"	m	struct:boost::asio::detail::in6_addr_emulation	typeref:union:boost::asio::detail::in6_addr_emulation::__anon13	access:public
boost::asio::detail::in6_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef in6_addr in6_addr_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::in6_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef in6_addr_emulation in6_addr_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::in6_mreq_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef ipv6_mreq in6_mreq_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::in6_mreq_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef ipv6_mreq_emulation in6_mreq_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::increment	/usr/include/boost/asio/detail/atomic_count.hpp	/^inline void increment(atomic_count& a, long b) { a += b; }$/;"	f	namespace:boost::asio::detail	signature:(atomic_count& a, long b)
boost::asio::detail::invalid_socket	/usr/include/boost/asio/detail/socket_types.hpp	/^const SOCKET invalid_socket = INVALID_SOCKET;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::io_control	/usr/include/boost/asio/detail/io_control.hpp	/^namespace io_control {$/;"	n	namespace:boost::asio::detail
boost::asio::detail::io_control::bytes_readable	/usr/include/boost/asio/detail/io_control.hpp	/^class bytes_readable$/;"	c	namespace:boost::asio::detail::io_control
boost::asio::detail::io_control::bytes_readable::bytes_readable	/usr/include/boost/asio/detail/io_control.hpp	/^  bytes_readable()$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:()
boost::asio::detail::io_control::bytes_readable::bytes_readable	/usr/include/boost/asio/detail/io_control.hpp	/^  bytes_readable(std::size_t value)$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:(std::size_t value)
boost::asio::detail::io_control::bytes_readable::data	/usr/include/boost/asio/detail/io_control.hpp	/^  const detail::ioctl_arg_type* data() const$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:() const
boost::asio::detail::io_control::bytes_readable::data	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type* data()$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:()
boost::asio::detail::io_control::bytes_readable::get	/usr/include/boost/asio/detail/io_control.hpp	/^  std::size_t get() const$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:() const
boost::asio::detail::io_control::bytes_readable::name	/usr/include/boost/asio/detail/io_control.hpp	/^  int name() const$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:() const
boost::asio::detail::io_control::bytes_readable::set	/usr/include/boost/asio/detail/io_control.hpp	/^  void set(std::size_t value)$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:(std::size_t value)
boost::asio::detail::io_control::bytes_readable::value_	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type value_;$/;"	m	class:boost::asio::detail::io_control::bytes_readable	access:private
boost::asio::detail::io_control::non_blocking_io	/usr/include/boost/asio/detail/io_control.hpp	/^class non_blocking_io$/;"	c	namespace:boost::asio::detail::io_control
boost::asio::detail::io_control::non_blocking_io::data	/usr/include/boost/asio/detail/io_control.hpp	/^  const detail::ioctl_arg_type* data() const$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:() const
boost::asio::detail::io_control::non_blocking_io::data	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type* data()$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:()
boost::asio::detail::io_control::non_blocking_io::get	/usr/include/boost/asio/detail/io_control.hpp	/^  bool get() const$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:() const
boost::asio::detail::io_control::non_blocking_io::name	/usr/include/boost/asio/detail/io_control.hpp	/^  int name() const$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:() const
boost::asio::detail::io_control::non_blocking_io::non_blocking_io	/usr/include/boost/asio/detail/io_control.hpp	/^  non_blocking_io()$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:()
boost::asio::detail::io_control::non_blocking_io::non_blocking_io	/usr/include/boost/asio/detail/io_control.hpp	/^  non_blocking_io(bool value)$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:(bool value)
boost::asio::detail::io_control::non_blocking_io::set	/usr/include/boost/asio/detail/io_control.hpp	/^  void set(bool value)$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:(bool value)
boost::asio::detail::io_control::non_blocking_io::value_	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type value_;$/;"	m	class:boost::asio::detail::io_control::non_blocking_io	access:private
boost::asio::detail::io_service_impl	/usr/include/boost/asio/io_service.hpp	/^namespace detail { typedef win_iocp_io_service io_service_impl; }$/;"	t	namespace:boost::asio::detail
boost::asio::detail::ioctl_arg_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef unsigned long ioctl_arg_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::ipv6_mreq_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct ipv6_mreq_emulation$/;"	s	namespace:boost::asio::detail
boost::asio::detail::ipv6_mreq_emulation::ipv6mr_interface	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  unsigned int ipv6mr_interface;$/;"	m	struct:boost::asio::detail::ipv6_mreq_emulation	access:public
boost::asio::detail::ipv6_mreq_emulation::ipv6mr_multiaddr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  in6_addr_emulation ipv6mr_multiaddr;$/;"	m	struct:boost::asio::detail::ipv6_mreq_emulation	access:public
boost::asio::detail::is_read_buffered_big_type	/usr/include/boost/asio/is_read_buffered.hpp	/^struct is_read_buffered_big_type { char data[10]; };$/;"	s	namespace:boost::asio::detail
boost::asio::detail::is_read_buffered_big_type::data	/usr/include/boost/asio/is_read_buffered.hpp	/^struct is_read_buffered_big_type { char data[10]; };$/;"	m	struct:boost::asio::detail::is_read_buffered_big_type	access:public
boost::asio::detail::is_read_buffered_helper	/usr/include/boost/asio/is_read_buffered.hpp	/^char is_read_buffered_helper(buffered_read_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_read_stream<Stream>* s)
boost::asio::detail::is_read_buffered_helper	/usr/include/boost/asio/is_read_buffered.hpp	/^char is_read_buffered_helper(buffered_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_stream<Stream>* s)
boost::asio::detail::is_read_buffered_helper	/usr/include/boost/asio/is_read_buffered.hpp	/^is_read_buffered_big_type is_read_buffered_helper(...);$/;"	p	namespace:boost::asio::detail	signature:(....)
boost::asio::detail::is_write_buffered_big_type	/usr/include/boost/asio/is_write_buffered.hpp	/^struct is_write_buffered_big_type { char data[10]; };$/;"	s	namespace:boost::asio::detail
boost::asio::detail::is_write_buffered_big_type::data	/usr/include/boost/asio/is_write_buffered.hpp	/^struct is_write_buffered_big_type { char data[10]; };$/;"	m	struct:boost::asio::detail::is_write_buffered_big_type	access:public
boost::asio::detail::is_write_buffered_helper	/usr/include/boost/asio/is_write_buffered.hpp	/^char is_write_buffered_helper(buffered_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_stream<Stream>* s)
boost::asio::detail::is_write_buffered_helper	/usr/include/boost/asio/is_write_buffered.hpp	/^char is_write_buffered_helper(buffered_write_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_write_stream<Stream>* s)
boost::asio::detail::is_write_buffered_helper	/usr/include/boost/asio/is_write_buffered.hpp	/^is_write_buffered_big_type is_write_buffered_helper(...);$/;"	p	namespace:boost::asio::detail	signature:(....)
boost::asio::detail::keyword_tss_ptr	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^class keyword_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::keyword_tss_ptr::keyword_tss_ptr	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^  keyword_tss_ptr()$/;"	f	class:boost::asio::detail::keyword_tss_ptr	access:public	signature:()
boost::asio::detail::keyword_tss_ptr::operator =	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::keyword_tss_ptr	access:public	signature:(T* value)
boost::asio::detail::keyword_tss_ptr::operator T*	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::keyword_tss_ptr	access:public	signature:() const
boost::asio::detail::keyword_tss_ptr::value_	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^  static __thread T* value_;$/;"	m	class:boost::asio::detail::keyword_tss_ptr	access:private
boost::asio::detail::keyword_tss_ptr::value_	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^__thread T* keyword_tss_ptr<T>::value_;$/;"	m	class:boost::asio::detail::keyword_tss_ptr
boost::asio::detail::keyword_tss_ptr::~keyword_tss_ptr	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^  ~keyword_tss_ptr()$/;"	f	class:boost::asio::detail::keyword_tss_ptr	access:public	signature:()
boost::asio::detail::kqueue_reactor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^class kqueue_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::kqueue_reactor::add_timer_queue	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^void kqueue_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::kqueue_reactor::add_timer_queue	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& queue);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::kqueue_reactor::allocate_descriptor_state	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^kqueue_reactor::descriptor_state* kqueue_reactor::allocate_descriptor_state()$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:()
boost::asio::detail::kqueue_reactor::allocate_descriptor_state	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL descriptor_state* allocate_descriptor_state();$/;"	p	class:boost::asio::detail::kqueue_reactor	access:private	signature:()
boost::asio::detail::kqueue_reactor::cancel_ops	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::cancel_ops(socket_type,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(socket_type, kqueue_reactor::per_descriptor_data& descriptor_data)
boost::asio::detail::kqueue_reactor::cancel_ops	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void cancel_ops(socket_type descriptor,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data)
boost::asio::detail::kqueue_reactor::cancel_timer	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^std::size_t kqueue_reactor::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled)
boost::asio::detail::kqueue_reactor::cancel_timer	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
boost::asio::detail::kqueue_reactor::connect_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::kqueue_reactor::op_types
boost::asio::detail::kqueue_reactor::deregister_descriptor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::deregister_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(socket_type descriptor, kqueue_reactor::per_descriptor_data& descriptor_data, bool closing)
boost::asio::detail::kqueue_reactor::deregister_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, bool closing)
boost::asio::detail::kqueue_reactor::deregister_internal_descriptor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::deregister_internal_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(socket_type descriptor, kqueue_reactor::per_descriptor_data& descriptor_data)
boost::asio::detail::kqueue_reactor::deregister_internal_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_internal_descriptor($/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:( socket_type descriptor, per_descriptor_data& descriptor_data)
boost::asio::detail::kqueue_reactor::descriptor_state	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  struct descriptor_state$/;"	s	class:boost::asio::detail::kqueue_reactor	access:public
boost::asio::detail::kqueue_reactor::descriptor_state::descriptor_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    int descriptor_;$/;"	m	struct:boost::asio::detail::kqueue_reactor::descriptor_state	access:public
boost::asio::detail::kqueue_reactor::descriptor_state::mutex_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    mutex mutex_;$/;"	m	struct:boost::asio::detail::kqueue_reactor::descriptor_state	access:public
boost::asio::detail::kqueue_reactor::descriptor_state::next_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    descriptor_state* next_;$/;"	m	struct:boost::asio::detail::kqueue_reactor::descriptor_state	access:public
boost::asio::detail::kqueue_reactor::descriptor_state::op_queue_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    op_queue<reactor_op> op_queue_[max_ops];$/;"	m	struct:boost::asio::detail::kqueue_reactor::descriptor_state	access:public
boost::asio::detail::kqueue_reactor::descriptor_state::prev_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    descriptor_state* prev_;$/;"	m	struct:boost::asio::detail::kqueue_reactor::descriptor_state	access:public
boost::asio::detail::kqueue_reactor::descriptor_state::shutdown_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    bool shutdown_;$/;"	m	struct:boost::asio::detail::kqueue_reactor::descriptor_state	access:public
boost::asio::detail::kqueue_reactor::do_add_timer_queue	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::do_add_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timer_queue_base& queue)
boost::asio::detail::kqueue_reactor::do_add_timer_queue	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void do_add_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:private	signature:(timer_queue_base& queue)
boost::asio::detail::kqueue_reactor::do_kqueue_create	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^int kqueue_reactor::do_kqueue_create()$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:()
boost::asio::detail::kqueue_reactor::do_kqueue_create	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL static int do_kqueue_create();$/;"	p	class:boost::asio::detail::kqueue_reactor	access:private	signature:()
boost::asio::detail::kqueue_reactor::do_remove_timer_queue	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::do_remove_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timer_queue_base& queue)
boost::asio::detail::kqueue_reactor::do_remove_timer_queue	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void do_remove_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:private	signature:(timer_queue_base& queue)
boost::asio::detail::kqueue_reactor::except_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::kqueue_reactor::op_types
boost::asio::detail::kqueue_reactor::fork_service	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::fork_service(boost::asio::io_service::fork_event fork_ev)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::kqueue_reactor::fork_service	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void fork_service($/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:( boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::kqueue_reactor::free_descriptor_state	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::free_descriptor_state(kqueue_reactor::descriptor_state* s)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(kqueue_reactor::descriptor_state* s)
boost::asio::detail::kqueue_reactor::free_descriptor_state	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void free_descriptor_state(descriptor_state* s);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:private	signature:(descriptor_state* s)
boost::asio::detail::kqueue_reactor::get_timeout	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^timespec* kqueue_reactor::get_timeout(timespec& ts)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timespec& ts)
boost::asio::detail::kqueue_reactor::get_timeout	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL timespec* get_timeout(timespec& ts);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:private	signature:(timespec& ts)
boost::asio::detail::kqueue_reactor::init_task	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::init_task()$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:()
boost::asio::detail::kqueue_reactor::init_task	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void init_task();$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
boost::asio::detail::kqueue_reactor::interrupt	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::interrupt()$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:()
boost::asio::detail::kqueue_reactor::interrupt	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
boost::asio::detail::kqueue_reactor::interrupter_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::io_service_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::kqueue_fd_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  int kqueue_fd_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::kqueue_reactor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^kqueue_reactor::kqueue_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(boost::asio::io_service& io_service)
boost::asio::detail::kqueue_reactor::kqueue_reactor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL kqueue_reactor(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::kqueue_reactor::max_ops	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::kqueue_reactor::op_types
boost::asio::detail::kqueue_reactor::move_descriptor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::move_descriptor(socket_type,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(socket_type, kqueue_reactor::per_descriptor_data& target_descriptor_data, kqueue_reactor::per_descriptor_data& source_descriptor_data)
boost::asio::detail::kqueue_reactor::move_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void move_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& target_descriptor_data, per_descriptor_data& source_descriptor_data)
boost::asio::detail::kqueue_reactor::mutex_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  mutex mutex_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::op_types	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	g	class:boost::asio::detail::kqueue_reactor	access:public
boost::asio::detail::kqueue_reactor::per_descriptor_data	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  typedef descriptor_state* per_descriptor_data;$/;"	t	class:boost::asio::detail::kqueue_reactor	access:public
boost::asio::detail::kqueue_reactor::post_immediate_completion	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void post_immediate_completion(reactor_op* op)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(reactor_op* op)
boost::asio::detail::kqueue_reactor::read_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:boost::asio::detail::kqueue_reactor::op_types
boost::asio::detail::kqueue_reactor::register_descriptor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^int kqueue_reactor::register_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(socket_type descriptor, kqueue_reactor::per_descriptor_data& descriptor_data)
boost::asio::detail::kqueue_reactor::register_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL int register_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data)
boost::asio::detail::kqueue_reactor::register_internal_descriptor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^int kqueue_reactor::register_internal_descriptor($/;"	f	class:boost::asio::detail::kqueue_reactor	signature:( int op_type, socket_type descriptor, kqueue_reactor::per_descriptor_data& descriptor_data, reactor_op* op)
boost::asio::detail::kqueue_reactor::register_internal_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL int register_internal_descriptor($/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:( int op_type, socket_type descriptor, per_descriptor_data& descriptor_data, reactor_op* op)
boost::asio::detail::kqueue_reactor::registered_descriptors_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  object_pool<descriptor_state> registered_descriptors_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::registered_descriptors_mutex_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  mutex registered_descriptors_mutex_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::remove_timer_queue	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^void kqueue_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::kqueue_reactor::remove_timer_queue	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& queue);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::kqueue_reactor::run	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::run(bool block, op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(bool block, op_queue<operation>& ops)
boost::asio::detail::kqueue_reactor::run	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void run(bool block, op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(bool block, op_queue<operation>& ops)
boost::asio::detail::kqueue_reactor::schedule_timer	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^void kqueue_reactor::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
boost::asio::detail::kqueue_reactor::schedule_timer	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
boost::asio::detail::kqueue_reactor::shutdown_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::shutdown_service	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::shutdown_service()$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:()
boost::asio::detail::kqueue_reactor::shutdown_service	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
boost::asio::detail::kqueue_reactor::start_op	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::start_op(int op_type, socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(int op_type, socket_type descriptor, kqueue_reactor::per_descriptor_data& descriptor_data, reactor_op* op, bool allow_speculative)
boost::asio::detail::kqueue_reactor::start_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void start_op(int op_type, socket_type descriptor,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(int op_type, socket_type descriptor, per_descriptor_data& descriptor_data, reactor_op* op, bool allow_speculative)
boost::asio::detail::kqueue_reactor::timer_queues_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::write_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:boost::asio::detail::kqueue_reactor::op_types
boost::asio::detail::kqueue_reactor::~kqueue_reactor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^kqueue_reactor::~kqueue_reactor()$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:()
boost::asio::detail::kqueue_reactor::~kqueue_reactor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL ~kqueue_reactor();$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
boost::asio::detail::local_free_on_block_exit	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^class local_free_on_block_exit$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::local_free_on_block_exit::local_free_on_block_exit	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^  explicit local_free_on_block_exit(void* p)$/;"	f	class:boost::asio::detail::local_free_on_block_exit	access:public	signature:(void* p)
boost::asio::detail::local_free_on_block_exit::p_	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^  void* p_;$/;"	m	class:boost::asio::detail::local_free_on_block_exit	access:private
boost::asio::detail::local_free_on_block_exit::~local_free_on_block_exit	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^  ~local_free_on_block_exit()$/;"	f	class:boost::asio::detail::local_free_on_block_exit	access:public	signature:()
boost::asio::detail::lvref	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^template <typename T> T& lvref();$/;"	p	namespace:boost::asio::detail	signature:()
boost::asio::detail::lvref	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^template <typename T> T& lvref(T);$/;"	p	namespace:boost::asio::detail	signature:(T)
boost::asio::detail::macos_fenced_block	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^class macos_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::macos_fenced_block::full	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:boost::asio::detail::macos_fenced_block::full_t
boost::asio::detail::macos_fenced_block::full_t	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:boost::asio::detail::macos_fenced_block	access:public
boost::asio::detail::macos_fenced_block::half	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:boost::asio::detail::macos_fenced_block::half_t
boost::asio::detail::macos_fenced_block::half_t	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:boost::asio::detail::macos_fenced_block	access:public
boost::asio::detail::macos_fenced_block::macos_fenced_block	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  explicit macos_fenced_block(full_t)$/;"	f	class:boost::asio::detail::macos_fenced_block	access:public	signature:(full_t)
boost::asio::detail::macos_fenced_block::macos_fenced_block	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  explicit macos_fenced_block(half_t)$/;"	f	class:boost::asio::detail::macos_fenced_block	access:public	signature:(half_t)
boost::asio::detail::macos_fenced_block::~macos_fenced_block	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  ~macos_fenced_block()$/;"	f	class:boost::asio::detail::macos_fenced_block	access:public	signature:()
boost::asio::detail::make_connect_op	/usr/include/boost/asio/impl/connect.hpp	/^  make_connect_op(basic_socket<Protocol, SocketService>& sock,$/;"	f	namespace:boost::asio::detail	signature:(basic_socket<Protocol, SocketService>& sock, const Iterator& begin, const Iterator& end, const ConnectCondition& connect_condition, ComposedConnectHandler handler)
boost::asio::detail::make_read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^  make_read_at_op(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio::detail	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, ReadHandler handler)
boost::asio::detail::make_read_at_streambuf_op	/usr/include/boost/asio/impl/read_at.hpp	/^  make_read_at_streambuf_op(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio::detail	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, ReadHandler handler)
boost::asio::detail::make_read_op	/usr/include/boost/asio/impl/read.hpp	/^  make_read_op(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:boost::asio::detail	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, ReadHandler handler)
boost::asio::detail::make_read_streambuf_op	/usr/include/boost/asio/impl/read.hpp	/^  make_read_streambuf_op($/;"	f	namespace:boost::asio::detail	signature:( AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, ReadHandler handler)
boost::asio::detail::make_read_until_delim_op	/usr/include/boost/asio/impl/read_until.hpp	/^  make_read_until_delim_op(AsyncReadStream& s,$/;"	f	namespace:boost::asio::detail	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, ReadHandler handler)
boost::asio::detail::make_read_until_delim_string_op	/usr/include/boost/asio/impl/read_until.hpp	/^  make_read_until_delim_string_op(AsyncReadStream& s,$/;"	f	namespace:boost::asio::detail	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, ReadHandler handler)
boost::asio::detail::make_read_until_expr_op	/usr/include/boost/asio/impl/read_until.hpp	/^  make_read_until_expr_op(AsyncReadStream& s,$/;"	f	namespace:boost::asio::detail	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const RegEx& expr, ReadHandler handler)
boost::asio::detail::make_read_until_match_op	/usr/include/boost/asio/impl/read_until.hpp	/^  make_read_until_match_op(AsyncReadStream& s,$/;"	f	namespace:boost::asio::detail	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, ReadHandler handler)
boost::asio::detail::make_write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^  make_write_at_op(AsyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio::detail	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, WriteHandler handler)
boost::asio::detail::make_write_at_streambuf_op	/usr/include/boost/asio/impl/write_at.hpp	/^  make_write_at_streambuf_op($/;"	f	namespace:boost::asio::detail	signature:( boost::asio::basic_streambuf<Allocator>& b, WriteHandler handler)
boost::asio::detail::make_write_op	/usr/include/boost/asio/impl/write.hpp	/^  make_write_op(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio::detail	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, WriteHandler handler)
boost::asio::detail::make_write_streambuf_handler	/usr/include/boost/asio/impl/write.hpp	/^  make_write_streambuf_handler($/;"	f	namespace:boost::asio::detail	signature:( boost::asio::basic_streambuf<Allocator>& b, WriteHandler handler)
boost::asio::detail::max_addr_v4_str_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_addr_v4_str_len = 256;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::max_addr_v6_str_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_addr_v6_str_len = 256;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::max_iov_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_iov_len = 16;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::max_iov_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_iov_len = 64;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::max_signal_number	/usr/include/boost/asio/detail/signal_set_service.hpp	/^enum { max_signal_number = NSIG };$/;"	e	enum:boost::asio::detail::__anon15
boost::asio::detail::message_do_not_route	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_do_not_route = MSG_DONTROUTE;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::message_end_of_record	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_end_of_record = 0; \/\/ Not supported on Windows.$/;"	m	namespace:boost::asio::detail
boost::asio::detail::message_out_of_band	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_out_of_band = MSG_OOB;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::message_peek	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_peek = MSG_PEEK;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::mutex	/usr/include/boost/asio/detail/mutex.hpp	/^typedef null_mutex mutex;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^class noncopyable$/;"	c	namespace:boost::asio::detail
boost::asio::detail::noncopyable::dummy_	/usr/include/boost/asio/detail/noncopyable.hpp	/^  char dummy_;$/;"	m	class:boost::asio::detail::noncopyable	access:private
boost::asio::detail::noncopyable::noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^  noncopyable() {}$/;"	f	class:boost::asio::detail::noncopyable	access:protected	signature:()
boost::asio::detail::noncopyable::noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^  noncopyable(const noncopyable&);$/;"	p	class:boost::asio::detail::noncopyable	access:private	signature:(const noncopyable&)
boost::asio::detail::noncopyable::operator =	/usr/include/boost/asio/detail/noncopyable.hpp	/^  const noncopyable& operator=(const noncopyable&);$/;"	p	class:boost::asio::detail::noncopyable	access:private	signature:(const noncopyable&)
boost::asio::detail::noncopyable::~noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^  ~noncopyable() {}$/;"	f	class:boost::asio::detail::noncopyable	access:protected	signature:()
boost::asio::detail::null_event	/usr/include/boost/asio/detail/null_event.hpp	/^class null_event$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::null_event::clear	/usr/include/boost/asio/detail/null_event.hpp	/^  void clear(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
boost::asio::detail::null_event::null_event	/usr/include/boost/asio/detail/null_event.hpp	/^  null_event()$/;"	f	class:boost::asio::detail::null_event	access:public	signature:()
boost::asio::detail::null_event::signal	/usr/include/boost/asio/detail/null_event.hpp	/^  void signal(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
boost::asio::detail::null_event::signal_and_unlock	/usr/include/boost/asio/detail/null_event.hpp	/^  void signal_and_unlock(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
boost::asio::detail::null_event::wait	/usr/include/boost/asio/detail/null_event.hpp	/^  void wait(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
boost::asio::detail::null_event::~null_event	/usr/include/boost/asio/detail/null_event.hpp	/^  ~null_event()$/;"	f	class:boost::asio::detail::null_event	access:public	signature:()
boost::asio::detail::null_fenced_block	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^class null_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::null_fenced_block::full	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	e	enum:boost::asio::detail::null_fenced_block::half_or_full_t
boost::asio::detail::null_fenced_block::half	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	e	enum:boost::asio::detail::null_fenced_block::half_or_full_t
boost::asio::detail::null_fenced_block::half_or_full_t	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	g	class:boost::asio::detail::null_fenced_block	access:public
boost::asio::detail::null_fenced_block::null_fenced_block	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^  explicit null_fenced_block(half_or_full_t)$/;"	f	class:boost::asio::detail::null_fenced_block	access:public	signature:(half_or_full_t)
boost::asio::detail::null_fenced_block::~null_fenced_block	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^  ~null_fenced_block()$/;"	f	class:boost::asio::detail::null_fenced_block	access:public	signature:()
boost::asio::detail::null_mutex	/usr/include/boost/asio/detail/null_mutex.hpp	/^class null_mutex$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::null_mutex::lock	/usr/include/boost/asio/detail/null_mutex.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
boost::asio::detail::null_mutex::null_mutex	/usr/include/boost/asio/detail/null_mutex.hpp	/^  null_mutex()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
boost::asio::detail::null_mutex::scoped_lock	/usr/include/boost/asio/detail/null_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<null_mutex> scoped_lock;$/;"	t	class:boost::asio::detail::null_mutex	access:public
boost::asio::detail::null_mutex::unlock	/usr/include/boost/asio/detail/null_mutex.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
boost::asio::detail::null_mutex::~null_mutex	/usr/include/boost/asio/detail/null_mutex.hpp	/^  ~null_mutex()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
boost::asio::detail::null_signal_blocker	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^class null_signal_blocker$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::null_signal_blocker::block	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  void block()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
boost::asio::detail::null_signal_blocker::null_signal_blocker	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  null_signal_blocker()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
boost::asio::detail::null_signal_blocker::unblock	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  void unblock()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
boost::asio::detail::null_signal_blocker::~null_signal_blocker	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  ~null_signal_blocker()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
boost::asio::detail::null_static_mutex	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^struct null_static_mutex$/;"	s	namespace:boost::asio::detail
boost::asio::detail::null_static_mutex::init	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^  void init()$/;"	f	struct:boost::asio::detail::null_static_mutex	access:public	signature:()
boost::asio::detail::null_static_mutex::lock	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^  void lock()$/;"	f	struct:boost::asio::detail::null_static_mutex	access:public	signature:()
boost::asio::detail::null_static_mutex::scoped_lock	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<null_static_mutex> scoped_lock;$/;"	t	struct:boost::asio::detail::null_static_mutex	access:public
boost::asio::detail::null_static_mutex::unlock	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^  void unlock()$/;"	f	struct:boost::asio::detail::null_static_mutex	access:public	signature:()
boost::asio::detail::null_static_mutex::unused_	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^  int unused_;$/;"	m	struct:boost::asio::detail::null_static_mutex	access:public
boost::asio::detail::null_thread	/usr/include/boost/asio/detail/null_thread.hpp	/^class null_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::null_thread::join	/usr/include/boost/asio/detail/null_thread.hpp	/^  void join()$/;"	f	class:boost::asio::detail::null_thread	access:public	signature:()
boost::asio::detail::null_thread::null_thread	/usr/include/boost/asio/detail/null_thread.hpp	/^  null_thread(Function, unsigned int = 0)$/;"	f	class:boost::asio::detail::null_thread	access:public	signature:(Function, unsigned int = 0)
boost::asio::detail::null_thread::~null_thread	/usr/include/boost/asio/detail/null_thread.hpp	/^  ~null_thread()$/;"	f	class:boost::asio::detail::null_thread	access:public	signature:()
boost::asio::detail::null_tss_ptr	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^class null_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::null_tss_ptr::null_tss_ptr	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  null_tss_ptr()$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:()
boost::asio::detail::null_tss_ptr::operator =	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:(T* value)
boost::asio::detail::null_tss_ptr::operator T*	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:() const
boost::asio::detail::null_tss_ptr::value_	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  T* value_;$/;"	m	class:boost::asio::detail::null_tss_ptr	access:private
boost::asio::detail::null_tss_ptr::~null_tss_ptr	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  ~null_tss_ptr()$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:()
boost::asio::detail::object_pool	/usr/include/boost/asio/detail/object_pool.hpp	/^class object_pool$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::object_pool::alloc	/usr/include/boost/asio/detail/object_pool.hpp	/^  Object* alloc()$/;"	f	class:boost::asio::detail::object_pool	access:public	signature:()
boost::asio::detail::object_pool::destroy_list	/usr/include/boost/asio/detail/object_pool.hpp	/^  void destroy_list(Object* list)$/;"	f	class:boost::asio::detail::object_pool	access:private	signature:(Object* list)
boost::asio::detail::object_pool::first	/usr/include/boost/asio/detail/object_pool.hpp	/^  Object* first()$/;"	f	class:boost::asio::detail::object_pool	access:public	signature:()
boost::asio::detail::object_pool::free	/usr/include/boost/asio/detail/object_pool.hpp	/^  void free(Object* o)$/;"	f	class:boost::asio::detail::object_pool	access:public	signature:(Object* o)
boost::asio::detail::object_pool::free_list_	/usr/include/boost/asio/detail/object_pool.hpp	/^  Object* free_list_;$/;"	m	class:boost::asio::detail::object_pool	access:private
boost::asio::detail::object_pool::live_list_	/usr/include/boost/asio/detail/object_pool.hpp	/^  Object* live_list_;$/;"	m	class:boost::asio::detail::object_pool	access:private
boost::asio::detail::object_pool::object_pool	/usr/include/boost/asio/detail/object_pool.hpp	/^  object_pool()$/;"	f	class:boost::asio::detail::object_pool	access:public	signature:()
boost::asio::detail::object_pool::~object_pool	/usr/include/boost/asio/detail/object_pool.hpp	/^  ~object_pool()$/;"	f	class:boost::asio::detail::object_pool	access:public	signature:()
boost::asio::detail::object_pool_access	/usr/include/boost/asio/detail/object_pool.hpp	/^class object_pool_access$/;"	c	namespace:boost::asio::detail
boost::asio::detail::object_pool_access::create	/usr/include/boost/asio/detail/object_pool.hpp	/^  static Object* create()$/;"	f	class:boost::asio::detail::object_pool_access	access:public	signature:()
boost::asio::detail::object_pool_access::destroy	/usr/include/boost/asio/detail/object_pool.hpp	/^  static void destroy(Object* o)$/;"	f	class:boost::asio::detail::object_pool_access	access:public	signature:(Object* o)
boost::asio::detail::object_pool_access::next	/usr/include/boost/asio/detail/object_pool.hpp	/^  static Object*& next(Object* o)$/;"	f	class:boost::asio::detail::object_pool_access	access:public	signature:(Object* o)
boost::asio::detail::object_pool_access::prev	/usr/include/boost/asio/detail/object_pool.hpp	/^  static Object*& prev(Object* o)$/;"	f	class:boost::asio::detail::object_pool_access	access:public	signature:(Object* o)
boost::asio::detail::one_arg_handler_test	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^char (&one_arg_handler_test(Handler h, ...))[2];$/;"	p	namespace:boost::asio::detail	signature:(Handler h, ...)
boost::asio::detail::op_queue	/usr/include/boost/asio/detail/op_queue.hpp	/^class op_queue$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::op_queue::back_	/usr/include/boost/asio/detail/op_queue.hpp	/^  Operation* back_;$/;"	m	class:boost::asio::detail::op_queue	access:private
boost::asio::detail::op_queue::empty	/usr/include/boost/asio/detail/op_queue.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:() const
boost::asio::detail::op_queue::front	/usr/include/boost/asio/detail/op_queue.hpp	/^  Operation* front()$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:()
boost::asio::detail::op_queue::front_	/usr/include/boost/asio/detail/op_queue.hpp	/^  Operation* front_;$/;"	m	class:boost::asio::detail::op_queue	access:private
boost::asio::detail::op_queue::op_queue	/usr/include/boost/asio/detail/op_queue.hpp	/^  op_queue()$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:()
boost::asio::detail::op_queue::pop	/usr/include/boost/asio/detail/op_queue.hpp	/^  void pop()$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:()
boost::asio::detail::op_queue::push	/usr/include/boost/asio/detail/op_queue.hpp	/^  void push(Operation* h)$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:(Operation* h)
boost::asio::detail::op_queue::push	/usr/include/boost/asio/detail/op_queue.hpp	/^  void push(op_queue<OtherOperation>& q)$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:(op_queue<OtherOperation>& q)
boost::asio::detail::op_queue::~op_queue	/usr/include/boost/asio/detail/op_queue.hpp	/^  ~op_queue()$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:()
boost::asio::detail::op_queue_access	/usr/include/boost/asio/detail/op_queue.hpp	/^class op_queue_access$/;"	c	namespace:boost::asio::detail
boost::asio::detail::op_queue_access::back	/usr/include/boost/asio/detail/op_queue.hpp	/^  static Operation*& back(op_queue<Operation>& q)$/;"	f	class:boost::asio::detail::op_queue_access	access:public	signature:(op_queue<Operation>& q)
boost::asio::detail::op_queue_access::destroy	/usr/include/boost/asio/detail/op_queue.hpp	/^  static void destroy(Operation* o)$/;"	f	class:boost::asio::detail::op_queue_access	access:public	signature:(Operation* o)
boost::asio::detail::op_queue_access::front	/usr/include/boost/asio/detail/op_queue.hpp	/^  static Operation*& front(op_queue<Operation>& q)$/;"	f	class:boost::asio::detail::op_queue_access	access:public	signature:(op_queue<Operation>& q)
boost::asio::detail::op_queue_access::next	/usr/include/boost/asio/detail/op_queue.hpp	/^  static Operation* next(Operation* o)$/;"	f	class:boost::asio::detail::op_queue_access	access:public	signature:(Operation* o)
boost::asio::detail::op_queue_access::next	/usr/include/boost/asio/detail/op_queue.hpp	/^  static void next(Operation1*& o1, Operation2* o2)$/;"	f	class:boost::asio::detail::op_queue_access	access:public	signature:(Operation1*& o1, Operation2* o2)
boost::asio::detail::operation	/usr/include/boost/asio/detail/operation.hpp	/^typedef win_iocp_operation operation;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::partial_search	/usr/include/boost/asio/impl/read_until.hpp	/^  std::pair<Iterator1, bool> partial_search($/;"	f	namespace:boost::asio::detail	signature:( Iterator1 first1, Iterator1 last1, Iterator2 first2, Iterator2 last2)
boost::asio::detail::pipe_select_interrupter	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^class pipe_select_interrupter$/;"	c	namespace:boost::asio::detail
boost::asio::detail::pipe_select_interrupter::close_descriptors	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^void pipe_select_interrupter::close_descriptors()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
boost::asio::detail::pipe_select_interrupter::close_descriptors	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL void close_descriptors();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:private	signature:()
boost::asio::detail::pipe_select_interrupter::interrupt	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^void pipe_select_interrupter::interrupt()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
boost::asio::detail::pipe_select_interrupter::interrupt	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
boost::asio::detail::pipe_select_interrupter::open_descriptors	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^void pipe_select_interrupter::open_descriptors()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
boost::asio::detail::pipe_select_interrupter::open_descriptors	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL void open_descriptors();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:private	signature:()
boost::asio::detail::pipe_select_interrupter::pipe_select_interrupter	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^pipe_select_interrupter::pipe_select_interrupter()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
boost::asio::detail::pipe_select_interrupter::pipe_select_interrupter	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL pipe_select_interrupter();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
boost::asio::detail::pipe_select_interrupter::read_descriptor	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  int read_descriptor() const$/;"	f	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:() const
boost::asio::detail::pipe_select_interrupter::read_descriptor_	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  int read_descriptor_;$/;"	m	class:boost::asio::detail::pipe_select_interrupter	access:private
boost::asio::detail::pipe_select_interrupter::recreate	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^void pipe_select_interrupter::recreate()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
boost::asio::detail::pipe_select_interrupter::recreate	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL void recreate();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
boost::asio::detail::pipe_select_interrupter::reset	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^bool pipe_select_interrupter::reset()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
boost::asio::detail::pipe_select_interrupter::reset	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL bool reset();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
boost::asio::detail::pipe_select_interrupter::write_descriptor_	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  int write_descriptor_;$/;"	m	class:boost::asio::detail::pipe_select_interrupter	access:private
boost::asio::detail::pipe_select_interrupter::~pipe_select_interrupter	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^pipe_select_interrupter::~pipe_select_interrupter()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
boost::asio::detail::pipe_select_interrupter::~pipe_select_interrupter	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL ~pipe_select_interrupter();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
boost::asio::detail::posix_event	/usr/include/boost/asio/detail/posix_event.hpp	/^class posix_event$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::posix_event::clear	/usr/include/boost/asio/detail/posix_event.hpp	/^  void clear(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
boost::asio::detail::posix_event::cond_	/usr/include/boost/asio/detail/posix_event.hpp	/^  ::pthread_cond_t cond_;$/;"	m	class:boost::asio::detail::posix_event	access:private
boost::asio::detail::posix_event::posix_event	/usr/include/boost/asio/detail/impl/posix_event.ipp	/^posix_event::posix_event()$/;"	f	class:boost::asio::detail::posix_event	signature:()
boost::asio::detail::posix_event::posix_event	/usr/include/boost/asio/detail/posix_event.hpp	/^  BOOST_ASIO_DECL posix_event();$/;"	p	class:boost::asio::detail::posix_event	access:public	signature:()
boost::asio::detail::posix_event::signal	/usr/include/boost/asio/detail/posix_event.hpp	/^  void signal(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
boost::asio::detail::posix_event::signal_and_unlock	/usr/include/boost/asio/detail/posix_event.hpp	/^  void signal_and_unlock(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
boost::asio::detail::posix_event::signalled_	/usr/include/boost/asio/detail/posix_event.hpp	/^  bool signalled_;$/;"	m	class:boost::asio::detail::posix_event	access:private
boost::asio::detail::posix_event::wait	/usr/include/boost/asio/detail/posix_event.hpp	/^  void wait(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
boost::asio::detail::posix_event::~posix_event	/usr/include/boost/asio/detail/posix_event.hpp	/^  ~posix_event()$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:()
boost::asio::detail::posix_fd_set_adapter	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^class posix_fd_set_adapter : noncopyable$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::posix_fd_set_adapter::fd_set_	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  mutable fd_set fd_set_;$/;"	m	class:boost::asio::detail::posix_fd_set_adapter	access:private
boost::asio::detail::posix_fd_set_adapter::is_set	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  bool is_set(socket_type descriptor) const$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:(socket_type descriptor) const
boost::asio::detail::posix_fd_set_adapter::max_descriptor	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  socket_type max_descriptor() const$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:() const
boost::asio::detail::posix_fd_set_adapter::max_descriptor_	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  socket_type max_descriptor_;$/;"	m	class:boost::asio::detail::posix_fd_set_adapter	access:private
boost::asio::detail::posix_fd_set_adapter::operator fd_set*	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  operator fd_set*()$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:()
boost::asio::detail::posix_fd_set_adapter::posix_fd_set_adapter	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  posix_fd_set_adapter()$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:()
boost::asio::detail::posix_fd_set_adapter::reset	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:()
boost::asio::detail::posix_fd_set_adapter::set	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  bool set(socket_type descriptor)$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:(socket_type descriptor)
boost::asio::detail::posix_mutex	/usr/include/boost/asio/detail/posix_mutex.hpp	/^class posix_mutex$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::posix_mutex::lock	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
boost::asio::detail::posix_mutex::mutex_	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  ::pthread_mutex_t mutex_;$/;"	m	class:boost::asio::detail::posix_mutex	access:private
boost::asio::detail::posix_mutex::posix_mutex	/usr/include/boost/asio/detail/impl/posix_mutex.ipp	/^posix_mutex::posix_mutex()$/;"	f	class:boost::asio::detail::posix_mutex	signature:()
boost::asio::detail::posix_mutex::posix_mutex	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  BOOST_ASIO_DECL posix_mutex();$/;"	p	class:boost::asio::detail::posix_mutex	access:public	signature:()
boost::asio::detail::posix_mutex::scoped_lock	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<posix_mutex> scoped_lock;$/;"	t	class:boost::asio::detail::posix_mutex	access:public
boost::asio::detail::posix_mutex::unlock	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
boost::asio::detail::posix_mutex::~posix_mutex	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  ~posix_mutex()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
boost::asio::detail::posix_signal_blocker	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^class posix_signal_blocker$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::posix_signal_blocker::block	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  void block()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
boost::asio::detail::posix_signal_blocker::blocked_	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  bool blocked_;$/;"	m	class:boost::asio::detail::posix_signal_blocker	access:private
boost::asio::detail::posix_signal_blocker::old_mask_	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  sigset_t old_mask_;$/;"	m	class:boost::asio::detail::posix_signal_blocker	access:private
boost::asio::detail::posix_signal_blocker::posix_signal_blocker	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  posix_signal_blocker()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
boost::asio::detail::posix_signal_blocker::unblock	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  void unblock()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
boost::asio::detail::posix_signal_blocker::~posix_signal_blocker	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  ~posix_signal_blocker()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
boost::asio::detail::posix_static_mutex	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^struct posix_static_mutex$/;"	s	namespace:boost::asio::detail
boost::asio::detail::posix_static_mutex::init	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^  void init()$/;"	f	struct:boost::asio::detail::posix_static_mutex	access:public	signature:()
boost::asio::detail::posix_static_mutex::lock	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^  void lock()$/;"	f	struct:boost::asio::detail::posix_static_mutex	access:public	signature:()
boost::asio::detail::posix_static_mutex::mutex_	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^  ::pthread_mutex_t mutex_;$/;"	m	struct:boost::asio::detail::posix_static_mutex	access:public
boost::asio::detail::posix_static_mutex::scoped_lock	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<posix_static_mutex> scoped_lock;$/;"	t	struct:boost::asio::detail::posix_static_mutex	access:public
boost::asio::detail::posix_static_mutex::unlock	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^  void unlock()$/;"	f	struct:boost::asio::detail::posix_static_mutex	access:public	signature:()
boost::asio::detail::posix_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^class posix_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::posix_thread::auto_func_base_ptr	/usr/include/boost/asio/detail/posix_thread.hpp	/^  struct auto_func_base_ptr$/;"	s	class:boost::asio::detail::posix_thread	access:private
boost::asio::detail::posix_thread::auto_func_base_ptr::ptr	/usr/include/boost/asio/detail/posix_thread.hpp	/^    func_base* ptr;$/;"	m	struct:boost::asio::detail::posix_thread::auto_func_base_ptr	access:public
boost::asio::detail::posix_thread::auto_func_base_ptr::~auto_func_base_ptr	/usr/include/boost/asio/detail/posix_thread.hpp	/^    ~auto_func_base_ptr() { delete ptr; }$/;"	f	struct:boost::asio::detail::posix_thread::auto_func_base_ptr	access:public	signature:()
boost::asio::detail::posix_thread::boost_asio_detail_posix_thread_function	/usr/include/boost/asio/detail/posix_thread.hpp	/^  friend void* boost_asio_detail_posix_thread_function(void* arg);$/;"	p	class:boost::asio::detail::posix_thread	access:friend	signature:(void* arg)
boost::asio::detail::posix_thread::func	/usr/include/boost/asio/detail/posix_thread.hpp	/^  class func$/;"	c	class:boost::asio::detail::posix_thread	inherits:func_base	access:private
boost::asio::detail::posix_thread::func::f_	/usr/include/boost/asio/detail/posix_thread.hpp	/^    Function f_;$/;"	m	class:boost::asio::detail::posix_thread::func	access:private
boost::asio::detail::posix_thread::func::func	/usr/include/boost/asio/detail/posix_thread.hpp	/^    func(Function f)$/;"	f	class:boost::asio::detail::posix_thread::func	access:public	signature:(Function f)
boost::asio::detail::posix_thread::func::run	/usr/include/boost/asio/detail/posix_thread.hpp	/^    virtual void run()$/;"	f	class:boost::asio::detail::posix_thread::func	access:public	signature:()
boost::asio::detail::posix_thread::func_base	/usr/include/boost/asio/detail/posix_thread.hpp	/^  class func_base$/;"	c	class:boost::asio::detail::posix_thread	access:private
boost::asio::detail::posix_thread::func_base::run	/usr/include/boost/asio/detail/posix_thread.hpp	/^    virtual void run() = 0;$/;"	p	class:boost::asio::detail::posix_thread::func_base	access:public	signature:()
boost::asio::detail::posix_thread::func_base::~func_base	/usr/include/boost/asio/detail/posix_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:boost::asio::detail::posix_thread::func_base	access:public	signature:()
boost::asio::detail::posix_thread::join	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^void posix_thread::join()$/;"	f	class:boost::asio::detail::posix_thread	signature:()
boost::asio::detail::posix_thread::join	/usr/include/boost/asio/detail/posix_thread.hpp	/^  BOOST_ASIO_DECL void join();$/;"	p	class:boost::asio::detail::posix_thread	access:public	signature:()
boost::asio::detail::posix_thread::joined_	/usr/include/boost/asio/detail/posix_thread.hpp	/^  bool joined_;$/;"	m	class:boost::asio::detail::posix_thread	access:private
boost::asio::detail::posix_thread::posix_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^  posix_thread(Function f, unsigned int = 0)$/;"	f	class:boost::asio::detail::posix_thread	access:public	signature:(Function f, unsigned int = 0)
boost::asio::detail::posix_thread::start_thread	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^void posix_thread::start_thread(func_base* arg)$/;"	f	class:boost::asio::detail::posix_thread	signature:(func_base* arg)
boost::asio::detail::posix_thread::start_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^  BOOST_ASIO_DECL void start_thread(func_base* arg);$/;"	p	class:boost::asio::detail::posix_thread	access:private	signature:(func_base* arg)
boost::asio::detail::posix_thread::thread_	/usr/include/boost/asio/detail/posix_thread.hpp	/^  ::pthread_t thread_;$/;"	m	class:boost::asio::detail::posix_thread	access:private
boost::asio::detail::posix_thread::~posix_thread	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^posix_thread::~posix_thread()$/;"	f	class:boost::asio::detail::posix_thread	signature:()
boost::asio::detail::posix_thread::~posix_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^  BOOST_ASIO_DECL ~posix_thread();$/;"	p	class:boost::asio::detail::posix_thread	access:public	signature:()
boost::asio::detail::posix_tss_ptr	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^class posix_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::posix_tss_ptr::operator =	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:(T* value)
boost::asio::detail::posix_tss_ptr::operator T*	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:() const
boost::asio::detail::posix_tss_ptr::posix_tss_ptr	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  posix_tss_ptr()$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:()
boost::asio::detail::posix_tss_ptr::tss_key_	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  pthread_key_t tss_key_;$/;"	m	class:boost::asio::detail::posix_tss_ptr	access:private
boost::asio::detail::posix_tss_ptr::~posix_tss_ptr	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  ~posix_tss_ptr()$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:()
boost::asio::detail::posix_tss_ptr_create	/usr/include/boost/asio/detail/impl/posix_tss_ptr.ipp	/^void posix_tss_ptr_create(pthread_key_t& key)$/;"	f	namespace:boost::asio::detail	signature:(pthread_key_t& key)
boost::asio::detail::posix_tss_ptr_create	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^BOOST_ASIO_DECL void posix_tss_ptr_create(pthread_key_t& key);$/;"	p	namespace:boost::asio::detail	signature:(pthread_key_t& key)
boost::asio::detail::reactive_descriptor_service	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^class reactive_descriptor_service$/;"	c	namespace:boost::asio::detail
boost::asio::detail::reactive_descriptor_service::assign	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^boost::system::error_code reactive_descriptor_service::assign($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl, const native_handle_type& native_descriptor, boost::system::error_code& ec)
boost::asio::detail::reactive_descriptor_service::assign	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code assign(implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const native_handle_type& native_descriptor, boost::system::error_code& ec)
boost::asio::detail::reactive_descriptor_service::async_read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
boost::asio::detail::reactive_descriptor_service::async_read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const null_buffers&, Handler handler)
boost::asio::detail::reactive_descriptor_service::async_write_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
boost::asio::detail::reactive_descriptor_service::async_write_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const null_buffers&, Handler handler)
boost::asio::detail::reactive_descriptor_service::cancel	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^boost::system::error_code reactive_descriptor_service::cancel($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_descriptor_service::cancel	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code cancel(implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_descriptor_service::close	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^boost::system::error_code reactive_descriptor_service::close($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_descriptor_service::close	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code close(implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_descriptor_service::construct	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^void reactive_descriptor_service::construct($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl)
boost::asio::detail::reactive_descriptor_service::construct	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL void construct(implementation_type& impl);$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::reactive_descriptor_service::destroy	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^void reactive_descriptor_service::destroy($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl)
boost::asio::detail::reactive_descriptor_service::destroy	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL void destroy(implementation_type& impl);$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::reactive_descriptor_service::implementation_type	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::reactive_descriptor_service	inherits:boost::asio::detail::noncopyable	access:public
boost::asio::detail::reactive_descriptor_service::implementation_type::descriptor_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    int descriptor_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:private
boost::asio::detail::reactive_descriptor_service::implementation_type::implementation_type	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:public	signature:()
boost::asio::detail::reactive_descriptor_service::implementation_type::reactor_data_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    reactor::per_descriptor_data reactor_data_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:private
boost::asio::detail::reactive_descriptor_service::implementation_type::state_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    descriptor_ops::state_type state_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:private
boost::asio::detail::reactive_descriptor_service::io_control	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, IO_Control_Command& command, boost::system::error_code& ec)
boost::asio::detail::reactive_descriptor_service::is_open	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::reactive_descriptor_service::move_assign	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^void reactive_descriptor_service::move_assign($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl, reactive_descriptor_service& other_service, reactive_descriptor_service::implementation_type& other_impl)
boost::asio::detail::reactive_descriptor_service::move_assign	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL void move_assign(implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, reactive_descriptor_service& other_service, implementation_type& other_impl)
boost::asio::detail::reactive_descriptor_service::move_construct	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^void reactive_descriptor_service::move_construct($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl, reactive_descriptor_service::implementation_type& other_impl)
boost::asio::detail::reactive_descriptor_service::move_construct	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL void move_construct(implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::detail::reactive_descriptor_service::native_handle	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  native_handle_type native_handle(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::reactive_descriptor_service::native_handle_type	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  typedef int native_handle_type;$/;"	t	class:boost::asio::detail::reactive_descriptor_service	access:public
boost::asio::detail::reactive_descriptor_service::native_non_blocking	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::reactive_descriptor_service::native_non_blocking	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::detail::reactive_descriptor_service::non_blocking	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::reactive_descriptor_service::non_blocking	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::detail::reactive_descriptor_service::reactive_descriptor_service	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^reactive_descriptor_service::reactive_descriptor_service($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( boost::asio::io_service& io_service)
boost::asio::detail::reactive_descriptor_service::reactive_descriptor_service	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL reactive_descriptor_service($/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:( boost::asio::io_service& io_service)
boost::asio::detail::reactive_descriptor_service::reactor_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  reactor& reactor_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service	access:private
boost::asio::detail::reactive_descriptor_service::read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::reactive_descriptor_service::read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const null_buffers&, boost::system::error_code& ec)
boost::asio::detail::reactive_descriptor_service::release	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^reactive_descriptor_service::release($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl)
boost::asio::detail::reactive_descriptor_service::release	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL native_handle_type release(implementation_type& impl);$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::reactive_descriptor_service::shutdown_service	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^void reactive_descriptor_service::shutdown_service()$/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:()
boost::asio::detail::reactive_descriptor_service::shutdown_service	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:()
boost::asio::detail::reactive_descriptor_service::start_op	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^void reactive_descriptor_service::start_op($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl, int op_type, reactor_op* op, bool is_non_blocking, bool noop)
boost::asio::detail::reactive_descriptor_service::start_op	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL void start_op(implementation_type& impl, int op_type,$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:private	signature:(implementation_type& impl, int op_type, reactor_op* op, bool is_non_blocking, bool noop)
boost::asio::detail::reactive_descriptor_service::write_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::reactive_descriptor_service::write_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const null_buffers&, boost::system::error_code& ec)
boost::asio::detail::reactive_null_buffers_op	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^class reactive_null_buffers_op : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
boost::asio::detail::reactive_null_buffers_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_null_buffers_op);$/;"	p	class:boost::asio::detail::reactive_null_buffers_op	access:public	signature:(reactive_null_buffers_op)
boost::asio::detail::reactive_null_buffers_op::do_complete	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_null_buffers_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::reactive_null_buffers_op::do_perform	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^  static bool do_perform(reactor_op*)$/;"	f	class:boost::asio::detail::reactive_null_buffers_op	access:public	signature:(reactor_op*)
boost::asio::detail::reactive_null_buffers_op::handler_	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_null_buffers_op	access:private
boost::asio::detail::reactive_null_buffers_op::reactive_null_buffers_op	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^  reactive_null_buffers_op(Handler& handler)$/;"	f	class:boost::asio::detail::reactive_null_buffers_op	access:public	signature:(Handler& handler)
boost::asio::detail::reactive_serial_port_service	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^class reactive_serial_port_service$/;"	c	namespace:boost::asio::detail
boost::asio::detail::reactive_serial_port_service::assign	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const native_handle_type& native_descriptor, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::async_read_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
boost::asio::detail::reactive_serial_port_service::async_write_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
boost::asio::detail::reactive_serial_port_service::boost::system::load_function_type	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  typedef boost::system::error_code (*load_function_type)($/;"	t	class:boost::asio::detail::reactive_serial_port_service::boost::system	access:private
boost::asio::detail::reactive_serial_port_service::boost::system::store_function_type	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  typedef boost::system::error_code (*store_function_type)($/;"	t	class:boost::asio::detail::reactive_serial_port_service::boost::system	access:private
boost::asio::detail::reactive_serial_port_service::cancel	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::close	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::construct	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::reactive_serial_port_service::descriptor_service_	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  reactive_descriptor_service descriptor_service_;$/;"	m	class:boost::asio::detail::reactive_serial_port_service	access:private
boost::asio::detail::reactive_serial_port_service::destroy	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::reactive_serial_port_service::do_get_option	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^boost::system::error_code reactive_serial_port_service::do_get_option($/;"	f	class:boost::asio::detail::reactive_serial_port_service	signature:( const reactive_serial_port_service::implementation_type& impl, reactive_serial_port_service::load_function_type load, void* option, boost::system::error_code& ec) const
boost::asio::detail::reactive_serial_port_service::do_get_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_get_option($/;"	p	class:boost::asio::detail::reactive_serial_port_service	access:private	signature:( const implementation_type& impl, load_function_type load, void* option, boost::system::error_code& ec) const
boost::asio::detail::reactive_serial_port_service::do_set_option	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^boost::system::error_code reactive_serial_port_service::do_set_option($/;"	f	class:boost::asio::detail::reactive_serial_port_service	signature:( reactive_serial_port_service::implementation_type& impl, reactive_serial_port_service::store_function_type store, const void* option, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::do_set_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_set_option($/;"	p	class:boost::asio::detail::reactive_serial_port_service	access:private	signature:( implementation_type& impl, store_function_type store, const void* option, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::get_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(const implementation_type& impl, GettableSerialPortOption& option, boost::system::error_code& ec) const
boost::asio::detail::reactive_serial_port_service::implementation_type	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  typedef reactive_descriptor_service::implementation_type implementation_type;$/;"	t	class:boost::asio::detail::reactive_serial_port_service	access:public
boost::asio::detail::reactive_serial_port_service::is_open	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::reactive_serial_port_service::load_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  static boost::system::error_code load_option(void* option,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:private	signature:(void* option, const termios& storage, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::move_assign	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, reactive_serial_port_service& other_service, implementation_type& other_impl)
boost::asio::detail::reactive_serial_port_service::move_construct	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::detail::reactive_serial_port_service::native_handle	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::reactive_serial_port_service::native_handle_type	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  typedef reactive_descriptor_service::native_handle_type native_handle_type;$/;"	t	class:boost::asio::detail::reactive_serial_port_service	access:public
boost::asio::detail::reactive_serial_port_service::open	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^boost::system::error_code reactive_serial_port_service::open($/;"	f	class:boost::asio::detail::reactive_serial_port_service	signature:( reactive_serial_port_service::implementation_type& impl, const std::string& device, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::open	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code open(implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const std::string& device, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::reactive_serial_port_service	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^reactive_serial_port_service::reactive_serial_port_service($/;"	f	class:boost::asio::detail::reactive_serial_port_service	signature:( boost::asio::io_service& io_service)
boost::asio::detail::reactive_serial_port_service::reactive_serial_port_service	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  BOOST_ASIO_DECL reactive_serial_port_service($/;"	p	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:( boost::asio::io_service& io_service)
boost::asio::detail::reactive_serial_port_service::read_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::send_break	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code send_break(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::set_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const SettableSerialPortOption& option, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::shutdown_service	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^void reactive_serial_port_service::shutdown_service()$/;"	f	class:boost::asio::detail::reactive_serial_port_service	signature:()
boost::asio::detail::reactive_serial_port_service::shutdown_service	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:()
boost::asio::detail::reactive_serial_port_service::store_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  static boost::system::error_code store_option(const void* option,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:private	signature:(const void* option, termios& storage, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::write_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_accept_op	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^class reactive_socket_accept_op :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_accept_op_base
boost::asio::detail::reactive_socket_accept_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_accept_op);$/;"	p	class:boost::asio::detail::reactive_socket_accept_op	access:public	signature:(reactive_socket_accept_op)
boost::asio::detail::reactive_socket_accept_op::do_complete	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_accept_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::reactive_socket_accept_op::handler_	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_accept_op	access:private
boost::asio::detail::reactive_socket_accept_op::reactive_socket_accept_op	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  reactive_socket_accept_op(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_accept_op	access:public	signature:(socket_type socket, socket_ops::state_type state, Socket& peer, const Protocol& protocol, typename Protocol::endpoint* peer_endpoint, Handler& handler)
boost::asio::detail::reactive_socket_accept_op_base	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^class reactive_socket_accept_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
boost::asio::detail::reactive_socket_accept_op_base::do_perform	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_accept_op_base	access:public	signature:(reactor_op* base)
boost::asio::detail::reactive_socket_accept_op_base::peer_	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  Socket& peer_;$/;"	m	class:boost::asio::detail::reactive_socket_accept_op_base	access:private
boost::asio::detail::reactive_socket_accept_op_base::peer_endpoint_	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  typename Protocol::endpoint* peer_endpoint_;$/;"	m	class:boost::asio::detail::reactive_socket_accept_op_base	access:private
boost::asio::detail::reactive_socket_accept_op_base::protocol_	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  Protocol protocol_;$/;"	m	class:boost::asio::detail::reactive_socket_accept_op_base	access:private
boost::asio::detail::reactive_socket_accept_op_base::reactive_socket_accept_op_base	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  reactive_socket_accept_op_base(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_accept_op_base	access:public	signature:(socket_type socket, socket_ops::state_type state, Socket& peer, const Protocol& protocol, typename Protocol::endpoint* peer_endpoint, func_type complete_func)
boost::asio::detail::reactive_socket_accept_op_base::socket_	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_accept_op_base	access:private
boost::asio::detail::reactive_socket_accept_op_base::state_	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  socket_ops::state_type state_;$/;"	m	class:boost::asio::detail::reactive_socket_accept_op_base	access:private
boost::asio::detail::reactive_socket_connect_op	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^class reactive_socket_connect_op : public reactive_socket_connect_op_base$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_connect_op_base
boost::asio::detail::reactive_socket_connect_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_connect_op);$/;"	p	class:boost::asio::detail::reactive_socket_connect_op	access:public	signature:(reactive_socket_connect_op)
boost::asio::detail::reactive_socket_connect_op::do_complete	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_connect_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::reactive_socket_connect_op::handler_	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_connect_op	access:private
boost::asio::detail::reactive_socket_connect_op::reactive_socket_connect_op	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  reactive_socket_connect_op(socket_type socket, Handler& handler)$/;"	f	class:boost::asio::detail::reactive_socket_connect_op	access:public	signature:(socket_type socket, Handler& handler)
boost::asio::detail::reactive_socket_connect_op_base	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^class reactive_socket_connect_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
boost::asio::detail::reactive_socket_connect_op_base::do_perform	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_connect_op_base	access:public	signature:(reactor_op* base)
boost::asio::detail::reactive_socket_connect_op_base::reactive_socket_connect_op_base	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  reactive_socket_connect_op_base(socket_type socket, func_type complete_func)$/;"	f	class:boost::asio::detail::reactive_socket_connect_op_base	access:public	signature:(socket_type socket, func_type complete_func)
boost::asio::detail::reactive_socket_connect_op_base::socket_	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_connect_op_base	access:private
boost::asio::detail::reactive_socket_recv_op	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^class reactive_socket_recv_op :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_recv_op_base
boost::asio::detail::reactive_socket_recv_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_recv_op);$/;"	p	class:boost::asio::detail::reactive_socket_recv_op	access:public	signature:(reactive_socket_recv_op)
boost::asio::detail::reactive_socket_recv_op::do_complete	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_recv_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::reactive_socket_recv_op::handler_	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_recv_op	access:private
boost::asio::detail::reactive_socket_recv_op::reactive_socket_recv_op	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  reactive_socket_recv_op(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_recv_op	access:public	signature:(socket_type socket, socket_ops::state_type state, const MutableBufferSequence& buffers, socket_base::message_flags flags, Handler& handler)
boost::asio::detail::reactive_socket_recv_op_base	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^class reactive_socket_recv_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
boost::asio::detail::reactive_socket_recv_op_base::buffers_	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::reactive_socket_recv_op_base	access:private
boost::asio::detail::reactive_socket_recv_op_base::do_perform	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_recv_op_base	access:public	signature:(reactor_op* base)
boost::asio::detail::reactive_socket_recv_op_base::flags_	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::reactive_socket_recv_op_base	access:private
boost::asio::detail::reactive_socket_recv_op_base::reactive_socket_recv_op_base	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  reactive_socket_recv_op_base(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_recv_op_base	access:public	signature:(socket_type socket, socket_ops::state_type state, const MutableBufferSequence& buffers, socket_base::message_flags flags, func_type complete_func)
boost::asio::detail::reactive_socket_recv_op_base::socket_	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_recv_op_base	access:private
boost::asio::detail::reactive_socket_recv_op_base::state_	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  socket_ops::state_type state_;$/;"	m	class:boost::asio::detail::reactive_socket_recv_op_base	access:private
boost::asio::detail::reactive_socket_recvfrom_op	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^class reactive_socket_recvfrom_op :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_recvfrom_op_base
boost::asio::detail::reactive_socket_recvfrom_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_recvfrom_op);$/;"	p	class:boost::asio::detail::reactive_socket_recvfrom_op	access:public	signature:(reactive_socket_recvfrom_op)
boost::asio::detail::reactive_socket_recvfrom_op::do_complete	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_recvfrom_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::reactive_socket_recvfrom_op::handler_	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_recvfrom_op	access:private
boost::asio::detail::reactive_socket_recvfrom_op::reactive_socket_recvfrom_op	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  reactive_socket_recvfrom_op(socket_type socket, int protocol_type,$/;"	f	class:boost::asio::detail::reactive_socket_recvfrom_op	access:public	signature:(socket_type socket, int protocol_type, const MutableBufferSequence& buffers, Endpoint& endpoint, socket_base::message_flags flags, Handler& handler)
boost::asio::detail::reactive_socket_recvfrom_op_base	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^class reactive_socket_recvfrom_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
boost::asio::detail::reactive_socket_recvfrom_op_base::buffers_	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:private
boost::asio::detail::reactive_socket_recvfrom_op_base::do_perform	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:public	signature:(reactor_op* base)
boost::asio::detail::reactive_socket_recvfrom_op_base::flags_	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:private
boost::asio::detail::reactive_socket_recvfrom_op_base::protocol_type_	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  int protocol_type_;$/;"	m	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:private
boost::asio::detail::reactive_socket_recvfrom_op_base::reactive_socket_recvfrom_op_base	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  reactive_socket_recvfrom_op_base(socket_type socket, int protocol_type,$/;"	f	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:public	signature:(socket_type socket, int protocol_type, const MutableBufferSequence& buffers, Endpoint& endpoint, socket_base::message_flags flags, func_type complete_func)
boost::asio::detail::reactive_socket_recvfrom_op_base::sender_endpoint_	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  Endpoint& sender_endpoint_;$/;"	m	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:private
boost::asio::detail::reactive_socket_recvfrom_op_base::socket_	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:private
boost::asio::detail::reactive_socket_recvmsg_op	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^class reactive_socket_recvmsg_op :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_recvmsg_op_base
boost::asio::detail::reactive_socket_recvmsg_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_recvmsg_op);$/;"	p	class:boost::asio::detail::reactive_socket_recvmsg_op	access:public	signature:(reactive_socket_recvmsg_op)
boost::asio::detail::reactive_socket_recvmsg_op::do_complete	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_recvmsg_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::reactive_socket_recvmsg_op::handler_	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_recvmsg_op	access:private
boost::asio::detail::reactive_socket_recvmsg_op::reactive_socket_recvmsg_op	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  reactive_socket_recvmsg_op(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_recvmsg_op	access:public	signature:(socket_type socket, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, Handler& handler)
boost::asio::detail::reactive_socket_recvmsg_op_base	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^class reactive_socket_recvmsg_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
boost::asio::detail::reactive_socket_recvmsg_op_base::buffers_	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::reactive_socket_recvmsg_op_base	access:private
boost::asio::detail::reactive_socket_recvmsg_op_base::do_perform	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_recvmsg_op_base	access:public	signature:(reactor_op* base)
boost::asio::detail::reactive_socket_recvmsg_op_base::in_flags_	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  socket_base::message_flags in_flags_;$/;"	m	class:boost::asio::detail::reactive_socket_recvmsg_op_base	access:private
boost::asio::detail::reactive_socket_recvmsg_op_base::out_flags_	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  socket_base::message_flags& out_flags_;$/;"	m	class:boost::asio::detail::reactive_socket_recvmsg_op_base	access:private
boost::asio::detail::reactive_socket_recvmsg_op_base::reactive_socket_recvmsg_op_base	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  reactive_socket_recvmsg_op_base(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_recvmsg_op_base	access:public	signature:(socket_type socket, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, func_type complete_func)
boost::asio::detail::reactive_socket_recvmsg_op_base::socket_	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_recvmsg_op_base	access:private
boost::asio::detail::reactive_socket_send_op	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^class reactive_socket_send_op :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_send_op_base
boost::asio::detail::reactive_socket_send_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_send_op);$/;"	p	class:boost::asio::detail::reactive_socket_send_op	access:public	signature:(reactive_socket_send_op)
boost::asio::detail::reactive_socket_send_op::do_complete	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_send_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::reactive_socket_send_op::handler_	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_send_op	access:private
boost::asio::detail::reactive_socket_send_op::reactive_socket_send_op	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  reactive_socket_send_op(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_send_op	access:public	signature:(socket_type socket, const ConstBufferSequence& buffers, socket_base::message_flags flags, Handler& handler)
boost::asio::detail::reactive_socket_send_op_base	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^class reactive_socket_send_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
boost::asio::detail::reactive_socket_send_op_base::buffers_	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::reactive_socket_send_op_base	access:private
boost::asio::detail::reactive_socket_send_op_base::do_perform	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_send_op_base	access:public	signature:(reactor_op* base)
boost::asio::detail::reactive_socket_send_op_base::flags_	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::reactive_socket_send_op_base	access:private
boost::asio::detail::reactive_socket_send_op_base::reactive_socket_send_op_base	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  reactive_socket_send_op_base(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_send_op_base	access:public	signature:(socket_type socket, const ConstBufferSequence& buffers, socket_base::message_flags flags, func_type complete_func)
boost::asio::detail::reactive_socket_send_op_base::socket_	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_send_op_base	access:private
boost::asio::detail::reactive_socket_sendto_op	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^class reactive_socket_sendto_op :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_sendto_op_base
boost::asio::detail::reactive_socket_sendto_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(reactive_socket_sendto_op);$/;"	p	class:boost::asio::detail::reactive_socket_sendto_op	access:public	signature:(reactive_socket_sendto_op)
boost::asio::detail::reactive_socket_sendto_op::do_complete	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_sendto_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::reactive_socket_sendto_op::handler_	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_sendto_op	access:private
boost::asio::detail::reactive_socket_sendto_op::reactive_socket_sendto_op	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  reactive_socket_sendto_op(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_sendto_op	access:public	signature:(socket_type socket, const ConstBufferSequence& buffers, const Endpoint& endpoint, socket_base::message_flags flags, Handler& handler)
boost::asio::detail::reactive_socket_sendto_op_base	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^class reactive_socket_sendto_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
boost::asio::detail::reactive_socket_sendto_op_base::buffers_	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::reactive_socket_sendto_op_base	access:private
boost::asio::detail::reactive_socket_sendto_op_base::destination_	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  Endpoint destination_;$/;"	m	class:boost::asio::detail::reactive_socket_sendto_op_base	access:private
boost::asio::detail::reactive_socket_sendto_op_base::do_perform	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_sendto_op_base	access:public	signature:(reactor_op* base)
boost::asio::detail::reactive_socket_sendto_op_base::flags_	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::reactive_socket_sendto_op_base	access:private
boost::asio::detail::reactive_socket_sendto_op_base::reactive_socket_sendto_op_base	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  reactive_socket_sendto_op_base(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_sendto_op_base	access:public	signature:(socket_type socket, const ConstBufferSequence& buffers, const Endpoint& endpoint, socket_base::message_flags flags, func_type complete_func)
boost::asio::detail::reactive_socket_sendto_op_base::socket_	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_sendto_op_base	access:private
boost::asio::detail::reactive_socket_service	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^class reactive_socket_service :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_service_base
boost::asio::detail::reactive_socket_service::accept	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code accept(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, Socket& peer, endpoint_type* peer_endpoint, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service::assign	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service::async_accept	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_accept(implementation_type& impl, Socket& peer,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, Socket& peer, endpoint_type* peer_endpoint, Handler handler)
boost::asio::detail::reactive_socket_service::async_connect	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, Handler handler)
boost::asio::detail::reactive_socket_service::async_receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, Handler handler)
boost::asio::detail::reactive_socket_service::async_receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, endpoint_type& sender_endpoint, socket_base::message_flags flags, Handler handler)
boost::asio::detail::reactive_socket_service::async_send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_send_to(implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, const endpoint_type&, socket_base::message_flags, Handler handler)
boost::asio::detail::reactive_socket_service::async_send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, Handler handler)
boost::asio::detail::reactive_socket_service::bind	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service::connect	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service::endpoint_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::reactive_socket_service	access:public
boost::asio::detail::reactive_socket_service::get_option	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(const implementation_type& impl, Option& option, boost::system::error_code& ec) const
boost::asio::detail::reactive_socket_service::implementation_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  struct implementation_type :$/;"	s	class:boost::asio::detail::reactive_socket_service	inherits:reactive_socket_service_base::base_implementation_type	access:public
boost::asio::detail::reactive_socket_service::implementation_type::implementation_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    implementation_type()$/;"	f	struct:boost::asio::detail::reactive_socket_service::implementation_type	access:public	signature:()
boost::asio::detail::reactive_socket_service::implementation_type::protocol_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    protocol_type protocol_;$/;"	m	struct:boost::asio::detail::reactive_socket_service::implementation_type	access:public
boost::asio::detail::reactive_socket_service::local_endpoint	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::detail::reactive_socket_service::move_assign	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, reactive_socket_service_base& other_service, implementation_type& other_impl)
boost::asio::detail::reactive_socket_service::move_construct	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::detail::reactive_socket_service::native_handle	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::reactive_socket_service::native_handle_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  typedef socket_type native_handle_type;$/;"	t	class:boost::asio::detail::reactive_socket_service	access:public
boost::asio::detail::reactive_socket_service::open	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service::protocol_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::detail::reactive_socket_service	access:public
boost::asio::detail::reactive_socket_service::reactive_socket_service	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  reactive_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::reactive_socket_service::receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t receive_from(implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, endpoint_type& sender_endpoint, socket_base::message_flags, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service::receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service::remote_endpoint	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::detail::reactive_socket_service::send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service::send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, const endpoint_type&, socket_base::message_flags, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service::set_option	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const Option& option, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^class reactive_socket_service_base$/;"	c	namespace:boost::asio::detail
boost::asio::detail::reactive_socket_service_base::async_receive	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  void async_receive(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags flags, Handler handler)
boost::asio::detail::reactive_socket_service_base::async_receive	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  void async_receive(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, Handler handler)
boost::asio::detail::reactive_socket_service_base::async_receive_with_flags	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  void async_receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, Handler handler)
boost::asio::detail::reactive_socket_service_base::async_receive_with_flags	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  void async_receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, Handler handler)
boost::asio::detail::reactive_socket_service_base::async_send	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  void async_send(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, Handler handler)
boost::asio::detail::reactive_socket_service_base::async_send	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  void async_send(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, Handler handler)
boost::asio::detail::reactive_socket_service_base::at_mark	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  bool at_mark(const base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(const base_implementation_type& impl, boost::system::error_code& ec) const
boost::asio::detail::reactive_socket_service_base::available	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  std::size_t available(const base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(const base_implementation_type& impl, boost::system::error_code& ec) const
boost::asio::detail::reactive_socket_service_base::base_implementation_type	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  struct base_implementation_type$/;"	s	class:boost::asio::detail::reactive_socket_service_base	access:public
boost::asio::detail::reactive_socket_service_base::base_implementation_type::reactor_data_	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^    reactor::per_descriptor_data reactor_data_;$/;"	m	struct:boost::asio::detail::reactive_socket_service_base::base_implementation_type	access:public
boost::asio::detail::reactive_socket_service_base::base_implementation_type::socket_	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^    socket_type socket_;$/;"	m	struct:boost::asio::detail::reactive_socket_service_base::base_implementation_type	access:public
boost::asio::detail::reactive_socket_service_base::base_implementation_type::state_	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^    socket_ops::state_type state_;$/;"	m	struct:boost::asio::detail::reactive_socket_service_base::base_implementation_type	access:public
boost::asio::detail::reactive_socket_service_base::base_move_assign	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::base_move_assign($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, reactive_socket_service_base& other_service, reactive_socket_service_base::base_implementation_type& other_impl)
boost::asio::detail::reactive_socket_service_base::base_move_assign	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void base_move_assign(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, reactive_socket_service_base& other_service, base_implementation_type& other_impl)
boost::asio::detail::reactive_socket_service_base::base_move_construct	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::base_move_construct($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, reactive_socket_service_base::base_implementation_type& other_impl)
boost::asio::detail::reactive_socket_service_base::base_move_construct	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void base_move_construct(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, base_implementation_type& other_impl)
boost::asio::detail::reactive_socket_service_base::cancel	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^boost::system::error_code reactive_socket_service_base::cancel($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::cancel	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code cancel($/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:( base_implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::close	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^boost::system::error_code reactive_socket_service_base::close($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::close	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code close($/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:( base_implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::construct	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::construct($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl)
boost::asio::detail::reactive_socket_service_base::construct	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void construct(base_implementation_type& impl);$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl)
boost::asio::detail::reactive_socket_service_base::destroy	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::destroy($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl)
boost::asio::detail::reactive_socket_service_base::destroy	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void destroy(base_implementation_type& impl);$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl)
boost::asio::detail::reactive_socket_service_base::do_assign	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^boost::system::error_code reactive_socket_service_base::do_assign($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, int type, const reactive_socket_service_base::native_handle_type& native_socket, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::do_assign	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_assign($/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:protected	signature:( base_implementation_type& impl, int type, const native_handle_type& native_socket, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::do_open	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^boost::system::error_code reactive_socket_service_base::do_open($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, int af, int type, int protocol, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::do_open	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_open($/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:protected	signature:( base_implementation_type& impl, int af, int type, int protocol, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::io_control	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  boost::system::error_code io_control(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, IO_Control_Command& command, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::is_open	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  bool is_open(const base_implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(const base_implementation_type& impl) const
boost::asio::detail::reactive_socket_service_base::listen	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  boost::system::error_code listen(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, int backlog, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::native_handle	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  native_handle_type native_handle(base_implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl)
boost::asio::detail::reactive_socket_service_base::native_handle_type	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  typedef socket_type native_handle_type;$/;"	t	class:boost::asio::detail::reactive_socket_service_base	access:public
boost::asio::detail::reactive_socket_service_base::native_non_blocking	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  bool native_non_blocking(const base_implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(const base_implementation_type& impl) const
boost::asio::detail::reactive_socket_service_base::native_non_blocking	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  boost::system::error_code native_non_blocking(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::non_blocking	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  bool non_blocking(const base_implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(const base_implementation_type& impl) const
boost::asio::detail::reactive_socket_service_base::non_blocking	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  boost::system::error_code non_blocking(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::reactive_socket_service_base	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^reactive_socket_service_base::reactive_socket_service_base($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( boost::asio::io_service& io_service)
boost::asio::detail::reactive_socket_service_base::reactive_socket_service_base	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL reactive_socket_service_base($/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:( boost::asio::io_service& io_service)
boost::asio::detail::reactive_socket_service_base::reactor_	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  reactor& reactor_;$/;"	m	class:boost::asio::detail::reactive_socket_service_base	access:protected
boost::asio::detail::reactive_socket_service_base::receive	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  size_t receive(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::receive	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  size_t receive(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::receive_with_flags	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  size_t receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::receive_with_flags	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  size_t receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, socket_base::message_flags& out_flags, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::send	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  size_t send(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::send	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  size_t send(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::shutdown	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  boost::system::error_code shutdown(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service_base::shutdown_service	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::shutdown_service()$/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:()
boost::asio::detail::reactive_socket_service_base::shutdown_service	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:()
boost::asio::detail::reactive_socket_service_base::start_accept_op	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::start_accept_op($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, reactor_op* op, bool peer_is_open)
boost::asio::detail::reactive_socket_service_base::start_accept_op	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_accept_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:protected	signature:(base_implementation_type& impl, reactor_op* op, bool peer_is_open)
boost::asio::detail::reactive_socket_service_base::start_connect_op	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::start_connect_op($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, reactor_op* op, const socket_addr_type* addr, size_t addrlen)
boost::asio::detail::reactive_socket_service_base::start_connect_op	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_connect_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:protected	signature:(base_implementation_type& impl, reactor_op* op, const socket_addr_type* addr, size_t addrlen)
boost::asio::detail::reactive_socket_service_base::start_op	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::start_op($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, int op_type, reactor_op* op, bool is_non_blocking, bool noop)
boost::asio::detail::reactive_socket_service_base::start_op	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_op(base_implementation_type& impl, int op_type,$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:protected	signature:(base_implementation_type& impl, int op_type, reactor_op* op, bool is_non_blocking, bool noop)
boost::asio::detail::reactor	/usr/include/boost/asio/detail/reactor_fwd.hpp	/^typedef select_reactor reactor;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::reactor_op	/usr/include/boost/asio/detail/reactor_op.hpp	/^class reactor_op$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::reactor_op::bytes_transferred_	/usr/include/boost/asio/detail/reactor_op.hpp	/^  std::size_t bytes_transferred_;$/;"	m	class:boost::asio::detail::reactor_op	access:public
boost::asio::detail::reactor_op::ec_	/usr/include/boost/asio/detail/reactor_op.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::detail::reactor_op	access:public
boost::asio::detail::reactor_op::perform	/usr/include/boost/asio/detail/reactor_op.hpp	/^  bool perform()$/;"	f	class:boost::asio::detail::reactor_op	access:public	signature:()
boost::asio::detail::reactor_op::perform_func_	/usr/include/boost/asio/detail/reactor_op.hpp	/^  perform_func_type perform_func_;$/;"	m	class:boost::asio::detail::reactor_op	access:private
boost::asio::detail::reactor_op::perform_func_type	/usr/include/boost/asio/detail/reactor_op.hpp	/^  typedef bool (*perform_func_type)(reactor_op*);$/;"	t	class:boost::asio::detail::reactor_op	access:protected
boost::asio::detail::reactor_op::reactor_op	/usr/include/boost/asio/detail/reactor_op.hpp	/^  reactor_op(perform_func_type perform_func, func_type complete_func)$/;"	f	class:boost::asio::detail::reactor_op	access:protected	signature:(perform_func_type perform_func, func_type complete_func)
boost::asio::detail::reactor_op_queue	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^class reactor_op_queue$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::reactor_op_queue::cancel_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool cancel_operations(Descriptor descriptor, op_queue<operation>& ops,$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor, op_queue<operation>& ops, const boost::system::error_code& ec = boost::asio::error::operation_aborted)
boost::asio::detail::reactor_op_queue::empty	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:() const
boost::asio::detail::reactor_op_queue::enqueue_operation	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool enqueue_operation(Descriptor descriptor, reactor_op* op)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor, reactor_op* op)
boost::asio::detail::reactor_op_queue::get_all_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void get_all_operations(op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(op_queue<operation>& ops)
boost::asio::detail::reactor_op_queue::get_descriptors	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void get_descriptors(Descriptor_Set& descriptors, op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor_Set& descriptors, op_queue<operation>& ops)
boost::asio::detail::reactor_op_queue::has_operation	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool has_operation(Descriptor descriptor) const$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor) const
boost::asio::detail::reactor_op_queue::operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  struct operations$/;"	s	class:boost::asio::detail::reactor_op_queue	access:private
boost::asio::detail::reactor_op_queue::operations::op_queue_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    op_queue<reactor_op> op_queue_;$/;"	m	struct:boost::asio::detail::reactor_op_queue::operations	access:public
boost::asio::detail::reactor_op_queue::operations::operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    operations() {}$/;"	f	struct:boost::asio::detail::reactor_op_queue::operations	access:public	signature:()
boost::asio::detail::reactor_op_queue::operations::operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    operations(const operations&) {}$/;"	f	struct:boost::asio::detail::reactor_op_queue::operations	access:public	signature:(const operations&)
boost::asio::detail::reactor_op_queue::operations::operator =	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    void operator=(const operations&) {}$/;"	f	struct:boost::asio::detail::reactor_op_queue::operations	access:public	signature:(const operations&)
boost::asio::detail::reactor_op_queue::operations_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  operations_map operations_;$/;"	m	class:boost::asio::detail::reactor_op_queue	access:private
boost::asio::detail::reactor_op_queue::operations_map	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  typedef hash_map<Descriptor, operations> operations_map;$/;"	t	class:boost::asio::detail::reactor_op_queue	access:private
boost::asio::detail::reactor_op_queue::perform_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool perform_operations(Descriptor descriptor, op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor, op_queue<operation>& ops)
boost::asio::detail::reactor_op_queue::perform_operations_for_descriptors	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void perform_operations_for_descriptors($/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:( const Descriptor_Set& descriptors, op_queue<operation>& ops)
boost::asio::detail::reactor_op_queue::reactor_op_queue	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  reactor_op_queue()$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:()
boost::asio::detail::read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^  class read_at_op$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^  class read_at_op<AsyncRandomAccessReadDevice, boost::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^  class read_at_op<AsyncRandomAccessReadDevice, std::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^  class read_at_op<AsyncRandomAccessReadDevice,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::read_at_op::buffer_	/usr/include/boost/asio/impl/read_at.hpp	/^    boost::asio::mutable_buffer buffer_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
boost::asio::detail::read_at_op::buffers_	/usr/include/boost/asio/impl/read_at.hpp	/^      mutable_buffer, MutableBufferSequence> buffers_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
boost::asio::detail::read_at_op::buffers_	/usr/include/boost/asio/impl/read_at.hpp	/^    boost::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
boost::asio::detail::read_at_op::buffers_	/usr/include/boost/asio/impl/read_at.hpp	/^    std::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
boost::asio::detail::read_at_op::device_	/usr/include/boost/asio/impl/read_at.hpp	/^    AsyncRandomAccessReadDevice& device_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
boost::asio::detail::read_at_op::handler_	/usr/include/boost/asio/impl/read_at.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
boost::asio::detail::read_at_op::offset_	/usr/include/boost/asio/impl/read_at.hpp	/^    boost::uint64_t offset_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
boost::asio::detail::read_at_op::operator ()	/usr/include/boost/asio/impl/read_at.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
boost::asio::detail::read_at_op::read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_op(AsyncRandomAccessReadDevice& device,$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(AsyncRandomAccessReadDevice& device, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, ReadHandler& handler)
boost::asio::detail::read_at_op::read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_op(AsyncRandomAccessReadDevice& device,$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(AsyncRandomAccessReadDevice& device, boost::uint64_t offset, const boost::array<Elem, 2>& buffers, CompletionCondition completion_condition, ReadHandler& handler)
boost::asio::detail::read_at_op::read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_op(AsyncRandomAccessReadDevice& device,$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(AsyncRandomAccessReadDevice& device, boost::uint64_t offset, const boost::asio::mutable_buffers_1& buffers, CompletionCondition completion_condition, ReadHandler& handler)
boost::asio::detail::read_at_op::read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_op(AsyncRandomAccessReadDevice& device,$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(AsyncRandomAccessReadDevice& device, boost::uint64_t offset, const std::array<Elem, 2>& buffers, CompletionCondition completion_condition, ReadHandler& handler)
boost::asio::detail::read_at_op::read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_op(const read_at_op& other)$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(const read_at_op& other)
boost::asio::detail::read_at_op::read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_op(read_at_op&& other)$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(read_at_op&& other)
boost::asio::detail::read_at_op::total_transferred_	/usr/include/boost/asio/impl/read_at.hpp	/^    std::size_t total_transferred_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
boost::asio::detail::read_at_streambuf_op	/usr/include/boost/asio/impl/read_at.hpp	/^  class read_at_streambuf_op$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::read_at_streambuf_op::device_	/usr/include/boost/asio/impl/read_at.hpp	/^    AsyncRandomAccessReadDevice& device_;$/;"	m	class:boost::asio::detail::read_at_streambuf_op	access:public
boost::asio::detail::read_at_streambuf_op::handler_	/usr/include/boost/asio/impl/read_at.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_at_streambuf_op	access:public
boost::asio::detail::read_at_streambuf_op::offset_	/usr/include/boost/asio/impl/read_at.hpp	/^    boost::uint64_t offset_;$/;"	m	class:boost::asio::detail::read_at_streambuf_op	access:public
boost::asio::detail::read_at_streambuf_op::operator ()	/usr/include/boost/asio/impl/read_at.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_at_streambuf_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
boost::asio::detail::read_at_streambuf_op::read_at_streambuf_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_streambuf_op(AsyncRandomAccessReadDevice& device,$/;"	f	class:boost::asio::detail::read_at_streambuf_op	access:public	signature:(AsyncRandomAccessReadDevice& device, boost::uint64_t offset, basic_streambuf<Allocator>& streambuf, CompletionCondition completion_condition, ReadHandler& handler)
boost::asio::detail::read_at_streambuf_op::read_at_streambuf_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_streambuf_op(const read_at_streambuf_op& other)$/;"	f	class:boost::asio::detail::read_at_streambuf_op	access:public	signature:(const read_at_streambuf_op& other)
boost::asio::detail::read_at_streambuf_op::read_at_streambuf_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_streambuf_op(read_at_streambuf_op&& other)$/;"	f	class:boost::asio::detail::read_at_streambuf_op	access:public	signature:(read_at_streambuf_op&& other)
boost::asio::detail::read_at_streambuf_op::streambuf_	/usr/include/boost/asio/impl/read_at.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::read_at_streambuf_op	access:public
boost::asio::detail::read_at_streambuf_op::total_transferred_	/usr/include/boost/asio/impl/read_at.hpp	/^    std::size_t total_transferred_;$/;"	m	class:boost::asio::detail::read_at_streambuf_op	access:public
boost::asio::detail::read_op	/usr/include/boost/asio/impl/read.hpp	/^  class read_op$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::read_op	/usr/include/boost/asio/impl/read.hpp	/^  class read_op<AsyncReadStream, boost::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::read_op	/usr/include/boost/asio/impl/read.hpp	/^  class read_op<AsyncReadStream, boost::asio::mutable_buffers_1,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::read_op	/usr/include/boost/asio/impl/read.hpp	/^  class read_op<AsyncReadStream, std::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::read_op::buffer_	/usr/include/boost/asio/impl/read.hpp	/^    boost::asio::mutable_buffer buffer_;$/;"	m	class:boost::asio::detail::read_op	access:public
boost::asio::detail::read_op::buffers_	/usr/include/boost/asio/impl/read.hpp	/^      mutable_buffer, MutableBufferSequence> buffers_;$/;"	m	class:boost::asio::detail::read_op	access:public
boost::asio::detail::read_op::buffers_	/usr/include/boost/asio/impl/read.hpp	/^    boost::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::read_op	access:public
boost::asio::detail::read_op::buffers_	/usr/include/boost/asio/impl/read.hpp	/^    std::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::read_op	access:public
boost::asio::detail::read_op::handler_	/usr/include/boost/asio/impl/read.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_op	access:public
boost::asio::detail::read_op::operator ()	/usr/include/boost/asio/impl/read.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
boost::asio::detail::read_op::read_op	/usr/include/boost/asio/impl/read.hpp	/^    read_op(AsyncReadStream& stream, const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(AsyncReadStream& stream, const MutableBufferSequence& buffers, CompletionCondition completion_condition, ReadHandler& handler)
boost::asio::detail::read_op::read_op	/usr/include/boost/asio/impl/read.hpp	/^    read_op(AsyncReadStream& stream, const boost::array<Elem, 2>& buffers,$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(AsyncReadStream& stream, const boost::array<Elem, 2>& buffers, CompletionCondition completion_condition, ReadHandler& handler)
boost::asio::detail::read_op::read_op	/usr/include/boost/asio/impl/read.hpp	/^    read_op(AsyncReadStream& stream, const std::array<Elem, 2>& buffers,$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(AsyncReadStream& stream, const std::array<Elem, 2>& buffers, CompletionCondition completion_condition, ReadHandler& handler)
boost::asio::detail::read_op::read_op	/usr/include/boost/asio/impl/read.hpp	/^    read_op(AsyncReadStream& stream,$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(AsyncReadStream& stream, const boost::asio::mutable_buffers_1& buffers, CompletionCondition completion_condition, ReadHandler& handler)
boost::asio::detail::read_op::read_op	/usr/include/boost/asio/impl/read.hpp	/^    read_op(const read_op& other)$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(const read_op& other)
boost::asio::detail::read_op::read_op	/usr/include/boost/asio/impl/read.hpp	/^    read_op(read_op&& other)$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(read_op&& other)
boost::asio::detail::read_op::stream_	/usr/include/boost/asio/impl/read.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:boost::asio::detail::read_op	access:public
boost::asio::detail::read_op::total_transferred_	/usr/include/boost/asio/impl/read.hpp	/^    std::size_t total_transferred_;$/;"	m	class:boost::asio::detail::read_op	access:public
boost::asio::detail::read_streambuf_op	/usr/include/boost/asio/impl/read.hpp	/^  class read_streambuf_op$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::read_streambuf_op::handler_	/usr/include/boost/asio/impl/read.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_streambuf_op	access:public
boost::asio::detail::read_streambuf_op::operator ()	/usr/include/boost/asio/impl/read.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_streambuf_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
boost::asio::detail::read_streambuf_op::read_streambuf_op	/usr/include/boost/asio/impl/read.hpp	/^    read_streambuf_op(AsyncReadStream& stream,$/;"	f	class:boost::asio::detail::read_streambuf_op	access:public	signature:(AsyncReadStream& stream, basic_streambuf<Allocator>& streambuf, CompletionCondition completion_condition, ReadHandler& handler)
boost::asio::detail::read_streambuf_op::read_streambuf_op	/usr/include/boost/asio/impl/read.hpp	/^    read_streambuf_op(const read_streambuf_op& other)$/;"	f	class:boost::asio::detail::read_streambuf_op	access:public	signature:(const read_streambuf_op& other)
boost::asio::detail::read_streambuf_op::read_streambuf_op	/usr/include/boost/asio/impl/read.hpp	/^    read_streambuf_op(read_streambuf_op&& other)$/;"	f	class:boost::asio::detail::read_streambuf_op	access:public	signature:(read_streambuf_op&& other)
boost::asio::detail::read_streambuf_op::stream_	/usr/include/boost/asio/impl/read.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:boost::asio::detail::read_streambuf_op	access:public
boost::asio::detail::read_streambuf_op::streambuf_	/usr/include/boost/asio/impl/read.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::read_streambuf_op	access:public
boost::asio::detail::read_streambuf_op::total_transferred_	/usr/include/boost/asio/impl/read.hpp	/^    std::size_t total_transferred_;$/;"	m	class:boost::asio::detail::read_streambuf_op	access:public
boost::asio::detail::read_until_delim_op	/usr/include/boost/asio/impl/read_until.hpp	/^  class read_until_delim_op$/;"	c	namespace:boost::asio::detail
boost::asio::detail::read_until_delim_op::delim_	/usr/include/boost/asio/impl/read_until.hpp	/^    char delim_;$/;"	m	class:boost::asio::detail::read_until_delim_op	access:public
boost::asio::detail::read_until_delim_op::handler_	/usr/include/boost/asio/impl/read_until.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_until_delim_op	access:public
boost::asio::detail::read_until_delim_op::operator ()	/usr/include/boost/asio/impl/read_until.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_until_delim_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
boost::asio::detail::read_until_delim_op::read_until_delim_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_delim_op(AsyncReadStream& stream,$/;"	f	class:boost::asio::detail::read_until_delim_op	access:public	signature:(AsyncReadStream& stream, boost::asio::basic_streambuf<Allocator>& streambuf, char delim, ReadHandler& handler)
boost::asio::detail::read_until_delim_op::read_until_delim_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_delim_op(const read_until_delim_op& other)$/;"	f	class:boost::asio::detail::read_until_delim_op	access:public	signature:(const read_until_delim_op& other)
boost::asio::detail::read_until_delim_op::read_until_delim_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_delim_op(read_until_delim_op&& other)$/;"	f	class:boost::asio::detail::read_until_delim_op	access:public	signature:(read_until_delim_op&& other)
boost::asio::detail::read_until_delim_op::search_position_	/usr/include/boost/asio/impl/read_until.hpp	/^    std::size_t search_position_;$/;"	m	class:boost::asio::detail::read_until_delim_op	access:public
boost::asio::detail::read_until_delim_op::stream_	/usr/include/boost/asio/impl/read_until.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:boost::asio::detail::read_until_delim_op	access:public
boost::asio::detail::read_until_delim_op::streambuf_	/usr/include/boost/asio/impl/read_until.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::read_until_delim_op	access:public
boost::asio::detail::read_until_delim_string_op	/usr/include/boost/asio/impl/read_until.hpp	/^  class read_until_delim_string_op$/;"	c	namespace:boost::asio::detail
boost::asio::detail::read_until_delim_string_op::delim_	/usr/include/boost/asio/impl/read_until.hpp	/^    std::string delim_;$/;"	m	class:boost::asio::detail::read_until_delim_string_op	access:public
boost::asio::detail::read_until_delim_string_op::handler_	/usr/include/boost/asio/impl/read_until.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_until_delim_string_op	access:public
boost::asio::detail::read_until_delim_string_op::operator ()	/usr/include/boost/asio/impl/read_until.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_until_delim_string_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
boost::asio::detail::read_until_delim_string_op::read_until_delim_string_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_delim_string_op(AsyncReadStream& stream,$/;"	f	class:boost::asio::detail::read_until_delim_string_op	access:public	signature:(AsyncReadStream& stream, boost::asio::basic_streambuf<Allocator>& streambuf, const std::string& delim, ReadHandler& handler)
boost::asio::detail::read_until_delim_string_op::read_until_delim_string_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_delim_string_op(const read_until_delim_string_op& other)$/;"	f	class:boost::asio::detail::read_until_delim_string_op	access:public	signature:(const read_until_delim_string_op& other)
boost::asio::detail::read_until_delim_string_op::read_until_delim_string_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_delim_string_op(read_until_delim_string_op&& other)$/;"	f	class:boost::asio::detail::read_until_delim_string_op	access:public	signature:(read_until_delim_string_op&& other)
boost::asio::detail::read_until_delim_string_op::search_position_	/usr/include/boost/asio/impl/read_until.hpp	/^    std::size_t search_position_;$/;"	m	class:boost::asio::detail::read_until_delim_string_op	access:public
boost::asio::detail::read_until_delim_string_op::stream_	/usr/include/boost/asio/impl/read_until.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:boost::asio::detail::read_until_delim_string_op	access:public
boost::asio::detail::read_until_delim_string_op::streambuf_	/usr/include/boost/asio/impl/read_until.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::read_until_delim_string_op	access:public
boost::asio::detail::read_until_expr_op	/usr/include/boost/asio/impl/read_until.hpp	/^  class read_until_expr_op$/;"	c	namespace:boost::asio::detail
boost::asio::detail::read_until_expr_op::expr_	/usr/include/boost/asio/impl/read_until.hpp	/^    RegEx expr_;$/;"	m	class:boost::asio::detail::read_until_expr_op	access:public
boost::asio::detail::read_until_expr_op::handler_	/usr/include/boost/asio/impl/read_until.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_until_expr_op	access:public
boost::asio::detail::read_until_expr_op::operator ()	/usr/include/boost/asio/impl/read_until.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_until_expr_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
boost::asio::detail::read_until_expr_op::read_until_expr_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_expr_op(AsyncReadStream& stream,$/;"	f	class:boost::asio::detail::read_until_expr_op	access:public	signature:(AsyncReadStream& stream, boost::asio::basic_streambuf<Allocator>& streambuf, const boost::regex& expr, ReadHandler& handler)
boost::asio::detail::read_until_expr_op::read_until_expr_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_expr_op(const read_until_expr_op& other)$/;"	f	class:boost::asio::detail::read_until_expr_op	access:public	signature:(const read_until_expr_op& other)
boost::asio::detail::read_until_expr_op::read_until_expr_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_expr_op(read_until_expr_op&& other)$/;"	f	class:boost::asio::detail::read_until_expr_op	access:public	signature:(read_until_expr_op&& other)
boost::asio::detail::read_until_expr_op::search_position_	/usr/include/boost/asio/impl/read_until.hpp	/^    std::size_t search_position_;$/;"	m	class:boost::asio::detail::read_until_expr_op	access:public
boost::asio::detail::read_until_expr_op::stream_	/usr/include/boost/asio/impl/read_until.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:boost::asio::detail::read_until_expr_op	access:public
boost::asio::detail::read_until_expr_op::streambuf_	/usr/include/boost/asio/impl/read_until.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::read_until_expr_op	access:public
boost::asio::detail::read_until_match_op	/usr/include/boost/asio/impl/read_until.hpp	/^  class read_until_match_op$/;"	c	namespace:boost::asio::detail
boost::asio::detail::read_until_match_op::handler_	/usr/include/boost/asio/impl/read_until.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_until_match_op	access:public
boost::asio::detail::read_until_match_op::match_condition_	/usr/include/boost/asio/impl/read_until.hpp	/^    MatchCondition match_condition_;$/;"	m	class:boost::asio::detail::read_until_match_op	access:public
boost::asio::detail::read_until_match_op::operator ()	/usr/include/boost/asio/impl/read_until.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_until_match_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
boost::asio::detail::read_until_match_op::read_until_match_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_match_op(AsyncReadStream& stream,$/;"	f	class:boost::asio::detail::read_until_match_op	access:public	signature:(AsyncReadStream& stream, boost::asio::basic_streambuf<Allocator>& streambuf, MatchCondition match_condition, ReadHandler& handler)
boost::asio::detail::read_until_match_op::read_until_match_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_match_op(const read_until_match_op& other)$/;"	f	class:boost::asio::detail::read_until_match_op	access:public	signature:(const read_until_match_op& other)
boost::asio::detail::read_until_match_op::read_until_match_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_match_op(read_until_match_op&& other)$/;"	f	class:boost::asio::detail::read_until_match_op	access:public	signature:(read_until_match_op&& other)
boost::asio::detail::read_until_match_op::search_position_	/usr/include/boost/asio/impl/read_until.hpp	/^    std::size_t search_position_;$/;"	m	class:boost::asio::detail::read_until_match_op	access:public
boost::asio::detail::read_until_match_op::stream_	/usr/include/boost/asio/impl/read_until.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:boost::asio::detail::read_until_match_op	access:public
boost::asio::detail::read_until_match_op::streambuf_	/usr/include/boost/asio/impl/read_until.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::read_until_match_op	access:public
boost::asio::detail::resolve_endpoint_op	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^class resolve_endpoint_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::resolve_endpoint_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(resolve_endpoint_op);$/;"	p	class:boost::asio::detail::resolve_endpoint_op	access:public	signature:(resolve_endpoint_op)
boost::asio::detail::resolve_endpoint_op::cancel_token_	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::resolve_endpoint_op	access:private
boost::asio::detail::resolve_endpoint_op::do_complete	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::resolve_endpoint_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::resolve_endpoint_op::ec_	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::detail::resolve_endpoint_op	access:private
boost::asio::detail::resolve_endpoint_op::endpoint_	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  endpoint_type endpoint_;$/;"	m	class:boost::asio::detail::resolve_endpoint_op	access:private
boost::asio::detail::resolve_endpoint_op::endpoint_type	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::resolve_endpoint_op	access:public
boost::asio::detail::resolve_endpoint_op::handler_	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::resolve_endpoint_op	access:private
boost::asio::detail::resolve_endpoint_op::io_service_impl_	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  io_service_impl& io_service_impl_;$/;"	m	class:boost::asio::detail::resolve_endpoint_op	access:private
boost::asio::detail::resolve_endpoint_op::iter_	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  iterator_type iter_;$/;"	m	class:boost::asio::detail::resolve_endpoint_op	access:private
boost::asio::detail::resolve_endpoint_op::iterator_type	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  typedef boost::asio::ip::basic_resolver_iterator<Protocol> iterator_type;$/;"	t	class:boost::asio::detail::resolve_endpoint_op	access:public
boost::asio::detail::resolve_endpoint_op::resolve_endpoint_op	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  resolve_endpoint_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:boost::asio::detail::resolve_endpoint_op	access:public	signature:(socket_ops::weak_cancel_token_type cancel_token, const endpoint_type& endpoint, io_service_impl& ios, Handler& handler)
boost::asio::detail::resolve_op	/usr/include/boost/asio/detail/resolve_op.hpp	/^class resolve_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::resolve_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/resolve_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(resolve_op);$/;"	p	class:boost::asio::detail::resolve_op	access:public	signature:(resolve_op)
boost::asio::detail::resolve_op::addrinfo_	/usr/include/boost/asio/detail/resolve_op.hpp	/^  boost::asio::detail::addrinfo_type* addrinfo_;$/;"	m	class:boost::asio::detail::resolve_op	access:private
boost::asio::detail::resolve_op::cancel_token_	/usr/include/boost/asio/detail/resolve_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::resolve_op	access:private
boost::asio::detail::resolve_op::do_complete	/usr/include/boost/asio/detail/resolve_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::resolve_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::resolve_op::ec_	/usr/include/boost/asio/detail/resolve_op.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::detail::resolve_op	access:private
boost::asio::detail::resolve_op::handler_	/usr/include/boost/asio/detail/resolve_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::resolve_op	access:private
boost::asio::detail::resolve_op::io_service_impl_	/usr/include/boost/asio/detail/resolve_op.hpp	/^  io_service_impl& io_service_impl_;$/;"	m	class:boost::asio::detail::resolve_op	access:private
boost::asio::detail::resolve_op::iterator_type	/usr/include/boost/asio/detail/resolve_op.hpp	/^  typedef boost::asio::ip::basic_resolver_iterator<Protocol> iterator_type;$/;"	t	class:boost::asio::detail::resolve_op	access:public
boost::asio::detail::resolve_op::query_	/usr/include/boost/asio/detail/resolve_op.hpp	/^  query_type query_;$/;"	m	class:boost::asio::detail::resolve_op	access:private
boost::asio::detail::resolve_op::query_type	/usr/include/boost/asio/detail/resolve_op.hpp	/^  typedef boost::asio::ip::basic_resolver_query<Protocol> query_type;$/;"	t	class:boost::asio::detail::resolve_op	access:public
boost::asio::detail::resolve_op::resolve_op	/usr/include/boost/asio/detail/resolve_op.hpp	/^  resolve_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:boost::asio::detail::resolve_op	access:public	signature:(socket_ops::weak_cancel_token_type cancel_token, const query_type& query, io_service_impl& ios, Handler& handler)
boost::asio::detail::resolve_op::~resolve_op	/usr/include/boost/asio/detail/resolve_op.hpp	/^  ~resolve_op()$/;"	f	class:boost::asio::detail::resolve_op	access:public	signature:()
boost::asio::detail::resolver_service	/usr/include/boost/asio/detail/resolver_service.hpp	/^class resolver_service : public resolver_service_base$/;"	c	namespace:boost::asio::detail	inherits:resolver_service_base
boost::asio::detail::resolver_service::async_resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void async_resolve(implementation_type& impl,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, Handler handler)
boost::asio::detail::resolver_service::async_resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void async_resolve(implementation_type& impl,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type& impl, const query_type& query, Handler handler)
boost::asio::detail::resolver_service::endpoint_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
boost::asio::detail::resolver_service::implementation_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef socket_ops::shared_cancel_token_type implementation_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
boost::asio::detail::resolver_service::iterator_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef boost::asio::ip::basic_resolver_iterator<Protocol> iterator_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
boost::asio::detail::resolver_service::query_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef boost::asio::ip::basic_resolver_query<Protocol> query_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
boost::asio::detail::resolver_service::resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  iterator_type resolve(implementation_type&, const query_type& query,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type&, const query_type& query, boost::system::error_code& ec)
boost::asio::detail::resolver_service::resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  iterator_type resolve(implementation_type&,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type&, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::detail::resolver_service::resolver_service	/usr/include/boost/asio/detail/resolver_service.hpp	/^  resolver_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::resolver_service_base	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^class resolver_service_base$/;"	c	namespace:boost::asio::detail
boost::asio::detail::resolver_service_base::auto_addrinfo	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  class auto_addrinfo$/;"	c	class:boost::asio::detail::resolver_service_base	inherits:boost::asio::detail::noncopyable	access:protected
boost::asio::detail::resolver_service_base::auto_addrinfo::ai_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^    boost::asio::detail::addrinfo_type* ai_;$/;"	m	class:boost::asio::detail::resolver_service_base::auto_addrinfo	access:private
boost::asio::detail::resolver_service_base::auto_addrinfo::auto_addrinfo	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^    explicit auto_addrinfo(boost::asio::detail::addrinfo_type* ai)$/;"	f	class:boost::asio::detail::resolver_service_base::auto_addrinfo	access:public	signature:(boost::asio::detail::addrinfo_type* ai)
boost::asio::detail::resolver_service_base::auto_addrinfo::operator boost::asio::detail::addrinfo_type*	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^    operator boost::asio::detail::addrinfo_type*()$/;"	f	class:boost::asio::detail::resolver_service_base::auto_addrinfo	access:public	signature:()
boost::asio::detail::resolver_service_base::auto_addrinfo::~auto_addrinfo	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^    ~auto_addrinfo()$/;"	f	class:boost::asio::detail::resolver_service_base::auto_addrinfo	access:public	signature:()
boost::asio::detail::resolver_service_base::cancel	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::cancel($/;"	f	class:boost::asio::detail::resolver_service_base	signature:( resolver_service_base::implementation_type& impl)
boost::asio::detail::resolver_service_base::cancel	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void cancel(implementation_type& impl);$/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:(implementation_type& impl)
boost::asio::detail::resolver_service_base::construct	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::construct($/;"	f	class:boost::asio::detail::resolver_service_base	signature:( resolver_service_base::implementation_type& impl)
boost::asio::detail::resolver_service_base::construct	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void construct(implementation_type& impl);$/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:(implementation_type& impl)
boost::asio::detail::resolver_service_base::destroy	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::destroy($/;"	f	class:boost::asio::detail::resolver_service_base	signature:( resolver_service_base::implementation_type& impl)
boost::asio::detail::resolver_service_base::destroy	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void destroy(implementation_type&);$/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:(implementation_type&)
boost::asio::detail::resolver_service_base::fork_service	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::fork_service($/;"	f	class:boost::asio::detail::resolver_service_base	signature:( boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::resolver_service_base::fork_service	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void fork_service($/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:( boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::resolver_service_base::implementation_type	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  typedef socket_ops::shared_cancel_token_type implementation_type;$/;"	t	class:boost::asio::detail::resolver_service_base	access:public
boost::asio::detail::resolver_service_base::io_service_impl_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  io_service_impl& io_service_impl_;$/;"	m	class:boost::asio::detail::resolver_service_base	access:protected
boost::asio::detail::resolver_service_base::mutex_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::resolver_service_base	access:private
boost::asio::detail::resolver_service_base::resolver_service_base	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^resolver_service_base::resolver_service_base($/;"	f	class:boost::asio::detail::resolver_service_base	signature:( boost::asio::io_service& io_service)
boost::asio::detail::resolver_service_base::resolver_service_base	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL resolver_service_base(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::resolver_service_base::shutdown_service	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::shutdown_service()$/;"	f	class:boost::asio::detail::resolver_service_base	signature:()
boost::asio::detail::resolver_service_base::shutdown_service	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:()
boost::asio::detail::resolver_service_base::start_resolve_op	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::start_resolve_op(operation* op)$/;"	f	class:boost::asio::detail::resolver_service_base	signature:(operation* op)
boost::asio::detail::resolver_service_base::start_resolve_op	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void start_resolve_op(operation* op);$/;"	p	class:boost::asio::detail::resolver_service_base	access:protected	signature:(operation* op)
boost::asio::detail::resolver_service_base::start_work_thread	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::start_work_thread()$/;"	f	class:boost::asio::detail::resolver_service_base	signature:()
boost::asio::detail::resolver_service_base::start_work_thread	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void start_work_thread();$/;"	p	class:boost::asio::detail::resolver_service_base	access:protected	signature:()
boost::asio::detail::resolver_service_base::work_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  boost::asio::detail::scoped_ptr<boost::asio::io_service::work> work_;$/;"	m	class:boost::asio::detail::resolver_service_base	access:private
boost::asio::detail::resolver_service_base::work_io_service_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  boost::asio::detail::scoped_ptr<boost::asio::io_service> work_io_service_;$/;"	m	class:boost::asio::detail::resolver_service_base	access:private
boost::asio::detail::resolver_service_base::work_io_service_impl_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  io_service_impl& work_io_service_impl_;$/;"	m	class:boost::asio::detail::resolver_service_base	access:private
boost::asio::detail::resolver_service_base::work_io_service_runner	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^class resolver_service_base::work_io_service_runner$/;"	c	class:boost::asio::detail::resolver_service_base	file:
boost::asio::detail::resolver_service_base::work_io_service_runner::io_service_	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^  boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::resolver_service_base::work_io_service_runner	file:	access:private
boost::asio::detail::resolver_service_base::work_io_service_runner::operator ()	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^  void operator()() { io_service_.run(); }$/;"	f	class:boost::asio::detail::resolver_service_base::work_io_service_runner	access:public	signature:()
boost::asio::detail::resolver_service_base::work_io_service_runner::work_io_service_runner	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^  work_io_service_runner(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::resolver_service_base::work_io_service_runner	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::resolver_service_base::work_thread_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  boost::asio::detail::scoped_ptr<boost::asio::detail::thread> work_thread_;$/;"	m	class:boost::asio::detail::resolver_service_base	access:private
boost::asio::detail::resolver_service_base::~resolver_service_base	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^resolver_service_base::~resolver_service_base()$/;"	f	class:boost::asio::detail::resolver_service_base	signature:()
boost::asio::detail::resolver_service_base::~resolver_service_base	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL ~resolver_service_base();$/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:()
boost::asio::detail::rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^class rewrapped_handler$/;"	c	namespace:boost::asio::detail
boost::asio::detail::rewrapped_handler::context_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Context context_;$/;"	m	class:boost::asio::detail::rewrapped_handler	access:public
boost::asio::detail::rewrapped_handler::handler_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::rewrapped_handler	access:public
boost::asio::detail::rewrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:() const
boost::asio::detail::rewrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:()
boost::asio::detail::rewrapped_handler::rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  explicit rewrapped_handler(Handler& handler, const Context& context)$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:(Handler& handler, const Context& context)
boost::asio::detail::rewrapped_handler::rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  explicit rewrapped_handler(const Handler& handler, const Context& context)$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:(const Handler& handler, const Context& context)
boost::asio::detail::rewrapped_handler::rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  rewrapped_handler(const rewrapped_handler& other)$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:(const rewrapped_handler& other)
boost::asio::detail::rewrapped_handler::rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  rewrapped_handler(rewrapped_handler&& other)$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:(rewrapped_handler&& other)
boost::asio::detail::scoped_lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^class scoped_lock$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::scoped_lock::lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
boost::asio::detail::scoped_lock::locked	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  bool locked() const$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:() const
boost::asio::detail::scoped_lock::locked_	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  bool locked_;$/;"	m	class:boost::asio::detail::scoped_lock	access:private
boost::asio::detail::scoped_lock::mutex	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  Mutex& mutex()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
boost::asio::detail::scoped_lock::mutex_	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  Mutex& mutex_;$/;"	m	class:boost::asio::detail::scoped_lock	access:private
boost::asio::detail::scoped_lock::scoped_lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  scoped_lock(Mutex& m)$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:(Mutex& m)
boost::asio::detail::scoped_lock::unlock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
boost::asio::detail::scoped_lock::~scoped_lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  ~scoped_lock()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
boost::asio::detail::scoped_ptr	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^class scoped_ptr$/;"	c	namespace:boost::asio::detail
boost::asio::detail::scoped_ptr::get	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  T* get()$/;"	f	class:boost::asio::detail::scoped_ptr	access:public	signature:()
boost::asio::detail::scoped_ptr::operator *	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  T& operator*()$/;"	f	class:boost::asio::detail::scoped_ptr	access:public	signature:()
boost::asio::detail::scoped_ptr::operator ->	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  T* operator->()$/;"	f	class:boost::asio::detail::scoped_ptr	access:public	signature:()
boost::asio::detail::scoped_ptr::operator =	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  scoped_ptr& operator=(const scoped_ptr&);$/;"	p	class:boost::asio::detail::scoped_ptr	access:private	signature:(const scoped_ptr&)
boost::asio::detail::scoped_ptr::p_	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  T* p_;$/;"	m	class:boost::asio::detail::scoped_ptr	access:private
boost::asio::detail::scoped_ptr::reset	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  void reset(T* p = 0)$/;"	f	class:boost::asio::detail::scoped_ptr	access:public	signature:(T* p = 0)
boost::asio::detail::scoped_ptr::scoped_ptr	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  explicit scoped_ptr(T* p = 0)$/;"	f	class:boost::asio::detail::scoped_ptr	access:public	signature:(T* p = 0)
boost::asio::detail::scoped_ptr::scoped_ptr	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  scoped_ptr(const scoped_ptr&);$/;"	p	class:boost::asio::detail::scoped_ptr	access:private	signature:(const scoped_ptr&)
boost::asio::detail::scoped_ptr::~scoped_ptr	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  ~scoped_ptr()$/;"	f	class:boost::asio::detail::scoped_ptr	access:public	signature:()
boost::asio::detail::select_interrupter	/usr/include/boost/asio/detail/select_interrupter.hpp	/^typedef socket_select_interrupter select_interrupter;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::select_reactor	/usr/include/boost/asio/detail/select_reactor.hpp	/^class select_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::select_reactor::add_timer_queue	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^void select_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::select_reactor	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::select_reactor::add_timer_queue	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& queue);$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::select_reactor::call_run_thread	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::call_run_thread(select_reactor* reactor)$/;"	f	class:boost::asio::detail::select_reactor	signature:(select_reactor* reactor)
boost::asio::detail::select_reactor::call_run_thread	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL static void call_run_thread(select_reactor* reactor);$/;"	p	class:boost::asio::detail::select_reactor	access:private	signature:(select_reactor* reactor)
boost::asio::detail::select_reactor::cancel_ops	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::cancel_ops(socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor	signature:(socket_type descriptor, select_reactor::per_descriptor_data&)
boost::asio::detail::select_reactor::cancel_ops	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void cancel_ops(socket_type descriptor, per_descriptor_data&);$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
boost::asio::detail::select_reactor::cancel_ops_unlocked	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::cancel_ops_unlocked(socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor	signature:(socket_type descriptor, const boost::system::error_code& ec)
boost::asio::detail::select_reactor::cancel_ops_unlocked	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void cancel_ops_unlocked(socket_type descriptor,$/;"	p	class:boost::asio::detail::select_reactor	access:private	signature:(socket_type descriptor, const boost::system::error_code& ec)
boost::asio::detail::select_reactor::cancel_timer	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^std::size_t select_reactor::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::select_reactor	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled)
boost::asio::detail::select_reactor::cancel_timer	/usr/include/boost/asio/detail/select_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
boost::asio::detail::select_reactor::connect_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^    max_select_ops = 3, connect_op = 3, max_ops = 4 };$/;"	e	enum:boost::asio::detail::select_reactor::op_types
boost::asio::detail::select_reactor::deregister_descriptor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::deregister_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor	signature:(socket_type descriptor, select_reactor::per_descriptor_data&, bool)
boost::asio::detail::select_reactor::deregister_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, bool closing)
boost::asio::detail::select_reactor::deregister_internal_descriptor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::deregister_internal_descriptor($/;"	f	class:boost::asio::detail::select_reactor	signature:( socket_type descriptor, select_reactor::per_descriptor_data&)
boost::asio::detail::select_reactor::deregister_internal_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_internal_descriptor($/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:( socket_type descriptor, per_descriptor_data& descriptor_data)
boost::asio::detail::select_reactor::do_add_timer_queue	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::do_add_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::select_reactor	signature:(timer_queue_base& queue)
boost::asio::detail::select_reactor::do_add_timer_queue	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void do_add_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::select_reactor	access:private	signature:(timer_queue_base& queue)
boost::asio::detail::select_reactor::do_remove_timer_queue	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::do_remove_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::select_reactor	signature:(timer_queue_base& queue)
boost::asio::detail::select_reactor::do_remove_timer_queue	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void do_remove_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::select_reactor	access:private	signature:(timer_queue_base& queue)
boost::asio::detail::select_reactor::except_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1, except_op = 2,$/;"	e	enum:boost::asio::detail::select_reactor::op_types
boost::asio::detail::select_reactor::fd_sets_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  fd_set_adapter fd_sets_[max_select_ops];$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::fork_service	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::fork_service(boost::asio::io_service::fork_event fork_ev)$/;"	f	class:boost::asio::detail::select_reactor	signature:(boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::select_reactor::fork_service	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void fork_service($/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:( boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::select_reactor::get_timeout	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^timeval* select_reactor::get_timeout(timeval& tv)$/;"	f	class:boost::asio::detail::select_reactor	signature:(timeval& tv)
boost::asio::detail::select_reactor::get_timeout	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL timeval* get_timeout(timeval& tv);$/;"	p	class:boost::asio::detail::select_reactor	access:private	signature:(timeval& tv)
boost::asio::detail::select_reactor::init_task	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::init_task()$/;"	f	class:boost::asio::detail::select_reactor	signature:()
boost::asio::detail::select_reactor::init_task	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void init_task();$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:()
boost::asio::detail::select_reactor::interrupt	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::interrupt()$/;"	f	class:boost::asio::detail::select_reactor	signature:()
boost::asio::detail::select_reactor::interrupt	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:()
boost::asio::detail::select_reactor::interrupter_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::io_service_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::max_ops	/usr/include/boost/asio/detail/select_reactor.hpp	/^    max_select_ops = 3, connect_op = 3, max_ops = 4 };$/;"	e	enum:boost::asio::detail::select_reactor::op_types
boost::asio::detail::select_reactor::max_select_ops	/usr/include/boost/asio/detail/select_reactor.hpp	/^    max_select_ops = 3, connect_op = 3, max_ops = 4 };$/;"	e	enum:boost::asio::detail::select_reactor::op_types
boost::asio::detail::select_reactor::move_descriptor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::move_descriptor(socket_type,$/;"	f	class:boost::asio::detail::select_reactor	signature:(socket_type, select_reactor::per_descriptor_data&, select_reactor::per_descriptor_data&)
boost::asio::detail::select_reactor::move_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void move_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& target_descriptor_data, per_descriptor_data& source_descriptor_data)
boost::asio::detail::select_reactor::mutex_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::op_queue_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  reactor_op_queue<socket_type> op_queue_[max_ops];$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::op_types	/usr/include/boost/asio/detail/select_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1, except_op = 2,$/;"	g	class:boost::asio::detail::select_reactor	access:public
boost::asio::detail::select_reactor::per_descriptor_data	/usr/include/boost/asio/detail/select_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:boost::asio::detail::select_reactor	access:public
boost::asio::detail::select_reactor::post_immediate_completion	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void post_immediate_completion(reactor_op* op)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(reactor_op* op)
boost::asio::detail::select_reactor::read_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1, except_op = 2,$/;"	e	enum:boost::asio::detail::select_reactor::op_types
boost::asio::detail::select_reactor::register_descriptor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^int select_reactor::register_descriptor(socket_type,$/;"	f	class:boost::asio::detail::select_reactor	signature:(socket_type, select_reactor::per_descriptor_data&)
boost::asio::detail::select_reactor::register_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL int register_descriptor(socket_type, per_descriptor_data&);$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type, per_descriptor_data&)
boost::asio::detail::select_reactor::register_internal_descriptor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^int select_reactor::register_internal_descriptor($/;"	f	class:boost::asio::detail::select_reactor	signature:( int op_type, socket_type descriptor, select_reactor::per_descriptor_data&, reactor_op* op)
boost::asio::detail::select_reactor::register_internal_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL int register_internal_descriptor($/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:( int op_type, socket_type descriptor, per_descriptor_data& descriptor_data, reactor_op* op)
boost::asio::detail::select_reactor::remove_timer_queue	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^void select_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::select_reactor	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::select_reactor::remove_timer_queue	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& queue);$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& queue)
boost::asio::detail::select_reactor::run	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::run(bool block, op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::select_reactor	signature:(bool block, op_queue<operation>& ops)
boost::asio::detail::select_reactor::run	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void run(bool block, op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(bool block, op_queue<operation>& ops)
boost::asio::detail::select_reactor::run_thread	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::run_thread()$/;"	f	class:boost::asio::detail::select_reactor	signature:()
boost::asio::detail::select_reactor::run_thread	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void run_thread();$/;"	p	class:boost::asio::detail::select_reactor	access:private	signature:()
boost::asio::detail::select_reactor::schedule_timer	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^void select_reactor::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::select_reactor	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
boost::asio::detail::select_reactor::schedule_timer	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
boost::asio::detail::select_reactor::select_reactor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^select_reactor::select_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::select_reactor	signature:(boost::asio::io_service& io_service)
boost::asio::detail::select_reactor::select_reactor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL select_reactor(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::select_reactor::shutdown_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::shutdown_service	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::shutdown_service()$/;"	f	class:boost::asio::detail::select_reactor	signature:()
boost::asio::detail::select_reactor::shutdown_service	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:()
boost::asio::detail::select_reactor::start_op	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::start_op(int op_type, socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor	signature:(int op_type, socket_type descriptor, select_reactor::per_descriptor_data&, reactor_op* op, bool)
boost::asio::detail::select_reactor::start_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void start_op(int op_type, socket_type descriptor,$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(int op_type, socket_type descriptor, per_descriptor_data&, reactor_op* op, bool)
boost::asio::detail::select_reactor::stop_thread_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  bool stop_thread_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::thread_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  boost::asio::detail::thread* thread_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::timer_queues_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::write_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1, except_op = 2,$/;"	e	enum:boost::asio::detail::select_reactor::op_types
boost::asio::detail::select_reactor::~select_reactor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^select_reactor::~select_reactor()$/;"	f	class:boost::asio::detail::select_reactor	signature:()
boost::asio::detail::select_reactor::~select_reactor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL ~select_reactor();$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:()
boost::asio::detail::service_base	/usr/include/boost/asio/io_service.hpp	/^class service_base$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::io_service::service
boost::asio::detail::service_base::id	/usr/include/boost/asio/io_service.hpp	/^  static boost::asio::detail::service_id<Type> id;$/;"	m	class:boost::asio::detail::service_base	access:public
boost::asio::detail::service_base::id	/usr/include/boost/asio/io_service.hpp	/^boost::asio::detail::service_id<Type> service_base<Type>::id;$/;"	m	class:boost::asio::detail::service_base
boost::asio::detail::service_base::service_base	/usr/include/boost/asio/io_service.hpp	/^  service_base(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::service_base	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::service_has_move	/usr/include/boost/asio/basic_io_object.hpp	/^  class service_has_move$/;"	c	namespace:boost::asio::detail
boost::asio::detail::service_has_move::eval	/usr/include/boost/asio/basic_io_object.hpp	/^    static char (&eval(...))[2];$/;"	p	class:boost::asio::detail::service_has_move	access:private	signature:(....)
boost::asio::detail::service_has_move::implementation_type	/usr/include/boost/asio/basic_io_object.hpp	/^    typedef typename service_type::implementation_type implementation_type;$/;"	t	class:boost::asio::detail::service_has_move	access:private
boost::asio::detail::service_has_move::service_type	/usr/include/boost/asio/basic_io_object.hpp	/^    typedef IoObjectService service_type;$/;"	t	class:boost::asio::detail::service_has_move	access:private
boost::asio::detail::service_has_move::value	/usr/include/boost/asio/basic_io_object.hpp	/^    static const bool value =$/;"	m	class:boost::asio::detail::service_has_move	access:public
boost::asio::detail::service_id	/usr/include/boost/asio/io_service.hpp	/^class service_id$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::io_service::id
boost::asio::detail::service_registry	/usr/include/boost/asio/detail/service_registry.hpp	/^class service_registry$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::service_registry::add_service	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^void service_registry::add_service(Service* new_service)$/;"	f	class:boost::asio::detail::service_registry	signature:(Service* new_service)
boost::asio::detail::service_registry::add_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  void add_service(Service* new_service);$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:(Service* new_service)
boost::asio::detail::service_registry::auto_service_ptr	/usr/include/boost/asio/detail/service_registry.hpp	/^  struct auto_service_ptr$/;"	s	class:boost::asio::detail::service_registry	access:private
boost::asio::detail::service_registry::auto_service_ptr::ptr_	/usr/include/boost/asio/detail/service_registry.hpp	/^    boost::asio::io_service::service* ptr_;$/;"	m	struct:boost::asio::detail::service_registry::auto_service_ptr	access:public
boost::asio::detail::service_registry::auto_service_ptr::~auto_service_ptr	/usr/include/boost/asio/detail/service_registry.hpp	/^    ~auto_service_ptr() { destroy(ptr_); }$/;"	f	struct:boost::asio::detail::service_registry::auto_service_ptr	access:public	signature:()
boost::asio::detail::service_registry::boost::asio::io_service::factory_type	/usr/include/boost/asio/detail/service_registry.hpp	/^    (*factory_type)(boost::asio::io_service&);$/;"	t	class:boost::asio::detail::service_registry::boost::asio::io_service	access:private
boost::asio::detail::service_registry::create	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^boost::asio::io_service::service* service_registry::create($/;"	f	class:boost::asio::detail::service_registry	signature:( boost::asio::io_service& owner)
boost::asio::detail::service_registry::create	/usr/include/boost/asio/detail/service_registry.hpp	/^  static boost::asio::io_service::service* create($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( boost::asio::io_service& owner)
boost::asio::detail::service_registry::destroy	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^void service_registry::destroy(boost::asio::io_service::service* service)$/;"	f	class:boost::asio::detail::service_registry	signature:(boost::asio::io_service::service* service)
boost::asio::detail::service_registry::destroy	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL static void destroy($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( boost::asio::io_service::service* service)
boost::asio::detail::service_registry::do_add_service	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^void service_registry::do_add_service($/;"	f	class:boost::asio::detail::service_registry	signature:( const boost::asio::io_service::service::key& key, boost::asio::io_service::service* new_service)
boost::asio::detail::service_registry::do_add_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL void do_add_service($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( const boost::asio::io_service::service::key& key, boost::asio::io_service::service* new_service)
boost::asio::detail::service_registry::do_has_service	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^bool service_registry::do_has_service($/;"	f	class:boost::asio::detail::service_registry	signature:( const boost::asio::io_service::service::key& key) const
boost::asio::detail::service_registry::do_has_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL bool do_has_service($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( const boost::asio::io_service::service::key& key) const
boost::asio::detail::service_registry::do_use_service	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^boost::asio::io_service::service* service_registry::do_use_service($/;"	f	class:boost::asio::detail::service_registry	signature:( const boost::asio::io_service::service::key& key, factory_type factory)
boost::asio::detail::service_registry::do_use_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL boost::asio::io_service::service* do_use_service($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( const boost::asio::io_service::service::key& key, factory_type factory)
boost::asio::detail::service_registry::first_service	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^Service& service_registry::first_service()$/;"	f	class:boost::asio::detail::service_registry	signature:()
boost::asio::detail::service_registry::first_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  Service& first_service();$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:()
boost::asio::detail::service_registry::first_service_	/usr/include/boost/asio/detail/service_registry.hpp	/^  boost::asio::io_service::service* first_service_;$/;"	m	class:boost::asio::detail::service_registry	access:private
boost::asio::detail::service_registry::has_service	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^bool service_registry::has_service() const$/;"	f	class:boost::asio::detail::service_registry	signature:() const
boost::asio::detail::service_registry::has_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  bool has_service() const;$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:() const
boost::asio::detail::service_registry::init_key	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^void service_registry::init_key(boost::asio::io_service::service::key& key,$/;"	f	class:boost::asio::detail::service_registry	signature:(boost::asio::io_service::service::key& key, const boost::asio::detail::service_id<Service>& )
boost::asio::detail::service_registry::init_key	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^void service_registry::init_key(boost::asio::io_service::service::key& key,$/;"	f	class:boost::asio::detail::service_registry	signature:(boost::asio::io_service::service::key& key, const boost::asio::io_service::id& id)
boost::asio::detail::service_registry::init_key	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL static void init_key($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( boost::asio::io_service::service::key& key, const boost::asio::io_service::id& id)
boost::asio::detail::service_registry::init_key	/usr/include/boost/asio/detail/service_registry.hpp	/^  static void init_key(boost::asio::io_service::service::key& key,$/;"	p	class:boost::asio::detail::service_registry	access:private	signature:(boost::asio::io_service::service::key& key, const boost::asio::detail::service_id<Service>& )
boost::asio::detail::service_registry::keys_match	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^bool service_registry::keys_match($/;"	f	class:boost::asio::detail::service_registry	signature:( const boost::asio::io_service::service::key& key1, const boost::asio::io_service::service::key& key2)
boost::asio::detail::service_registry::keys_match	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL static bool keys_match($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( const boost::asio::io_service::service::key& key1, const boost::asio::io_service::service::key& key2)
boost::asio::detail::service_registry::mutex_	/usr/include/boost/asio/detail/service_registry.hpp	/^  mutable boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::service_registry	access:private
boost::asio::detail::service_registry::notify_fork	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^void service_registry::notify_fork(boost::asio::io_service::fork_event fork_ev)$/;"	f	class:boost::asio::detail::service_registry	signature:(boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::service_registry::notify_fork	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL void notify_fork(boost::asio::io_service::fork_event fork_ev);$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:(boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::service_registry::owner_	/usr/include/boost/asio/detail/service_registry.hpp	/^  boost::asio::io_service& owner_;$/;"	m	class:boost::asio::detail::service_registry	access:private
boost::asio::detail::service_registry::service_registry	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^service_registry::service_registry($/;"	f	class:boost::asio::detail::service_registry	signature:( boost::asio::io_service& o, Service*, Arg arg)
boost::asio::detail::service_registry::service_registry	/usr/include/boost/asio/detail/service_registry.hpp	/^  service_registry(boost::asio::io_service& o,$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:(boost::asio::io_service& o, Service* initial_service, Arg arg)
boost::asio::detail::service_registry::use_service	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^Service& service_registry::use_service()$/;"	f	class:boost::asio::detail::service_registry	signature:()
boost::asio::detail::service_registry::use_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  Service& use_service();$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:()
boost::asio::detail::service_registry::~service_registry	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^service_registry::~service_registry()$/;"	f	class:boost::asio::detail::service_registry	signature:()
boost::asio::detail::service_registry::~service_registry	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL ~service_registry();$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:()
boost::asio::detail::shutdown_both	/usr/include/boost/asio/detail/socket_types.hpp	/^const int shutdown_both = SD_BOTH;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::shutdown_receive	/usr/include/boost/asio/detail/socket_types.hpp	/^const int shutdown_receive = SD_RECEIVE;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::shutdown_send	/usr/include/boost/asio/detail/socket_types.hpp	/^const int shutdown_send = SD_SEND;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::signal_blocker	/usr/include/boost/asio/detail/signal_blocker.hpp	/^typedef null_signal_blocker signal_blocker;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::signal_handler	/usr/include/boost/asio/detail/signal_handler.hpp	/^class signal_handler : public signal_op$/;"	c	namespace:boost::asio::detail	inherits:signal_op
boost::asio::detail::signal_handler::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/signal_handler.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(signal_handler);$/;"	p	class:boost::asio::detail::signal_handler	access:public	signature:(signal_handler)
boost::asio::detail::signal_handler::do_complete	/usr/include/boost/asio/detail/signal_handler.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::signal_handler	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::signal_handler::handler_	/usr/include/boost/asio/detail/signal_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::signal_handler	access:private
boost::asio::detail::signal_handler::signal_handler	/usr/include/boost/asio/detail/signal_handler.hpp	/^  signal_handler(Handler& h)$/;"	f	class:boost::asio::detail::signal_handler	access:public	signature:(Handler& h)
boost::asio::detail::signal_init	/usr/include/boost/asio/detail/signal_init.hpp	/^class signal_init$/;"	c	namespace:boost::asio::detail
boost::asio::detail::signal_init::signal_init	/usr/include/boost/asio/detail/signal_init.hpp	/^  signal_init()$/;"	f	class:boost::asio::detail::signal_init	access:public	signature:()
boost::asio::detail::signal_op	/usr/include/boost/asio/detail/signal_op.hpp	/^class signal_op$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::signal_op::ec_	/usr/include/boost/asio/detail/signal_op.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::detail::signal_op	access:public
boost::asio::detail::signal_op::signal_number_	/usr/include/boost/asio/detail/signal_op.hpp	/^  int signal_number_;$/;"	m	class:boost::asio::detail::signal_op	access:public
boost::asio::detail::signal_op::signal_op	/usr/include/boost/asio/detail/signal_op.hpp	/^  signal_op(func_type func)$/;"	f	class:boost::asio::detail::signal_op	access:protected	signature:(func_type func)
boost::asio::detail::signal_set_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^class signal_set_service$/;"	c	namespace:boost::asio::detail
boost::asio::detail::signal_set_service::add	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^boost::system::error_code signal_set_service::add($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl, int signal_number, boost::system::error_code& ec)
boost::asio::detail::signal_set_service::add	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code add(implementation_type& impl,$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl, int signal_number, boost::system::error_code& ec)
boost::asio::detail::signal_set_service::add_service	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::add_service(signal_set_service* service)$/;"	f	class:boost::asio::detail::signal_set_service	signature:(signal_set_service* service)
boost::asio::detail::signal_set_service::add_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL static void add_service(signal_set_service* service);$/;"	p	class:boost::asio::detail::signal_set_service	access:private	signature:(signal_set_service* service)
boost::asio::detail::signal_set_service::async_wait	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  void async_wait(implementation_type& impl, Handler handler)$/;"	f	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl, Handler handler)
boost::asio::detail::signal_set_service::cancel	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^boost::system::error_code signal_set_service::cancel($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::signal_set_service::cancel	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code cancel(implementation_type& impl,$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::signal_set_service::clear	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^boost::system::error_code signal_set_service::clear($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::signal_set_service::clear	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code clear(implementation_type& impl,$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::signal_set_service::close_descriptors	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::close_descriptors()$/;"	f	class:boost::asio::detail::signal_set_service	signature:()
boost::asio::detail::signal_set_service::close_descriptors	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL static void close_descriptors();$/;"	p	class:boost::asio::detail::signal_set_service	access:private	signature:()
boost::asio::detail::signal_set_service::construct	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::construct($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl)
boost::asio::detail::signal_set_service::construct	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL void construct(implementation_type& impl);$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::signal_set_service::deliver_signal	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::deliver_signal(int signal_number)$/;"	f	class:boost::asio::detail::signal_set_service	signature:(int signal_number)
boost::asio::detail::signal_set_service::deliver_signal	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL static void deliver_signal(int signal_number);$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(int signal_number)
boost::asio::detail::signal_set_service::destroy	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::destroy($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl)
boost::asio::detail::signal_set_service::destroy	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL void destroy(implementation_type& impl);$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::signal_set_service::fork_service	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::fork_service($/;"	f	class:boost::asio::detail::signal_set_service	signature:( boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::signal_set_service::fork_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL void fork_service($/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:( boost::asio::io_service::fork_event fork_ev)
boost::asio::detail::signal_set_service::implementation_type	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::signal_set_service	access:public
boost::asio::detail::signal_set_service::implementation_type::implementation_type	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::signal_set_service::implementation_type	access:public	signature:()
boost::asio::detail::signal_set_service::implementation_type::queue_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    op_queue<signal_op> queue_;$/;"	m	class:boost::asio::detail::signal_set_service::implementation_type	access:private
boost::asio::detail::signal_set_service::implementation_type::signals_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    registration* signals_;$/;"	m	class:boost::asio::detail::signal_set_service::implementation_type	access:private
boost::asio::detail::signal_set_service::io_service_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::signal_set_service	access:private
boost::asio::detail::signal_set_service::next_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  signal_set_service* next_;$/;"	m	class:boost::asio::detail::signal_set_service	access:private
boost::asio::detail::signal_set_service::open_descriptors	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::open_descriptors()$/;"	f	class:boost::asio::detail::signal_set_service	signature:()
boost::asio::detail::signal_set_service::open_descriptors	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL static void open_descriptors();$/;"	p	class:boost::asio::detail::signal_set_service	access:private	signature:()
boost::asio::detail::signal_set_service::pipe_read_op	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^class signal_set_service::pipe_read_op : public reactor_op$/;"	c	class:boost::asio::detail::signal_set_service	file:	inherits:reactor_op
boost::asio::detail::signal_set_service::pipe_read_op::do_complete	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  static void do_complete(io_service_impl* \/*owner*\/, operation* base,$/;"	f	class:boost::asio::detail::signal_set_service::pipe_read_op	access:public	signature:(io_service_impl* , operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::signal_set_service::pipe_read_op::do_perform	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  static bool do_perform(reactor_op*)$/;"	f	class:boost::asio::detail::signal_set_service::pipe_read_op	access:public	signature:(reactor_op*)
boost::asio::detail::signal_set_service::pipe_read_op::pipe_read_op	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  pipe_read_op()$/;"	f	class:boost::asio::detail::signal_set_service::pipe_read_op	access:public	signature:()
boost::asio::detail::signal_set_service::prev_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  signal_set_service* prev_;$/;"	m	class:boost::asio::detail::signal_set_service	access:private
boost::asio::detail::signal_set_service::reactor_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  reactor& reactor_;$/;"	m	class:boost::asio::detail::signal_set_service	access:private
boost::asio::detail::signal_set_service::reactor_data_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  reactor::per_descriptor_data reactor_data_;$/;"	m	class:boost::asio::detail::signal_set_service	access:private
boost::asio::detail::signal_set_service::registration	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  class registration$/;"	c	class:boost::asio::detail::signal_set_service	access:public
boost::asio::detail::signal_set_service::registration::next_in_set_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    registration* next_in_set_;$/;"	m	class:boost::asio::detail::signal_set_service::registration	access:private
boost::asio::detail::signal_set_service::registration::next_in_table_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    registration* next_in_table_;$/;"	m	class:boost::asio::detail::signal_set_service::registration	access:private
boost::asio::detail::signal_set_service::registration::prev_in_table_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    registration* prev_in_table_;$/;"	m	class:boost::asio::detail::signal_set_service::registration	access:private
boost::asio::detail::signal_set_service::registration::queue_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    op_queue<signal_op>* queue_;$/;"	m	class:boost::asio::detail::signal_set_service::registration	access:private
boost::asio::detail::signal_set_service::registration::registration	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    registration()$/;"	f	class:boost::asio::detail::signal_set_service::registration	access:public	signature:()
boost::asio::detail::signal_set_service::registration::signal_number_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    int signal_number_;$/;"	m	class:boost::asio::detail::signal_set_service::registration	access:private
boost::asio::detail::signal_set_service::registration::undelivered_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    std::size_t undelivered_;$/;"	m	class:boost::asio::detail::signal_set_service::registration	access:private
boost::asio::detail::signal_set_service::registrations_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  registration* registrations_[max_signal_number];$/;"	m	class:boost::asio::detail::signal_set_service	access:private
boost::asio::detail::signal_set_service::remove	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^boost::system::error_code signal_set_service::remove($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl, int signal_number, boost::system::error_code& ec)
boost::asio::detail::signal_set_service::remove	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code remove(implementation_type& impl,$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl, int signal_number, boost::system::error_code& ec)
boost::asio::detail::signal_set_service::remove_service	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::remove_service(signal_set_service* service)$/;"	f	class:boost::asio::detail::signal_set_service	signature:(signal_set_service* service)
boost::asio::detail::signal_set_service::remove_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL static void remove_service(signal_set_service* service);$/;"	p	class:boost::asio::detail::signal_set_service	access:private	signature:(signal_set_service* service)
boost::asio::detail::signal_set_service::shutdown_service	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::shutdown_service()$/;"	f	class:boost::asio::detail::signal_set_service	signature:()
boost::asio::detail::signal_set_service::shutdown_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:()
boost::asio::detail::signal_set_service::signal_set_service	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^signal_set_service::signal_set_service($/;"	f	class:boost::asio::detail::signal_set_service	signature:( boost::asio::io_service& io_service)
boost::asio::detail::signal_set_service::signal_set_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL signal_set_service(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::signal_set_service::start_wait_op	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::start_wait_op($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl, signal_op* op)
boost::asio::detail::signal_set_service::start_wait_op	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL void start_wait_op(implementation_type& impl, signal_op* op);$/;"	p	class:boost::asio::detail::signal_set_service	access:private	signature:(implementation_type& impl, signal_op* op)
boost::asio::detail::signal_set_service::~signal_set_service	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^signal_set_service::~signal_set_service()$/;"	f	class:boost::asio::detail::signal_set_service	signature:()
boost::asio::detail::signal_set_service::~signal_set_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL ~signal_set_service();$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:()
boost::asio::detail::signal_state	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^struct signal_state$/;"	s	namespace:boost::asio::detail	file:
boost::asio::detail::signal_state::fork_prepared_	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  bool fork_prepared_;$/;"	m	struct:boost::asio::detail::signal_state	file:	access:public
boost::asio::detail::signal_state::mutex_	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  static_mutex mutex_;$/;"	m	struct:boost::asio::detail::signal_state	file:	access:public
boost::asio::detail::signal_state::read_descriptor_	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  int read_descriptor_;$/;"	m	struct:boost::asio::detail::signal_state	file:	access:public
boost::asio::detail::signal_state::registration_count_	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  std::size_t registration_count_[max_signal_number];$/;"	m	struct:boost::asio::detail::signal_state	file:	access:public
boost::asio::detail::signal_state::service_list_	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  class signal_set_service* service_list_;$/;"	m	struct:boost::asio::detail::signal_state	typeref:class:boost::asio::detail::signal_state::signal_set_service	file:	access:public
boost::asio::detail::signal_state::write_descriptor_	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  int write_descriptor_;$/;"	m	struct:boost::asio::detail::signal_state	file:	access:public
boost::asio::detail::signed_size_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef int signed_size_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::sockaddr_in4_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_in sockaddr_in4_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::sockaddr_in6_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct sockaddr_in6_emulation$/;"	s	namespace:boost::asio::detail
boost::asio::detail::sockaddr_in6_emulation::sin6_addr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  in6_addr_emulation sin6_addr;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
boost::asio::detail::sockaddr_in6_emulation::sin6_family	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  short sin6_family;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
boost::asio::detail::sockaddr_in6_emulation::sin6_flowinfo	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  u_long sin6_flowinfo;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
boost::asio::detail::sockaddr_in6_emulation::sin6_port	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  u_short sin6_port;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
boost::asio::detail::sockaddr_in6_emulation::sin6_scope_id	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  u_long sin6_scope_id;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
boost::asio::detail::sockaddr_in6_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_in6 sockaddr_in6_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::sockaddr_in6_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_in6_emulation sockaddr_in6_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::sockaddr_storage_alignsize	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_alignsize = (sizeof(__int64)), \/\/ Desired alignment.$/;"	e	enum:boost::asio::detail::__anon12
boost::asio::detail::sockaddr_storage_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct sockaddr_storage_emulation$/;"	s	namespace:boost::asio::detail
boost::asio::detail::sockaddr_storage_emulation::__ss_align	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  __int64 __ss_align;$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
boost::asio::detail::sockaddr_storage_emulation::__ss_pad1	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  char __ss_pad1[sockaddr_storage_pad1size];$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
boost::asio::detail::sockaddr_storage_emulation::__ss_pad2	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  char __ss_pad2[sockaddr_storage_pad2size];$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
boost::asio::detail::sockaddr_storage_emulation::ss_family	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  short ss_family;$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
boost::asio::detail::sockaddr_storage_maxsize	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_maxsize = 128, \/\/ Maximum size.$/;"	e	enum:boost::asio::detail::__anon12
boost::asio::detail::sockaddr_storage_pad1size	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_pad1size = (sockaddr_storage_alignsize - sizeof(short)),$/;"	e	enum:boost::asio::detail::__anon12
boost::asio::detail::sockaddr_storage_pad2size	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_pad2size = (sockaddr_storage_maxsize -$/;"	e	enum:boost::asio::detail::__anon12
boost::asio::detail::sockaddr_storage_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_storage sockaddr_storage_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::sockaddr_storage_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_storage_emulation sockaddr_storage_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::socket_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr socket_addr_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::socket_error_retval	/usr/include/boost/asio/detail/socket_types.hpp	/^const int socket_error_retval = SOCKET_ERROR;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^class socket_holder$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::socket_holder::get	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_type get() const$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:() const
boost::asio::detail::socket_holder::release	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_type release()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
boost::asio::detail::socket_holder::reset	/usr/include/boost/asio/detail/socket_holder.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
boost::asio::detail::socket_holder::reset	/usr/include/boost/asio/detail/socket_holder.hpp	/^  void reset(socket_type s)$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:(socket_type s)
boost::asio::detail::socket_holder::socket_	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::socket_holder	access:private
boost::asio::detail::socket_holder::socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^  explicit socket_holder(socket_type s)$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:(socket_type s)
boost::asio::detail::socket_holder::socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_holder()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
boost::asio::detail::socket_holder::~socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^  ~socket_holder()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
boost::asio::detail::socket_ops	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^namespace socket_ops {$/;"	n	namespace:boost::asio::detail	file:
boost::asio::detail::socket_ops	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace socket_ops {$/;"	n	namespace:boost::asio::detail
boost::asio::detail::socket_ops::accept	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^socket_type accept(socket_type s, socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::accept	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL socket_type accept(socket_type s, socket_addr_type* addr,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::available	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^size_t available(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
boost::asio::detail::socket_ops::available	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL size_t available(socket_type s, boost::system::error_code& ec);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
boost::asio::detail::socket_ops::background_getaddrinfo	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^boost::system::error_code background_getaddrinfo($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, const char* host, const char* service, const addrinfo_type& hints, addrinfo_type** result, boost::system::error_code& ec)
boost::asio::detail::socket_ops::background_getaddrinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL boost::system::error_code background_getaddrinfo($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, const char* host, const char* service, const addrinfo_type& hints, addrinfo_type** result, boost::system::error_code& ec)
boost::asio::detail::socket_ops::background_getnameinfo	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^boost::system::error_code background_getnameinfo($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int sock_type, boost::system::error_code& ec)
boost::asio::detail::socket_ops::background_getnameinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL boost::system::error_code background_getnameinfo($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int sock_type, boost::system::error_code& ec)
boost::asio::detail::socket_ops::bind	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int bind(socket_type s, const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::bind	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int bind(socket_type s, const socket_addr_type* addr,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::buf	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^typedef WSABUF buf;$/;"	t	namespace:boost::asio::detail::socket_ops	file:
boost::asio::detail::socket_ops::buf	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^typedef iovec buf;$/;"	t	namespace:boost::asio::detail::socket_ops	file:
boost::asio::detail::socket_ops::buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef WSABUF buf;$/;"	t	namespace:boost::asio::detail::socket_ops
boost::asio::detail::socket_ops::buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef iovec buf;$/;"	t	namespace:boost::asio::detail::socket_ops
boost::asio::detail::socket_ops::call_accept	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline socket_type call_accept(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, socket_addr_type* addr, std::size_t* addrlen)
boost::asio::detail::socket_ops::call_bind	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int call_bind(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, const socket_addr_type* addr, std::size_t addrlen)
boost::asio::detail::socket_ops::call_connect	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int call_connect(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, const socket_addr_type* addr, std::size_t addrlen)
boost::asio::detail::socket_ops::call_getpeername	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int call_getpeername(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, socket_addr_type* addr, std::size_t* addrlen)
boost::asio::detail::socket_ops::call_getsockname	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int call_getsockname(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, socket_addr_type* addr, std::size_t* addrlen)
boost::asio::detail::socket_ops::call_getsockopt	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int call_getsockopt(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, int level, int optname, void* optval, std::size_t* optlen)
boost::asio::detail::socket_ops::call_setsockopt	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int call_setsockopt(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, int level, int optname, const void* optval, std::size_t optlen)
boost::asio::detail::socket_ops::clear_last_error	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void clear_last_error()$/;"	f	namespace:boost::asio::detail::socket_ops	signature:()
boost::asio::detail::socket_ops::close	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int close(socket_type s, state_type& state,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, bool destruction, boost::system::error_code& ec)
boost::asio::detail::socket_ops::close	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int close(socket_type s, state_type& state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, bool destruction, boost::system::error_code& ec)
boost::asio::detail::socket_ops::complete_iocp_accept	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void complete_iocp_accept(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, void* output_buffer, DWORD address_length, socket_addr_type* addr, std::size_t* addrlen, socket_type new_socket, boost::system::error_code& ec)
boost::asio::detail::socket_ops::complete_iocp_accept	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void complete_iocp_accept(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, void* output_buffer, DWORD address_length, socket_addr_type* addr, std::size_t* addrlen, socket_type new_socket, boost::system::error_code& ec)
boost::asio::detail::socket_ops::complete_iocp_recv	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void complete_iocp_recv(state_type state,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(state_type state, const weak_cancel_token_type& cancel_token, bool all_empty, boost::system::error_code& ec, size_t bytes_transferred)
boost::asio::detail::socket_ops::complete_iocp_recv	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void complete_iocp_recv(state_type state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(state_type state, const weak_cancel_token_type& cancel_token, bool all_empty, boost::system::error_code& ec, size_t bytes_transferred)
boost::asio::detail::socket_ops::complete_iocp_recvfrom	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void complete_iocp_recvfrom($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, boost::system::error_code& ec)
boost::asio::detail::socket_ops::complete_iocp_recvfrom	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void complete_iocp_recvfrom($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, boost::system::error_code& ec)
boost::asio::detail::socket_ops::complete_iocp_recvmsg	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void complete_iocp_recvmsg($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, boost::system::error_code& ec)
boost::asio::detail::socket_ops::complete_iocp_recvmsg	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void complete_iocp_recvmsg($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, boost::system::error_code& ec)
boost::asio::detail::socket_ops::complete_iocp_send	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void complete_iocp_send($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, boost::system::error_code& ec)
boost::asio::detail::socket_ops::complete_iocp_send	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void complete_iocp_send($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, boost::system::error_code& ec)
boost::asio::detail::socket_ops::connect	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int connect(socket_type s, const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int connect(socket_type s, const socket_addr_type* addr,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::datagram_oriented	/usr/include/boost/asio/detail/socket_ops.hpp	/^  datagram_oriented = 32,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
boost::asio::detail::socket_ops::enable_connection_aborted	/usr/include/boost/asio/detail/socket_ops.hpp	/^  enable_connection_aborted = 4,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
boost::asio::detail::socket_ops::error_wrapper	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline ReturnType error_wrapper(ReturnType return_value,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(ReturnType return_value, boost::system::error_code& ec)
boost::asio::detail::socket_ops::freeaddrinfo	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void freeaddrinfo(addrinfo_type* ai)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* ai)
boost::asio::detail::socket_ops::freeaddrinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void freeaddrinfo(addrinfo_type* ai);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* ai)
boost::asio::detail::socket_ops::freeaddrinfo_emulation	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void freeaddrinfo_emulation(addrinfo_type* aihead)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* aihead)
boost::asio::detail::socket_ops::freehostent	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void freehostent(hostent* h)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(hostent* h)
boost::asio::detail::socket_ops::gai_aistruct	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int gai_aistruct(addrinfo_type*** next, const addrinfo_type* hints,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type*** next, const addrinfo_type* hints, const void* addr, int family)
boost::asio::detail::socket_ops::gai_alloc	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline T* gai_alloc(std::size_t size = sizeof(T))$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(std::size_t size = sizeof(T))
boost::asio::detail::socket_ops::gai_clone	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline addrinfo_type* gai_clone(addrinfo_type* ai)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* ai)
boost::asio::detail::socket_ops::gai_clone_flag	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^enum { gai_clone_flag = 1 << 30 };$/;"	e	enum:boost::asio::detail::socket_ops::__anon11	file:
boost::asio::detail::socket_ops::gai_echeck	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int gai_echeck(const char* host, const char* service,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, int flags, int family, int socktype, int protocol)
boost::asio::detail::socket_ops::gai_free	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void gai_free(void* p)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void* p)
boost::asio::detail::socket_ops::gai_nsearch	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int gai_nsearch(const char* host,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const addrinfo_type* hints, gai_search (&search)[2])
boost::asio::detail::socket_ops::gai_port	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int gai_port(addrinfo_type* aihead, int port, int socktype)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* aihead, int port, int socktype)
boost::asio::detail::socket_ops::gai_search	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^struct gai_search$/;"	s	namespace:boost::asio::detail::socket_ops	file:
boost::asio::detail::socket_ops::gai_search::family	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^  int family;$/;"	m	struct:boost::asio::detail::socket_ops::gai_search	file:	access:public
boost::asio::detail::socket_ops::gai_search::host	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^  const char* host;$/;"	m	struct:boost::asio::detail::socket_ops::gai_search	file:	access:public
boost::asio::detail::socket_ops::gai_serv	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int gai_serv(addrinfo_type* aihead,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* aihead, const addrinfo_type* hints, const char* serv)
boost::asio::detail::socket_ops::gai_strcpy	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void gai_strcpy(char* target, const char* source, std::size_t max_size)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(char* target, const char* source, std::size_t max_size)
boost::asio::detail::socket_ops::getaddrinfo	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^boost::system::error_code getaddrinfo(const char* host,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, const addrinfo_type& hints, addrinfo_type** result, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getaddrinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL boost::system::error_code getaddrinfo(const char* host,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, const addrinfo_type& hints, addrinfo_type** result, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getaddrinfo_emulation	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int getaddrinfo_emulation(const char* host, const char* service,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, const addrinfo_type* hintsp, addrinfo_type** result)
boost::asio::detail::socket_ops::gethostbyaddr	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline hostent* gethostbyaddr(const char* addr, int length, int af,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* addr, int length, int af, hostent* result, char* buffer, int buflength, boost::system::error_code& ec)
boost::asio::detail::socket_ops::gethostbyname	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline hostent* gethostbyname(const char* name, int af, struct hostent* result,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* name, int af, struct hostent* result, char* buffer, int buflength, int ai_flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::gethostname	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int gethostname(char* name, int namelen, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(char* name, int namelen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::gethostname	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int gethostname(char* name,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(char* name, int namelen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getnameinfo	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^boost::system::error_code getnameinfo(const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getnameinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL boost::system::error_code getnameinfo($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getnameinfo_emulation	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline boost::system::error_code getnameinfo_emulation($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const socket_addr_type* sa, std::size_t salen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getpeername	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int getpeername(socket_type s, socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, bool cached, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getpeername	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int getpeername(socket_type s, socket_addr_type* addr,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, bool cached, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getsockname	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int getsockname(socket_type s, socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getsockname	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int getsockname(socket_type s, socket_addr_type* addr,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getsockopt	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int getsockopt(socket_type s, state_type state, int level, int optname,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, int level, int optname, void* optval, size_t* optlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getsockopt	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int getsockopt(socket_type s, state_type state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, int level, int optname, void* optval, size_t* optlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::host_to_network_long	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^u_long_type host_to_network_long(u_long_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_long_type value)
boost::asio::detail::socket_ops::host_to_network_long	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL u_long_type host_to_network_long(u_long_type value);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(u_long_type value)
boost::asio::detail::socket_ops::host_to_network_short	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^u_short_type host_to_network_short(u_short_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_short_type value)
boost::asio::detail::socket_ops::host_to_network_short	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL u_short_type host_to_network_short(u_short_type value);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(u_short_type value)
boost::asio::detail::socket_ops::if_indextoname	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^extern "C" char* if_indextoname(unsigned int, char*);$/;"	p	namespace:boost::asio::detail::socket_ops	file:	signature:(unsigned int, char*)
boost::asio::detail::socket_ops::if_nametoindex	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^extern "C" unsigned int if_nametoindex(const char*);$/;"	p	namespace:boost::asio::detail::socket_ops	file:	signature:(const char*)
boost::asio::detail::socket_ops::inet_ntop	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^const char* inet_ntop(int af, const void* src, char* dest, size_t length,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, const void* src, char* dest, size_t length, unsigned long scope_id, boost::system::error_code& ec)
boost::asio::detail::socket_ops::inet_ntop	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL const char* inet_ntop(int af, const void* src, char* dest,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(int af, const void* src, char* dest, size_t length, unsigned long scope_id, boost::system::error_code& ec)
boost::asio::detail::socket_ops::inet_pton	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int inet_pton(int af, const char* src, void* dest,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, const char* src, void* dest, unsigned long* scope_id, boost::system::error_code& ec)
boost::asio::detail::socket_ops::inet_pton	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int inet_pton(int af, const char* src, void* dest,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(int af, const char* src, void* dest, unsigned long* scope_id, boost::system::error_code& ec)
boost::asio::detail::socket_ops::init_buf	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void init_buf(buf& b, const void* data, size_t size)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(buf& b, const void* data, size_t size)
boost::asio::detail::socket_ops::init_buf	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void init_buf(buf& b, void* data, size_t size)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(buf& b, void* data, size_t size)
boost::asio::detail::socket_ops::init_buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void init_buf(buf& b, const void* data, size_t size);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(buf& b, const void* data, size_t size)
boost::asio::detail::socket_ops::init_buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void init_buf(buf& b, void* data, size_t size);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(buf& b, void* data, size_t size)
boost::asio::detail::socket_ops::init_buf_iov_base	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void init_buf_iov_base(T& base, void* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(T& base, void* addr)
boost::asio::detail::socket_ops::init_buf_iov_base	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void init_buf_iov_base(void*& base, void* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void*& base, void* addr)
boost::asio::detail::socket_ops::init_msghdr_msg_name	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void init_msghdr_msg_name(T& name, const socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(T& name, const socket_addr_type* addr)
boost::asio::detail::socket_ops::init_msghdr_msg_name	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void init_msghdr_msg_name(T& name, socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(T& name, socket_addr_type* addr)
boost::asio::detail::socket_ops::init_msghdr_msg_name	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void init_msghdr_msg_name(void*& name, const socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void*& name, const socket_addr_type* addr)
boost::asio::detail::socket_ops::init_msghdr_msg_name	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void init_msghdr_msg_name(void*& name, socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void*& name, socket_addr_type* addr)
boost::asio::detail::socket_ops::internal_non_blocking	/usr/include/boost/asio/detail/socket_ops.hpp	/^  internal_non_blocking = 2,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
boost::asio::detail::socket_ops::ioctl	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int ioctl(socket_type s, state_type& state, int cmd,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, int cmd, ioctl_arg_type* arg, boost::system::error_code& ec)
boost::asio::detail::socket_ops::ioctl	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int ioctl(socket_type s, state_type& state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, int cmd, ioctl_arg_type* arg, boost::system::error_code& ec)
boost::asio::detail::socket_ops::listen	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int listen(socket_type s, int backlog, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int backlog, boost::system::error_code& ec)
boost::asio::detail::socket_ops::listen	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int listen(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int backlog, boost::system::error_code& ec)
boost::asio::detail::socket_ops::msghdr	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^struct msghdr { int msg_namelen; };$/;"	s	namespace:boost::asio::detail::socket_ops	file:
boost::asio::detail::socket_ops::msghdr::msg_namelen	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^struct msghdr { int msg_namelen; };$/;"	m	struct:boost::asio::detail::socket_ops::msghdr	file:	access:public
boost::asio::detail::socket_ops::network_to_host_long	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^u_long_type network_to_host_long(u_long_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_long_type value)
boost::asio::detail::socket_ops::network_to_host_long	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL u_long_type network_to_host_long(u_long_type value);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(u_long_type value)
boost::asio::detail::socket_ops::network_to_host_short	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^u_short_type network_to_host_short(u_short_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_short_type value)
boost::asio::detail::socket_ops::network_to_host_short	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL u_short_type network_to_host_short(u_short_type value);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(u_short_type value)
boost::asio::detail::socket_ops::non_blocking	/usr/include/boost/asio/detail/socket_ops.hpp	/^  non_blocking = user_set_non_blocking | internal_non_blocking,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
boost::asio::detail::socket_ops::non_blocking_accept	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_accept(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec, socket_type& new_socket)
boost::asio::detail::socket_ops::non_blocking_accept	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_accept(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec, socket_type& new_socket)
boost::asio::detail::socket_ops::non_blocking_connect	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_connect(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
boost::asio::detail::socket_ops::non_blocking_connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_connect($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( socket_type s, boost::system::error_code& ec)
boost::asio::detail::socket_ops::non_blocking_recv	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_recv(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, bool is_stream, boost::system::error_code& ec, size_t& bytes_transferred)
boost::asio::detail::socket_ops::non_blocking_recv	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_recv(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, bool is_stream, boost::system::error_code& ec, size_t& bytes_transferred)
boost::asio::detail::socket_ops::non_blocking_recvfrom	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_recvfrom(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec, size_t& bytes_transferred)
boost::asio::detail::socket_ops::non_blocking_recvfrom	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_recvfrom(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec, size_t& bytes_transferred)
boost::asio::detail::socket_ops::non_blocking_recvmsg	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_recvmsg(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int in_flags, int& out_flags, boost::system::error_code& ec, size_t& bytes_transferred)
boost::asio::detail::socket_ops::non_blocking_recvmsg	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_recvmsg(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int in_flags, int& out_flags, boost::system::error_code& ec, size_t& bytes_transferred)
boost::asio::detail::socket_ops::non_blocking_send	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_send(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, boost::system::error_code& ec, size_t& bytes_transferred)
boost::asio::detail::socket_ops::non_blocking_send	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_send(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, boost::system::error_code& ec, size_t& bytes_transferred)
boost::asio::detail::socket_ops::non_blocking_sendto	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_sendto(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec, size_t& bytes_transferred)
boost::asio::detail::socket_ops::non_blocking_sendto	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_sendto(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec, size_t& bytes_transferred)
boost::asio::detail::socket_ops::noop_deleter	/usr/include/boost/asio/detail/socket_ops.hpp	/^struct noop_deleter { void operator()(void*) {} };$/;"	s	namespace:boost::asio::detail::socket_ops
boost::asio::detail::socket_ops::noop_deleter::operator ()	/usr/include/boost/asio/detail/socket_ops.hpp	/^struct noop_deleter { void operator()(void*) {} };$/;"	f	struct:boost::asio::detail::socket_ops::noop_deleter	access:public	signature:(void*)
boost::asio::detail::socket_ops::poll_connect	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int poll_connect(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
boost::asio::detail::socket_ops::poll_connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int poll_connect(socket_type s, boost::system::error_code& ec);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
boost::asio::detail::socket_ops::poll_read	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int poll_read(socket_type s, state_type state, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, boost::system::error_code& ec)
boost::asio::detail::socket_ops::poll_read	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int poll_read(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, boost::system::error_code& ec)
boost::asio::detail::socket_ops::poll_write	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int poll_write(socket_type s, state_type state, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, boost::system::error_code& ec)
boost::asio::detail::socket_ops::poll_write	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int poll_write(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, boost::system::error_code& ec)
boost::asio::detail::socket_ops::possible_dup	/usr/include/boost/asio/detail/socket_ops.hpp	/^  possible_dup = 64$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
boost::asio::detail::socket_ops::recv	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^signed_size_type recv(socket_type s, buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::recv	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL signed_size_type recv(socket_type s, buf* bufs,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::recvfrom	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^signed_size_type recvfrom(socket_type s, buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::recvfrom	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL signed_size_type recvfrom(socket_type s, buf* bufs,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::recvmsg	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^signed_size_type recvmsg(socket_type s, buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int in_flags, int& out_flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::recvmsg	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL signed_size_type recvmsg(socket_type s, buf* bufs,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int in_flags, int& out_flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::select	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int select(int nfds, fd_set* readfds, fd_set* writefds,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, timeval* timeout, boost::system::error_code& ec)
boost::asio::detail::socket_ops::select	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int select(int nfds, fd_set* readfds, fd_set* writefds,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, timeval* timeout, boost::system::error_code& ec)
boost::asio::detail::socket_ops::send	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^signed_size_type send(socket_type s, const buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::send	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL signed_size_type send(socket_type s, const buf* bufs,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sendto	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^signed_size_type sendto(socket_type s, const buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sendto	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL signed_size_type sendto(socket_type s, const buf* bufs,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::set_internal_non_blocking	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool set_internal_non_blocking(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, bool value, boost::system::error_code& ec)
boost::asio::detail::socket_ops::set_internal_non_blocking	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool set_internal_non_blocking(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, bool value, boost::system::error_code& ec)
boost::asio::detail::socket_ops::set_user_non_blocking	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool set_user_non_blocking(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, bool value, boost::system::error_code& ec)
boost::asio::detail::socket_ops::set_user_non_blocking	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool set_user_non_blocking(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, bool value, boost::system::error_code& ec)
boost::asio::detail::socket_ops::setsockopt	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int setsockopt(socket_type s, state_type& state, int level, int optname,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, int level, int optname, const void* optval, std::size_t optlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::setsockopt	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int setsockopt(socket_type s, state_type& state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, int level, int optname, const void* optval, std::size_t optlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::shared_cancel_token_type	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef shared_ptr<void> shared_cancel_token_type;$/;"	t	namespace:boost::asio::detail::socket_ops
boost::asio::detail::socket_ops::shutdown	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int shutdown(socket_type s, int what, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int what, boost::system::error_code& ec)
boost::asio::detail::socket_ops::shutdown	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int shutdown(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int what, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sockatmark	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool sockatmark(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sockatmark	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool sockatmark(socket_type s, boost::system::error_code& ec);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
boost::asio::detail::socket_ops::socket	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^socket_type socket(int af, int type, int protocol,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, int type, int protocol, boost::system::error_code& ec)
boost::asio::detail::socket_ops::socket	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL socket_type socket(int af, int type, int protocol,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(int af, int type, int protocol, boost::system::error_code& ec)
boost::asio::detail::socket_ops::socketpair	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int socketpair(int af, int type, int protocol,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, int type, int protocol, socket_type sv[2], boost::system::error_code& ec)
boost::asio::detail::socket_ops::socketpair	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int socketpair(int af, int type, int protocol,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(int af, int type, int protocol, socket_type sv[2], boost::system::error_code& ec)
boost::asio::detail::socket_ops::state_type	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef unsigned char state_type;$/;"	t	namespace:boost::asio::detail::socket_ops
boost::asio::detail::socket_ops::stream_oriented	/usr/include/boost/asio/detail/socket_ops.hpp	/^  stream_oriented = 16,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
boost::asio::detail::socket_ops::sync_accept	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^socket_type sync_accept(socket_type s, state_type state,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_accept	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL socket_type sync_accept(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_connect	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void sync_connect(socket_type s, const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void sync_connect(socket_type s, const socket_addr_type* addr,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_getnameinfo	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^boost::system::error_code sync_getnameinfo($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int sock_type, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_getnameinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL boost::system::error_code sync_getnameinfo($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int sock_type, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_recv	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^size_t sync_recv(socket_type s, state_type state, buf* bufs,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, buf* bufs, size_t count, int flags, bool all_empty, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_recv	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL size_t sync_recv(socket_type s, state_type state, buf* bufs,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, buf* bufs, size_t count, int flags, bool all_empty, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_recvfrom	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^size_t sync_recvfrom(socket_type s, state_type state, buf* bufs,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_recvfrom	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL size_t sync_recvfrom(socket_type s, state_type state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_recvmsg	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^size_t sync_recvmsg(socket_type s, state_type state,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, buf* bufs, size_t count, int in_flags, int& out_flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_recvmsg	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL size_t sync_recvmsg(socket_type s, state_type state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, buf* bufs, size_t count, int in_flags, int& out_flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_send	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^size_t sync_send(socket_type s, state_type state, const buf* bufs,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, const buf* bufs, size_t count, int flags, bool all_empty, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_send	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL size_t sync_send(socket_type s, state_type state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, const buf* bufs, size_t count, int flags, bool all_empty, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_sendto	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^size_t sync_sendto(socket_type s, state_type state, const buf* bufs,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sync_sendto	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL size_t sync_sendto(socket_type s, state_type state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::translate_addrinfo_error	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline boost::system::error_code translate_addrinfo_error(int error)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int error)
boost::asio::detail::socket_ops::translate_netdb_error	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline boost::system::error_code translate_netdb_error(int error)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int error)
boost::asio::detail::socket_ops::user_set_linger	/usr/include/boost/asio/detail/socket_ops.hpp	/^  user_set_linger = 8,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
boost::asio::detail::socket_ops::user_set_non_blocking	/usr/include/boost/asio/detail/socket_ops.hpp	/^  user_set_non_blocking = 1,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
boost::asio::detail::socket_ops::weak_cancel_token_type	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef weak_ptr<void> weak_cancel_token_type;$/;"	t	namespace:boost::asio::detail::socket_ops
boost::asio::detail::socket_option	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace socket_option {$/;"	n	namespace:boost::asio::detail
boost::asio::detail::socket_option::boolean	/usr/include/boost/asio/detail/socket_option.hpp	/^class boolean$/;"	c	namespace:boost::asio::detail::socket_option
boost::asio::detail::socket_option::boolean::boolean	/usr/include/boost/asio/detail/socket_option.hpp	/^  boolean()$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:()
boost::asio::detail::socket_option::boolean::boolean	/usr/include/boost/asio/detail/socket_option.hpp	/^  explicit boolean(bool v)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(bool v)
boost::asio::detail::socket_option::boolean::data	/usr/include/boost/asio/detail/socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::boolean::data	/usr/include/boost/asio/detail/socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&)
boost::asio::detail::socket_option::boolean::level	/usr/include/boost/asio/detail/socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::boolean::name	/usr/include/boost/asio/detail/socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::boolean::operator !	/usr/include/boost/asio/detail/socket_option.hpp	/^  bool operator!() const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:() const
boost::asio::detail::socket_option::boolean::operator =	/usr/include/boost/asio/detail/socket_option.hpp	/^  boolean& operator=(bool v)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(bool v)
boost::asio::detail::socket_option::boolean::operator bool	/usr/include/boost/asio/detail/socket_option.hpp	/^  operator bool() const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:() const
boost::asio::detail::socket_option::boolean::resize	/usr/include/boost/asio/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&, std::size_t s)
boost::asio::detail::socket_option::boolean::size	/usr/include/boost/asio/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::boolean::value	/usr/include/boost/asio/detail/socket_option.hpp	/^  bool value() const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:() const
boost::asio::detail::socket_option::boolean::value_	/usr/include/boost/asio/detail/socket_option.hpp	/^  int value_;$/;"	m	class:boost::asio::detail::socket_option::boolean	access:private
boost::asio::detail::socket_option::integer	/usr/include/boost/asio/detail/socket_option.hpp	/^class integer$/;"	c	namespace:boost::asio::detail::socket_option
boost::asio::detail::socket_option::integer::data	/usr/include/boost/asio/detail/socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::integer::data	/usr/include/boost/asio/detail/socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&)
boost::asio::detail::socket_option::integer::integer	/usr/include/boost/asio/detail/socket_option.hpp	/^  explicit integer(int v)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(int v)
boost::asio::detail::socket_option::integer::integer	/usr/include/boost/asio/detail/socket_option.hpp	/^  integer()$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:()
boost::asio::detail::socket_option::integer::level	/usr/include/boost/asio/detail/socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::integer::name	/usr/include/boost/asio/detail/socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::integer::operator =	/usr/include/boost/asio/detail/socket_option.hpp	/^  integer& operator=(int v)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(int v)
boost::asio::detail::socket_option::integer::resize	/usr/include/boost/asio/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&, std::size_t s)
boost::asio::detail::socket_option::integer::size	/usr/include/boost/asio/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::integer::value	/usr/include/boost/asio/detail/socket_option.hpp	/^  int value() const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:() const
boost::asio::detail::socket_option::integer::value_	/usr/include/boost/asio/detail/socket_option.hpp	/^  int value_;$/;"	m	class:boost::asio::detail::socket_option::integer	access:private
boost::asio::detail::socket_option::linger	/usr/include/boost/asio/detail/socket_option.hpp	/^class linger$/;"	c	namespace:boost::asio::detail::socket_option
boost::asio::detail::socket_option::linger::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/asio/detail/socket_option.hpp	/^  int timeout BOOST_PREVENT_MACRO_SUBSTITUTION() const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:() const
boost::asio::detail::socket_option::linger::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/asio/detail/socket_option.hpp	/^  void timeout BOOST_PREVENT_MACRO_SUBSTITUTION(int value)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(int value)
boost::asio::detail::socket_option::linger::data	/usr/include/boost/asio/detail/socket_option.hpp	/^  ::linger* data(const Protocol&)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&)
boost::asio::detail::socket_option::linger::data	/usr/include/boost/asio/detail/socket_option.hpp	/^  const ::linger* data(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::linger::enabled	/usr/include/boost/asio/detail/socket_option.hpp	/^  bool enabled() const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:() const
boost::asio::detail::socket_option::linger::enabled	/usr/include/boost/asio/detail/socket_option.hpp	/^  void enabled(bool value)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(bool value)
boost::asio::detail::socket_option::linger::level	/usr/include/boost/asio/detail/socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::linger::linger	/usr/include/boost/asio/detail/socket_option.hpp	/^  linger()$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:()
boost::asio::detail::socket_option::linger::linger	/usr/include/boost/asio/detail/socket_option.hpp	/^  linger(bool e, int t)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(bool e, int t)
boost::asio::detail::socket_option::linger::name	/usr/include/boost/asio/detail/socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::linger::resize	/usr/include/boost/asio/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&, std::size_t s)
boost::asio::detail::socket_option::linger::size	/usr/include/boost/asio/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::linger::value_	/usr/include/boost/asio/detail/socket_option.hpp	/^  ::linger value_;$/;"	m	class:boost::asio::detail::socket_option::linger	access:private
boost::asio::detail::socket_select_interrupter	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^class socket_select_interrupter$/;"	c	namespace:boost::asio::detail
boost::asio::detail::socket_select_interrupter::close_descriptors	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^void socket_select_interrupter::close_descriptors()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
boost::asio::detail::socket_select_interrupter::close_descriptors	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL void close_descriptors();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:private	signature:()
boost::asio::detail::socket_select_interrupter::interrupt	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^void socket_select_interrupter::interrupt()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
boost::asio::detail::socket_select_interrupter::interrupt	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
boost::asio::detail::socket_select_interrupter::open_descriptors	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^void socket_select_interrupter::open_descriptors()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
boost::asio::detail::socket_select_interrupter::open_descriptors	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL void open_descriptors();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:private	signature:()
boost::asio::detail::socket_select_interrupter::read_descriptor	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_type read_descriptor() const$/;"	f	class:boost::asio::detail::socket_select_interrupter	access:public	signature:() const
boost::asio::detail::socket_select_interrupter::read_descriptor_	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_type read_descriptor_;$/;"	m	class:boost::asio::detail::socket_select_interrupter	access:private
boost::asio::detail::socket_select_interrupter::recreate	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^void socket_select_interrupter::recreate()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
boost::asio::detail::socket_select_interrupter::recreate	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL void recreate();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
boost::asio::detail::socket_select_interrupter::reset	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^bool socket_select_interrupter::reset()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
boost::asio::detail::socket_select_interrupter::reset	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL bool reset();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
boost::asio::detail::socket_select_interrupter::socket_select_interrupter	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^socket_select_interrupter::socket_select_interrupter()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
boost::asio::detail::socket_select_interrupter::socket_select_interrupter	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL socket_select_interrupter();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
boost::asio::detail::socket_select_interrupter::write_descriptor_	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_type write_descriptor_;$/;"	m	class:boost::asio::detail::socket_select_interrupter	access:private
boost::asio::detail::socket_select_interrupter::~socket_select_interrupter	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^socket_select_interrupter::~socket_select_interrupter()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
boost::asio::detail::socket_select_interrupter::~socket_select_interrupter	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL ~socket_select_interrupter();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
boost::asio::detail::socket_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef SOCKET socket_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::solaris_fenced_block	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^class solaris_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::solaris_fenced_block::full	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:boost::asio::detail::solaris_fenced_block::full_t
boost::asio::detail::solaris_fenced_block::full_t	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:boost::asio::detail::solaris_fenced_block	access:public
boost::asio::detail::solaris_fenced_block::half	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:boost::asio::detail::solaris_fenced_block::half_t
boost::asio::detail::solaris_fenced_block::half_t	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:boost::asio::detail::solaris_fenced_block	access:public
boost::asio::detail::solaris_fenced_block::solaris_fenced_block	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  explicit solaris_fenced_block(full_t)$/;"	f	class:boost::asio::detail::solaris_fenced_block	access:public	signature:(full_t)
boost::asio::detail::solaris_fenced_block::solaris_fenced_block	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  explicit solaris_fenced_block(half_t)$/;"	f	class:boost::asio::detail::solaris_fenced_block	access:public	signature:(half_t)
boost::asio::detail::solaris_fenced_block::~solaris_fenced_block	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  ~solaris_fenced_block()$/;"	f	class:boost::asio::detail::solaris_fenced_block	access:public	signature:()
boost::asio::detail::static_mutex	/usr/include/boost/asio/detail/static_mutex.hpp	/^typedef null_static_mutex static_mutex;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::strand_service	/usr/include/boost/asio/detail/strand_service.hpp	/^class strand_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::strand_service::construct	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^void strand_service::construct(strand_service::implementation_type& impl)$/;"	f	class:boost::asio::detail::strand_service	signature:(strand_service::implementation_type& impl)
boost::asio::detail::strand_service::construct	/usr/include/boost/asio/detail/strand_service.hpp	/^  BOOST_ASIO_DECL void construct(implementation_type& impl);$/;"	p	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::strand_service::dispatch	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^void strand_service::dispatch(strand_service::implementation_type& impl,$/;"	f	class:boost::asio::detail::strand_service	signature:(strand_service::implementation_type& impl, Handler handler)
boost::asio::detail::strand_service::dispatch	/usr/include/boost/asio/detail/strand_service.hpp	/^  void dispatch(implementation_type& impl, Handler handler);$/;"	p	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl, Handler handler)
boost::asio::detail::strand_service::do_complete	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^void strand_service::do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::strand_service	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& ec, std::size_t )
boost::asio::detail::strand_service::do_complete	/usr/include/boost/asio/detail/strand_service.hpp	/^  BOOST_ASIO_DECL static void do_complete(io_service_impl* owner,$/;"	p	class:boost::asio::detail::strand_service	access:private	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::strand_service::do_dispatch	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^bool strand_service::do_dispatch(implementation_type& impl, operation* op)$/;"	f	class:boost::asio::detail::strand_service	signature:(implementation_type& impl, operation* op)
boost::asio::detail::strand_service::do_dispatch	/usr/include/boost/asio/detail/strand_service.hpp	/^  BOOST_ASIO_DECL bool do_dispatch(implementation_type& impl, operation* op);$/;"	p	class:boost::asio::detail::strand_service	access:private	signature:(implementation_type& impl, operation* op)
boost::asio::detail::strand_service::do_post	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^void strand_service::do_post(implementation_type& impl, operation* op)$/;"	f	class:boost::asio::detail::strand_service	signature:(implementation_type& impl, operation* op)
boost::asio::detail::strand_service::do_post	/usr/include/boost/asio/detail/strand_service.hpp	/^  BOOST_ASIO_DECL void do_post(implementation_type& impl, operation* op);$/;"	p	class:boost::asio::detail::strand_service	access:private	signature:(implementation_type& impl, operation* op)
boost::asio::detail::strand_service::implementation_type	/usr/include/boost/asio/detail/strand_service.hpp	/^  typedef strand_impl* implementation_type;$/;"	t	class:boost::asio::detail::strand_service	access:public
boost::asio::detail::strand_service::implementations_	/usr/include/boost/asio/detail/strand_service.hpp	/^  scoped_ptr<strand_impl> implementations_[num_implementations];$/;"	m	class:boost::asio::detail::strand_service	access:private
boost::asio::detail::strand_service::io_service_	/usr/include/boost/asio/detail/strand_service.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::strand_service	access:private
boost::asio::detail::strand_service::mutex_	/usr/include/boost/asio/detail/strand_service.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::strand_service	access:private
boost::asio::detail::strand_service::num_implementations	/usr/include/boost/asio/detail/strand_service.hpp	/^  enum { num_implementations = 193 };$/;"	e	enum:boost::asio::detail::strand_service::__anon17
boost::asio::detail::strand_service::num_implementations	/usr/include/boost/asio/detail/strand_service.hpp	/^  enum { num_implementations = BOOST_ASIO_STRAND_IMPLEMENTATIONS };$/;"	e	enum:boost::asio::detail::strand_service::__anon16
boost::asio::detail::strand_service::on_dispatch_exit	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^struct strand_service::on_dispatch_exit$/;"	s	class:boost::asio::detail::strand_service
boost::asio::detail::strand_service::on_dispatch_exit::impl_	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^  strand_impl* impl_;$/;"	m	struct:boost::asio::detail::strand_service::on_dispatch_exit	access:public
boost::asio::detail::strand_service::on_dispatch_exit::io_service_	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^  io_service_impl* io_service_;$/;"	m	struct:boost::asio::detail::strand_service::on_dispatch_exit	access:public
boost::asio::detail::strand_service::on_dispatch_exit::~on_dispatch_exit	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^  ~on_dispatch_exit()$/;"	f	struct:boost::asio::detail::strand_service::on_dispatch_exit	access:public	signature:()
boost::asio::detail::strand_service::on_do_complete_exit	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^struct strand_service::on_do_complete_exit$/;"	s	class:boost::asio::detail::strand_service	file:
boost::asio::detail::strand_service::on_do_complete_exit::impl_	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^  strand_impl* impl_;$/;"	m	struct:boost::asio::detail::strand_service::on_do_complete_exit	file:	access:public
boost::asio::detail::strand_service::on_do_complete_exit::owner_	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^  io_service_impl* owner_;$/;"	m	struct:boost::asio::detail::strand_service::on_do_complete_exit	file:	access:public
boost::asio::detail::strand_service::on_do_complete_exit::~on_do_complete_exit	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^  ~on_do_complete_exit()$/;"	f	struct:boost::asio::detail::strand_service::on_do_complete_exit	access:public	signature:()
boost::asio::detail::strand_service::post	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^void strand_service::post(strand_service::implementation_type& impl,$/;"	f	class:boost::asio::detail::strand_service	signature:(strand_service::implementation_type& impl, Handler handler)
boost::asio::detail::strand_service::post	/usr/include/boost/asio/detail/strand_service.hpp	/^  void post(implementation_type& impl, Handler handler);$/;"	p	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl, Handler handler)
boost::asio::detail::strand_service::salt_	/usr/include/boost/asio/detail/strand_service.hpp	/^  std::size_t salt_;$/;"	m	class:boost::asio::detail::strand_service	access:private
boost::asio::detail::strand_service::shutdown_service	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^void strand_service::shutdown_service()$/;"	f	class:boost::asio::detail::strand_service	signature:()
boost::asio::detail::strand_service::shutdown_service	/usr/include/boost/asio/detail/strand_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::strand_service	access:public	signature:()
boost::asio::detail::strand_service::strand_impl	/usr/include/boost/asio/detail/strand_service.hpp	/^  class strand_impl$/;"	c	class:boost::asio::detail::strand_service	inherits:operation	access:public
boost::asio::detail::strand_service::strand_impl::locked_	/usr/include/boost/asio/detail/strand_service.hpp	/^    bool locked_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
boost::asio::detail::strand_service::strand_impl::mutex_	/usr/include/boost/asio/detail/strand_service.hpp	/^    boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
boost::asio::detail::strand_service::strand_impl::ready_queue_	/usr/include/boost/asio/detail/strand_service.hpp	/^    op_queue<operation> ready_queue_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
boost::asio::detail::strand_service::strand_impl::strand_impl	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^inline strand_service::strand_impl::strand_impl()$/;"	f	class:boost::asio::detail::strand_service::strand_impl	signature:()
boost::asio::detail::strand_service::strand_impl::strand_impl	/usr/include/boost/asio/detail/strand_service.hpp	/^    strand_impl();$/;"	p	class:boost::asio::detail::strand_service::strand_impl	access:public	signature:()
boost::asio::detail::strand_service::strand_impl::waiting_queue_	/usr/include/boost/asio/detail/strand_service.hpp	/^    op_queue<operation> waiting_queue_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
boost::asio::detail::strand_service::strand_service	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^strand_service::strand_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::strand_service	signature:(boost::asio::io_service& io_service)
boost::asio::detail::strand_service::strand_service	/usr/include/boost/asio/detail/strand_service.hpp	/^  BOOST_ASIO_DECL explicit strand_service(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::strand_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::task_io_service	/usr/include/boost/asio/detail/task_io_service.hpp	/^class task_io_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::task_io_service::abandon_operations	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::abandon_operations($/;"	f	class:boost::asio::detail::task_io_service	signature:( op_queue<task_io_service::operation>& ops)
boost::asio::detail::task_io_service::abandon_operations	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void abandon_operations(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(op_queue<operation>& ops)
boost::asio::detail::task_io_service::can_dispatch	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool can_dispatch()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::dispatch	/usr/include/boost/asio/detail/impl/task_io_service.hpp	/^void task_io_service::dispatch(Handler handler)$/;"	f	class:boost::asio::detail::task_io_service	signature:(Handler handler)
boost::asio::detail::task_io_service::dispatch	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void dispatch(Handler handler);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(Handler handler)
boost::asio::detail::task_io_service::do_poll_one	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^std::size_t task_io_service::do_poll_one(mutex::scoped_lock& lock,$/;"	f	class:boost::asio::detail::task_io_service	signature:(mutex::scoped_lock& lock, task_io_service::thread_info& this_thread, const boost::system::error_code& ec)
boost::asio::detail::task_io_service::do_poll_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL std::size_t do_poll_one(mutex::scoped_lock& lock,$/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:(mutex::scoped_lock& lock, thread_info& this_thread, const boost::system::error_code& ec)
boost::asio::detail::task_io_service::do_run_one	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^std::size_t task_io_service::do_run_one(mutex::scoped_lock& lock,$/;"	f	class:boost::asio::detail::task_io_service	signature:(mutex::scoped_lock& lock, task_io_service::thread_info& this_thread, const boost::system::error_code& ec)
boost::asio::detail::task_io_service::do_run_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL std::size_t do_run_one(mutex::scoped_lock& lock,$/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:(mutex::scoped_lock& lock, thread_info& this_thread, const boost::system::error_code& ec)
boost::asio::detail::task_io_service::first_idle_thread_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  thread_info* first_idle_thread_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::init_task	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::init_task()$/;"	f	class:boost::asio::detail::task_io_service	signature:()
boost::asio::detail::task_io_service::init_task	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void init_task();$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::mutex_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  mutable mutex mutex_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::one_thread_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  const bool one_thread_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::op_queue_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  op_queue<operation> op_queue_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::operation	/usr/include/boost/asio/detail/task_io_service.hpp	/^  typedef task_io_service_operation operation;$/;"	t	class:boost::asio::detail::task_io_service	access:public
boost::asio::detail::task_io_service::outstanding_work_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  atomic_count outstanding_work_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::poll	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^std::size_t task_io_service::poll(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::poll	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL std::size_t poll(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::poll_one	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^std::size_t task_io_service::poll_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::poll_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL std::size_t poll_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::post	/usr/include/boost/asio/detail/impl/task_io_service.hpp	/^void task_io_service::post(Handler handler)$/;"	f	class:boost::asio::detail::task_io_service	signature:(Handler handler)
boost::asio::detail::task_io_service::post	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void post(Handler handler);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(Handler handler)
boost::asio::detail::task_io_service::post_deferred_completion	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_deferred_completion(task_io_service::operation* op)$/;"	f	class:boost::asio::detail::task_io_service	signature:(task_io_service::operation* op)
boost::asio::detail::task_io_service::post_deferred_completion	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_deferred_completion(operation* op);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(operation* op)
boost::asio::detail::task_io_service::post_deferred_completions	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_deferred_completions($/;"	f	class:boost::asio::detail::task_io_service	signature:( op_queue<task_io_service::operation>& ops)
boost::asio::detail::task_io_service::post_deferred_completions	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_deferred_completions(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(op_queue<operation>& ops)
boost::asio::detail::task_io_service::post_immediate_completion	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_immediate_completion(task_io_service::operation* op)$/;"	f	class:boost::asio::detail::task_io_service	signature:(task_io_service::operation* op)
boost::asio::detail::task_io_service::post_immediate_completion	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_immediate_completion(operation* op);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(operation* op)
boost::asio::detail::task_io_service::post_non_private_deferred_completion	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_non_private_deferred_completion($/;"	f	class:boost::asio::detail::task_io_service	signature:( task_io_service::operation* op)
boost::asio::detail::task_io_service::post_non_private_deferred_completion	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_non_private_deferred_completion(operation* op);$/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:(operation* op)
boost::asio::detail::task_io_service::post_non_private_immediate_completion	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_non_private_immediate_completion($/;"	f	class:boost::asio::detail::task_io_service	signature:( task_io_service::operation* op)
boost::asio::detail::task_io_service::post_non_private_immediate_completion	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_non_private_immediate_completion(operation* op);$/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:(operation* op)
boost::asio::detail::task_io_service::post_private_deferred_completion	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_private_deferred_completion($/;"	f	class:boost::asio::detail::task_io_service	signature:( task_io_service::operation* op)
boost::asio::detail::task_io_service::post_private_deferred_completion	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_private_deferred_completion(operation* op);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(operation* op)
boost::asio::detail::task_io_service::post_private_immediate_completion	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_private_immediate_completion($/;"	f	class:boost::asio::detail::task_io_service	signature:( task_io_service::operation* op)
boost::asio::detail::task_io_service::post_private_immediate_completion	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_private_immediate_completion(operation* op);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(operation* op)
boost::asio::detail::task_io_service::reset	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::reset()$/;"	f	class:boost::asio::detail::task_io_service	signature:()
boost::asio::detail::task_io_service::reset	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void reset();$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::run	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^std::size_t task_io_service::run(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::run	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL std::size_t run(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::run_one	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^std::size_t task_io_service::run_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::run_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL std::size_t run_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::shutdown_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::shutdown_service	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::shutdown_service()$/;"	f	class:boost::asio::detail::task_io_service	signature:()
boost::asio::detail::task_io_service::shutdown_service	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::stop	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::stop()$/;"	f	class:boost::asio::detail::task_io_service	signature:()
boost::asio::detail::task_io_service::stop	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void stop();$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::stop_all_threads	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::stop_all_threads($/;"	f	class:boost::asio::detail::task_io_service	signature:( mutex::scoped_lock& lock)
boost::asio::detail::task_io_service::stop_all_threads	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void stop_all_threads(mutex::scoped_lock& lock);$/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:(mutex::scoped_lock& lock)
boost::asio::detail::task_io_service::stopped	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^bool task_io_service::stopped() const$/;"	f	class:boost::asio::detail::task_io_service	signature:() const
boost::asio::detail::task_io_service::stopped	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL bool stopped() const;$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:() const
boost::asio::detail::task_io_service::stopped_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool stopped_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::task_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  reactor* task_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::task_cleanup	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^struct task_io_service::task_cleanup$/;"	s	class:boost::asio::detail::task_io_service	file:
boost::asio::detail::task_io_service::task_cleanup::lock_	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  mutex::scoped_lock* lock_;$/;"	m	struct:boost::asio::detail::task_io_service::task_cleanup	file:	access:public
boost::asio::detail::task_io_service::task_cleanup::task_io_service_	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  task_io_service* task_io_service_;$/;"	m	struct:boost::asio::detail::task_io_service::task_cleanup	file:	access:public
boost::asio::detail::task_io_service::task_cleanup::this_thread_	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  thread_info* this_thread_;$/;"	m	struct:boost::asio::detail::task_io_service::task_cleanup	file:	access:public
boost::asio::detail::task_io_service::task_cleanup::~task_cleanup	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  ~task_cleanup()$/;"	f	struct:boost::asio::detail::task_io_service::task_cleanup	access:public	signature:()
boost::asio::detail::task_io_service::task_interrupted_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool task_interrupted_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::task_io_service	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^task_io_service::task_io_service($/;"	f	class:boost::asio::detail::task_io_service	signature:( boost::asio::io_service& io_service, std::size_t concurrency_hint)
boost::asio::detail::task_io_service::task_io_service	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL task_io_service(boost::asio::io_service& io_service,$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(boost::asio::io_service& io_service, std::size_t concurrency_hint = 0)
boost::asio::detail::task_io_service::task_operation	/usr/include/boost/asio/detail/task_io_service.hpp	/^  struct task_operation : operation$/;"	s	class:boost::asio::detail::task_io_service	inherits:operation	access:private
boost::asio::detail::task_io_service::task_operation::task_operation	/usr/include/boost/asio/detail/task_io_service.hpp	/^    task_operation() : operation(0) {}$/;"	f	struct:boost::asio::detail::task_io_service::task_operation	access:public	signature:()
boost::asio::detail::task_io_service::task_operation_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  } task_operation_;$/;"	m	class:boost::asio::detail::task_io_service	typeref:struct:boost::asio::detail::task_io_service::task_operation	access:private
boost::asio::detail::task_io_service::thread_call_stack	/usr/include/boost/asio/detail/task_io_service.hpp	/^  typedef call_stack<task_io_service, thread_info> thread_call_stack;$/;"	t	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::thread_info	/usr/include/boost/asio/detail/task_io_service.hpp	/^  typedef task_io_service_thread_info thread_info;$/;"	t	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::wake_one_idle_thread_and_unlock	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^bool task_io_service::wake_one_idle_thread_and_unlock($/;"	f	class:boost::asio::detail::task_io_service	signature:( mutex::scoped_lock& lock)
boost::asio::detail::task_io_service::wake_one_idle_thread_and_unlock	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL bool wake_one_idle_thread_and_unlock($/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:( mutex::scoped_lock& lock)
boost::asio::detail::task_io_service::wake_one_thread_and_unlock	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::wake_one_thread_and_unlock($/;"	f	class:boost::asio::detail::task_io_service	signature:( mutex::scoped_lock& lock)
boost::asio::detail::task_io_service::wake_one_thread_and_unlock	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void wake_one_thread_and_unlock($/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:( mutex::scoped_lock& lock)
boost::asio::detail::task_io_service::work_cleanup	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^struct task_io_service::work_cleanup$/;"	s	class:boost::asio::detail::task_io_service	file:
boost::asio::detail::task_io_service::work_cleanup::lock_	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  mutex::scoped_lock* lock_;$/;"	m	struct:boost::asio::detail::task_io_service::work_cleanup	file:	access:public
boost::asio::detail::task_io_service::work_cleanup::task_io_service_	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  task_io_service* task_io_service_;$/;"	m	struct:boost::asio::detail::task_io_service::work_cleanup	file:	access:public
boost::asio::detail::task_io_service::work_cleanup::this_thread_	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  thread_info* this_thread_;$/;"	m	struct:boost::asio::detail::task_io_service::work_cleanup	file:	access:public
boost::asio::detail::task_io_service::work_cleanup::~work_cleanup	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  ~work_cleanup()$/;"	f	struct:boost::asio::detail::task_io_service::work_cleanup	access:public	signature:()
boost::asio::detail::task_io_service::work_finished	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void work_finished()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::work_started	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void work_started()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service_thread_info	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^struct task_io_service_thread_info : public thread_info_base$/;"	s	namespace:boost::asio::detail	inherits:thread_info_base
boost::asio::detail::task_io_service_thread_info::next	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^  task_io_service_thread_info* next;$/;"	m	struct:boost::asio::detail::task_io_service_thread_info	access:public
boost::asio::detail::task_io_service_thread_info::private_op_queue	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^  op_queue<task_io_service_operation> private_op_queue;$/;"	m	struct:boost::asio::detail::task_io_service_thread_info	access:public
boost::asio::detail::task_io_service_thread_info::private_outstanding_work	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^  long private_outstanding_work;$/;"	m	struct:boost::asio::detail::task_io_service_thread_info	access:public
boost::asio::detail::task_io_service_thread_info::wakeup_event	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^  event* wakeup_event;$/;"	m	struct:boost::asio::detail::task_io_service_thread_info	access:public
boost::asio::detail::thread	/usr/include/boost/asio/detail/thread.hpp	/^typedef null_thread thread;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::thread_info_base	/usr/include/boost/asio/detail/thread_info_base.hpp	/^class thread_info_base$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::thread_info_base::allocate	/usr/include/boost/asio/detail/thread_info_base.hpp	/^  static void* allocate(thread_info_base* this_thread, std::size_t size)$/;"	f	class:boost::asio::detail::thread_info_base	access:public	signature:(thread_info_base* this_thread, std::size_t size)
boost::asio::detail::thread_info_base::deallocate	/usr/include/boost/asio/detail/thread_info_base.hpp	/^  static void deallocate(thread_info_base* this_thread,$/;"	f	class:boost::asio::detail::thread_info_base	access:public	signature:(thread_info_base* this_thread, void* pointer, std::size_t size)
boost::asio::detail::thread_info_base::reusable_memory_	/usr/include/boost/asio/detail/thread_info_base.hpp	/^  void* reusable_memory_;$/;"	m	class:boost::asio::detail::thread_info_base	access:private
boost::asio::detail::thread_info_base::thread_info_base	/usr/include/boost/asio/detail/thread_info_base.hpp	/^  thread_info_base()$/;"	f	class:boost::asio::detail::thread_info_base	access:public	signature:()
boost::asio::detail::thread_info_base::~thread_info_base	/usr/include/boost/asio/detail/thread_info_base.hpp	/^  ~thread_info_base()$/;"	f	class:boost::asio::detail::thread_info_base	access:public	signature:()
boost::asio::detail::throw_error	/usr/include/boost/asio/detail/throw_error.hpp	/^inline void throw_error(const boost::system::error_code& err)$/;"	f	namespace:boost::asio::detail	signature:(const boost::system::error_code& err)
boost::asio::detail::throw_error	/usr/include/boost/asio/detail/throw_error.hpp	/^inline void throw_error(const boost::system::error_code& err,$/;"	f	namespace:boost::asio::detail	signature:(const boost::system::error_code& err, const char* location)
boost::asio::detail::timer_queue	/usr/include/boost/asio/detail/timer_queue.hpp	/^class timer_queue$/;"	c	namespace:boost::asio::detail	inherits:timer_queue_base
boost::asio::detail::timer_queue	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^class timer_queue<time_traits<boost::posix_time::ptime> >$/;"	c	namespace:boost::asio::detail	inherits:timer_queue_base
boost::asio::detail::timer_queue::cancel_timer	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^std::size_t timer_queue<time_traits<boost::posix_time::ptime> >::cancel_timer($/;"	f	class:boost::asio::detail::timer_queue	signature:( per_timer_data& timer, op_queue<operation>& ops, std::size_t max_cancelled)
boost::asio::detail::timer_queue::cancel_timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  std::size_t cancel_timer(per_timer_data& timer, op_queue<operation>& ops,$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(per_timer_data& timer, op_queue<operation>& ops, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
boost::asio::detail::timer_queue::cancel_timer	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL std::size_t cancel_timer($/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:( per_timer_data& timer, op_queue<operation>& ops, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
boost::asio::detail::timer_queue::down_heap	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void down_heap(std::size_t index)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(std::size_t index)
boost::asio::detail::timer_queue::duration_type	/usr/include/boost/asio/detail/timer_queue.hpp	/^  typedef typename Time_Traits::duration_type duration_type;$/;"	t	class:boost::asio::detail::timer_queue	access:public
boost::asio::detail::timer_queue::duration_type	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  typedef boost::posix_time::time_duration duration_type;$/;"	t	class:boost::asio::detail::timer_queue	access:public
boost::asio::detail::timer_queue::empty	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^bool timer_queue<time_traits<boost::posix_time::ptime> >::empty() const$/;"	f	class:boost::asio::detail::timer_queue	signature:() const
boost::asio::detail::timer_queue::empty	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual bool empty() const$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:() const
boost::asio::detail::timer_queue::empty	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL virtual bool empty() const;$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:() const
boost::asio::detail::timer_queue::enqueue_timer	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^bool timer_queue<time_traits<boost::posix_time::ptime> >::enqueue_timer($/;"	f	class:boost::asio::detail::timer_queue	signature:( const time_type& time, per_timer_data& timer, wait_op* op)
boost::asio::detail::timer_queue::enqueue_timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  bool enqueue_timer(const time_type& time, per_timer_data& timer, wait_op* op)$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(const time_type& time, per_timer_data& timer, wait_op* op)
boost::asio::detail::timer_queue::enqueue_timer	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL bool enqueue_timer(const time_type& time,$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:(const time_type& time, per_timer_data& timer, wait_op* op)
boost::asio::detail::timer_queue::get_all_timers	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^void timer_queue<time_traits<boost::posix_time::ptime> >::get_all_timers($/;"	f	class:boost::asio::detail::timer_queue	signature:( op_queue<operation>& ops)
boost::asio::detail::timer_queue::get_all_timers	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual void get_all_timers(op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(op_queue<operation>& ops)
boost::asio::detail::timer_queue::get_all_timers	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL virtual void get_all_timers(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:(op_queue<operation>& ops)
boost::asio::detail::timer_queue::get_ready_timers	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^void timer_queue<time_traits<boost::posix_time::ptime> >::get_ready_timers($/;"	f	class:boost::asio::detail::timer_queue	signature:( op_queue<operation>& ops)
boost::asio::detail::timer_queue::get_ready_timers	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual void get_ready_timers(op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(op_queue<operation>& ops)
boost::asio::detail::timer_queue::get_ready_timers	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL virtual void get_ready_timers(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:(op_queue<operation>& ops)
boost::asio::detail::timer_queue::heap_	/usr/include/boost/asio/detail/timer_queue.hpp	/^  std::vector<heap_entry> heap_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
boost::asio::detail::timer_queue::heap_entry	/usr/include/boost/asio/detail/timer_queue.hpp	/^  struct heap_entry$/;"	s	class:boost::asio::detail::timer_queue	access:private
boost::asio::detail::timer_queue::heap_entry::time_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    time_type time_;$/;"	m	struct:boost::asio::detail::timer_queue::heap_entry	access:public
boost::asio::detail::timer_queue::heap_entry::timer_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    per_timer_data* timer_;$/;"	m	struct:boost::asio::detail::timer_queue::heap_entry	access:public
boost::asio::detail::timer_queue::impl_	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  timer_queue<forwarding_posix_time_traits> impl_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
boost::asio::detail::timer_queue::is_positive_infinity	/usr/include/boost/asio/detail/timer_queue.hpp	/^  static bool is_positive_infinity($/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:( const boost::date_time::base_time<T, TimeSystem>& time)
boost::asio::detail::timer_queue::is_positive_infinity	/usr/include/boost/asio/detail/timer_queue.hpp	/^  static bool is_positive_infinity(const Time_Type&)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(const Time_Type&)
boost::asio::detail::timer_queue::per_timer_data	/usr/include/boost/asio/detail/timer_queue.hpp	/^  class per_timer_data$/;"	c	class:boost::asio::detail::timer_queue	access:public
boost::asio::detail::timer_queue::per_timer_data	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^    per_timer_data;$/;"	t	class:boost::asio::detail::timer_queue	access:public
boost::asio::detail::timer_queue::per_timer_data::heap_index_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    std::size_t heap_index_;$/;"	m	class:boost::asio::detail::timer_queue::per_timer_data	access:private
boost::asio::detail::timer_queue::per_timer_data::next_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    per_timer_data* next_;$/;"	m	class:boost::asio::detail::timer_queue::per_timer_data	access:private
boost::asio::detail::timer_queue::per_timer_data::op_queue_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    op_queue<wait_op> op_queue_;$/;"	m	class:boost::asio::detail::timer_queue::per_timer_data	access:private
boost::asio::detail::timer_queue::per_timer_data::per_timer_data	/usr/include/boost/asio/detail/timer_queue.hpp	/^    per_timer_data() : next_(0), prev_(0) {}$/;"	f	class:boost::asio::detail::timer_queue::per_timer_data	access:public	signature:()
boost::asio::detail::timer_queue::per_timer_data::prev_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    per_timer_data* prev_;$/;"	m	class:boost::asio::detail::timer_queue::per_timer_data	access:private
boost::asio::detail::timer_queue::remove_timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void remove_timer(per_timer_data& timer)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(per_timer_data& timer)
boost::asio::detail::timer_queue::swap_heap	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void swap_heap(std::size_t index1, std::size_t index2)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(std::size_t index1, std::size_t index2)
boost::asio::detail::timer_queue::time_type	/usr/include/boost/asio/detail/timer_queue.hpp	/^  typedef typename Time_Traits::time_type time_type;$/;"	t	class:boost::asio::detail::timer_queue	access:public
boost::asio::detail::timer_queue::time_type	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  typedef boost::posix_time::ptime time_type;$/;"	t	class:boost::asio::detail::timer_queue	access:public
boost::asio::detail::timer_queue::timer_queue	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^timer_queue<time_traits<boost::posix_time::ptime> >::timer_queue()$/;"	f	class:boost::asio::detail::timer_queue	signature:()
boost::asio::detail::timer_queue::timer_queue	/usr/include/boost/asio/detail/timer_queue.hpp	/^  timer_queue()$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:()
boost::asio::detail::timer_queue::timer_queue	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL timer_queue();$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:()
boost::asio::detail::timer_queue::timers_	/usr/include/boost/asio/detail/timer_queue.hpp	/^  per_timer_data* timers_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
boost::asio::detail::timer_queue::to_msec	/usr/include/boost/asio/detail/timer_queue.hpp	/^  long to_msec(const Duration& d, long max_duration) const$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(const Duration& d, long max_duration) const
boost::asio::detail::timer_queue::to_usec	/usr/include/boost/asio/detail/timer_queue.hpp	/^  long to_usec(const Duration& d, long max_duration) const$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(const Duration& d, long max_duration) const
boost::asio::detail::timer_queue::up_heap	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void up_heap(std::size_t index)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(std::size_t index)
boost::asio::detail::timer_queue::wait_duration_msec	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^long timer_queue<time_traits<boost::posix_time::ptime> >::wait_duration_msec($/;"	f	class:boost::asio::detail::timer_queue	signature:( long max_duration) const
boost::asio::detail::timer_queue::wait_duration_msec	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual long wait_duration_msec(long max_duration) const$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(long max_duration) const
boost::asio::detail::timer_queue::wait_duration_msec	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL virtual long wait_duration_msec(long max_duration) const;$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:(long max_duration) const
boost::asio::detail::timer_queue::wait_duration_usec	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^long timer_queue<time_traits<boost::posix_time::ptime> >::wait_duration_usec($/;"	f	class:boost::asio::detail::timer_queue	signature:( long max_duration) const
boost::asio::detail::timer_queue::wait_duration_usec	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual long wait_duration_usec(long max_duration) const$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(long max_duration) const
boost::asio::detail::timer_queue::wait_duration_usec	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL virtual long wait_duration_usec(long max_duration) const;$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:(long max_duration) const
boost::asio::detail::timer_queue::~timer_queue	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^timer_queue<time_traits<boost::posix_time::ptime> >::~timer_queue()$/;"	f	class:boost::asio::detail::timer_queue	signature:()
boost::asio::detail::timer_queue::~timer_queue	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL virtual ~timer_queue();$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:()
boost::asio::detail::timer_queue_base	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^class timer_queue_base$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::timer_queue_base::empty	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual bool empty() const = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:() const
boost::asio::detail::timer_queue_base::get_all_timers	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual void get_all_timers(op_queue<operation>& ops) = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:(op_queue<operation>& ops)
boost::asio::detail::timer_queue_base::get_ready_timers	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual void get_ready_timers(op_queue<operation>& ops) = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:(op_queue<operation>& ops)
boost::asio::detail::timer_queue_base::next_	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  timer_queue_base* next_;$/;"	m	class:boost::asio::detail::timer_queue_base	access:private
boost::asio::detail::timer_queue_base::timer_queue_base	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  timer_queue_base() : next_(0) {}$/;"	f	class:boost::asio::detail::timer_queue_base	access:public	signature:()
boost::asio::detail::timer_queue_base::wait_duration_msec	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual long wait_duration_msec(long max_duration) const = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:(long max_duration) const
boost::asio::detail::timer_queue_base::wait_duration_usec	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual long wait_duration_usec(long max_duration) const = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:(long max_duration) const
boost::asio::detail::timer_queue_base::~timer_queue_base	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual ~timer_queue_base() {}$/;"	f	class:boost::asio::detail::timer_queue_base	access:public	signature:()
boost::asio::detail::timer_queue_set	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^class timer_queue_set$/;"	c	namespace:boost::asio::detail
boost::asio::detail::timer_queue_set::all_empty	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^bool timer_queue_set::all_empty() const$/;"	f	class:boost::asio::detail::timer_queue_set	signature:() const
boost::asio::detail::timer_queue_set::all_empty	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL bool all_empty() const;$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:() const
boost::asio::detail::timer_queue_set::erase	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^void timer_queue_set::erase(timer_queue_base* q)$/;"	f	class:boost::asio::detail::timer_queue_set	signature:(timer_queue_base* q)
boost::asio::detail::timer_queue_set::erase	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL void erase(timer_queue_base* q);$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:(timer_queue_base* q)
boost::asio::detail::timer_queue_set::first_	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  timer_queue_base* first_;$/;"	m	class:boost::asio::detail::timer_queue_set	access:private
boost::asio::detail::timer_queue_set::get_all_timers	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^void timer_queue_set::get_all_timers(op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::timer_queue_set	signature:(op_queue<operation>& ops)
boost::asio::detail::timer_queue_set::get_all_timers	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL void get_all_timers(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:(op_queue<operation>& ops)
boost::asio::detail::timer_queue_set::get_ready_timers	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^void timer_queue_set::get_ready_timers(op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::timer_queue_set	signature:(op_queue<operation>& ops)
boost::asio::detail::timer_queue_set::get_ready_timers	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL void get_ready_timers(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:(op_queue<operation>& ops)
boost::asio::detail::timer_queue_set::insert	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^void timer_queue_set::insert(timer_queue_base* q)$/;"	f	class:boost::asio::detail::timer_queue_set	signature:(timer_queue_base* q)
boost::asio::detail::timer_queue_set::insert	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL void insert(timer_queue_base* q);$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:(timer_queue_base* q)
boost::asio::detail::timer_queue_set::timer_queue_set	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^timer_queue_set::timer_queue_set()$/;"	f	class:boost::asio::detail::timer_queue_set	signature:()
boost::asio::detail::timer_queue_set::timer_queue_set	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL timer_queue_set();$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:()
boost::asio::detail::timer_queue_set::wait_duration_msec	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^long timer_queue_set::wait_duration_msec(long max_duration) const$/;"	f	class:boost::asio::detail::timer_queue_set	signature:(long max_duration) const
boost::asio::detail::timer_queue_set::wait_duration_msec	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL long wait_duration_msec(long max_duration) const;$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:(long max_duration) const
boost::asio::detail::timer_queue_set::wait_duration_usec	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^long timer_queue_set::wait_duration_usec(long max_duration) const$/;"	f	class:boost::asio::detail::timer_queue_set	signature:(long max_duration) const
boost::asio::detail::timer_queue_set::wait_duration_usec	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL long wait_duration_usec(long max_duration) const;$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:(long max_duration) const
boost::asio::detail::timer_scheduler	/usr/include/boost/asio/detail/timer_scheduler_fwd.hpp	/^typedef win_iocp_io_service timer_scheduler;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::transfer_all_t	/usr/include/boost/asio/completion_condition.hpp	/^class transfer_all_t$/;"	c	namespace:boost::asio::detail
boost::asio::detail::transfer_all_t::operator ()	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t)$/;"	f	class:boost::asio::detail::transfer_all_t	access:public	signature:(const Error& err, std::size_t)
boost::asio::detail::transfer_all_t::result_type	/usr/include/boost/asio/completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:boost::asio::detail::transfer_all_t	access:public
boost::asio::detail::transfer_at_least_t	/usr/include/boost/asio/completion_condition.hpp	/^class transfer_at_least_t$/;"	c	namespace:boost::asio::detail
boost::asio::detail::transfer_at_least_t::minimum_	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t minimum_;$/;"	m	class:boost::asio::detail::transfer_at_least_t	access:private
boost::asio::detail::transfer_at_least_t::operator ()	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t bytes_transferred)$/;"	f	class:boost::asio::detail::transfer_at_least_t	access:public	signature:(const Error& err, std::size_t bytes_transferred)
boost::asio::detail::transfer_at_least_t::result_type	/usr/include/boost/asio/completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:boost::asio::detail::transfer_at_least_t	access:public
boost::asio::detail::transfer_at_least_t::transfer_at_least_t	/usr/include/boost/asio/completion_condition.hpp	/^  explicit transfer_at_least_t(std::size_t minimum)$/;"	f	class:boost::asio::detail::transfer_at_least_t	access:public	signature:(std::size_t minimum)
boost::asio::detail::transfer_exactly_t	/usr/include/boost/asio/completion_condition.hpp	/^class transfer_exactly_t$/;"	c	namespace:boost::asio::detail
boost::asio::detail::transfer_exactly_t::operator ()	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t bytes_transferred)$/;"	f	class:boost::asio::detail::transfer_exactly_t	access:public	signature:(const Error& err, std::size_t bytes_transferred)
boost::asio::detail::transfer_exactly_t::result_type	/usr/include/boost/asio/completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:boost::asio::detail::transfer_exactly_t	access:public
boost::asio::detail::transfer_exactly_t::size_	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::detail::transfer_exactly_t	access:private
boost::asio::detail::transfer_exactly_t::transfer_exactly_t	/usr/include/boost/asio/completion_condition.hpp	/^  explicit transfer_exactly_t(std::size_t size)$/;"	f	class:boost::asio::detail::transfer_exactly_t	access:public	signature:(std::size_t size)
boost::asio::detail::tss_ptr	/usr/include/boost/asio/detail/tss_ptr.hpp	/^class tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:null_tss_ptr
boost::asio::detail::tss_ptr::operator =	/usr/include/boost/asio/detail/tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::tss_ptr	access:public	signature:(T* value)
boost::asio::detail::two_arg_handler_test	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^char (&two_arg_handler_test(Handler, ...))[2];$/;"	p	namespace:boost::asio::detail	signature:(Handler, ...)
boost::asio::detail::typeid_wrapper	/usr/include/boost/asio/detail/service_registry.hpp	/^class typeid_wrapper {};$/;"	c	namespace:boost::asio::detail
boost::asio::detail::u_long_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef u_long u_long_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::u_short_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef u_short u_short_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::wait_handler	/usr/include/boost/asio/detail/wait_handler.hpp	/^class wait_handler : public wait_op$/;"	c	namespace:boost::asio::detail	inherits:wait_op
boost::asio::detail::wait_handler::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/wait_handler.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(wait_handler);$/;"	p	class:boost::asio::detail::wait_handler	access:public	signature:(wait_handler)
boost::asio::detail::wait_handler::do_complete	/usr/include/boost/asio/detail/wait_handler.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::wait_handler	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
boost::asio::detail::wait_handler::handler_	/usr/include/boost/asio/detail/wait_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::wait_handler	access:private
boost::asio::detail::wait_handler::wait_handler	/usr/include/boost/asio/detail/wait_handler.hpp	/^  wait_handler(Handler& h)$/;"	f	class:boost::asio::detail::wait_handler	access:public	signature:(Handler& h)
boost::asio::detail::wait_op	/usr/include/boost/asio/detail/wait_op.hpp	/^class wait_op$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::wait_op::ec_	/usr/include/boost/asio/detail/wait_op.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::detail::wait_op	access:public
boost::asio::detail::wait_op::wait_op	/usr/include/boost/asio/detail/wait_op.hpp	/^  wait_op(func_type func)$/;"	f	class:boost::asio::detail::wait_op	access:protected	signature:(func_type func)
boost::asio::detail::win_event	/usr/include/boost/asio/detail/win_event.hpp	/^class win_event$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::win_event::clear	/usr/include/boost/asio/detail/win_event.hpp	/^  void clear(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
boost::asio::detail::win_event::event_	/usr/include/boost/asio/detail/win_event.hpp	/^  HANDLE event_;$/;"	m	class:boost::asio::detail::win_event	access:private
boost::asio::detail::win_event::signal	/usr/include/boost/asio/detail/win_event.hpp	/^  void signal(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
boost::asio::detail::win_event::signal_and_unlock	/usr/include/boost/asio/detail/win_event.hpp	/^  void signal_and_unlock(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
boost::asio::detail::win_event::wait	/usr/include/boost/asio/detail/win_event.hpp	/^  void wait(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
boost::asio::detail::win_event::win_event	/usr/include/boost/asio/detail/impl/win_event.ipp	/^win_event::win_event()$/;"	f	class:boost::asio::detail::win_event	signature:()
boost::asio::detail::win_event::win_event	/usr/include/boost/asio/detail/win_event.hpp	/^  BOOST_ASIO_DECL win_event();$/;"	p	class:boost::asio::detail::win_event	access:public	signature:()
boost::asio::detail::win_event::~win_event	/usr/include/boost/asio/detail/win_event.hpp	/^  ~win_event()$/;"	f	class:boost::asio::detail::win_event	access:public	signature:()
boost::asio::detail::win_fd_set_adapter	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^class win_fd_set_adapter : noncopyable$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::win_fd_set_adapter::capacity_	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  u_int capacity_;$/;"	m	class:boost::asio::detail::win_fd_set_adapter	access:private
boost::asio::detail::win_fd_set_adapter::default_fd_set_size	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  enum { default_fd_set_size = 1024 };$/;"	e	enum:boost::asio::detail::win_fd_set_adapter::__anon18
boost::asio::detail::win_fd_set_adapter::fd_set_	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  win_fd_set* fd_set_;$/;"	m	class:boost::asio::detail::win_fd_set_adapter	access:private
boost::asio::detail::win_fd_set_adapter::is_set	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  bool is_set(socket_type descriptor) const$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:(socket_type descriptor) const
boost::asio::detail::win_fd_set_adapter::max_descriptor	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  socket_type max_descriptor() const$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:() const
boost::asio::detail::win_fd_set_adapter::max_descriptor_	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  socket_type max_descriptor_;$/;"	m	class:boost::asio::detail::win_fd_set_adapter	access:private
boost::asio::detail::win_fd_set_adapter::operator fd_set*	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  operator fd_set*()$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:()
boost::asio::detail::win_fd_set_adapter::reset	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:()
boost::asio::detail::win_fd_set_adapter::set	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  bool set(socket_type descriptor)$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:(socket_type descriptor)
boost::asio::detail::win_fd_set_adapter::win_fd_set	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  struct win_fd_set$/;"	s	class:boost::asio::detail::win_fd_set_adapter	access:private
boost::asio::detail::win_fd_set_adapter::win_fd_set::fd_array	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^    SOCKET fd_array[1];$/;"	m	struct:boost::asio::detail::win_fd_set_adapter::win_fd_set	access:public
boost::asio::detail::win_fd_set_adapter::win_fd_set::fd_count	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^    u_int fd_count;$/;"	m	struct:boost::asio::detail::win_fd_set_adapter::win_fd_set	access:public
boost::asio::detail::win_fd_set_adapter::win_fd_set_adapter	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  win_fd_set_adapter()$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:()
boost::asio::detail::win_fd_set_adapter::~win_fd_set_adapter	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  ~win_fd_set_adapter()$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:()
boost::asio::detail::win_fenced_block	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^class win_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::win_fenced_block::full	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:boost::asio::detail::win_fenced_block::full_t
boost::asio::detail::win_fenced_block::full_t	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:boost::asio::detail::win_fenced_block	access:public
boost::asio::detail::win_fenced_block::half	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:boost::asio::detail::win_fenced_block::half_t
boost::asio::detail::win_fenced_block::half_t	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:boost::asio::detail::win_fenced_block	access:public
boost::asio::detail::win_fenced_block::win_fenced_block	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  explicit win_fenced_block(full_t)$/;"	f	class:boost::asio::detail::win_fenced_block	access:public	signature:(full_t)
boost::asio::detail::win_fenced_block::win_fenced_block	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  explicit win_fenced_block(half_t)$/;"	f	class:boost::asio::detail::win_fenced_block	access:public	signature:(half_t)
boost::asio::detail::win_fenced_block::~win_fenced_block	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  ~win_fenced_block()$/;"	f	class:boost::asio::detail::win_fenced_block	access:public	signature:()
boost::asio::detail::win_iocp_handle_read_op	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^class win_iocp_handle_read_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::win_iocp_handle_read_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_handle_read_op);$/;"	p	class:boost::asio::detail::win_iocp_handle_read_op	access:public	signature:(win_iocp_handle_read_op)
boost::asio::detail::win_iocp_handle_read_op::buffers_	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_handle_read_op	access:private
boost::asio::detail::win_iocp_handle_read_op::do_complete	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_handle_read_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t bytes_transferred)
boost::asio::detail::win_iocp_handle_read_op::handler_	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_handle_read_op	access:private
boost::asio::detail::win_iocp_handle_read_op::win_iocp_handle_read_op	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^  win_iocp_handle_read_op($/;"	f	class:boost::asio::detail::win_iocp_handle_read_op	access:public	signature:( const MutableBufferSequence& buffers, Handler& handler)
boost::asio::detail::win_iocp_handle_service	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^class win_iocp_handle_service$/;"	c	namespace:boost::asio::detail
boost::asio::detail::win_iocp_handle_service::assign	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^boost::system::error_code win_iocp_handle_service::assign($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::assign	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code assign(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::async_read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::cancel	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^boost::system::error_code win_iocp_handle_service::cancel($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::cancel	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code cancel(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::close	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^boost::system::error_code win_iocp_handle_service::close($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::close	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code close(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::close_for_destruction	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::close_for_destruction(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_handle_service::close_for_destruction	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void close_for_destruction(implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_handle_service::construct	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::construct($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl)
boost::asio::detail::win_iocp_handle_service::construct	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void construct(implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_handle_service::destroy	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::destroy($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl)
boost::asio::detail::win_iocp_handle_service::destroy	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void destroy(implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_handle_service::do_read	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^size_t win_iocp_handle_service::do_read($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, boost::uint64_t offset, const boost::asio::mutable_buffer& buffer, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::do_read	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL size_t do_read(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const boost::asio::mutable_buffer& buffer, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::do_write	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^size_t win_iocp_handle_service::do_write($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, boost::uint64_t offset, const boost::asio::const_buffer& buffer, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::do_write	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL size_t do_write(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const boost::asio::const_buffer& buffer, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::impl_list_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  implementation_type* impl_list_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service	access:private
boost::asio::detail::win_iocp_handle_service::implementation_type	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::win_iocp_handle_service	access:public
boost::asio::detail::win_iocp_handle_service::implementation_type::handle_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    native_handle_type handle_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
boost::asio::detail::win_iocp_handle_service::implementation_type::implementation_type	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:public	signature:()
boost::asio::detail::win_iocp_handle_service::implementation_type::next_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    implementation_type* next_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
boost::asio::detail::win_iocp_handle_service::implementation_type::prev_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    implementation_type* prev_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
boost::asio::detail::win_iocp_handle_service::implementation_type::safe_cancellation_thread_id_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    DWORD safe_cancellation_thread_id_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
boost::asio::detail::win_iocp_handle_service::iocp_service_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  win_iocp_io_service& iocp_service_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service	access:private
boost::asio::detail::win_iocp_handle_service::is_open	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::win_iocp_handle_service::move_assign	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::move_assign($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, win_iocp_handle_service& other_service, win_iocp_handle_service::implementation_type& other_impl)
boost::asio::detail::win_iocp_handle_service::move_assign	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void move_assign(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, win_iocp_handle_service& other_service, implementation_type& other_impl)
boost::asio::detail::win_iocp_handle_service::move_construct	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::move_construct($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, win_iocp_handle_service::implementation_type& other_impl)
boost::asio::detail::win_iocp_handle_service::move_construct	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void move_construct(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::detail::win_iocp_handle_service::mutex_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  mutex mutex_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service	access:private
boost::asio::detail::win_iocp_handle_service::native_handle	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  native_handle_type native_handle(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::win_iocp_handle_service::native_handle_type	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  typedef HANDLE native_handle_type;$/;"	t	class:boost::asio::detail::win_iocp_handle_service	access:public
boost::asio::detail::win_iocp_handle_service::overlapped_wrapper	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^class win_iocp_handle_service::overlapped_wrapper$/;"	c	class:boost::asio::detail::win_iocp_handle_service	file:	inherits:OVERLAPPED
boost::asio::detail::win_iocp_handle_service::overlapped_wrapper::overlapped_wrapper	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^  explicit overlapped_wrapper(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_handle_service::overlapped_wrapper	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::overlapped_wrapper::~overlapped_wrapper	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^  ~overlapped_wrapper()$/;"	f	class:boost::asio::detail::win_iocp_handle_service::overlapped_wrapper	access:public	signature:()
boost::asio::detail::win_iocp_handle_service::read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::shutdown_service	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:()
boost::asio::detail::win_iocp_handle_service::shutdown_service	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:()
boost::asio::detail::win_iocp_handle_service::start_read_op	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::start_read_op($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, boost::uint64_t offset, const boost::asio::mutable_buffer& buffer, operation* op)
boost::asio::detail::win_iocp_handle_service::start_read_op	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void start_read_op(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const boost::asio::mutable_buffer& buffer, operation* op)
boost::asio::detail::win_iocp_handle_service::start_write_op	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::start_write_op($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, boost::uint64_t offset, const boost::asio::const_buffer& buffer, operation* op)
boost::asio::detail::win_iocp_handle_service::start_write_op	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void start_write_op(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const boost::asio::const_buffer& buffer, operation* op)
boost::asio::detail::win_iocp_handle_service::update_cancellation_thread_id	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::update_cancellation_thread_id($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl)
boost::asio::detail::win_iocp_handle_service::update_cancellation_thread_id	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void update_cancellation_thread_id(implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_handle_service::win_iocp_handle_service	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^win_iocp_handle_service::win_iocp_handle_service($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( boost::asio::io_service& io_service)
boost::asio::detail::win_iocp_handle_service::win_iocp_handle_service	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL win_iocp_handle_service(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::win_iocp_handle_service::write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_write_op	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^class win_iocp_handle_write_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::win_iocp_handle_write_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_handle_write_op);$/;"	p	class:boost::asio::detail::win_iocp_handle_write_op	access:public	signature:(win_iocp_handle_write_op)
boost::asio::detail::win_iocp_handle_write_op::buffers_	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_handle_write_op	access:private
boost::asio::detail::win_iocp_handle_write_op::do_complete	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_handle_write_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::win_iocp_handle_write_op::handler_	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_handle_write_op	access:private
boost::asio::detail::win_iocp_handle_write_op::win_iocp_handle_write_op	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^  win_iocp_handle_write_op(const ConstBufferSequence& buffers, Handler& handler)$/;"	f	class:boost::asio::detail::win_iocp_handle_write_op	access:public	signature:(const ConstBufferSequence& buffers, Handler& handler)
boost::asio::detail::win_iocp_io_service	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^class win_iocp_io_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::win_iocp_io_service::abandon_operations	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::abandon_operations($/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:( op_queue<win_iocp_operation>& ops)
boost::asio::detail::win_iocp_io_service::abandon_operations	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void abandon_operations(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(op_queue<operation>& ops)
boost::asio::detail::win_iocp_io_service::add_timer_queue	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^void win_iocp_io_service::add_timer_queue($/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:( timer_queue<Time_Traits>& queue)
boost::asio::detail::win_iocp_io_service::add_timer_queue	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::win_iocp_io_service::auto_handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  struct auto_handle$/;"	s	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::auto_handle::auto_handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    auto_handle() : handle(0) {}$/;"	f	struct:boost::asio::detail::win_iocp_io_service::auto_handle	access:public	signature:()
boost::asio::detail::win_iocp_io_service::auto_handle::handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    HANDLE handle;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::auto_handle	access:public
boost::asio::detail::win_iocp_io_service::auto_handle::~auto_handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    ~auto_handle() { if (handle) ::CloseHandle(handle); }$/;"	f	struct:boost::asio::detail::win_iocp_io_service::auto_handle	access:public	signature:()
boost::asio::detail::win_iocp_io_service::can_dispatch	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  bool can_dispatch()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_io_service::cancel_timer	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^std::size_t win_iocp_io_service::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled)
boost::asio::detail::win_iocp_io_service::cancel_timer	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
boost::asio::detail::win_iocp_io_service::completed_ops_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  op_queue<win_iocp_operation> completed_ops_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::dispatch	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^void win_iocp_io_service::dispatch(Handler handler)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(Handler handler)
boost::asio::detail::win_iocp_io_service::dispatch	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void dispatch(Handler handler);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(Handler handler)
boost::asio::detail::win_iocp_io_service::dispatch_mutex_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  mutex dispatch_mutex_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::dispatch_required_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long dispatch_required_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::do_add_timer_queue	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::do_add_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(timer_queue_base& queue)
boost::asio::detail::win_iocp_io_service::do_add_timer_queue	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void do_add_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:private	signature:(timer_queue_base& queue)
boost::asio::detail::win_iocp_io_service::do_one	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^size_t win_iocp_io_service::do_one(bool block, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(bool block, boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::do_one	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL size_t do_one(bool block, boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:private	signature:(bool block, boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::do_remove_timer_queue	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::do_remove_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(timer_queue_base& queue)
boost::asio::detail::win_iocp_io_service::do_remove_timer_queue	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void do_remove_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:private	signature:(timer_queue_base& queue)
boost::asio::detail::win_iocp_io_service::dword_ptr_t	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  typedef DWORD dword_ptr_t;$/;"	t	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::dword_ptr_t	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  typedef DWORD_PTR dword_ptr_t;$/;"	t	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::gqcs_timeout	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    gqcs_timeout = 500,$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon19
boost::asio::detail::win_iocp_io_service::init_task	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_io_service::iocp_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  auto_handle iocp_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::max_timeout_msec	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    max_timeout_msec = 5 * 60 * 1000,$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon19
boost::asio::detail::win_iocp_io_service::max_timeout_usec	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    max_timeout_usec = max_timeout_msec * 1000,$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon19
boost::asio::detail::win_iocp_io_service::on_completion	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::on_completion(win_iocp_operation* op,$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(win_iocp_operation* op, DWORD last_error, DWORD bytes_transferred)
boost::asio::detail::win_iocp_io_service::on_completion	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::on_completion(win_iocp_operation* op,$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(win_iocp_operation* op, const boost::system::error_code& ec, DWORD bytes_transferred)
boost::asio::detail::win_iocp_io_service::on_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void on_completion(win_iocp_operation* op,$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op, DWORD last_error = 0, DWORD bytes_transferred = 0)
boost::asio::detail::win_iocp_io_service::on_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void on_completion(win_iocp_operation* op,$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op, const boost::system::error_code& ec, DWORD bytes_transferred = 0)
boost::asio::detail::win_iocp_io_service::on_pending	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::on_pending(win_iocp_operation* op)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(win_iocp_operation* op)
boost::asio::detail::win_iocp_io_service::on_pending	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void on_pending(win_iocp_operation* op);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op)
boost::asio::detail::win_iocp_io_service::outstanding_work_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long outstanding_work_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::overlapped_contains_result	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    overlapped_contains_result = 2$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon19
boost::asio::detail::win_iocp_io_service::poll	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^size_t win_iocp_io_service::poll(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::poll	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL size_t poll(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::poll_one	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^size_t win_iocp_io_service::poll_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::poll_one	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL size_t poll_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::post	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^void win_iocp_io_service::post(Handler handler)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(Handler handler)
boost::asio::detail::win_iocp_io_service::post	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void post(Handler handler);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(Handler handler)
boost::asio::detail::win_iocp_io_service::post_deferred_completion	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::post_deferred_completion(win_iocp_operation* op)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(win_iocp_operation* op)
boost::asio::detail::win_iocp_io_service::post_deferred_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void post_deferred_completion(win_iocp_operation* op);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op)
boost::asio::detail::win_iocp_io_service::post_deferred_completions	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::post_deferred_completions($/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:( op_queue<win_iocp_operation>& ops)
boost::asio::detail::win_iocp_io_service::post_deferred_completions	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void post_deferred_completions($/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:( op_queue<win_iocp_operation>& ops)
boost::asio::detail::win_iocp_io_service::post_immediate_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void post_immediate_completion(win_iocp_operation* op)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op)
boost::asio::detail::win_iocp_io_service::post_private_deferred_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void post_private_deferred_completion(win_iocp_operation* op)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op)
boost::asio::detail::win_iocp_io_service::post_private_immediate_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void post_private_immediate_completion(win_iocp_operation* op)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op)
boost::asio::detail::win_iocp_io_service::register_handle	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^boost::system::error_code win_iocp_io_service::register_handle($/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:( HANDLE handle, boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::register_handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code register_handle($/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:( HANDLE handle, boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::remove_timer_queue	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^void win_iocp_io_service::remove_timer_queue($/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:( timer_queue<Time_Traits>& queue)
boost::asio::detail::win_iocp_io_service::remove_timer_queue	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::win_iocp_io_service::reset	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_io_service::run	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^size_t win_iocp_io_service::run(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::run	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL size_t run(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::run_one	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^size_t win_iocp_io_service::run_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::run_one	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL size_t run_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::schedule_timer	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^void win_iocp_io_service::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
boost::asio::detail::win_iocp_io_service::schedule_timer	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
boost::asio::detail::win_iocp_io_service::shutdown_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long shutdown_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::shutdown_service	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:()
boost::asio::detail::win_iocp_io_service::shutdown_service	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_io_service::stop	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::stop()$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:()
boost::asio::detail::win_iocp_io_service::stop	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void stop();$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_io_service::stop_event_posted_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long stop_event_posted_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::stopped	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  bool stopped() const$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:() const
boost::asio::detail::win_iocp_io_service::stopped_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  mutable long stopped_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::thread_call_stack	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^      win_iocp_thread_info> thread_call_stack;$/;"	t	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::timer_queues_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::timer_thread_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  scoped_ptr<thread> timer_thread_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::timer_thread_function	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^struct win_iocp_io_service::timer_thread_function$/;"	s	class:boost::asio::detail::win_iocp_io_service	file:
boost::asio::detail::win_iocp_io_service::timer_thread_function::io_service_	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^  win_iocp_io_service* io_service_;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::timer_thread_function	file:	access:public
boost::asio::detail::win_iocp_io_service::timer_thread_function::operator ()	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^  void operator()()$/;"	f	struct:boost::asio::detail::win_iocp_io_service::timer_thread_function	access:public	signature:()
boost::asio::detail::win_iocp_io_service::ulong_ptr_t	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  typedef ULONG ulong_ptr_t;$/;"	t	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::ulong_ptr_t	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  typedef ULONG_PTR ulong_ptr_t;$/;"	t	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::update_timeout	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::update_timeout()$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:()
boost::asio::detail::win_iocp_io_service::update_timeout	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void update_timeout();$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:private	signature:()
boost::asio::detail::win_iocp_io_service::waitable_timer_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  auto_handle waitable_timer_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::wake_for_dispatch	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    wake_for_dispatch = 1,$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon19
boost::asio::detail::win_iocp_io_service::win_iocp_io_service	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^win_iocp_io_service::win_iocp_io_service($/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:( boost::asio::io_service& io_service, size_t concurrency_hint)
boost::asio::detail::win_iocp_io_service::win_iocp_io_service	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL win_iocp_io_service(boost::asio::io_service& io_service,$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::asio::io_service& io_service, size_t concurrency_hint = 0)
boost::asio::detail::win_iocp_io_service::work_finished	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void work_finished()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_io_service::work_finished_on_block_exit	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^struct win_iocp_io_service::work_finished_on_block_exit$/;"	s	class:boost::asio::detail::win_iocp_io_service	file:
boost::asio::detail::win_iocp_io_service::work_finished_on_block_exit::io_service_	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^  win_iocp_io_service* io_service_;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::work_finished_on_block_exit	file:	access:public
boost::asio::detail::win_iocp_io_service::work_finished_on_block_exit::~work_finished_on_block_exit	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^  ~work_finished_on_block_exit()$/;"	f	struct:boost::asio::detail::win_iocp_io_service::work_finished_on_block_exit	access:public	signature:()
boost::asio::detail::win_iocp_io_service::work_started	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void work_started()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_null_buffers_op	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^class win_iocp_null_buffers_op : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
boost::asio::detail::win_iocp_null_buffers_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_null_buffers_op);$/;"	p	class:boost::asio::detail::win_iocp_null_buffers_op	access:public	signature:(win_iocp_null_buffers_op)
boost::asio::detail::win_iocp_null_buffers_op::cancel_token_	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::win_iocp_null_buffers_op	access:private
boost::asio::detail::win_iocp_null_buffers_op::do_complete	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_null_buffers_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t bytes_transferred)
boost::asio::detail::win_iocp_null_buffers_op::do_perform	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^  static bool do_perform(reactor_op*)$/;"	f	class:boost::asio::detail::win_iocp_null_buffers_op	access:public	signature:(reactor_op*)
boost::asio::detail::win_iocp_null_buffers_op::handler_	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_null_buffers_op	access:private
boost::asio::detail::win_iocp_null_buffers_op::win_iocp_null_buffers_op	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^  win_iocp_null_buffers_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:boost::asio::detail::win_iocp_null_buffers_op	access:public	signature:(socket_ops::weak_cancel_token_type cancel_token, Handler& handler)
boost::asio::detail::win_iocp_operation	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^class win_iocp_operation$/;"	c	namespace:boost::asio::detail	inherits:OVERLAPPEDBOOST_ASIO_ALSO_INHERIT_TRACKED_HANDLER
boost::asio::detail::win_iocp_operation::complete	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  void complete(win_iocp_io_service& owner,$/;"	f	class:boost::asio::detail::win_iocp_operation	access:public	signature:(win_iocp_io_service& owner, const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::win_iocp_operation::destroy	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  void destroy()$/;"	f	class:boost::asio::detail::win_iocp_operation	access:public	signature:()
boost::asio::detail::win_iocp_operation::func_	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  func_type func_;$/;"	m	class:boost::asio::detail::win_iocp_operation	access:private
boost::asio::detail::win_iocp_operation::func_type	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  typedef void (*func_type)($/;"	t	class:boost::asio::detail::win_iocp_operation	access:protected
boost::asio::detail::win_iocp_operation::next_	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  win_iocp_operation* next_;$/;"	m	class:boost::asio::detail::win_iocp_operation	access:private
boost::asio::detail::win_iocp_operation::ready_	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  long ready_;$/;"	m	class:boost::asio::detail::win_iocp_operation	access:private
boost::asio::detail::win_iocp_operation::reset	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::win_iocp_operation	access:protected	signature:()
boost::asio::detail::win_iocp_operation::win_iocp_operation	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  win_iocp_operation(func_type func)$/;"	f	class:boost::asio::detail::win_iocp_operation	access:protected	signature:(func_type func)
boost::asio::detail::win_iocp_operation::~win_iocp_operation	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  ~win_iocp_operation()$/;"	f	class:boost::asio::detail::win_iocp_operation	access:protected	signature:()
boost::asio::detail::win_iocp_overlapped_op	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^class win_iocp_overlapped_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::win_iocp_overlapped_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_overlapped_op);$/;"	p	class:boost::asio::detail::win_iocp_overlapped_op	access:public	signature:(win_iocp_overlapped_op)
boost::asio::detail::win_iocp_overlapped_op::do_complete	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_overlapped_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::win_iocp_overlapped_op::handler_	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_overlapped_op	access:private
boost::asio::detail::win_iocp_overlapped_op::win_iocp_overlapped_op	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^  win_iocp_overlapped_op(Handler& handler)$/;"	f	class:boost::asio::detail::win_iocp_overlapped_op	access:public	signature:(Handler& handler)
boost::asio::detail::win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^class win_iocp_overlapped_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::win_iocp_overlapped_ptr::complete	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::win_iocp_overlapped_ptr::get	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  OVERLAPPED* get()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
boost::asio::detail::win_iocp_overlapped_ptr::get	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  const OVERLAPPED* get() const$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:() const
boost::asio::detail::win_iocp_overlapped_ptr::iocp_service_	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  win_iocp_io_service* iocp_service_;$/;"	m	class:boost::asio::detail::win_iocp_overlapped_ptr	access:private
boost::asio::detail::win_iocp_overlapped_ptr::ptr_	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  win_iocp_operation* ptr_;$/;"	m	class:boost::asio::detail::win_iocp_overlapped_ptr	access:private
boost::asio::detail::win_iocp_overlapped_ptr::release	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  OVERLAPPED* release()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
boost::asio::detail::win_iocp_overlapped_ptr::reset	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
boost::asio::detail::win_iocp_overlapped_ptr::reset	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  void reset(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
boost::asio::detail::win_iocp_overlapped_ptr::win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  explicit win_iocp_overlapped_ptr($/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:( boost::asio::io_service& io_service, BOOST_ASIO_MOVE_ARG(Handler) handler)
boost::asio::detail::win_iocp_overlapped_ptr::win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  win_iocp_overlapped_ptr()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
boost::asio::detail::win_iocp_overlapped_ptr::~win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  ~win_iocp_overlapped_ptr()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
boost::asio::detail::win_iocp_serial_port_service	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^class win_iocp_serial_port_service$/;"	c	namespace:boost::asio::detail
boost::asio::detail::win_iocp_serial_port_service::assign	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::async_read_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_serial_port_service::async_write_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_serial_port_service::boost::system::load_function_type	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  typedef boost::system::error_code (*load_function_type)($/;"	t	class:boost::asio::detail::win_iocp_serial_port_service::boost::system	access:private
boost::asio::detail::win_iocp_serial_port_service::boost::system::store_function_type	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  typedef boost::system::error_code (*store_function_type)($/;"	t	class:boost::asio::detail::win_iocp_serial_port_service::boost::system	access:private
boost::asio::detail::win_iocp_serial_port_service::cancel	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::close	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::construct	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_serial_port_service::destroy	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_serial_port_service::do_get_option	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^boost::system::error_code win_iocp_serial_port_service::do_get_option($/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	signature:( const win_iocp_serial_port_service::implementation_type& impl, win_iocp_serial_port_service::load_function_type load, void* option, boost::system::error_code& ec) const
boost::asio::detail::win_iocp_serial_port_service::do_get_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_get_option($/;"	p	class:boost::asio::detail::win_iocp_serial_port_service	access:private	signature:( const implementation_type& impl, load_function_type load, void* option, boost::system::error_code& ec) const
boost::asio::detail::win_iocp_serial_port_service::do_set_option	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^boost::system::error_code win_iocp_serial_port_service::do_set_option($/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	signature:( win_iocp_serial_port_service::implementation_type& impl, win_iocp_serial_port_service::store_function_type store, const void* option, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::do_set_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_set_option($/;"	p	class:boost::asio::detail::win_iocp_serial_port_service	access:private	signature:( implementation_type& impl, store_function_type store, const void* option, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::get_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(const implementation_type& impl, GettableSerialPortOption& option, boost::system::error_code& ec) const
boost::asio::detail::win_iocp_serial_port_service::handle_service_	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  win_iocp_handle_service handle_service_;$/;"	m	class:boost::asio::detail::win_iocp_serial_port_service	access:private
boost::asio::detail::win_iocp_serial_port_service::implementation_type	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  typedef win_iocp_handle_service::implementation_type implementation_type;$/;"	t	class:boost::asio::detail::win_iocp_serial_port_service	access:public
boost::asio::detail::win_iocp_serial_port_service::is_open	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::win_iocp_serial_port_service::load_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  static boost::system::error_code load_option(void* option,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:private	signature:(void* option, const ::DCB& storage, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::move_assign	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, win_iocp_serial_port_service& other_service, implementation_type& other_impl)
boost::asio::detail::win_iocp_serial_port_service::move_construct	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::detail::win_iocp_serial_port_service::native_handle	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_serial_port_service::native_handle_type	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  typedef win_iocp_handle_service::native_handle_type native_handle_type;$/;"	t	class:boost::asio::detail::win_iocp_serial_port_service	access:public
boost::asio::detail::win_iocp_serial_port_service::open	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^boost::system::error_code win_iocp_serial_port_service::open($/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	signature:( win_iocp_serial_port_service::implementation_type& impl, const std::string& device, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::open	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code open(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const std::string& device, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::read_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::send_break	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code send_break(implementation_type&,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type&, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::set_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const SettableSerialPortOption& option, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::shutdown_service	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^void win_iocp_serial_port_service::shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	signature:()
boost::asio::detail::win_iocp_serial_port_service::shutdown_service	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:()
boost::asio::detail::win_iocp_serial_port_service::store_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  static boost::system::error_code store_option(const void* option,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:private	signature:(const void* option, ::DCB& storage, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::win_iocp_serial_port_service	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^win_iocp_serial_port_service::win_iocp_serial_port_service($/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	signature:( boost::asio::io_service& io_service)
boost::asio::detail::win_iocp_serial_port_service::win_iocp_serial_port_service	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  BOOST_ASIO_DECL win_iocp_serial_port_service($/;"	p	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:( boost::asio::io_service& io_service)
boost::asio::detail::win_iocp_serial_port_service::write_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_accept_op	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^class win_iocp_socket_accept_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::win_iocp_socket_accept_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_socket_accept_op);$/;"	p	class:boost::asio::detail::win_iocp_socket_accept_op	access:public	signature:(win_iocp_socket_accept_op)
boost::asio::detail::win_iocp_socket_accept_op::address_length	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  DWORD address_length()$/;"	f	class:boost::asio::detail::win_iocp_socket_accept_op	access:public	signature:()
boost::asio::detail::win_iocp_socket_accept_op::do_complete	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_socket_accept_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t )
boost::asio::detail::win_iocp_socket_accept_op::enable_connection_aborted_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  bool enable_connection_aborted_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
boost::asio::detail::win_iocp_socket_accept_op::handler_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
boost::asio::detail::win_iocp_socket_accept_op::new_socket	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  socket_holder& new_socket()$/;"	f	class:boost::asio::detail::win_iocp_socket_accept_op	access:public	signature:()
boost::asio::detail::win_iocp_socket_accept_op::new_socket_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  socket_holder new_socket_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
boost::asio::detail::win_iocp_socket_accept_op::output_buffer	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  void* output_buffer()$/;"	f	class:boost::asio::detail::win_iocp_socket_accept_op	access:public	signature:()
boost::asio::detail::win_iocp_socket_accept_op::output_buffer_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  unsigned char output_buffer_[(sizeof(sockaddr_storage_type) + 16) * 2];$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
boost::asio::detail::win_iocp_socket_accept_op::peer_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  Socket& peer_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
boost::asio::detail::win_iocp_socket_accept_op::peer_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  typename Protocol::endpoint* peer_endpoint_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
boost::asio::detail::win_iocp_socket_accept_op::protocol_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  Protocol protocol_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
boost::asio::detail::win_iocp_socket_accept_op::socket_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
boost::asio::detail::win_iocp_socket_accept_op::socket_service_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  win_iocp_socket_service_base& socket_service_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
boost::asio::detail::win_iocp_socket_accept_op::win_iocp_socket_accept_op	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  win_iocp_socket_accept_op(win_iocp_socket_service_base& socket_service,$/;"	f	class:boost::asio::detail::win_iocp_socket_accept_op	access:public	signature:(win_iocp_socket_service_base& socket_service, socket_type socket, Socket& peer, const Protocol& protocol, typename Protocol::endpoint* peer_endpoint, bool enable_connection_aborted, Handler& handler)
boost::asio::detail::win_iocp_socket_recv_op	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^class win_iocp_socket_recv_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::win_iocp_socket_recv_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_socket_recv_op);$/;"	p	class:boost::asio::detail::win_iocp_socket_recv_op	access:public	signature:(win_iocp_socket_recv_op)
boost::asio::detail::win_iocp_socket_recv_op::buffers_	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recv_op	access:private
boost::asio::detail::win_iocp_socket_recv_op::cancel_token_	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recv_op	access:private
boost::asio::detail::win_iocp_socket_recv_op::do_complete	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_socket_recv_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t bytes_transferred)
boost::asio::detail::win_iocp_socket_recv_op::handler_	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recv_op	access:private
boost::asio::detail::win_iocp_socket_recv_op::state_	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  socket_ops::state_type state_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recv_op	access:private
boost::asio::detail::win_iocp_socket_recv_op::win_iocp_socket_recv_op	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  win_iocp_socket_recv_op(socket_ops::state_type state,$/;"	f	class:boost::asio::detail::win_iocp_socket_recv_op	access:public	signature:(socket_ops::state_type state, socket_ops::weak_cancel_token_type cancel_token, const MutableBufferSequence& buffers, Handler& handler)
boost::asio::detail::win_iocp_socket_recvfrom_op	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^class win_iocp_socket_recvfrom_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::win_iocp_socket_recvfrom_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_socket_recvfrom_op);$/;"	p	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:public	signature:(win_iocp_socket_recvfrom_op)
boost::asio::detail::win_iocp_socket_recvfrom_op::buffers_	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:private
boost::asio::detail::win_iocp_socket_recvfrom_op::cancel_token_	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:private
boost::asio::detail::win_iocp_socket_recvfrom_op::do_complete	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t bytes_transferred)
boost::asio::detail::win_iocp_socket_recvfrom_op::endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  Endpoint& endpoint_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:private
boost::asio::detail::win_iocp_socket_recvfrom_op::endpoint_size	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  int& endpoint_size()$/;"	f	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:public	signature:()
boost::asio::detail::win_iocp_socket_recvfrom_op::endpoint_size_	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  int endpoint_size_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:private
boost::asio::detail::win_iocp_socket_recvfrom_op::handler_	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:private
boost::asio::detail::win_iocp_socket_recvfrom_op::win_iocp_socket_recvfrom_op	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  win_iocp_socket_recvfrom_op(Endpoint& endpoint,$/;"	f	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:public	signature:(Endpoint& endpoint, socket_ops::weak_cancel_token_type cancel_token, const MutableBufferSequence& buffers, Handler& handler)
boost::asio::detail::win_iocp_socket_recvmsg_op	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^class win_iocp_socket_recvmsg_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::win_iocp_socket_recvmsg_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_socket_recvmsg_op);$/;"	p	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:public	signature:(win_iocp_socket_recvmsg_op)
boost::asio::detail::win_iocp_socket_recvmsg_op::buffers_	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:private
boost::asio::detail::win_iocp_socket_recvmsg_op::cancel_token_	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:private
boost::asio::detail::win_iocp_socket_recvmsg_op::do_complete	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t bytes_transferred)
boost::asio::detail::win_iocp_socket_recvmsg_op::handler_	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:private
boost::asio::detail::win_iocp_socket_recvmsg_op::out_flags_	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  socket_base::message_flags& out_flags_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:private
boost::asio::detail::win_iocp_socket_recvmsg_op::win_iocp_socket_recvmsg_op	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  win_iocp_socket_recvmsg_op($/;"	f	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:public	signature:( socket_ops::weak_cancel_token_type cancel_token, const MutableBufferSequence& buffers, socket_base::message_flags& out_flags, Handler& handler)
boost::asio::detail::win_iocp_socket_send_op	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^class win_iocp_socket_send_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
boost::asio::detail::win_iocp_socket_send_op::BOOST_ASIO_DEFINE_HANDLER_PTR	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^  BOOST_ASIO_DEFINE_HANDLER_PTR(win_iocp_socket_send_op);$/;"	p	class:boost::asio::detail::win_iocp_socket_send_op	access:public	signature:(win_iocp_socket_send_op)
boost::asio::detail::win_iocp_socket_send_op::buffers_	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_socket_send_op	access:private
boost::asio::detail::win_iocp_socket_send_op::cancel_token_	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::win_iocp_socket_send_op	access:private
boost::asio::detail::win_iocp_socket_send_op::do_complete	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_socket_send_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t bytes_transferred)
boost::asio::detail::win_iocp_socket_send_op::handler_	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_socket_send_op	access:private
boost::asio::detail::win_iocp_socket_send_op::win_iocp_socket_send_op	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^  win_iocp_socket_send_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:boost::asio::detail::win_iocp_socket_send_op	access:public	signature:(socket_ops::weak_cancel_token_type cancel_token, const ConstBufferSequence& buffers, Handler& handler)
boost::asio::detail::win_iocp_socket_service	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^class win_iocp_socket_service : public win_iocp_socket_service_base$/;"	c	namespace:boost::asio::detail	inherits:win_iocp_socket_service_base
boost::asio::detail::win_iocp_socket_service::accept	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code accept(implementation_type& impl, Socket& peer,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, Socket& peer, endpoint_type* peer_endpoint, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service::assign	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service::async_accept	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void async_accept(implementation_type& impl, Socket& peer,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, Socket& peer, endpoint_type* peer_endpoint, Handler handler)
boost::asio::detail::win_iocp_socket_service::async_connect	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, Handler handler)
boost::asio::detail::win_iocp_socket_service::async_receive_from	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endp, socket_base::message_flags flags, Handler handler)
boost::asio::detail::win_iocp_socket_service::async_receive_from	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, endpoint_type& sender_endpoint, socket_base::message_flags flags, Handler handler)
boost::asio::detail::win_iocp_socket_service::async_send_to	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void async_send_to(implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, const endpoint_type&, socket_base::message_flags, Handler handler)
boost::asio::detail::win_iocp_socket_service::async_send_to	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, Handler handler)
boost::asio::detail::win_iocp_socket_service::bind	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service::connect	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service::endpoint_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
boost::asio::detail::win_iocp_socket_service::get_option	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(const implementation_type& impl, Option& option, boost::system::error_code& ec) const
boost::asio::detail::win_iocp_socket_service::implementation_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  struct implementation_type :$/;"	s	class:boost::asio::detail::win_iocp_socket_service	inherits:win_iocp_socket_service_base::base_implementation_type	access:public
boost::asio::detail::win_iocp_socket_service::implementation_type::have_remote_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    bool have_remote_endpoint_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service::implementation_type	access:public
boost::asio::detail::win_iocp_socket_service::implementation_type::implementation_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    implementation_type()$/;"	f	struct:boost::asio::detail::win_iocp_socket_service::implementation_type	access:public	signature:()
boost::asio::detail::win_iocp_socket_service::implementation_type::protocol_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    protocol_type protocol_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service::implementation_type	access:public
boost::asio::detail::win_iocp_socket_service::implementation_type::remote_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service::implementation_type	access:public
boost::asio::detail::win_iocp_socket_service::local_endpoint	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::detail::win_iocp_socket_service::move_assign	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, win_iocp_socket_service_base& other_service, implementation_type& other_impl)
boost::asio::detail::win_iocp_socket_service::move_construct	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::detail::win_iocp_socket_service::native_handle	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_socket_service::native_handle_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  class native_handle_type$/;"	c	class:boost::asio::detail::win_iocp_socket_service	access:public
boost::asio::detail::win_iocp_socket_service::native_handle_type::have_remote_endpoint	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    bool have_remote_endpoint() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:public	signature:() const
boost::asio::detail::win_iocp_socket_service::native_handle_type::have_remote_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    bool have_remote_endpoint_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:private
boost::asio::detail::win_iocp_socket_service::native_handle_type::native_handle_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    native_handle_type(socket_type s)$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:public	signature:(socket_type s)
boost::asio::detail::win_iocp_socket_service::native_handle_type::native_handle_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    native_handle_type(socket_type s, const endpoint_type& ep)$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:public	signature:(socket_type s, const endpoint_type& ep)
boost::asio::detail::win_iocp_socket_service::native_handle_type::operator =	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    void operator=(socket_type s)$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:public	signature:(socket_type s)
boost::asio::detail::win_iocp_socket_service::native_handle_type::operator socket_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    operator socket_type() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:public	signature:() const
boost::asio::detail::win_iocp_socket_service::native_handle_type::remote_endpoint	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:public	signature:() const
boost::asio::detail::win_iocp_socket_service::native_handle_type::remote_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:private
boost::asio::detail::win_iocp_socket_service::native_handle_type::socket_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:private
boost::asio::detail::win_iocp_socket_service::open	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service::protocol_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
boost::asio::detail::win_iocp_socket_service::receive_from	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service::receive_from	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, endpoint_type& sender_endpoint, socket_base::message_flags, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service::remote_endpoint	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::detail::win_iocp_socket_service::send_to	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service::send_to	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, const endpoint_type&, socket_base::message_flags, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service::set_option	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const Option& option, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service::win_iocp_socket_service	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  win_iocp_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::win_iocp_socket_service_base	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^class win_iocp_socket_service_base$/;"	c	namespace:boost::asio::detail
boost::asio::detail::win_iocp_socket_service_base::async_receive	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  void async_receive(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags flags, Handler handler)
boost::asio::detail::win_iocp_socket_service_base::async_receive	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  void async_receive(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, Handler handler)
boost::asio::detail::win_iocp_socket_service_base::async_receive_with_flags	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  void async_receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, Handler handler)
boost::asio::detail::win_iocp_socket_service_base::async_receive_with_flags	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  void async_receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, Handler handler)
boost::asio::detail::win_iocp_socket_service_base::async_send	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  void async_send(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, Handler handler)
boost::asio::detail::win_iocp_socket_service_base::async_send	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  void async_send(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, Handler handler)
boost::asio::detail::win_iocp_socket_service_base::at_mark	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  bool at_mark(const base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(const base_implementation_type& impl, boost::system::error_code& ec) const
boost::asio::detail::win_iocp_socket_service_base::available	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  std::size_t available(const base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(const base_implementation_type& impl, boost::system::error_code& ec) const
boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  struct base_implementation_type$/;"	s	class:boost::asio::detail::win_iocp_socket_service_base	access:public
boost::asio::detail::win_iocp_socket_service_base::base_implementation_type::cancel_token_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    socket_ops::shared_cancel_token_type cancel_token_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
boost::asio::detail::win_iocp_socket_service_base::base_implementation_type::next_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    base_implementation_type* next_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
boost::asio::detail::win_iocp_socket_service_base::base_implementation_type::prev_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    base_implementation_type* prev_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
boost::asio::detail::win_iocp_socket_service_base::base_implementation_type::reactor_data_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    reactor::per_descriptor_data reactor_data_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
boost::asio::detail::win_iocp_socket_service_base::base_implementation_type::safe_cancellation_thread_id_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    DWORD safe_cancellation_thread_id_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
boost::asio::detail::win_iocp_socket_service_base::base_implementation_type::socket_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    socket_type socket_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
boost::asio::detail::win_iocp_socket_service_base::base_implementation_type::state_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    socket_ops::state_type state_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
boost::asio::detail::win_iocp_socket_service_base::base_move_assign	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::base_move_assign($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, win_iocp_socket_service_base& other_service, win_iocp_socket_service_base::base_implementation_type& other_impl)
boost::asio::detail::win_iocp_socket_service_base::base_move_assign	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void base_move_assign(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, win_iocp_socket_service_base& other_service, base_implementation_type& other_impl)
boost::asio::detail::win_iocp_socket_service_base::base_move_construct	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::base_move_construct($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, win_iocp_socket_service_base::base_implementation_type& other_impl)
boost::asio::detail::win_iocp_socket_service_base::base_move_construct	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void base_move_construct(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, base_implementation_type& other_impl)
boost::asio::detail::win_iocp_socket_service_base::cancel	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^boost::system::error_code win_iocp_socket_service_base::cancel($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::cancel	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code cancel($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:( base_implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::close	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^boost::system::error_code win_iocp_socket_service_base::close($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::close	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code close($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:( base_implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::close_for_destruction	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::close_for_destruction($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl)
boost::asio::detail::win_iocp_socket_service_base::close_for_destruction	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void close_for_destruction(base_implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl)
boost::asio::detail::win_iocp_socket_service_base::construct	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::construct($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl)
boost::asio::detail::win_iocp_socket_service_base::construct	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void construct(base_implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl)
boost::asio::detail::win_iocp_socket_service_base::destroy	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::destroy($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl)
boost::asio::detail::win_iocp_socket_service_base::destroy	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void destroy(base_implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl)
boost::asio::detail::win_iocp_socket_service_base::do_assign	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^boost::system::error_code win_iocp_socket_service_base::do_assign($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, int type, socket_type native_socket, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::do_assign	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_assign($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:( base_implementation_type& impl, int type, socket_type native_socket, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::do_open	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^boost::system::error_code win_iocp_socket_service_base::do_open($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, int family, int type, int protocol, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::do_open	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_open($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:( base_implementation_type& impl, int family, int type, int protocol, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::get_reactor	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^reactor& win_iocp_socket_service_base::get_reactor()$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:()
boost::asio::detail::win_iocp_socket_service_base::get_reactor	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL reactor& get_reactor();$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:()
boost::asio::detail::win_iocp_socket_service_base::impl_list_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  base_implementation_type* impl_list_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service_base	access:protected
boost::asio::detail::win_iocp_socket_service_base::interlocked_compare_exchange_pointer	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void* win_iocp_socket_service_base::interlocked_compare_exchange_pointer($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( void** dest, void* exch, void* cmp)
boost::asio::detail::win_iocp_socket_service_base::interlocked_compare_exchange_pointer	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void* interlocked_compare_exchange_pointer($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:( void** dest, void* exch, void* cmp)
boost::asio::detail::win_iocp_socket_service_base::interlocked_exchange_pointer	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void* win_iocp_socket_service_base::interlocked_exchange_pointer($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( void** dest, void* val)
boost::asio::detail::win_iocp_socket_service_base::interlocked_exchange_pointer	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void* interlocked_exchange_pointer(void** dest, void* val);$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(void** dest, void* val)
boost::asio::detail::win_iocp_socket_service_base::io_control	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::system::error_code io_control(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, IO_Control_Command& command, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::io_service_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service_base	access:protected
boost::asio::detail::win_iocp_socket_service_base::iocp_service_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  win_iocp_io_service& iocp_service_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service_base	access:protected
boost::asio::detail::win_iocp_socket_service_base::is_open	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  bool is_open(const base_implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(const base_implementation_type& impl) const
boost::asio::detail::win_iocp_socket_service_base::listen	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::system::error_code listen(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, int backlog, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::mutex_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service_base	access:protected
boost::asio::detail::win_iocp_socket_service_base::native_non_blocking	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  bool native_non_blocking(const base_implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(const base_implementation_type& impl) const
boost::asio::detail::win_iocp_socket_service_base::native_non_blocking	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::system::error_code native_non_blocking(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::non_blocking	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  bool non_blocking(const base_implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(const base_implementation_type& impl) const
boost::asio::detail::win_iocp_socket_service_base::non_blocking	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::system::error_code non_blocking(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::reactor_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  reactor* reactor_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service_base	access:protected
boost::asio::detail::win_iocp_socket_service_base::receive	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  size_t receive(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::receive	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  size_t receive(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::receive_with_flags	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  size_t receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::receive_with_flags	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  size_t receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, socket_base::message_flags& out_flags, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::restart_accept_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::restart_accept_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( socket_type s, socket_holder& new_socket, int family, int type, int protocol, void* output_buffer, DWORD address_length, operation* op)
boost::asio::detail::win_iocp_socket_service_base::restart_accept_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void restart_accept_op(socket_type s,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(socket_type s, socket_holder& new_socket, int family, int type, int protocol, void* output_buffer, DWORD address_length, operation* op)
boost::asio::detail::win_iocp_socket_service_base::send	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  size_t send(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::send	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  size_t send(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::shutdown	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::system::error_code shutdown(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service_base::shutdown_service	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:()
boost::asio::detail::win_iocp_socket_service_base::shutdown_service	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:()
boost::asio::detail::win_iocp_socket_service_base::start_accept_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_accept_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, bool peer_is_open, socket_holder& new_socket, int family, int type, int protocol, void* output_buffer, DWORD address_length, operation* op)
boost::asio::detail::win_iocp_socket_service_base::start_accept_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_accept_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, bool peer_is_open, socket_holder& new_socket, int family, int type, int protocol, void* output_buffer, DWORD address_length, operation* op)
boost::asio::detail::win_iocp_socket_service_base::start_connect_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_connect_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, reactor_op* op, const socket_addr_type* addr, std::size_t addrlen)
boost::asio::detail::win_iocp_socket_service_base::start_connect_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_connect_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, reactor_op* op, const socket_addr_type* addr, std::size_t addrlen)
boost::asio::detail::win_iocp_socket_service_base::start_null_buffers_receive_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_null_buffers_receive_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, socket_base::message_flags flags, reactor_op* op)
boost::asio::detail::win_iocp_socket_service_base::start_null_buffers_receive_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_null_buffers_receive_op($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:( base_implementation_type& impl, socket_base::message_flags flags, reactor_op* op)
boost::asio::detail::win_iocp_socket_service_base::start_reactor_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_reactor_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, int op_type, reactor_op* op)
boost::asio::detail::win_iocp_socket_service_base::start_reactor_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_reactor_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, int op_type, reactor_op* op)
boost::asio::detail::win_iocp_socket_service_base::start_receive_from_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_receive_from_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, socket_addr_type* addr, socket_base::message_flags flags, int* addrlen, operation* op)
boost::asio::detail::win_iocp_socket_service_base::start_receive_from_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_receive_from_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, socket_addr_type* addr, socket_base::message_flags flags, int* addrlen, operation* op)
boost::asio::detail::win_iocp_socket_service_base::start_receive_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_receive_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, socket_base::message_flags flags, bool noop, operation* op)
boost::asio::detail::win_iocp_socket_service_base::start_receive_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_receive_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, socket_base::message_flags flags, bool noop, operation* op)
boost::asio::detail::win_iocp_socket_service_base::start_send_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_send_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, socket_base::message_flags flags, bool noop, operation* op)
boost::asio::detail::win_iocp_socket_service_base::start_send_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_send_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, socket_base::message_flags flags, bool noop, operation* op)
boost::asio::detail::win_iocp_socket_service_base::start_send_to_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_send_to_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, const socket_addr_type* addr, int addrlen, socket_base::message_flags flags, operation* op)
boost::asio::detail::win_iocp_socket_service_base::start_send_to_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_send_to_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, const socket_addr_type* addr, int addrlen, socket_base::message_flags flags, operation* op)
boost::asio::detail::win_iocp_socket_service_base::update_cancellation_thread_id	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::update_cancellation_thread_id($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl)
boost::asio::detail::win_iocp_socket_service_base::update_cancellation_thread_id	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void update_cancellation_thread_id($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:( base_implementation_type& impl)
boost::asio::detail::win_iocp_socket_service_base::win_iocp_socket_service_base	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^win_iocp_socket_service_base::win_iocp_socket_service_base($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( boost::asio::io_service& io_service)
boost::asio::detail::win_iocp_socket_service_base::win_iocp_socket_service_base	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL win_iocp_socket_service_base($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:( boost::asio::io_service& io_service)
boost::asio::detail::win_iocp_thread_info	/usr/include/boost/asio/detail/win_iocp_thread_info.hpp	/^struct win_iocp_thread_info : public thread_info_base$/;"	s	namespace:boost::asio::detail	inherits:thread_info_base
boost::asio::detail::win_mutex	/usr/include/boost/asio/detail/win_mutex.hpp	/^class win_mutex$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::win_mutex::crit_section_	/usr/include/boost/asio/detail/win_mutex.hpp	/^  ::CRITICAL_SECTION crit_section_;$/;"	m	class:boost::asio::detail::win_mutex	access:private
boost::asio::detail::win_mutex::do_init	/usr/include/boost/asio/detail/impl/win_mutex.ipp	/^int win_mutex::do_init()$/;"	f	class:boost::asio::detail::win_mutex	signature:()
boost::asio::detail::win_mutex::do_init	/usr/include/boost/asio/detail/win_mutex.hpp	/^  BOOST_ASIO_DECL int do_init();$/;"	p	class:boost::asio::detail::win_mutex	access:private	signature:()
boost::asio::detail::win_mutex::lock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
boost::asio::detail::win_mutex::scoped_lock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<win_mutex> scoped_lock;$/;"	t	class:boost::asio::detail::win_mutex	access:public
boost::asio::detail::win_mutex::unlock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
boost::asio::detail::win_mutex::win_mutex	/usr/include/boost/asio/detail/impl/win_mutex.ipp	/^win_mutex::win_mutex()$/;"	f	class:boost::asio::detail::win_mutex	signature:()
boost::asio::detail::win_mutex::win_mutex	/usr/include/boost/asio/detail/win_mutex.hpp	/^  BOOST_ASIO_DECL win_mutex();$/;"	p	class:boost::asio::detail::win_mutex	access:public	signature:()
boost::asio::detail::win_mutex::~win_mutex	/usr/include/boost/asio/detail/win_mutex.hpp	/^  ~win_mutex()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
boost::asio::detail::win_object_handle_service	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^class win_object_handle_service$/;"	c	namespace:boost::asio::detail
boost::asio::detail::win_object_handle_service::assign	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^boost::system::error_code win_object_handle_service::assign($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
boost::asio::detail::win_object_handle_service::assign	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code assign(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
boost::asio::detail::win_object_handle_service::async_wait	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  void async_wait(implementation_type& impl, Handler handler)$/;"	f	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, Handler handler)
boost::asio::detail::win_object_handle_service::cancel	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^boost::system::error_code win_object_handle_service::cancel($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_object_handle_service::cancel	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code cancel(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_object_handle_service::close	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^boost::system::error_code win_object_handle_service::close($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_object_handle_service::close	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code close(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_object_handle_service::construct	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::construct($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl)
boost::asio::detail::win_object_handle_service::construct	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void construct(implementation_type& impl);$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_object_handle_service::destroy	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::destroy($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl)
boost::asio::detail::win_object_handle_service::destroy	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void destroy(implementation_type& impl);$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_object_handle_service::impl_list_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  implementation_type* impl_list_;$/;"	m	class:boost::asio::detail::win_object_handle_service	access:private
boost::asio::detail::win_object_handle_service::implementation_type	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::win_object_handle_service	access:public
boost::asio::detail::win_object_handle_service::implementation_type::handle_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    native_handle_type handle_;$/;"	m	class:boost::asio::detail::win_object_handle_service::implementation_type	access:private
boost::asio::detail::win_object_handle_service::implementation_type::implementation_type	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::win_object_handle_service::implementation_type	access:public	signature:()
boost::asio::detail::win_object_handle_service::implementation_type::next_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    implementation_type* next_;$/;"	m	class:boost::asio::detail::win_object_handle_service::implementation_type	access:private
boost::asio::detail::win_object_handle_service::implementation_type::op_queue_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    op_queue<wait_op> op_queue_;$/;"	m	class:boost::asio::detail::win_object_handle_service::implementation_type	access:private
boost::asio::detail::win_object_handle_service::implementation_type::owner_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    win_object_handle_service* owner_;$/;"	m	class:boost::asio::detail::win_object_handle_service::implementation_type	access:private
boost::asio::detail::win_object_handle_service::implementation_type::prev_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    implementation_type* prev_;$/;"	m	class:boost::asio::detail::win_object_handle_service::implementation_type	access:private
boost::asio::detail::win_object_handle_service::implementation_type::wait_handle_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    HANDLE wait_handle_;$/;"	m	class:boost::asio::detail::win_object_handle_service::implementation_type	access:private
boost::asio::detail::win_object_handle_service::io_service_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::win_object_handle_service	access:private
boost::asio::detail::win_object_handle_service::is_open	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_object_handle_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::win_object_handle_service::move_assign	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::move_assign($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, win_object_handle_service& other_service, win_object_handle_service::implementation_type& other_impl)
boost::asio::detail::win_object_handle_service::move_assign	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void move_assign(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, win_object_handle_service& other_service, implementation_type& other_impl)
boost::asio::detail::win_object_handle_service::move_construct	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::move_construct($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, win_object_handle_service::implementation_type& other_impl)
boost::asio::detail::win_object_handle_service::move_construct	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void move_construct(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::detail::win_object_handle_service::mutex_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  mutex mutex_;$/;"	m	class:boost::asio::detail::win_object_handle_service	access:private
boost::asio::detail::win_object_handle_service::native_handle	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  native_handle_type native_handle(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_object_handle_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::win_object_handle_service::native_handle_type	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  typedef HANDLE native_handle_type;$/;"	t	class:boost::asio::detail::win_object_handle_service	access:public
boost::asio::detail::win_object_handle_service::register_wait_callback	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::register_wait_callback($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, mutex::scoped_lock& lock)
boost::asio::detail::win_object_handle_service::register_wait_callback	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void register_wait_callback($/;"	p	class:boost::asio::detail::win_object_handle_service	access:private	signature:( implementation_type& impl, mutex::scoped_lock& lock)
boost::asio::detail::win_object_handle_service::shutdown_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::win_object_handle_service	access:private
boost::asio::detail::win_object_handle_service::shutdown_service	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::shutdown_service()$/;"	f	class:boost::asio::detail::win_object_handle_service	signature:()
boost::asio::detail::win_object_handle_service::shutdown_service	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:()
boost::asio::detail::win_object_handle_service::start_wait_op	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::start_wait_op($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, wait_op* op)
boost::asio::detail::win_object_handle_service::start_wait_op	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void start_wait_op(implementation_type& impl, wait_op* op);$/;"	p	class:boost::asio::detail::win_object_handle_service	access:private	signature:(implementation_type& impl, wait_op* op)
boost::asio::detail::win_object_handle_service::wait	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::wait($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_object_handle_service::wait	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void wait(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_object_handle_service::wait_callback	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::wait_callback(PVOID param, BOOLEAN)$/;"	f	class:boost::asio::detail::win_object_handle_service	signature:(PVOID param, BOOLEAN)
boost::asio::detail::win_object_handle_service::wait_callback	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  static BOOST_ASIO_DECL VOID CALLBACK wait_callback($/;"	p	class:boost::asio::detail::win_object_handle_service	access:private	signature:( PVOID param, BOOLEAN timeout)
boost::asio::detail::win_object_handle_service::win_object_handle_service	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^win_object_handle_service::win_object_handle_service($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( boost::asio::io_service& io_service)
boost::asio::detail::win_object_handle_service::win_object_handle_service	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL win_object_handle_service($/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:( boost::asio::io_service& io_service)
boost::asio::detail::win_static_mutex	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^struct win_static_mutex$/;"	s	namespace:boost::asio::detail
boost::asio::detail::win_static_mutex::crit_section_	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  ::CRITICAL_SECTION crit_section_;$/;"	m	struct:boost::asio::detail::win_static_mutex	access:public
boost::asio::detail::win_static_mutex::do_init	/usr/include/boost/asio/detail/impl/win_static_mutex.ipp	/^int win_static_mutex::do_init()$/;"	f	class:boost::asio::detail::win_static_mutex	signature:()
boost::asio::detail::win_static_mutex::do_init	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  BOOST_ASIO_DECL int do_init();$/;"	p	struct:boost::asio::detail::win_static_mutex	access:public	signature:()
boost::asio::detail::win_static_mutex::init	/usr/include/boost/asio/detail/impl/win_static_mutex.ipp	/^void win_static_mutex::init()$/;"	f	class:boost::asio::detail::win_static_mutex	signature:()
boost::asio::detail::win_static_mutex::init	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  BOOST_ASIO_DECL void init();$/;"	p	struct:boost::asio::detail::win_static_mutex	access:public	signature:()
boost::asio::detail::win_static_mutex::initialised_	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  bool initialised_;$/;"	m	struct:boost::asio::detail::win_static_mutex	access:public
boost::asio::detail::win_static_mutex::lock	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  void lock()$/;"	f	struct:boost::asio::detail::win_static_mutex	access:public	signature:()
boost::asio::detail::win_static_mutex::scoped_lock	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<win_static_mutex> scoped_lock;$/;"	t	struct:boost::asio::detail::win_static_mutex	access:public
boost::asio::detail::win_static_mutex::unlock	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  void unlock()$/;"	f	struct:boost::asio::detail::win_static_mutex	access:public	signature:()
boost::asio::detail::win_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^class win_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable,win_thread_base
boost::asio::detail::win_thread::apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^  friend BOOST_ASIO_DECL void __stdcall apc_function(ULONG);$/;"	p	class:boost::asio::detail::win_thread	access:friend	signature:(ULONG)
boost::asio::detail::win_thread::apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^  friend BOOST_ASIO_DECL void __stdcall apc_function(ULONG_PTR);$/;"	p	class:boost::asio::detail::win_thread	access:friend	signature:(ULONG_PTR)
boost::asio::detail::win_thread::auto_func_base_ptr	/usr/include/boost/asio/detail/win_thread.hpp	/^  struct auto_func_base_ptr$/;"	s	class:boost::asio::detail::win_thread	access:private
boost::asio::detail::win_thread::auto_func_base_ptr::ptr	/usr/include/boost/asio/detail/win_thread.hpp	/^    func_base* ptr;$/;"	m	struct:boost::asio::detail::win_thread::auto_func_base_ptr	access:public
boost::asio::detail::win_thread::auto_func_base_ptr::~auto_func_base_ptr	/usr/include/boost/asio/detail/win_thread.hpp	/^    ~auto_func_base_ptr() { delete ptr; }$/;"	f	struct:boost::asio::detail::win_thread::auto_func_base_ptr	access:public	signature:()
boost::asio::detail::win_thread::exit_event_	/usr/include/boost/asio/detail/win_thread.hpp	/^  ::HANDLE exit_event_;$/;"	m	class:boost::asio::detail::win_thread	access:private
boost::asio::detail::win_thread::func	/usr/include/boost/asio/detail/win_thread.hpp	/^  class func$/;"	c	class:boost::asio::detail::win_thread	inherits:func_base	access:private
boost::asio::detail::win_thread::func::f_	/usr/include/boost/asio/detail/win_thread.hpp	/^    Function f_;$/;"	m	class:boost::asio::detail::win_thread::func	access:private
boost::asio::detail::win_thread::func::func	/usr/include/boost/asio/detail/win_thread.hpp	/^    func(Function f)$/;"	f	class:boost::asio::detail::win_thread::func	access:public	signature:(Function f)
boost::asio::detail::win_thread::func::run	/usr/include/boost/asio/detail/win_thread.hpp	/^    virtual void run()$/;"	f	class:boost::asio::detail::win_thread::func	access:public	signature:()
boost::asio::detail::win_thread::func_base	/usr/include/boost/asio/detail/win_thread.hpp	/^  class func_base$/;"	c	class:boost::asio::detail::win_thread	access:private
boost::asio::detail::win_thread::func_base::entry_event_	/usr/include/boost/asio/detail/win_thread.hpp	/^    ::HANDLE entry_event_;$/;"	m	class:boost::asio::detail::win_thread::func_base	access:public
boost::asio::detail::win_thread::func_base::exit_event_	/usr/include/boost/asio/detail/win_thread.hpp	/^    ::HANDLE exit_event_;$/;"	m	class:boost::asio::detail::win_thread::func_base	access:public
boost::asio::detail::win_thread::func_base::run	/usr/include/boost/asio/detail/win_thread.hpp	/^    virtual void run() = 0;$/;"	p	class:boost::asio::detail::win_thread::func_base	access:public	signature:()
boost::asio::detail::win_thread::func_base::~func_base	/usr/include/boost/asio/detail/win_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:boost::asio::detail::win_thread::func_base	access:public	signature:()
boost::asio::detail::win_thread::join	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^void win_thread::join()$/;"	f	class:boost::asio::detail::win_thread	signature:()
boost::asio::detail::win_thread::join	/usr/include/boost/asio/detail/win_thread.hpp	/^  BOOST_ASIO_DECL void join();$/;"	p	class:boost::asio::detail::win_thread	access:public	signature:()
boost::asio::detail::win_thread::start_thread	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^void win_thread::start_thread(func_base* arg, unsigned int stack_size)$/;"	f	class:boost::asio::detail::win_thread	signature:(func_base* arg, unsigned int stack_size)
boost::asio::detail::win_thread::start_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^  BOOST_ASIO_DECL void start_thread(func_base* arg, unsigned int stack_size);$/;"	p	class:boost::asio::detail::win_thread	access:private	signature:(func_base* arg, unsigned int stack_size)
boost::asio::detail::win_thread::thread_	/usr/include/boost/asio/detail/win_thread.hpp	/^  ::HANDLE thread_;$/;"	m	class:boost::asio::detail::win_thread	access:private
boost::asio::detail::win_thread::win_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^  win_thread(Function f, unsigned int stack_size = 0)$/;"	f	class:boost::asio::detail::win_thread	access:public	signature:(Function f, unsigned int stack_size = 0)
boost::asio::detail::win_thread::win_thread_function	/usr/include/boost/asio/detail/win_thread.hpp	/^  friend BOOST_ASIO_DECL unsigned int __stdcall win_thread_function(void* arg);$/;"	p	class:boost::asio::detail::win_thread	access:friend	signature:(void* arg)
boost::asio::detail::win_thread::~win_thread	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^win_thread::~win_thread()$/;"	f	class:boost::asio::detail::win_thread	signature:()
boost::asio::detail::win_thread::~win_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^  BOOST_ASIO_DECL ~win_thread();$/;"	p	class:boost::asio::detail::win_thread	access:public	signature:()
boost::asio::detail::win_thread_base	/usr/include/boost/asio/detail/win_thread.hpp	/^class win_thread_base$/;"	c	namespace:boost::asio::detail
boost::asio::detail::win_thread_base::set_terminate_threads	/usr/include/boost/asio/detail/win_thread.hpp	/^  static void set_terminate_threads(bool b)$/;"	f	class:boost::asio::detail::win_thread_base	access:public	signature:(bool b)
boost::asio::detail::win_thread_base::terminate_threads	/usr/include/boost/asio/detail/win_thread.hpp	/^  static bool terminate_threads()$/;"	f	class:boost::asio::detail::win_thread_base	access:public	signature:()
boost::asio::detail::win_thread_base::terminate_threads_	/usr/include/boost/asio/detail/win_thread.hpp	/^  static long terminate_threads_;$/;"	m	class:boost::asio::detail::win_thread_base	access:private
boost::asio::detail::win_thread_base::terminate_threads_	/usr/include/boost/asio/detail/win_thread.hpp	/^long win_thread_base<T>::terminate_threads_ = 0;$/;"	m	class:boost::asio::detail::win_thread_base
boost::asio::detail::win_thread_function	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^unsigned int __stdcall win_thread_function(void* arg)$/;"	f	namespace:boost::asio::detail	signature:(void* arg)
boost::asio::detail::win_thread_function	/usr/include/boost/asio/detail/win_thread.hpp	/^BOOST_ASIO_DECL unsigned int __stdcall win_thread_function(void* arg);$/;"	p	namespace:boost::asio::detail	signature:(void* arg)
boost::asio::detail::win_tss_ptr	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^class win_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::win_tss_ptr::operator =	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:(T* value)
boost::asio::detail::win_tss_ptr::operator T*	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:() const
boost::asio::detail::win_tss_ptr::tss_key_	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  DWORD tss_key_;$/;"	m	class:boost::asio::detail::win_tss_ptr	access:private
boost::asio::detail::win_tss_ptr::win_tss_ptr	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  win_tss_ptr()$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:()
boost::asio::detail::win_tss_ptr::~win_tss_ptr	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  ~win_tss_ptr()$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:()
boost::asio::detail::win_tss_ptr_create	/usr/include/boost/asio/detail/impl/win_tss_ptr.ipp	/^DWORD win_tss_ptr_create()$/;"	f	namespace:boost::asio::detail	signature:()
boost::asio::detail::win_tss_ptr_create	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^BOOST_ASIO_DECL DWORD win_tss_ptr_create();$/;"	p	namespace:boost::asio::detail	signature:()
boost::asio::detail::wince_thread	/usr/include/boost/asio/detail/wince_thread.hpp	/^class wince_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::wince_thread::func	/usr/include/boost/asio/detail/wince_thread.hpp	/^  class func$/;"	c	class:boost::asio::detail::wince_thread	inherits:func_base	access:private
boost::asio::detail::wince_thread::func::f_	/usr/include/boost/asio/detail/wince_thread.hpp	/^    Function f_;$/;"	m	class:boost::asio::detail::wince_thread::func	access:private
boost::asio::detail::wince_thread::func::func	/usr/include/boost/asio/detail/wince_thread.hpp	/^    func(Function f)$/;"	f	class:boost::asio::detail::wince_thread::func	access:public	signature:(Function f)
boost::asio::detail::wince_thread::func::run	/usr/include/boost/asio/detail/wince_thread.hpp	/^    virtual void run()$/;"	f	class:boost::asio::detail::wince_thread::func	access:public	signature:()
boost::asio::detail::wince_thread::func_base	/usr/include/boost/asio/detail/wince_thread.hpp	/^  class func_base$/;"	c	class:boost::asio::detail::wince_thread	access:private
boost::asio::detail::wince_thread::func_base::run	/usr/include/boost/asio/detail/wince_thread.hpp	/^    virtual void run() = 0;$/;"	p	class:boost::asio::detail::wince_thread::func_base	access:public	signature:()
boost::asio::detail::wince_thread::func_base::~func_base	/usr/include/boost/asio/detail/wince_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:boost::asio::detail::wince_thread::func_base	access:public	signature:()
boost::asio::detail::wince_thread::join	/usr/include/boost/asio/detail/wince_thread.hpp	/^  void join()$/;"	f	class:boost::asio::detail::wince_thread	access:public	signature:()
boost::asio::detail::wince_thread::thread_	/usr/include/boost/asio/detail/wince_thread.hpp	/^  ::HANDLE thread_;$/;"	m	class:boost::asio::detail::wince_thread	access:private
boost::asio::detail::wince_thread::wince_thread	/usr/include/boost/asio/detail/wince_thread.hpp	/^  wince_thread(Function f, unsigned int = 0)$/;"	f	class:boost::asio::detail::wince_thread	access:public	signature:(Function f, unsigned int = 0)
boost::asio::detail::wince_thread::wince_thread_function	/usr/include/boost/asio/detail/wince_thread.hpp	/^  friend DWORD WINAPI wince_thread_function(LPVOID arg);$/;"	p	class:boost::asio::detail::wince_thread	access:friend	signature:(LPVOID arg)
boost::asio::detail::wince_thread::~wince_thread	/usr/include/boost/asio/detail/wince_thread.hpp	/^  ~wince_thread()$/;"	f	class:boost::asio::detail::wince_thread	access:public	signature:()
boost::asio::detail::wince_thread_function	/usr/include/boost/asio/detail/wince_thread.hpp	/^DWORD WINAPI wince_thread_function(LPVOID arg);$/;"	p	namespace:boost::asio::detail	signature:(LPVOID arg)
boost::asio::detail::wince_thread_function	/usr/include/boost/asio/detail/wince_thread.hpp	/^inline DWORD WINAPI wince_thread_function(LPVOID arg)$/;"	f	namespace:boost::asio::detail	signature:(LPVOID arg)
boost::asio::detail::winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^class winsock_init : private winsock_init_base$/;"	c	namespace:boost::asio::detail	inherits:winsock_init_base
boost::asio::detail::winsock_init::data_	/usr/include/boost/asio/detail/winsock_init.hpp	/^  static data data_;$/;"	m	class:boost::asio::detail::winsock_init	access:private
boost::asio::detail::winsock_init::data_	/usr/include/boost/asio/detail/winsock_init.hpp	/^winsock_init_base::data winsock_init<Major, Minor>::data_;$/;"	m	class:boost::asio::detail::winsock_init
boost::asio::detail::winsock_init::winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^  winsock_init(bool allow_throw = true)$/;"	f	class:boost::asio::detail::winsock_init	access:public	signature:(bool allow_throw = true)
boost::asio::detail::winsock_init::winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^  winsock_init(const winsock_init&)$/;"	f	class:boost::asio::detail::winsock_init	access:public	signature:(const winsock_init&)
boost::asio::detail::winsock_init::~winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^  ~winsock_init()$/;"	f	class:boost::asio::detail::winsock_init	access:public	signature:()
boost::asio::detail::winsock_init_base	/usr/include/boost/asio/detail/winsock_init.hpp	/^class winsock_init_base$/;"	c	namespace:boost::asio::detail
boost::asio::detail::winsock_init_base::cleanup	/usr/include/boost/asio/detail/impl/winsock_init.ipp	/^void winsock_init_base::cleanup(data& d)$/;"	f	class:boost::asio::detail::winsock_init_base	signature:(data& d)
boost::asio::detail::winsock_init_base::cleanup	/usr/include/boost/asio/detail/winsock_init.hpp	/^  BOOST_ASIO_DECL static void cleanup(data& d);$/;"	p	class:boost::asio::detail::winsock_init_base	access:protected	signature:(data& d)
boost::asio::detail::winsock_init_base::data	/usr/include/boost/asio/detail/winsock_init.hpp	/^  struct data$/;"	s	class:boost::asio::detail::winsock_init_base	access:protected
boost::asio::detail::winsock_init_base::data::init_count_	/usr/include/boost/asio/detail/winsock_init.hpp	/^    long init_count_;$/;"	m	struct:boost::asio::detail::winsock_init_base::data	access:public
boost::asio::detail::winsock_init_base::data::result_	/usr/include/boost/asio/detail/winsock_init.hpp	/^    long result_;$/;"	m	struct:boost::asio::detail::winsock_init_base::data	access:public
boost::asio::detail::winsock_init_base::startup	/usr/include/boost/asio/detail/impl/winsock_init.ipp	/^void winsock_init_base::startup(data& d,$/;"	f	class:boost::asio::detail::winsock_init_base	signature:(data& d, unsigned char major, unsigned char minor)
boost::asio::detail::winsock_init_base::startup	/usr/include/boost/asio/detail/winsock_init.hpp	/^  BOOST_ASIO_DECL static void startup(data& d,$/;"	p	class:boost::asio::detail::winsock_init_base	access:protected	signature:(data& d, unsigned char major, unsigned char minor)
boost::asio::detail::winsock_init_base::throw_on_error	/usr/include/boost/asio/detail/impl/winsock_init.ipp	/^void winsock_init_base::throw_on_error(data& d)$/;"	f	class:boost::asio::detail::winsock_init_base	signature:(data& d)
boost::asio::detail::winsock_init_base::throw_on_error	/usr/include/boost/asio/detail/winsock_init.hpp	/^  BOOST_ASIO_DECL static void throw_on_error(data& d);$/;"	p	class:boost::asio::detail::winsock_init_base	access:protected	signature:(data& d)
boost::asio::detail::winsock_init_instance	/usr/include/boost/asio/detail/winsock_init.hpp	/^static const winsock_init<>& winsock_init_instance = winsock_init<>(false);$/;"	m	namespace:boost::asio::detail
boost::asio::detail::wrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^class wrapped_handler$/;"	c	namespace:boost::asio::detail
boost::asio::detail::wrapped_handler::dispatcher_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Dispatcher dispatcher_;$/;"	m	class:boost::asio::detail::wrapped_handler	access:public
boost::asio::detail::wrapped_handler::handler_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::wrapped_handler	access:public
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:() const
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:()
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1) const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1) const
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1)
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2) const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2) const
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2)
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3) const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3) const
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4) const
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5) const
boost::asio::detail::wrapped_handler::result_type	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  typedef void result_type;$/;"	t	class:boost::asio::detail::wrapped_handler	access:public
boost::asio::detail::wrapped_handler::wrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  wrapped_handler(Dispatcher dispatcher, Handler& handler)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(Dispatcher dispatcher, Handler& handler)
boost::asio::detail::wrapped_handler::wrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  wrapped_handler(const wrapped_handler& other)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const wrapped_handler& other)
boost::asio::detail::wrapped_handler::wrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  wrapped_handler(wrapped_handler&& other)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(wrapped_handler&& other)
boost::asio::detail::write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^  class write_at_op$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^  class write_at_op<AsyncRandomAccessWriteDevice, boost::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^  class write_at_op<AsyncRandomAccessWriteDevice, boost::asio::const_buffers_1,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^  class write_at_op<AsyncRandomAccessWriteDevice, std::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^  class write_at_op<AsyncRandomAccessWriteDevice,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::write_at_op::buffer_	/usr/include/boost/asio/impl/write_at.hpp	/^    boost::asio::const_buffer buffer_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
boost::asio::detail::write_at_op::buffer_	/usr/include/boost/asio/impl/write_at.hpp	/^    boost::asio::mutable_buffer buffer_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
boost::asio::detail::write_at_op::buffers_	/usr/include/boost/asio/impl/write_at.hpp	/^      const_buffer, ConstBufferSequence> buffers_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
boost::asio::detail::write_at_op::buffers_	/usr/include/boost/asio/impl/write_at.hpp	/^    boost::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
boost::asio::detail::write_at_op::buffers_	/usr/include/boost/asio/impl/write_at.hpp	/^    std::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
boost::asio::detail::write_at_op::device_	/usr/include/boost/asio/impl/write_at.hpp	/^    AsyncRandomAccessWriteDevice& device_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
boost::asio::detail::write_at_op::handler_	/usr/include/boost/asio/impl/write_at.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
boost::asio::detail::write_at_op::offset_	/usr/include/boost/asio/impl/write_at.hpp	/^    boost::uint64_t offset_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
boost::asio::detail::write_at_op::operator ()	/usr/include/boost/asio/impl/write_at.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
boost::asio::detail::write_at_op::total_transferred_	/usr/include/boost/asio/impl/write_at.hpp	/^    std::size_t total_transferred_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
boost::asio::detail::write_at_op::write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(AsyncRandomAccessWriteDevice& device,$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(AsyncRandomAccessWriteDevice& device, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, WriteHandler& handler)
boost::asio::detail::write_at_op::write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(AsyncRandomAccessWriteDevice& device,$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(AsyncRandomAccessWriteDevice& device, boost::uint64_t offset, const boost::array<Elem, 2>& buffers, CompletionCondition completion_condition, WriteHandler& handler)
boost::asio::detail::write_at_op::write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(AsyncRandomAccessWriteDevice& device,$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(AsyncRandomAccessWriteDevice& device, boost::uint64_t offset, const boost::asio::const_buffers_1& buffers, CompletionCondition completion_condition, WriteHandler& handler)
boost::asio::detail::write_at_op::write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(AsyncRandomAccessWriteDevice& device,$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(AsyncRandomAccessWriteDevice& device, boost::uint64_t offset, const boost::asio::mutable_buffers_1& buffers, CompletionCondition completion_condition, WriteHandler& handler)
boost::asio::detail::write_at_op::write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(AsyncRandomAccessWriteDevice& device,$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(AsyncRandomAccessWriteDevice& device, boost::uint64_t offset, const std::array<Elem, 2>& buffers, CompletionCondition completion_condition, WriteHandler& handler)
boost::asio::detail::write_at_op::write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(const write_at_op& other)$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(const write_at_op& other)
boost::asio::detail::write_at_op::write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(write_at_op&& other)$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(write_at_op&& other)
boost::asio::detail::write_at_streambuf_op	/usr/include/boost/asio/impl/write_at.hpp	/^  class write_at_streambuf_op$/;"	c	namespace:boost::asio::detail
boost::asio::detail::write_at_streambuf_op::handler_	/usr/include/boost/asio/impl/write_at.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::detail::write_at_streambuf_op	access:public
boost::asio::detail::write_at_streambuf_op::operator ()	/usr/include/boost/asio/impl/write_at.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::write_at_streambuf_op	access:public	signature:(const boost::system::error_code& ec, const std::size_t bytes_transferred)
boost::asio::detail::write_at_streambuf_op::streambuf_	/usr/include/boost/asio/impl/write_at.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::write_at_streambuf_op	access:public
boost::asio::detail::write_at_streambuf_op::write_at_streambuf_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_streambuf_op($/;"	f	class:boost::asio::detail::write_at_streambuf_op	access:public	signature:( boost::asio::basic_streambuf<Allocator>& streambuf, WriteHandler& handler)
boost::asio::detail::write_at_streambuf_op::write_at_streambuf_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_streambuf_op(const write_at_streambuf_op& other)$/;"	f	class:boost::asio::detail::write_at_streambuf_op	access:public	signature:(const write_at_streambuf_op& other)
boost::asio::detail::write_at_streambuf_op::write_at_streambuf_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_streambuf_op(write_at_streambuf_op&& other)$/;"	f	class:boost::asio::detail::write_at_streambuf_op	access:public	signature:(write_at_streambuf_op&& other)
boost::asio::detail::write_op	/usr/include/boost/asio/impl/write.hpp	/^  class write_op$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::write_op	/usr/include/boost/asio/impl/write.hpp	/^  class write_op<AsyncWriteStream, boost::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::write_op	/usr/include/boost/asio/impl/write.hpp	/^  class write_op<AsyncWriteStream, boost::asio::const_buffers_1,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::write_op	/usr/include/boost/asio/impl/write.hpp	/^  class write_op<AsyncWriteStream, boost::asio::mutable_buffers_1,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::write_op	/usr/include/boost/asio/impl/write.hpp	/^  class write_op<AsyncWriteStream, std::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
boost::asio::detail::write_op::buffer_	/usr/include/boost/asio/impl/write.hpp	/^    boost::asio::const_buffer buffer_;$/;"	m	class:boost::asio::detail::write_op	access:public
boost::asio::detail::write_op::buffer_	/usr/include/boost/asio/impl/write.hpp	/^    boost::asio::mutable_buffer buffer_;$/;"	m	class:boost::asio::detail::write_op	access:public
boost::asio::detail::write_op::buffers_	/usr/include/boost/asio/impl/write.hpp	/^      const_buffer, ConstBufferSequence> buffers_;$/;"	m	class:boost::asio::detail::write_op	access:public
boost::asio::detail::write_op::buffers_	/usr/include/boost/asio/impl/write.hpp	/^    boost::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::write_op	access:public
boost::asio::detail::write_op::buffers_	/usr/include/boost/asio/impl/write.hpp	/^    std::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::write_op	access:public
boost::asio::detail::write_op::handler_	/usr/include/boost/asio/impl/write.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::detail::write_op	access:public
boost::asio::detail::write_op::operator ()	/usr/include/boost/asio/impl/write.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
boost::asio::detail::write_op::stream_	/usr/include/boost/asio/impl/write.hpp	/^    AsyncWriteStream& stream_;$/;"	m	class:boost::asio::detail::write_op	access:public
boost::asio::detail::write_op::total_transferred_	/usr/include/boost/asio/impl/write.hpp	/^    std::size_t total_transferred_;$/;"	m	class:boost::asio::detail::write_op	access:public
boost::asio::detail::write_op::write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(AsyncWriteStream& stream, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(AsyncWriteStream& stream, const ConstBufferSequence& buffers, CompletionCondition completion_condition, WriteHandler& handler)
boost::asio::detail::write_op::write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(AsyncWriteStream& stream, const boost::array<Elem, 2>& buffers,$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(AsyncWriteStream& stream, const boost::array<Elem, 2>& buffers, CompletionCondition completion_condition, WriteHandler& handler)
boost::asio::detail::write_op::write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(AsyncWriteStream& stream, const std::array<Elem, 2>& buffers,$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(AsyncWriteStream& stream, const std::array<Elem, 2>& buffers, CompletionCondition completion_condition, WriteHandler& handler)
boost::asio::detail::write_op::write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(AsyncWriteStream& stream,$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(AsyncWriteStream& stream, const boost::asio::const_buffers_1& buffers, CompletionCondition completion_condition, WriteHandler& handler)
boost::asio::detail::write_op::write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(AsyncWriteStream& stream,$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(AsyncWriteStream& stream, const boost::asio::mutable_buffers_1& buffers, CompletionCondition completion_condition, WriteHandler& handler)
boost::asio::detail::write_op::write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(const write_op& other)$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(const write_op& other)
boost::asio::detail::write_op::write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(write_op&& other)$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(write_op&& other)
boost::asio::detail::write_streambuf_handler	/usr/include/boost/asio/impl/write.hpp	/^  class write_streambuf_handler$/;"	c	namespace:boost::asio::detail
boost::asio::detail::write_streambuf_handler::handler_	/usr/include/boost/asio/impl/write.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::detail::write_streambuf_handler	access:public
boost::asio::detail::write_streambuf_handler::operator ()	/usr/include/boost/asio/impl/write.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::write_streambuf_handler	access:public	signature:(const boost::system::error_code& ec, const std::size_t bytes_transferred)
boost::asio::detail::write_streambuf_handler::streambuf_	/usr/include/boost/asio/impl/write.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::write_streambuf_handler	access:public
boost::asio::detail::write_streambuf_handler::write_streambuf_handler	/usr/include/boost/asio/impl/write.hpp	/^    write_streambuf_handler(boost::asio::basic_streambuf<Allocator>& streambuf,$/;"	f	class:boost::asio::detail::write_streambuf_handler	access:public	signature:(boost::asio::basic_streambuf<Allocator>& streambuf, WriteHandler& handler)
boost::asio::detail::write_streambuf_handler::write_streambuf_handler	/usr/include/boost/asio/impl/write.hpp	/^    write_streambuf_handler(const write_streambuf_handler& other)$/;"	f	class:boost::asio::detail::write_streambuf_handler	access:public	signature:(const write_streambuf_handler& other)
boost::asio::detail::write_streambuf_handler::write_streambuf_handler	/usr/include/boost/asio/impl/write.hpp	/^    write_streambuf_handler(write_streambuf_handler&& other)$/;"	f	class:boost::asio::detail::write_streambuf_handler	access:public	signature:(write_streambuf_handler&& other)
boost::asio::detail::zero_arg_handler_test	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^char (&zero_arg_handler_test(Handler, ...))[2];$/;"	p	namespace:boost::asio::detail	signature:(Handler, ...)
boost::asio::error	/usr/include/boost/asio/error.hpp	/^namespace error {$/;"	n	namespace:boost::asio
boost::asio::error	/usr/include/boost/asio/impl/error.ipp	/^namespace error {$/;"	n	namespace:boost::asio	file:
boost::asio::error	/usr/include/boost/asio/ssl/error.hpp	/^namespace error {$/;"	n	namespace:boost::asio
boost::asio::error	/usr/include/boost/asio/ssl/impl/error.ipp	/^namespace error {$/;"	n	namespace:boost::asio	file:
boost::asio::error::access_denied	/usr/include/boost/asio/error.hpp	/^  access_denied = BOOST_ASIO_SOCKET_ERROR(EACCES),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::address_family_not_supported	/usr/include/boost/asio/error.hpp	/^  address_family_not_supported = BOOST_ASIO_SOCKET_ERROR(EAFNOSUPPORT),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::address_in_use	/usr/include/boost/asio/error.hpp	/^  address_in_use = BOOST_ASIO_SOCKET_ERROR(EADDRINUSE),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::addrinfo_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& addrinfo_category$/;"	m	namespace:boost::asio::error
boost::asio::error::addrinfo_errors	/usr/include/boost/asio/error.hpp	/^enum addrinfo_errors$/;"	g	namespace:boost::asio::error
boost::asio::error::already_connected	/usr/include/boost/asio/error.hpp	/^  already_connected = BOOST_ASIO_SOCKET_ERROR(EISCONN),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::already_open	/usr/include/boost/asio/error.hpp	/^  already_open = 1,$/;"	e	enum:boost::asio::error::misc_errors
boost::asio::error::already_started	/usr/include/boost/asio/error.hpp	/^  already_started = BOOST_ASIO_SOCKET_ERROR(EALREADY),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::bad_descriptor	/usr/include/boost/asio/error.hpp	/^  bad_descriptor = BOOST_ASIO_SOCKET_ERROR(EBADF),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::basic_errors	/usr/include/boost/asio/error.hpp	/^enum basic_errors$/;"	g	namespace:boost::asio::error
boost::asio::error::broken_pipe	/usr/include/boost/asio/error.hpp	/^  broken_pipe = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::connection_aborted	/usr/include/boost/asio/error.hpp	/^  connection_aborted = BOOST_ASIO_SOCKET_ERROR(ECONNABORTED),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::connection_refused	/usr/include/boost/asio/error.hpp	/^  connection_refused = BOOST_ASIO_SOCKET_ERROR(ECONNREFUSED),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::connection_reset	/usr/include/boost/asio/error.hpp	/^  connection_reset = BOOST_ASIO_SOCKET_ERROR(ECONNRESET),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::detail	/usr/include/boost/asio/impl/error.ipp	/^namespace detail {$/;"	n	namespace:boost::asio::error	file:
boost::asio::error::detail	/usr/include/boost/asio/ssl/impl/error.ipp	/^namespace detail {$/;"	n	namespace:boost::asio::error	file:
boost::asio::error::detail::addrinfo_category	/usr/include/boost/asio/impl/error.ipp	/^class addrinfo_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	file:	inherits:boost::system::error_category
boost::asio::error::detail::addrinfo_category::message	/usr/include/boost/asio/impl/error.ipp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::addrinfo_category	access:public	signature:(int value) const
boost::asio::error::detail::misc_category	/usr/include/boost/asio/impl/error.ipp	/^class misc_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	file:	inherits:boost::system::error_category
boost::asio::error::detail::misc_category::message	/usr/include/boost/asio/impl/error.ipp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::misc_category	access:public	signature:(int value) const
boost::asio::error::detail::netdb_category	/usr/include/boost/asio/impl/error.ipp	/^class netdb_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	file:	inherits:boost::system::error_category
boost::asio::error::detail::netdb_category::message	/usr/include/boost/asio/impl/error.ipp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::netdb_category	access:public	signature:(int value) const
boost::asio::error::detail::ssl_category	/usr/include/boost/asio/ssl/impl/error.ipp	/^class ssl_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	file:	inherits:boost::system::error_category
boost::asio::error::detail::ssl_category::message	/usr/include/boost/asio/ssl/impl/error.ipp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::ssl_category	access:public	signature:(int value) const
boost::asio::error::eof	/usr/include/boost/asio/error.hpp	/^  eof,$/;"	e	enum:boost::asio::error::misc_errors
boost::asio::error::fault	/usr/include/boost/asio/error.hpp	/^  fault = BOOST_ASIO_SOCKET_ERROR(EFAULT),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::fd_set_failure	/usr/include/boost/asio/error.hpp	/^  fd_set_failure$/;"	e	enum:boost::asio::error::misc_errors
boost::asio::error::get_addrinfo_category	/usr/include/boost/asio/error.hpp	/^const boost::system::error_category& get_addrinfo_category();$/;"	p	namespace:boost::asio::error	signature:()
boost::asio::error::get_addrinfo_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_addrinfo_category()$/;"	f	namespace:boost::asio::error	signature:()
boost::asio::error::get_addrinfo_category	/usr/include/boost/asio/impl/error.ipp	/^const boost::system::error_category& get_addrinfo_category()$/;"	f	namespace:boost::asio::error	signature:()
boost::asio::error::get_misc_category	/usr/include/boost/asio/error.hpp	/^const boost::system::error_category& get_misc_category();$/;"	p	namespace:boost::asio::error	signature:()
boost::asio::error::get_misc_category	/usr/include/boost/asio/impl/error.ipp	/^const boost::system::error_category& get_misc_category()$/;"	f	namespace:boost::asio::error	signature:()
boost::asio::error::get_netdb_category	/usr/include/boost/asio/error.hpp	/^const boost::system::error_category& get_netdb_category();$/;"	p	namespace:boost::asio::error	signature:()
boost::asio::error::get_netdb_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_netdb_category()$/;"	f	namespace:boost::asio::error	signature:()
boost::asio::error::get_netdb_category	/usr/include/boost/asio/impl/error.ipp	/^const boost::system::error_category& get_netdb_category()$/;"	f	namespace:boost::asio::error	signature:()
boost::asio::error::get_ssl_category	/usr/include/boost/asio/ssl/error.hpp	/^const boost::system::error_category& get_ssl_category();$/;"	p	namespace:boost::asio::error	signature:()
boost::asio::error::get_ssl_category	/usr/include/boost/asio/ssl/impl/error.ipp	/^const boost::system::error_category& get_ssl_category()$/;"	f	namespace:boost::asio::error	signature:()
boost::asio::error::get_system_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_system_category()$/;"	f	namespace:boost::asio::error	signature:()
boost::asio::error::host_not_found	/usr/include/boost/asio/error.hpp	/^  host_not_found = BOOST_ASIO_NETDB_ERROR(HOST_NOT_FOUND),$/;"	e	enum:boost::asio::error::netdb_errors
boost::asio::error::host_not_found_try_again	/usr/include/boost/asio/error.hpp	/^  host_not_found_try_again = BOOST_ASIO_NETDB_ERROR(TRY_AGAIN),$/;"	e	enum:boost::asio::error::netdb_errors
boost::asio::error::host_unreachable	/usr/include/boost/asio/error.hpp	/^  host_unreachable = BOOST_ASIO_SOCKET_ERROR(EHOSTUNREACH),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::in_progress	/usr/include/boost/asio/error.hpp	/^  in_progress = BOOST_ASIO_SOCKET_ERROR(EINPROGRESS),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::interrupted	/usr/include/boost/asio/error.hpp	/^  interrupted = BOOST_ASIO_SOCKET_ERROR(EINTR),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::invalid_argument	/usr/include/boost/asio/error.hpp	/^  invalid_argument = BOOST_ASIO_SOCKET_ERROR(EINVAL),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(addrinfo_errors e)$/;"	f	namespace:boost::asio::error	signature:(addrinfo_errors e)
boost::asio::error::make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(basic_errors e)$/;"	f	namespace:boost::asio::error	signature:(basic_errors e)
boost::asio::error::make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(misc_errors e)$/;"	f	namespace:boost::asio::error	signature:(misc_errors e)
boost::asio::error::make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(netdb_errors e)$/;"	f	namespace:boost::asio::error	signature:(netdb_errors e)
boost::asio::error::make_error_code	/usr/include/boost/asio/ssl/error.hpp	/^inline boost::system::error_code make_error_code(ssl_errors e)$/;"	f	namespace:boost::asio::error	signature:(ssl_errors e)
boost::asio::error::message_size	/usr/include/boost/asio/error.hpp	/^  message_size = BOOST_ASIO_SOCKET_ERROR(EMSGSIZE),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::misc_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& misc_category$/;"	m	namespace:boost::asio::error
boost::asio::error::misc_errors	/usr/include/boost/asio/error.hpp	/^enum misc_errors$/;"	g	namespace:boost::asio::error
boost::asio::error::name_too_long	/usr/include/boost/asio/error.hpp	/^  name_too_long = BOOST_ASIO_SOCKET_ERROR(ENAMETOOLONG),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::netdb_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& netdb_category$/;"	m	namespace:boost::asio::error
boost::asio::error::netdb_errors	/usr/include/boost/asio/error.hpp	/^enum netdb_errors$/;"	g	namespace:boost::asio::error
boost::asio::error::network_down	/usr/include/boost/asio/error.hpp	/^  network_down = BOOST_ASIO_SOCKET_ERROR(ENETDOWN),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::network_reset	/usr/include/boost/asio/error.hpp	/^  network_reset = BOOST_ASIO_SOCKET_ERROR(ENETRESET),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::network_unreachable	/usr/include/boost/asio/error.hpp	/^  network_unreachable = BOOST_ASIO_SOCKET_ERROR(ENETUNREACH),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::no_buffer_space	/usr/include/boost/asio/error.hpp	/^  no_buffer_space = BOOST_ASIO_SOCKET_ERROR(ENOBUFS),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::no_data	/usr/include/boost/asio/error.hpp	/^  no_data = BOOST_ASIO_NETDB_ERROR(NO_DATA),$/;"	e	enum:boost::asio::error::netdb_errors
boost::asio::error::no_descriptors	/usr/include/boost/asio/error.hpp	/^  no_descriptors = BOOST_ASIO_SOCKET_ERROR(EMFILE),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::no_memory	/usr/include/boost/asio/error.hpp	/^  no_memory = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::no_permission	/usr/include/boost/asio/error.hpp	/^  no_permission = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::no_protocol_option	/usr/include/boost/asio/error.hpp	/^  no_protocol_option = BOOST_ASIO_SOCKET_ERROR(ENOPROTOOPT),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::no_recovery	/usr/include/boost/asio/error.hpp	/^  no_recovery = BOOST_ASIO_NETDB_ERROR(NO_RECOVERY)$/;"	e	enum:boost::asio::error::netdb_errors
boost::asio::error::not_connected	/usr/include/boost/asio/error.hpp	/^  not_connected = BOOST_ASIO_SOCKET_ERROR(ENOTCONN),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::not_found	/usr/include/boost/asio/error.hpp	/^  not_found,$/;"	e	enum:boost::asio::error::misc_errors
boost::asio::error::not_socket	/usr/include/boost/asio/error.hpp	/^  not_socket = BOOST_ASIO_SOCKET_ERROR(ENOTSOCK),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::operation_aborted	/usr/include/boost/asio/error.hpp	/^  operation_aborted = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::operation_not_supported	/usr/include/boost/asio/error.hpp	/^  operation_not_supported = BOOST_ASIO_SOCKET_ERROR(EOPNOTSUPP),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::service_not_found	/usr/include/boost/asio/error.hpp	/^  service_not_found = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::addrinfo_errors
boost::asio::error::shut_down	/usr/include/boost/asio/error.hpp	/^  shut_down = BOOST_ASIO_SOCKET_ERROR(ESHUTDOWN),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::socket_type_not_supported	/usr/include/boost/asio/error.hpp	/^  socket_type_not_supported = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::addrinfo_errors
boost::asio::error::ssl_category	/usr/include/boost/asio/ssl/error.hpp	/^static const boost::system::error_category& ssl_category$/;"	m	namespace:boost::asio::error
boost::asio::error::ssl_errors	/usr/include/boost/asio/ssl/error.hpp	/^enum ssl_errors$/;"	g	namespace:boost::asio::error
boost::asio::error::system_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& system_category$/;"	m	namespace:boost::asio::error
boost::asio::error::timed_out	/usr/include/boost/asio/error.hpp	/^  timed_out = BOOST_ASIO_SOCKET_ERROR(ETIMEDOUT),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::try_again	/usr/include/boost/asio/error.hpp	/^  try_again = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::would_block	/usr/include/boost/asio/error.hpp	/^  would_block = BOOST_ASIO_SOCKET_ERROR(EWOULDBLOCK)$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::has_service	/usr/include/boost/asio/impl/io_service.hpp	/^inline bool has_service(io_service& ios)$/;"	f	namespace:boost::asio	signature:(io_service& ios)
boost::asio::has_service	/usr/include/boost/asio/io_service.hpp	/^template <typename Service> bool has_service(io_service& ios);$/;"	p	namespace:boost::asio	signature:(io_service& ios)
boost::asio::high_resolution_timer	/usr/include/boost/asio/high_resolution_timer.hpp	/^  high_resolution_timer;$/;"	t	namespace:boost::asio
boost::asio::invalid_service_owner	/usr/include/boost/asio/io_service.hpp	/^class invalid_service_owner$/;"	c	namespace:boost::asio	inherits:std::logic_error
boost::asio::invalid_service_owner::invalid_service_owner	/usr/include/boost/asio/impl/io_service.ipp	/^invalid_service_owner::invalid_service_owner()$/;"	f	class:boost::asio::invalid_service_owner	signature:()
boost::asio::invalid_service_owner::invalid_service_owner	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL invalid_service_owner();$/;"	p	class:boost::asio::invalid_service_owner	access:public	signature:()
boost::asio::io_service	/usr/include/boost/asio/io_service.hpp	/^class io_service$/;"	c	namespace:boost::asio	inherits:noncopyable
boost::asio::io_service::add_service	/usr/include/boost/asio/io_service.hpp	/^  friend void add_service(io_service& ios, Service* svc);$/;"	p	class:boost::asio::io_service	access:friend	signature:(io_service& ios, Service* svc)
boost::asio::io_service::fork_child	/usr/include/boost/asio/io_service.hpp	/^    fork_child$/;"	e	enum:boost::asio::io_service::fork_event
boost::asio::io_service::fork_event	/usr/include/boost/asio/io_service.hpp	/^  enum fork_event$/;"	g	class:boost::asio::io_service	access:public
boost::asio::io_service::fork_parent	/usr/include/boost/asio/io_service.hpp	/^    fork_parent,$/;"	e	enum:boost::asio::io_service::fork_event
boost::asio::io_service::fork_prepare	/usr/include/boost/asio/io_service.hpp	/^    fork_prepare,$/;"	e	enum:boost::asio::io_service::fork_event
boost::asio::io_service::handler	/usr/include/boost/asio/io_service.hpp	/^  void dispatch(BOOST_ASIO_MOVE_ARG(CompletionHandler) handler);$/;"	m	class:boost::asio::io_service	access:public
boost::asio::io_service::handler	/usr/include/boost/asio/io_service.hpp	/^  void post(BOOST_ASIO_MOVE_ARG(CompletionHandler) handler);$/;"	m	class:boost::asio::io_service	access:public
boost::asio::io_service::has_service	/usr/include/boost/asio/io_service.hpp	/^  friend bool has_service(io_service& ios);$/;"	p	class:boost::asio::io_service	access:friend	signature:(io_service& ios)
boost::asio::io_service::id	/usr/include/boost/asio/io_service.hpp	/^class io_service::id$/;"	c	class:boost::asio::io_service	inherits:noncopyable
boost::asio::io_service::id::id	/usr/include/boost/asio/io_service.hpp	/^  id() {}$/;"	f	class:boost::asio::io_service::id	access:public	signature:()
boost::asio::io_service::impl_	/usr/include/boost/asio/io_service.hpp	/^  impl_type& impl_;$/;"	m	class:boost::asio::io_service	access:private
boost::asio::io_service::impl_type	/usr/include/boost/asio/io_service.hpp	/^  typedef detail::io_service_impl impl_type;$/;"	t	class:boost::asio::io_service	access:private
boost::asio::io_service::init_	/usr/include/boost/asio/io_service.hpp	/^  detail::signal_init<> init_;$/;"	m	class:boost::asio::io_service	access:private
boost::asio::io_service::init_	/usr/include/boost/asio/io_service.hpp	/^  detail::winsock_init<> init_;$/;"	m	class:boost::asio::io_service	access:private
boost::asio::io_service::io_service	/usr/include/boost/asio/impl/io_service.ipp	/^io_service::io_service()$/;"	f	class:boost::asio::io_service	signature:()
boost::asio::io_service::io_service	/usr/include/boost/asio/impl/io_service.ipp	/^io_service::io_service(std::size_t concurrency_hint)$/;"	f	class:boost::asio::io_service	signature:(std::size_t concurrency_hint)
boost::asio::io_service::io_service	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL explicit io_service(std::size_t concurrency_hint);$/;"	p	class:boost::asio::io_service	access:public	signature:(std::size_t concurrency_hint)
boost::asio::io_service::io_service	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL io_service();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::notify_fork	/usr/include/boost/asio/impl/io_service.ipp	/^void io_service::notify_fork(boost::asio::io_service::fork_event event)$/;"	f	class:boost::asio::io_service	signature:(boost::asio::io_service::fork_event event)
boost::asio::io_service::notify_fork	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL void notify_fork(boost::asio::io_service::fork_event event);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::asio::io_service::fork_event event)
boost::asio::io_service::poll	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::poll()$/;"	f	class:boost::asio::io_service	signature:()
boost::asio::io_service::poll	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::poll(boost::system::error_code& ec)$/;"	f	class:boost::asio::io_service	signature:(boost::system::error_code& ec)
boost::asio::io_service::poll	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t poll();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::poll	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t poll(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::io_service::poll_one	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::poll_one()$/;"	f	class:boost::asio::io_service	signature:()
boost::asio::io_service::poll_one	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::poll_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::io_service	signature:(boost::system::error_code& ec)
boost::asio::io_service::poll_one	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t poll_one();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::poll_one	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t poll_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::io_service::reset	/usr/include/boost/asio/impl/io_service.ipp	/^void io_service::reset()$/;"	f	class:boost::asio::io_service	signature:()
boost::asio::io_service::reset	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL void reset();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::run	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::run()$/;"	f	class:boost::asio::io_service	signature:()
boost::asio::io_service::run	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::run(boost::system::error_code& ec)$/;"	f	class:boost::asio::io_service	signature:(boost::system::error_code& ec)
boost::asio::io_service::run	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t run();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::run	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t run(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::io_service::run_one	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::run_one()$/;"	f	class:boost::asio::io_service	signature:()
boost::asio::io_service::run_one	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::run_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::io_service	signature:(boost::system::error_code& ec)
boost::asio::io_service::run_one	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t run_one();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::run_one	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t run_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::io_service::service	/usr/include/boost/asio/io_service.hpp	/^class io_service::service$/;"	c	class:boost::asio::io_service	inherits:noncopyable
boost::asio::io_service::service::fork_service	/usr/include/boost/asio/impl/io_service.ipp	/^void io_service::service::fork_service(boost::asio::io_service::fork_event)$/;"	f	class:boost::asio::io_service::service	signature:(boost::asio::io_service::fork_event)
boost::asio::io_service::service::fork_service	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL virtual void fork_service($/;"	p	class:boost::asio::io_service::service	access:private	signature:( boost::asio::io_service::fork_event event)
boost::asio::io_service::service::get_io_service	/usr/include/boost/asio/impl/io_service.hpp	/^inline boost::asio::io_service& io_service::service::get_io_service()$/;"	f	class:boost::asio::io_service::service	signature:()
boost::asio::io_service::service::get_io_service	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& get_io_service();$/;"	p	class:boost::asio::io_service::service	access:public	signature:()
boost::asio::io_service::service::key	/usr/include/boost/asio/io_service.hpp	/^  struct key$/;"	s	class:boost::asio::io_service::service	access:private
boost::asio::io_service::service::key::id_	/usr/include/boost/asio/io_service.hpp	/^    const boost::asio::io_service::id* id_;$/;"	m	struct:boost::asio::io_service::service::key	access:public
boost::asio::io_service::service::key::key	/usr/include/boost/asio/io_service.hpp	/^    key() : type_info_(0), id_(0) {}$/;"	f	struct:boost::asio::io_service::service::key	access:public	signature:()
boost::asio::io_service::service::key::type_info_	/usr/include/boost/asio/io_service.hpp	/^    const std::type_info* type_info_;$/;"	m	struct:boost::asio::io_service::service::key	access:public
boost::asio::io_service::service::key_	/usr/include/boost/asio/io_service.hpp	/^  } key_;$/;"	m	class:boost::asio::io_service::service	typeref:struct:boost::asio::io_service::service::key	access:private
boost::asio::io_service::service::next_	/usr/include/boost/asio/io_service.hpp	/^  service* next_;$/;"	m	class:boost::asio::io_service::service	access:private
boost::asio::io_service::service::owner_	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& owner_;$/;"	m	class:boost::asio::io_service::service	access:private
boost::asio::io_service::service::service	/usr/include/boost/asio/impl/io_service.ipp	/^io_service::service::service(boost::asio::io_service& owner)$/;"	f	class:boost::asio::io_service::service	signature:(boost::asio::io_service& owner)
boost::asio::io_service::service::service	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL service(boost::asio::io_service& owner);$/;"	p	class:boost::asio::io_service::service	access:protected	signature:(boost::asio::io_service& owner)
boost::asio::io_service::service::shutdown_service	/usr/include/boost/asio/io_service.hpp	/^  virtual void shutdown_service() = 0;$/;"	p	class:boost::asio::io_service::service	access:private	signature:()
boost::asio::io_service::service::~service	/usr/include/boost/asio/impl/io_service.ipp	/^io_service::service::~service()$/;"	f	class:boost::asio::io_service::service	signature:()
boost::asio::io_service::service::~service	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL virtual ~service();$/;"	p	class:boost::asio::io_service::service	access:protected	signature:()
boost::asio::io_service::service_registry_	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::detail::service_registry* service_registry_;$/;"	m	class:boost::asio::io_service	access:private
boost::asio::io_service::stop	/usr/include/boost/asio/impl/io_service.ipp	/^void io_service::stop()$/;"	f	class:boost::asio::io_service	signature:()
boost::asio::io_service::stop	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL void stop();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::stopped	/usr/include/boost/asio/impl/io_service.ipp	/^bool io_service::stopped() const$/;"	f	class:boost::asio::io_service	signature:() const
boost::asio::io_service::stopped	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL bool stopped() const;$/;"	p	class:boost::asio::io_service	access:public	signature:() const
boost::asio::io_service::strand	/usr/include/boost/asio/strand.hpp	/^class io_service::strand$/;"	c	class:boost::asio::io_service
boost::asio::io_service::strand::get_io_service	/usr/include/boost/asio/strand.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::io_service::strand	access:public	signature:()
boost::asio::io_service::strand::impl_	/usr/include/boost/asio/strand.hpp	/^  boost::asio::detail::strand_service::implementation_type impl_;$/;"	m	class:boost::asio::io_service::strand	access:private
boost::asio::io_service::strand::service_	/usr/include/boost/asio/strand.hpp	/^  boost::asio::detail::strand_service& service_;$/;"	m	class:boost::asio::io_service::strand	access:private
boost::asio::io_service::strand::strand	/usr/include/boost/asio/strand.hpp	/^  explicit strand(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::io_service::strand	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::io_service::strand::wrap	/usr/include/boost/asio/strand.hpp	/^  wrap(Handler handler)$/;"	f	class:boost::asio::io_service::strand	access:public	signature:(Handler handler)
boost::asio::io_service::strand::~strand	/usr/include/boost/asio/strand.hpp	/^  ~strand()$/;"	f	class:boost::asio::io_service::strand	access:public	signature:()
boost::asio::io_service::use_service	/usr/include/boost/asio/io_service.hpp	/^  friend Service& use_service(io_service& ios);$/;"	p	class:boost::asio::io_service	access:friend	signature:(io_service& ios)
boost::asio::io_service::work	/usr/include/boost/asio/io_service.hpp	/^class io_service::work$/;"	c	class:boost::asio::io_service
boost::asio::io_service::work::get_io_service	/usr/include/boost/asio/impl/io_service.hpp	/^inline boost::asio::io_service& io_service::work::get_io_service()$/;"	f	class:boost::asio::io_service::work	signature:()
boost::asio::io_service::work::get_io_service	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& get_io_service();$/;"	p	class:boost::asio::io_service::work	access:public	signature:()
boost::asio::io_service::work::io_service_impl_	/usr/include/boost/asio/io_service.hpp	/^  detail::io_service_impl& io_service_impl_;$/;"	m	class:boost::asio::io_service::work	access:private
boost::asio::io_service::work::operator =	/usr/include/boost/asio/io_service.hpp	/^  void operator=(const work& other);$/;"	p	class:boost::asio::io_service::work	access:private	signature:(const work& other)
boost::asio::io_service::work::work	/usr/include/boost/asio/impl/io_service.hpp	/^inline io_service::work::work(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::io_service::work	signature:(boost::asio::io_service& io_service)
boost::asio::io_service::work::work	/usr/include/boost/asio/impl/io_service.hpp	/^inline io_service::work::work(const work& other)$/;"	f	class:boost::asio::io_service::work	signature:(const work& other)
boost::asio::io_service::work::work	/usr/include/boost/asio/io_service.hpp	/^  explicit work(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::io_service::work	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::io_service::work::work	/usr/include/boost/asio/io_service.hpp	/^  work(const work& other);$/;"	p	class:boost::asio::io_service::work	access:public	signature:(const work& other)
boost::asio::io_service::work::~work	/usr/include/boost/asio/impl/io_service.hpp	/^inline io_service::work::~work()$/;"	f	class:boost::asio::io_service::work	signature:()
boost::asio::io_service::work::~work	/usr/include/boost/asio/io_service.hpp	/^  ~work();$/;"	p	class:boost::asio::io_service::work	access:public	signature:()
boost::asio::io_service::wrap	/usr/include/boost/asio/impl/io_service.hpp	/^io_service::wrap(Handler handler)$/;"	f	class:boost::asio::io_service	signature:(Handler handler)
boost::asio::io_service::wrap	/usr/include/boost/asio/io_service.hpp	/^  wrap(Handler handler);$/;"	p	class:boost::asio::io_service	access:public	signature:(Handler handler)
boost::asio::io_service::~io_service	/usr/include/boost/asio/impl/io_service.ipp	/^io_service::~io_service()$/;"	f	class:boost::asio::io_service	signature:()
boost::asio::io_service::~io_service	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL ~io_service();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::ip	/usr/include/boost/asio/ip/address.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/address_v4.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/address_v6.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/basic_resolver.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^namespace ip {$/;"	n	namespace:boost::asio	file:
boost::asio::ip	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/host_name.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/icmp.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/impl/address.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/impl/address.ipp	/^namespace ip {$/;"	n	namespace:boost::asio	file:
boost::asio::ip	/usr/include/boost/asio/ip/impl/address_v4.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^namespace ip {$/;"	n	namespace:boost::asio	file:
boost::asio::ip	/usr/include/boost/asio/ip/impl/address_v6.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^namespace ip {$/;"	n	namespace:boost::asio	file:
boost::asio::ip	/usr/include/boost/asio/ip/impl/basic_endpoint.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/impl/host_name.ipp	/^namespace ip {$/;"	n	namespace:boost::asio	file:
boost::asio::ip	/usr/include/boost/asio/ip/multicast.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/resolver_service.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/tcp.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/udp.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/unicast.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/v6_only.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip::address	/usr/include/boost/asio/ip/address.hpp	/^class address$/;"	c	namespace:boost::asio::ip
boost::asio::ip::address::address	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address();$/;"	p	class:boost::asio::ip::address	access:public	signature:()
boost::asio::ip::address::address	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address(address&& other);$/;"	p	class:boost::asio::ip::address	access:public	signature:(address&& other)
boost::asio::ip::address::address	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address(const address& other);$/;"	p	class:boost::asio::ip::address	access:public	signature:(const address& other)
boost::asio::ip::address::address	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address(const boost::asio::ip::address_v4& ipv4_address);$/;"	p	class:boost::asio::ip::address	access:public	signature:(const boost::asio::ip::address_v4& ipv4_address)
boost::asio::ip::address::address	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address(const boost::asio::ip::address_v6& ipv6_address);$/;"	p	class:boost::asio::ip::address	access:public	signature:(const boost::asio::ip::address_v6& ipv6_address)
boost::asio::ip::address::address	/usr/include/boost/asio/ip/impl/address.ipp	/^address::address()$/;"	f	class:boost::asio::ip::address	signature:()
boost::asio::ip::address::address	/usr/include/boost/asio/ip/impl/address.ipp	/^address::address(address&& other)$/;"	f	class:boost::asio::ip::address	signature:(address&& other)
boost::asio::ip::address::address	/usr/include/boost/asio/ip/impl/address.ipp	/^address::address(const address& other)$/;"	f	class:boost::asio::ip::address	signature:(const address& other)
boost::asio::ip::address::address	/usr/include/boost/asio/ip/impl/address.ipp	/^address::address(const boost::asio::ip::address_v4& ipv4_address)$/;"	f	class:boost::asio::ip::address	signature:(const boost::asio::ip::address_v4& ipv4_address)
boost::asio::ip::address::address	/usr/include/boost/asio/ip/impl/address.ipp	/^address::address(const boost::asio::ip::address_v6& ipv6_address)$/;"	f	class:boost::asio::ip::address	signature:(const boost::asio::ip::address_v6& ipv6_address)
boost::asio::ip::address::from_string	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL static address from_string($/;"	p	class:boost::asio::ip::address	access:public	signature:( const char* str, boost::system::error_code& ec)
boost::asio::ip::address::from_string	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL static address from_string($/;"	p	class:boost::asio::ip::address	access:public	signature:( const std::string& str, boost::system::error_code& ec)
boost::asio::ip::address::from_string	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL static address from_string(const char* str);$/;"	p	class:boost::asio::ip::address	access:public	signature:(const char* str)
boost::asio::ip::address::from_string	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL static address from_string(const std::string& str);$/;"	p	class:boost::asio::ip::address	access:public	signature:(const std::string& str)
boost::asio::ip::address::from_string	/usr/include/boost/asio/ip/impl/address.ipp	/^address address::from_string(const char* str)$/;"	f	class:boost::asio::ip::address	signature:(const char* str)
boost::asio::ip::address::from_string	/usr/include/boost/asio/ip/impl/address.ipp	/^address address::from_string(const char* str, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::address	signature:(const char* str, boost::system::error_code& ec)
boost::asio::ip::address::from_string	/usr/include/boost/asio/ip/impl/address.ipp	/^address address::from_string(const std::string& str)$/;"	f	class:boost::asio::ip::address	signature:(const std::string& str)
boost::asio::ip::address::from_string	/usr/include/boost/asio/ip/impl/address.ipp	/^address address::from_string(const std::string& str,$/;"	f	class:boost::asio::ip::address	signature:(const std::string& str, boost::system::error_code& ec)
boost::asio::ip::address::ipv4	/usr/include/boost/asio/ip/address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	e	enum:boost::asio::ip::address::__anon20
boost::asio::ip::address::ipv4_address_	/usr/include/boost/asio/ip/address.hpp	/^  boost::asio::ip::address_v4 ipv4_address_;$/;"	m	class:boost::asio::ip::address	access:private
boost::asio::ip::address::ipv6	/usr/include/boost/asio/ip/address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	e	enum:boost::asio::ip::address::__anon20
boost::asio::ip::address::ipv6_address_	/usr/include/boost/asio/ip/address.hpp	/^  boost::asio::ip::address_v6 ipv6_address_;$/;"	m	class:boost::asio::ip::address	access:private
boost::asio::ip::address::is_loopback	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL bool is_loopback() const;$/;"	p	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::is_loopback	/usr/include/boost/asio/ip/impl/address.ipp	/^bool address::is_loopback() const$/;"	f	class:boost::asio::ip::address	signature:() const
boost::asio::ip::address::is_multicast	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL bool is_multicast() const;$/;"	p	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::is_multicast	/usr/include/boost/asio/ip/impl/address.ipp	/^bool address::is_multicast() const$/;"	f	class:boost::asio::ip::address	signature:() const
boost::asio::ip::address::is_unspecified	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL bool is_unspecified() const;$/;"	p	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::is_unspecified	/usr/include/boost/asio/ip/impl/address.ipp	/^bool address::is_unspecified() const$/;"	f	class:boost::asio::ip::address	signature:() const
boost::asio::ip::address::is_v4	/usr/include/boost/asio/ip/address.hpp	/^  bool is_v4() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::is_v6	/usr/include/boost/asio/ip/address.hpp	/^  bool is_v6() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::operator !=	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator!=(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
boost::asio::ip::address::operator <	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL friend bool operator<(const address& a1, const address& a2);$/;"	p	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
boost::asio::ip::address::operator <=	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator<=(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
boost::asio::ip::address::operator =	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address& operator=($/;"	p	class:boost::asio::ip::address	access:public	signature:( const boost::asio::ip::address_v4& ipv4_address)
boost::asio::ip::address::operator =	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address& operator=($/;"	p	class:boost::asio::ip::address	access:public	signature:( const boost::asio::ip::address_v6& ipv6_address)
boost::asio::ip::address::operator =	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address& operator=(address&& other);$/;"	p	class:boost::asio::ip::address	access:public	signature:(address&& other)
boost::asio::ip::address::operator =	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address& operator=(const address& other);$/;"	p	class:boost::asio::ip::address	access:public	signature:(const address& other)
boost::asio::ip::address::operator =	/usr/include/boost/asio/ip/impl/address.ipp	/^address& address::operator=(address&& other)$/;"	f	class:boost::asio::ip::address	signature:(address&& other)
boost::asio::ip::address::operator =	/usr/include/boost/asio/ip/impl/address.ipp	/^address& address::operator=(const address& other)$/;"	f	class:boost::asio::ip::address	signature:(const address& other)
boost::asio::ip::address::operator =	/usr/include/boost/asio/ip/impl/address.ipp	/^address& address::operator=(const boost::asio::ip::address_v4& ipv4_address)$/;"	f	class:boost::asio::ip::address	signature:(const boost::asio::ip::address_v4& ipv4_address)
boost::asio::ip::address::operator =	/usr/include/boost/asio/ip/impl/address.ipp	/^address& address::operator=(const boost::asio::ip::address_v6& ipv6_address)$/;"	f	class:boost::asio::ip::address	signature:(const boost::asio::ip::address_v6& ipv6_address)
boost::asio::ip::address::operator ==	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL friend bool operator==(const address& a1, const address& a2);$/;"	p	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
boost::asio::ip::address::operator >	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator>(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
boost::asio::ip::address::operator >=	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator>=(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
boost::asio::ip::address::to_string	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL std::string to_string() const;$/;"	p	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::to_string	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;$/;"	p	class:boost::asio::ip::address	access:public	signature:(boost::system::error_code& ec) const
boost::asio::ip::address::to_string	/usr/include/boost/asio/ip/impl/address.ipp	/^std::string address::to_string() const$/;"	f	class:boost::asio::ip::address	signature:() const
boost::asio::ip::address::to_string	/usr/include/boost/asio/ip/impl/address.ipp	/^std::string address::to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::address	signature:(boost::system::error_code& ec) const
boost::asio::ip::address::to_v4	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL boost::asio::ip::address_v4 to_v4() const;$/;"	p	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::to_v4	/usr/include/boost/asio/ip/impl/address.ipp	/^boost::asio::ip::address_v4 address::to_v4() const$/;"	f	class:boost::asio::ip::address	signature:() const
boost::asio::ip::address::to_v6	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL boost::asio::ip::address_v6 to_v6() const;$/;"	p	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::to_v6	/usr/include/boost/asio/ip/impl/address.ipp	/^boost::asio::ip::address_v6 address::to_v6() const$/;"	f	class:boost::asio::ip::address	signature:() const
boost::asio::ip::address::type_	/usr/include/boost/asio/ip/address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	m	class:boost::asio::ip::address	typeref:enum:boost::asio::ip::address::__anon20	access:private
boost::asio::ip::address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^class address_v4$/;"	c	namespace:boost::asio::ip
boost::asio::ip::address_v4::addr_	/usr/include/boost/asio/ip/address_v4.hpp	/^  boost::asio::detail::in4_addr_type addr_;$/;"	m	class:boost::asio::ip::address_v4	access:private
boost::asio::ip::address_v4::address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL explicit address_v4(const bytes_type& bytes);$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:(const bytes_type& bytes)
boost::asio::ip::address_v4::address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL explicit address_v4(unsigned long addr);$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:(unsigned long addr)
boost::asio::ip::address_v4::address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
boost::asio::ip::address_v4::address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4(address_v4&& other)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(address_v4&& other)
boost::asio::ip::address_v4::address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4(const address_v4& other)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& other)
boost::asio::ip::address_v4::address_v4	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4::address_v4(const address_v4::bytes_type& bytes)$/;"	f	class:boost::asio::ip::address_v4	signature:(const address_v4::bytes_type& bytes)
boost::asio::ip::address_v4::address_v4	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4::address_v4(unsigned long addr)$/;"	f	class:boost::asio::ip::address_v4	signature:(unsigned long addr)
boost::asio::ip::address_v4::any	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 any()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
boost::asio::ip::address_v4::broadcast	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL static address_v4 broadcast($/;"	p	class:boost::asio::ip::address_v4	access:public	signature:( const address_v4& addr, const address_v4& mask)
boost::asio::ip::address_v4::broadcast	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 broadcast()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
boost::asio::ip::address_v4::broadcast	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4 address_v4::broadcast(const address_v4& addr, const address_v4& mask)$/;"	f	class:boost::asio::ip::address_v4	signature:(const address_v4& addr, const address_v4& mask)
boost::asio::ip::address_v4::bytes_type	/usr/include/boost/asio/ip/address_v4.hpp	/^  typedef array<unsigned char, 4> bytes_type;$/;"	t	class:boost::asio::ip::address_v4	access:public
boost::asio::ip::address_v4::from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL static address_v4 from_string($/;"	p	class:boost::asio::ip::address_v4	access:public	signature:( const char* str, boost::system::error_code& ec)
boost::asio::ip::address_v4::from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL static address_v4 from_string($/;"	p	class:boost::asio::ip::address_v4	access:public	signature:( const std::string& str, boost::system::error_code& ec)
boost::asio::ip::address_v4::from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL static address_v4 from_string(const char* str);$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:(const char* str)
boost::asio::ip::address_v4::from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL static address_v4 from_string(const std::string& str);$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:(const std::string& str)
boost::asio::ip::address_v4::from_string	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4 address_v4::from_string($/;"	f	class:boost::asio::ip::address_v4	signature:( const char* str, boost::system::error_code& ec)
boost::asio::ip::address_v4::from_string	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4 address_v4::from_string($/;"	f	class:boost::asio::ip::address_v4	signature:( const std::string& str, boost::system::error_code& ec)
boost::asio::ip::address_v4::from_string	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4 address_v4::from_string(const char* str)$/;"	f	class:boost::asio::ip::address_v4	signature:(const char* str)
boost::asio::ip::address_v4::from_string	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4 address_v4::from_string(const std::string& str)$/;"	f	class:boost::asio::ip::address_v4	signature:(const std::string& str)
boost::asio::ip::address_v4::is_class_a	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bool is_class_a() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::is_class_a	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^bool address_v4::is_class_a() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
boost::asio::ip::address_v4::is_class_b	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bool is_class_b() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::is_class_b	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^bool address_v4::is_class_b() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
boost::asio::ip::address_v4::is_class_c	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bool is_class_c() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::is_class_c	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^bool address_v4::is_class_c() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
boost::asio::ip::address_v4::is_loopback	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bool is_loopback() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::is_loopback	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^bool address_v4::is_loopback() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
boost::asio::ip::address_v4::is_multicast	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bool is_multicast() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::is_multicast	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^bool address_v4::is_multicast() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
boost::asio::ip::address_v4::is_unspecified	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bool is_unspecified() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::is_unspecified	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^bool address_v4::is_unspecified() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
boost::asio::ip::address_v4::loopback	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 loopback()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
boost::asio::ip::address_v4::netmask	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL static address_v4 netmask(const address_v4& addr);$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& addr)
boost::asio::ip::address_v4::netmask	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4 address_v4::netmask(const address_v4& addr)$/;"	f	class:boost::asio::ip::address_v4	signature:(const address_v4& addr)
boost::asio::ip::address_v4::operator !=	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator!=(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
boost::asio::ip::address_v4::operator <	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator<(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
boost::asio::ip::address_v4::operator <=	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator<=(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
boost::asio::ip::address_v4::operator =	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4& operator=(address_v4&& other)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(address_v4&& other)
boost::asio::ip::address_v4::operator =	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4& operator=(const address_v4& other)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& other)
boost::asio::ip::address_v4::operator ==	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator==(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
boost::asio::ip::address_v4::operator >	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator>(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
boost::asio::ip::address_v4::operator >=	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator>=(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
boost::asio::ip::address_v4::to_bytes	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bytes_type to_bytes() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::to_bytes	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4::bytes_type address_v4::to_bytes() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
boost::asio::ip::address_v4::to_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL std::string to_string() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::to_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:(boost::system::error_code& ec) const
boost::asio::ip::address_v4::to_string	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^std::string address_v4::to_string() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
boost::asio::ip::address_v4::to_string	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^std::string address_v4::to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::address_v4	signature:(boost::system::error_code& ec) const
boost::asio::ip::address_v4::to_ulong	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL unsigned long to_ulong() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::to_ulong	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^unsigned long address_v4::to_ulong() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
boost::asio::ip::address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^class address_v6$/;"	c	namespace:boost::asio::ip
boost::asio::ip::address_v6::addr_	/usr/include/boost/asio/ip/address_v6.hpp	/^  boost::asio::detail::in6_addr_type addr_;$/;"	m	class:boost::asio::ip::address_v6	access:private
boost::asio::ip::address_v6::address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL address_v6();$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:()
boost::asio::ip::address_v6::address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL address_v6(address_v6&& other);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(address_v6&& other)
boost::asio::ip::address_v6::address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL address_v6(const address_v6& other);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const address_v6& other)
boost::asio::ip::address_v6::address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL explicit address_v6(const bytes_type& bytes,$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const bytes_type& bytes, unsigned long scope_id = 0)
boost::asio::ip::address_v6::address_v6	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6::address_v6()$/;"	f	class:boost::asio::ip::address_v6	signature:()
boost::asio::ip::address_v6::address_v6	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6::address_v6(address_v6&& other)$/;"	f	class:boost::asio::ip::address_v6	signature:(address_v6&& other)
boost::asio::ip::address_v6::address_v6	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6::address_v6(const address_v6& other)$/;"	f	class:boost::asio::ip::address_v6	signature:(const address_v6& other)
boost::asio::ip::address_v6::address_v6	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6::address_v6(const address_v6::bytes_type& bytes,$/;"	f	class:boost::asio::ip::address_v6	signature:(const address_v6::bytes_type& bytes, unsigned long scope)
boost::asio::ip::address_v6::any	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 any()$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:()
boost::asio::ip::address_v6::bytes_type	/usr/include/boost/asio/ip/address_v6.hpp	/^  typedef array<unsigned char, 16> bytes_type;$/;"	t	class:boost::asio::ip::address_v6	access:public
boost::asio::ip::address_v6::from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 from_string($/;"	p	class:boost::asio::ip::address_v6	access:public	signature:( const char* str, boost::system::error_code& ec)
boost::asio::ip::address_v6::from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 from_string($/;"	p	class:boost::asio::ip::address_v6	access:public	signature:( const std::string& str, boost::system::error_code& ec)
boost::asio::ip::address_v6::from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 from_string(const char* str);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const char* str)
boost::asio::ip::address_v6::from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 from_string(const std::string& str);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const std::string& str)
boost::asio::ip::address_v6::from_string	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::from_string($/;"	f	class:boost::asio::ip::address_v6	signature:( const char* str, boost::system::error_code& ec)
boost::asio::ip::address_v6::from_string	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::from_string($/;"	f	class:boost::asio::ip::address_v6	signature:( const std::string& str, boost::system::error_code& ec)
boost::asio::ip::address_v6::from_string	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::from_string(const char* str)$/;"	f	class:boost::asio::ip::address_v6	signature:(const char* str)
boost::asio::ip::address_v6::from_string	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::from_string(const std::string& str)$/;"	f	class:boost::asio::ip::address_v6	signature:(const std::string& str)
boost::asio::ip::address_v6::is_link_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_link_local() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_link_local	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_link_local() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::is_loopback	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_loopback() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_loopback	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_loopback() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::is_multicast	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_multicast() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_multicast	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_multicast() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::is_multicast_global	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_multicast_global() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_multicast_global	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_multicast_global() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::is_multicast_link_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_multicast_link_local() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_multicast_link_local	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_multicast_link_local() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::is_multicast_node_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_multicast_node_local() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_multicast_node_local	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_multicast_node_local() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::is_multicast_org_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_multicast_org_local() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_multicast_org_local	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_multicast_org_local() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::is_multicast_site_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_multicast_site_local() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_multicast_site_local	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_multicast_site_local() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::is_site_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_site_local() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_site_local	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_site_local() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::is_unspecified	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_unspecified() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_unspecified	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_unspecified() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::is_v4_compatible	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_v4_compatible() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_v4_compatible	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_v4_compatible() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::is_v4_mapped	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_v4_mapped() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_v4_mapped	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_v4_mapped() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::loopback	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 loopback();$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:()
boost::asio::ip::address_v6::loopback	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::loopback()$/;"	f	class:boost::asio::ip::address_v6	signature:()
boost::asio::ip::address_v6::operator !=	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator!=(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
boost::asio::ip::address_v6::operator <	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL friend bool operator<($/;"	p	class:boost::asio::ip::address_v6	access:friend	signature:( const address_v6& a1, const address_v6& a2)
boost::asio::ip::address_v6::operator <=	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator<=(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
boost::asio::ip::address_v6::operator =	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL address_v6& operator=(address_v6&& other);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(address_v6&& other)
boost::asio::ip::address_v6::operator =	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL address_v6& operator=(const address_v6& other);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const address_v6& other)
boost::asio::ip::address_v6::operator =	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6& address_v6::operator=(address_v6&& other)$/;"	f	class:boost::asio::ip::address_v6	signature:(address_v6&& other)
boost::asio::ip::address_v6::operator =	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6& address_v6::operator=(const address_v6& other)$/;"	f	class:boost::asio::ip::address_v6	signature:(const address_v6& other)
boost::asio::ip::address_v6::operator ==	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL friend bool operator==($/;"	p	class:boost::asio::ip::address_v6	access:friend	signature:( const address_v6& a1, const address_v6& a2)
boost::asio::ip::address_v6::operator >	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator>(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
boost::asio::ip::address_v6::operator >=	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator>=(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
boost::asio::ip::address_v6::scope_id	/usr/include/boost/asio/ip/address_v6.hpp	/^  unsigned long scope_id() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::scope_id	/usr/include/boost/asio/ip/address_v6.hpp	/^  void scope_id(unsigned long id)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(unsigned long id)
boost::asio::ip::address_v6::scope_id_	/usr/include/boost/asio/ip/address_v6.hpp	/^  unsigned long scope_id_;$/;"	m	class:boost::asio::ip::address_v6	access:private
boost::asio::ip::address_v6::to_bytes	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bytes_type to_bytes() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::to_bytes	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6::bytes_type address_v6::to_bytes() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::to_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL std::string to_string() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::to_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(boost::system::error_code& ec) const
boost::asio::ip::address_v6::to_string	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^std::string address_v6::to_string() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::to_string	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^std::string address_v6::to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::address_v6	signature:(boost::system::error_code& ec) const
boost::asio::ip::address_v6::to_v4	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL address_v4 to_v4() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::to_v4	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v4 address_v6::to_v4() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
boost::asio::ip::address_v6::v4_compatible	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 v4_compatible(const address_v4& addr);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const address_v4& addr)
boost::asio::ip::address_v6::v4_compatible	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::v4_compatible(const address_v4& addr)$/;"	f	class:boost::asio::ip::address_v6	signature:(const address_v4& addr)
boost::asio::ip::address_v6::v4_mapped	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 v4_mapped(const address_v4& addr);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const address_v4& addr)
boost::asio::ip::address_v6::v4_mapped	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::v4_mapped(const address_v4& addr)$/;"	f	class:boost::asio::ip::address_v6	signature:(const address_v4& addr)
boost::asio::ip::basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^class basic_endpoint$/;"	c	namespace:boost::asio::ip
boost::asio::ip::basic_endpoint::address	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  boost::asio::ip::address address() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
boost::asio::ip::basic_endpoint::address	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  void address(const boost::asio::ip::address& addr)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const boost::asio::ip::address& addr)
boost::asio::ip::basic_endpoint::basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint()$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:()
boost::asio::ip::basic_endpoint::basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(basic_endpoint&& other)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(basic_endpoint&& other)
boost::asio::ip::basic_endpoint::basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(const InternetProtocol& internet_protocol,$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const InternetProtocol& internet_protocol, unsigned short port_num)
boost::asio::ip::basic_endpoint::basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(const basic_endpoint& other)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const basic_endpoint& other)
boost::asio::ip::basic_endpoint::basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(const boost::asio::ip::address& addr, unsigned short port_num)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const boost::asio::ip::address& addr, unsigned short port_num)
boost::asio::ip::basic_endpoint::capacity	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
boost::asio::ip::basic_endpoint::data	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  const data_type* data() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
boost::asio::ip::basic_endpoint::data	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  data_type* data()$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:()
boost::asio::ip::basic_endpoint::data_type	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  typedef boost::asio::detail::socket_addr_type data_type;$/;"	t	class:boost::asio::ip::basic_endpoint	access:public
boost::asio::ip::basic_endpoint::data_type	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  typedef implementation_defined data_type;$/;"	t	class:boost::asio::ip::basic_endpoint	access:public
boost::asio::ip::basic_endpoint::impl_	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  boost::asio::ip::detail::endpoint impl_;$/;"	m	class:boost::asio::ip::basic_endpoint	access:private
boost::asio::ip::basic_endpoint::operator !=	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator!=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
boost::asio::ip::basic_endpoint::operator <	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator<(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
boost::asio::ip::basic_endpoint::operator <=	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator<=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
boost::asio::ip::basic_endpoint::operator =	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint& operator=(basic_endpoint&& other)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(basic_endpoint&& other)
boost::asio::ip::basic_endpoint::operator =	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint& operator=(const basic_endpoint& other)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const basic_endpoint& other)
boost::asio::ip::basic_endpoint::operator ==	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator==(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
boost::asio::ip::basic_endpoint::operator >	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator>(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
boost::asio::ip::basic_endpoint::operator >=	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator>=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
boost::asio::ip::basic_endpoint::port	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  unsigned short port() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
boost::asio::ip::basic_endpoint::port	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  void port(unsigned short port_num)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(unsigned short port_num)
boost::asio::ip::basic_endpoint::protocol	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  protocol_type protocol() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
boost::asio::ip::basic_endpoint::protocol_type	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_endpoint	access:public
boost::asio::ip::basic_endpoint::resize	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  void resize(std::size_t new_size)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(std::size_t new_size)
boost::asio::ip::basic_endpoint::size	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
boost::asio::ip::basic_resolver	/usr/include/boost/asio/ip/basic_resolver.hpp	/^class basic_resolver$/;"	c	namespace:boost::asio::ip	inherits:basic_io_object
boost::asio::ip::basic_resolver::async_resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  void async_resolve(const endpoint_type& e,$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const endpoint_type& e, BOOST_ASIO_MOVE_ARG(ResolveHandler) handler)
boost::asio::ip::basic_resolver::async_resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  void async_resolve(const query& q,$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const query& q, BOOST_ASIO_MOVE_ARG(ResolveHandler) handler)
boost::asio::ip::basic_resolver::basic_resolver	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  explicit basic_resolver(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ip::basic_resolver::cancel	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  void cancel()$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:()
boost::asio::ip::basic_resolver::endpoint_type	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
boost::asio::ip::basic_resolver::iterator	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef basic_resolver_iterator<InternetProtocol> iterator;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
boost::asio::ip::basic_resolver::protocol_type	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
boost::asio::ip::basic_resolver::query	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef basic_resolver_query<InternetProtocol> query;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
boost::asio::ip::basic_resolver::resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const endpoint_type& e)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const endpoint_type& e)
boost::asio::ip::basic_resolver::resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const endpoint_type& e, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const endpoint_type& e, boost::system::error_code& ec)
boost::asio::ip::basic_resolver::resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const query& q)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const query& q)
boost::asio::ip::basic_resolver::resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const query& q, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const query& q, boost::system::error_code& ec)
boost::asio::ip::basic_resolver_entry	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^class basic_resolver_entry$/;"	c	namespace:boost::asio::ip
boost::asio::ip::basic_resolver_entry::basic_resolver_entry	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  basic_resolver_entry()$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:()
boost::asio::ip::basic_resolver_entry::basic_resolver_entry	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  basic_resolver_entry(const endpoint_type& ep,$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:(const endpoint_type& ep, const std::string& host, const std::string& service)
boost::asio::ip::basic_resolver_entry::endpoint	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  endpoint_type endpoint() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
boost::asio::ip::basic_resolver_entry::endpoint_	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  endpoint_type endpoint_;$/;"	m	class:boost::asio::ip::basic_resolver_entry	access:private
boost::asio::ip::basic_resolver_entry::endpoint_type	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:boost::asio::ip::basic_resolver_entry	access:public
boost::asio::ip::basic_resolver_entry::host_name	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string host_name() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
boost::asio::ip::basic_resolver_entry::host_name_	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string host_name_;$/;"	m	class:boost::asio::ip::basic_resolver_entry	access:private
boost::asio::ip::basic_resolver_entry::operator endpoint_type	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  operator endpoint_type() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
boost::asio::ip::basic_resolver_entry::protocol_type	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_resolver_entry	access:public
boost::asio::ip::basic_resolver_entry::service_name	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string service_name() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
boost::asio::ip::basic_resolver_entry::service_name_	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string service_name_;$/;"	m	class:boost::asio::ip::basic_resolver_entry	access:private
boost::asio::ip::basic_resolver_iterator	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^class basic_resolver_iterator$/;"	c	namespace:boost::asio::ip
boost::asio::ip::basic_resolver_iterator::basic_resolver_iterator	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  basic_resolver_iterator()$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:()
boost::asio::ip::basic_resolver_iterator::create	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  static basic_resolver_iterator create($/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:( boost::asio::detail::addrinfo_type* address_info, const std::string& host_name, const std::string& service_name)
boost::asio::ip::basic_resolver_iterator::create	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  static basic_resolver_iterator create($/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:( const typename InternetProtocol::endpoint& endpoint, const std::string& host_name, const std::string& service_name)
boost::asio::ip::basic_resolver_iterator::dereference	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  const basic_resolver_entry<InternetProtocol>& dereference() const$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:private	signature:() const
boost::asio::ip::basic_resolver_iterator::difference_type	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:public
boost::asio::ip::basic_resolver_iterator::equal	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  bool equal(const basic_resolver_iterator& other) const$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:private	signature:(const basic_resolver_iterator& other) const
boost::asio::ip::basic_resolver_iterator::increment	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  void increment()$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:private	signature:()
boost::asio::ip::basic_resolver_iterator::index_	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  std::size_t index_;$/;"	m	class:boost::asio::ip::basic_resolver_iterator	access:private
boost::asio::ip::basic_resolver_iterator::iterator_category	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef std::forward_iterator_tag iterator_category;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:public
boost::asio::ip::basic_resolver_iterator::operator !=	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  friend bool operator!=(const basic_resolver_iterator& a,$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:friend	signature:(const basic_resolver_iterator& a, const basic_resolver_iterator& b)
boost::asio::ip::basic_resolver_iterator::operator *	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  const basic_resolver_entry<InternetProtocol>& operator*() const$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:() const
boost::asio::ip::basic_resolver_iterator::operator ++	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  basic_resolver_iterator operator++(int)$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:(int)
boost::asio::ip::basic_resolver_iterator::operator ++	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  basic_resolver_iterator& operator++()$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:()
boost::asio::ip::basic_resolver_iterator::operator ->	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  const basic_resolver_entry<InternetProtocol>* operator->() const$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:() const
boost::asio::ip::basic_resolver_iterator::operator ==	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  friend bool operator==(const basic_resolver_iterator& a,$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:friend	signature:(const basic_resolver_iterator& a, const basic_resolver_iterator& b)
boost::asio::ip::basic_resolver_iterator::pointer	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef const basic_resolver_entry<InternetProtocol>* pointer;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:public
boost::asio::ip::basic_resolver_iterator::reference	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef const basic_resolver_entry<InternetProtocol>& reference;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:public
boost::asio::ip::basic_resolver_iterator::value_type	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef basic_resolver_entry<InternetProtocol> value_type;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:public
boost::asio::ip::basic_resolver_iterator::values_	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  boost::asio::detail::shared_ptr<values_type> values_;$/;"	m	class:boost::asio::ip::basic_resolver_iterator	access:private
boost::asio::ip::basic_resolver_iterator::values_type	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef std::vector<basic_resolver_entry<InternetProtocol> > values_type;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:private
boost::asio::ip::basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^class basic_resolver_query$/;"	c	namespace:boost::asio::ip	inherits:resolver_query_base
boost::asio::ip::basic_resolver_query::basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const protocol_type& protocol,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const protocol_type& protocol, const std::string& host, const std::string& service, resolver_query_base::flags resolve_flags = address_configured)
boost::asio::ip::basic_resolver_query::basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const protocol_type& protocol,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const protocol_type& protocol, const std::string& service, resolver_query_base::flags resolve_flags = passive | address_configured)
boost::asio::ip::basic_resolver_query::basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const std::string& host, const std::string& service,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const std::string& host, const std::string& service, resolver_query_base::flags resolve_flags = address_configured)
boost::asio::ip::basic_resolver_query::basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const std::string& service,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const std::string& service, resolver_query_base::flags resolve_flags = passive | address_configured)
boost::asio::ip::basic_resolver_query::hints	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  const boost::asio::detail::addrinfo_type& hints() const$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:() const
boost::asio::ip::basic_resolver_query::hints_	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  boost::asio::detail::addrinfo_type hints_;$/;"	m	class:boost::asio::ip::basic_resolver_query	access:private
boost::asio::ip::basic_resolver_query::host_name	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string host_name() const$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:() const
boost::asio::ip::basic_resolver_query::host_name_	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string host_name_;$/;"	m	class:boost::asio::ip::basic_resolver_query	access:private
boost::asio::ip::basic_resolver_query::protocol_type	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_resolver_query	access:public
boost::asio::ip::basic_resolver_query::service_name	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string service_name() const$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:() const
boost::asio::ip::basic_resolver_query::service_name_	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string service_name_;$/;"	m	class:boost::asio::ip::basic_resolver_query	access:private
boost::asio::ip::detail	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ip
boost::asio::ip::detail	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^namespace detail {$/;"	n	namespace:boost::asio::ip	file:
boost::asio::ip::detail	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ip
boost::asio::ip::detail::endpoint	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^class endpoint$/;"	c	namespace:boost::asio::ip::detail
boost::asio::ip::detail::endpoint::address	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL boost::asio::ip::address address() const;$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:() const
boost::asio::ip::detail::endpoint::address	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void address(const boost::asio::ip::address& addr);$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:(const boost::asio::ip::address& addr)
boost::asio::ip::detail::endpoint::address	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^boost::asio::ip::address endpoint::address() const$/;"	f	class:boost::asio::ip::detail::endpoint	signature:() const
boost::asio::ip::detail::endpoint::address	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^void endpoint::address(const boost::asio::ip::address& addr)$/;"	f	class:boost::asio::ip::detail::endpoint	signature:(const boost::asio::ip::address& addr)
boost::asio::ip::detail::endpoint::capacity	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:() const
boost::asio::ip::detail::endpoint::data	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  boost::asio::detail::socket_addr_type* data()$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:()
boost::asio::ip::detail::endpoint::data	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  const boost::asio::detail::socket_addr_type* data() const$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:() const
boost::asio::ip::detail::endpoint::data_	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  } data_;$/;"	m	class:boost::asio::ip::detail::endpoint	typeref:union:boost::asio::ip::detail::endpoint::data_union	access:private
boost::asio::ip::detail::endpoint::data_union	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  union data_union$/;"	u	class:boost::asio::ip::detail::endpoint	access:private
boost::asio::ip::detail::endpoint::data_union::base	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^    boost::asio::detail::socket_addr_type base;$/;"	m	union:boost::asio::ip::detail::endpoint::data_union	access:public
boost::asio::ip::detail::endpoint::data_union::v4	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^    boost::asio::detail::sockaddr_in4_type v4;$/;"	m	union:boost::asio::ip::detail::endpoint::data_union	access:public
boost::asio::ip::detail::endpoint::data_union::v6	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^    boost::asio::detail::sockaddr_in6_type v6;$/;"	m	union:boost::asio::ip::detail::endpoint::data_union	access:public
boost::asio::ip::detail::endpoint::endpoint	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL endpoint();$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:()
boost::asio::ip::detail::endpoint::endpoint	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL endpoint(const boost::asio::ip::address& addr,$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:(const boost::asio::ip::address& addr, unsigned short port_num)
boost::asio::ip::detail::endpoint::endpoint	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL endpoint(int family, unsigned short port_num);$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:(int family, unsigned short port_num)
boost::asio::ip::detail::endpoint::endpoint	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  endpoint(const endpoint& other)$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:(const endpoint& other)
boost::asio::ip::detail::endpoint::endpoint	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^endpoint::endpoint()$/;"	f	class:boost::asio::ip::detail::endpoint	signature:()
boost::asio::ip::detail::endpoint::endpoint	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^endpoint::endpoint(const boost::asio::ip::address& addr,$/;"	f	class:boost::asio::ip::detail::endpoint	signature:(const boost::asio::ip::address& addr, unsigned short port_num)
boost::asio::ip::detail::endpoint::endpoint	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^endpoint::endpoint(int family, unsigned short port_num)$/;"	f	class:boost::asio::ip::detail::endpoint	signature:(int family, unsigned short port_num)
boost::asio::ip::detail::endpoint::is_v4	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  bool is_v4() const$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:() const
boost::asio::ip::detail::endpoint::operator <	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL friend bool operator<($/;"	p	class:boost::asio::ip::detail::endpoint	access:friend	signature:( const endpoint& e1, const endpoint& e2)
boost::asio::ip::detail::endpoint::operator =	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  endpoint& operator=(const endpoint& other)$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:(const endpoint& other)
boost::asio::ip::detail::endpoint::operator ==	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL friend bool operator==($/;"	p	class:boost::asio::ip::detail::endpoint	access:friend	signature:( const endpoint& e1, const endpoint& e2)
boost::asio::ip::detail::endpoint::port	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL unsigned short port() const;$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:() const
boost::asio::ip::detail::endpoint::port	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void port(unsigned short port_num);$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:(unsigned short port_num)
boost::asio::ip::detail::endpoint::port	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^unsigned short endpoint::port() const$/;"	f	class:boost::asio::ip::detail::endpoint	signature:() const
boost::asio::ip::detail::endpoint::port	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^void endpoint::port(unsigned short port_num)$/;"	f	class:boost::asio::ip::detail::endpoint	signature:(unsigned short port_num)
boost::asio::ip::detail::endpoint::resize	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void resize(std::size_t new_size);$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:(std::size_t new_size)
boost::asio::ip::detail::endpoint::resize	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^void endpoint::resize(std::size_t new_size)$/;"	f	class:boost::asio::ip::detail::endpoint	signature:(std::size_t new_size)
boost::asio::ip::detail::endpoint::size	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:() const
boost::asio::ip::detail::endpoint::to_string	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:(boost::system::error_code& ec) const
boost::asio::ip::detail::endpoint::to_string	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^std::string endpoint::to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::detail::endpoint	signature:(boost::system::error_code& ec) const
boost::asio::ip::detail::operator <	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^bool operator<(const endpoint& e1, const endpoint& e2)$/;"	f	namespace:boost::asio::ip::detail	signature:(const endpoint& e1, const endpoint& e2)
boost::asio::ip::detail::operator ==	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^bool operator==(const endpoint& e1, const endpoint& e2)$/;"	f	namespace:boost::asio::ip::detail	signature:(const endpoint& e1, const endpoint& e2)
boost::asio::ip::detail::socket_option	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace socket_option {$/;"	n	namespace:boost::asio::ip::detail
boost::asio::ip::detail::socket_option::multicast_enable_loopback	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class multicast_enable_loopback$/;"	c	namespace:boost::asio::ip::detail::socket_option
boost::asio::ip::detail::socket_option::multicast_enable_loopback::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_enable_loopback::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void* data(const Protocol& protocol)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol)
boost::asio::ip::detail::socket_option::multicast_enable_loopback::ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv4_value_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:private
boost::asio::ip::detail::socket_option::multicast_enable_loopback::ipv4_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef unsigned char ipv4_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public
boost::asio::ip::detail::socket_option::multicast_enable_loopback::ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv6_value_type ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:private
boost::asio::ip::detail::socket_option::multicast_enable_loopback::ipv6_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef unsigned char ipv6_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public
boost::asio::ip::detail::socket_option::multicast_enable_loopback::level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_enable_loopback::multicast_enable_loopback	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_enable_loopback(bool v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(bool v)
boost::asio::ip::detail::socket_option::multicast_enable_loopback::multicast_enable_loopback	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_enable_loopback()$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:()
boost::asio::ip::detail::socket_option::multicast_enable_loopback::name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_enable_loopback::operator !	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  bool operator!() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:() const
boost::asio::ip::detail::socket_option::multicast_enable_loopback::operator =	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_enable_loopback& operator=(bool v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(bool v)
boost::asio::ip::detail::socket_option::multicast_enable_loopback::operator bool	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  operator bool() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:() const
boost::asio::ip::detail::socket_option::multicast_enable_loopback::resize	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void resize(const Protocol& protocol, std::size_t s)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol, std::size_t s)
boost::asio::ip::detail::socket_option::multicast_enable_loopback::size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_enable_loopback::value	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  bool value() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:() const
boost::asio::ip::detail::socket_option::multicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class multicast_hops$/;"	c	namespace:boost::asio::ip::detail::socket_option
boost::asio::ip::detail::socket_option::multicast_hops::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_hops::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void* data(const Protocol& protocol)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol)
boost::asio::ip::detail::socket_option::multicast_hops::ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv4_value_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_hops	access:private
boost::asio::ip::detail::socket_option::multicast_hops::ipv4_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef int ipv4_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public
boost::asio::ip::detail::socket_option::multicast_hops::ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv6_value_type ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_hops	access:private
boost::asio::ip::detail::socket_option::multicast_hops::ipv6_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef int ipv6_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public
boost::asio::ip::detail::socket_option::multicast_hops::level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_hops::multicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_hops(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(int v)
boost::asio::ip::detail::socket_option::multicast_hops::multicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_hops()$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:()
boost::asio::ip::detail::socket_option::multicast_hops::name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_hops::operator =	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_hops& operator=(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(int v)
boost::asio::ip::detail::socket_option::multicast_hops::resize	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void resize(const Protocol& protocol, std::size_t s)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol, std::size_t s)
boost::asio::ip::detail::socket_option::multicast_hops::size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_hops::value	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int value() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:() const
boost::asio::ip::detail::socket_option::multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class multicast_request$/;"	c	namespace:boost::asio::ip::detail::socket_option
boost::asio::ip::detail::socket_option::multicast_request::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_request::ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  boost::asio::detail::in4_mreq_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_request	access:private
boost::asio::ip::detail::socket_option::multicast_request::ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  boost::asio::detail::in6_mreq_type ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_request	access:private
boost::asio::ip::detail::socket_option::multicast_request::level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_request::multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_request($/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:( const boost::asio::ip::address_v4& multicast_address, const boost::asio::ip::address_v4& network_interface = boost::asio::ip::address_v4::any())
boost::asio::ip::detail::socket_option::multicast_request::multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_request($/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:( const boost::asio::ip::address_v6& multicast_address, unsigned long network_interface = 0)
boost::asio::ip::detail::socket_option::multicast_request::multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_request(const boost::asio::ip::address& multicast_address)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const boost::asio::ip::address& multicast_address)
boost::asio::ip::detail::socket_option::multicast_request::multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_request()$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:()
boost::asio::ip::detail::socket_option::multicast_request::name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_request::size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class network_interface$/;"	c	namespace:boost::asio::ip::detail::socket_option
boost::asio::ip::detail::socket_option::network_interface::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::network_interface::ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  boost::asio::detail::in4_addr_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::network_interface	access:private
boost::asio::ip::detail::socket_option::network_interface::ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  unsigned int ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::network_interface	access:private
boost::asio::ip::detail::socket_option::network_interface::level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::network_interface::name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::network_interface::network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit network_interface(const boost::asio::ip::address_v4& ipv4_interface)$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const boost::asio::ip::address_v4& ipv4_interface)
boost::asio::ip::detail::socket_option::network_interface::network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit network_interface(unsigned int ipv6_interface)$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(unsigned int ipv6_interface)
boost::asio::ip::detail::socket_option::network_interface::network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  network_interface()$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:()
boost::asio::ip::detail::socket_option::network_interface::size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::unicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class unicast_hops$/;"	c	namespace:boost::asio::ip::detail::socket_option
boost::asio::ip::detail::socket_option::unicast_hops::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&) const
boost::asio::ip::detail::socket_option::unicast_hops::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&)
boost::asio::ip::detail::socket_option::unicast_hops::level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::unicast_hops::name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::unicast_hops::operator =	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  unicast_hops& operator=(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(int v)
boost::asio::ip::detail::socket_option::unicast_hops::resize	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&, std::size_t s)
boost::asio::ip::detail::socket_option::unicast_hops::size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&) const
boost::asio::ip::detail::socket_option::unicast_hops::unicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit unicast_hops(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(int v)
boost::asio::ip::detail::socket_option::unicast_hops::unicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  unicast_hops()$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:()
boost::asio::ip::detail::socket_option::unicast_hops::value	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int value() const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:() const
boost::asio::ip::detail::socket_option::unicast_hops::value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int value_;$/;"	m	class:boost::asio::ip::detail::socket_option::unicast_hops	access:private
boost::asio::ip::host_name	/usr/include/boost/asio/ip/host_name.hpp	/^BOOST_ASIO_DECL std::string host_name();$/;"	p	namespace:boost::asio::ip	signature:()
boost::asio::ip::host_name	/usr/include/boost/asio/ip/host_name.hpp	/^BOOST_ASIO_DECL std::string host_name(boost::system::error_code& ec);$/;"	p	namespace:boost::asio::ip	signature:(boost::system::error_code& ec)
boost::asio::ip::host_name	/usr/include/boost/asio/ip/impl/host_name.ipp	/^std::string host_name()$/;"	f	namespace:boost::asio::ip	signature:()
boost::asio::ip::host_name	/usr/include/boost/asio/ip/impl/host_name.ipp	/^std::string host_name(boost::system::error_code& ec)$/;"	f	namespace:boost::asio::ip	signature:(boost::system::error_code& ec)
boost::asio::ip::icmp	/usr/include/boost/asio/ip/icmp.hpp	/^class icmp$/;"	c	namespace:boost::asio::ip
boost::asio::ip::icmp::endpoint	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_endpoint<icmp> endpoint;$/;"	t	class:boost::asio::ip::icmp	access:public
boost::asio::ip::icmp::family	/usr/include/boost/asio/ip/icmp.hpp	/^  int family() const$/;"	f	class:boost::asio::ip::icmp	access:public	signature:() const
boost::asio::ip::icmp::family_	/usr/include/boost/asio/ip/icmp.hpp	/^  int family_;$/;"	m	class:boost::asio::ip::icmp	access:private
boost::asio::ip::icmp::icmp	/usr/include/boost/asio/ip/icmp.hpp	/^  explicit icmp(int protocol_id, int protocol_family)$/;"	f	class:boost::asio::ip::icmp	access:private	signature:(int protocol_id, int protocol_family)
boost::asio::ip::icmp::operator !=	/usr/include/boost/asio/ip/icmp.hpp	/^  friend bool operator!=(const icmp& p1, const icmp& p2)$/;"	f	class:boost::asio::ip::icmp	access:friend	signature:(const icmp& p1, const icmp& p2)
boost::asio::ip::icmp::operator ==	/usr/include/boost/asio/ip/icmp.hpp	/^  friend bool operator==(const icmp& p1, const icmp& p2)$/;"	f	class:boost::asio::ip::icmp	access:friend	signature:(const icmp& p1, const icmp& p2)
boost::asio::ip::icmp::protocol	/usr/include/boost/asio/ip/icmp.hpp	/^  int protocol() const$/;"	f	class:boost::asio::ip::icmp	access:public	signature:() const
boost::asio::ip::icmp::protocol_	/usr/include/boost/asio/ip/icmp.hpp	/^  int protocol_;$/;"	m	class:boost::asio::ip::icmp	access:private
boost::asio::ip::icmp::resolver	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_resolver<icmp> resolver;$/;"	t	class:boost::asio::ip::icmp	access:public
boost::asio::ip::icmp::socket	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_raw_socket<icmp> socket;$/;"	t	class:boost::asio::ip::icmp	access:public
boost::asio::ip::icmp::type	/usr/include/boost/asio/ip/icmp.hpp	/^  int type() const$/;"	f	class:boost::asio::ip::icmp	access:public	signature:() const
boost::asio::ip::icmp::v4	/usr/include/boost/asio/ip/icmp.hpp	/^  static icmp v4()$/;"	f	class:boost::asio::ip::icmp	access:public	signature:()
boost::asio::ip::icmp::v6	/usr/include/boost/asio/ip/icmp.hpp	/^  static icmp v6()$/;"	f	class:boost::asio::ip::icmp	access:public	signature:()
boost::asio::ip::multicast	/usr/include/boost/asio/ip/multicast.hpp	/^namespace multicast {$/;"	n	namespace:boost::asio::ip
boost::asio::ip::multicast::enable_loopback	/usr/include/boost/asio/ip/multicast.hpp	/^  enable_loopback;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::enable_loopback	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined enable_loopback;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::hops	/usr/include/boost/asio/ip/multicast.hpp	/^  IPPROTO_IP, IP_MULTICAST_TTL, IPPROTO_IPV6, IPV6_MULTICAST_HOPS> hops;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::hops	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined hops;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::join_group	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined join_group;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::leave_group	/usr/include/boost/asio/ip/multicast.hpp	/^  IPPROTO_IP, IP_DROP_MEMBERSHIP, IPPROTO_IPV6, IPV6_LEAVE_GROUP> leave_group;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::leave_group	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined leave_group;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::outbound_interface	/usr/include/boost/asio/ip/multicast.hpp	/^  outbound_interface;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::outbound_interface	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined outbound_interface;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::operator <	/usr/include/boost/asio/ip/impl/address.ipp	/^bool operator<(const address& a1, const address& a2)$/;"	f	namespace:boost::asio::ip	signature:(const address& a1, const address& a2)
boost::asio::ip::operator <	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool operator<(const address_v6& a1, const address_v6& a2)$/;"	f	namespace:boost::asio::ip	signature:(const address_v6& a1, const address_v6& a2)
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/address.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	p	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address& addr)
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/address_v4.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	p	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address_v4& addr)
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/address_v6.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	p	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address_v6& addr)
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	p	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const basic_endpoint<InternetProtocol>& endpoint)
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/impl/address.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address& addr)
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/impl/address_v4.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address_v4& addr)
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/impl/address_v6.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address_v6& addr)
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/impl/basic_endpoint.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const basic_endpoint<InternetProtocol>& endpoint)
boost::asio::ip::operator ==	/usr/include/boost/asio/ip/impl/address.ipp	/^bool operator==(const address& a1, const address& a2)$/;"	f	namespace:boost::asio::ip	signature:(const address& a1, const address& a2)
boost::asio::ip::operator ==	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool operator==(const address_v6& a1, const address_v6& a2)$/;"	f	namespace:boost::asio::ip	signature:(const address_v6& a1, const address_v6& a2)
boost::asio::ip::resolver_query_base	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^class resolver_query_base$/;"	c	namespace:boost::asio::ip
boost::asio::ip::resolver_query_base::address_configured	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags address_configured = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::all_matching	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags all_matching = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::canonical_name	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags canonical_name = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::dummy_	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::ip::resolver_query_base	access:private
boost::asio::ip::resolver_query_base::flags	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  typedef unspecified flags;$/;"	t	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::numeric_host	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags numeric_host = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::numeric_service	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags numeric_service = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::passive	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags passive = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::v4_mapped	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags v4_mapped = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::~resolver_query_base	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  ~resolver_query_base()$/;"	f	class:boost::asio::ip::resolver_query_base	access:protected	signature:()
boost::asio::ip::resolver_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^class resolver_service$/;"	c	namespace:boost::asio::ip	inherits:boost::asio::io_service::service
boost::asio::ip::resolver_service::async_resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void async_resolve(implementation_type& impl, const endpoint_type& endpoint,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, BOOST_ASIO_MOVE_ARG(ResolveHandler) handler)
boost::asio::ip::resolver_service::async_resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void async_resolve(implementation_type& impl, const query_type& query,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const query_type& query, BOOST_ASIO_MOVE_ARG(ResolveHandler) handler)
boost::asio::ip::resolver_service::cancel	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void cancel(implementation_type& impl)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl)
boost::asio::ip::resolver_service::construct	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl)
boost::asio::ip::resolver_service::destroy	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl)
boost::asio::ip::resolver_service::endpoint_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::fork_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void fork_service(boost::asio::io_service::fork_event event)$/;"	f	class:boost::asio::ip::resolver_service	access:private	signature:(boost::asio::io_service::fork_event event)
boost::asio::ip::resolver_service::id	/usr/include/boost/asio/ip/resolver_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::implementation_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::implementation_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::iterator_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef basic_resolver_iterator<InternetProtocol> iterator_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::protocol_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::query_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef basic_resolver_query<InternetProtocol> query_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  iterator_type resolve(implementation_type& impl, const query_type& query,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const query_type& query, boost::system::error_code& ec)
boost::asio::ip::resolver_service::resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  iterator_type resolve(implementation_type& impl,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::ip::resolver_service::resolver_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^  explicit resolver_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ip::resolver_service::service_impl_	/usr/include/boost/asio/ip/resolver_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::ip::resolver_service	access:private
boost::asio::ip::resolver_service::service_impl_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^    service_impl_type;$/;"	t	class:boost::asio::ip::resolver_service	access:private
boost::asio::ip::resolver_service::shutdown_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ip::resolver_service	access:private	signature:()
boost::asio::ip::tcp	/usr/include/boost/asio/ip/tcp.hpp	/^class tcp$/;"	c	namespace:boost::asio::ip
boost::asio::ip::tcp::acceptor	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_socket_acceptor<tcp> acceptor;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::endpoint	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_endpoint<tcp> endpoint;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::family	/usr/include/boost/asio/ip/tcp.hpp	/^  int family() const$/;"	f	class:boost::asio::ip::tcp	access:public	signature:() const
boost::asio::ip::tcp::family_	/usr/include/boost/asio/ip/tcp.hpp	/^  int family_;$/;"	m	class:boost::asio::ip::tcp	access:private
boost::asio::ip::tcp::iostream	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_socket_iostream<tcp> iostream;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::no_delay	/usr/include/boost/asio/ip/tcp.hpp	/^    IPPROTO_TCP, TCP_NODELAY> no_delay;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::no_delay	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef implementation_defined no_delay;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::operator !=	/usr/include/boost/asio/ip/tcp.hpp	/^  friend bool operator!=(const tcp& p1, const tcp& p2)$/;"	f	class:boost::asio::ip::tcp	access:friend	signature:(const tcp& p1, const tcp& p2)
boost::asio::ip::tcp::operator ==	/usr/include/boost/asio/ip/tcp.hpp	/^  friend bool operator==(const tcp& p1, const tcp& p2)$/;"	f	class:boost::asio::ip::tcp	access:friend	signature:(const tcp& p1, const tcp& p2)
boost::asio::ip::tcp::protocol	/usr/include/boost/asio/ip/tcp.hpp	/^  int protocol() const$/;"	f	class:boost::asio::ip::tcp	access:public	signature:() const
boost::asio::ip::tcp::resolver	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_resolver<tcp> resolver;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::socket	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_stream_socket<tcp> socket;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::tcp	/usr/include/boost/asio/ip/tcp.hpp	/^  explicit tcp(int protocol_family)$/;"	f	class:boost::asio::ip::tcp	access:private	signature:(int protocol_family)
boost::asio::ip::tcp::type	/usr/include/boost/asio/ip/tcp.hpp	/^  int type() const$/;"	f	class:boost::asio::ip::tcp	access:public	signature:() const
boost::asio::ip::tcp::v4	/usr/include/boost/asio/ip/tcp.hpp	/^  static tcp v4()$/;"	f	class:boost::asio::ip::tcp	access:public	signature:()
boost::asio::ip::tcp::v6	/usr/include/boost/asio/ip/tcp.hpp	/^  static tcp v6()$/;"	f	class:boost::asio::ip::tcp	access:public	signature:()
boost::asio::ip::udp	/usr/include/boost/asio/ip/udp.hpp	/^class udp$/;"	c	namespace:boost::asio::ip
boost::asio::ip::udp::endpoint	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_endpoint<udp> endpoint;$/;"	t	class:boost::asio::ip::udp	access:public
boost::asio::ip::udp::family	/usr/include/boost/asio/ip/udp.hpp	/^  int family() const$/;"	f	class:boost::asio::ip::udp	access:public	signature:() const
boost::asio::ip::udp::family_	/usr/include/boost/asio/ip/udp.hpp	/^  int family_;$/;"	m	class:boost::asio::ip::udp	access:private
boost::asio::ip::udp::operator !=	/usr/include/boost/asio/ip/udp.hpp	/^  friend bool operator!=(const udp& p1, const udp& p2)$/;"	f	class:boost::asio::ip::udp	access:friend	signature:(const udp& p1, const udp& p2)
boost::asio::ip::udp::operator ==	/usr/include/boost/asio/ip/udp.hpp	/^  friend bool operator==(const udp& p1, const udp& p2)$/;"	f	class:boost::asio::ip::udp	access:friend	signature:(const udp& p1, const udp& p2)
boost::asio::ip::udp::protocol	/usr/include/boost/asio/ip/udp.hpp	/^  int protocol() const$/;"	f	class:boost::asio::ip::udp	access:public	signature:() const
boost::asio::ip::udp::resolver	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_resolver<udp> resolver;$/;"	t	class:boost::asio::ip::udp	access:public
boost::asio::ip::udp::socket	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_datagram_socket<udp> socket;$/;"	t	class:boost::asio::ip::udp	access:public
boost::asio::ip::udp::type	/usr/include/boost/asio/ip/udp.hpp	/^  int type() const$/;"	f	class:boost::asio::ip::udp	access:public	signature:() const
boost::asio::ip::udp::udp	/usr/include/boost/asio/ip/udp.hpp	/^  explicit udp(int protocol_family)$/;"	f	class:boost::asio::ip::udp	access:private	signature:(int protocol_family)
boost::asio::ip::udp::v4	/usr/include/boost/asio/ip/udp.hpp	/^  static udp v4()$/;"	f	class:boost::asio::ip::udp	access:public	signature:()
boost::asio::ip::udp::v6	/usr/include/boost/asio/ip/udp.hpp	/^  static udp v6()$/;"	f	class:boost::asio::ip::udp	access:public	signature:()
boost::asio::ip::unicast	/usr/include/boost/asio/ip/unicast.hpp	/^namespace unicast {$/;"	n	namespace:boost::asio::ip
boost::asio::ip::unicast::hops	/usr/include/boost/asio/ip/unicast.hpp	/^typedef implementation_defined hops;$/;"	t	namespace:boost::asio::ip::unicast
boost::asio::ip::v6_only	/usr/include/boost/asio/ip/v6_only.hpp	/^typedef implementation_defined v6_only;$/;"	t	namespace:boost::asio::ip
boost::asio::is_match_condition	/usr/include/boost/asio/read_until.hpp	/^struct is_match_condition$/;"	s	namespace:boost::asio
boost::asio::is_match_condition::value	/usr/include/boost/asio/read_until.hpp	/^  static const bool value;$/;"	m	struct:boost::asio::is_match_condition	access:public
boost::asio::is_read_buffered	/usr/include/boost/asio/is_read_buffered.hpp	/^class is_read_buffered$/;"	c	namespace:boost::asio
boost::asio::is_read_buffered::value	/usr/include/boost/asio/is_read_buffered.hpp	/^  static const bool value;$/;"	m	class:boost::asio::is_read_buffered	access:public
boost::asio::is_write_buffered	/usr/include/boost/asio/is_write_buffered.hpp	/^class is_write_buffered$/;"	c	namespace:boost::asio
boost::asio::is_write_buffered::value	/usr/include/boost/asio/is_write_buffered.hpp	/^  static const bool value;$/;"	m	class:boost::asio::is_write_buffered	access:public
boost::asio::local	/usr/include/boost/asio/local/basic_endpoint.hpp	/^namespace local {$/;"	n	namespace:boost::asio
boost::asio::local	/usr/include/boost/asio/local/connect_pair.hpp	/^namespace local {$/;"	n	namespace:boost::asio
boost::asio::local	/usr/include/boost/asio/local/datagram_protocol.hpp	/^namespace local {$/;"	n	namespace:boost::asio
boost::asio::local	/usr/include/boost/asio/local/detail/endpoint.hpp	/^namespace local {$/;"	n	namespace:boost::asio
boost::asio::local	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^namespace local {$/;"	n	namespace:boost::asio	file:
boost::asio::local	/usr/include/boost/asio/local/stream_protocol.hpp	/^namespace local {$/;"	n	namespace:boost::asio
boost::asio::local::basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^class basic_endpoint$/;"	c	namespace:boost::asio::local
boost::asio::local::basic_endpoint::basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint()$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:()
boost::asio::local::basic_endpoint::basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(basic_endpoint&& other)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(basic_endpoint&& other)
boost::asio::local::basic_endpoint::basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(const basic_endpoint& other)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const basic_endpoint& other)
boost::asio::local::basic_endpoint::basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(const char* path_name)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const char* path_name)
boost::asio::local::basic_endpoint::basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(const std::string& path_name)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const std::string& path_name)
boost::asio::local::basic_endpoint::capacity	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
boost::asio::local::basic_endpoint::data	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  const data_type* data() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
boost::asio::local::basic_endpoint::data	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  data_type* data()$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:()
boost::asio::local::basic_endpoint::data_type	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  typedef boost::asio::detail::socket_addr_type data_type;$/;"	t	class:boost::asio::local::basic_endpoint	access:public
boost::asio::local::basic_endpoint::data_type	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  typedef implementation_defined data_type;$/;"	t	class:boost::asio::local::basic_endpoint	access:public
boost::asio::local::basic_endpoint::impl_	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  boost::asio::local::detail::endpoint impl_;$/;"	m	class:boost::asio::local::basic_endpoint	access:private
boost::asio::local::basic_endpoint::operator !=	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator!=(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
boost::asio::local::basic_endpoint::operator <	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator<(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
boost::asio::local::basic_endpoint::operator <=	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator<=(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
boost::asio::local::basic_endpoint::operator =	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint& operator=(basic_endpoint&& other)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(basic_endpoint&& other)
boost::asio::local::basic_endpoint::operator =	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint& operator=(const basic_endpoint& other)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const basic_endpoint& other)
boost::asio::local::basic_endpoint::operator ==	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator==(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
boost::asio::local::basic_endpoint::operator >	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator>(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
boost::asio::local::basic_endpoint::operator >=	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator>=(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
boost::asio::local::basic_endpoint::path	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::string path() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
boost::asio::local::basic_endpoint::path	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void path(const char* p)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const char* p)
boost::asio::local::basic_endpoint::path	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void path(const std::string& p)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const std::string& p)
boost::asio::local::basic_endpoint::protocol	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  protocol_type protocol() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
boost::asio::local::basic_endpoint::protocol_type	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::local::basic_endpoint	access:public
boost::asio::local::basic_endpoint::resize	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void resize(std::size_t new_size)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(std::size_t new_size)
boost::asio::local::basic_endpoint::size	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
boost::asio::local::connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^boost::system::error_code connect_pair($/;"	p	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2, boost::system::error_code& ec)
boost::asio::local::connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^inline boost::system::error_code connect_pair($/;"	f	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2, boost::system::error_code& ec)
boost::asio::local::connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^inline void connect_pair($/;"	f	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2)
boost::asio::local::connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^void connect_pair($/;"	p	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2)
boost::asio::local::datagram_protocol	/usr/include/boost/asio/local/datagram_protocol.hpp	/^class datagram_protocol$/;"	c	namespace:boost::asio::local
boost::asio::local::datagram_protocol::endpoint	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  typedef basic_endpoint<datagram_protocol> endpoint;$/;"	t	class:boost::asio::local::datagram_protocol	access:public
boost::asio::local::datagram_protocol::family	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  int family() const$/;"	f	class:boost::asio::local::datagram_protocol	access:public	signature:() const
boost::asio::local::datagram_protocol::protocol	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  int protocol() const$/;"	f	class:boost::asio::local::datagram_protocol	access:public	signature:() const
boost::asio::local::datagram_protocol::socket	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  typedef basic_datagram_socket<datagram_protocol> socket;$/;"	t	class:boost::asio::local::datagram_protocol	access:public
boost::asio::local::datagram_protocol::type	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  int type() const$/;"	f	class:boost::asio::local::datagram_protocol	access:public	signature:() const
boost::asio::local::detail	/usr/include/boost/asio/local/detail/endpoint.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::local
boost::asio::local::detail	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^namespace detail {$/;"	n	namespace:boost::asio::local	file:
boost::asio::local::detail::endpoint	/usr/include/boost/asio/local/detail/endpoint.hpp	/^class endpoint$/;"	c	namespace:boost::asio::local::detail
boost::asio::local::detail::endpoint::capacity	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:boost::asio::local::detail::endpoint	access:public	signature:() const
boost::asio::local::detail::endpoint::data	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  boost::asio::detail::socket_addr_type* data()$/;"	f	class:boost::asio::local::detail::endpoint	access:public	signature:()
boost::asio::local::detail::endpoint::data	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  const boost::asio::detail::socket_addr_type* data() const$/;"	f	class:boost::asio::local::detail::endpoint	access:public	signature:() const
boost::asio::local::detail::endpoint::data_	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  } data_;$/;"	m	class:boost::asio::local::detail::endpoint	typeref:union:boost::asio::local::detail::endpoint::data_union	access:private
boost::asio::local::detail::endpoint::data_union	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  union data_union$/;"	u	class:boost::asio::local::detail::endpoint	access:private
boost::asio::local::detail::endpoint::data_union::base	/usr/include/boost/asio/local/detail/endpoint.hpp	/^    boost::asio::detail::socket_addr_type base;$/;"	m	union:boost::asio::local::detail::endpoint::data_union	access:public
boost::asio::local::detail::endpoint::data_union::local	/usr/include/boost/asio/local/detail/endpoint.hpp	/^    boost::asio::detail::sockaddr_un_type local;$/;"	m	union:boost::asio::local::detail::endpoint::data_union	access:public
boost::asio::local::detail::endpoint::endpoint	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL endpoint();$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:()
boost::asio::local::detail::endpoint::endpoint	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL endpoint(const char* path_name);$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:(const char* path_name)
boost::asio::local::detail::endpoint::endpoint	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL endpoint(const std::string& path_name);$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:(const std::string& path_name)
boost::asio::local::detail::endpoint::endpoint	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  endpoint(const endpoint& other)$/;"	f	class:boost::asio::local::detail::endpoint	access:public	signature:(const endpoint& other)
boost::asio::local::detail::endpoint::endpoint	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^endpoint::endpoint()$/;"	f	class:boost::asio::local::detail::endpoint	signature:()
boost::asio::local::detail::endpoint::endpoint	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^endpoint::endpoint(const char* path_name)$/;"	f	class:boost::asio::local::detail::endpoint	signature:(const char* path_name)
boost::asio::local::detail::endpoint::endpoint	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^endpoint::endpoint(const std::string& path_name)$/;"	f	class:boost::asio::local::detail::endpoint	signature:(const std::string& path_name)
boost::asio::local::detail::endpoint::init	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void init(const char* path, std::size_t path_length);$/;"	p	class:boost::asio::local::detail::endpoint	access:private	signature:(const char* path, std::size_t path_length)
boost::asio::local::detail::endpoint::init	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^void endpoint::init(const char* path_name, std::size_t path_length)$/;"	f	class:boost::asio::local::detail::endpoint	signature:(const char* path_name, std::size_t path_length)
boost::asio::local::detail::endpoint::operator <	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL friend bool operator<($/;"	p	class:boost::asio::local::detail::endpoint	access:friend	signature:( const endpoint& e1, const endpoint& e2)
boost::asio::local::detail::endpoint::operator =	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  endpoint& operator=(const endpoint& other)$/;"	f	class:boost::asio::local::detail::endpoint	access:public	signature:(const endpoint& other)
boost::asio::local::detail::endpoint::operator ==	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL friend bool operator==($/;"	p	class:boost::asio::local::detail::endpoint	access:friend	signature:( const endpoint& e1, const endpoint& e2)
boost::asio::local::detail::endpoint::path	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL std::string path() const;$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:() const
boost::asio::local::detail::endpoint::path	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void path(const char* p);$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:(const char* p)
boost::asio::local::detail::endpoint::path	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void path(const std::string& p);$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:(const std::string& p)
boost::asio::local::detail::endpoint::path	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^std::string endpoint::path() const$/;"	f	class:boost::asio::local::detail::endpoint	signature:() const
boost::asio::local::detail::endpoint::path	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^void endpoint::path(const char* p)$/;"	f	class:boost::asio::local::detail::endpoint	signature:(const char* p)
boost::asio::local::detail::endpoint::path	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^void endpoint::path(const std::string& p)$/;"	f	class:boost::asio::local::detail::endpoint	signature:(const std::string& p)
boost::asio::local::detail::endpoint::path_length_	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  std::size_t path_length_;$/;"	m	class:boost::asio::local::detail::endpoint	access:private
boost::asio::local::detail::endpoint::resize	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void resize(std::size_t size);$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:(std::size_t size)
boost::asio::local::detail::endpoint::resize	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^void endpoint::resize(std::size_t new_size)$/;"	f	class:boost::asio::local::detail::endpoint	signature:(std::size_t new_size)
boost::asio::local::detail::endpoint::size	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::local::detail::endpoint	access:public	signature:() const
boost::asio::local::detail::operator <	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^bool operator<(const endpoint& e1, const endpoint& e2)$/;"	f	namespace:boost::asio::local::detail	signature:(const endpoint& e1, const endpoint& e2)
boost::asio::local::detail::operator ==	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^bool operator==(const endpoint& e1, const endpoint& e2)$/;"	f	namespace:boost::asio::local::detail	signature:(const endpoint& e1, const endpoint& e2)
boost::asio::local::operator <<	/usr/include/boost/asio/local/basic_endpoint.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::local	signature:( std::basic_ostream<Elem, Traits>& os, const basic_endpoint<Protocol>& endpoint)
boost::asio::local::stream_protocol	/usr/include/boost/asio/local/stream_protocol.hpp	/^class stream_protocol$/;"	c	namespace:boost::asio::local
boost::asio::local::stream_protocol::acceptor	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_socket_acceptor<stream_protocol> acceptor;$/;"	t	class:boost::asio::local::stream_protocol	access:public
boost::asio::local::stream_protocol::endpoint	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_endpoint<stream_protocol> endpoint;$/;"	t	class:boost::asio::local::stream_protocol	access:public
boost::asio::local::stream_protocol::family	/usr/include/boost/asio/local/stream_protocol.hpp	/^  int family() const$/;"	f	class:boost::asio::local::stream_protocol	access:public	signature:() const
boost::asio::local::stream_protocol::iostream	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_socket_iostream<stream_protocol> iostream;$/;"	t	class:boost::asio::local::stream_protocol	access:public
boost::asio::local::stream_protocol::protocol	/usr/include/boost/asio/local/stream_protocol.hpp	/^  int protocol() const$/;"	f	class:boost::asio::local::stream_protocol	access:public	signature:() const
boost::asio::local::stream_protocol::socket	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_stream_socket<stream_protocol> socket;$/;"	t	class:boost::asio::local::stream_protocol	access:public
boost::asio::local::stream_protocol::type	/usr/include/boost/asio/local/stream_protocol.hpp	/^  int type() const$/;"	f	class:boost::asio::local::stream_protocol	access:public	signature:() const
boost::asio::mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^class mutable_buffer$/;"	c	namespace:boost::asio
boost::asio::mutable_buffer::boost::asio::detail::buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^  friend void* boost::asio::detail::buffer_cast_helper($/;"	p	class:boost::asio::mutable_buffer::boost::asio::detail	access:friend	signature:( const mutable_buffer& b)
boost::asio::mutable_buffer::boost::asio::detail::buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^  friend std::size_t boost::asio::detail::buffer_size_helper($/;"	p	class:boost::asio::mutable_buffer::boost::asio::detail	access:friend	signature:( const mutable_buffer& b)
boost::asio::mutable_buffer::data_	/usr/include/boost/asio/buffer.hpp	/^  void* data_;$/;"	m	class:boost::asio::mutable_buffer	access:private
boost::asio::mutable_buffer::debug_check_	/usr/include/boost/asio/buffer.hpp	/^  boost::function<void()> debug_check_;$/;"	m	class:boost::asio::mutable_buffer	access:private
boost::asio::mutable_buffer::get_debug_check	/usr/include/boost/asio/buffer.hpp	/^  const boost::function<void()>& get_debug_check() const$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:() const
boost::asio::mutable_buffer::mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer()$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:()
boost::asio::mutable_buffer::mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer(void* data, std::size_t size)$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:(void* data, std::size_t size)
boost::asio::mutable_buffer::mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer(void* data, std::size_t size,$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:(void* data, std::size_t size, boost::function<void()> debug_check)
boost::asio::mutable_buffer::size_	/usr/include/boost/asio/buffer.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::mutable_buffer	access:private
boost::asio::mutable_buffers_1	/usr/include/boost/asio/buffer.hpp	/^class mutable_buffers_1$/;"	c	namespace:boost::asio	inherits:mutable_buffer
boost::asio::mutable_buffers_1::begin	/usr/include/boost/asio/buffer.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:() const
boost::asio::mutable_buffers_1::const_iterator	/usr/include/boost/asio/buffer.hpp	/^  typedef const mutable_buffer* const_iterator;$/;"	t	class:boost::asio::mutable_buffers_1	access:public
boost::asio::mutable_buffers_1::end	/usr/include/boost/asio/buffer.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:() const
boost::asio::mutable_buffers_1::mutable_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  explicit mutable_buffers_1(const mutable_buffer& b)$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:(const mutable_buffer& b)
boost::asio::mutable_buffers_1::mutable_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffers_1(void* data, std::size_t size)$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:(void* data, std::size_t size)
boost::asio::mutable_buffers_1::value_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffer value_type;$/;"	t	class:boost::asio::mutable_buffers_1	access:public
boost::asio::null_buffers	/usr/include/boost/asio/buffer.hpp	/^class null_buffers$/;"	c	namespace:boost::asio
boost::asio::null_buffers::begin	/usr/include/boost/asio/buffer.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::null_buffers	access:public	signature:() const
boost::asio::null_buffers::buf_	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer buf_;$/;"	m	class:boost::asio::null_buffers	access:private
boost::asio::null_buffers::const_iterator	/usr/include/boost/asio/buffer.hpp	/^  typedef const mutable_buffer* const_iterator;$/;"	t	class:boost::asio::null_buffers	access:public
boost::asio::null_buffers::end	/usr/include/boost/asio/buffer.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::null_buffers	access:public	signature:() const
boost::asio::null_buffers::value_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffer value_type;$/;"	t	class:boost::asio::null_buffers	access:public
boost::asio::operator +	/usr/include/boost/asio/buffer.hpp	/^inline const_buffer operator+(const const_buffer& b, std::size_t start)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b, std::size_t start)
boost::asio::operator +	/usr/include/boost/asio/buffer.hpp	/^inline const_buffer operator+(std::size_t start, const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(std::size_t start, const const_buffer& b)
boost::asio::operator +	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffer operator+(const mutable_buffer& b, std::size_t start)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b, std::size_t start)
boost::asio::operator +	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffer operator+(std::size_t start, const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(std::size_t start, const mutable_buffer& b)
boost::asio::placeholders	/usr/include/boost/asio/placeholders.hpp	/^namespace placeholders {$/;"	n	namespace:boost::asio
boost::asio::placeholders::bytes_transferred	/usr/include/boost/asio/placeholders.hpp	/^unspecified bytes_transferred;$/;"	m	namespace:boost::asio::placeholders
boost::asio::placeholders::error	/usr/include/boost/asio/placeholders.hpp	/^unspecified error;$/;"	m	namespace:boost::asio::placeholders
boost::asio::placeholders::iterator	/usr/include/boost/asio/placeholders.hpp	/^unspecified iterator;$/;"	m	namespace:boost::asio::placeholders
boost::asio::placeholders::signal_number	/usr/include/boost/asio/placeholders.hpp	/^unspecified signal_number;$/;"	m	namespace:boost::asio::placeholders
boost::asio::posix	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
boost::asio::posix	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
boost::asio::posix	/usr/include/boost/asio/posix/descriptor_base.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
boost::asio::posix	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
boost::asio::posix	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
boost::asio::posix::basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^class basic_descriptor$/;"	c	namespace:boost::asio::posix	inherits:basic_io_object,descriptor_base
boost::asio::posix::basic_descriptor::assign	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code assign(const native_handle_type& native_descriptor,$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(const native_handle_type& native_descriptor, boost::system::error_code& ec)
boost::asio::posix::basic_descriptor::assign	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void assign(const native_handle_type& native_descriptor)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(const native_handle_type& native_descriptor)
boost::asio::posix::basic_descriptor::basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  basic_descriptor(basic_descriptor&& other)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(basic_descriptor&& other)
boost::asio::posix::basic_descriptor::basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  basic_descriptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& native_descriptor)
boost::asio::posix::basic_descriptor::basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  explicit basic_descriptor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::posix::basic_descriptor::cancel	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::system::error_code& ec)
boost::asio::posix::basic_descriptor::cancel	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void cancel()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
boost::asio::posix::basic_descriptor::close	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::system::error_code& ec)
boost::asio::posix::basic_descriptor::close	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void close()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
boost::asio::posix::basic_descriptor::io_control	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code io_control(IoControlCommand& command,$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(IoControlCommand& command, boost::system::error_code& ec)
boost::asio::posix::basic_descriptor::io_control	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(IoControlCommand& command)
boost::asio::posix::basic_descriptor::is_open	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:() const
boost::asio::posix::basic_descriptor::lowest_layer	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:() const
boost::asio::posix::basic_descriptor::lowest_layer	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
boost::asio::posix::basic_descriptor::lowest_layer_type	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  typedef basic_descriptor<DescriptorService> lowest_layer_type;$/;"	t	class:boost::asio::posix::basic_descriptor	access:public
boost::asio::posix::basic_descriptor::native	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  native_type native()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
boost::asio::posix::basic_descriptor::native_handle	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  native_handle_type native_handle()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
boost::asio::posix::basic_descriptor::native_handle_type	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  typedef typename DescriptorService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::posix::basic_descriptor	access:public
boost::asio::posix::basic_descriptor::native_non_blocking	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  bool native_non_blocking() const$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:() const
boost::asio::posix::basic_descriptor::native_non_blocking	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code native_non_blocking($/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:( bool mode, boost::system::error_code& ec)
boost::asio::posix::basic_descriptor::native_non_blocking	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void native_non_blocking(bool mode)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(bool mode)
boost::asio::posix::basic_descriptor::native_type	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  typedef typename DescriptorService::native_handle_type native_type;$/;"	t	class:boost::asio::posix::basic_descriptor	access:public
boost::asio::posix::basic_descriptor::non_blocking	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  bool non_blocking() const$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:() const
boost::asio::posix::basic_descriptor::non_blocking	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code non_blocking($/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:( bool mode, boost::system::error_code& ec)
boost::asio::posix::basic_descriptor::non_blocking	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void non_blocking(bool mode)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(bool mode)
boost::asio::posix::basic_descriptor::operator =	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  basic_descriptor& operator=(basic_descriptor&& other)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(basic_descriptor&& other)
boost::asio::posix::basic_descriptor::release	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  native_handle_type release()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
boost::asio::posix::basic_descriptor::~basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  ~basic_descriptor()$/;"	f	class:boost::asio::posix::basic_descriptor	access:protected	signature:()
boost::asio::posix::basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^class basic_stream_descriptor$/;"	c	namespace:boost::asio::posix	inherits:basic_descriptor
boost::asio::posix::basic_stream_descriptor::async_read_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::posix::basic_stream_descriptor::async_write_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::posix::basic_stream_descriptor::basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  basic_stream_descriptor(basic_stream_descriptor&& other)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(basic_stream_descriptor&& other)
boost::asio::posix::basic_stream_descriptor::basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  basic_stream_descriptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& native_descriptor)
boost::asio::posix::basic_stream_descriptor::basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  explicit basic_stream_descriptor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::posix::basic_stream_descriptor::native_handle_type	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^    native_handle_type;$/;"	t	class:boost::asio::posix::basic_stream_descriptor	access:public
boost::asio::posix::basic_stream_descriptor::native_type	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  typedef typename StreamDescriptorService::native_handle_type native_type;$/;"	t	class:boost::asio::posix::basic_stream_descriptor	access:public
boost::asio::posix::basic_stream_descriptor::operator =	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  basic_stream_descriptor& operator=(basic_stream_descriptor&& other)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(basic_stream_descriptor&& other)
boost::asio::posix::basic_stream_descriptor::read_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::posix::basic_stream_descriptor::read_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::posix::basic_stream_descriptor::write_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::posix::basic_stream_descriptor::write_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::posix::descriptor_base	/usr/include/boost/asio/posix/descriptor_base.hpp	/^class descriptor_base$/;"	c	namespace:boost::asio::posix
boost::asio::posix::descriptor_base::bytes_readable	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  typedef boost::asio::detail::io_control::bytes_readable bytes_readable;$/;"	t	class:boost::asio::posix::descriptor_base	access:public
boost::asio::posix::descriptor_base::bytes_readable	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  typedef implementation_defined bytes_readable;$/;"	t	class:boost::asio::posix::descriptor_base	access:public
boost::asio::posix::descriptor_base::non_blocking_io	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  typedef implementation_defined non_blocking_io;$/;"	t	class:boost::asio::posix::descriptor_base	access:public
boost::asio::posix::descriptor_base::~descriptor_base	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  ~descriptor_base()$/;"	f	class:boost::asio::posix::descriptor_base	access:protected	signature:()
boost::asio::posix::stream_descriptor	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^typedef basic_stream_descriptor<> stream_descriptor;$/;"	t	namespace:boost::asio::posix
boost::asio::posix::stream_descriptor_service	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^class stream_descriptor_service$/;"	c	namespace:boost::asio::posix	inherits:boost::asio::io_service::service
boost::asio::posix::stream_descriptor_service::assign	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const native_handle_type& native_descriptor, boost::system::error_code& ec)
boost::asio::posix::stream_descriptor_service::async_read_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::posix::stream_descriptor_service::async_write_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::posix::stream_descriptor_service::cancel	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::posix::stream_descriptor_service::close	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::posix::stream_descriptor_service::construct	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
boost::asio::posix::stream_descriptor_service::destroy	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
boost::asio::posix::stream_descriptor_service::id	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::posix::stream_descriptor_service	access:public
boost::asio::posix::stream_descriptor_service::implementation_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
boost::asio::posix::stream_descriptor_service::implementation_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
boost::asio::posix::stream_descriptor_service::io_control	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
boost::asio::posix::stream_descriptor_service::is_open	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(const implementation_type& impl) const
boost::asio::posix::stream_descriptor_service::move_assign	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, stream_descriptor_service& other_service, implementation_type& other_impl)
boost::asio::posix::stream_descriptor_service::move_construct	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::posix::stream_descriptor_service::native	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
boost::asio::posix::stream_descriptor_service::native_handle	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
boost::asio::posix::stream_descriptor_service::native_handle_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
boost::asio::posix::stream_descriptor_service::native_handle_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
boost::asio::posix::stream_descriptor_service::native_non_blocking	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(const implementation_type& impl) const
boost::asio::posix::stream_descriptor_service::native_non_blocking	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::posix::stream_descriptor_service::native_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
boost::asio::posix::stream_descriptor_service::native_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
boost::asio::posix::stream_descriptor_service::non_blocking	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(const implementation_type& impl) const
boost::asio::posix::stream_descriptor_service::non_blocking	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::posix::stream_descriptor_service::read_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::posix::stream_descriptor_service::release	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  native_handle_type release(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
boost::asio::posix::stream_descriptor_service::service_impl_	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::posix::stream_descriptor_service	access:private
boost::asio::posix::stream_descriptor_service::service_impl_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef detail::reactive_descriptor_service service_impl_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:private
boost::asio::posix::stream_descriptor_service::shutdown_service	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:private	signature:()
boost::asio::posix::stream_descriptor_service::stream_descriptor_service	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  explicit stream_descriptor_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::posix::stream_descriptor_service::write_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::raw_socket_service	/usr/include/boost/asio/raw_socket_service.hpp	/^class raw_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::raw_socket_service::assign	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
boost::asio::raw_socket_service::async_connect	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, BOOST_ASIO_MOVE_ARG(ConnectHandler) handler)
boost::asio::raw_socket_service::async_receive	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::raw_socket_service::async_receive_from	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::raw_socket_service::async_send	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_send(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::raw_socket_service::async_send_to	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::raw_socket_service::at_mark	/usr/include/boost/asio/raw_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::raw_socket_service::available	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::raw_socket_service::bind	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::raw_socket_service::cancel	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::raw_socket_service::close	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::raw_socket_service::connect	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::raw_socket_service::construct	/usr/include/boost/asio/raw_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::raw_socket_service::destroy	/usr/include/boost/asio/raw_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::raw_socket_service::endpoint_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::get_option	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
boost::asio::raw_socket_service::id	/usr/include/boost/asio/raw_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::implementation_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::implementation_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::io_control	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
boost::asio::raw_socket_service::is_open	/usr/include/boost/asio/raw_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::raw_socket_service::local_endpoint	/usr/include/boost/asio/raw_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::raw_socket_service::move_assign	/usr/include/boost/asio/raw_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, raw_socket_service& other_service, implementation_type& other_impl)
boost::asio::raw_socket_service::move_construct	/usr/include/boost/asio/raw_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::raw_socket_service::native	/usr/include/boost/asio/raw_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::raw_socket_service::native_handle	/usr/include/boost/asio/raw_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::raw_socket_service::native_handle_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::native_handle_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::native_non_blocking	/usr/include/boost/asio/raw_socket_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::raw_socket_service::native_non_blocking	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::raw_socket_service::native_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::native_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::non_blocking	/usr/include/boost/asio/raw_socket_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::raw_socket_service::non_blocking	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::raw_socket_service::open	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::raw_socket_service::protocol_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::raw_socket_service	/usr/include/boost/asio/raw_socket_service.hpp	/^  explicit raw_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::raw_socket_service::receive	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::raw_socket_service::receive_from	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::raw_socket_service::remote_endpoint	/usr/include/boost/asio/raw_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::raw_socket_service::send	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::raw_socket_service::send_to	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t send_to(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::raw_socket_service::service_impl_	/usr/include/boost/asio/raw_socket_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::raw_socket_service	access:private
boost::asio::raw_socket_service::service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
boost::asio::raw_socket_service::service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
boost::asio::raw_socket_service::set_option	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::raw_socket_service::shutdown	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
boost::asio::raw_socket_service::shutdown_service	/usr/include/boost/asio/raw_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::raw_socket_service	access:private	signature:()
boost::asio::read	/usr/include/boost/asio/impl/read.hpp	/^inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers)$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers)
boost::asio::read	/usr/include/boost/asio/impl/read.hpp	/^inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition)
boost::asio::read	/usr/include/boost/asio/impl/read.hpp	/^inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::read	/usr/include/boost/asio/impl/read.hpp	/^inline std::size_t read(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b)
boost::asio::read	/usr/include/boost/asio/impl/read.hpp	/^inline std::size_t read(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
boost::asio::read	/usr/include/boost/asio/impl/read.hpp	/^inline std::size_t read(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, boost::system::error_code& ec)
boost::asio::read	/usr/include/boost/asio/impl/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::read	/usr/include/boost/asio/impl/read.hpp	/^std::size_t read(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b);$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b, boost::system::error_code& ec)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers);$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b)
boost::asio::read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
boost::asio::read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, boost::system::error_code& ec)
boost::asio::read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers)
boost::asio::read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition)
boost::asio::read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::read_at	/usr/include/boost/asio/impl/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::read_at	/usr/include/boost/asio/impl/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, boost::system::error_code& ec)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::read_size_helper	/usr/include/boost/asio/basic_streambuf.hpp	/^inline std::size_t read_size_helper($/;"	f	namespace:boost::asio	signature:( basic_streambuf<Allocator>& sb, std::size_t max_size)
boost::asio::read_until	/usr/include/boost/asio/impl/read_until.hpp	/^inline std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, typename boost::enable_if<is_match_condition<MatchCondition> >::type*)
boost::asio::read_until	/usr/include/boost/asio/impl/read_until.hpp	/^inline std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim)
boost::asio::read_until	/usr/include/boost/asio/impl/read_until.hpp	/^inline std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr)
boost::asio::read_until	/usr/include/boost/asio/impl/read_until.hpp	/^inline std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim)
boost::asio::read_until	/usr/include/boost/asio/impl/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, boost::system::error_code& ec, typename boost::enable_if<is_match_condition<MatchCondition> >::type*)
boost::asio::read_until	/usr/include/boost/asio/impl/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, boost::system::error_code& ec)
boost::asio::read_until	/usr/include/boost/asio/impl/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr, boost::system::error_code& ec)
boost::asio::read_until	/usr/include/boost/asio/impl/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, boost::system::error_code& ec)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, boost::system::error_code& ec, typename boost::enable_if<is_match_condition<MatchCondition> >::type* = 0)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, typename boost::enable_if<is_match_condition<MatchCondition> >::type* = 0)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, boost::system::error_code& ec)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr, boost::system::error_code& ec)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^class seq_packet_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::seq_packet_socket_service::assign	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::async_connect	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, BOOST_ASIO_MOVE_ARG(ConnectHandler) handler)
boost::asio::seq_packet_socket_service::async_receive	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::seq_packet_socket_service::async_send	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void async_send(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::seq_packet_socket_service::at_mark	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::seq_packet_socket_service::available	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::seq_packet_socket_service::bind	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::cancel	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::close	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::connect	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::construct	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::seq_packet_socket_service::destroy	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::seq_packet_socket_service::endpoint_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
boost::asio::seq_packet_socket_service::get_option	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
boost::asio::seq_packet_socket_service::id	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::seq_packet_socket_service	access:public
boost::asio::seq_packet_socket_service::implementation_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
boost::asio::seq_packet_socket_service::implementation_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
boost::asio::seq_packet_socket_service::io_control	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::is_open	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::seq_packet_socket_service::local_endpoint	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::seq_packet_socket_service::move_assign	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, seq_packet_socket_service& other_service, implementation_type& other_impl)
boost::asio::seq_packet_socket_service::move_construct	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::seq_packet_socket_service::native	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::seq_packet_socket_service::native_handle	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::seq_packet_socket_service::native_handle_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
boost::asio::seq_packet_socket_service::native_handle_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
boost::asio::seq_packet_socket_service::native_non_blocking	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::seq_packet_socket_service::native_non_blocking	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::native_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
boost::asio::seq_packet_socket_service::native_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
boost::asio::seq_packet_socket_service::non_blocking	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::seq_packet_socket_service::non_blocking	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::open	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::protocol_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
boost::asio::seq_packet_socket_service::receive	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::remote_endpoint	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::seq_packet_socket_service::send	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::seq_packet_socket_service	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  explicit seq_packet_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::seq_packet_socket_service::service_impl_	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::seq_packet_socket_service	access:private
boost::asio::seq_packet_socket_service::service_impl_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:private
boost::asio::seq_packet_socket_service::service_impl_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:private
boost::asio::seq_packet_socket_service::set_option	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::shutdown	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
boost::asio::seq_packet_socket_service::shutdown_service	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::seq_packet_socket_service	access:private	signature:()
boost::asio::serial_port	/usr/include/boost/asio/serial_port.hpp	/^typedef basic_serial_port<> serial_port;$/;"	t	namespace:boost::asio
boost::asio::serial_port_base	/usr/include/boost/asio/serial_port_base.hpp	/^class serial_port_base$/;"	c	namespace:boost::asio
boost::asio::serial_port_base::baud_rate	/usr/include/boost/asio/serial_port_base.hpp	/^  class baud_rate$/;"	c	class:boost::asio::serial_port_base	access:public
boost::asio::serial_port_base::baud_rate::baud_rate	/usr/include/boost/asio/impl/serial_port_base.hpp	/^inline serial_port_base::baud_rate::baud_rate(unsigned int rate)$/;"	f	class:boost::asio::serial_port_base::baud_rate	signature:(unsigned int rate)
boost::asio::serial_port_base::baud_rate::baud_rate	/usr/include/boost/asio/serial_port_base.hpp	/^    explicit baud_rate(unsigned int rate = 0);$/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:(unsigned int rate = 0)
boost::asio::serial_port_base::baud_rate::load	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::baud_rate::load($/;"	f	class:boost::asio::serial_port_base::baud_rate	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::baud_rate::load	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code load($/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::baud_rate::store	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::baud_rate::store($/;"	f	class:boost::asio::serial_port_base::baud_rate	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::baud_rate::store	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code store($/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::baud_rate::value	/usr/include/boost/asio/impl/serial_port_base.hpp	/^inline unsigned int serial_port_base::baud_rate::value() const$/;"	f	class:boost::asio::serial_port_base::baud_rate	signature:() const
boost::asio::serial_port_base::baud_rate::value	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value() const;$/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:() const
boost::asio::serial_port_base::baud_rate::value_	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value_;$/;"	m	class:boost::asio::serial_port_base::baud_rate	access:private
boost::asio::serial_port_base::character_size	/usr/include/boost/asio/serial_port_base.hpp	/^  class character_size$/;"	c	class:boost::asio::serial_port_base	access:public
boost::asio::serial_port_base::character_size::character_size	/usr/include/boost/asio/impl/serial_port_base.ipp	/^serial_port_base::character_size::character_size(unsigned int t)$/;"	f	class:boost::asio::serial_port_base::character_size	signature:(unsigned int t)
boost::asio::serial_port_base::character_size::character_size	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL explicit character_size(unsigned int t = 8);$/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:(unsigned int t = 8)
boost::asio::serial_port_base::character_size::load	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::character_size::load($/;"	f	class:boost::asio::serial_port_base::character_size	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::character_size::load	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code load($/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::character_size::store	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::character_size::store($/;"	f	class:boost::asio::serial_port_base::character_size	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::character_size::store	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code store($/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::character_size::value	/usr/include/boost/asio/impl/serial_port_base.hpp	/^inline unsigned int serial_port_base::character_size::value() const$/;"	f	class:boost::asio::serial_port_base::character_size	signature:() const
boost::asio::serial_port_base::character_size::value	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value() const;$/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:() const
boost::asio::serial_port_base::character_size::value_	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value_;$/;"	m	class:boost::asio::serial_port_base::character_size	access:private
boost::asio::serial_port_base::dummy_	/usr/include/boost/asio/serial_port_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::serial_port_base	access:private
boost::asio::serial_port_base::flow_control	/usr/include/boost/asio/serial_port_base.hpp	/^  class flow_control$/;"	c	class:boost::asio::serial_port_base	access:public
boost::asio::serial_port_base::flow_control::flow_control	/usr/include/boost/asio/impl/serial_port_base.ipp	/^serial_port_base::flow_control::flow_control($/;"	f	class:boost::asio::serial_port_base::flow_control	signature:( serial_port_base::flow_control::type t)
boost::asio::serial_port_base::flow_control::flow_control	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL explicit flow_control(type t = none);$/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:(type t = none)
boost::asio::serial_port_base::flow_control::hardware	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:boost::asio::serial_port_base::flow_control::type
boost::asio::serial_port_base::flow_control::load	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::flow_control::load($/;"	f	class:boost::asio::serial_port_base::flow_control	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::flow_control::load	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code load($/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::flow_control::none	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:boost::asio::serial_port_base::flow_control::type
boost::asio::serial_port_base::flow_control::software	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:boost::asio::serial_port_base::flow_control::type
boost::asio::serial_port_base::flow_control::store	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::flow_control::store($/;"	f	class:boost::asio::serial_port_base::flow_control	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::flow_control::store	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code store($/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::flow_control::type	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	g	class:boost::asio::serial_port_base::flow_control	access:public
boost::asio::serial_port_base::flow_control::value	/usr/include/boost/asio/impl/serial_port_base.hpp	/^serial_port_base::flow_control::value() const$/;"	f	class:boost::asio::serial_port_base::flow_control	signature:() const
boost::asio::serial_port_base::flow_control::value	/usr/include/boost/asio/serial_port_base.hpp	/^    type value() const;$/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:() const
boost::asio::serial_port_base::flow_control::value_	/usr/include/boost/asio/serial_port_base.hpp	/^    type value_;$/;"	m	class:boost::asio::serial_port_base::flow_control	access:private
boost::asio::serial_port_base::parity	/usr/include/boost/asio/serial_port_base.hpp	/^  class parity$/;"	c	class:boost::asio::serial_port_base	access:public
boost::asio::serial_port_base::parity::even	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:boost::asio::serial_port_base::parity::type
boost::asio::serial_port_base::parity::load	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::parity::load($/;"	f	class:boost::asio::serial_port_base::parity	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::parity::load	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code load($/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::parity::none	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:boost::asio::serial_port_base::parity::type
boost::asio::serial_port_base::parity::odd	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:boost::asio::serial_port_base::parity::type
boost::asio::serial_port_base::parity::parity	/usr/include/boost/asio/impl/serial_port_base.ipp	/^serial_port_base::parity::parity(serial_port_base::parity::type t)$/;"	f	class:boost::asio::serial_port_base::parity	signature:(serial_port_base::parity::type t)
boost::asio::serial_port_base::parity::parity	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL explicit parity(type t = none);$/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:(type t = none)
boost::asio::serial_port_base::parity::store	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::parity::store($/;"	f	class:boost::asio::serial_port_base::parity	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::parity::store	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code store($/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::parity::type	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	g	class:boost::asio::serial_port_base::parity	access:public
boost::asio::serial_port_base::parity::value	/usr/include/boost/asio/impl/serial_port_base.hpp	/^inline serial_port_base::parity::type serial_port_base::parity::value() const$/;"	f	class:boost::asio::serial_port_base::parity	signature:() const
boost::asio::serial_port_base::parity::value	/usr/include/boost/asio/serial_port_base.hpp	/^    type value() const;$/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:() const
boost::asio::serial_port_base::parity::value_	/usr/include/boost/asio/serial_port_base.hpp	/^    type value_;$/;"	m	class:boost::asio::serial_port_base::parity	access:private
boost::asio::serial_port_base::stop_bits	/usr/include/boost/asio/serial_port_base.hpp	/^  class stop_bits$/;"	c	class:boost::asio::serial_port_base	access:public
boost::asio::serial_port_base::stop_bits::load	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::stop_bits::load($/;"	f	class:boost::asio::serial_port_base::stop_bits	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::stop_bits::load	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code load($/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::stop_bits::one	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:boost::asio::serial_port_base::stop_bits::type
boost::asio::serial_port_base::stop_bits::onepointfive	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:boost::asio::serial_port_base::stop_bits::type
boost::asio::serial_port_base::stop_bits::stop_bits	/usr/include/boost/asio/impl/serial_port_base.ipp	/^serial_port_base::stop_bits::stop_bits($/;"	f	class:boost::asio::serial_port_base::stop_bits	signature:( serial_port_base::stop_bits::type t)
boost::asio::serial_port_base::stop_bits::stop_bits	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL explicit stop_bits(type t = one);$/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:(type t = one)
boost::asio::serial_port_base::stop_bits::store	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::stop_bits::store($/;"	f	class:boost::asio::serial_port_base::stop_bits	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::stop_bits::store	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code store($/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::stop_bits::two	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:boost::asio::serial_port_base::stop_bits::type
boost::asio::serial_port_base::stop_bits::type	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	g	class:boost::asio::serial_port_base::stop_bits	access:public
boost::asio::serial_port_base::stop_bits::value	/usr/include/boost/asio/impl/serial_port_base.hpp	/^serial_port_base::stop_bits::value() const$/;"	f	class:boost::asio::serial_port_base::stop_bits	signature:() const
boost::asio::serial_port_base::stop_bits::value	/usr/include/boost/asio/serial_port_base.hpp	/^    type value() const;$/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:() const
boost::asio::serial_port_base::stop_bits::value_	/usr/include/boost/asio/serial_port_base.hpp	/^    type value_;$/;"	m	class:boost::asio::serial_port_base::stop_bits	access:private
boost::asio::serial_port_base::~serial_port_base	/usr/include/boost/asio/serial_port_base.hpp	/^  ~serial_port_base()$/;"	f	class:boost::asio::serial_port_base	access:protected	signature:()
boost::asio::serial_port_service	/usr/include/boost/asio/serial_port_service.hpp	/^class serial_port_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::serial_port_service::assign	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
boost::asio::serial_port_service::async_read_some	/usr/include/boost/asio/serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::serial_port_service::async_write_some	/usr/include/boost/asio/serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::serial_port_service::cancel	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::serial_port_service::close	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::serial_port_service::construct	/usr/include/boost/asio/serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::serial_port_service::destroy	/usr/include/boost/asio/serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::serial_port_service::get_option	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(const implementation_type& impl, GettableSerialPortOption& option, boost::system::error_code& ec) const
boost::asio::serial_port_service::id	/usr/include/boost/asio/serial_port_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::serial_port_service	access:public
boost::asio::serial_port_service::implementation_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::serial_port_service	access:public
boost::asio::serial_port_service::implementation_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::serial_port_service	access:public
boost::asio::serial_port_service::is_open	/usr/include/boost/asio/serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(const implementation_type& impl) const
boost::asio::serial_port_service::move_assign	/usr/include/boost/asio/serial_port_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, serial_port_service& other_service, implementation_type& other_impl)
boost::asio::serial_port_service::move_construct	/usr/include/boost/asio/serial_port_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::serial_port_service::native	/usr/include/boost/asio/serial_port_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::serial_port_service::native_handle	/usr/include/boost/asio/serial_port_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::serial_port_service::native_handle_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::serial_port_service	access:public
boost::asio::serial_port_service::native_handle_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::serial_port_service	access:public
boost::asio::serial_port_service::native_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::serial_port_service	access:public
boost::asio::serial_port_service::native_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::serial_port_service	access:public
boost::asio::serial_port_service::open	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const std::string& device, boost::system::error_code& ec)
boost::asio::serial_port_service::read_some	/usr/include/boost/asio/serial_port_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::serial_port_service::send_break	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code send_break(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::serial_port_service::serial_port_service	/usr/include/boost/asio/serial_port_service.hpp	/^  explicit serial_port_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::serial_port_service::service_impl_	/usr/include/boost/asio/serial_port_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::serial_port_service	access:private
boost::asio::serial_port_service::service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef detail::reactive_serial_port_service service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
boost::asio::serial_port_service::service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef detail::win_iocp_serial_port_service service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
boost::asio::serial_port_service::set_option	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const SettableSerialPortOption& option, boost::system::error_code& ec)
boost::asio::serial_port_service::shutdown_service	/usr/include/boost/asio/serial_port_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::serial_port_service	access:private	signature:()
boost::asio::serial_port_service::write_some	/usr/include/boost/asio/serial_port_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::service_already_exists	/usr/include/boost/asio/io_service.hpp	/^class service_already_exists$/;"	c	namespace:boost::asio	inherits:std::logic_error
boost::asio::service_already_exists::service_already_exists	/usr/include/boost/asio/impl/io_service.ipp	/^service_already_exists::service_already_exists()$/;"	f	class:boost::asio::service_already_exists	signature:()
boost::asio::service_already_exists::service_already_exists	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL service_already_exists();$/;"	p	class:boost::asio::service_already_exists	access:public	signature:()
boost::asio::signal_set	/usr/include/boost/asio/signal_set.hpp	/^typedef basic_signal_set<> signal_set;$/;"	t	namespace:boost::asio
boost::asio::signal_set_service	/usr/include/boost/asio/signal_set_service.hpp	/^class signal_set_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::signal_set_service::add	/usr/include/boost/asio/signal_set_service.hpp	/^  boost::system::error_code add(implementation_type& impl,$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl, int signal_number, boost::system::error_code& ec)
boost::asio::signal_set_service::async_wait	/usr/include/boost/asio/signal_set_service.hpp	/^  void async_wait(implementation_type& impl,$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl, BOOST_ASIO_MOVE_ARG(SignalHandler) handler)
boost::asio::signal_set_service::cancel	/usr/include/boost/asio/signal_set_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::signal_set_service::clear	/usr/include/boost/asio/signal_set_service.hpp	/^  boost::system::error_code clear(implementation_type& impl,$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::signal_set_service::construct	/usr/include/boost/asio/signal_set_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl)
boost::asio::signal_set_service::destroy	/usr/include/boost/asio/signal_set_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl)
boost::asio::signal_set_service::fork_service	/usr/include/boost/asio/signal_set_service.hpp	/^  void fork_service(boost::asio::io_service::fork_event event)$/;"	f	class:boost::asio::signal_set_service	access:private	signature:(boost::asio::io_service::fork_event event)
boost::asio::signal_set_service::id	/usr/include/boost/asio/signal_set_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::signal_set_service	access:public
boost::asio::signal_set_service::implementation_type	/usr/include/boost/asio/signal_set_service.hpp	/^  typedef detail::signal_set_service::implementation_type implementation_type;$/;"	t	class:boost::asio::signal_set_service	access:public
boost::asio::signal_set_service::implementation_type	/usr/include/boost/asio/signal_set_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::signal_set_service	access:public
boost::asio::signal_set_service::remove	/usr/include/boost/asio/signal_set_service.hpp	/^  boost::system::error_code remove(implementation_type& impl,$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl, int signal_number, boost::system::error_code& ec)
boost::asio::signal_set_service::service_impl_	/usr/include/boost/asio/signal_set_service.hpp	/^  detail::signal_set_service service_impl_;$/;"	m	class:boost::asio::signal_set_service	access:private
boost::asio::signal_set_service::shutdown_service	/usr/include/boost/asio/signal_set_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::signal_set_service	access:private	signature:()
boost::asio::signal_set_service::signal_set_service	/usr/include/boost/asio/signal_set_service.hpp	/^  explicit signal_set_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::socket_acceptor_service	/usr/include/boost/asio/socket_acceptor_service.hpp	/^class socket_acceptor_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::socket_acceptor_service::accept	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code accept(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, basic_socket<protocol_type, SocketService>& peer, endpoint_type* peer_endpoint, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::assign	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_acceptor, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::async_accept	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void async_accept(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, basic_socket<protocol_type, SocketService>& peer, endpoint_type* peer_endpoint, BOOST_ASIO_MOVE_ARG(AcceptHandler) handler)
boost::asio::socket_acceptor_service::bind	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::cancel	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::close	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::construct	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
boost::asio::socket_acceptor_service::destroy	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
boost::asio::socket_acceptor_service::endpoint_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename protocol_type::endpoint endpoint_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::get_option	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
boost::asio::socket_acceptor_service::id	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::implementation_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::implementation_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::io_control	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::is_open	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl) const
boost::asio::socket_acceptor_service::listen	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code listen(implementation_type& impl, int backlog,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, int backlog, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::local_endpoint	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::socket_acceptor_service::move_assign	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, socket_acceptor_service& other_service, implementation_type& other_impl)
boost::asio::socket_acceptor_service::move_construct	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::socket_acceptor_service::native	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
boost::asio::socket_acceptor_service::native_handle	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
boost::asio::socket_acceptor_service::native_handle_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::native_handle_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::native_non_blocking	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl) const
boost::asio::socket_acceptor_service::native_non_blocking	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::native_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::native_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::non_blocking	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl) const
boost::asio::socket_acceptor_service::non_blocking	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::open	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::protocol_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::service_impl_	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::socket_acceptor_service	access:private
boost::asio::socket_acceptor_service::service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
boost::asio::socket_acceptor_service::service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
boost::asio::socket_acceptor_service::set_option	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::shutdown_service	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::socket_acceptor_service	access:private	signature:()
boost::asio::socket_acceptor_service::socket_acceptor_service	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  explicit socket_acceptor_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::socket_base	/usr/include/boost/asio/socket_base.hpp	/^class socket_base$/;"	c	namespace:boost::asio
boost::asio::socket_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int, max_connections = SOMAXCONN);$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, max_connections = SOMAXCONN)
boost::asio::socket_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_do_not_route = boost::asio::detail::message_do_not_route)
boost::asio::socket_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_end_of_record = boost::asio::detail::message_end_of_record)
boost::asio::socket_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_out_of_band = boost::asio::detail::message_out_of_band)
boost::asio::socket_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_peek = boost::asio::detail::message_peek)
boost::asio::socket_base::broadcast	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_BROADCAST> broadcast;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::broadcast	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined broadcast;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::bytes_readable	/usr/include/boost/asio/socket_base.hpp	/^  typedef boost::asio::detail::io_control::bytes_readable bytes_readable;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::bytes_readable	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined bytes_readable;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::debug	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_DEBUG> debug;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::debug	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined debug;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::do_not_route	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_DONTROUTE> do_not_route;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::do_not_route	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined do_not_route;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::dummy_	/usr/include/boost/asio/socket_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::socket_base	access:private
boost::asio::socket_base::enable_connection_aborted	/usr/include/boost/asio/socket_base.hpp	/^    enable_connection_aborted;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::enable_connection_aborted	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined enable_connection_aborted;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::keep_alive	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_KEEPALIVE> keep_alive;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::keep_alive	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined keep_alive;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::linger	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_LINGER> linger;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::linger	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined linger;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::max_connections	/usr/include/boost/asio/socket_base.hpp	/^  static const int max_connections = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
boost::asio::socket_base::message_do_not_route	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_do_not_route = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
boost::asio::socket_base::message_end_of_record	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_end_of_record = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
boost::asio::socket_base::message_flags	/usr/include/boost/asio/socket_base.hpp	/^  typedef int message_flags;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::message_out_of_band	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_out_of_band = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
boost::asio::socket_base::message_peek	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_peek = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
boost::asio::socket_base::non_blocking_io	/usr/include/boost/asio/socket_base.hpp	/^  typedef boost::asio::detail::io_control::non_blocking_io non_blocking_io;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::non_blocking_io	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined non_blocking_io;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::receive_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_RCVBUF> receive_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::receive_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined receive_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::receive_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_RCVLOWAT> receive_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::receive_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined receive_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::reuse_address	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_REUSEADDR> reuse_address;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::reuse_address	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined reuse_address;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::send_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_SNDBUF> send_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::send_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined send_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::send_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_SNDLOWAT> send_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::send_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined send_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::shutdown_both	/usr/include/boost/asio/socket_base.hpp	/^    shutdown_both = implementation_defined$/;"	e	enum:boost::asio::socket_base::shutdown_type
boost::asio::socket_base::shutdown_receive	/usr/include/boost/asio/socket_base.hpp	/^    shutdown_receive = implementation_defined,$/;"	e	enum:boost::asio::socket_base::shutdown_type
boost::asio::socket_base::shutdown_send	/usr/include/boost/asio/socket_base.hpp	/^    shutdown_send = implementation_defined,$/;"	e	enum:boost::asio::socket_base::shutdown_type
boost::asio::socket_base::shutdown_type	/usr/include/boost/asio/socket_base.hpp	/^  enum shutdown_type$/;"	g	class:boost::asio::socket_base	access:public
boost::asio::socket_base::~socket_base	/usr/include/boost/asio/socket_base.hpp	/^  ~socket_base()$/;"	f	class:boost::asio::socket_base	access:protected	signature:()
boost::asio::ssl	/usr/include/boost/asio/ssl/basic_context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/context_base.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/context_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/engine.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^namespace ssl {$/;"	n	namespace:boost::asio	file:
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^namespace ssl {$/;"	n	namespace:boost::asio	file:
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/io.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/impl/context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/impl/context.ipp	/^namespace ssl {$/;"	n	namespace:boost::asio	file:
boost::asio::ssl	/usr/include/boost/asio/ssl/impl/rfc2818_verification.ipp	/^namespace ssl {$/;"	n	namespace:boost::asio	file:
boost::asio::ssl	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/old/context_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/old/stream.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/stream.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/stream_base.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/stream_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/verify_context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/verify_mode.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl::context	/usr/include/boost/asio/ssl/context.hpp	/^typedef basic_context<context_service> context;$/;"	t	namespace:boost::asio::ssl
boost::asio::ssl::context::add_verify_path	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::add_verify_path($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& path, boost::system::error_code& ec)
boost::asio::ssl::context::add_verify_path	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::add_verify_path(const std::string& path)$/;"	f	class:boost::asio::ssl::context	signature:(const std::string& path)
boost::asio::ssl::context::context	/usr/include/boost/asio/ssl/impl/context.ipp	/^context::context(boost::asio::io_service&, context::method m)$/;"	f	class:boost::asio::ssl::context	signature:(boost::asio::io_service&, context::method m)
boost::asio::ssl::context::context	/usr/include/boost/asio/ssl/impl/context.ipp	/^context::context(context&& other)$/;"	f	class:boost::asio::ssl::context	signature:(context&& other)
boost::asio::ssl::context::context	/usr/include/boost/asio/ssl/impl/context.ipp	/^context::context(context::method m)$/;"	f	class:boost::asio::ssl::context	signature:(context::method m)
boost::asio::ssl::context::do_set_password_callback	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::do_set_password_callback($/;"	f	class:boost::asio::ssl::context	signature:( detail::password_callback_base* callback, boost::system::error_code& ec)
boost::asio::ssl::context::do_set_verify_callback	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::do_set_verify_callback($/;"	f	class:boost::asio::ssl::context	signature:( detail::verify_callback_base* callback, boost::system::error_code& ec)
boost::asio::ssl::context::impl	/usr/include/boost/asio/ssl/impl/context.ipp	/^context::impl_type context::impl()$/;"	f	class:boost::asio::ssl::context	signature:()
boost::asio::ssl::context::load_verify_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::load_verify_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::context::load_verify_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::load_verify_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::context	signature:(const std::string& filename)
boost::asio::ssl::context::native_handle	/usr/include/boost/asio/ssl/impl/context.ipp	/^context::native_handle_type context::native_handle()$/;"	f	class:boost::asio::ssl::context	signature:()
boost::asio::ssl::context::operator =	/usr/include/boost/asio/ssl/impl/context.ipp	/^context& context::operator=(context&& other)$/;"	f	class:boost::asio::ssl::context	signature:(context&& other)
boost::asio::ssl::context::password_callback_function	/usr/include/boost/asio/ssl/impl/context.ipp	/^int context::password_callback_function($/;"	f	class:boost::asio::ssl::context	signature:( char* buf, int size, int purpose, void* data)
boost::asio::ssl::context::set_default_verify_paths	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::set_default_verify_paths($/;"	f	class:boost::asio::ssl::context	signature:( boost::system::error_code& ec)
boost::asio::ssl::context::set_default_verify_paths	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::set_default_verify_paths()$/;"	f	class:boost::asio::ssl::context	signature:()
boost::asio::ssl::context::set_options	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::set_options($/;"	f	class:boost::asio::ssl::context	signature:( context::options o, boost::system::error_code& ec)
boost::asio::ssl::context::set_options	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::set_options(context::options o)$/;"	f	class:boost::asio::ssl::context	signature:(context::options o)
boost::asio::ssl::context::set_password_callback	/usr/include/boost/asio/ssl/impl/context.hpp	/^boost::system::error_code context::set_password_callback($/;"	f	class:boost::asio::ssl::context	signature:( PasswordCallback callback, boost::system::error_code& ec)
boost::asio::ssl::context::set_password_callback	/usr/include/boost/asio/ssl/impl/context.hpp	/^void context::set_password_callback(PasswordCallback callback)$/;"	f	class:boost::asio::ssl::context	signature:(PasswordCallback callback)
boost::asio::ssl::context::set_verify_callback	/usr/include/boost/asio/ssl/impl/context.hpp	/^boost::system::error_code context::set_verify_callback($/;"	f	class:boost::asio::ssl::context	signature:( VerifyCallback callback, boost::system::error_code& ec)
boost::asio::ssl::context::set_verify_callback	/usr/include/boost/asio/ssl/impl/context.hpp	/^void context::set_verify_callback(VerifyCallback callback)$/;"	f	class:boost::asio::ssl::context	signature:(VerifyCallback callback)
boost::asio::ssl::context::set_verify_mode	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::set_verify_mode($/;"	f	class:boost::asio::ssl::context	signature:( verify_mode v, boost::system::error_code& ec)
boost::asio::ssl::context::set_verify_mode	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::set_verify_mode(verify_mode v)$/;"	f	class:boost::asio::ssl::context	signature:(verify_mode v)
boost::asio::ssl::context::use_certificate_chain_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::use_certificate_chain_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::context::use_certificate_chain_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::use_certificate_chain_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::context	signature:(const std::string& filename)
boost::asio::ssl::context::use_certificate_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::use_certificate_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, file_format format, boost::system::error_code& ec)
boost::asio::ssl::context::use_certificate_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::use_certificate_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, file_format format)
boost::asio::ssl::context::use_private_key_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::use_private_key_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, context::file_format format, boost::system::error_code& ec)
boost::asio::ssl::context::use_private_key_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::use_private_key_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, context::file_format format)
boost::asio::ssl::context::use_rsa_private_key_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::use_rsa_private_key_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, context::file_format format, boost::system::error_code& ec)
boost::asio::ssl::context::use_rsa_private_key_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::use_rsa_private_key_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, context::file_format format)
boost::asio::ssl::context::use_tmp_dh_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::use_tmp_dh_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::context::use_tmp_dh_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::use_tmp_dh_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::context	signature:(const std::string& filename)
boost::asio::ssl::context::verify_callback_function	/usr/include/boost/asio/ssl/impl/context.ipp	/^int context::verify_callback_function(int preverified, X509_STORE_CTX* ctx)$/;"	f	class:boost::asio::ssl::context	signature:(int preverified, X509_STORE_CTX* ctx)
boost::asio::ssl::context::~context	/usr/include/boost/asio/ssl/impl/context.ipp	/^context::~context()$/;"	f	class:boost::asio::ssl::context	signature:()
boost::asio::ssl::context_base	/usr/include/boost/asio/ssl/context_base.hpp	/^class context_base$/;"	c	namespace:boost::asio::ssl
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, verify_client_once = SSL_VERIFY_CLIENT_ONCE);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_client_once = SSL_VERIFY_CLIENT_ONCE)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, verify_none = SSL_VERIFY_NONE);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_none = SSL_VERIFY_NONE)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, verify_peer = SSL_VERIFY_PEER);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_peer = SSL_VERIFY_PEER)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_fail_if_no_peer_cert = SSL_VERIFY_FAIL_IF_NO_PEER_CERT)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(long, default_workarounds = SSL_OP_ALL);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(long, default_workarounds = SSL_OP_ALL)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(long, no_sslv2 = SSL_OP_NO_SSLv2);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(long, no_sslv2 = SSL_OP_NO_SSLv2)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(long, no_sslv3 = SSL_OP_NO_SSLv3);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(long, no_sslv3 = SSL_OP_NO_SSLv3)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(long, no_tlsv1 = SSL_OP_NO_TLSv1);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(long, no_tlsv1 = SSL_OP_NO_TLSv1)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(long, single_dh_use = SSL_OP_SINGLE_DH_USE);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(long, single_dh_use = SSL_OP_SINGLE_DH_USE)
boost::asio::ssl::context_base::asn1	/usr/include/boost/asio/ssl/context_base.hpp	/^    asn1,$/;"	e	enum:boost::asio::ssl::context_base::file_format
boost::asio::ssl::context_base::default_workarounds	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const long default_workarounds = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::dummy_	/usr/include/boost/asio/ssl/context_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::ssl::context_base	access:private
boost::asio::ssl::context_base::file_format	/usr/include/boost/asio/ssl/context_base.hpp	/^  enum file_format$/;"	g	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::for_reading	/usr/include/boost/asio/ssl/context_base.hpp	/^    for_reading,$/;"	e	enum:boost::asio::ssl::context_base::password_purpose
boost::asio::ssl::context_base::for_writing	/usr/include/boost/asio/ssl/context_base.hpp	/^    for_writing$/;"	e	enum:boost::asio::ssl::context_base::password_purpose
boost::asio::ssl::context_base::method	/usr/include/boost/asio/ssl/context_base.hpp	/^  enum method$/;"	g	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::no_sslv2	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const long no_sslv2 = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::no_sslv3	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const long no_sslv3 = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::no_tlsv1	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const long no_tlsv1 = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::options	/usr/include/boost/asio/ssl/context_base.hpp	/^  typedef long options;$/;"	t	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::password_purpose	/usr/include/boost/asio/ssl/context_base.hpp	/^  enum password_purpose$/;"	g	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::pem	/usr/include/boost/asio/ssl/context_base.hpp	/^    pem$/;"	e	enum:boost::asio::ssl::context_base::file_format
boost::asio::ssl::context_base::single_dh_use	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const long single_dh_use = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::sslv2	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv2,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv23	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv23,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv23_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv23_client,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv23_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv23_server$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv2_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv2_client,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv2_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv2_server,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv3	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv3,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv3_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv3_client,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv3_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv3_server,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::tlsv1	/usr/include/boost/asio/ssl/context_base.hpp	/^    tlsv1,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::tlsv1_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    tlsv1_client,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::tlsv1_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    tlsv1_server,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::verify_mode	/usr/include/boost/asio/ssl/context_base.hpp	/^  typedef int verify_mode;$/;"	t	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::~context_base	/usr/include/boost/asio/ssl/context_base.hpp	/^  ~context_base()$/;"	f	class:boost::asio::ssl::context_base	access:protected	signature:()
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/engine.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl	file:
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl	file:
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/io.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail::asio_handler_allocate	/usr/include/boost/asio/ssl/detail/io.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::ssl::detail	signature:(std::size_t size, io_op<Stream, Operation, Handler>* this_handler)
boost::asio::ssl::detail::asio_handler_deallocate	/usr/include/boost/asio/ssl/detail/io.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::ssl::detail	signature:(void* pointer, std::size_t size, io_op<Stream, Operation, Handler>* this_handler)
boost::asio::ssl::detail::asio_handler_invoke	/usr/include/boost/asio/ssl/detail/io.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:boost::asio::ssl::detail	signature:(Function& function, io_op<Stream, Operation, Handler>* this_handler)
boost::asio::ssl::detail::asio_handler_invoke	/usr/include/boost/asio/ssl/detail/io.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::ssl::detail	signature:(const Function& function, io_op<Stream, Operation, Handler>* this_handler)
boost::asio::ssl::detail::async_io	/usr/include/boost/asio/ssl/detail/io.hpp	/^inline void async_io(Stream& next_layer, stream_core& core,$/;"	f	namespace:boost::asio::ssl::detail	signature:(Stream& next_layer, stream_core& core, const Operation& op, Handler handler)
boost::asio::ssl::detail::engine	/usr/include/boost/asio/ssl/detail/engine.hpp	/^class engine$/;"	c	namespace:boost::asio::ssl::detail
boost::asio::ssl::detail::engine::accept_mutex	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL static boost::asio::detail::static_mutex& accept_mutex();$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:()
boost::asio::ssl::detail::engine::accept_mutex	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^boost::asio::detail::static_mutex& engine::accept_mutex()$/;"	f	class:boost::asio::ssl::detail::engine	signature:()
boost::asio::ssl::detail::engine::do_accept	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL int do_accept(void*, std::size_t);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(void*, std::size_t)
boost::asio::ssl::detail::engine::do_accept	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^int engine::do_accept(void*, std::size_t)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(void*, std::size_t)
boost::asio::ssl::detail::engine::do_connect	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL int do_connect(void*, std::size_t);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(void*, std::size_t)
boost::asio::ssl::detail::engine::do_connect	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^int engine::do_connect(void*, std::size_t)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(void*, std::size_t)
boost::asio::ssl::detail::engine::do_read	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL int do_read(void* data, std::size_t length);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(void* data, std::size_t length)
boost::asio::ssl::detail::engine::do_read	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^int engine::do_read(void* data, std::size_t length)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(void* data, std::size_t length)
boost::asio::ssl::detail::engine::do_shutdown	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL int do_shutdown(void*, std::size_t);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(void*, std::size_t)
boost::asio::ssl::detail::engine::do_shutdown	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^int engine::do_shutdown(void*, std::size_t)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(void*, std::size_t)
boost::asio::ssl::detail::engine::do_write	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL int do_write(void* data, std::size_t length);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(void* data, std::size_t length)
boost::asio::ssl::detail::engine::do_write	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^int engine::do_write(void* data, std::size_t length)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(void* data, std::size_t length)
boost::asio::ssl::detail::engine::engine	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL explicit engine(SSL_CTX* context);$/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:(SSL_CTX* context)
boost::asio::ssl::detail::engine::engine	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  engine(const engine&);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(const engine&)
boost::asio::ssl::detail::engine::engine	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::engine(SSL_CTX* context)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(SSL_CTX* context)
boost::asio::ssl::detail::engine::ext_bio_	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BIO* ext_bio_;$/;"	m	class:boost::asio::ssl::detail::engine	access:private
boost::asio::ssl::detail::engine::get_output	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL boost::asio::mutable_buffers_1 get_output($/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:( const boost::asio::mutable_buffer& data)
boost::asio::ssl::detail::engine::get_output	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^boost::asio::mutable_buffers_1 engine::get_output($/;"	f	class:boost::asio::ssl::detail::engine	signature:( const boost::asio::mutable_buffer& data)
boost::asio::ssl::detail::engine::handshake	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL want handshake($/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:( stream_base::handshake_type type, boost::system::error_code& ec)
boost::asio::ssl::detail::engine::handshake	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::want engine::handshake($/;"	f	class:boost::asio::ssl::detail::engine	signature:( stream_base::handshake_type type, boost::system::error_code& ec)
boost::asio::ssl::detail::engine::map_error_code	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL const boost::system::error_code& map_error_code($/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:( boost::system::error_code& ec) const
boost::asio::ssl::detail::engine::map_error_code	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^const boost::system::error_code& engine::map_error_code($/;"	f	class:boost::asio::ssl::detail::engine	signature:( boost::system::error_code& ec) const
boost::asio::ssl::detail::engine::native_handle	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL SSL* native_handle();$/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:()
boost::asio::ssl::detail::engine::native_handle	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^SSL* engine::native_handle()$/;"	f	class:boost::asio::ssl::detail::engine	signature:()
boost::asio::ssl::detail::engine::operator =	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  engine& operator=(const engine&);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(const engine&)
boost::asio::ssl::detail::engine::perform	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL want perform(int (engine::* op)(void*, std::size_t),$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(int (engine::* op)(void*, std::size_t), void* data, std::size_t length, boost::system::error_code& ec, std::size_t* bytes_transferred)
boost::asio::ssl::detail::engine::perform	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::want engine::perform(int (engine::* op)(void*, std::size_t),$/;"	f	class:boost::asio::ssl::detail::engine	signature:(int (engine::* op)(void*, std::size_t), void* data, std::size_t length, boost::system::error_code& ec, std::size_t* bytes_transferred)
boost::asio::ssl::detail::engine::put_input	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL boost::asio::const_buffer put_input($/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:( const boost::asio::const_buffer& data)
boost::asio::ssl::detail::engine::put_input	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^boost::asio::const_buffer engine::put_input($/;"	f	class:boost::asio::ssl::detail::engine	signature:( const boost::asio::const_buffer& data)
boost::asio::ssl::detail::engine::read	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL want read(const boost::asio::mutable_buffer& data,$/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:(const boost::asio::mutable_buffer& data, boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::ssl::detail::engine::read	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::want engine::read(const boost::asio::mutable_buffer& data,$/;"	f	class:boost::asio::ssl::detail::engine	signature:(const boost::asio::mutable_buffer& data, boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::ssl::detail::engine::set_verify_callback	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL boost::system::error_code set_verify_callback($/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:( verify_callback_base* callback, boost::system::error_code& ec)
boost::asio::ssl::detail::engine::set_verify_callback	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^boost::system::error_code engine::set_verify_callback($/;"	f	class:boost::asio::ssl::detail::engine	signature:( verify_callback_base* callback, boost::system::error_code& ec)
boost::asio::ssl::detail::engine::set_verify_mode	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL boost::system::error_code set_verify_mode($/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:( verify_mode v, boost::system::error_code& ec)
boost::asio::ssl::detail::engine::set_verify_mode	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^boost::system::error_code engine::set_verify_mode($/;"	f	class:boost::asio::ssl::detail::engine	signature:( verify_mode v, boost::system::error_code& ec)
boost::asio::ssl::detail::engine::shutdown	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL want shutdown(boost::system::error_code& ec);$/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:(boost::system::error_code& ec)
boost::asio::ssl::detail::engine::shutdown	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::want engine::shutdown(boost::system::error_code& ec)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(boost::system::error_code& ec)
boost::asio::ssl::detail::engine::ssl_	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  SSL* ssl_;$/;"	m	class:boost::asio::ssl::detail::engine	access:private
boost::asio::ssl::detail::engine::verify_callback_function	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL static int verify_callback_function($/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:( int preverified, X509_STORE_CTX* ctx)
boost::asio::ssl::detail::engine::verify_callback_function	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^int engine::verify_callback_function(int preverified, X509_STORE_CTX* ctx)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(int preverified, X509_STORE_CTX* ctx)
boost::asio::ssl::detail::engine::want	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  enum want$/;"	g	class:boost::asio::ssl::detail::engine	access:public
boost::asio::ssl::detail::engine::want_input_and_retry	/usr/include/boost/asio/ssl/detail/engine.hpp	/^    want_input_and_retry = -2,$/;"	e	enum:boost::asio::ssl::detail::engine::want
boost::asio::ssl::detail::engine::want_nothing	/usr/include/boost/asio/ssl/detail/engine.hpp	/^    want_nothing = 0,$/;"	e	enum:boost::asio::ssl::detail::engine::want
boost::asio::ssl::detail::engine::want_output	/usr/include/boost/asio/ssl/detail/engine.hpp	/^    want_output = 1$/;"	e	enum:boost::asio::ssl::detail::engine::want
boost::asio::ssl::detail::engine::want_output_and_retry	/usr/include/boost/asio/ssl/detail/engine.hpp	/^    want_output_and_retry = -1,$/;"	e	enum:boost::asio::ssl::detail::engine::want
boost::asio::ssl::detail::engine::write	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL want write(const boost::asio::const_buffer& data,$/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:(const boost::asio::const_buffer& data, boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::ssl::detail::engine::write	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::want engine::write(const boost::asio::const_buffer& data,$/;"	f	class:boost::asio::ssl::detail::engine	signature:(const boost::asio::const_buffer& data, boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::ssl::detail::engine::~engine	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL ~engine();$/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:()
boost::asio::ssl::detail::engine::~engine	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::~engine()$/;"	f	class:boost::asio::ssl::detail::engine	signature:()
boost::asio::ssl::detail::handshake_op	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^class handshake_op$/;"	c	namespace:boost::asio::ssl::detail
boost::asio::ssl::detail::handshake_op::call_handler	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:boost::asio::ssl::detail::handshake_op	access:public	signature:(Handler& handler, const boost::system::error_code& ec, const std::size_t&) const
boost::asio::ssl::detail::handshake_op::handshake_op	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^  handshake_op(stream_base::handshake_type type)$/;"	f	class:boost::asio::ssl::detail::handshake_op	access:public	signature:(stream_base::handshake_type type)
boost::asio::ssl::detail::handshake_op::operator ()	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:boost::asio::ssl::detail::handshake_op	access:public	signature:(engine& eng, boost::system::error_code& ec, std::size_t& bytes_transferred) const
boost::asio::ssl::detail::handshake_op::type_	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^  stream_base::handshake_type type_;$/;"	m	class:boost::asio::ssl::detail::handshake_op	access:private
boost::asio::ssl::detail::io	/usr/include/boost/asio/ssl/detail/io.hpp	/^std::size_t io(Stream& next_layer, stream_core& core,$/;"	f	namespace:boost::asio::ssl::detail	signature:(Stream& next_layer, stream_core& core, const Operation& op, boost::system::error_code& ec)
boost::asio::ssl::detail::io_op	/usr/include/boost/asio/ssl/detail/io.hpp	/^class io_op$/;"	c	namespace:boost::asio::ssl::detail
boost::asio::ssl::detail::io_op::bytes_transferred_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  std::size_t bytes_transferred_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
boost::asio::ssl::detail::io_op::core_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  stream_core& core_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
boost::asio::ssl::detail::io_op::ec_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
boost::asio::ssl::detail::io_op::handler_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
boost::asio::ssl::detail::io_op::io_op	/usr/include/boost/asio/ssl/detail/io.hpp	/^  io_op(Stream& next_layer, stream_core& core,$/;"	f	class:boost::asio::ssl::detail::io_op	access:public	signature:(Stream& next_layer, stream_core& core, const Operation& op, Handler& handler)
boost::asio::ssl::detail::io_op::io_op	/usr/include/boost/asio/ssl/detail/io.hpp	/^  io_op(const io_op& other)$/;"	f	class:boost::asio::ssl::detail::io_op	access:public	signature:(const io_op& other)
boost::asio::ssl::detail::io_op::io_op	/usr/include/boost/asio/ssl/detail/io.hpp	/^  io_op(io_op&& other)$/;"	f	class:boost::asio::ssl::detail::io_op	access:public	signature:(io_op&& other)
boost::asio::ssl::detail::io_op::next_layer_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  Stream& next_layer_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
boost::asio::ssl::detail::io_op::op_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  Operation op_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
boost::asio::ssl::detail::io_op::operator ()	/usr/include/boost/asio/ssl/detail/io.hpp	/^  void operator()(boost::system::error_code ec,$/;"	f	class:boost::asio::ssl::detail::io_op	access:public	signature:(boost::system::error_code ec, std::size_t bytes_transferred = ~std::size_t(0), int start = 0)
boost::asio::ssl::detail::io_op::want_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  engine::want want_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
boost::asio::ssl::detail::openssl_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^class openssl_init : private openssl_init_base$/;"	c	namespace:boost::asio::ssl::detail	inherits:openssl_init_base
boost::asio::ssl::detail::openssl_init::instance_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  static openssl_init instance_;$/;"	m	class:boost::asio::ssl::detail::openssl_init	access:private
boost::asio::ssl::detail::openssl_init::instance_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^openssl_init<Do_Init> openssl_init<Do_Init>::instance_;$/;"	m	class:boost::asio::ssl::detail::openssl_init
boost::asio::ssl::detail::openssl_init::openssl_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  openssl_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init	access:public	signature:()
boost::asio::ssl::detail::openssl_init::ref_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  boost::asio::detail::shared_ptr<do_init> ref_;$/;"	m	class:boost::asio::ssl::detail::openssl_init	access:private
boost::asio::ssl::detail::openssl_init::~openssl_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  ~openssl_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init	access:public	signature:()
boost::asio::ssl::detail::openssl_init_base	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^class openssl_init_base$/;"	c	namespace:boost::asio::ssl::detail	inherits:noncopyable
boost::asio::ssl::detail::openssl_init_base::do_init	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^class openssl_init_base::do_init$/;"	c	class:boost::asio::ssl::detail::openssl_init_base	file:
boost::asio::ssl::detail::openssl_init_base::do_init::do_init	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^  do_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init_base::do_init	access:public	signature:()
boost::asio::ssl::detail::openssl_init_base::do_init::mutexes_	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^        boost::asio::detail::mutex> > mutexes_;$/;"	m	class:boost::asio::ssl::detail::openssl_init_base::do_init	file:	access:private
boost::asio::ssl::detail::openssl_init_base::do_init::openssl_id_func	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^  static unsigned long openssl_id_func()$/;"	f	class:boost::asio::ssl::detail::openssl_init_base::do_init	file:	access:private	signature:()
boost::asio::ssl::detail::openssl_init_base::do_init::openssl_locking_func	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^  static void openssl_locking_func(int mode, int n, $/;"	f	class:boost::asio::ssl::detail::openssl_init_base::do_init	file:	access:private	signature:(int mode, int n, const char* , int )
boost::asio::ssl::detail::openssl_init_base::do_init::thread_id_	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^  boost::asio::detail::tss_ptr<void> thread_id_;$/;"	m	class:boost::asio::ssl::detail::openssl_init_base::do_init	file:	access:private
boost::asio::ssl::detail::openssl_init_base::do_init::~do_init	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^  ~do_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init_base::do_init	access:public	signature:()
boost::asio::ssl::detail::openssl_init_base::instance	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^openssl_init_base::instance()$/;"	f	class:boost::asio::ssl::detail::openssl_init_base	signature:()
boost::asio::ssl::detail::openssl_init_base::instance	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  BOOST_ASIO_DECL static boost::asio::detail::shared_ptr<do_init> instance();$/;"	p	class:boost::asio::ssl::detail::openssl_init_base	access:protected	signature:()
boost::asio::ssl::detail::password_callback	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^class password_callback : public password_callback_base$/;"	c	namespace:boost::asio::ssl::detail	inherits:password_callback_base
boost::asio::ssl::detail::password_callback::call	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^  virtual std::string call(std::size_t size,$/;"	f	class:boost::asio::ssl::detail::password_callback	access:public	signature:(std::size_t size, context_base::password_purpose purpose)
boost::asio::ssl::detail::password_callback::callback_	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^  PasswordCallback callback_;$/;"	m	class:boost::asio::ssl::detail::password_callback	access:private
boost::asio::ssl::detail::password_callback::password_callback	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^  explicit password_callback(PasswordCallback callback)$/;"	f	class:boost::asio::ssl::detail::password_callback	access:public	signature:(PasswordCallback callback)
boost::asio::ssl::detail::password_callback_base	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^class password_callback_base$/;"	c	namespace:boost::asio::ssl::detail
boost::asio::ssl::detail::password_callback_base::call	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^  virtual std::string call(std::size_t size,$/;"	p	class:boost::asio::ssl::detail::password_callback_base	access:public	signature:(std::size_t size, context_base::password_purpose purpose)
boost::asio::ssl::detail::password_callback_base::~password_callback_base	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^  virtual ~password_callback_base()$/;"	f	class:boost::asio::ssl::detail::password_callback_base	access:public	signature:()
boost::asio::ssl::detail::read_op	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^class read_op$/;"	c	namespace:boost::asio::ssl::detail
boost::asio::ssl::detail::read_op::buffers_	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::ssl::detail::read_op	access:private
boost::asio::ssl::detail::read_op::call_handler	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:boost::asio::ssl::detail::read_op	access:public	signature:(Handler& handler, const boost::system::error_code& ec, const std::size_t& bytes_transferred) const
boost::asio::ssl::detail::read_op::operator ()	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:boost::asio::ssl::detail::read_op	access:public	signature:(engine& eng, boost::system::error_code& ec, std::size_t& bytes_transferred) const
boost::asio::ssl::detail::read_op::read_op	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^  read_op(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::detail::read_op	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::ssl::detail::shutdown_op	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^class shutdown_op$/;"	c	namespace:boost::asio::ssl::detail
boost::asio::ssl::detail::shutdown_op::call_handler	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:boost::asio::ssl::detail::shutdown_op	access:public	signature:(Handler& handler, const boost::system::error_code& ec, const std::size_t&) const
boost::asio::ssl::detail::shutdown_op::operator ()	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:boost::asio::ssl::detail::shutdown_op	access:public	signature:(engine& eng, boost::system::error_code& ec, std::size_t& bytes_transferred) const
boost::asio::ssl::detail::stream_core	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^struct stream_core$/;"	s	namespace:boost::asio::ssl::detail
boost::asio::ssl::detail::stream_core::engine_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  engine engine_;$/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
boost::asio::ssl::detail::stream_core::input_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  boost::asio::const_buffer input_;$/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
boost::asio::ssl::detail::stream_core::input_buffer_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  const boost::asio::mutable_buffers_1 input_buffer_;$/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
boost::asio::ssl::detail::stream_core::input_buffer_space_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  std::vector<unsigned char> input_buffer_space_; $/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
boost::asio::ssl::detail::stream_core::max_tls_record_size	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  enum { max_tls_record_size = 17 * 1024 };$/;"	e	enum:boost::asio::ssl::detail::stream_core::__anon1
boost::asio::ssl::detail::stream_core::output_buffer_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  const boost::asio::mutable_buffers_1 output_buffer_; $/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
boost::asio::ssl::detail::stream_core::output_buffer_space_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  std::vector<unsigned char> output_buffer_space_; $/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
boost::asio::ssl::detail::stream_core::pending_read_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  boost::asio::deadline_timer pending_read_;$/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
boost::asio::ssl::detail::stream_core::pending_write_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  boost::asio::deadline_timer pending_write_;$/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
boost::asio::ssl::detail::stream_core::stream_core	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  stream_core(SSL_CTX* context, boost::asio::io_service& io_service)$/;"	f	struct:boost::asio::ssl::detail::stream_core	access:public	signature:(SSL_CTX* context, boost::asio::io_service& io_service)
boost::asio::ssl::detail::stream_core::~stream_core	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  ~stream_core()$/;"	f	struct:boost::asio::ssl::detail::stream_core	access:public	signature:()
boost::asio::ssl::detail::verify_callback	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^class verify_callback : public verify_callback_base$/;"	c	namespace:boost::asio::ssl::detail	inherits:verify_callback_base
boost::asio::ssl::detail::verify_callback::call	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^  virtual bool call(bool preverified, verify_context& ctx)$/;"	f	class:boost::asio::ssl::detail::verify_callback	access:public	signature:(bool preverified, verify_context& ctx)
boost::asio::ssl::detail::verify_callback::callback_	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^  VerifyCallback callback_;$/;"	m	class:boost::asio::ssl::detail::verify_callback	access:private
boost::asio::ssl::detail::verify_callback::verify_callback	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^  explicit verify_callback(VerifyCallback callback)$/;"	f	class:boost::asio::ssl::detail::verify_callback	access:public	signature:(VerifyCallback callback)
boost::asio::ssl::detail::verify_callback_base	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^class verify_callback_base$/;"	c	namespace:boost::asio::ssl::detail
boost::asio::ssl::detail::verify_callback_base::call	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^  virtual bool call(bool preverified, verify_context& ctx) = 0;$/;"	p	class:boost::asio::ssl::detail::verify_callback_base	access:public	signature:(bool preverified, verify_context& ctx)
boost::asio::ssl::detail::verify_callback_base::~verify_callback_base	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^  virtual ~verify_callback_base()$/;"	f	class:boost::asio::ssl::detail::verify_callback_base	access:public	signature:()
boost::asio::ssl::detail::write_op	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^class write_op$/;"	c	namespace:boost::asio::ssl::detail
boost::asio::ssl::detail::write_op::buffers_	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:boost::asio::ssl::detail::write_op	access:private
boost::asio::ssl::detail::write_op::call_handler	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:boost::asio::ssl::detail::write_op	access:public	signature:(Handler& handler, const boost::system::error_code& ec, const std::size_t& bytes_transferred) const
boost::asio::ssl::detail::write_op::operator ()	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:boost::asio::ssl::detail::write_op	access:public	signature:(engine& eng, boost::system::error_code& ec, std::size_t& bytes_transferred) const
boost::asio::ssl::detail::write_op::write_op	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^  write_op(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::detail::write_op	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::ssl::old	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::old	/usr/include/boost/asio/ssl/old/context_service.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::old	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::old	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::old	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::old	/usr/include/boost/asio/ssl/old/stream.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::old	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::old::basic_context	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^class basic_context$/;"	c	namespace:boost::asio::ssl::old	inherits:context_base,boost::noncopyable
boost::asio::ssl::old::basic_context::add_verify_path	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code add_verify_path(const std::string& path,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& path, boost::system::error_code& ec)
boost::asio::ssl::old::basic_context::add_verify_path	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void add_verify_path(const std::string& path)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& path)
boost::asio::ssl::old::basic_context::basic_context	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  basic_context(boost::asio::io_service& io_service, method m)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(boost::asio::io_service& io_service, method m)
boost::asio::ssl::old::basic_context::impl	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  impl_type impl()$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:()
boost::asio::ssl::old::basic_context::impl_	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  impl_type impl_;$/;"	m	class:boost::asio::ssl::old::basic_context	access:private
boost::asio::ssl::old::basic_context::impl_type	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  typedef typename service_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::old::basic_context	access:public
boost::asio::ssl::old::basic_context::load_verify_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code load_verify_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::old::basic_context::load_verify_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void load_verify_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename)
boost::asio::ssl::old::basic_context::service_	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  service_type& service_;$/;"	m	class:boost::asio::ssl::old::basic_context	access:private
boost::asio::ssl::old::basic_context::service_type	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  typedef Service service_type;$/;"	t	class:boost::asio::ssl::old::basic_context	access:public
boost::asio::ssl::old::basic_context::set_options	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code set_options(options o,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(options o, boost::system::error_code& ec)
boost::asio::ssl::old::basic_context::set_options	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void set_options(options o)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(options o)
boost::asio::ssl::old::basic_context::set_password_callback	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code set_password_callback(PasswordCallback callback,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(PasswordCallback callback, boost::system::error_code& ec)
boost::asio::ssl::old::basic_context::set_password_callback	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void set_password_callback(PasswordCallback callback)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(PasswordCallback callback)
boost::asio::ssl::old::basic_context::set_verify_mode	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code set_verify_mode(verify_mode v,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(verify_mode v, boost::system::error_code& ec)
boost::asio::ssl::old::basic_context::set_verify_mode	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void set_verify_mode(verify_mode v)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(verify_mode v)
boost::asio::ssl::old::basic_context::use_certificate_chain_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code use_certificate_chain_file($/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:( const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::old::basic_context::use_certificate_chain_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void use_certificate_chain_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename)
boost::asio::ssl::old::basic_context::use_certificate_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code use_certificate_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, file_format format, boost::system::error_code& ec)
boost::asio::ssl::old::basic_context::use_certificate_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void use_certificate_file(const std::string& filename, file_format format)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, file_format format)
boost::asio::ssl::old::basic_context::use_private_key_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code use_private_key_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, file_format format, boost::system::error_code& ec)
boost::asio::ssl::old::basic_context::use_private_key_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void use_private_key_file(const std::string& filename, file_format format)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, file_format format)
boost::asio::ssl::old::basic_context::use_rsa_private_key_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code use_rsa_private_key_file($/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:( const std::string& filename, file_format format, boost::system::error_code& ec)
boost::asio::ssl::old::basic_context::use_rsa_private_key_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void use_rsa_private_key_file(const std::string& filename, file_format format)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, file_format format)
boost::asio::ssl::old::basic_context::use_tmp_dh_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code use_tmp_dh_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::old::basic_context::use_tmp_dh_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void use_tmp_dh_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename)
boost::asio::ssl::old::basic_context::~basic_context	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  ~basic_context()$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:()
boost::asio::ssl::old::context_service	/usr/include/boost/asio/ssl/old/context_service.hpp	/^class context_service$/;"	c	namespace:boost::asio::ssl::old	inherits:boost::asio::io_service::service
boost::asio::ssl::old::context_service::add_verify_path	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code add_verify_path(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& path, boost::system::error_code& ec)
boost::asio::ssl::old::context_service::context_service	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  explicit context_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ssl::old::context_service::create	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  void create(impl_type& impl, context_base::method m)$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, context_base::method m)
boost::asio::ssl::old::context_service::destroy	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  void destroy(impl_type& impl)$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl)
boost::asio::ssl::old::context_service::id	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::ssl::old::context_service	access:public
boost::asio::ssl::old::context_service::impl_type	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  typedef implementation_defined impl_type;$/;"	t	class:boost::asio::ssl::old::context_service	access:public
boost::asio::ssl::old::context_service::impl_type	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  typedef service_impl_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::old::context_service	access:public
boost::asio::ssl::old::context_service::load_verify_file	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code load_verify_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::old::context_service::null	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  impl_type null() const$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:() const
boost::asio::ssl::old::context_service::service_impl_	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::ssl::old::context_service	access:private
boost::asio::ssl::old::context_service::service_impl_type	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  typedef old::detail::openssl_context_service service_impl_type;$/;"	t	class:boost::asio::ssl::old::context_service	access:private
boost::asio::ssl::old::context_service::set_options	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code set_options(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, context_base::options o, boost::system::error_code& ec)
boost::asio::ssl::old::context_service::set_password_callback	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code set_password_callback(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, PasswordCallback callback, boost::system::error_code& ec)
boost::asio::ssl::old::context_service::set_verify_mode	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code set_verify_mode(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, context_base::verify_mode v, boost::system::error_code& ec)
boost::asio::ssl::old::context_service::shutdown_service	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::old::context_service	access:private	signature:()
boost::asio::ssl::old::context_service::use_certificate_chain_file	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code use_certificate_chain_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::old::context_service::use_certificate_file	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code use_certificate_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
boost::asio::ssl::old::context_service::use_private_key_file	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code use_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
boost::asio::ssl::old::context_service::use_rsa_private_key_file	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code use_rsa_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
boost::asio::ssl::old::context_service::use_tmp_dh_file	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code use_tmp_dh_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::old::detail	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl::old
boost::asio::ssl::old::detail	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl::old
boost::asio::ssl::old::detail	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl::old
boost::asio::ssl::old::detail::net_buffer	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^class net_buffer$/;"	c	namespace:boost::asio::ssl::old::detail
boost::asio::ssl::old::detail::net_buffer::NET_BUF_SIZE	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  static const int  NET_BUF_SIZE = 16*1024 + 256; \/\/ SSL record size + spare$/;"	m	class:boost::asio::ssl::old::detail::net_buffer	access:private
boost::asio::ssl::old::detail::net_buffer::buf_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  unsigned char buf_[NET_BUF_SIZE];$/;"	m	class:boost::asio::ssl::old::detail::net_buffer	access:private
boost::asio::ssl::old::detail::net_buffer::data_added	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  void data_added(size_t count)$/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:(size_t count)
boost::asio::ssl::old::detail::net_buffer::data_end_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  unsigned char* data_end_;$/;"	m	class:boost::asio::ssl::old::detail::net_buffer	access:private
boost::asio::ssl::old::detail::net_buffer::data_removed	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  void data_removed(size_t count) $/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:(size_t count)
boost::asio::ssl::old::detail::net_buffer::data_start_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  unsigned char* data_start_;$/;"	m	class:boost::asio::ssl::old::detail::net_buffer	access:private
boost::asio::ssl::old::detail::net_buffer::get_data_len	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  size_t get_data_len() { return (data_end_ - data_start_); }    $/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
boost::asio::ssl::old::detail::net_buffer::get_data_start	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  unsigned char* get_data_start() { return data_start_; }$/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
boost::asio::ssl::old::detail::net_buffer::get_unused_len	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  size_t get_unused_len() { return (NET_BUF_SIZE - (data_end_ - buf_)); }    $/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
boost::asio::ssl::old::detail::net_buffer::get_unused_start	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  unsigned char* get_unused_start() { return data_end_; }$/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
boost::asio::ssl::old::detail::net_buffer::has_data	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  bool has_data() { return (data_start_ < data_end_); }$/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
boost::asio::ssl::old::detail::net_buffer::net_buffer	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  net_buffer()$/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
boost::asio::ssl::old::detail::net_buffer::reset	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  void reset() { data_start_ = buf_; data_end_ = buf_; }               $/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
boost::asio::ssl::old::detail::openssl_context_service	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^class openssl_context_service$/;"	c	namespace:boost::asio::ssl::old::detail	inherits:boost::asio::detail::service_base
boost::asio::ssl::old::detail::openssl_context_service::add_verify_path	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code add_verify_path(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& path, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_context_service::create	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  void create(impl_type& impl, context_base::method m)$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, context_base::method m)
boost::asio::ssl::old::detail::openssl_context_service::destroy	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  void destroy(impl_type& impl)$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl)
boost::asio::ssl::old::detail::openssl_context_service::impl_type	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  typedef ::SSL_CTX* impl_type;$/;"	t	class:boost::asio::ssl::old::detail::openssl_context_service	access:public
boost::asio::ssl::old::detail::openssl_context_service::init_	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::asio::ssl::detail::openssl_init<> init_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_context_service	access:private
boost::asio::ssl::old::detail::openssl_context_service::load_verify_file	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code load_verify_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_context_service::null	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  static impl_type null()$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:()
boost::asio::ssl::old::detail::openssl_context_service::openssl_context_service	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  openssl_context_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ssl::old::detail::openssl_context_service::password_callback	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  static int password_callback(char* buf, int size, int purpose, void* data)$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(char* buf, int size, int purpose, void* data)
boost::asio::ssl::old::detail::openssl_context_service::password_callback_type	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^      context_base::password_purpose)> password_callback_type;$/;"	t	class:boost::asio::ssl::old::detail::openssl_context_service	access:public
boost::asio::ssl::old::detail::openssl_context_service::set_options	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code set_options(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, context_base::options o, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_context_service::set_password_callback	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code set_password_callback(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, Password_Callback callback, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_context_service::set_verify_mode	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code set_verify_mode(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, context_base::verify_mode v, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_context_service::shutdown_service	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:()
boost::asio::ssl::old::detail::openssl_context_service::use_certificate_chain_file	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code use_certificate_chain_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_context_service::use_certificate_file	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code use_certificate_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_context_service::use_private_key_file	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code use_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_context_service::use_rsa_private_key_file	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code use_rsa_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_context_service::use_tmp_dh_file	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code use_tmp_dh_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_operation	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^class openssl_operation$/;"	c	namespace:boost::asio::ssl::old::detail
boost::asio::ssl::old::detail::openssl_operation::async_read_handler	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  void async_read_handler(const boost::system::error_code& error,$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:(const boost::system::error_code& error, size_t bytes_recvd)
boost::asio::ssl::old::detail::openssl_operation::async_user_handler	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int async_user_handler(boost::system::error_code error, int rc)$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:(boost::system::error_code error, int rc)
boost::asio::ssl::old::detail::openssl_operation::async_write_handler	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  void async_write_handler(bool is_operation_done, int rc, $/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:(bool is_operation_done, int rc, const boost::system::error_code& error, size_t bytes_sent)
boost::asio::ssl::old::detail::openssl_operation::do_async_read	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int do_async_read()$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:()
boost::asio::ssl::old::detail::openssl_operation::do_async_write	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int  do_async_write(bool is_operation_done, int rc) $/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:(bool is_operation_done, int rc)
boost::asio::ssl::old::detail::openssl_operation::do_sync_read	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int do_sync_read()$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:()
boost::asio::ssl::old::detail::openssl_operation::do_sync_write	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int do_sync_write(bool is_operation_done, int rc)$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:(bool is_operation_done, int rc)
boost::asio::ssl::old::detail::openssl_operation::handler_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int_handler_func handler_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::int_handler_func	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^    int_handler_func;$/;"	t	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::openssl_operation	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  openssl_operation(ssl_primitive_func primitive,$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:public	signature:(ssl_primitive_func primitive, Stream& socket, net_buffer& recv_buf, SSL* session, BIO* ssl_bio)
boost::asio::ssl::old::detail::openssl_operation::openssl_operation	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  openssl_operation(ssl_primitive_func primitive,$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:public	signature:(ssl_primitive_func primitive, Stream& socket, net_buffer& recv_buf, SSL* session, BIO* ssl_bio, user_handler_func handler, boost::asio::io_service::strand& strand )
boost::asio::ssl::old::detail::openssl_operation::primitive_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  ssl_primitive_func  primitive_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::read_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  read_func  read_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::read_func	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  typedef boost::function<int ()> read_func;$/;"	t	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::recv_buf_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  net_buffer& recv_buf_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::send_buf_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  net_buffer send_buf_; \/\/ buffers for network IO$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::session_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  SSL*    session_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::socket_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  Stream& socket_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::ssl_bio_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  BIO*    ssl_bio_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::start	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int start()$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:public	signature:()
boost::asio::ssl::old::detail::openssl_operation::strand_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  boost::asio::io_service::strand* strand_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::sync_user_handler	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int sync_user_handler(const boost::system::error_code& error, int rc)$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:(const boost::system::error_code& error, int rc)
boost::asio::ssl::old::detail::openssl_operation::user_handler_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  user_handler_func  user_handler_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::write_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  write_func  write_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_operation::write_func	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  typedef boost::function<int (bool, int)> write_func;$/;"	t	class:boost::asio::ssl::old::detail::openssl_operation	access:private
boost::asio::ssl::old::detail::openssl_stream_service	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^class openssl_stream_service$/;"	c	namespace:boost::asio::ssl::old::detail	inherits:boost::asio::detail::service_base
boost::asio::ssl::old::detail::openssl_stream_service::async_handshake	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void async_handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, Handler handler)
boost::asio::ssl::old::detail::openssl_stream_service::async_read_some	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void async_read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Mutable_Buffers& buffers, Handler handler)
boost::asio::ssl::old::detail::openssl_stream_service::async_shutdown	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void async_shutdown(impl_type& impl, Stream& next_layer, Handler handler)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, Handler handler)
boost::asio::ssl::old::detail::openssl_stream_service::async_write_some	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void async_write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Const_Buffers& buffers, Handler handler)
boost::asio::ssl::old::detail::openssl_stream_service::base_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  class base_handler$/;"	c	class:boost::asio::ssl::old::detail::openssl_stream_service	access:private
boost::asio::ssl::old::detail::openssl_stream_service::base_handler::base_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    base_handler(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ssl::old::detail::openssl_stream_service::base_handler::do_func	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    void do_func(const boost::system::error_code& error, size_t size)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:public	signature:(const boost::system::error_code& error, size_t size)
boost::asio::ssl::old::detail::openssl_stream_service::base_handler::func_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    func_t func_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:private
boost::asio::ssl::old::detail::openssl_stream_service::base_handler::func_t	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^      void (const boost::system::error_code&, size_t)> func_t;$/;"	t	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:public
boost::asio::ssl::old::detail::openssl_stream_service::base_handler::io_service_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:private
boost::asio::ssl::old::detail::openssl_stream_service::base_handler::op_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    openssl_operation<Stream>* op_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:private
boost::asio::ssl::old::detail::openssl_stream_service::base_handler::set_func	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    void set_func(func_t func) { func_ = func; }$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:public	signature:(func_t func)
boost::asio::ssl::old::detail::openssl_stream_service::base_handler::set_operation	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    void set_operation(openssl_operation<Stream>* op) { op_ = op; }$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:public	signature:(openssl_operation<Stream>* op)
boost::asio::ssl::old::detail::openssl_stream_service::base_handler::work_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:private
boost::asio::ssl::old::detail::openssl_stream_service::base_handler::~base_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    ~base_handler()$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:public	signature:()
boost::asio::ssl::old::detail::openssl_stream_service::create	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void create(impl_type& impl, Stream& \/*next_layer*\/,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& , basic_context<Context_Service>& context)
boost::asio::ssl::old::detail::openssl_stream_service::destroy	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void destroy(impl_type& impl, Stream& \/*next_layer*\/)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& )
boost::asio::ssl::old::detail::openssl_stream_service::handshake	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  boost::system::error_code handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_stream_service::handshake_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  class handshake_handler$/;"	c	class:boost::asio::ssl::old::detail::openssl_stream_service	inherits:base_handler	access:private
boost::asio::ssl::old::detail::openssl_stream_service::handshake_handler::handler_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::handshake_handler	access:private
boost::asio::ssl::old::detail::openssl_stream_service::handshake_handler::handler_impl	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    void handler_impl(const boost::system::error_code& error, size_t)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::handshake_handler	access:private	signature:(const boost::system::error_code& error, size_t)
boost::asio::ssl::old::detail::openssl_stream_service::handshake_handler::handshake_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    handshake_handler(Handler handler, boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::handshake_handler	access:public	signature:(Handler handler, boost::asio::io_service& io_service)
boost::asio::ssl::old::detail::openssl_stream_service::impl_struct	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  typedef struct impl_struct$/;"	s	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public
boost::asio::ssl::old::detail::openssl_stream_service::impl_struct::ext_bio	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    ::BIO* ext_bio;$/;"	m	struct:boost::asio::ssl::old::detail::openssl_stream_service::impl_struct	access:public
boost::asio::ssl::old::detail::openssl_stream_service::impl_struct::recv_buf	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    net_buffer recv_buf;$/;"	m	struct:boost::asio::ssl::old::detail::openssl_stream_service::impl_struct	access:public
boost::asio::ssl::old::detail::openssl_stream_service::impl_struct::ssl	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    ::SSL* ssl;$/;"	m	struct:boost::asio::ssl::old::detail::openssl_stream_service::impl_struct	access:public
boost::asio::ssl::old::detail::openssl_stream_service::impl_type	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  } * impl_type;$/;"	t	class:boost::asio::ssl::old::detail::openssl_stream_service	typeref:struct:boost::asio::ssl::old::detail::openssl_stream_service::impl_struct	access:public
boost::asio::ssl::old::detail::openssl_stream_service::in_avail	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  std::size_t in_avail(impl_type& \/*impl*\/, Stream& \/*next_layer*\/,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& , Stream& , boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_stream_service::io_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  class io_handler $/;"	c	class:boost::asio::ssl::old::detail::openssl_stream_service	inherits:base_handler	access:private
boost::asio::ssl::old::detail::openssl_stream_service::io_handler::handler_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::io_handler	access:private
boost::asio::ssl::old::detail::openssl_stream_service::io_handler::handler_impl	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    void handler_impl(const boost::system::error_code& error, size_t size)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::io_handler	access:private	signature:(const boost::system::error_code& error, size_t size)
boost::asio::ssl::old::detail::openssl_stream_service::io_handler::io_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    io_handler(Handler handler, boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::io_handler	access:public	signature:(Handler handler, boost::asio::io_service& io_service)
boost::asio::ssl::old::detail::openssl_stream_service::max_buffer_size	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  enum { max_buffer_size = INT_MAX };$/;"	e	enum:boost::asio::ssl::old::detail::openssl_stream_service::__anon2
boost::asio::ssl::old::detail::openssl_stream_service::mutex_type	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  typedef boost::asio::detail::mutex mutex_type;$/;"	t	class:boost::asio::ssl::old::detail::openssl_stream_service	access:private
boost::asio::ssl::old::detail::openssl_stream_service::null	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  impl_type null() const$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:() const
boost::asio::ssl::old::detail::openssl_stream_service::openssl_stream_service	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  explicit openssl_stream_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ssl::old::detail::openssl_stream_service::peek	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  std::size_t peek(impl_type& \/*impl*\/, Stream& \/*next_layer*\/,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& , Stream& , const Mutable_Buffers& , boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_stream_service::read_some	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  std::size_t read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Mutable_Buffers& buffers, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_stream_service::shutdown	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  boost::system::error_code shutdown(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, boost::system::error_code& ec)
boost::asio::ssl::old::detail::openssl_stream_service::shutdown_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  class shutdown_handler$/;"	c	class:boost::asio::ssl::old::detail::openssl_stream_service	inherits:base_handler	access:private
boost::asio::ssl::old::detail::openssl_stream_service::shutdown_handler::handler_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::shutdown_handler	access:private
boost::asio::ssl::old::detail::openssl_stream_service::shutdown_handler::handler_impl	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    void handler_impl(const boost::system::error_code& error, size_t)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::shutdown_handler	access:private	signature:(const boost::system::error_code& error, size_t)
boost::asio::ssl::old::detail::openssl_stream_service::shutdown_handler::shutdown_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    shutdown_handler(Handler handler, boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::shutdown_handler	access:public	signature:(Handler handler, boost::asio::io_service& io_service)
boost::asio::ssl::old::detail::openssl_stream_service::shutdown_service	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:()
boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  struct ssl_wrap$/;"	s	class:boost::asio::ssl::old::detail::openssl_stream_service	access:private
boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap::SSL_accept	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    static int SSL_accept(SSL *ssl)$/;"	f	struct:boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap	access:public	signature:(SSL *ssl)
boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap::SSL_connect	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    static int SSL_connect(SSL *ssl)$/;"	f	struct:boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap	access:public	signature:(SSL *ssl)
boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap::SSL_shutdown	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    static int SSL_shutdown(SSL *ssl)$/;"	f	struct:boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap	access:public	signature:(SSL *ssl)
boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap::ssl_mutex_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    static Mutex ssl_mutex_;$/;"	m	struct:boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap	access:public
boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap::ssl_mutex_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^Mutex openssl_stream_service::ssl_wrap<Mutex>::ssl_mutex_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap
boost::asio::ssl::old::detail::openssl_stream_service::strand_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  boost::asio::io_service::strand strand_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service	access:private
boost::asio::ssl::old::detail::openssl_stream_service::write_some	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  std::size_t write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Const_Buffers& buffers, boost::system::error_code& ec)
boost::asio::ssl::old::detail::ssl_primitive_func	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^typedef boost::function<int (::SSL*)> ssl_primitive_func; $/;"	t	namespace:boost::asio::ssl::old::detail
boost::asio::ssl::old::detail::user_handler_func	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  user_handler_func;$/;"	t	namespace:boost::asio::ssl::old::detail
boost::asio::ssl::old::stream	/usr/include/boost/asio/ssl/old/stream.hpp	/^class stream$/;"	c	namespace:boost::asio::ssl::old	inherits:stream_base,boost::noncopyable
boost::asio::ssl::old::stream::async_handshake	/usr/include/boost/asio/ssl/old/stream.hpp	/^  void async_handshake(handshake_type type, HandshakeHandler handler)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(handshake_type type, HandshakeHandler handler)
boost::asio::ssl::old::stream::async_read_some	/usr/include/boost/asio/ssl/old/stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::ssl::old::stream::async_shutdown	/usr/include/boost/asio/ssl/old/stream.hpp	/^  void async_shutdown(ShutdownHandler handler)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(ShutdownHandler handler)
boost::asio::ssl::old::stream::async_write_some	/usr/include/boost/asio/ssl/old/stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::ssl::old::stream::get_io_service	/usr/include/boost/asio/ssl/old/stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
boost::asio::ssl::old::stream::handshake	/usr/include/boost/asio/ssl/old/stream.hpp	/^  boost::system::error_code handshake(handshake_type type,$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(handshake_type type, boost::system::error_code& ec)
boost::asio::ssl::old::stream::handshake	/usr/include/boost/asio/ssl/old/stream.hpp	/^  void handshake(handshake_type type)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(handshake_type type)
boost::asio::ssl::old::stream::impl	/usr/include/boost/asio/ssl/old/stream.hpp	/^  impl_type impl()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
boost::asio::ssl::old::stream::impl_	/usr/include/boost/asio/ssl/old/stream.hpp	/^  impl_type impl_;$/;"	m	class:boost::asio::ssl::old::stream	access:private
boost::asio::ssl::old::stream::impl_type	/usr/include/boost/asio/ssl/old/stream.hpp	/^  typedef typename service_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::old::stream	access:public
boost::asio::ssl::old::stream::in_avail	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
boost::asio::ssl::old::stream::in_avail	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::ssl::old::stream::lowest_layer	/usr/include/boost/asio/ssl/old/stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:() const
boost::asio::ssl::old::stream::lowest_layer	/usr/include/boost/asio/ssl/old/stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
boost::asio::ssl::old::stream::lowest_layer_type	/usr/include/boost/asio/ssl/old/stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::ssl::old::stream	access:public
boost::asio::ssl::old::stream::next_layer	/usr/include/boost/asio/ssl/old/stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
boost::asio::ssl::old::stream::next_layer_	/usr/include/boost/asio/ssl/old/stream.hpp	/^  Stream next_layer_;$/;"	m	class:boost::asio::ssl::old::stream	access:private
boost::asio::ssl::old::stream::next_layer_type	/usr/include/boost/asio/ssl/old/stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::ssl::old::stream	access:public
boost::asio::ssl::old::stream::peek	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::ssl::old::stream::peek	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::ssl::old::stream::read_some	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::ssl::old::stream::read_some	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::ssl::old::stream::service_	/usr/include/boost/asio/ssl/old/stream.hpp	/^  service_type& service_;$/;"	m	class:boost::asio::ssl::old::stream	access:private
boost::asio::ssl::old::stream::service_type	/usr/include/boost/asio/ssl/old/stream.hpp	/^  typedef Service service_type;$/;"	t	class:boost::asio::ssl::old::stream	access:public
boost::asio::ssl::old::stream::shutdown	/usr/include/boost/asio/ssl/old/stream.hpp	/^  boost::system::error_code shutdown(boost::system::error_code& ec)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::ssl::old::stream::shutdown	/usr/include/boost/asio/ssl/old/stream.hpp	/^  void shutdown()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
boost::asio::ssl::old::stream::stream	/usr/include/boost/asio/ssl/old/stream.hpp	/^  explicit stream(Arg& arg, basic_context<Context_Service>& context)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(Arg& arg, basic_context<Context_Service>& context)
boost::asio::ssl::old::stream::write_some	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::ssl::old::stream::write_some	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::ssl::old::stream::~stream	/usr/include/boost/asio/ssl/old/stream.hpp	/^  ~stream()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
boost::asio::ssl::old::stream_service	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^class stream_service$/;"	c	namespace:boost::asio::ssl::old	inherits:boost::asio::io_service::service
boost::asio::ssl::old::stream_service::async_handshake	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void async_handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, HandshakeHandler handler)
boost::asio::ssl::old::stream_service::async_read_some	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void async_read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::ssl::old::stream_service::async_shutdown	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void async_shutdown(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, ShutdownHandler handler)
boost::asio::ssl::old::stream_service::async_write_some	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void async_write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::ssl::old::stream_service::create	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void create(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, basic_context<Context_Service>& context)
boost::asio::ssl::old::stream_service::destroy	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void destroy(impl_type& impl, Stream& next_layer)$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer)
boost::asio::ssl::old::stream_service::handshake	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  boost::system::error_code handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, boost::system::error_code& ec)
boost::asio::ssl::old::stream_service::id	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::ssl::old::stream_service	access:public
boost::asio::ssl::old::stream_service::impl_type	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  typedef implementation_defined impl_type;$/;"	t	class:boost::asio::ssl::old::stream_service	access:public
boost::asio::ssl::old::stream_service::impl_type	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  typedef service_impl_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::old::stream_service	access:public
boost::asio::ssl::old::stream_service::in_avail	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  std::size_t in_avail(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, boost::system::error_code& ec)
boost::asio::ssl::old::stream_service::null	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  impl_type null() const$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:() const
boost::asio::ssl::old::stream_service::peek	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  std::size_t peek(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::ssl::old::stream_service::read_some	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  std::size_t read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::ssl::old::stream_service::service_impl_	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::ssl::old::stream_service	access:private
boost::asio::ssl::old::stream_service::service_impl_type	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  typedef old::detail::openssl_stream_service service_impl_type;$/;"	t	class:boost::asio::ssl::old::stream_service	access:private
boost::asio::ssl::old::stream_service::shutdown	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  boost::system::error_code shutdown(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, boost::system::error_code& ec)
boost::asio::ssl::old::stream_service::shutdown_service	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::old::stream_service	access:private	signature:()
boost::asio::ssl::old::stream_service::stream_service	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  explicit stream_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ssl::old::stream_service::write_some	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  std::size_t write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::ssl::rfc2818_verification	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^class rfc2818_verification$/;"	c	namespace:boost::asio::ssl
boost::asio::ssl::rfc2818_verification::host_	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^  std::string host_;$/;"	m	class:boost::asio::ssl::rfc2818_verification	access:private
boost::asio::ssl::rfc2818_verification::match_pattern	/usr/include/boost/asio/ssl/impl/rfc2818_verification.ipp	/^bool rfc2818_verification::match_pattern(const char* pattern,$/;"	f	class:boost::asio::ssl::rfc2818_verification	signature:(const char* pattern, std::size_t pattern_length, const char* host)
boost::asio::ssl::rfc2818_verification::match_pattern	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^  BOOST_ASIO_DECL static bool match_pattern(const char* pattern,$/;"	p	class:boost::asio::ssl::rfc2818_verification	access:private	signature:(const char* pattern, std::size_t pattern_length, const char* host)
boost::asio::ssl::rfc2818_verification::operator ()	/usr/include/boost/asio/ssl/impl/rfc2818_verification.ipp	/^bool rfc2818_verification::operator()($/;"	f	class:boost::asio::ssl::rfc2818_verification	signature:( bool preverified, verify_context& ctx) const
boost::asio::ssl::rfc2818_verification::operator ()	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^  BOOST_ASIO_DECL bool operator()(bool preverified, verify_context& ctx) const;$/;"	p	class:boost::asio::ssl::rfc2818_verification	access:public	signature:(bool preverified, verify_context& ctx) const
boost::asio::ssl::rfc2818_verification::result_type	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^  typedef bool result_type;$/;"	t	class:boost::asio::ssl::rfc2818_verification	access:public
boost::asio::ssl::rfc2818_verification::rfc2818_verification	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^  explicit rfc2818_verification(const std::string& host)$/;"	f	class:boost::asio::ssl::rfc2818_verification	access:public	signature:(const std::string& host)
boost::asio::ssl::stream_base	/usr/include/boost/asio/ssl/stream_base.hpp	/^class stream_base$/;"	c	namespace:boost::asio::ssl
boost::asio::ssl::stream_base::client	/usr/include/boost/asio/ssl/stream_base.hpp	/^    client,$/;"	e	enum:boost::asio::ssl::stream_base::handshake_type
boost::asio::ssl::stream_base::dummy_	/usr/include/boost/asio/ssl/stream_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::ssl::stream_base	access:private
boost::asio::ssl::stream_base::handshake_type	/usr/include/boost/asio/ssl/stream_base.hpp	/^  enum handshake_type$/;"	g	class:boost::asio::ssl::stream_base	access:public
boost::asio::ssl::stream_base::server	/usr/include/boost/asio/ssl/stream_base.hpp	/^    server$/;"	e	enum:boost::asio::ssl::stream_base::handshake_type
boost::asio::ssl::stream_base::~stream_base	/usr/include/boost/asio/ssl/stream_base.hpp	/^  ~stream_base()$/;"	f	class:boost::asio::ssl::stream_base	access:protected	signature:()
boost::asio::ssl::verify_client_once	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_client_once = SSL_VERIFY_CLIENT_ONCE;$/;"	m	namespace:boost::asio::ssl
boost::asio::ssl::verify_client_once	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_client_once = implementation_defined;$/;"	m	namespace:boost::asio::ssl
boost::asio::ssl::verify_context	/usr/include/boost/asio/ssl/verify_context.hpp	/^class verify_context$/;"	c	namespace:boost::asio::ssl	inherits:noncopyable
boost::asio::ssl::verify_context::handle_	/usr/include/boost/asio/ssl/verify_context.hpp	/^  native_handle_type handle_;$/;"	m	class:boost::asio::ssl::verify_context	access:private
boost::asio::ssl::verify_context::native_handle	/usr/include/boost/asio/ssl/verify_context.hpp	/^  native_handle_type native_handle()$/;"	f	class:boost::asio::ssl::verify_context	access:public	signature:()
boost::asio::ssl::verify_context::native_handle_type	/usr/include/boost/asio/ssl/verify_context.hpp	/^  typedef X509_STORE_CTX* native_handle_type;$/;"	t	class:boost::asio::ssl::verify_context	access:public
boost::asio::ssl::verify_context::verify_context	/usr/include/boost/asio/ssl/verify_context.hpp	/^  explicit verify_context(native_handle_type handle)$/;"	f	class:boost::asio::ssl::verify_context	access:public	signature:(native_handle_type handle)
boost::asio::ssl::verify_fail_if_no_peer_cert	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_fail_if_no_peer_cert = SSL_VERIFY_FAIL_IF_NO_PEER_CERT;$/;"	m	namespace:boost::asio::ssl
boost::asio::ssl::verify_fail_if_no_peer_cert	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_fail_if_no_peer_cert = implementation_defined;$/;"	m	namespace:boost::asio::ssl
boost::asio::ssl::verify_mode	/usr/include/boost/asio/ssl/verify_mode.hpp	/^typedef int verify_mode;$/;"	t	namespace:boost::asio::ssl
boost::asio::ssl::verify_none	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_none = SSL_VERIFY_NONE;$/;"	m	namespace:boost::asio::ssl
boost::asio::ssl::verify_none	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_none = implementation_defined;$/;"	m	namespace:boost::asio::ssl
boost::asio::ssl::verify_peer	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_peer = SSL_VERIFY_PEER;$/;"	m	namespace:boost::asio::ssl
boost::asio::ssl::verify_peer	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_peer = implementation_defined;$/;"	m	namespace:boost::asio::ssl
boost::asio::steady_timer	/usr/include/boost/asio/steady_timer.hpp	/^typedef basic_waitable_timer<chrono::steady_clock> steady_timer;$/;"	t	namespace:boost::asio
boost::asio::strand	/usr/include/boost/asio/strand.hpp	/^typedef boost::asio::io_service::strand strand;$/;"	t	namespace:boost::asio
boost::asio::stream_socket_service	/usr/include/boost/asio/stream_socket_service.hpp	/^class stream_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::stream_socket_service::assign	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_handle_type& native_socket, boost::system::error_code& ec)
boost::asio::stream_socket_service::async_connect	/usr/include/boost/asio/stream_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, BOOST_ASIO_MOVE_ARG(ConnectHandler) handler)
boost::asio::stream_socket_service::async_receive	/usr/include/boost/asio/stream_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::stream_socket_service::async_send	/usr/include/boost/asio/stream_socket_service.hpp	/^  void async_send(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::stream_socket_service::at_mark	/usr/include/boost/asio/stream_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::stream_socket_service::available	/usr/include/boost/asio/stream_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::stream_socket_service::bind	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::stream_socket_service::cancel	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::stream_socket_service::close	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::stream_socket_service::connect	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::stream_socket_service::construct	/usr/include/boost/asio/stream_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::stream_socket_service::destroy	/usr/include/boost/asio/stream_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::stream_socket_service::endpoint_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::get_option	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
boost::asio::stream_socket_service::id	/usr/include/boost/asio/stream_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::implementation_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::implementation_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::io_control	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
boost::asio::stream_socket_service::is_open	/usr/include/boost/asio/stream_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::stream_socket_service::local_endpoint	/usr/include/boost/asio/stream_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::stream_socket_service::move_assign	/usr/include/boost/asio/stream_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, stream_socket_service& other_service, implementation_type& other_impl)
boost::asio::stream_socket_service::move_construct	/usr/include/boost/asio/stream_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::stream_socket_service::native	/usr/include/boost/asio/stream_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::stream_socket_service::native_handle	/usr/include/boost/asio/stream_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::stream_socket_service::native_handle_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::native_handle_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::native_non_blocking	/usr/include/boost/asio/stream_socket_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::stream_socket_service::native_non_blocking	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::stream_socket_service::native_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::native_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::non_blocking	/usr/include/boost/asio/stream_socket_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::stream_socket_service::non_blocking	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
boost::asio::stream_socket_service::open	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::stream_socket_service::protocol_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::receive	/usr/include/boost/asio/stream_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::stream_socket_service::remote_endpoint	/usr/include/boost/asio/stream_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::stream_socket_service::send	/usr/include/boost/asio/stream_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::stream_socket_service::service_impl_	/usr/include/boost/asio/stream_socket_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::stream_socket_service	access:private
boost::asio::stream_socket_service::service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
boost::asio::stream_socket_service::service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
boost::asio::stream_socket_service::set_option	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::stream_socket_service::shutdown	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
boost::asio::stream_socket_service::shutdown_service	/usr/include/boost/asio/stream_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::stream_socket_service	access:private	signature:()
boost::asio::stream_socket_service::stream_socket_service	/usr/include/boost/asio/stream_socket_service.hpp	/^  explicit stream_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::streambuf	/usr/include/boost/asio/streambuf.hpp	/^typedef basic_streambuf<> streambuf;$/;"	t	namespace:boost::asio
boost::asio::system_timer	/usr/include/boost/asio/system_timer.hpp	/^typedef basic_waitable_timer<chrono::system_clock> system_timer;$/;"	t	namespace:boost::asio
boost::asio::time_traits	/usr/include/boost/asio/time_traits.hpp	/^struct time_traits<boost::posix_time::ptime>$/;"	s	namespace:boost::asio
boost::asio::time_traits::add	/usr/include/boost/asio/time_traits.hpp	/^  static time_type add(const time_type& t, const duration_type& d)$/;"	f	struct:boost::asio::time_traits	access:public	signature:(const time_type& t, const duration_type& d)
boost::asio::time_traits::duration_type	/usr/include/boost/asio/time_traits.hpp	/^  typedef boost::posix_time::time_duration duration_type;$/;"	t	struct:boost::asio::time_traits	access:public
boost::asio::time_traits::less_than	/usr/include/boost/asio/time_traits.hpp	/^  static bool less_than(const time_type& t1, const time_type& t2)$/;"	f	struct:boost::asio::time_traits	access:public	signature:(const time_type& t1, const time_type& t2)
boost::asio::time_traits::now	/usr/include/boost/asio/time_traits.hpp	/^  static time_type now()$/;"	f	struct:boost::asio::time_traits	access:public	signature:()
boost::asio::time_traits::subtract	/usr/include/boost/asio/time_traits.hpp	/^  static duration_type subtract(const time_type& t1, const time_type& t2)$/;"	f	struct:boost::asio::time_traits	access:public	signature:(const time_type& t1, const time_type& t2)
boost::asio::time_traits::time_type	/usr/include/boost/asio/time_traits.hpp	/^  typedef boost::posix_time::ptime time_type;$/;"	t	struct:boost::asio::time_traits	access:public
boost::asio::time_traits::to_posix_duration	/usr/include/boost/asio/time_traits.hpp	/^  static boost::posix_time::time_duration to_posix_duration($/;"	f	struct:boost::asio::time_traits	access:public	signature:( const duration_type& d)
boost::asio::transfer_at_least	/usr/include/boost/asio/completion_condition.hpp	/^inline detail::transfer_at_least_t transfer_at_least(std::size_t minimum)$/;"	f	namespace:boost::asio	signature:(std::size_t minimum)
boost::asio::transfer_at_least	/usr/include/boost/asio/completion_condition.hpp	/^unspecified transfer_at_least(std::size_t minimum);$/;"	p	namespace:boost::asio	signature:(std::size_t minimum)
boost::asio::transfer_exactly	/usr/include/boost/asio/completion_condition.hpp	/^inline detail::transfer_exactly_t transfer_exactly(std::size_t size)$/;"	f	namespace:boost::asio	signature:(std::size_t size)
boost::asio::transfer_exactly	/usr/include/boost/asio/completion_condition.hpp	/^unspecified transfer_exactly(std::size_t size);$/;"	p	namespace:boost::asio	signature:(std::size_t size)
boost::asio::use_service	/usr/include/boost/asio/impl/io_service.hpp	/^inline Service& use_service(io_service& ios)$/;"	f	namespace:boost::asio	signature:(io_service& ios)
boost::asio::use_service	/usr/include/boost/asio/impl/io_service.hpp	/^inline detail::io_service_impl& use_service<detail::io_service_impl>($/;"	f	namespace:boost::asio	signature:( io_service& ios)
boost::asio::use_service	/usr/include/boost/asio/io_service.hpp	/^template <typename Service> Service& use_service(io_service& ios);$/;"	p	namespace:boost::asio	signature:(io_service& ios)
boost::asio::wait_traits	/usr/include/boost/asio/wait_traits.hpp	/^struct wait_traits$/;"	s	namespace:boost::asio
boost::asio::wait_traits::to_wait_duration	/usr/include/boost/asio/wait_traits.hpp	/^  static typename Clock::duration to_wait_duration($/;"	f	struct:boost::asio::wait_traits	access:public	signature:( const typename Clock::duration& d)
boost::asio::waitable_timer_service	/usr/include/boost/asio/waitable_timer_service.hpp	/^class waitable_timer_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::waitable_timer_service::async_wait	/usr/include/boost/asio/waitable_timer_service.hpp	/^  void async_wait(implementation_type& impl,$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl, BOOST_ASIO_MOVE_ARG(WaitHandler) handler)
boost::asio::waitable_timer_service::cancel	/usr/include/boost/asio/waitable_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::waitable_timer_service::cancel_one	/usr/include/boost/asio/waitable_timer_service.hpp	/^  std::size_t cancel_one(implementation_type& impl,$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::waitable_timer_service::clock_type	/usr/include/boost/asio/waitable_timer_service.hpp	/^  typedef Clock clock_type;$/;"	t	class:boost::asio::waitable_timer_service	access:public
boost::asio::waitable_timer_service::construct	/usr/include/boost/asio/waitable_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl)
boost::asio::waitable_timer_service::destroy	/usr/include/boost/asio/waitable_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl)
boost::asio::waitable_timer_service::duration	/usr/include/boost/asio/waitable_timer_service.hpp	/^  typedef typename clock_type::duration duration;$/;"	t	class:boost::asio::waitable_timer_service	access:public
boost::asio::waitable_timer_service::expires_at	/usr/include/boost/asio/waitable_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl, const time_point& expiry_time, boost::system::error_code& ec)
boost::asio::waitable_timer_service::expires_at	/usr/include/boost/asio/waitable_timer_service.hpp	/^  time_point expires_at(const implementation_type& impl) const$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(const implementation_type& impl) const
boost::asio::waitable_timer_service::expires_from_now	/usr/include/boost/asio/waitable_timer_service.hpp	/^  duration expires_from_now(const implementation_type& impl) const$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(const implementation_type& impl) const
boost::asio::waitable_timer_service::expires_from_now	/usr/include/boost/asio/waitable_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl, const duration& expiry_time, boost::system::error_code& ec)
boost::asio::waitable_timer_service::id	/usr/include/boost/asio/waitable_timer_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::waitable_timer_service	access:public
boost::asio::waitable_timer_service::implementation_type	/usr/include/boost/asio/waitable_timer_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::waitable_timer_service	access:public
boost::asio::waitable_timer_service::implementation_type	/usr/include/boost/asio/waitable_timer_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::waitable_timer_service	access:public
boost::asio::waitable_timer_service::service_impl_	/usr/include/boost/asio/waitable_timer_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::waitable_timer_service	access:private
boost::asio::waitable_timer_service::service_impl_type	/usr/include/boost/asio/waitable_timer_service.hpp	/^    detail::chrono_time_traits<Clock, WaitTraits> > service_impl_type;$/;"	t	class:boost::asio::waitable_timer_service	access:private
boost::asio::waitable_timer_service::shutdown_service	/usr/include/boost/asio/waitable_timer_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::waitable_timer_service	access:private	signature:()
boost::asio::waitable_timer_service::time_point	/usr/include/boost/asio/waitable_timer_service.hpp	/^  typedef typename clock_type::time_point time_point;$/;"	t	class:boost::asio::waitable_timer_service	access:public
boost::asio::waitable_timer_service::traits_type	/usr/include/boost/asio/waitable_timer_service.hpp	/^  typedef WaitTraits traits_type;$/;"	t	class:boost::asio::waitable_timer_service	access:public
boost::asio::waitable_timer_service::wait	/usr/include/boost/asio/waitable_timer_service.hpp	/^  void wait(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::waitable_timer_service::waitable_timer_service	/usr/include/boost/asio/waitable_timer_service.hpp	/^  explicit waitable_timer_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows	/usr/include/boost/asio/windows/basic_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/object_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/object_handle_service.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/random_access_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/stream_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows::basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^class basic_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_io_object
boost::asio::windows::basic_handle::assign	/usr/include/boost/asio/windows/basic_handle.hpp	/^  boost::system::error_code assign(const native_handle_type& handle,$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(const native_handle_type& handle, boost::system::error_code& ec)
boost::asio::windows::basic_handle::assign	/usr/include/boost/asio/windows/basic_handle.hpp	/^  void assign(const native_handle_type& handle)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(const native_handle_type& handle)
boost::asio::windows::basic_handle::basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  basic_handle(basic_handle&& other)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(basic_handle&& other)
boost::asio::windows::basic_handle::basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  basic_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& handle)
boost::asio::windows::basic_handle::basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  explicit basic_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows::basic_handle::cancel	/usr/include/boost/asio/windows/basic_handle.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::system::error_code& ec)
boost::asio::windows::basic_handle::cancel	/usr/include/boost/asio/windows/basic_handle.hpp	/^  void cancel()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
boost::asio::windows::basic_handle::close	/usr/include/boost/asio/windows/basic_handle.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::system::error_code& ec)
boost::asio::windows::basic_handle::close	/usr/include/boost/asio/windows/basic_handle.hpp	/^  void close()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
boost::asio::windows::basic_handle::is_open	/usr/include/boost/asio/windows/basic_handle.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:() const
boost::asio::windows::basic_handle::lowest_layer	/usr/include/boost/asio/windows/basic_handle.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:() const
boost::asio::windows::basic_handle::lowest_layer	/usr/include/boost/asio/windows/basic_handle.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
boost::asio::windows::basic_handle::lowest_layer_type	/usr/include/boost/asio/windows/basic_handle.hpp	/^  typedef basic_handle<HandleService> lowest_layer_type;$/;"	t	class:boost::asio::windows::basic_handle	access:public
boost::asio::windows::basic_handle::native	/usr/include/boost/asio/windows/basic_handle.hpp	/^  native_type native()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
boost::asio::windows::basic_handle::native_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  native_handle_type native_handle()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
boost::asio::windows::basic_handle::native_handle_type	/usr/include/boost/asio/windows/basic_handle.hpp	/^  typedef typename HandleService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::windows::basic_handle	access:public
boost::asio::windows::basic_handle::native_type	/usr/include/boost/asio/windows/basic_handle.hpp	/^  typedef typename HandleService::native_handle_type native_type;$/;"	t	class:boost::asio::windows::basic_handle	access:public
boost::asio::windows::basic_handle::operator =	/usr/include/boost/asio/windows/basic_handle.hpp	/^  basic_handle& operator=(basic_handle&& other)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(basic_handle&& other)
boost::asio::windows::basic_handle::~basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  ~basic_handle()$/;"	f	class:boost::asio::windows::basic_handle	access:protected	signature:()
boost::asio::windows::basic_object_handle	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^class basic_object_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_handle
boost::asio::windows::basic_object_handle::async_wait	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  void async_wait(WaitHandler handler)$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:(WaitHandler handler)
boost::asio::windows::basic_object_handle::basic_object_handle	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  basic_object_handle(basic_object_handle&& other)$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:(basic_object_handle&& other)
boost::asio::windows::basic_object_handle::basic_object_handle	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  basic_object_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& native_handle)
boost::asio::windows::basic_object_handle::basic_object_handle	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  explicit basic_object_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows::basic_object_handle::native_handle_type	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  typedef typename ObjectHandleService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::windows::basic_object_handle	access:public
boost::asio::windows::basic_object_handle::operator =	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  basic_object_handle& operator=(basic_object_handle&& other)$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:(basic_object_handle&& other)
boost::asio::windows::basic_object_handle::wait	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  void wait()$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:()
boost::asio::windows::basic_object_handle::wait	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  void wait(boost::system::error_code& ec)$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:(boost::system::error_code& ec)
boost::asio::windows::basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^class basic_random_access_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_handle
boost::asio::windows::basic_random_access_handle::async_read_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  void async_read_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::windows::basic_random_access_handle::async_write_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  void async_write_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::windows::basic_random_access_handle::basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  basic_random_access_handle(basic_random_access_handle&& other)$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(basic_random_access_handle&& other)
boost::asio::windows::basic_random_access_handle::basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  basic_random_access_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& handle)
boost::asio::windows::basic_random_access_handle::basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  explicit basic_random_access_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows::basic_random_access_handle::native_handle_type	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^    native_handle_type;$/;"	t	class:boost::asio::windows::basic_random_access_handle	access:public
boost::asio::windows::basic_random_access_handle::native_type	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  typedef typename RandomAccessHandleService::native_handle_type native_type;$/;"	t	class:boost::asio::windows::basic_random_access_handle	access:public
boost::asio::windows::basic_random_access_handle::operator =	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  basic_random_access_handle& operator=(basic_random_access_handle&& other)$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(basic_random_access_handle&& other)
boost::asio::windows::basic_random_access_handle::read_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t read_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const MutableBufferSequence& buffers)
boost::asio::windows::basic_random_access_handle::read_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t read_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::basic_random_access_handle::write_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t write_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const ConstBufferSequence& buffers)
boost::asio::windows::basic_random_access_handle::write_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t write_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^class basic_stream_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_handle
boost::asio::windows::basic_stream_handle::async_read_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::windows::basic_stream_handle::async_write_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::windows::basic_stream_handle::basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  basic_stream_handle(basic_stream_handle&& other)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(basic_stream_handle&& other)
boost::asio::windows::basic_stream_handle::basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  basic_stream_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(boost::asio::io_service& io_service, const native_handle_type& handle)
boost::asio::windows::basic_stream_handle::basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  explicit basic_stream_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows::basic_stream_handle::native_handle_type	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  typedef typename StreamHandleService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::windows::basic_stream_handle	access:public
boost::asio::windows::basic_stream_handle::native_type	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  typedef typename StreamHandleService::native_handle_type native_type;$/;"	t	class:boost::asio::windows::basic_stream_handle	access:public
boost::asio::windows::basic_stream_handle::operator =	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  basic_stream_handle& operator=(basic_stream_handle&& other)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(basic_stream_handle&& other)
boost::asio::windows::basic_stream_handle::read_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::windows::basic_stream_handle::read_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::basic_stream_handle::write_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::windows::basic_stream_handle::write_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::object_handle	/usr/include/boost/asio/windows/object_handle.hpp	/^typedef basic_object_handle<> object_handle;$/;"	t	namespace:boost::asio::windows
boost::asio::windows::object_handle_service	/usr/include/boost/asio/windows/object_handle_service.hpp	/^class object_handle_service$/;"	c	namespace:boost::asio::windows	inherits:boost::asio::io_service::service
boost::asio::windows::object_handle_service::assign	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
boost::asio::windows::object_handle_service::async_wait	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void async_wait(implementation_type& impl,$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, BOOST_ASIO_MOVE_ARG(WaitHandler) handler)
boost::asio::windows::object_handle_service::cancel	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::windows::object_handle_service::close	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::windows::object_handle_service::construct	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::object_handle_service::destroy	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::object_handle_service::id	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::windows::object_handle_service	access:public
boost::asio::windows::object_handle_service::implementation_type	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::windows::object_handle_service	access:public
boost::asio::windows::object_handle_service::implementation_type	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::windows::object_handle_service	access:public
boost::asio::windows::object_handle_service::is_open	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(const implementation_type& impl) const
boost::asio::windows::object_handle_service::move_assign	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, object_handle_service& other_service, implementation_type& other_impl)
boost::asio::windows::object_handle_service::move_construct	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::windows::object_handle_service::native_handle	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::object_handle_service::native_handle_type	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::windows::object_handle_service	access:public
boost::asio::windows::object_handle_service::native_handle_type	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::windows::object_handle_service	access:public
boost::asio::windows::object_handle_service::object_handle_service	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  explicit object_handle_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows::object_handle_service::service_impl_	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::windows::object_handle_service	access:private
boost::asio::windows::object_handle_service::service_impl_type	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  typedef detail::win_object_handle_service service_impl_type;$/;"	t	class:boost::asio::windows::object_handle_service	access:private
boost::asio::windows::object_handle_service::shutdown_service	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::windows::object_handle_service	access:private	signature:()
boost::asio::windows::object_handle_service::wait	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void wait(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::windows::overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^class overlapped_ptr$/;"	c	namespace:boost::asio::windows	inherits:noncopyable
boost::asio::windows::overlapped_ptr::complete	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::windows::overlapped_ptr::get	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  OVERLAPPED* get()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
boost::asio::windows::overlapped_ptr::get	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  const OVERLAPPED* get() const$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:() const
boost::asio::windows::overlapped_ptr::impl_	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  detail::win_iocp_overlapped_ptr impl_;$/;"	m	class:boost::asio::windows::overlapped_ptr	access:private
boost::asio::windows::overlapped_ptr::overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  explicit overlapped_ptr(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:(boost::asio::io_service& io_service, BOOST_ASIO_MOVE_ARG(Handler) handler)
boost::asio::windows::overlapped_ptr::overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  overlapped_ptr()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
boost::asio::windows::overlapped_ptr::release	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  OVERLAPPED* release()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
boost::asio::windows::overlapped_ptr::reset	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  void reset()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
boost::asio::windows::overlapped_ptr::reset	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  void reset(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:(boost::asio::io_service& io_service, BOOST_ASIO_MOVE_ARG(Handler) handler)
boost::asio::windows::overlapped_ptr::~overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  ~overlapped_ptr()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
boost::asio::windows::random_access_handle	/usr/include/boost/asio/windows/random_access_handle.hpp	/^typedef basic_random_access_handle<> random_access_handle;$/;"	t	namespace:boost::asio::windows
boost::asio::windows::random_access_handle_service	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^class random_access_handle_service$/;"	c	namespace:boost::asio::windows	inherits:boost::asio::io_service::service
boost::asio::windows::random_access_handle_service::assign	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
boost::asio::windows::random_access_handle_service::async_read_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::windows::random_access_handle_service::async_write_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::windows::random_access_handle_service::cancel	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::windows::random_access_handle_service::close	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::windows::random_access_handle_service::construct	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::random_access_handle_service::destroy	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::random_access_handle_service::id	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::windows::random_access_handle_service	access:public
boost::asio::windows::random_access_handle_service::implementation_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
boost::asio::windows::random_access_handle_service::implementation_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
boost::asio::windows::random_access_handle_service::is_open	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(const implementation_type& impl) const
boost::asio::windows::random_access_handle_service::move_assign	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, random_access_handle_service& other_service, implementation_type& other_impl)
boost::asio::windows::random_access_handle_service::move_construct	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::windows::random_access_handle_service::native	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::random_access_handle_service::native_handle	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::random_access_handle_service::native_handle_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
boost::asio::windows::random_access_handle_service::native_handle_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
boost::asio::windows::random_access_handle_service::native_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
boost::asio::windows::random_access_handle_service::native_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
boost::asio::windows::random_access_handle_service::random_access_handle_service	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  explicit random_access_handle_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows::random_access_handle_service::read_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  std::size_t read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::random_access_handle_service::service_impl_	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::windows::random_access_handle_service	access:private
boost::asio::windows::random_access_handle_service::service_impl_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef detail::win_iocp_handle_service service_impl_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:private
boost::asio::windows::random_access_handle_service::shutdown_service	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::windows::random_access_handle_service	access:private	signature:()
boost::asio::windows::random_access_handle_service::write_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  std::size_t write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::stream_handle	/usr/include/boost/asio/windows/stream_handle.hpp	/^typedef basic_stream_handle<> stream_handle;$/;"	t	namespace:boost::asio::windows
boost::asio::windows::stream_handle_service	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^class stream_handle_service$/;"	c	namespace:boost::asio::windows	inherits:boost::asio::io_service::service
boost::asio::windows::stream_handle_service::assign	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const native_handle_type& handle, boost::system::error_code& ec)
boost::asio::windows::stream_handle_service::async_read_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
boost::asio::windows::stream_handle_service::async_write_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
boost::asio::windows::stream_handle_service::cancel	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::windows::stream_handle_service::close	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::windows::stream_handle_service::construct	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::stream_handle_service::destroy	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::stream_handle_service::id	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::windows::stream_handle_service	access:public
boost::asio::windows::stream_handle_service::implementation_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
boost::asio::windows::stream_handle_service::implementation_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
boost::asio::windows::stream_handle_service::is_open	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(const implementation_type& impl) const
boost::asio::windows::stream_handle_service::move_assign	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, stream_handle_service& other_service, implementation_type& other_impl)
boost::asio::windows::stream_handle_service::move_construct	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
boost::asio::windows::stream_handle_service::native	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::stream_handle_service::native_handle	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::stream_handle_service::native_handle_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
boost::asio::windows::stream_handle_service::native_handle_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
boost::asio::windows::stream_handle_service::native_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
boost::asio::windows::stream_handle_service::native_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
boost::asio::windows::stream_handle_service::read_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::stream_handle_service::service_impl_	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::windows::stream_handle_service	access:private
boost::asio::windows::stream_handle_service::service_impl_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef detail::win_iocp_handle_service service_impl_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:private
boost::asio::windows::stream_handle_service::shutdown_service	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::windows::stream_handle_service	access:private	signature:()
boost::asio::windows::stream_handle_service::stream_handle_service	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  explicit stream_handle_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows::stream_handle_service::write_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::write	/usr/include/boost/asio/impl/write.hpp	/^inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers)$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers)
boost::asio::write	/usr/include/boost/asio/impl/write.hpp	/^inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition)
boost::asio::write	/usr/include/boost/asio/impl/write.hpp	/^inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::write	/usr/include/boost/asio/impl/write.hpp	/^inline std::size_t write(SyncWriteStream& s,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, boost::asio::basic_streambuf<Allocator>& b)
boost::asio::write	/usr/include/boost/asio/impl/write.hpp	/^inline std::size_t write(SyncWriteStream& s,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
boost::asio::write	/usr/include/boost/asio/impl/write.hpp	/^inline std::size_t write(SyncWriteStream& s,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, boost::asio::basic_streambuf<Allocator>& b, boost::system::error_code& ec)
boost::asio::write	/usr/include/boost/asio/impl/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::write	/usr/include/boost/asio/impl/write.hpp	/^std::size_t write(SyncWriteStream& s,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b);$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b, boost::system::error_code& ec)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers);$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b)
boost::asio::write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
boost::asio::write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, boost::system::error_code& ec)
boost::asio::write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers)
boost::asio::write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition)
boost::asio::write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::write_at	/usr/include/boost/asio/impl/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::write_at	/usr/include/boost/asio/impl/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, boost::system::error_code& ec)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::date_time	/usr/include/boost/asio/detail/date_time_fwd.hpp	/^namespace date_time {$/;"	n	namespace:boost
boost::posix_time	/usr/include/boost/asio/detail/date_time_fwd.hpp	/^namespace posix_time {$/;"	n	namespace:boost
boost::system	/usr/include/boost/asio/error.hpp	/^namespace system {$/;"	n	namespace:boost
boost::system	/usr/include/boost/asio/ssl/error.hpp	/^namespace system {$/;"	n	namespace:boost
boost::system::is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::addrinfo_errors>$/;"	s	namespace:boost::system
boost::system::is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::basic_errors>$/;"	s	namespace:boost::system
boost::system::is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::misc_errors>$/;"	s	namespace:boost::system
boost::system::is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::netdb_errors>$/;"	s	namespace:boost::system
boost::system::is_error_code_enum	/usr/include/boost/asio/ssl/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::ssl_errors>$/;"	s	namespace:boost::system
boost::system::is_error_code_enum::value	/usr/include/boost/asio/error.hpp	/^  static const bool value = true;$/;"	m	struct:boost::system::is_error_code_enum	access:public
boost::system::is_error_code_enum::value	/usr/include/boost/asio/ssl/error.hpp	/^  static const bool value = true;$/;"	m	struct:boost::system::is_error_code_enum	access:public
boost_asio_detail_posix_thread_function	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^void* boost_asio_detail_posix_thread_function(void* arg)$/;"	f	namespace:boost::asio::detail	signature:(void* arg)
boost_asio_detail_posix_thread_function	/usr/include/boost/asio/detail/posix_thread.hpp	/^  BOOST_ASIO_DECL void* boost_asio_detail_posix_thread_function(void* arg);$/;"	p	signature:(void* arg)
boost_asio_detail_posix_thread_function	/usr/include/boost/asio/detail/posix_thread.hpp	/^  friend void* boost_asio_detail_posix_thread_function(void* arg);$/;"	p	class:boost::asio::detail::posix_thread	access:friend	signature:(void* arg)
boost_asio_handler_alloc_helpers	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^namespace boost_asio_handler_alloc_helpers {$/;"	n
boost_asio_handler_alloc_helpers::allocate	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^inline void* allocate(std::size_t s, Handler& h)$/;"	f	namespace:boost_asio_handler_alloc_helpers	signature:(std::size_t s, Handler& h)
boost_asio_handler_alloc_helpers::deallocate	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^inline void deallocate(void* p, std::size_t s, Handler& h)$/;"	f	namespace:boost_asio_handler_alloc_helpers	signature:(void* p, std::size_t s, Handler& h)
boost_asio_handler_invoke_helpers	/usr/include/boost/asio/detail/handler_invoke_helpers.hpp	/^namespace boost_asio_handler_invoke_helpers {$/;"	n
boost_asio_handler_invoke_helpers::invoke	/usr/include/boost/asio/detail/handler_invoke_helpers.hpp	/^inline void invoke(Function& function, Context& context)$/;"	f	namespace:boost_asio_handler_invoke_helpers	signature:(Function& function, Context& context)
boost_asio_handler_invoke_helpers::invoke	/usr/include/boost/asio/detail/handler_invoke_helpers.hpp	/^inline void invoke(const Function& function, Context& context)$/;"	f	namespace:boost_asio_handler_invoke_helpers	signature:(const Function& function, Context& context)
broadcast	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL static address_v4 broadcast($/;"	p	class:boost::asio::ip::address_v4	access:public	signature:( const address_v4& addr, const address_v4& mask)
broadcast	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 broadcast()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
broadcast	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4 address_v4::broadcast(const address_v4& addr, const address_v4& mask)$/;"	f	class:boost::asio::ip::address_v4	signature:(const address_v4& addr, const address_v4& mask)
broadcast	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_BROADCAST> broadcast;$/;"	t	class:boost::asio::socket_base	access:public
broadcast	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined broadcast;$/;"	t	class:boost::asio::socket_base	access:public
broken_pipe	/usr/include/boost/asio/error.hpp	/^  broken_pipe = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
bucket_type	/usr/include/boost/asio/detail/hash_map.hpp	/^  struct bucket_type$/;"	s	class:boost::asio::detail::hash_map	access:private
buckets_	/usr/include/boost/asio/detail/hash_map.hpp	/^  bucket_type* buckets_;$/;"	m	class:boost::asio::detail::hash_map	access:private
buf	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^typedef iovec buf;$/;"	t	namespace:boost::asio::detail::descriptor_ops
buf	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^typedef WSABUF buf;$/;"	t	namespace:boost::asio::detail::socket_ops	file:
buf	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^typedef iovec buf;$/;"	t	namespace:boost::asio::detail::socket_ops	file:
buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef WSABUF buf;$/;"	t	namespace:boost::asio::detail::socket_ops
buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef iovec buf;$/;"	t	namespace:boost::asio::detail::socket_ops
buf_	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer buf_;$/;"	m	class:boost::asio::null_buffers	access:private
buf_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  unsigned char buf_[NET_BUF_SIZE];$/;"	m	class:boost::asio::ssl::old::detail::net_buffer	access:private
buffer	/usr/include/boost/asio/buffer.hpp	/^buffer(boost::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^buffer(boost::array<PodType, N>& data, std::size_t max_size_in_bytes)$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer($/;"	f	namespace:boost::asio	signature:( const std::basic_string<Elem, Traits, Allocator>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer($/;"	f	namespace:boost::asio	signature:( const std::basic_string<Elem, Traits, Allocator>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer($/;"	f	namespace:boost::asio	signature:( const std::vector<PodType, Allocator>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer($/;"	f	namespace:boost::asio	signature:( const std::vector<PodType, Allocator>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(boost::array<const PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(boost::array<const PodType, N>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(boost::array<const PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(boost::array<const PodType, N>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const boost::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(const boost::array<PodType, N>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const boost::array<PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(const boost::array<PodType, N>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const const_buffer& b,$/;"	f	namespace:boost::asio	signature:(const const_buffer& b, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const std::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(const std::array<PodType, N>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const std::array<PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(const std::array<PodType, N>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const void* data,$/;"	f	namespace:boost::asio	signature:(const void* data, std::size_t size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(std::array<const PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(std::array<const PodType, N>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(std::array<const PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(std::array<const PodType, N>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(boost::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(boost::array<PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(const mutable_buffer& b,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(std::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(std::array<PodType, N>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(std::array<PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(std::array<PodType, N>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(std::vector<PodType, Allocator>& data)$/;"	f	namespace:boost::asio	signature:(std::vector<PodType, Allocator>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(std::vector<PodType, Allocator>& data,$/;"	f	namespace:boost::asio	signature:(std::vector<PodType, Allocator>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(void* data, std::size_t size_in_bytes)$/;"	f	namespace:boost::asio	signature:(void* data, std::size_t size_in_bytes)
buffer_	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::vector<char_type, Allocator> buffer_;$/;"	m	class:boost::asio::basic_streambuf	access:private
buffer_	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  Buffer& buffer_;$/;"	m	class:boost::asio::detail::buffer_resize_guard	access:private
buffer_	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  std::vector<byte_type> buffer_;$/;"	m	class:boost::asio::detail::buffered_stream_storage	access:private
buffer_	/usr/include/boost/asio/impl/read.hpp	/^    boost::asio::mutable_buffer buffer_;$/;"	m	class:boost::asio::detail::read_op	access:public
buffer_	/usr/include/boost/asio/impl/read_at.hpp	/^    boost::asio::mutable_buffer buffer_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
buffer_	/usr/include/boost/asio/impl/write.hpp	/^    boost::asio::const_buffer buffer_;$/;"	m	class:boost::asio::detail::write_op	access:public
buffer_	/usr/include/boost/asio/impl/write.hpp	/^    boost::asio::mutable_buffer buffer_;$/;"	m	class:boost::asio::detail::write_op	access:public
buffer_	/usr/include/boost/asio/impl/write_at.hpp	/^    boost::asio::const_buffer buffer_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
buffer_	/usr/include/boost/asio/impl/write_at.hpp	/^    boost::asio::mutable_buffer buffer_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
buffer_cast	/usr/include/boost/asio/buffer.hpp	/^inline PointerToPodType buffer_cast(const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b)
buffer_cast	/usr/include/boost/asio/buffer.hpp	/^inline PointerToPodType buffer_cast(const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b)
buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^  friend const void* boost::asio::detail::buffer_cast_helper($/;"	p	class:boost::asio::const_buffer::boost::asio::detail	access:friend	signature:( const const_buffer& b)
buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^  friend void* boost::asio::detail::buffer_cast_helper($/;"	p	class:boost::asio::mutable_buffer::boost::asio::detail	access:friend	signature:( const mutable_buffer& b)
buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^const void* buffer_cast_helper(const const_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const const_buffer&)
buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^inline const void* buffer_cast_helper(const const_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const const_buffer& b)
buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^inline void* buffer_cast_helper(const mutable_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const mutable_buffer& b)
buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^void* buffer_cast_helper(const mutable_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const mutable_buffer&)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const const_buffer& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const const_buffers_1& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const const_buffers_1& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const mutable_buffer& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const mutable_buffer& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const mutable_buffers_1& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const mutable_buffers_1& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const ConstBufferSequence& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const const_buffer& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const const_buffer& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const const_buffers_1& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const const_buffers_1& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const mutable_buffer& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const mutable_buffer& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const mutable_buffers_1& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const mutable_buffers_1& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const ConstBufferSequence& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const ConstBufferSequence& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const const_buffer& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const const_buffer& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const const_buffers_1& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const const_buffers_1& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const mutable_buffer& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const mutable_buffer& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const mutable_buffers_1& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_copy(const mutable_buffers_1& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& target, const mutable_buffers_1& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const ConstBufferSequence& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const ConstBufferSequence& source, std::size_t max_bytes_to_copy)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_copy(const MutableBufferSequence& target,$/;"	f	namespace:boost::asio	signature:(const MutableBufferSequence& target, const const_buffer& source)
buffer_copy	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_copy(const mutable_buffer& target,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& target, const ConstBufferSequence& source)
buffer_debug_check	/usr/include/boost/asio/buffer.hpp	/^  buffer_debug_check(Iterator iter)$/;"	f	class:boost::asio::detail::buffer_debug_check	access:public	signature:(Iterator iter)
buffer_debug_check	/usr/include/boost/asio/buffer.hpp	/^class buffer_debug_check$/;"	c	namespace:boost::asio::detail
buffer_delta	/usr/include/boost/asio/basic_streambuf.hpp	/^  enum { buffer_delta = 128 };$/;"	e	enum:boost::asio::basic_streambuf::__anon5
buffer_resize_guard	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  buffer_resize_guard(Buffer& buffer)$/;"	f	class:boost::asio::detail::buffer_resize_guard	access:public	signature:(Buffer& buffer)
buffer_resize_guard	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^class buffer_resize_guard$/;"	c	namespace:boost::asio::detail
buffer_sequence_adapter	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  explicit buffer_sequence_adapter(const Buffers& buffer_sequence)$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:(const Buffers& buffer_sequence)
buffer_sequence_adapter	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^class buffer_sequence_adapter$/;"	c	namespace:boost::asio::detail	inherits:buffer_sequence_adapter_base
buffer_sequence_adapter_base	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^class buffer_sequence_adapter_base$/;"	c	namespace:boost::asio::detail
buffer_size	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum { buffer_size = 512 };$/;"	e	enum:boost::asio::basic_socket_streambuf::__anon4
buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const BufferSequence& b)$/;"	f	namespace:boost::asio	signature:(const BufferSequence& b)
buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b)
buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const const_buffers_1& b)$/;"	f	namespace:boost::asio	signature:(const const_buffers_1& b)
buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b)
buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const mutable_buffers_1& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffers_1& b)
buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^  friend std::size_t boost::asio::detail::buffer_size_helper($/;"	p	class:boost::asio::const_buffer::boost::asio::detail	access:friend	signature:( const const_buffer& b)
buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^  friend std::size_t boost::asio::detail::buffer_size_helper($/;"	p	class:boost::asio::mutable_buffer::boost::asio::detail	access:friend	signature:( const mutable_buffer& b)
buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size_helper(const const_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const const_buffer& b)
buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size_helper(const mutable_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const mutable_buffer& b)
buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_size_helper(const const_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const const_buffer&)
buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_size_helper(const mutable_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const mutable_buffer&)
buffer_type	/usr/include/boost/asio/buffer.hpp	/^  typedef const_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
buffer_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^      BufferSequence, ByteType>::buffer_type buffer_type;$/;"	t	class:boost::asio::buffers_iterator	access:private
buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef const_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper	access:public
buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef mutable_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper	access:public
buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef typename helper::buffer_type buffer_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types	access:public
buffer_types	/usr/include/boost/asio/buffer.hpp	/^struct buffer_types$/;"	s	namespace:boost::asio::detail	inherits:buffer_types_base
buffer_types_base	/usr/include/boost/asio/buffer.hpp	/^struct buffer_types_base<false>$/;"	s	namespace:boost::asio::detail
buffer_types_base	/usr/include/boost/asio/buffer.hpp	/^struct buffer_types_base<true>$/;"	s	namespace:boost::asio::detail
buffered_read_stream	/usr/include/boost/asio/buffered_read_stream.hpp	/^  buffered_read_stream(Arg& a, std::size_t buffer_size)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(Arg& a, std::size_t buffer_size)
buffered_read_stream	/usr/include/boost/asio/buffered_read_stream.hpp	/^  explicit buffered_read_stream(Arg& a)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(Arg& a)
buffered_read_stream	/usr/include/boost/asio/buffered_read_stream.hpp	/^class buffered_read_stream$/;"	c	namespace:boost::asio	inherits:noncopyable
buffered_stream	/usr/include/boost/asio/buffered_stream.hpp	/^  explicit buffered_stream(Arg& a)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(Arg& a)
buffered_stream	/usr/include/boost/asio/buffered_stream.hpp	/^  explicit buffered_stream(Arg& a, std::size_t read_buffer_size,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(Arg& a, std::size_t read_buffer_size, std::size_t write_buffer_size)
buffered_stream	/usr/include/boost/asio/buffered_stream.hpp	/^class buffered_stream$/;"	c	namespace:boost::asio	inherits:noncopyable
buffered_stream_storage	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  explicit buffered_stream_storage(std::size_t buffer_capacity)$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:(std::size_t buffer_capacity)
buffered_stream_storage	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^class buffered_stream_storage$/;"	c	namespace:boost::asio::detail
buffered_write_stream	/usr/include/boost/asio/buffered_write_stream.hpp	/^  buffered_write_stream(Arg& a, std::size_t buffer_size)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(Arg& a, std::size_t buffer_size)
buffered_write_stream	/usr/include/boost/asio/buffered_write_stream.hpp	/^  explicit buffered_write_stream(Arg& a)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(Arg& a)
buffered_write_stream	/usr/include/boost/asio/buffered_write_stream.hpp	/^class buffered_write_stream$/;"	c	namespace:boost::asio	inherits:noncopyable
buffers	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  native_buffer_type* buffers()$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:()
buffers_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
buffers_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    ConstBufferSequence buffers_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
buffers_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffers buffers_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
buffers_	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::descriptor_read_op_base	access:private
buffers_	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::descriptor_write_op_base	access:private
buffers_	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::reactive_socket_recv_op_base	access:private
buffers_	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:private
buffers_	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::reactive_socket_recvmsg_op_base	access:private
buffers_	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::reactive_socket_send_op_base	access:private
buffers_	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::reactive_socket_sendto_op_base	access:private
buffers_	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_handle_read_op	access:private
buffers_	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_handle_write_op	access:private
buffers_	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recv_op	access:private
buffers_	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:private
buffers_	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:private
buffers_	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_socket_send_op	access:private
buffers_	/usr/include/boost/asio/impl/read.hpp	/^      mutable_buffer, MutableBufferSequence> buffers_;$/;"	m	class:boost::asio::detail::read_op	access:public
buffers_	/usr/include/boost/asio/impl/read.hpp	/^    boost::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::read_op	access:public
buffers_	/usr/include/boost/asio/impl/read.hpp	/^    std::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::read_op	access:public
buffers_	/usr/include/boost/asio/impl/read_at.hpp	/^      mutable_buffer, MutableBufferSequence> buffers_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
buffers_	/usr/include/boost/asio/impl/read_at.hpp	/^    boost::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
buffers_	/usr/include/boost/asio/impl/read_at.hpp	/^    std::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
buffers_	/usr/include/boost/asio/impl/write.hpp	/^      const_buffer, ConstBufferSequence> buffers_;$/;"	m	class:boost::asio::detail::write_op	access:public
buffers_	/usr/include/boost/asio/impl/write.hpp	/^    boost::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::write_op	access:public
buffers_	/usr/include/boost/asio/impl/write.hpp	/^    std::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::write_op	access:public
buffers_	/usr/include/boost/asio/impl/write_at.hpp	/^      const_buffer, ConstBufferSequence> buffers_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
buffers_	/usr/include/boost/asio/impl/write_at.hpp	/^    boost::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
buffers_	/usr/include/boost/asio/impl/write_at.hpp	/^    std::array<Elem, 2> buffers_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
buffers_	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:boost::asio::ssl::detail::read_op	access:private
buffers_	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:boost::asio::ssl::detail::write_op	access:private
buffers_begin	/usr/include/boost/asio/buffers_iterator.hpp	/^inline buffers_iterator<BufferSequence> buffers_begin($/;"	f	namespace:boost::asio	signature:( const BufferSequence& buffers)
buffers_end	/usr/include/boost/asio/buffers_iterator.hpp	/^inline buffers_iterator<BufferSequence> buffers_end($/;"	f	namespace:boost::asio	signature:( const BufferSequence& buffers)
buffers_iterator	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator()$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:()
buffers_iterator	/usr/include/boost/asio/buffers_iterator.hpp	/^class buffers_iterator$/;"	c	namespace:boost::asio
buffers_iterator_types	/usr/include/boost/asio/buffers_iterator.hpp	/^  struct buffers_iterator_types$/;"	s	namespace:boost::asio::detail
buffers_iterator_types_helper	/usr/include/boost/asio/buffers_iterator.hpp	/^  struct buffers_iterator_types_helper<false>$/;"	s	namespace:boost::asio::detail
buffers_iterator_types_helper	/usr/include/boost/asio/buffers_iterator.hpp	/^  struct buffers_iterator_types_helper<true>$/;"	s	namespace:boost::asio::detail
byte_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    struct byte_type$/;"	s	struct:boost::asio::detail::buffers_iterator_types_helper	access:public
byte_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef typename helper::template byte_type<ByteType>::type byte_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types	access:public
byte_type	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  typedef unsigned char byte_type;$/;"	t	class:boost::asio::detail::buffered_stream_storage	access:public
bytes_readable	/usr/include/boost/asio/detail/io_control.hpp	/^  bytes_readable()$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:()
bytes_readable	/usr/include/boost/asio/detail/io_control.hpp	/^  bytes_readable(std::size_t value)$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:(std::size_t value)
bytes_readable	/usr/include/boost/asio/detail/io_control.hpp	/^class bytes_readable$/;"	c	namespace:boost::asio::detail::io_control
bytes_readable	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  typedef boost::asio::detail::io_control::bytes_readable bytes_readable;$/;"	t	class:boost::asio::posix::descriptor_base	access:public
bytes_readable	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  typedef implementation_defined bytes_readable;$/;"	t	class:boost::asio::posix::descriptor_base	access:public
bytes_readable	/usr/include/boost/asio/socket_base.hpp	/^  typedef boost::asio::detail::io_control::bytes_readable bytes_readable;$/;"	t	class:boost::asio::socket_base	access:public
bytes_readable	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined bytes_readable;$/;"	t	class:boost::asio::socket_base	access:public
bytes_transferred	/usr/include/boost/asio/placeholders.hpp	/^unspecified bytes_transferred;$/;"	m	namespace:boost::asio::placeholders
bytes_transferred_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  std::size_t bytes_transferred_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
bytes_transferred_	/usr/include/boost/asio/detail/reactor_op.hpp	/^  std::size_t bytes_transferred_;$/;"	m	class:boost::asio::detail::reactor_op	access:public
bytes_transferred_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  std::size_t bytes_transferred_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
bytes_type	/usr/include/boost/asio/ip/address_v4.hpp	/^  typedef array<unsigned char, 4> bytes_type;$/;"	t	class:boost::asio::ip::address_v4	access:public
bytes_type	/usr/include/boost/asio/ip/address_v6.hpp	/^  typedef array<unsigned char, 16> bytes_type;$/;"	t	class:boost::asio::ip::address_v6	access:public
calculate_hash_value	/usr/include/boost/asio/detail/hash_map.hpp	/^inline std::size_t calculate_hash_value(SOCKET s)$/;"	f	namespace:boost::asio::detail	signature:(SOCKET s)
calculate_hash_value	/usr/include/boost/asio/detail/hash_map.hpp	/^inline std::size_t calculate_hash_value(int i)$/;"	f	namespace:boost::asio::detail	signature:(int i)
calculate_hash_value	/usr/include/boost/asio/detail/hash_map.hpp	/^inline std::size_t calculate_hash_value(void* p)$/;"	f	namespace:boost::asio::detail	signature:(void* p)
call	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^  virtual std::string call(std::size_t size,$/;"	f	class:boost::asio::ssl::detail::password_callback	access:public	signature:(std::size_t size, context_base::password_purpose purpose)
call	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^  virtual std::string call(std::size_t size,$/;"	p	class:boost::asio::ssl::detail::password_callback_base	access:public	signature:(std::size_t size, context_base::password_purpose purpose)
call	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^  virtual bool call(bool preverified, verify_context& ctx) = 0;$/;"	p	class:boost::asio::ssl::detail::verify_callback_base	access:public	signature:(bool preverified, verify_context& ctx)
call	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^  virtual bool call(bool preverified, verify_context& ctx)$/;"	f	class:boost::asio::ssl::detail::verify_callback	access:public	signature:(bool preverified, verify_context& ctx)
call_accept	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline socket_type call_accept(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, socket_addr_type* addr, std::size_t* addrlen)
call_bind	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int call_bind(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, const socket_addr_type* addr, std::size_t addrlen)
call_connect	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int call_connect(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, const socket_addr_type* addr, std::size_t addrlen)
call_getpeername	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int call_getpeername(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, socket_addr_type* addr, std::size_t* addrlen)
call_getsockname	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int call_getsockname(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, socket_addr_type* addr, std::size_t* addrlen)
call_getsockopt	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int call_getsockopt(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, int level, int optname, void* optval, std::size_t* optlen)
call_handler	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:boost::asio::ssl::detail::handshake_op	access:public	signature:(Handler& handler, const boost::system::error_code& ec, const std::size_t&) const
call_handler	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:boost::asio::ssl::detail::read_op	access:public	signature:(Handler& handler, const boost::system::error_code& ec, const std::size_t& bytes_transferred) const
call_handler	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:boost::asio::ssl::detail::shutdown_op	access:public	signature:(Handler& handler, const boost::system::error_code& ec, const std::size_t&) const
call_handler	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:boost::asio::ssl::detail::write_op	access:public	signature:(Handler& handler, const boost::system::error_code& ec, const std::size_t& bytes_transferred) const
call_run_thread	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::call_run_thread(select_reactor* reactor)$/;"	f	class:boost::asio::detail::select_reactor	signature:(select_reactor* reactor)
call_run_thread	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL static void call_run_thread(select_reactor* reactor);$/;"	p	class:boost::asio::detail::select_reactor	access:private	signature:(select_reactor* reactor)
call_setsockopt	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int call_setsockopt(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, int level, int optname, const void* optval, std::size_t optlen)
call_stack	/usr/include/boost/asio/detail/call_stack.hpp	/^class call_stack$/;"	c	namespace:boost::asio::detail
callback_	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^  PasswordCallback callback_;$/;"	m	class:boost::asio::ssl::detail::password_callback	access:private
callback_	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^  VerifyCallback callback_;$/;"	m	class:boost::asio::ssl::detail::verify_callback	access:private
can_dispatch	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool can_dispatch()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
can_dispatch	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  bool can_dispatch()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
cancel	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t cancel()$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:()
cancel	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/basic_serial_port.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
cancel	/usr/include/boost/asio/basic_signal_set.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/basic_signal_set.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:()
cancel	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/basic_socket.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
cancel	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
cancel	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t cancel()$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:()
cancel	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^boost::system::error_code reactive_descriptor_service::cancel($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^boost::system::error_code reactive_socket_service_base::cancel($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::cancel($/;"	f	class:boost::asio::detail::resolver_service_base	signature:( resolver_service_base::implementation_type& impl)
cancel	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^boost::system::error_code signal_set_service::cancel($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^boost::system::error_code win_iocp_handle_service::cancel($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^boost::system::error_code win_iocp_socket_service_base::cancel($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^boost::system::error_code win_object_handle_service::cancel($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code cancel(implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code cancel($/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:( base_implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void cancel(implementation_type& impl);$/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:(implementation_type& impl)
cancel	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code cancel(implementation_type& impl,$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code cancel(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code cancel($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:( base_implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code cancel(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  void cancel()$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:()
cancel	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void cancel(implementation_type& impl)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl)
cancel	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void cancel()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
cancel	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/signal_set_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/waitable_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/windows/basic_handle.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/windows/basic_handle.hpp	/^  void cancel()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
cancel	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel_one	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t cancel_one()$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:()
cancel_one	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t cancel_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::system::error_code& ec)
cancel_one	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t cancel_one()$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:()
cancel_one	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t cancel_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(boost::system::error_code& ec)
cancel_one	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t cancel_one(implementation_type& impl,$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel_one	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t cancel_one(implementation_type& impl,$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel_one	/usr/include/boost/asio/waitable_timer_service.hpp	/^  std::size_t cancel_one(implementation_type& impl,$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool cancel_operations(Descriptor descriptor, op_queue<operation>& ops,$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor, op_queue<operation>& ops, const boost::system::error_code& ec = boost::asio::error::operation_aborted)
cancel_ops	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void cancel_ops(socket_type descriptor, per_descriptor_data&);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
cancel_ops	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void cancel_ops(socket_type descriptor,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data)
cancel_ops	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::cancel_ops(socket_type descriptor,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(socket_type descriptor, dev_poll_reactor::per_descriptor_data&)
cancel_ops	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::cancel_ops(socket_type,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(socket_type, epoll_reactor::per_descriptor_data& descriptor_data)
cancel_ops	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::cancel_ops(socket_type,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(socket_type, kqueue_reactor::per_descriptor_data& descriptor_data)
cancel_ops	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::cancel_ops(socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor	signature:(socket_type descriptor, select_reactor::per_descriptor_data&)
cancel_ops	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void cancel_ops(socket_type descriptor,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data)
cancel_ops	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void cancel_ops(socket_type descriptor, per_descriptor_data&);$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
cancel_ops_unlocked	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void cancel_ops_unlocked(socket_type descriptor,$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(socket_type descriptor, const boost::system::error_code& ec)
cancel_ops_unlocked	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::cancel_ops_unlocked(socket_type descriptor,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(socket_type descriptor, const boost::system::error_code& ec)
cancel_ops_unlocked	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::cancel_ops_unlocked(socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor	signature:(socket_type descriptor, const boost::system::error_code& ec)
cancel_ops_unlocked	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void cancel_ops_unlocked(socket_type descriptor,$/;"	p	class:boost::asio::detail::select_reactor	access:private	signature:(socket_type descriptor, const boost::system::error_code& ec)
cancel_timer	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
cancel_timer	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
cancel_timer	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^std::size_t dev_poll_reactor::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled)
cancel_timer	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^std::size_t epoll_reactor::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled)
cancel_timer	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^std::size_t kqueue_reactor::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled)
cancel_timer	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^std::size_t select_reactor::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::select_reactor	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled)
cancel_timer	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^std::size_t timer_queue<time_traits<boost::posix_time::ptime> >::cancel_timer($/;"	f	class:boost::asio::detail::timer_queue	signature:( per_timer_data& timer, op_queue<operation>& ops, std::size_t max_cancelled)
cancel_timer	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^std::size_t win_iocp_io_service::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled)
cancel_timer	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
cancel_timer	/usr/include/boost/asio/detail/select_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
cancel_timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  std::size_t cancel_timer(per_timer_data& timer, op_queue<operation>& ops,$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(per_timer_data& timer, op_queue<operation>& ops, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
cancel_timer	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL std::size_t cancel_timer($/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:( per_timer_data& timer, op_queue<operation>& ops, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
cancel_timer	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& queue, typename timer_queue<Time_Traits>::per_timer_data& timer, std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
cancel_token_	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::resolve_endpoint_op	access:private
cancel_token_	/usr/include/boost/asio/detail/resolve_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::resolve_op	access:private
cancel_token_	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::win_iocp_null_buffers_op	access:private
cancel_token_	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recv_op	access:private
cancel_token_	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:private
cancel_token_	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:private
cancel_token_	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::win_iocp_socket_send_op	access:private
cancel_token_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    socket_ops::shared_cancel_token_type cancel_token_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
canonical_name	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags canonical_name = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
capacity	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type capacity() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
capacity	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
capacity	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:() const
capacity	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
capacity	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:boost::asio::local::detail::endpoint	access:public	signature:() const
capacity_	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  u_int capacity_;$/;"	m	class:boost::asio::detail::win_fd_set_adapter	access:private
character_size	/usr/include/boost/asio/impl/serial_port_base.ipp	/^serial_port_base::character_size::character_size(unsigned int t)$/;"	f	class:boost::asio::serial_port_base::character_size	signature:(unsigned int t)
character_size	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL explicit character_size(unsigned int t = 8);$/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:(unsigned int t = 8)
character_size	/usr/include/boost/asio/serial_port_base.hpp	/^  class character_size$/;"	c	class:boost::asio::serial_port_base	access:public
check_condition	/usr/include/boost/asio/impl/connect.hpp	/^    void check_condition(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::base_from_connect_condition	access:protected	signature:(const boost::system::error_code& ec, Iterator& iter, Iterator& end)
check_condition	/usr/include/boost/asio/impl/connect.hpp	/^    void check_condition(const boost::system::error_code&, Iterator&, Iterator&)$/;"	f	class:boost::asio::detail::base_from_connect_condition	access:protected	signature:(const boost::system::error_code&, Iterator&, Iterator&)
check_for_completion	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^  static std::size_t check_for_completion($/;"	f	class:boost::asio::detail::base_from_completion_cond	access:protected	signature:( const boost::system::error_code& ec, std::size_t total_transferred)
check_for_completion	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^  std::size_t check_for_completion($/;"	f	class:boost::asio::detail::base_from_completion_cond	access:protected	signature:( const boost::system::error_code& ec, std::size_t total_transferred)
chrono_time_traits	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^struct chrono_time_traits$/;"	s	namespace:boost::asio::detail
cleanup	/usr/include/boost/asio/detail/impl/winsock_init.ipp	/^void winsock_init_base::cleanup(data& d)$/;"	f	class:boost::asio::detail::winsock_init_base	signature:(data& d)
cleanup	/usr/include/boost/asio/detail/winsock_init.hpp	/^  BOOST_ASIO_DECL static void cleanup(data& d);$/;"	p	class:boost::asio::detail::winsock_init_base	access:protected	signature:(data& d)
clear	/usr/include/boost/asio/basic_signal_set.hpp	/^  boost::system::error_code clear(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(boost::system::error_code& ec)
clear	/usr/include/boost/asio/basic_signal_set.hpp	/^  void clear()$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:()
clear	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  void clear()$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:()
clear	/usr/include/boost/asio/detail/hash_map.hpp	/^  void clear()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
clear	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^boost::system::error_code signal_set_service::clear($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl, boost::system::error_code& ec)
clear	/usr/include/boost/asio/detail/null_event.hpp	/^  void clear(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
clear	/usr/include/boost/asio/detail/posix_event.hpp	/^  void clear(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
clear	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code clear(implementation_type& impl,$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
clear	/usr/include/boost/asio/detail/win_event.hpp	/^  void clear(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
clear	/usr/include/boost/asio/signal_set_service.hpp	/^  boost::system::error_code clear(implementation_type& impl,$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
clear_last_error	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void clear_last_error()$/;"	f	namespace:boost::asio::detail::socket_ops	signature:()
client	/usr/include/boost/asio/ssl/stream_base.hpp	/^    client,$/;"	e	enum:boost::asio::ssl::stream_base::handshake_type
clock_type	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  typedef Clock clock_type;$/;"	t	class:boost::asio::basic_waitable_timer	access:public
clock_type	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  typedef Clock clock_type;$/;"	t	struct:boost::asio::detail::chrono_time_traits	access:public
clock_type	/usr/include/boost/asio/waitable_timer_service.hpp	/^  typedef Clock clock_type;$/;"	t	class:boost::asio::waitable_timer_service	access:public
close	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/basic_serial_port.hpp	/^  void close()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
close	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/basic_socket.hpp	/^  void close()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
close	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void close()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
close	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  void close()$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:()
close	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    Time, TimeTraits, TimerService>* close()$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:()
close	/usr/include/boost/asio/buffered_read_stream.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void close()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
close	/usr/include/boost/asio/buffered_stream.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/buffered_stream.hpp	/^  void close()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
close	/usr/include/boost/asio/buffered_write_stream.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void close()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
close	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int close(int d, state_type& state,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int close(int d, state_type& state, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^boost::system::error_code reactive_descriptor_service::close($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^boost::system::error_code reactive_socket_service_base::close($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int close(socket_type s, state_type& state,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, bool destruction, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^boost::system::error_code win_iocp_handle_service::close($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^boost::system::error_code win_iocp_socket_service_base::close($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^boost::system::error_code win_object_handle_service::close($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code close(implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code close($/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:( base_implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int close(socket_type s, state_type& state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, bool destruction, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code close(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code close($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:( base_implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code close(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void close()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
close	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/windows/basic_handle.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/windows/basic_handle.hpp	/^  void close()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
close	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close_descriptors	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL void close_descriptors();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:private	signature:()
close_descriptors	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^void eventfd_select_interrupter::close_descriptors()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
close_descriptors	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^void pipe_select_interrupter::close_descriptors()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
close_descriptors	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::close_descriptors()$/;"	f	class:boost::asio::detail::signal_set_service	signature:()
close_descriptors	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^void socket_select_interrupter::close_descriptors()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
close_descriptors	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL void close_descriptors();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:private	signature:()
close_descriptors	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL static void close_descriptors();$/;"	p	class:boost::asio::detail::signal_set_service	access:private	signature:()
close_descriptors	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL void close_descriptors();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:private	signature:()
close_for_destruction	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::close_for_destruction(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:(implementation_type& impl)
close_for_destruction	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::close_for_destruction($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl)
close_for_destruction	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void close_for_destruction(implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl)
close_for_destruction	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void close_for_destruction(base_implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl)
clvref	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^template <typename T> const T& clvref(T);$/;"	p	namespace:boost::asio::detail	signature:(T)
commit	/usr/include/boost/asio/basic_streambuf.hpp	/^  void commit(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:(std::size_t n)
commit	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  void commit()$/;"	f	class:boost::asio::detail::buffer_resize_guard	access:public	signature:()
complete	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  void complete(task_io_service& owner,$/;"	f	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:public	signature:(task_io_service& owner, const boost::system::error_code& ec, std::size_t bytes_transferred)
complete	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  void complete(win_iocp_io_service& owner,$/;"	f	class:boost::asio::detail::win_iocp_operation	access:public	signature:(win_iocp_io_service& owner, const boost::system::error_code& ec, std::size_t bytes_transferred)
complete	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
complete	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
complete_iocp_accept	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void complete_iocp_accept(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, void* output_buffer, DWORD address_length, socket_addr_type* addr, std::size_t* addrlen, socket_type new_socket, boost::system::error_code& ec)
complete_iocp_accept	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void complete_iocp_accept(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, void* output_buffer, DWORD address_length, socket_addr_type* addr, std::size_t* addrlen, socket_type new_socket, boost::system::error_code& ec)
complete_iocp_recv	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void complete_iocp_recv(state_type state,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(state_type state, const weak_cancel_token_type& cancel_token, bool all_empty, boost::system::error_code& ec, size_t bytes_transferred)
complete_iocp_recv	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void complete_iocp_recv(state_type state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(state_type state, const weak_cancel_token_type& cancel_token, bool all_empty, boost::system::error_code& ec, size_t bytes_transferred)
complete_iocp_recvfrom	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void complete_iocp_recvfrom($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, boost::system::error_code& ec)
complete_iocp_recvfrom	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void complete_iocp_recvfrom($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, boost::system::error_code& ec)
complete_iocp_recvmsg	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void complete_iocp_recvmsg($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, boost::system::error_code& ec)
complete_iocp_recvmsg	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void complete_iocp_recvmsg($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, boost::system::error_code& ec)
complete_iocp_send	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void complete_iocp_send($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, boost::system::error_code& ec)
complete_iocp_send	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void complete_iocp_send($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const weak_cancel_token_type& cancel_token, boost::system::error_code& ec)
completed_ops_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  op_queue<win_iocp_operation> completed_ops_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
completion	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL explicit completion(tracked_handler* h);$/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:(tracked_handler* h)
completion	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  class completion$/;"	c	class:boost::asio::detail::handler_tracking	access:public
completion	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^handler_tracking::completion::completion(handler_tracking::tracked_handler* h)$/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:(handler_tracking::tracked_handler* h)
completion_condition_	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^  CompletionCondition completion_condition_;$/;"	m	class:boost::asio::detail::base_from_completion_cond	access:private
completion_handler	/usr/include/boost/asio/detail/completion_handler.hpp	/^  completion_handler(Handler& h)$/;"	f	class:boost::asio::detail::completion_handler	access:public	signature:(Handler& h)
completion_handler	/usr/include/boost/asio/detail/completion_handler.hpp	/^class completion_handler : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
cond_	/usr/include/boost/asio/detail/posix_event.hpp	/^  ::pthread_cond_t cond_;$/;"	m	class:boost::asio::detail::posix_event	access:private
connect	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code connect(const endpoint_type& peer_endpoint,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& peer_endpoint, boost::system::error_code& ec)
connect	/usr/include/boost/asio/basic_socket.hpp	/^  void connect(const endpoint_type& peer_endpoint)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& peer_endpoint)
connect	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  void connect(T1 t1, ..., TN tn);$/;"	p	class:boost::asio::basic_socket_iostream	access:public	signature:(T1 t1, ..., TN tn)
connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    Time, TimeTraits, TimerService>* connect($/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:( const endpoint_type& endpoint)
connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    Time, TimeTraits, TimerService>* connect(T... x)$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:(T.... x)
connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  basic_socket_streambuf<Protocol, StreamSocketService>* connect($/;"	p	class:boost::asio::basic_socket_streambuf	access:public	signature:( T1 t1, ..., TN tn)
connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin);$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin)
connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, ConnectCondition connect_condition, boost::system::error_code& ec)
connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, ConnectCondition connect_condition)
connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, ConnectCondition connect_condition)
connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end)
connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, ConnectCondition connect_condition, boost::system::error_code& ec)
connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, boost::system::error_code& ec)
connect	/usr/include/boost/asio/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	p	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, boost::system::error_code& ec)
connect	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
connect	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int connect(socket_type s, const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
connect	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int connect(socket_type s, const socket_addr_type* addr,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
connect	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
connect	/usr/include/boost/asio/impl/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin)$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin)
connect	/usr/include/boost/asio/impl/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, ConnectCondition connect_condition)
connect	/usr/include/boost/asio/impl/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end)
connect	/usr/include/boost/asio/impl/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, ConnectCondition connect_condition)
connect	/usr/include/boost/asio/impl/connect.hpp	/^Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, ConnectCondition connect_condition, boost::system::error_code& ec)
connect	/usr/include/boost/asio/impl/connect.hpp	/^inline Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, ConnectCondition connect_condition, boost::system::error_code& ec)
connect	/usr/include/boost/asio/impl/connect.hpp	/^inline Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, Iterator end, boost::system::error_code& ec)
connect	/usr/include/boost/asio/impl/connect.hpp	/^inline Iterator connect(basic_socket<Protocol, SocketService>& s,$/;"	f	namespace:boost::asio	signature:(basic_socket<Protocol, SocketService>& s, Iterator begin, boost::system::error_code& ec)
connect	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
connect	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
connect	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
connect_condition_	/usr/include/boost/asio/impl/connect.hpp	/^    ConnectCondition connect_condition_;$/;"	m	class:boost::asio::detail::base_from_connect_condition	access:private
connect_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::dev_poll_reactor::op_types
connect_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::epoll_reactor::op_types
connect_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::kqueue_reactor::op_types
connect_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^    max_select_ops = 3, connect_op = 3, max_ops = 4 };$/;"	e	enum:boost::asio::detail::select_reactor::op_types
connect_op	/usr/include/boost/asio/impl/connect.hpp	/^    connect_op(basic_socket<Protocol, SocketService>& sock,$/;"	f	class:boost::asio::detail::connect_op	access:public	signature:(basic_socket<Protocol, SocketService>& sock, const Iterator& begin, const Iterator& end, const ConnectCondition& connect_condition, ComposedConnectHandler& handler)
connect_op	/usr/include/boost/asio/impl/connect.hpp	/^    connect_op(connect_op&& other)$/;"	f	class:boost::asio::detail::connect_op	access:public	signature:(connect_op&& other)
connect_op	/usr/include/boost/asio/impl/connect.hpp	/^    connect_op(const connect_op& other)$/;"	f	class:boost::asio::detail::connect_op	access:public	signature:(const connect_op& other)
connect_op	/usr/include/boost/asio/impl/connect.hpp	/^  class connect_op : base_from_connect_condition<ConnectCondition>$/;"	c	namespace:boost::asio::detail	inherits:base_from_connect_condition
connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^boost::system::error_code connect_pair($/;"	p	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2, boost::system::error_code& ec)
connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^inline boost::system::error_code connect_pair($/;"	f	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2, boost::system::error_code& ec)
connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^inline void connect_pair($/;"	f	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2)
connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^void connect_pair($/;"	p	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2)
connection_aborted	/usr/include/boost/asio/error.hpp	/^  connection_aborted = BOOST_ASIO_SOCKET_ERROR(ECONNABORTED),$/;"	e	enum:boost::asio::error::basic_errors
connection_refused	/usr/include/boost/asio/error.hpp	/^  connection_refused = BOOST_ASIO_SOCKET_ERROR(ECONNREFUSED),$/;"	e	enum:boost::asio::error::basic_errors
connection_reset	/usr/include/boost/asio/error.hpp	/^  connection_reset = BOOST_ASIO_SOCKET_ERROR(ECONNRESET),$/;"	e	enum:boost::asio::error::basic_errors
const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer()$/;"	f	class:boost::asio::const_buffer	access:public	signature:()
const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer(const mutable_buffer& b)$/;"	f	class:boost::asio::const_buffer	access:public	signature:(const mutable_buffer& b)
const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer(const void* data, std::size_t size)$/;"	f	class:boost::asio::const_buffer	access:public	signature:(const void* data, std::size_t size)
const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer(const void* data, std::size_t size,$/;"	f	class:boost::asio::const_buffer	access:public	signature:(const void* data, std::size_t size, boost::function<void()> debug_check)
const_buffer	/usr/include/boost/asio/buffer.hpp	/^class const_buffer$/;"	c	namespace:boost::asio
const_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  const_buffers_1(const void* data, std::size_t size)$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:(const void* data, std::size_t size)
const_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  explicit const_buffers_1(const const_buffer& b)$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:(const const_buffer& b)
const_buffers_1	/usr/include/boost/asio/buffer.hpp	/^class const_buffers_1$/;"	c	namespace:boost::asio	inherits:const_buffer
const_buffers_type	/usr/include/boost/asio/basic_streambuf.hpp	/^  typedef implementation_defined const_buffers_type;$/;"	t	class:boost::asio::basic_streambuf	access:public
const_iterator	/usr/include/boost/asio/buffer.hpp	/^  typedef const const_buffer* const_iterator;$/;"	t	class:boost::asio::const_buffers_1	access:public
const_iterator	/usr/include/boost/asio/buffer.hpp	/^  typedef const mutable_buffer* const_iterator;$/;"	t	class:boost::asio::mutable_buffers_1	access:public
const_iterator	/usr/include/boost/asio/buffer.hpp	/^  typedef const mutable_buffer* const_iterator;$/;"	t	class:boost::asio::null_buffers	access:public
const_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^    const_iterator;$/;"	t	class:boost::asio::detail::consuming_buffers	access:public
const_iterator	/usr/include/boost/asio/detail/hash_map.hpp	/^  typedef typename std::list<value_type>::const_iterator const_iterator;$/;"	t	class:boost::asio::detail::hash_map	access:public
construct	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^void reactive_descriptor_service::construct($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl)
construct	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::construct($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl)
construct	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::construct($/;"	f	class:boost::asio::detail::resolver_service_base	signature:( resolver_service_base::implementation_type& impl)
construct	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::construct($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl)
construct	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^void strand_service::construct(strand_service::implementation_type& impl)$/;"	f	class:boost::asio::detail::strand_service	signature:(strand_service::implementation_type& impl)
construct	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::construct($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl)
construct	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::construct($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl)
construct	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::construct($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl)
construct	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL void construct(implementation_type& impl);$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void construct(base_implementation_type& impl);$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl)
construct	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void construct(implementation_type& impl);$/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL void construct(implementation_type& impl);$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/strand_service.hpp	/^  BOOST_ASIO_DECL void construct(implementation_type& impl);$/;"	p	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void construct(implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void construct(base_implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl)
construct	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void construct(implementation_type& impl);$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/raw_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/signal_set_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/stream_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/waitable_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
construct_timer	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void construct_timer()$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:()
consume	/usr/include/boost/asio/basic_streambuf.hpp	/^  void consume(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:(std::size_t n)
consume	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  void consume(size_type count)$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:(size_type count)
consume	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void consume(std::size_t size)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t size)
consume	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void consume(std::size_t)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t)
consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers(const Buffers& buffers)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const Buffers& buffers)
consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers(const boost::asio::null_buffers&)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const boost::asio::null_buffers&)
consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers(const consuming_buffers& other)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const consuming_buffers& other)
consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^class consuming_buffers$/;"	c	namespace:boost::asio::detail
consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^class consuming_buffers<Buffer, boost::asio::null_buffers>$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::null_buffers
consuming_buffers_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers_iterator()$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:()
consuming_buffers_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers_iterator(bool at_end, const Buffer& first,$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:(bool at_end, const Buffer& first, Buffer_Iterator begin_remainder, Buffer_Iterator end_remainder, std::size_t max_size)
consuming_buffers_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^class consuming_buffers_iterator$/;"	c	namespace:boost::asio::detail	inherits:boost::iterator
container_type	/usr/include/boost/asio/buffer.hpp	/^  typedef const_buffers_1 container_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
container_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffers_1 container_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
contains	/usr/include/boost/asio/detail/call_stack.hpp	/^  static Value* contains(Key* k)$/;"	f	class:boost::asio::detail::call_stack	access:public	signature:(Key* k)
context	/usr/include/boost/asio/detail/call_stack.hpp	/^    context(Key* k, Value& v)$/;"	f	class:boost::asio::detail::call_stack::context	access:public	signature:(Key* k, Value& v)
context	/usr/include/boost/asio/detail/call_stack.hpp	/^    explicit context(Key* k)$/;"	f	class:boost::asio::detail::call_stack::context	access:public	signature:(Key* k)
context	/usr/include/boost/asio/detail/call_stack.hpp	/^  class context$/;"	c	class:boost::asio::detail::call_stack	inherits:noncopyable	access:public
context	/usr/include/boost/asio/ssl/context.hpp	/^typedef basic_context<context_service> context;$/;"	t	namespace:boost::asio::ssl
context	/usr/include/boost/asio/ssl/impl/context.ipp	/^context::context(boost::asio::io_service&, context::method m)$/;"	f	class:boost::asio::ssl::context	signature:(boost::asio::io_service&, context::method m)
context	/usr/include/boost/asio/ssl/impl/context.ipp	/^context::context(context&& other)$/;"	f	class:boost::asio::ssl::context	signature:(context&& other)
context	/usr/include/boost/asio/ssl/impl/context.ipp	/^context::context(context::method m)$/;"	f	class:boost::asio::ssl::context	signature:(context::method m)
context_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Context context_;$/;"	m	class:boost::asio::detail::rewrapped_handler	access:public
context_base	/usr/include/boost/asio/ssl/context_base.hpp	/^class context_base$/;"	c	namespace:boost::asio::ssl
context_service	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  explicit context_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(boost::asio::io_service& io_service)
context_service	/usr/include/boost/asio/ssl/old/context_service.hpp	/^class context_service$/;"	c	namespace:boost::asio::ssl::old	inherits:boost::asio::io_service::service
copy	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t copy(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:private	signature:(const MutableBufferSequence& buffers)
copy	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t copy(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:private	signature:(const ConstBufferSequence& buffers)
core_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  stream_core& core_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
count	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  std::size_t count() const$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:() const
create	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^boost::asio::io_service::service* service_registry::create($/;"	f	class:boost::asio::detail::service_registry	signature:( boost::asio::io_service& owner)
create	/usr/include/boost/asio/detail/object_pool.hpp	/^  static Object* create()$/;"	f	class:boost::asio::detail::object_pool_access	access:public	signature:()
create	/usr/include/boost/asio/detail/service_registry.hpp	/^  static boost::asio::io_service::service* create($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( boost::asio::io_service& owner)
create	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  static basic_resolver_iterator create($/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:( boost::asio::detail::addrinfo_type* address_info, const std::string& host_name, const std::string& service_name)
create	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  static basic_resolver_iterator create($/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:( const typename InternetProtocol::endpoint& endpoint, const std::string& host_name, const std::string& service_name)
create	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  void create(impl_type& impl, context_base::method m)$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, context_base::method m)
create	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  void create(impl_type& impl, context_base::method m)$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, context_base::method m)
create	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void create(impl_type& impl, Stream& \/*next_layer*\/,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& , basic_context<Context_Service>& context)
create	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void create(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, basic_context<Context_Service>& context)
creation	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  BOOST_ASIO_DECL static void creation(tracked_handler* h,$/;"	p	class:boost::asio::detail::handler_tracking	access:public	signature:(tracked_handler* h, const char* object_type, void* object, const char* op_name)
creation	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::creation(handler_tracking::tracked_handler* h,$/;"	f	class:boost::asio::detail::handler_tracking	signature:(handler_tracking::tracked_handler* h, const char* object_type, void* object, const char* op_name)
crit_section_	/usr/include/boost/asio/detail/win_mutex.hpp	/^  ::CRITICAL_SECTION crit_section_;$/;"	m	class:boost::asio::detail::win_mutex	access:private
crit_section_	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  ::CRITICAL_SECTION crit_section_;$/;"	m	struct:boost::asio::detail::win_static_mutex	access:public
current_	/usr/include/boost/asio/buffers_iterator.hpp	/^  typename BufferSequence::const_iterator current_;$/;"	m	class:boost::asio::buffers_iterator	access:private
current_buffer_	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffer_type current_buffer_;$/;"	m	class:boost::asio::buffers_iterator	access:private
current_buffer_position_	/usr/include/boost/asio/buffers_iterator.hpp	/^  std::size_t current_buffer_position_;$/;"	m	class:boost::asio::buffers_iterator	access:private
current_completion_	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^  tss_ptr<completion>* current_completion_;$/;"	m	struct:boost::asio::detail::handler_tracking::tracking_state	file:	access:public
custom_socket_option_level	/usr/include/boost/asio/detail/socket_types.hpp	/^const int custom_socket_option_level = 0xA5100000;$/;"	m	namespace:boost::asio::detail
d_	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    duration_type d_;$/;"	m	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:private
data	/usr/include/boost/asio/basic_streambuf.hpp	/^  const_buffers_type data() const$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:() const
data	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  const_buffer data() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
data	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  mutable_buffer data()$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:()
data	/usr/include/boost/asio/detail/io_control.hpp	/^  const detail::ioctl_arg_type* data() const$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:() const
data	/usr/include/boost/asio/detail/io_control.hpp	/^  const detail::ioctl_arg_type* data() const$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:() const
data	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type* data()$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:()
data	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type* data()$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:()
data	/usr/include/boost/asio/detail/socket_option.hpp	/^  ::linger* data(const Protocol&)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&)
data	/usr/include/boost/asio/detail/socket_option.hpp	/^  const ::linger* data(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
data	/usr/include/boost/asio/detail/socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
data	/usr/include/boost/asio/detail/socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
data	/usr/include/boost/asio/detail/socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&)
data	/usr/include/boost/asio/detail/socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&)
data	/usr/include/boost/asio/detail/winsock_init.hpp	/^  struct data$/;"	s	class:boost::asio::detail::winsock_init_base	access:protected
data	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  const data_type* data() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
data	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  data_type* data()$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:()
data	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  boost::asio::detail::socket_addr_type* data()$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:()
data	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  const boost::asio::detail::socket_addr_type* data() const$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:() const
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&) const
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&)
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void* data(const Protocol& protocol)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol)
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void* data(const Protocol& protocol)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol)
data	/usr/include/boost/asio/is_read_buffered.hpp	/^struct is_read_buffered_big_type { char data[10]; };$/;"	m	struct:boost::asio::detail::is_read_buffered_big_type	access:public
data	/usr/include/boost/asio/is_write_buffered.hpp	/^struct is_write_buffered_big_type { char data[10]; };$/;"	m	struct:boost::asio::detail::is_write_buffered_big_type	access:public
data	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  const data_type* data() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
data	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  data_type* data()$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:()
data	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  boost::asio::detail::socket_addr_type* data()$/;"	f	class:boost::asio::local::detail::endpoint	access:public	signature:()
data	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  const boost::asio::detail::socket_addr_type* data() const$/;"	f	class:boost::asio::local::detail::endpoint	access:public	signature:() const
data_	/usr/include/boost/asio/buffer.hpp	/^  const void* data_;$/;"	m	class:boost::asio::const_buffer	access:private
data_	/usr/include/boost/asio/buffer.hpp	/^  void* data_;$/;"	m	class:boost::asio::mutable_buffer	access:private
data_	/usr/include/boost/asio/detail/winsock_init.hpp	/^  static data data_;$/;"	m	class:boost::asio::detail::winsock_init	access:private
data_	/usr/include/boost/asio/detail/winsock_init.hpp	/^winsock_init_base::data winsock_init<Major, Minor>::data_;$/;"	m	class:boost::asio::detail::winsock_init
data_	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  } data_;$/;"	m	class:boost::asio::ip::detail::endpoint	typeref:union:boost::asio::ip::detail::endpoint::data_union	access:private
data_	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  } data_;$/;"	m	class:boost::asio::local::detail::endpoint	typeref:union:boost::asio::local::detail::endpoint::data_union	access:private
data_added	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  void data_added(size_t count)$/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:(size_t count)
data_end_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  unsigned char* data_end_;$/;"	m	class:boost::asio::ssl::old::detail::net_buffer	access:private
data_removed	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  void data_removed(size_t count) $/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:(size_t count)
data_start_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  unsigned char* data_start_;$/;"	m	class:boost::asio::ssl::old::detail::net_buffer	access:private
data_type	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  typedef boost::asio::detail::socket_addr_type data_type;$/;"	t	class:boost::asio::ip::basic_endpoint	access:public
data_type	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  typedef implementation_defined data_type;$/;"	t	class:boost::asio::ip::basic_endpoint	access:public
data_type	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  typedef boost::asio::detail::socket_addr_type data_type;$/;"	t	class:boost::asio::local::basic_endpoint	access:public
data_type	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  typedef implementation_defined data_type;$/;"	t	class:boost::asio::local::basic_endpoint	access:public
data_union	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  union data_union$/;"	u	class:boost::asio::ip::detail::endpoint	access:private
data_union	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  union data_union$/;"	u	class:boost::asio::local::detail::endpoint	access:private
datagram_oriented	/usr/include/boost/asio/detail/socket_ops.hpp	/^  datagram_oriented = 32,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
datagram_protocol	/usr/include/boost/asio/local/datagram_protocol.hpp	/^class datagram_protocol$/;"	c	namespace:boost::asio::local
datagram_socket_service	/usr/include/boost/asio/datagram_socket_service.hpp	/^  explicit datagram_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(boost::asio::io_service& io_service)
datagram_socket_service	/usr/include/boost/asio/datagram_socket_service.hpp	/^class datagram_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
date_time	/usr/include/boost/asio/detail/date_time_fwd.hpp	/^namespace date_time {$/;"	n	namespace:boost
deadline_timer	/usr/include/boost/asio/deadline_timer.hpp	/^typedef basic_deadline_timer<boost::posix_time::ptime> deadline_timer;$/;"	t	namespace:boost::asio
deadline_timer_service	/usr/include/boost/asio/deadline_timer_service.hpp	/^  explicit deadline_timer_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(boost::asio::io_service& io_service)
deadline_timer_service	/usr/include/boost/asio/deadline_timer_service.hpp	/^class deadline_timer_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
deadline_timer_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  deadline_timer_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(boost::asio::io_service& io_service)
deadline_timer_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^class deadline_timer_service$/;"	c	namespace:boost::asio::detail
deallocate	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^inline void deallocate(void* p, std::size_t s, Handler& h)$/;"	f	namespace:boost_asio_handler_alloc_helpers	signature:(void* p, std::size_t s, Handler& h)
deallocate	/usr/include/boost/asio/detail/thread_info_base.hpp	/^  static void deallocate(thread_info_base* this_thread,$/;"	f	class:boost::asio::detail::thread_info_base	access:public	signature:(thread_info_base* this_thread, void* pointer, std::size_t size)
debug	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_DEBUG> debug;$/;"	t	class:boost::asio::socket_base	access:public
debug	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined debug;$/;"	t	class:boost::asio::socket_base	access:public
debug_check_	/usr/include/boost/asio/buffer.hpp	/^  boost::function<void()> debug_check_;$/;"	m	class:boost::asio::const_buffer	access:private
debug_check_	/usr/include/boost/asio/buffer.hpp	/^  boost::function<void()> debug_check_;$/;"	m	class:boost::asio::mutable_buffer	access:private
decrement	/usr/include/boost/asio/buffers_iterator.hpp	/^  void decrement()$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:()
default_buffer_size	/usr/include/boost/asio/buffered_read_stream.hpp	/^  static const std::size_t default_buffer_size = implementation_defined;$/;"	m	class:boost::asio::buffered_read_stream	access:public
default_buffer_size	/usr/include/boost/asio/buffered_write_stream.hpp	/^  static const std::size_t default_buffer_size = implementation_defined;$/;"	m	class:boost::asio::buffered_write_stream	access:public
default_connect_condition	/usr/include/boost/asio/impl/connect.hpp	/^  struct default_connect_condition$/;"	s	namespace:boost::asio::detail
default_fd_set_size	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  enum { default_fd_set_size = 1024 };$/;"	e	enum:boost::asio::detail::win_fd_set_adapter::__anon18
default_max_transfer_size	/usr/include/boost/asio/completion_condition.hpp	/^enum { default_max_transfer_size = 65536 };$/;"	e	enum:boost::asio::detail::__anon7
default_workarounds	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const long default_workarounds = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
delim_	/usr/include/boost/asio/impl/read_until.hpp	/^    char delim_;$/;"	m	class:boost::asio::detail::read_until_delim_op	access:public
delim_	/usr/include/boost/asio/impl/read_until.hpp	/^    std::string delim_;$/;"	m	class:boost::asio::detail::read_until_delim_string_op	access:public
deliver_signal	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::deliver_signal(int signal_number)$/;"	f	class:boost::asio::detail::signal_set_service	signature:(int signal_number)
deliver_signal	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL static void deliver_signal(int signal_number);$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(int signal_number)
dependent_type	/usr/include/boost/asio/detail/dependent_type.hpp	/^struct dependent_type$/;"	s	namespace:boost::asio::detail
dereference	/usr/include/boost/asio/buffers_iterator.hpp	/^  reference dereference() const$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:() const
dereference	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const Buffer& dereference() const$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:private	signature:() const
dereference	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  const basic_resolver_entry<InternetProtocol>& dereference() const$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:private	signature:() const
deregister_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, bool closing)
deregister_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, bool closing)
deregister_descriptor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::deregister_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(socket_type descriptor, dev_poll_reactor::per_descriptor_data&, bool)
deregister_descriptor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::deregister_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(socket_type descriptor, epoll_reactor::per_descriptor_data& descriptor_data, bool closing)
deregister_descriptor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::deregister_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(socket_type descriptor, kqueue_reactor::per_descriptor_data& descriptor_data, bool closing)
deregister_descriptor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::deregister_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor	signature:(socket_type descriptor, select_reactor::per_descriptor_data&, bool)
deregister_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, bool closing)
deregister_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, bool closing)
deregister_internal_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_internal_descriptor($/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:( socket_type descriptor, per_descriptor_data&)
deregister_internal_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_internal_descriptor($/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:( socket_type descriptor, per_descriptor_data& descriptor_data)
deregister_internal_descriptor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::deregister_internal_descriptor($/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:( socket_type descriptor, dev_poll_reactor::per_descriptor_data&)
deregister_internal_descriptor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::deregister_internal_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(socket_type descriptor, epoll_reactor::per_descriptor_data& descriptor_data)
deregister_internal_descriptor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::deregister_internal_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(socket_type descriptor, kqueue_reactor::per_descriptor_data& descriptor_data)
deregister_internal_descriptor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::deregister_internal_descriptor($/;"	f	class:boost::asio::detail::select_reactor	signature:( socket_type descriptor, select_reactor::per_descriptor_data&)
deregister_internal_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_internal_descriptor($/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:( socket_type descriptor, per_descriptor_data& descriptor_data)
deregister_internal_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void deregister_internal_descriptor($/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:( socket_type descriptor, per_descriptor_data& descriptor_data)
descriptor_	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  int descriptor_;$/;"	m	class:boost::asio::detail::descriptor_read_op_base	access:private
descriptor_	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  int descriptor_;$/;"	m	class:boost::asio::detail::descriptor_write_op_base	access:private
descriptor_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    int descriptor_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
descriptor_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    int descriptor_;$/;"	m	struct:boost::asio::detail::kqueue_reactor::descriptor_state	access:public
descriptor_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    int descriptor_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:private
descriptor_base	/usr/include/boost/asio/posix/descriptor_base.hpp	/^class descriptor_base$/;"	c	namespace:boost::asio::posix
descriptor_ops	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace descriptor_ops {$/;"	n	namespace:boost::asio::detail
descriptor_ops	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^namespace descriptor_ops {$/;"	n	namespace:boost::asio::detail	file:
descriptor_read_op	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  descriptor_read_op(int descriptor,$/;"	f	class:boost::asio::detail::descriptor_read_op	access:public	signature:(int descriptor, const MutableBufferSequence& buffers, Handler& handler)
descriptor_read_op	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^class descriptor_read_op$/;"	c	namespace:boost::asio::detail	inherits:descriptor_read_op_base
descriptor_read_op_base	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  descriptor_read_op_base(int descriptor,$/;"	f	class:boost::asio::detail::descriptor_read_op_base	access:public	signature:(int descriptor, const MutableBufferSequence& buffers, func_type complete_func)
descriptor_read_op_base	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^class descriptor_read_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
descriptor_service_	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  reactive_descriptor_service descriptor_service_;$/;"	m	class:boost::asio::detail::reactive_serial_port_service	access:private
descriptor_state	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    BOOST_ASIO_DECL descriptor_state();$/;"	p	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private	signature:()
descriptor_state	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  class descriptor_state : operation$/;"	c	class:boost::asio::detail::epoll_reactor	inherits:operation	access:public
descriptor_state	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^epoll_reactor::descriptor_state::descriptor_state()$/;"	f	class:boost::asio::detail::epoll_reactor::descriptor_state	signature:()
descriptor_state	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  struct descriptor_state$/;"	s	class:boost::asio::detail::kqueue_reactor	access:public
descriptor_write_op	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  descriptor_write_op(int descriptor,$/;"	f	class:boost::asio::detail::descriptor_write_op	access:public	signature:(int descriptor, const ConstBufferSequence& buffers, Handler& handler)
descriptor_write_op	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^class descriptor_write_op$/;"	c	namespace:boost::asio::detail	inherits:descriptor_write_op_base
descriptor_write_op_base	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  descriptor_write_op_base(int descriptor,$/;"	f	class:boost::asio::detail::descriptor_write_op_base	access:public	signature:(int descriptor, const ConstBufferSequence& buffers, func_type complete_func)
descriptor_write_op_base	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^class descriptor_write_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
destination_	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  Endpoint destination_;$/;"	m	class:boost::asio::detail::reactive_socket_sendto_op_base	access:private
destroy	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^void reactive_descriptor_service::destroy($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl)
destroy	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::destroy($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl)
destroy	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::destroy($/;"	f	class:boost::asio::detail::resolver_service_base	signature:( resolver_service_base::implementation_type& impl)
destroy	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^void service_registry::destroy(boost::asio::io_service::service* service)$/;"	f	class:boost::asio::detail::service_registry	signature:(boost::asio::io_service::service* service)
destroy	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::destroy($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl)
destroy	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::destroy($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl)
destroy	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::destroy($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl)
destroy	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::destroy($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl)
destroy	/usr/include/boost/asio/detail/object_pool.hpp	/^  static void destroy(Object* o)$/;"	f	class:boost::asio::detail::object_pool_access	access:public	signature:(Object* o)
destroy	/usr/include/boost/asio/detail/op_queue.hpp	/^  static void destroy(Operation* o)$/;"	f	class:boost::asio::detail::op_queue_access	access:public	signature:(Operation* o)
destroy	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL void destroy(implementation_type& impl);$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void destroy(base_implementation_type& impl);$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl)
destroy	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void destroy(implementation_type&);$/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:(implementation_type&)
destroy	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL static void destroy($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( boost::asio::io_service::service* service)
destroy	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL void destroy(implementation_type& impl);$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  void destroy()$/;"	f	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:public	signature:()
destroy	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void destroy(implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  void destroy()$/;"	f	class:boost::asio::detail::win_iocp_operation	access:public	signature:()
destroy	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void destroy(base_implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl)
destroy	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void destroy(implementation_type& impl);$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/raw_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/signal_set_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  void destroy(impl_type& impl)$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl)
destroy	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  void destroy(impl_type& impl)$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl)
destroy	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void destroy(impl_type& impl, Stream& \/*next_layer*\/)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& )
destroy	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void destroy(impl_type& impl, Stream& next_layer)$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer)
destroy	/usr/include/boost/asio/stream_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/waitable_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
destroy_list	/usr/include/boost/asio/detail/object_pool.hpp	/^  void destroy_list(Object* list)$/;"	f	class:boost::asio::detail::object_pool	access:private	signature:(Object* list)
destroy_timer	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void destroy_timer()$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:()
detail	/usr/include/boost/asio/basic_io_object.hpp	/^namespace detail$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/buffer.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/buffers_iterator.hpp	/^namespace detail$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/completion_condition.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/array.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/atomic_count.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/base_from_completion_cond.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/bind_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/call_stack.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/completion_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/dependent_type.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/handler_tracking.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/hash_map.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/posix_event.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/posix_mutex.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/posix_tss_ptr.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/task_io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/throw_error.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/win_event.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/win_mutex.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/win_static_mutex.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/win_tss_ptr.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/impl/winsock_init.ipp	/^namespace detail {$/;"	n	namespace:boost::asio	file:
detail	/usr/include/boost/asio/detail/io_control.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/noncopyable.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/null_event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/null_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/null_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/object_pool.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/op_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/operation.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactor_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/resolve_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/resolver_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/scoped_lock.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/select_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/select_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/service_registry.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/service_registry_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/shared_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/signal_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/signal_init.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/signal_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/signal_set_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/socket_holder.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/socket_types.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/static_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/strand_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/task_io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/task_io_service_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/thread_info_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/throw_error.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/timer_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/timer_queue_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/timer_scheduler_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/wait_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/wait_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/weak_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_thread_info.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/wince_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/winsock_init.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/impl/connect.hpp	/^namespace detail$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/impl/error.ipp	/^namespace detail {$/;"	n	namespace:boost::asio::error	file:
detail	/usr/include/boost/asio/impl/read.hpp	/^namespace detail$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/impl/read_at.hpp	/^namespace detail$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/impl/read_until.hpp	/^namespace detail$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/impl/write.hpp	/^namespace detail$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/impl/write_at.hpp	/^namespace detail$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/io_service.hpp	/^namespace detail { typedef win_iocp_io_service io_service_impl; }$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ip
detail	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^namespace detail {$/;"	n	namespace:boost::asio::ip	file:
detail	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ip
detail	/usr/include/boost/asio/is_read_buffered.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/is_write_buffered.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/local/detail/endpoint.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::local
detail	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^namespace detail {$/;"	n	namespace:boost::asio::local	file:
detail	/usr/include/boost/asio/read_until.hpp	/^namespace detail$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/ssl/detail/engine.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl	file:
detail	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl	file:
detail	/usr/include/boost/asio/ssl/detail/io.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/impl/error.ipp	/^namespace detail {$/;"	n	namespace:boost::asio::error	file:
detail	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl::old
detail	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl::old
detail	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl::old
dev_poll_fd_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  int dev_poll_fd_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
dev_poll_reactor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL dev_poll_reactor(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(boost::asio::io_service& io_service)
dev_poll_reactor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^class dev_poll_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
dev_poll_reactor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^dev_poll_reactor::dev_poll_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(boost::asio::io_service& io_service)
device_	/usr/include/boost/asio/impl/read_at.hpp	/^    AsyncRandomAccessReadDevice& device_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
device_	/usr/include/boost/asio/impl/read_at.hpp	/^    AsyncRandomAccessReadDevice& device_;$/;"	m	class:boost::asio::detail::read_at_streambuf_op	access:public
device_	/usr/include/boost/asio/impl/write_at.hpp	/^    AsyncRandomAccessWriteDevice& device_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
difference_type	/usr/include/boost/asio/buffers_iterator.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::asio::buffers_iterator	access:public
difference_type	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:public
dispatch	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^void strand_service::dispatch(strand_service::implementation_type& impl,$/;"	f	class:boost::asio::detail::strand_service	signature:(strand_service::implementation_type& impl, Handler handler)
dispatch	/usr/include/boost/asio/detail/impl/task_io_service.hpp	/^void task_io_service::dispatch(Handler handler)$/;"	f	class:boost::asio::detail::task_io_service	signature:(Handler handler)
dispatch	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^void win_iocp_io_service::dispatch(Handler handler)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(Handler handler)
dispatch	/usr/include/boost/asio/detail/strand_service.hpp	/^  void dispatch(implementation_type& impl, Handler handler);$/;"	p	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl, Handler handler)
dispatch	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void dispatch(Handler handler);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(Handler handler)
dispatch	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void dispatch(Handler handler);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(Handler handler)
dispatch_mutex_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  mutex dispatch_mutex_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
dispatch_required_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long dispatch_required_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
dispatcher_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Dispatcher dispatcher_;$/;"	m	class:boost::asio::detail::wrapped_handler	access:public
distance_to	/usr/include/boost/asio/buffers_iterator.hpp	/^  std::ptrdiff_t distance_to(const buffers_iterator& other) const$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:(const buffers_iterator& other) const
do_accept	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL int do_accept(void*, std::size_t);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(void*, std::size_t)
do_accept	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^int engine::do_accept(void*, std::size_t)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(void*, std::size_t)
do_add_service	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^void service_registry::do_add_service($/;"	f	class:boost::asio::detail::service_registry	signature:( const boost::asio::io_service::service::key& key, boost::asio::io_service::service* new_service)
do_add_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL void do_add_service($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( const boost::asio::io_service::service::key& key, boost::asio::io_service::service* new_service)
do_add_timer_queue	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void do_add_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(timer_queue_base& queue)
do_add_timer_queue	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void do_add_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:(timer_queue_base& queue)
do_add_timer_queue	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::do_add_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(timer_queue_base& queue)
do_add_timer_queue	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::do_add_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(timer_queue_base& queue)
do_add_timer_queue	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::do_add_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timer_queue_base& queue)
do_add_timer_queue	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::do_add_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::select_reactor	signature:(timer_queue_base& queue)
do_add_timer_queue	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::do_add_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(timer_queue_base& queue)
do_add_timer_queue	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void do_add_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:private	signature:(timer_queue_base& queue)
do_add_timer_queue	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void do_add_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::select_reactor	access:private	signature:(timer_queue_base& queue)
do_add_timer_queue	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void do_add_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:private	signature:(timer_queue_base& queue)
do_assign	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^boost::system::error_code reactive_socket_service_base::do_assign($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, int type, const reactive_socket_service_base::native_handle_type& native_socket, boost::system::error_code& ec)
do_assign	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^boost::system::error_code win_iocp_socket_service_base::do_assign($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, int type, socket_type native_socket, boost::system::error_code& ec)
do_assign	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_assign($/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:protected	signature:( base_implementation_type& impl, int type, const native_handle_type& native_socket, boost::system::error_code& ec)
do_assign	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_assign($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:( base_implementation_type& impl, int type, socket_type native_socket, boost::system::error_code& ec)
do_async_read	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int do_async_read()$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:()
do_async_write	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int  do_async_write(bool is_operation_done, int rc) $/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:(bool is_operation_done, int rc)
do_complete	/usr/include/boost/asio/detail/completion_handler.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::completion_handler	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::descriptor_read_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::descriptor_write_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    BOOST_ASIO_DECL static void do_complete($/;"	p	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private	signature:( io_service_impl* owner, operation* base, const boost::system::error_code& ec, std::size_t bytes_transferred)
do_complete	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::descriptor_state::do_complete($/;"	f	class:boost::asio::detail::epoll_reactor::descriptor_state	signature:( io_service_impl* owner, operation* base, const boost::system::error_code& ec, std::size_t bytes_transferred)
do_complete	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  static void do_complete(io_service_impl* \/*owner*\/, operation* base,$/;"	f	class:boost::asio::detail::signal_set_service::pipe_read_op	access:public	signature:(io_service_impl* , operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^void strand_service::do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::strand_service	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& ec, std::size_t )
do_complete	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_null_buffers_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_accept_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_connect_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_recv_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_recvfrom_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_recvmsg_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_send_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::reactive_socket_sendto_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::resolve_endpoint_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/resolve_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::resolve_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/signal_handler.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::signal_handler	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/strand_service.hpp	/^  BOOST_ASIO_DECL static void do_complete(io_service_impl* owner,$/;"	p	class:boost::asio::detail::strand_service	access:private	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& ec, std::size_t bytes_transferred)
do_complete	/usr/include/boost/asio/detail/wait_handler.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::wait_handler	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& , std::size_t )
do_complete	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_handle_read_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t bytes_transferred)
do_complete	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_handle_write_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& ec, std::size_t bytes_transferred)
do_complete	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_null_buffers_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t bytes_transferred)
do_complete	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_overlapped_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& ec, std::size_t bytes_transferred)
do_complete	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_socket_accept_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t )
do_complete	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_socket_recv_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t bytes_transferred)
do_complete	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t bytes_transferred)
do_complete	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t bytes_transferred)
do_complete	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^  static void do_complete(io_service_impl* owner, operation* base,$/;"	f	class:boost::asio::detail::win_iocp_socket_send_op	access:public	signature:(io_service_impl* owner, operation* base, const boost::system::error_code& result_ec, std::size_t bytes_transferred)
do_connect	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL int do_connect(void*, std::size_t);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(void*, std::size_t)
do_connect	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^int engine::do_connect(void*, std::size_t)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(void*, std::size_t)
do_dev_poll_create	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL static int do_dev_poll_create();$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:private	signature:()
do_dev_poll_create	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^int dev_poll_reactor::do_dev_poll_create()$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:()
do_dispatch	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^bool strand_service::do_dispatch(implementation_type& impl, operation* op)$/;"	f	class:boost::asio::detail::strand_service	signature:(implementation_type& impl, operation* op)
do_dispatch	/usr/include/boost/asio/detail/strand_service.hpp	/^  BOOST_ASIO_DECL bool do_dispatch(implementation_type& impl, operation* op);$/;"	p	class:boost::asio::detail::strand_service	access:private	signature:(implementation_type& impl, operation* op)
do_epoll_create	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL static int do_epoll_create();$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:()
do_epoll_create	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^int epoll_reactor::do_epoll_create()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
do_func	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    void do_func(const boost::system::error_code& error, size_t size)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:public	signature:(const boost::system::error_code& error, size_t size)
do_get_option	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^boost::system::error_code reactive_serial_port_service::do_get_option($/;"	f	class:boost::asio::detail::reactive_serial_port_service	signature:( const reactive_serial_port_service::implementation_type& impl, reactive_serial_port_service::load_function_type load, void* option, boost::system::error_code& ec) const
do_get_option	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^boost::system::error_code win_iocp_serial_port_service::do_get_option($/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	signature:( const win_iocp_serial_port_service::implementation_type& impl, win_iocp_serial_port_service::load_function_type load, void* option, boost::system::error_code& ec) const
do_get_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_get_option($/;"	p	class:boost::asio::detail::reactive_serial_port_service	access:private	signature:( const implementation_type& impl, load_function_type load, void* option, boost::system::error_code& ec) const
do_get_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_get_option($/;"	p	class:boost::asio::detail::win_iocp_serial_port_service	access:private	signature:( const implementation_type& impl, load_function_type load, void* option, boost::system::error_code& ec) const
do_has_service	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^bool service_registry::do_has_service($/;"	f	class:boost::asio::detail::service_registry	signature:( const boost::asio::io_service::service::key& key) const
do_has_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL bool do_has_service($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( const boost::asio::io_service::service::key& key) const
do_init	/usr/include/boost/asio/detail/impl/win_mutex.ipp	/^int win_mutex::do_init()$/;"	f	class:boost::asio::detail::win_mutex	signature:()
do_init	/usr/include/boost/asio/detail/impl/win_static_mutex.ipp	/^int win_static_mutex::do_init()$/;"	f	class:boost::asio::detail::win_static_mutex	signature:()
do_init	/usr/include/boost/asio/detail/win_mutex.hpp	/^  BOOST_ASIO_DECL int do_init();$/;"	p	class:boost::asio::detail::win_mutex	access:private	signature:()
do_init	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  BOOST_ASIO_DECL int do_init();$/;"	p	struct:boost::asio::detail::win_static_mutex	access:public	signature:()
do_init	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^  do_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init_base::do_init	access:public	signature:()
do_init	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^class openssl_init_base::do_init$/;"	c	class:boost::asio::ssl::detail::openssl_init_base	file:
do_kqueue_create	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^int kqueue_reactor::do_kqueue_create()$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:()
do_kqueue_create	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL static int do_kqueue_create();$/;"	p	class:boost::asio::detail::kqueue_reactor	access:private	signature:()
do_not_route	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_DONTROUTE> do_not_route;$/;"	t	class:boost::asio::socket_base	access:public
do_not_route	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined do_not_route;$/;"	t	class:boost::asio::socket_base	access:public
do_one	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^size_t win_iocp_io_service::do_one(bool block, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(bool block, boost::system::error_code& ec)
do_one	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL size_t do_one(bool block, boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:private	signature:(bool block, boost::system::error_code& ec)
do_open	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^boost::system::error_code reactive_socket_service_base::do_open($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, int af, int type, int protocol, boost::system::error_code& ec)
do_open	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^boost::system::error_code win_iocp_socket_service_base::do_open($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, int family, int type, int protocol, boost::system::error_code& ec)
do_open	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_open($/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:protected	signature:( base_implementation_type& impl, int af, int type, int protocol, boost::system::error_code& ec)
do_open	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_open($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:( base_implementation_type& impl, int family, int type, int protocol, boost::system::error_code& ec)
do_perform	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::descriptor_read_op_base	access:public	signature:(reactor_op* base)
do_perform	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::descriptor_write_op_base	access:public	signature:(reactor_op* base)
do_perform	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  static bool do_perform(reactor_op*)$/;"	f	class:boost::asio::detail::signal_set_service::pipe_read_op	access:public	signature:(reactor_op*)
do_perform	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^  static bool do_perform(reactor_op*)$/;"	f	class:boost::asio::detail::reactive_null_buffers_op	access:public	signature:(reactor_op*)
do_perform	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_accept_op_base	access:public	signature:(reactor_op* base)
do_perform	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_connect_op_base	access:public	signature:(reactor_op* base)
do_perform	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_recv_op_base	access:public	signature:(reactor_op* base)
do_perform	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:public	signature:(reactor_op* base)
do_perform	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_recvmsg_op_base	access:public	signature:(reactor_op* base)
do_perform	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_send_op_base	access:public	signature:(reactor_op* base)
do_perform	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  static bool do_perform(reactor_op* base)$/;"	f	class:boost::asio::detail::reactive_socket_sendto_op_base	access:public	signature:(reactor_op* base)
do_perform	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^  static bool do_perform(reactor_op*)$/;"	f	class:boost::asio::detail::win_iocp_null_buffers_op	access:public	signature:(reactor_op*)
do_poll_one	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^std::size_t task_io_service::do_poll_one(mutex::scoped_lock& lock,$/;"	f	class:boost::asio::detail::task_io_service	signature:(mutex::scoped_lock& lock, task_io_service::thread_info& this_thread, const boost::system::error_code& ec)
do_poll_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL std::size_t do_poll_one(mutex::scoped_lock& lock,$/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:(mutex::scoped_lock& lock, thread_info& this_thread, const boost::system::error_code& ec)
do_post	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^void strand_service::do_post(implementation_type& impl, operation* op)$/;"	f	class:boost::asio::detail::strand_service	signature:(implementation_type& impl, operation* op)
do_post	/usr/include/boost/asio/detail/strand_service.hpp	/^  BOOST_ASIO_DECL void do_post(implementation_type& impl, operation* op);$/;"	p	class:boost::asio::detail::strand_service	access:private	signature:(implementation_type& impl, operation* op)
do_read	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^size_t win_iocp_handle_service::do_read($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, boost::uint64_t offset, const boost::asio::mutable_buffer& buffer, boost::system::error_code& ec)
do_read	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL size_t do_read(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const boost::asio::mutable_buffer& buffer, boost::system::error_code& ec)
do_read	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL int do_read(void* data, std::size_t length);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(void* data, std::size_t length)
do_read	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^int engine::do_read(void* data, std::size_t length)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(void* data, std::size_t length)
do_remove_timer_queue	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void do_remove_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(timer_queue_base& queue)
do_remove_timer_queue	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void do_remove_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:(timer_queue_base& queue)
do_remove_timer_queue	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::do_remove_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(timer_queue_base& queue)
do_remove_timer_queue	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::do_remove_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(timer_queue_base& queue)
do_remove_timer_queue	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::do_remove_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timer_queue_base& queue)
do_remove_timer_queue	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::do_remove_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::select_reactor	signature:(timer_queue_base& queue)
do_remove_timer_queue	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::do_remove_timer_queue(timer_queue_base& queue)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(timer_queue_base& queue)
do_remove_timer_queue	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void do_remove_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:private	signature:(timer_queue_base& queue)
do_remove_timer_queue	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void do_remove_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::select_reactor	access:private	signature:(timer_queue_base& queue)
do_remove_timer_queue	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void do_remove_timer_queue(timer_queue_base& queue);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:private	signature:(timer_queue_base& queue)
do_run_one	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^std::size_t task_io_service::do_run_one(mutex::scoped_lock& lock,$/;"	f	class:boost::asio::detail::task_io_service	signature:(mutex::scoped_lock& lock, task_io_service::thread_info& this_thread, const boost::system::error_code& ec)
do_run_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL std::size_t do_run_one(mutex::scoped_lock& lock,$/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:(mutex::scoped_lock& lock, thread_info& this_thread, const boost::system::error_code& ec)
do_set_option	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^boost::system::error_code reactive_serial_port_service::do_set_option($/;"	f	class:boost::asio::detail::reactive_serial_port_service	signature:( reactive_serial_port_service::implementation_type& impl, reactive_serial_port_service::store_function_type store, const void* option, boost::system::error_code& ec)
do_set_option	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^boost::system::error_code win_iocp_serial_port_service::do_set_option($/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	signature:( win_iocp_serial_port_service::implementation_type& impl, win_iocp_serial_port_service::store_function_type store, const void* option, boost::system::error_code& ec)
do_set_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_set_option($/;"	p	class:boost::asio::detail::reactive_serial_port_service	access:private	signature:( implementation_type& impl, store_function_type store, const void* option, boost::system::error_code& ec)
do_set_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code do_set_option($/;"	p	class:boost::asio::detail::win_iocp_serial_port_service	access:private	signature:( implementation_type& impl, store_function_type store, const void* option, boost::system::error_code& ec)
do_set_password_callback	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::do_set_password_callback($/;"	f	class:boost::asio::ssl::context	signature:( detail::password_callback_base* callback, boost::system::error_code& ec)
do_set_verify_callback	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::do_set_verify_callback($/;"	f	class:boost::asio::ssl::context	signature:( detail::verify_callback_base* callback, boost::system::error_code& ec)
do_shutdown	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL int do_shutdown(void*, std::size_t);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(void*, std::size_t)
do_shutdown	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^int engine::do_shutdown(void*, std::size_t)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(void*, std::size_t)
do_sync_read	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int do_sync_read()$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:()
do_sync_write	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int do_sync_write(bool is_operation_done, int rc)$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:(bool is_operation_done, int rc)
do_throw_error	/usr/include/boost/asio/detail/impl/throw_error.ipp	/^void do_throw_error(const boost::system::error_code& err)$/;"	f	namespace:boost::asio::detail	signature:(const boost::system::error_code& err)
do_throw_error	/usr/include/boost/asio/detail/impl/throw_error.ipp	/^void do_throw_error(const boost::system::error_code& err, const char* location)$/;"	f	namespace:boost::asio::detail	signature:(const boost::system::error_code& err, const char* location)
do_throw_error	/usr/include/boost/asio/detail/throw_error.hpp	/^BOOST_ASIO_DECL void do_throw_error(const boost::system::error_code& err);$/;"	p	namespace:boost::asio::detail	signature:(const boost::system::error_code& err)
do_throw_error	/usr/include/boost/asio/detail/throw_error.hpp	/^BOOST_ASIO_DECL void do_throw_error(const boost::system::error_code& err,$/;"	p	namespace:boost::asio::detail	signature:(const boost::system::error_code& err, const char* location)
do_timerfd_create	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL static int do_timerfd_create();$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:()
do_timerfd_create	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^int epoll_reactor::do_timerfd_create()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
do_use_service	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^boost::asio::io_service::service* service_registry::do_use_service($/;"	f	class:boost::asio::detail::service_registry	signature:( const boost::asio::io_service::service::key& key, factory_type factory)
do_use_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL boost::asio::io_service::service* do_use_service($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( const boost::asio::io_service::service::key& key, factory_type factory)
do_wait	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void do_wait(const Duration& timeout, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:private	signature:(const Duration& timeout, boost::system::error_code& ec)
do_write	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^size_t win_iocp_handle_service::do_write($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, boost::uint64_t offset, const boost::asio::const_buffer& buffer, boost::system::error_code& ec)
do_write	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL size_t do_write(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const boost::asio::const_buffer& buffer, boost::system::error_code& ec)
do_write	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL int do_write(void* data, std::size_t length);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(void* data, std::size_t length)
do_write	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^int engine::do_write(void* data, std::size_t length)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(void* data, std::size_t length)
down_heap	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void down_heap(std::size_t index)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(std::size_t index)
dummy_	/usr/include/boost/asio/detail/noncopyable.hpp	/^  char dummy_;$/;"	m	class:boost::asio::detail::noncopyable	access:private
dummy_	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::ip::resolver_query_base	access:private
dummy_	/usr/include/boost/asio/serial_port_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::serial_port_base	access:private
dummy_	/usr/include/boost/asio/socket_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::socket_base	access:private
dummy_	/usr/include/boost/asio/ssl/context_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::ssl::context_base	access:private
dummy_	/usr/include/boost/asio/ssl/stream_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::ssl::stream_base	access:private
duration	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  typedef typename clock_type::duration duration;$/;"	t	class:boost::asio::basic_waitable_timer	access:public
duration	/usr/include/boost/asio/waitable_timer_service.hpp	/^  typedef typename clock_type::duration duration;$/;"	t	class:boost::asio::waitable_timer_service	access:public
duration_cast	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    boost::int64_t duration_cast() const$/;"	f	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:private	signature:() const
duration_type	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  typedef typename traits_type::duration_type duration_type;$/;"	t	class:boost::asio::basic_deadline_timer	access:public
duration_type	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  typedef typename TimeTraits::duration_type duration_type;$/;"	t	class:boost::asio::basic_socket_iostream	access:public
duration_type	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  typedef typename TimeTraits::duration_type duration_type;$/;"	t	class:boost::asio::basic_socket_streambuf	access:public
duration_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef typename traits_type::duration_type duration_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
duration_type	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  typedef typename clock_type::duration duration_type;$/;"	t	struct:boost::asio::detail::chrono_time_traits	access:public
duration_type	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  typedef typename Time_Traits::duration_type duration_type;$/;"	t	class:boost::asio::detail::deadline_timer_service	access:public
duration_type	/usr/include/boost/asio/detail/timer_queue.hpp	/^  typedef typename Time_Traits::duration_type duration_type;$/;"	t	class:boost::asio::detail::timer_queue	access:public
duration_type	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  typedef boost::posix_time::time_duration duration_type;$/;"	t	class:boost::asio::detail::timer_queue	access:public
duration_type	/usr/include/boost/asio/time_traits.hpp	/^  typedef boost::posix_time::time_duration duration_type;$/;"	t	struct:boost::asio::time_traits	access:public
dword_ptr_t	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  typedef DWORD dword_ptr_t;$/;"	t	class:boost::asio::detail::win_iocp_io_service	access:private
dword_ptr_t	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  typedef DWORD_PTR dword_ptr_t;$/;"	t	class:boost::asio::detail::win_iocp_io_service	access:private
ec_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
ec_	/usr/include/boost/asio/detail/reactor_op.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::detail::reactor_op	access:public
ec_	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::detail::resolve_endpoint_op	access:private
ec_	/usr/include/boost/asio/detail/resolve_op.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::detail::resolve_op	access:private
ec_	/usr/include/boost/asio/detail/signal_op.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::detail::signal_op	access:public
ec_	/usr/include/boost/asio/detail/wait_op.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::detail::wait_op	access:public
ec_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  boost::system::error_code ec_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
empty	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
empty	/usr/include/boost/asio/detail/hash_map.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:() const
empty	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^bool timer_queue<time_traits<boost::posix_time::ptime> >::empty() const$/;"	f	class:boost::asio::detail::timer_queue	signature:() const
empty	/usr/include/boost/asio/detail/op_queue.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:() const
empty	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:() const
empty	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual bool empty() const$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:() const
empty	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual bool empty() const = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:() const
empty	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL virtual bool empty() const;$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:() const
enable_connection_aborted	/usr/include/boost/asio/detail/socket_ops.hpp	/^  enable_connection_aborted = 4,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
enable_connection_aborted	/usr/include/boost/asio/socket_base.hpp	/^    enable_connection_aborted;$/;"	t	class:boost::asio::socket_base	access:public
enable_connection_aborted	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined enable_connection_aborted;$/;"	t	class:boost::asio::socket_base	access:public
enable_connection_aborted_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  bool enable_connection_aborted_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
enable_connection_aborted_option	/usr/include/boost/asio/detail/socket_types.hpp	/^const int enable_connection_aborted_option = 1;$/;"	m	namespace:boost::asio::detail
enable_loopback	/usr/include/boost/asio/ip/multicast.hpp	/^  enable_loopback;$/;"	t	namespace:boost::asio::ip::multicast
enable_loopback	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined enable_loopback;$/;"	t	namespace:boost::asio::ip::multicast
enabled	/usr/include/boost/asio/detail/socket_option.hpp	/^  bool enabled() const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:() const
enabled	/usr/include/boost/asio/detail/socket_option.hpp	/^  void enabled(bool value)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(bool value)
end	/usr/include/boost/asio/buffer.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:() const
end	/usr/include/boost/asio/buffer.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:() const
end	/usr/include/boost/asio/buffer.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::null_buffers	access:public	signature:() const
end	/usr/include/boost/asio/buffers_iterator.hpp	/^  static buffers_iterator end(const BufferSequence& buffers)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(const BufferSequence& buffers)
end	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:() const
end	/usr/include/boost/asio/detail/hash_map.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:() const
end	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator end()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
end_	/usr/include/boost/asio/buffers_iterator.hpp	/^  typename BufferSequence::const_iterator end_;$/;"	m	class:boost::asio::buffers_iterator	access:private
end_	/usr/include/boost/asio/impl/connect.hpp	/^    Iterator end_;$/;"	m	class:boost::asio::detail::connect_op	access:public
end_offset_	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type end_offset_;$/;"	m	class:boost::asio::detail::buffered_stream_storage	access:private
end_remainder_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer_Iterator end_remainder_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
endpoint	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  endpoint_type endpoint() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
endpoint	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL endpoint();$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:()
endpoint	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL endpoint(const boost::asio::ip::address& addr,$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:(const boost::asio::ip::address& addr, unsigned short port_num)
endpoint	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL endpoint(int family, unsigned short port_num);$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:(int family, unsigned short port_num)
endpoint	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  endpoint(const endpoint& other)$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:(const endpoint& other)
endpoint	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^class endpoint$/;"	c	namespace:boost::asio::ip::detail
endpoint	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^endpoint::endpoint()$/;"	f	class:boost::asio::ip::detail::endpoint	signature:()
endpoint	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^endpoint::endpoint(const boost::asio::ip::address& addr,$/;"	f	class:boost::asio::ip::detail::endpoint	signature:(const boost::asio::ip::address& addr, unsigned short port_num)
endpoint	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^endpoint::endpoint(int family, unsigned short port_num)$/;"	f	class:boost::asio::ip::detail::endpoint	signature:(int family, unsigned short port_num)
endpoint	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_endpoint<icmp> endpoint;$/;"	t	class:boost::asio::ip::icmp	access:public
endpoint	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_endpoint<tcp> endpoint;$/;"	t	class:boost::asio::ip::tcp	access:public
endpoint	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_endpoint<udp> endpoint;$/;"	t	class:boost::asio::ip::udp	access:public
endpoint	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  typedef basic_endpoint<datagram_protocol> endpoint;$/;"	t	class:boost::asio::local::datagram_protocol	access:public
endpoint	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL endpoint();$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:()
endpoint	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL endpoint(const char* path_name);$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:(const char* path_name)
endpoint	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL endpoint(const std::string& path_name);$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:(const std::string& path_name)
endpoint	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  endpoint(const endpoint& other)$/;"	f	class:boost::asio::local::detail::endpoint	access:public	signature:(const endpoint& other)
endpoint	/usr/include/boost/asio/local/detail/endpoint.hpp	/^class endpoint$/;"	c	namespace:boost::asio::local::detail
endpoint	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^endpoint::endpoint()$/;"	f	class:boost::asio::local::detail::endpoint	signature:()
endpoint	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^endpoint::endpoint(const char* path_name)$/;"	f	class:boost::asio::local::detail::endpoint	signature:(const char* path_name)
endpoint	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^endpoint::endpoint(const std::string& path_name)$/;"	f	class:boost::asio::local::detail::endpoint	signature:(const std::string& path_name)
endpoint	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_endpoint<stream_protocol> endpoint;$/;"	t	class:boost::asio::local::stream_protocol	access:public
endpoint_	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  endpoint_type endpoint_;$/;"	m	class:boost::asio::detail::resolve_endpoint_op	access:private
endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  Endpoint& endpoint_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:private
endpoint_	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  endpoint_type endpoint_;$/;"	m	class:boost::asio::ip::basic_resolver_entry	access:private
endpoint_size	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  int& endpoint_size()$/;"	f	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:public	signature:()
endpoint_size_	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  int endpoint_size_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:private
endpoint_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
endpoint_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
endpoint_type	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_seq_packet_socket	access:public
endpoint_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket	access:public
endpoint_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
endpoint_type	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket_iostream	access:public
endpoint_type	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket_streambuf	access:public
endpoint_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
endpoint_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
endpoint_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::reactive_socket_service	access:public
endpoint_type	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::resolve_endpoint_op	access:public
endpoint_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
endpoint_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
endpoint_type	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
endpoint_type	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:boost::asio::ip::basic_resolver_entry	access:public
endpoint_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
endpoint_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
endpoint_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
endpoint_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename protocol_type::endpoint endpoint_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
endpoint_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
engine	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL explicit engine(SSL_CTX* context);$/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:(SSL_CTX* context)
engine	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  engine(const engine&);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(const engine&)
engine	/usr/include/boost/asio/ssl/detail/engine.hpp	/^class engine$/;"	c	namespace:boost::asio::ssl::detail
engine	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::engine(SSL_CTX* context)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(SSL_CTX* context)
engine_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  engine engine_;$/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
enqueue_operation	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool enqueue_operation(Descriptor descriptor, reactor_op* op)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor, reactor_op* op)
enqueue_timer	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^bool timer_queue<time_traits<boost::posix_time::ptime> >::enqueue_timer($/;"	f	class:boost::asio::detail::timer_queue	signature:( const time_type& time, per_timer_data& timer, wait_op* op)
enqueue_timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  bool enqueue_timer(const time_type& time, per_timer_data& timer, wait_op* op)$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(const time_type& time, per_timer_data& timer, wait_op* op)
enqueue_timer	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL bool enqueue_timer(const time_type& time,$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:(const time_type& time, per_timer_data& timer, wait_op* op)
entry_event_	/usr/include/boost/asio/detail/win_thread.hpp	/^    ::HANDLE entry_event_;$/;"	m	class:boost::asio::detail::win_thread::func_base	access:public
eof	/usr/include/boost/asio/error.hpp	/^  eof,$/;"	e	enum:boost::asio::error::misc_errors
epoll_fd_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  int epoll_fd_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
epoll_reactor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL epoll_reactor(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(boost::asio::io_service& io_service)
epoll_reactor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^class epoll_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
epoll_reactor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^epoll_reactor::epoll_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(boost::asio::io_service& io_service)
epoll_size	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  enum { epoll_size = 20000 };$/;"	e	enum:boost::asio::detail::epoll_reactor::__anon10
equal	/usr/include/boost/asio/buffers_iterator.hpp	/^  bool equal(const buffers_iterator& other) const$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:(const buffers_iterator& other) const
equal	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  bool equal(const consuming_buffers_iterator& other) const$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:private	signature:(const consuming_buffers_iterator& other) const
equal	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  bool equal(const basic_resolver_iterator& other) const$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:private	signature:(const basic_resolver_iterator& other) const
erase	/usr/include/boost/asio/detail/hash_map.hpp	/^  void erase(const K& k)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const K& k)
erase	/usr/include/boost/asio/detail/hash_map.hpp	/^  void erase(iterator it)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(iterator it)
erase	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^void timer_queue_set::erase(timer_queue_base* q)$/;"	f	class:boost::asio::detail::timer_queue_set	signature:(timer_queue_base* q)
erase	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL void erase(timer_queue_base* q);$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:(timer_queue_base* q)
error	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  const boost::system::error_code& error() const$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:() const
error	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  virtual const boost::system::error_code& error() const$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:() const
error	/usr/include/boost/asio/error.hpp	/^namespace error {$/;"	n	namespace:boost::asio
error	/usr/include/boost/asio/impl/error.ipp	/^namespace error {$/;"	n	namespace:boost::asio	file:
error	/usr/include/boost/asio/placeholders.hpp	/^unspecified error;$/;"	m	namespace:boost::asio::placeholders
error	/usr/include/boost/asio/ssl/error.hpp	/^namespace error {$/;"	n	namespace:boost::asio
error	/usr/include/boost/asio/ssl/impl/error.ipp	/^namespace error {$/;"	n	namespace:boost::asio	file:
error_wrapper	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline ReturnType error_wrapper(ReturnType return_value,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(ReturnType return_value, boost::system::error_code& ec)
error_wrapper	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline ReturnType error_wrapper(ReturnType return_value,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(ReturnType return_value, boost::system::error_code& ec)
eval	/usr/include/boost/asio/basic_io_object.hpp	/^    static char (&eval(...))[2];$/;"	p	class:boost::asio::detail::service_has_move	access:private	signature:(....)
even	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:boost::asio::serial_port_base::parity::type
event	/usr/include/boost/asio/detail/event.hpp	/^typedef null_event event;$/;"	t	namespace:boost::asio::detail
event_	/usr/include/boost/asio/detail/win_event.hpp	/^  HANDLE event_;$/;"	m	class:boost::asio::detail::win_event	access:private
eventfd_select_interrupter	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL eventfd_select_interrupter();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
eventfd_select_interrupter	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^class eventfd_select_interrupter$/;"	c	namespace:boost::asio::detail
eventfd_select_interrupter	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^eventfd_select_interrupter::eventfd_select_interrupter()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
events_	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^  short events_;$/;"	m	class:boost::asio::detail::dev_poll_reactor::fork_helper	file:	access:private
except_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::dev_poll_reactor::op_types
except_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::epoll_reactor::op_types
except_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::kqueue_reactor::op_types
except_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1, except_op = 2,$/;"	e	enum:boost::asio::detail::select_reactor::op_types
exit_event_	/usr/include/boost/asio/detail/win_thread.hpp	/^    ::HANDLE exit_event_;$/;"	m	class:boost::asio::detail::win_thread::func_base	access:public
exit_event_	/usr/include/boost/asio/detail/win_thread.hpp	/^  ::HANDLE exit_event_;$/;"	m	class:boost::asio::detail::win_thread	access:private
expires_at	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_at(const time_type& expiry_time)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const time_type& expiry_time)
expires_at	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_at(const time_type& expiry_time,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const time_type& expiry_time, boost::system::error_code& ec)
expires_at	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  time_type expires_at() const$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:() const
expires_at	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  time_type expires_at() const$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:() const
expires_at	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  void expires_at(const time_type& expiry_time)$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:(const time_type& expiry_time)
expires_at	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  time_type expires_at() const$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:() const
expires_at	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void expires_at(const time_type& expiry_time)$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:(const time_type& expiry_time)
expires_at	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t expires_at(const time_point& expiry_time)$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(const time_point& expiry_time)
expires_at	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t expires_at(const time_point& expiry_time,$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(const time_point& expiry_time, boost::system::error_code& ec)
expires_at	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  time_point expires_at() const$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:() const
expires_at	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, const time_type& expiry_time, boost::system::error_code& ec)
expires_at	/usr/include/boost/asio/deadline_timer_service.hpp	/^  time_type expires_at(const implementation_type& impl) const$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
expires_at	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, const time_type& expiry_time, boost::system::error_code& ec)
expires_at	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  time_type expires_at(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
expires_at	/usr/include/boost/asio/waitable_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl, const time_point& expiry_time, boost::system::error_code& ec)
expires_at	/usr/include/boost/asio/waitable_timer_service.hpp	/^  time_point expires_at(const implementation_type& impl) const$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(const implementation_type& impl) const
expires_from_now	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  duration_type expires_from_now() const$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:() const
expires_from_now	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_from_now(const duration_type& expiry_time)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const duration_type& expiry_time)
expires_from_now	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_from_now(const duration_type& expiry_time,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const duration_type& expiry_time, boost::system::error_code& ec)
expires_from_now	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  duration_type expires_from_now() const$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:() const
expires_from_now	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  void expires_from_now(const duration_type& expiry_time)$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:(const duration_type& expiry_time)
expires_from_now	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  duration_type expires_from_now() const$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:() const
expires_from_now	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void expires_from_now(const duration_type& expiry_time)$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:(const duration_type& expiry_time)
expires_from_now	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  duration expires_from_now() const$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:() const
expires_from_now	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t expires_from_now(const duration& expiry_time)$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(const duration& expiry_time)
expires_from_now	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  std::size_t expires_from_now(const duration& expiry_time,$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(const duration& expiry_time, boost::system::error_code& ec)
expires_from_now	/usr/include/boost/asio/deadline_timer_service.hpp	/^  duration_type expires_from_now(const implementation_type& impl) const$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
expires_from_now	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, const duration_type& expiry_time, boost::system::error_code& ec)
expires_from_now	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  duration_type expires_from_now(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
expires_from_now	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, const duration_type& expiry_time, boost::system::error_code& ec)
expires_from_now	/usr/include/boost/asio/waitable_timer_service.hpp	/^  duration expires_from_now(const implementation_type& impl) const$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(const implementation_type& impl) const
expires_from_now	/usr/include/boost/asio/waitable_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl, const duration& expiry_time, boost::system::error_code& ec)
expiry	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    time_type expiry;$/;"	m	struct:boost::asio::detail::deadline_timer_service::implementation_type	access:public
expr_	/usr/include/boost/asio/impl/read_until.hpp	/^    RegEx expr_;$/;"	m	class:boost::asio::detail::read_until_expr_op	access:public
ext_bio	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    ::BIO* ext_bio;$/;"	m	struct:boost::asio::ssl::old::detail::openssl_stream_service::impl_struct	access:public
ext_bio_	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BIO* ext_bio_;$/;"	m	class:boost::asio::ssl::detail::engine	access:private
f_	/usr/include/boost/asio/detail/posix_thread.hpp	/^    Function f_;$/;"	m	class:boost::asio::detail::posix_thread::func	access:private
f_	/usr/include/boost/asio/detail/win_thread.hpp	/^    Function f_;$/;"	m	class:boost::asio::detail::win_thread::func	access:private
f_	/usr/include/boost/asio/detail/wince_thread.hpp	/^    Function f_;$/;"	m	class:boost::asio::detail::wince_thread::func	access:private
factory_type	/usr/include/boost/asio/detail/service_registry.hpp	/^    (*factory_type)(boost::asio::io_service&);$/;"	t	class:boost::asio::detail::service_registry::boost::asio::io_service	access:private
family	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^  int family;$/;"	m	struct:boost::asio::detail::socket_ops::gai_search	file:	access:public
family	/usr/include/boost/asio/ip/icmp.hpp	/^  int family() const$/;"	f	class:boost::asio::ip::icmp	access:public	signature:() const
family	/usr/include/boost/asio/ip/tcp.hpp	/^  int family() const$/;"	f	class:boost::asio::ip::tcp	access:public	signature:() const
family	/usr/include/boost/asio/ip/udp.hpp	/^  int family() const$/;"	f	class:boost::asio::ip::udp	access:public	signature:() const
family	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  int family() const$/;"	f	class:boost::asio::local::datagram_protocol	access:public	signature:() const
family	/usr/include/boost/asio/local/stream_protocol.hpp	/^  int family() const$/;"	f	class:boost::asio::local::stream_protocol	access:public	signature:() const
family_	/usr/include/boost/asio/ip/icmp.hpp	/^  int family_;$/;"	m	class:boost::asio::ip::icmp	access:private
family_	/usr/include/boost/asio/ip/tcp.hpp	/^  int family_;$/;"	m	class:boost::asio::ip::tcp	access:private
family_	/usr/include/boost/asio/ip/udp.hpp	/^  int family_;$/;"	m	class:boost::asio::ip::udp	access:private
fault	/usr/include/boost/asio/error.hpp	/^  fault = BOOST_ASIO_SOCKET_ERROR(EFAULT),$/;"	e	enum:boost::asio::error::basic_errors
fcntl	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int fcntl(int d, int cmd, boost::system::error_code& ec);$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, int cmd, boost::system::error_code& ec)
fcntl	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int fcntl(int d, int cmd,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, int cmd, long arg, boost::system::error_code& ec)
fcntl	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int fcntl(int d, int cmd, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, int cmd, boost::system::error_code& ec)
fcntl	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int fcntl(int d, int cmd, long arg, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, int cmd, long arg, boost::system::error_code& ec)
fd_array	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^    SOCKET fd_array[1];$/;"	m	struct:boost::asio::detail::win_fd_set_adapter::win_fd_set	access:public
fd_count	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^    u_int fd_count;$/;"	m	struct:boost::asio::detail::win_fd_set_adapter::win_fd_set	access:public
fd_set_	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  mutable fd_set fd_set_;$/;"	m	class:boost::asio::detail::posix_fd_set_adapter	access:private
fd_set_	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  win_fd_set* fd_set_;$/;"	m	class:boost::asio::detail::win_fd_set_adapter	access:private
fd_set_adapter	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^typedef win_fd_set_adapter fd_set_adapter;$/;"	t	namespace:boost::asio::detail
fd_set_failure	/usr/include/boost/asio/error.hpp	/^  fd_set_failure$/;"	e	enum:boost::asio::error::misc_errors
fd_sets_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  fd_set_adapter fd_sets_[max_select_ops];$/;"	m	class:boost::asio::detail::select_reactor	access:private
fenced_block	/usr/include/boost/asio/detail/fenced_block.hpp	/^typedef null_fenced_block fenced_block;$/;"	t	namespace:boost::asio::detail
file_format	/usr/include/boost/asio/ssl/context_base.hpp	/^  enum file_format$/;"	g	class:boost::asio::ssl::context_base	access:public
fill	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t fill()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
fill	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t fill(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(boost::system::error_code& ec)
fill	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t fill()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
fill	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t fill(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
fill_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^    fill_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_read_stream::fill_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, std::size_t previous_size, ReadHandler handler)
fill_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^  class fill_handler$/;"	c	class:boost::asio::buffered_read_stream	access:public
find	/usr/include/boost/asio/detail/hash_map.hpp	/^  const_iterator find(const K& k) const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const K& k) const
find	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator find(const K& k)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const K& k)
first	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  static Buffer first(const Buffers& buffer_sequence)$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:(const Buffers& buffer_sequence)
first	/usr/include/boost/asio/detail/hash_map.hpp	/^    iterator first;$/;"	m	struct:boost::asio::detail::hash_map::bucket_type	access:public
first	/usr/include/boost/asio/detail/object_pool.hpp	/^  Object* first()$/;"	f	class:boost::asio::detail::object_pool	access:public	signature:()
first_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer first_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
first_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer first_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
first_	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  timer_queue_base* first_;$/;"	m	class:boost::asio::detail::timer_queue_set	access:private
first_idle_thread_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  thread_info* first_idle_thread_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
first_op_	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^  operation* first_op_;$/;"	m	struct:boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit	file:	access:public
first_service	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^Service& service_registry::first_service()$/;"	f	class:boost::asio::detail::service_registry	signature:()
first_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  Service& first_service();$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:()
first_service_	/usr/include/boost/asio/detail/service_registry.hpp	/^  boost::asio::io_service::service* first_service_;$/;"	m	class:boost::asio::detail::service_registry	access:private
flags	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  typedef unspecified flags;$/;"	t	class:boost::asio::ip::resolver_query_base	access:public
flags_	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::reactive_socket_recv_op_base	access:private
flags_	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:private
flags_	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::reactive_socket_send_op_base	access:private
flags_	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::reactive_socket_sendto_op_base	access:private
flow_control	/usr/include/boost/asio/impl/serial_port_base.ipp	/^serial_port_base::flow_control::flow_control($/;"	f	class:boost::asio::serial_port_base::flow_control	signature:( serial_port_base::flow_control::type t)
flow_control	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL explicit flow_control(type t = none);$/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:(type t = none)
flow_control	/usr/include/boost/asio/serial_port_base.hpp	/^  class flow_control$/;"	c	class:boost::asio::serial_port_base	access:public
flush	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t flush()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
flush	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t flush(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
flush	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t flush()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
flush	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t flush(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(boost::system::error_code& ec)
flush_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^    flush_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_write_stream::flush_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, WriteHandler handler)
flush_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^  class flush_handler$/;"	c	class:boost::asio::buffered_write_stream	access:public
for_reading	/usr/include/boost/asio/ssl/context_base.hpp	/^    for_reading,$/;"	e	enum:boost::asio::ssl::context_base::password_purpose
for_writing	/usr/include/boost/asio/ssl/context_base.hpp	/^    for_writing$/;"	e	enum:boost::asio::ssl::context_base::password_purpose
fork_child	/usr/include/boost/asio/io_service.hpp	/^    fork_child$/;"	e	enum:boost::asio::io_service::fork_event
fork_event	/usr/include/boost/asio/io_service.hpp	/^  enum fork_event$/;"	g	class:boost::asio::io_service	access:public
fork_helper	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^  fork_helper(dev_poll_reactor* reactor, short events)$/;"	f	class:boost::asio::detail::dev_poll_reactor::fork_helper	access:public	signature:(dev_poll_reactor* reactor, short events)
fork_helper	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^class dev_poll_reactor::fork_helper$/;"	c	class:boost::asio::detail::dev_poll_reactor	file:
fork_parent	/usr/include/boost/asio/io_service.hpp	/^    fork_parent,$/;"	e	enum:boost::asio::io_service::fork_event
fork_prepare	/usr/include/boost/asio/io_service.hpp	/^    fork_prepare,$/;"	e	enum:boost::asio::io_service::fork_event
fork_prepared_	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  bool fork_prepared_;$/;"	m	struct:boost::asio::detail::signal_state	file:	access:public
fork_service	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void fork_service($/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:( boost::asio::io_service::fork_event fork_ev)
fork_service	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void fork_service($/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:( boost::asio::io_service::fork_event fork_ev)
fork_service	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::fork_service(boost::asio::io_service::fork_event fork_ev)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(boost::asio::io_service::fork_event fork_ev)
fork_service	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::fork_service(boost::asio::io_service::fork_event fork_ev)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(boost::asio::io_service::fork_event fork_ev)
fork_service	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::fork_service(boost::asio::io_service::fork_event fork_ev)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(boost::asio::io_service::fork_event fork_ev)
fork_service	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::fork_service($/;"	f	class:boost::asio::detail::resolver_service_base	signature:( boost::asio::io_service::fork_event fork_ev)
fork_service	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::fork_service(boost::asio::io_service::fork_event fork_ev)$/;"	f	class:boost::asio::detail::select_reactor	signature:(boost::asio::io_service::fork_event fork_ev)
fork_service	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::fork_service($/;"	f	class:boost::asio::detail::signal_set_service	signature:( boost::asio::io_service::fork_event fork_ev)
fork_service	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void fork_service($/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:( boost::asio::io_service::fork_event fork_ev)
fork_service	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void fork_service($/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:( boost::asio::io_service::fork_event fork_ev)
fork_service	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void fork_service($/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:( boost::asio::io_service::fork_event fork_ev)
fork_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL void fork_service($/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:( boost::asio::io_service::fork_event fork_ev)
fork_service	/usr/include/boost/asio/impl/io_service.ipp	/^void io_service::service::fork_service(boost::asio::io_service::fork_event)$/;"	f	class:boost::asio::io_service::service	signature:(boost::asio::io_service::fork_event)
fork_service	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL virtual void fork_service($/;"	p	class:boost::asio::io_service::service	access:private	signature:( boost::asio::io_service::fork_event event)
fork_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void fork_service(boost::asio::io_service::fork_event event)$/;"	f	class:boost::asio::ip::resolver_service	access:private	signature:(boost::asio::io_service::fork_event event)
fork_service	/usr/include/boost/asio/signal_set_service.hpp	/^  void fork_service(boost::asio::io_service::fork_event event)$/;"	f	class:boost::asio::signal_set_service	access:private	signature:(boost::asio::io_service::fork_event event)
forwarding_posix_time_traits	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^struct forwarding_posix_time_traits : time_traits<boost::posix_time::ptime> {};$/;"	s	namespace:boost::asio::detail	inherits:time_traits
free	/usr/include/boost/asio/detail/object_pool.hpp	/^  void free(Object* o)$/;"	f	class:boost::asio::detail::object_pool	access:public	signature:(Object* o)
free_descriptor_state	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void free_descriptor_state(descriptor_state* s);$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:(descriptor_state* s)
free_descriptor_state	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::free_descriptor_state(epoll_reactor::descriptor_state* s)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(epoll_reactor::descriptor_state* s)
free_descriptor_state	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::free_descriptor_state(kqueue_reactor::descriptor_state* s)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(kqueue_reactor::descriptor_state* s)
free_descriptor_state	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void free_descriptor_state(descriptor_state* s);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:private	signature:(descriptor_state* s)
free_list_	/usr/include/boost/asio/detail/object_pool.hpp	/^  Object* free_list_;$/;"	m	class:boost::asio::detail::object_pool	access:private
freeaddrinfo	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void freeaddrinfo(addrinfo_type* ai)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* ai)
freeaddrinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void freeaddrinfo(addrinfo_type* ai);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* ai)
freeaddrinfo_emulation	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void freeaddrinfo_emulation(addrinfo_type* aihead)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* aihead)
freehostent	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void freehostent(hostent* h)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(hostent* h)
from_string	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL static address from_string($/;"	p	class:boost::asio::ip::address	access:public	signature:( const char* str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL static address from_string($/;"	p	class:boost::asio::ip::address	access:public	signature:( const std::string& str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL static address from_string(const char* str);$/;"	p	class:boost::asio::ip::address	access:public	signature:(const char* str)
from_string	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL static address from_string(const std::string& str);$/;"	p	class:boost::asio::ip::address	access:public	signature:(const std::string& str)
from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL static address_v4 from_string($/;"	p	class:boost::asio::ip::address_v4	access:public	signature:( const char* str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL static address_v4 from_string($/;"	p	class:boost::asio::ip::address_v4	access:public	signature:( const std::string& str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL static address_v4 from_string(const char* str);$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:(const char* str)
from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL static address_v4 from_string(const std::string& str);$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:(const std::string& str)
from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 from_string($/;"	p	class:boost::asio::ip::address_v6	access:public	signature:( const char* str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 from_string($/;"	p	class:boost::asio::ip::address_v6	access:public	signature:( const std::string& str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 from_string(const char* str);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const char* str)
from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 from_string(const std::string& str);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const std::string& str)
from_string	/usr/include/boost/asio/ip/impl/address.ipp	/^address address::from_string(const char* str)$/;"	f	class:boost::asio::ip::address	signature:(const char* str)
from_string	/usr/include/boost/asio/ip/impl/address.ipp	/^address address::from_string(const char* str, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::address	signature:(const char* str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/impl/address.ipp	/^address address::from_string(const std::string& str)$/;"	f	class:boost::asio::ip::address	signature:(const std::string& str)
from_string	/usr/include/boost/asio/ip/impl/address.ipp	/^address address::from_string(const std::string& str,$/;"	f	class:boost::asio::ip::address	signature:(const std::string& str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4 address_v4::from_string($/;"	f	class:boost::asio::ip::address_v4	signature:( const char* str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4 address_v4::from_string($/;"	f	class:boost::asio::ip::address_v4	signature:( const std::string& str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4 address_v4::from_string(const char* str)$/;"	f	class:boost::asio::ip::address_v4	signature:(const char* str)
from_string	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4 address_v4::from_string(const std::string& str)$/;"	f	class:boost::asio::ip::address_v4	signature:(const std::string& str)
from_string	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::from_string($/;"	f	class:boost::asio::ip::address_v6	signature:( const char* str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::from_string($/;"	f	class:boost::asio::ip::address_v6	signature:( const std::string& str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::from_string(const char* str)$/;"	f	class:boost::asio::ip::address_v6	signature:(const char* str)
from_string	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::from_string(const std::string& str)$/;"	f	class:boost::asio::ip::address_v6	signature:(const std::string& str)
front	/usr/include/boost/asio/detail/op_queue.hpp	/^  Operation* front()$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:()
front	/usr/include/boost/asio/detail/op_queue.hpp	/^  static Operation*& front(op_queue<Operation>& q)$/;"	f	class:boost::asio::detail::op_queue_access	access:public	signature:(op_queue<Operation>& q)
front_	/usr/include/boost/asio/detail/op_queue.hpp	/^  Operation* front_;$/;"	m	class:boost::asio::detail::op_queue	access:private
full	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:boost::asio::detail::gcc_arm_fenced_block::full_t
full	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:boost::asio::detail::gcc_hppa_fenced_block::full_t
full	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	e	enum:boost::asio::detail::gcc_sync_fenced_block::half_or_full_t
full	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:boost::asio::detail::gcc_x86_fenced_block::full_t
full	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:boost::asio::detail::macos_fenced_block::full_t
full	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	e	enum:boost::asio::detail::null_fenced_block::half_or_full_t
full	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:boost::asio::detail::solaris_fenced_block::full_t
full	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:boost::asio::detail::win_fenced_block::full_t
full_t	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:boost::asio::detail::gcc_arm_fenced_block	access:public
full_t	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:boost::asio::detail::gcc_hppa_fenced_block	access:public
full_t	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:boost::asio::detail::gcc_x86_fenced_block	access:public
full_t	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:boost::asio::detail::macos_fenced_block	access:public
full_t	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:boost::asio::detail::solaris_fenced_block	access:public
full_t	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:boost::asio::detail::win_fenced_block	access:public
func	/usr/include/boost/asio/detail/posix_thread.hpp	/^    func(Function f)$/;"	f	class:boost::asio::detail::posix_thread::func	access:public	signature:(Function f)
func	/usr/include/boost/asio/detail/posix_thread.hpp	/^  class func$/;"	c	class:boost::asio::detail::posix_thread	inherits:func_base	access:private
func	/usr/include/boost/asio/detail/win_thread.hpp	/^    func(Function f)$/;"	f	class:boost::asio::detail::win_thread::func	access:public	signature:(Function f)
func	/usr/include/boost/asio/detail/win_thread.hpp	/^  class func$/;"	c	class:boost::asio::detail::win_thread	inherits:func_base	access:private
func	/usr/include/boost/asio/detail/wince_thread.hpp	/^    func(Function f)$/;"	f	class:boost::asio::detail::wince_thread::func	access:public	signature:(Function f)
func	/usr/include/boost/asio/detail/wince_thread.hpp	/^  class func$/;"	c	class:boost::asio::detail::wince_thread	inherits:func_base	access:private
func_	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  func_type func_;$/;"	m	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:private
func_	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  func_type func_;$/;"	m	class:boost::asio::detail::win_iocp_operation	access:private
func_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    func_t func_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:private
func_base	/usr/include/boost/asio/detail/posix_thread.hpp	/^  class func_base$/;"	c	class:boost::asio::detail::posix_thread	access:private
func_base	/usr/include/boost/asio/detail/win_thread.hpp	/^  class func_base$/;"	c	class:boost::asio::detail::win_thread	access:private
func_base	/usr/include/boost/asio/detail/wince_thread.hpp	/^  class func_base$/;"	c	class:boost::asio::detail::wince_thread	access:private
func_t	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^      void (const boost::system::error_code&, size_t)> func_t;$/;"	t	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:public
func_type	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  typedef void (*func_type)(task_io_service*,$/;"	t	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:protected
func_type	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  typedef void (*func_type)($/;"	t	class:boost::asio::detail::win_iocp_operation	access:protected
gai_aistruct	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int gai_aistruct(addrinfo_type*** next, const addrinfo_type* hints,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type*** next, const addrinfo_type* hints, const void* addr, int family)
gai_alloc	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline T* gai_alloc(std::size_t size = sizeof(T))$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(std::size_t size = sizeof(T))
gai_clone	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline addrinfo_type* gai_clone(addrinfo_type* ai)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* ai)
gai_clone_flag	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^enum { gai_clone_flag = 1 << 30 };$/;"	e	enum:boost::asio::detail::socket_ops::__anon11	file:
gai_echeck	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int gai_echeck(const char* host, const char* service,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, int flags, int family, int socktype, int protocol)
gai_free	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void gai_free(void* p)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void* p)
gai_nsearch	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int gai_nsearch(const char* host,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const addrinfo_type* hints, gai_search (&search)[2])
gai_port	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int gai_port(addrinfo_type* aihead, int port, int socktype)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* aihead, int port, int socktype)
gai_search	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^struct gai_search$/;"	s	namespace:boost::asio::detail::socket_ops	file:
gai_serv	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int gai_serv(addrinfo_type* aihead,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* aihead, const addrinfo_type* hints, const char* serv)
gai_strcpy	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void gai_strcpy(char* target, const char* source, std::size_t max_size)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(char* target, const char* source, std::size_t max_size)
gcc_arm_fenced_block	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  explicit gcc_arm_fenced_block(full_t)$/;"	f	class:boost::asio::detail::gcc_arm_fenced_block	access:public	signature:(full_t)
gcc_arm_fenced_block	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  explicit gcc_arm_fenced_block(half_t)$/;"	f	class:boost::asio::detail::gcc_arm_fenced_block	access:public	signature:(half_t)
gcc_arm_fenced_block	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^class gcc_arm_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
gcc_hppa_fenced_block	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  explicit gcc_hppa_fenced_block(full_t)$/;"	f	class:boost::asio::detail::gcc_hppa_fenced_block	access:public	signature:(full_t)
gcc_hppa_fenced_block	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  explicit gcc_hppa_fenced_block(half_t)$/;"	f	class:boost::asio::detail::gcc_hppa_fenced_block	access:public	signature:(half_t)
gcc_hppa_fenced_block	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^class gcc_hppa_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
gcc_sync_fenced_block	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^  explicit gcc_sync_fenced_block(half_or_full_t)$/;"	f	class:boost::asio::detail::gcc_sync_fenced_block	access:public	signature:(half_or_full_t)
gcc_sync_fenced_block	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^class gcc_sync_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
gcc_x86_fenced_block	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  explicit gcc_x86_fenced_block(full_t)$/;"	f	class:boost::asio::detail::gcc_x86_fenced_block	access:public	signature:(full_t)
gcc_x86_fenced_block	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  explicit gcc_x86_fenced_block(half_t)$/;"	f	class:boost::asio::detail::gcc_x86_fenced_block	access:public	signature:(half_t)
gcc_x86_fenced_block	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^class gcc_x86_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
get	/usr/include/boost/asio/detail/io_control.hpp	/^  bool get() const$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:() const
get	/usr/include/boost/asio/detail/io_control.hpp	/^  std::size_t get() const$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:() const
get	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  T* get()$/;"	f	class:boost::asio::detail::scoped_ptr	access:public	signature:()
get	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_type get() const$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:() const
get	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  OVERLAPPED* get()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
get	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  const OVERLAPPED* get() const$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:() const
get	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  OVERLAPPED* get()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
get	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  const OVERLAPPED* get() const$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:() const
get_addrinfo_category	/usr/include/boost/asio/error.hpp	/^const boost::system::error_category& get_addrinfo_category();$/;"	p	namespace:boost::asio::error	signature:()
get_addrinfo_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_addrinfo_category()$/;"	f	namespace:boost::asio::error	signature:()
get_addrinfo_category	/usr/include/boost/asio/impl/error.ipp	/^const boost::system::error_category& get_addrinfo_category()$/;"	f	namespace:boost::asio::error	signature:()
get_all_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void get_all_operations(op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(op_queue<operation>& ops)
get_all_timers	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^void timer_queue<time_traits<boost::posix_time::ptime> >::get_all_timers($/;"	f	class:boost::asio::detail::timer_queue	signature:( op_queue<operation>& ops)
get_all_timers	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^void timer_queue_set::get_all_timers(op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::timer_queue_set	signature:(op_queue<operation>& ops)
get_all_timers	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual void get_all_timers(op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(op_queue<operation>& ops)
get_all_timers	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual void get_all_timers(op_queue<operation>& ops) = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:(op_queue<operation>& ops)
get_all_timers	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL virtual void get_all_timers(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:(op_queue<operation>& ops)
get_all_timers	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL void get_all_timers(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:(op_queue<operation>& ops)
get_buffer_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  boost::asio::detail::array<char, buffer_size> get_buffer_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
get_data_len	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  size_t get_data_len() { return (data_end_ - data_start_); }    $/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
get_data_start	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  unsigned char* get_data_start() { return data_start_; }$/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
get_debug_check	/usr/include/boost/asio/buffer.hpp	/^  const boost::function<void()>& get_debug_check() const$/;"	f	class:boost::asio::const_buffer	access:public	signature:() const
get_debug_check	/usr/include/boost/asio/buffer.hpp	/^  const boost::function<void()>& get_debug_check() const$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:() const
get_descriptors	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void get_descriptors(Descriptor_Set& descriptors, op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor_Set& descriptors, op_queue<operation>& ops)
get_implementation	/usr/include/boost/asio/basic_io_object.hpp	/^  const implementation_type& get_implementation() const$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:() const
get_implementation	/usr/include/boost/asio/basic_io_object.hpp	/^  implementation_type& get_implementation()$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:()
get_io_service	/usr/include/boost/asio/basic_io_object.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::basic_io_object	access:public	signature:()
get_io_service	/usr/include/boost/asio/buffered_read_stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
get_io_service	/usr/include/boost/asio/buffered_stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
get_io_service	/usr/include/boost/asio/buffered_write_stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
get_io_service	/usr/include/boost/asio/impl/io_service.hpp	/^inline boost::asio::io_service& io_service::service::get_io_service()$/;"	f	class:boost::asio::io_service::service	signature:()
get_io_service	/usr/include/boost/asio/impl/io_service.hpp	/^inline boost::asio::io_service& io_service::work::get_io_service()$/;"	f	class:boost::asio::io_service::work	signature:()
get_io_service	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& get_io_service();$/;"	p	class:boost::asio::io_service::service	access:public	signature:()
get_io_service	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& get_io_service();$/;"	p	class:boost::asio::io_service::work	access:public	signature:()
get_io_service	/usr/include/boost/asio/ssl/old/stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
get_io_service	/usr/include/boost/asio/strand.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::io_service::strand	access:public	signature:()
get_misc_category	/usr/include/boost/asio/error.hpp	/^const boost::system::error_category& get_misc_category();$/;"	p	namespace:boost::asio::error	signature:()
get_misc_category	/usr/include/boost/asio/impl/error.ipp	/^const boost::system::error_category& get_misc_category()$/;"	f	namespace:boost::asio::error	signature:()
get_netdb_category	/usr/include/boost/asio/error.hpp	/^const boost::system::error_category& get_netdb_category();$/;"	p	namespace:boost::asio::error	signature:()
get_netdb_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_netdb_category()$/;"	f	namespace:boost::asio::error	signature:()
get_netdb_category	/usr/include/boost/asio/impl/error.ipp	/^const boost::system::error_category& get_netdb_category()$/;"	f	namespace:boost::asio::error	signature:()
get_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code get_option(GettableSerialPortOption& option,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(GettableSerialPortOption& option, boost::system::error_code& ec)
get_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  void get_option(GettableSerialPortOption& option)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(GettableSerialPortOption& option)
get_option	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code get_option(GettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(GettableSocketOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/basic_socket.hpp	/^  void get_option(GettableSocketOption& option) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(GettableSocketOption& option) const
get_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code get_option(GettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(GettableSocketOption& option, boost::system::error_code& ec)
get_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void get_option(GettableSocketOption& option)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(GettableSocketOption& option)
get_option	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(const implementation_type& impl, GettableSerialPortOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(const implementation_type& impl, Option& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(const implementation_type& impl, GettableSerialPortOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(const implementation_type& impl, Option& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(const implementation_type& impl, GettableSerialPortOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
get_output	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL boost::asio::mutable_buffers_1 get_output($/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:( const boost::asio::mutable_buffer& data)
get_output	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^boost::asio::mutable_buffers_1 engine::get_output($/;"	f	class:boost::asio::ssl::detail::engine	signature:( const boost::asio::mutable_buffer& data)
get_reactor	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^reactor& win_iocp_socket_service_base::get_reactor()$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:()
get_reactor	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL reactor& get_reactor();$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:()
get_ready_timers	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^void timer_queue<time_traits<boost::posix_time::ptime> >::get_ready_timers($/;"	f	class:boost::asio::detail::timer_queue	signature:( op_queue<operation>& ops)
get_ready_timers	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^void timer_queue_set::get_ready_timers(op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::timer_queue_set	signature:(op_queue<operation>& ops)
get_ready_timers	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual void get_ready_timers(op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(op_queue<operation>& ops)
get_ready_timers	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual void get_ready_timers(op_queue<operation>& ops) = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:(op_queue<operation>& ops)
get_ready_timers	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL virtual void get_ready_timers(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:(op_queue<operation>& ops)
get_ready_timers	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL void get_ready_timers(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:(op_queue<operation>& ops)
get_service	/usr/include/boost/asio/basic_io_object.hpp	/^  const service_type& get_service() const$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:() const
get_service	/usr/include/boost/asio/basic_io_object.hpp	/^  service_type& get_service()$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:()
get_signal_state	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^signal_state* get_signal_state()$/;"	f	namespace:boost::asio::detail	signature:()
get_signal_state	/usr/include/boost/asio/detail/signal_set_service.hpp	/^extern BOOST_ASIO_DECL struct signal_state* get_signal_state();$/;"	p	namespace:boost::asio::detail	signature:()
get_ssl_category	/usr/include/boost/asio/ssl/error.hpp	/^const boost::system::error_category& get_ssl_category();$/;"	p	namespace:boost::asio::error	signature:()
get_ssl_category	/usr/include/boost/asio/ssl/impl/error.ipp	/^const boost::system::error_category& get_ssl_category()$/;"	f	namespace:boost::asio::error	signature:()
get_state	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  BOOST_ASIO_DECL static tracking_state* get_state();$/;"	p	class:boost::asio::detail::handler_tracking	access:private	signature:()
get_state	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^handler_tracking::tracking_state* handler_tracking::get_state()$/;"	f	class:boost::asio::detail::handler_tracking	signature:()
get_system_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_system_category()$/;"	f	namespace:boost::asio::error	signature:()
get_timeout	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL int get_timeout();$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:private	signature:()
get_timeout	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL int get_timeout();$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:()
get_timeout	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL int get_timeout(itimerspec& ts);$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:(itimerspec& ts)
get_timeout	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^int dev_poll_reactor::get_timeout()$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:()
get_timeout	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^int epoll_reactor::get_timeout()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
get_timeout	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^int epoll_reactor::get_timeout(itimerspec& ts)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(itimerspec& ts)
get_timeout	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^timespec* kqueue_reactor::get_timeout(timespec& ts)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timespec& ts)
get_timeout	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^timeval* select_reactor::get_timeout(timeval& tv)$/;"	f	class:boost::asio::detail::select_reactor	signature:(timeval& tv)
get_timeout	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL timespec* get_timeout(timespec& ts);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:private	signature:(timespec& ts)
get_timeout	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL timeval* get_timeout(timeval& tv);$/;"	p	class:boost::asio::detail::select_reactor	access:private	signature:(timeval& tv)
get_unused_len	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  size_t get_unused_len() { return (NET_BUF_SIZE - (data_end_ - buf_)); }    $/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
get_unused_start	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  unsigned char* get_unused_start() { return data_end_; }$/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
getaddrinfo	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^boost::system::error_code getaddrinfo(const char* host,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, const addrinfo_type& hints, addrinfo_type** result, boost::system::error_code& ec)
getaddrinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL boost::system::error_code getaddrinfo(const char* host,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, const addrinfo_type& hints, addrinfo_type** result, boost::system::error_code& ec)
getaddrinfo_emulation	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline int getaddrinfo_emulation(const char* host, const char* service,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, const addrinfo_type* hintsp, addrinfo_type** result)
gethostbyaddr	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline hostent* gethostbyaddr(const char* addr, int length, int af,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* addr, int length, int af, hostent* result, char* buffer, int buflength, boost::system::error_code& ec)
gethostbyname	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline hostent* gethostbyname(const char* name, int af, struct hostent* result,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* name, int af, struct hostent* result, char* buffer, int buflength, int ai_flags, boost::system::error_code& ec)
gethostname	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int gethostname(char* name, int namelen, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(char* name, int namelen, boost::system::error_code& ec)
gethostname	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int gethostname(char* name,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(char* name, int namelen, boost::system::error_code& ec)
getnameinfo	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^boost::system::error_code getnameinfo(const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int flags, boost::system::error_code& ec)
getnameinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL boost::system::error_code getnameinfo($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int flags, boost::system::error_code& ec)
getnameinfo_emulation	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline boost::system::error_code getnameinfo_emulation($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const socket_addr_type* sa, std::size_t salen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int flags, boost::system::error_code& ec)
getpeername	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int getpeername(socket_type s, socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, bool cached, boost::system::error_code& ec)
getpeername	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int getpeername(socket_type s, socket_addr_type* addr,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, bool cached, boost::system::error_code& ec)
getsockname	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int getsockname(socket_type s, socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
getsockname	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int getsockname(socket_type s, socket_addr_type* addr,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
getsockopt	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int getsockopt(socket_type s, state_type state, int level, int optname,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, int level, int optname, void* optval, size_t* optlen, boost::system::error_code& ec)
getsockopt	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int getsockopt(socket_type s, state_type state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, int level, int optname, void* optval, size_t* optlen, boost::system::error_code& ec)
gqcs_timeout	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    gqcs_timeout = 500,$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon19
half	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:boost::asio::detail::gcc_arm_fenced_block::half_t
half	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:boost::asio::detail::gcc_hppa_fenced_block::half_t
half	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	e	enum:boost::asio::detail::gcc_sync_fenced_block::half_or_full_t
half	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:boost::asio::detail::gcc_x86_fenced_block::half_t
half	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:boost::asio::detail::macos_fenced_block::half_t
half	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	e	enum:boost::asio::detail::null_fenced_block::half_or_full_t
half	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:boost::asio::detail::solaris_fenced_block::half_t
half	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:boost::asio::detail::win_fenced_block::half_t
half_or_full_t	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	g	class:boost::asio::detail::gcc_sync_fenced_block	access:public
half_or_full_t	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	g	class:boost::asio::detail::null_fenced_block	access:public
half_t	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:boost::asio::detail::gcc_arm_fenced_block	access:public
half_t	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:boost::asio::detail::gcc_hppa_fenced_block	access:public
half_t	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:boost::asio::detail::gcc_x86_fenced_block	access:public
half_t	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:boost::asio::detail::macos_fenced_block	access:public
half_t	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:boost::asio::detail::solaris_fenced_block	access:public
half_t	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:boost::asio::detail::win_fenced_block	access:public
handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    HANDLE handle;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::auto_handle	access:public
handle_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    native_handle_type handle_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
handle_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    native_handle_type handle_;$/;"	m	class:boost::asio::detail::win_object_handle_service::implementation_type	access:private
handle_	/usr/include/boost/asio/ssl/verify_context.hpp	/^  native_handle_type handle_;$/;"	m	class:boost::asio::ssl::verify_context	access:private
handle_service_	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  win_iocp_handle_service handle_service_;$/;"	m	class:boost::asio::detail::win_iocp_serial_port_service	access:private
handler	/usr/include/boost/asio/io_service.hpp	/^  void dispatch(BOOST_ASIO_MOVE_ARG(CompletionHandler) handler);$/;"	m	class:boost::asio::io_service	access:public
handler	/usr/include/boost/asio/io_service.hpp	/^  void post(BOOST_ASIO_MOVE_ARG(CompletionHandler) handler);$/;"	m	class:boost::asio::io_service	access:public
handler_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
handler_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
handler_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::buffered_write_stream::flush_handler	access:private
handler_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder1	access:public
handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder2	access:public
handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder3	access:public
handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder4	access:public
handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder5	access:public
handler_	/usr/include/boost/asio/detail/completion_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::completion_handler	access:private
handler_	/usr/include/boost/asio/detail/descriptor_read_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::descriptor_read_op	access:private
handler_	/usr/include/boost/asio/detail/descriptor_write_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::descriptor_write_op	access:private
handler_	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_null_buffers_op	access:private
handler_	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_accept_op	access:private
handler_	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_connect_op	access:private
handler_	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_recv_op	access:private
handler_	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_recvfrom_op	access:private
handler_	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_recvmsg_op	access:private
handler_	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_send_op	access:private
handler_	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::reactive_socket_sendto_op	access:private
handler_	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::resolve_endpoint_op	access:private
handler_	/usr/include/boost/asio/detail/resolve_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::resolve_op	access:private
handler_	/usr/include/boost/asio/detail/signal_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::signal_handler	access:private
handler_	/usr/include/boost/asio/detail/wait_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::wait_handler	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_handle_read_op	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_handle_write_op	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_null_buffers_op	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_overlapped_op	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recv_op	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_socket_send_op	access:private
handler_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::rewrapped_handler	access:public
handler_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::wrapped_handler	access:public
handler_	/usr/include/boost/asio/impl/connect.hpp	/^    ComposedConnectHandler handler_;$/;"	m	class:boost::asio::detail::connect_op	access:public
handler_	/usr/include/boost/asio/impl/read.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_op	access:public
handler_	/usr/include/boost/asio/impl/read.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_streambuf_op	access:public
handler_	/usr/include/boost/asio/impl/read_at.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
handler_	/usr/include/boost/asio/impl/read_at.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_at_streambuf_op	access:public
handler_	/usr/include/boost/asio/impl/read_until.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_until_delim_op	access:public
handler_	/usr/include/boost/asio/impl/read_until.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_until_delim_string_op	access:public
handler_	/usr/include/boost/asio/impl/read_until.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_until_expr_op	access:public
handler_	/usr/include/boost/asio/impl/read_until.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::detail::read_until_match_op	access:public
handler_	/usr/include/boost/asio/impl/write.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::detail::write_op	access:public
handler_	/usr/include/boost/asio/impl/write.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::detail::write_streambuf_handler	access:public
handler_	/usr/include/boost/asio/impl/write_at.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
handler_	/usr/include/boost/asio/impl/write_at.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::detail::write_at_streambuf_op	access:public
handler_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
handler_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int_handler_func handler_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
handler_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::handshake_handler	access:private
handler_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::io_handler	access:private
handler_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::shutdown_handler	access:private
handler_impl	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    void handler_impl(const boost::system::error_code& error, size_t size)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::io_handler	access:private	signature:(const boost::system::error_code& error, size_t size)
handler_impl	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    void handler_impl(const boost::system::error_code& error, size_t)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::handshake_handler	access:private	signature:(const boost::system::error_code& error, size_t)
handler_impl	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    void handler_impl(const boost::system::error_code& error, size_t)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::shutdown_handler	access:private	signature:(const boost::system::error_code& error, size_t)
handler_tracking	/usr/include/boost/asio/detail/handler_tracking.hpp	/^class handler_tracking$/;"	c	namespace:boost::asio::detail
handler_type_requirements	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^struct handler_type_requirements$/;"	s	namespace:boost::asio::detail
handshake	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL want handshake($/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:( stream_base::handshake_type type, boost::system::error_code& ec)
handshake	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::want engine::handshake($/;"	f	class:boost::asio::ssl::detail::engine	signature:( stream_base::handshake_type type, boost::system::error_code& ec)
handshake	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  boost::system::error_code handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, boost::system::error_code& ec)
handshake	/usr/include/boost/asio/ssl/old/stream.hpp	/^  boost::system::error_code handshake(handshake_type type,$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(handshake_type type, boost::system::error_code& ec)
handshake	/usr/include/boost/asio/ssl/old/stream.hpp	/^  void handshake(handshake_type type)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(handshake_type type)
handshake	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  boost::system::error_code handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, boost::system::error_code& ec)
handshake_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    handshake_handler(Handler handler, boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::handshake_handler	access:public	signature:(Handler handler, boost::asio::io_service& io_service)
handshake_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  class handshake_handler$/;"	c	class:boost::asio::ssl::old::detail::openssl_stream_service	inherits:base_handler	access:private
handshake_op	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^  handshake_op(stream_base::handshake_type type)$/;"	f	class:boost::asio::ssl::detail::handshake_op	access:public	signature:(stream_base::handshake_type type)
handshake_op	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^class handshake_op$/;"	c	namespace:boost::asio::ssl::detail
handshake_type	/usr/include/boost/asio/ssl/stream_base.hpp	/^  enum handshake_type$/;"	g	class:boost::asio::ssl::stream_base	access:public
hardware	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:boost::asio::serial_port_base::flow_control::type
has_data	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  bool has_data() { return (data_start_ < data_end_); }$/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
has_operation	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool has_operation(Descriptor descriptor) const$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor) const
has_result_type	/usr/include/boost/asio/read_until.hpp	/^  struct has_result_type$/;"	s	namespace:boost::asio::detail
has_result_type_helper	/usr/include/boost/asio/read_until.hpp	/^  char (&has_result_type_helper(...))[2];$/;"	p	namespace:boost::asio::detail	signature:(....)
has_result_type_helper	/usr/include/boost/asio/read_until.hpp	/^  char has_result_type_helper(T*, typename T::result_type* = 0);$/;"	p	namespace:boost::asio::detail	signature:(T*, typename T::result_type* = 0)
has_service	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^bool service_registry::has_service() const$/;"	f	class:boost::asio::detail::service_registry	signature:() const
has_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  bool has_service() const;$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:() const
has_service	/usr/include/boost/asio/impl/io_service.hpp	/^inline bool has_service(io_service& ios)$/;"	f	namespace:boost::asio	signature:(io_service& ios)
has_service	/usr/include/boost/asio/io_service.hpp	/^  friend bool has_service(io_service& ios);$/;"	p	class:boost::asio::io_service	access:friend	signature:(io_service& ios)
has_service	/usr/include/boost/asio/io_service.hpp	/^template <typename Service> bool has_service(io_service& ios);$/;"	p	namespace:boost::asio	signature:(io_service& ios)
hash_map	/usr/include/boost/asio/detail/hash_map.hpp	/^  hash_map()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
hash_map	/usr/include/boost/asio/detail/hash_map.hpp	/^class hash_map$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
hash_size	/usr/include/boost/asio/detail/hash_map.hpp	/^  static std::size_t hash_size(std::size_t num_elems)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(std::size_t num_elems)
have_remote_endpoint	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    bool have_remote_endpoint() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:public	signature:() const
have_remote_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    bool have_remote_endpoint_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:private
have_remote_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    bool have_remote_endpoint_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service::implementation_type	access:public
heap_	/usr/include/boost/asio/detail/timer_queue.hpp	/^  std::vector<heap_entry> heap_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
heap_entry	/usr/include/boost/asio/detail/timer_queue.hpp	/^  struct heap_entry$/;"	s	class:boost::asio::detail::timer_queue	access:private
heap_index_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    std::size_t heap_index_;$/;"	m	class:boost::asio::detail::timer_queue::per_timer_data	access:private
helper	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef buffers_iterator_types_helper<is_mutable> helper;$/;"	t	struct:boost::asio::detail::buffers_iterator_types	access:public
high_resolution_timer	/usr/include/boost/asio/high_resolution_timer.hpp	/^  high_resolution_timer;$/;"	t	namespace:boost::asio
hints	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  const boost::asio::detail::addrinfo_type& hints() const$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:() const
hints_	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  boost::asio::detail::addrinfo_type hints_;$/;"	m	class:boost::asio::ip::basic_resolver_query	access:private
hops	/usr/include/boost/asio/ip/multicast.hpp	/^  IPPROTO_IP, IP_MULTICAST_TTL, IPPROTO_IPV6, IPV6_MULTICAST_HOPS> hops;$/;"	t	namespace:boost::asio::ip::multicast
hops	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined hops;$/;"	t	namespace:boost::asio::ip::multicast
hops	/usr/include/boost/asio/ip/unicast.hpp	/^typedef implementation_defined hops;$/;"	t	namespace:boost::asio::ip::unicast
host	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^  const char* host;$/;"	m	struct:boost::asio::detail::socket_ops::gai_search	file:	access:public
host_	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^  std::string host_;$/;"	m	class:boost::asio::ssl::rfc2818_verification	access:private
host_name	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string host_name() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
host_name	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string host_name() const$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:() const
host_name	/usr/include/boost/asio/ip/host_name.hpp	/^BOOST_ASIO_DECL std::string host_name();$/;"	p	namespace:boost::asio::ip	signature:()
host_name	/usr/include/boost/asio/ip/host_name.hpp	/^BOOST_ASIO_DECL std::string host_name(boost::system::error_code& ec);$/;"	p	namespace:boost::asio::ip	signature:(boost::system::error_code& ec)
host_name	/usr/include/boost/asio/ip/impl/host_name.ipp	/^std::string host_name()$/;"	f	namespace:boost::asio::ip	signature:()
host_name	/usr/include/boost/asio/ip/impl/host_name.ipp	/^std::string host_name(boost::system::error_code& ec)$/;"	f	namespace:boost::asio::ip	signature:(boost::system::error_code& ec)
host_name_	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string host_name_;$/;"	m	class:boost::asio::ip::basic_resolver_entry	access:private
host_name_	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string host_name_;$/;"	m	class:boost::asio::ip::basic_resolver_query	access:private
host_not_found	/usr/include/boost/asio/error.hpp	/^  host_not_found = BOOST_ASIO_NETDB_ERROR(HOST_NOT_FOUND),$/;"	e	enum:boost::asio::error::netdb_errors
host_not_found_try_again	/usr/include/boost/asio/error.hpp	/^  host_not_found_try_again = BOOST_ASIO_NETDB_ERROR(TRY_AGAIN),$/;"	e	enum:boost::asio::error::netdb_errors
host_to_network_long	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^u_long_type host_to_network_long(u_long_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_long_type value)
host_to_network_long	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL u_long_type host_to_network_long(u_long_type value);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(u_long_type value)
host_to_network_short	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^u_short_type host_to_network_short(u_short_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_short_type value)
host_to_network_short	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL u_short_type host_to_network_short(u_short_type value);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(u_short_type value)
host_unreachable	/usr/include/boost/asio/error.hpp	/^  host_unreachable = BOOST_ASIO_SOCKET_ERROR(EHOSTUNREACH),$/;"	e	enum:boost::asio::error::basic_errors
icmp	/usr/include/boost/asio/ip/icmp.hpp	/^  explicit icmp(int protocol_id, int protocol_family)$/;"	f	class:boost::asio::ip::icmp	access:private	signature:(int protocol_id, int protocol_family)
icmp	/usr/include/boost/asio/ip/icmp.hpp	/^class icmp$/;"	c	namespace:boost::asio::ip
id	/usr/include/boost/asio/datagram_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::datagram_socket_service	access:public
id	/usr/include/boost/asio/deadline_timer_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::deadline_timer_service	access:public
id	/usr/include/boost/asio/detail/pop_options.hpp	38;"	d
id	/usr/include/boost/asio/detail/push_options.hpp	39;"	d
id	/usr/include/boost/asio/io_service.hpp	/^  id() {}$/;"	f	class:boost::asio::io_service::id	access:public	signature:()
id	/usr/include/boost/asio/io_service.hpp	/^  static boost::asio::detail::service_id<Type> id;$/;"	m	class:boost::asio::detail::service_base	access:public
id	/usr/include/boost/asio/io_service.hpp	/^boost::asio::detail::service_id<Type> service_base<Type>::id;$/;"	m	class:boost::asio::detail::service_base
id	/usr/include/boost/asio/io_service.hpp	/^class io_service::id$/;"	c	class:boost::asio::io_service	inherits:noncopyable
id	/usr/include/boost/asio/ip/resolver_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::ip::resolver_service	access:public
id	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::posix::stream_descriptor_service	access:public
id	/usr/include/boost/asio/raw_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::raw_socket_service	access:public
id	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::seq_packet_socket_service	access:public
id	/usr/include/boost/asio/serial_port_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::serial_port_service	access:public
id	/usr/include/boost/asio/signal_set_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::signal_set_service	access:public
id	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::socket_acceptor_service	access:public
id	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::ssl::old::context_service	access:public
id	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::ssl::old::stream_service	access:public
id	/usr/include/boost/asio/stream_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::stream_socket_service	access:public
id	/usr/include/boost/asio/waitable_timer_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::waitable_timer_service	access:public
id	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::windows::object_handle_service	access:public
id	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::windows::random_access_handle_service	access:public
id	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::windows::stream_handle_service	access:public
id_	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    boost::uint64_t id_;$/;"	m	class:boost::asio::detail::handler_tracking::completion	access:private
id_	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    boost::uint64_t id_;$/;"	m	class:boost::asio::detail::handler_tracking::tracked_handler	access:private
id_	/usr/include/boost/asio/io_service.hpp	/^    const boost::asio::io_service::id* id_;$/;"	m	struct:boost::asio::io_service::service::key	access:public
if_indextoname	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^extern "C" char* if_indextoname(unsigned int, char*);$/;"	p	namespace:boost::asio::detail::socket_ops	file:	signature:(unsigned int, char*)
if_nametoindex	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^extern "C" unsigned int if_nametoindex(const char*);$/;"	p	namespace:boost::asio::detail::socket_ops	file:	signature:(const char*)
impl	/usr/include/boost/asio/ssl/impl/context.ipp	/^context::impl_type context::impl()$/;"	f	class:boost::asio::ssl::context	signature:()
impl	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  impl_type impl()$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:()
impl	/usr/include/boost/asio/ssl/old/stream.hpp	/^  impl_type impl()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
impl_	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^  strand_impl* impl_;$/;"	m	struct:boost::asio::detail::strand_service::on_dispatch_exit	access:public
impl_	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^  strand_impl* impl_;$/;"	m	struct:boost::asio::detail::strand_service::on_do_complete_exit	file:	access:public
impl_	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  timer_queue<forwarding_posix_time_traits> impl_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
impl_	/usr/include/boost/asio/io_service.hpp	/^  impl_type& impl_;$/;"	m	class:boost::asio::io_service	access:private
impl_	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  boost::asio::ip::detail::endpoint impl_;$/;"	m	class:boost::asio::ip::basic_endpoint	access:private
impl_	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  boost::asio::local::detail::endpoint impl_;$/;"	m	class:boost::asio::local::basic_endpoint	access:private
impl_	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  impl_type impl_;$/;"	m	class:boost::asio::ssl::old::basic_context	access:private
impl_	/usr/include/boost/asio/ssl/old/stream.hpp	/^  impl_type impl_;$/;"	m	class:boost::asio::ssl::old::stream	access:private
impl_	/usr/include/boost/asio/strand.hpp	/^  boost::asio::detail::strand_service::implementation_type impl_;$/;"	m	class:boost::asio::io_service::strand	access:private
impl_	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  detail::win_iocp_overlapped_ptr impl_;$/;"	m	class:boost::asio::windows::overlapped_ptr	access:private
impl_list_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  implementation_type* impl_list_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service	access:private
impl_list_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  base_implementation_type* impl_list_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service_base	access:protected
impl_list_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  implementation_type* impl_list_;$/;"	m	class:boost::asio::detail::win_object_handle_service	access:private
impl_struct	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  typedef struct impl_struct$/;"	s	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public
impl_type	/usr/include/boost/asio/io_service.hpp	/^  typedef detail::io_service_impl impl_type;$/;"	t	class:boost::asio::io_service	access:private
impl_type	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  typedef typename service_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::old::basic_context	access:public
impl_type	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  typedef implementation_defined impl_type;$/;"	t	class:boost::asio::ssl::old::context_service	access:public
impl_type	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  typedef service_impl_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::old::context_service	access:public
impl_type	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  typedef ::SSL_CTX* impl_type;$/;"	t	class:boost::asio::ssl::old::detail::openssl_context_service	access:public
impl_type	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  } * impl_type;$/;"	t	class:boost::asio::ssl::old::detail::openssl_stream_service	typeref:struct:boost::asio::ssl::old::detail::openssl_stream_service::impl_struct	access:public
impl_type	/usr/include/boost/asio/ssl/old/stream.hpp	/^  typedef typename service_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::old::stream	access:public
impl_type	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  typedef implementation_defined impl_type;$/;"	t	class:boost::asio::ssl::old::stream_service	access:public
impl_type	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  typedef service_impl_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::old::stream_service	access:public
implementation	/usr/include/boost/asio/basic_io_object.hpp	/^  implementation_type implementation;$/;"	m	class:boost::asio::basic_io_object	access:protected
implementation_type	/usr/include/boost/asio/basic_io_object.hpp	/^    typedef typename service_type::implementation_type implementation_type;$/;"	t	class:boost::asio::detail::service_has_move	access:private
implementation_type	/usr/include/boost/asio/basic_io_object.hpp	/^  typedef typename service_type::implementation_type implementation_type;$/;"	t	class:boost::asio::basic_io_object	access:public
implementation_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
implementation_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
implementation_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
implementation_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
implementation_type	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  struct implementation_type$/;"	s	class:boost::asio::detail::deadline_timer_service	inherits:boost::asio::detail::noncopyable	access:public
implementation_type	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:public	signature:()
implementation_type	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::reactive_descriptor_service	inherits:boost::asio::detail::noncopyable	access:public
implementation_type	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  typedef reactive_descriptor_service::implementation_type implementation_type;$/;"	t	class:boost::asio::detail::reactive_serial_port_service	access:public
implementation_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    implementation_type()$/;"	f	struct:boost::asio::detail::reactive_socket_service::implementation_type	access:public	signature:()
implementation_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  struct implementation_type :$/;"	s	class:boost::asio::detail::reactive_socket_service	inherits:reactive_socket_service_base::base_implementation_type	access:public
implementation_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef socket_ops::shared_cancel_token_type implementation_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
implementation_type	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  typedef socket_ops::shared_cancel_token_type implementation_type;$/;"	t	class:boost::asio::detail::resolver_service_base	access:public
implementation_type	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::signal_set_service::implementation_type	access:public	signature:()
implementation_type	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::signal_set_service	access:public
implementation_type	/usr/include/boost/asio/detail/strand_service.hpp	/^  typedef strand_impl* implementation_type;$/;"	t	class:boost::asio::detail::strand_service	access:public
implementation_type	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:public	signature:()
implementation_type	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::win_iocp_handle_service	access:public
implementation_type	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  typedef win_iocp_handle_service::implementation_type implementation_type;$/;"	t	class:boost::asio::detail::win_iocp_serial_port_service	access:public
implementation_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    implementation_type()$/;"	f	struct:boost::asio::detail::win_iocp_socket_service::implementation_type	access:public	signature:()
implementation_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  struct implementation_type :$/;"	s	class:boost::asio::detail::win_iocp_socket_service	inherits:win_iocp_socket_service_base::base_implementation_type	access:public
implementation_type	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::win_object_handle_service::implementation_type	access:public	signature:()
implementation_type	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::win_object_handle_service	access:public
implementation_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
implementation_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
implementation_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
implementation_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
implementation_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
implementation_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
implementation_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
implementation_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
implementation_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::serial_port_service	access:public
implementation_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::serial_port_service	access:public
implementation_type	/usr/include/boost/asio/signal_set_service.hpp	/^  typedef detail::signal_set_service::implementation_type implementation_type;$/;"	t	class:boost::asio::signal_set_service	access:public
implementation_type	/usr/include/boost/asio/signal_set_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::signal_set_service	access:public
implementation_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
implementation_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
implementation_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
implementation_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
implementation_type	/usr/include/boost/asio/waitable_timer_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::waitable_timer_service	access:public
implementation_type	/usr/include/boost/asio/waitable_timer_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::waitable_timer_service	access:public
implementation_type	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::windows::object_handle_service	access:public
implementation_type	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::windows::object_handle_service	access:public
implementation_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
implementation_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
implementation_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
implementation_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
implementations_	/usr/include/boost/asio/detail/strand_service.hpp	/^  scoped_ptr<strand_impl> implementations_[num_implementations];$/;"	m	class:boost::asio::detail::strand_service	access:private
in4_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef in_addr in4_addr_type;$/;"	t	namespace:boost::asio::detail
in4_mreq_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef ip_mreq in4_mreq_type;$/;"	t	namespace:boost::asio::detail
in6_addr_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct in6_addr_emulation$/;"	s	namespace:boost::asio::detail
in6_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef in6_addr in6_addr_type;$/;"	t	namespace:boost::asio::detail
in6_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef in6_addr_emulation in6_addr_type;$/;"	t	namespace:boost::asio::detail
in6_mreq_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef ipv6_mreq in6_mreq_type;$/;"	t	namespace:boost::asio::detail
in6_mreq_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef ipv6_mreq_emulation in6_mreq_type;$/;"	t	namespace:boost::asio::detail
in_avail	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
in_avail	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(boost::system::error_code& ec)
in_avail	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
in_avail	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
in_avail	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
in_avail	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(boost::system::error_code& ec)
in_avail	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  std::size_t in_avail(impl_type& \/*impl*\/, Stream& \/*next_layer*\/,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& , Stream& , boost::system::error_code& ec)
in_avail	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
in_avail	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(boost::system::error_code& ec)
in_avail	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  std::size_t in_avail(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, boost::system::error_code& ec)
in_flags_	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  socket_base::message_flags in_flags_;$/;"	m	class:boost::asio::detail::reactive_socket_recvmsg_op_base	access:private
in_progress	/usr/include/boost/asio/error.hpp	/^  in_progress = BOOST_ASIO_SOCKET_ERROR(EINPROGRESS),$/;"	e	enum:boost::asio::error::basic_errors
increment	/usr/include/boost/asio/buffers_iterator.hpp	/^  void increment()$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:()
increment	/usr/include/boost/asio/detail/atomic_count.hpp	/^inline void increment(atomic_count& a, long b) { a += b; }$/;"	f	namespace:boost::asio::detail	signature:(atomic_count& a, long b)
increment	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void increment()$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:private	signature:()
increment	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  void increment()$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:private	signature:()
index_	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  std::size_t index_;$/;"	m	class:boost::asio::ip::basic_resolver_iterator	access:private
inet_ntop	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^const char* inet_ntop(int af, const void* src, char* dest, size_t length,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, const void* src, char* dest, size_t length, unsigned long scope_id, boost::system::error_code& ec)
inet_ntop	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL const char* inet_ntop(int af, const void* src, char* dest,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(int af, const void* src, char* dest, size_t length, unsigned long scope_id, boost::system::error_code& ec)
inet_pton	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int inet_pton(int af, const char* src, void* dest,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, const char* src, void* dest, unsigned long* scope_id, boost::system::error_code& ec)
inet_pton	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int inet_pton(int af, const char* src, void* dest,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(int af, const char* src, void* dest, unsigned long* scope_id, boost::system::error_code& ec)
init	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  BOOST_ASIO_DECL static void init();$/;"	p	class:boost::asio::detail::handler_tracking	access:public	signature:()
init	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::init()$/;"	f	class:boost::asio::detail::handler_tracking	signature:()
init	/usr/include/boost/asio/detail/impl/win_static_mutex.ipp	/^void win_static_mutex::init()$/;"	f	class:boost::asio::detail::win_static_mutex	signature:()
init	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^  void init()$/;"	f	struct:boost::asio::detail::null_static_mutex	access:public	signature:()
init	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^  void init()$/;"	f	struct:boost::asio::detail::posix_static_mutex	access:public	signature:()
init	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  BOOST_ASIO_DECL void init();$/;"	p	struct:boost::asio::detail::win_static_mutex	access:public	signature:()
init	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void init(const char* path, std::size_t path_length);$/;"	p	class:boost::asio::local::detail::endpoint	access:private	signature:(const char* path, std::size_t path_length)
init	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^void endpoint::init(const char* path_name, std::size_t path_length)$/;"	f	class:boost::asio::local::detail::endpoint	signature:(const char* path_name, std::size_t path_length)
init_	/usr/include/boost/asio/io_service.hpp	/^  detail::signal_init<> init_;$/;"	m	class:boost::asio::io_service	access:private
init_	/usr/include/boost/asio/io_service.hpp	/^  detail::winsock_init<> init_;$/;"	m	class:boost::asio::io_service	access:private
init_	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::asio::ssl::detail::openssl_init<> init_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_context_service	access:private
init_buf	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void init_buf(buf& b, const void* data, size_t size)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(buf& b, const void* data, size_t size)
init_buf	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void init_buf(buf& b, void* data, size_t size)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(buf& b, void* data, size_t size)
init_buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void init_buf(buf& b, const void* data, size_t size);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(buf& b, const void* data, size_t size)
init_buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void init_buf(buf& b, void* data, size_t size);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(buf& b, void* data, size_t size)
init_buf_iov_base	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void init_buf_iov_base(T& base, void* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(T& base, void* addr)
init_buf_iov_base	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void init_buf_iov_base(void*& base, void* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void*& base, void* addr)
init_buffers	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void init_buffers()$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:()
init_count_	/usr/include/boost/asio/detail/winsock_init.hpp	/^    long init_count_;$/;"	m	struct:boost::asio::detail::winsock_init_base::data	access:public
init_key	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^void service_registry::init_key(boost::asio::io_service::service::key& key,$/;"	f	class:boost::asio::detail::service_registry	signature:(boost::asio::io_service::service::key& key, const boost::asio::detail::service_id<Service>& )
init_key	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^void service_registry::init_key(boost::asio::io_service::service::key& key,$/;"	f	class:boost::asio::detail::service_registry	signature:(boost::asio::io_service::service::key& key, const boost::asio::io_service::id& id)
init_key	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL static void init_key($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( boost::asio::io_service::service::key& key, const boost::asio::io_service::id& id)
init_key	/usr/include/boost/asio/detail/service_registry.hpp	/^  static void init_key(boost::asio::io_service::service::key& key,$/;"	p	class:boost::asio::detail::service_registry	access:private	signature:(boost::asio::io_service::service::key& key, const boost::asio::detail::service_id<Service>& )
init_msghdr_msg_name	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void init_msghdr_msg_name(T& name, const socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(T& name, const socket_addr_type* addr)
init_msghdr_msg_name	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void init_msghdr_msg_name(T& name, socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(T& name, socket_addr_type* addr)
init_msghdr_msg_name	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void init_msghdr_msg_name(void*& name, const socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void*& name, const socket_addr_type* addr)
init_msghdr_msg_name	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline void init_msghdr_msg_name(void*& name, socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void*& name, socket_addr_type* addr)
init_native_buffer	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  static void init_native_buffer(WSABUF& buf,$/;"	f	class:boost::asio::detail::buffer_sequence_adapter_base	access:protected	signature:(WSABUF& buf, const boost::asio::const_buffer& buffer)
init_native_buffer	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  static void init_native_buffer(WSABUF& buf,$/;"	f	class:boost::asio::detail::buffer_sequence_adapter_base	access:protected	signature:(WSABUF& buf, const boost::asio::mutable_buffer& buffer)
init_task	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void init_task();$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
init_task	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void init_task();$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:()
init_task	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::init_task()$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:()
init_task	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::init_task()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
init_task	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::init_task()$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:()
init_task	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::init_task()$/;"	f	class:boost::asio::detail::select_reactor	signature:()
init_task	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::init_task()$/;"	f	class:boost::asio::detail::task_io_service	signature:()
init_task	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void init_task();$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
init_task	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void init_task();$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:()
init_task	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void init_task();$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:()
init_task	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
initialised_	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  bool initialised_;$/;"	m	struct:boost::asio::detail::win_static_mutex	access:public
inner_stream_impl_	/usr/include/boost/asio/buffered_stream.hpp	/^  write_stream_type inner_stream_impl_;$/;"	m	class:boost::asio::buffered_stream	access:private
input_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  boost::asio::const_buffer input_;$/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
input_buffer_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  const boost::asio::mutable_buffers_1 input_buffer_;$/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
input_buffer_space_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  std::vector<unsigned char> input_buffer_space_; $/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
insert	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::pair<iterator, bool> insert(const value_type& v)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const value_type& v)
insert	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^void timer_queue_set::insert(timer_queue_base* q)$/;"	f	class:boost::asio::detail::timer_queue_set	signature:(timer_queue_base* q)
insert	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL void insert(timer_queue_base* q);$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:(timer_queue_base* q)
instance	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^openssl_init_base::instance()$/;"	f	class:boost::asio::ssl::detail::openssl_init_base	signature:()
instance	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  BOOST_ASIO_DECL static boost::asio::detail::shared_ptr<do_init> instance();$/;"	p	class:boost::asio::ssl::detail::openssl_init_base	access:protected	signature:()
instance_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  static openssl_init instance_;$/;"	m	class:boost::asio::ssl::detail::openssl_init	access:private
instance_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^openssl_init<Do_Init> openssl_init<Do_Init>::instance_;$/;"	m	class:boost::asio::ssl::detail::openssl_init
int_handler_func	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^    int_handler_func;$/;"	t	class:boost::asio::ssl::old::detail::openssl_operation	access:private
integer	/usr/include/boost/asio/detail/socket_option.hpp	/^  explicit integer(int v)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(int v)
integer	/usr/include/boost/asio/detail/socket_option.hpp	/^  integer()$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:()
integer	/usr/include/boost/asio/detail/socket_option.hpp	/^class integer$/;"	c	namespace:boost::asio::detail::socket_option
interlocked_compare_exchange_pointer	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void* win_iocp_socket_service_base::interlocked_compare_exchange_pointer($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( void** dest, void* exch, void* cmp)
interlocked_compare_exchange_pointer	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void* interlocked_compare_exchange_pointer($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:( void** dest, void* exch, void* cmp)
interlocked_exchange_pointer	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void* win_iocp_socket_service_base::interlocked_exchange_pointer($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( void** dest, void* val)
interlocked_exchange_pointer	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void* interlocked_exchange_pointer(void** dest, void* val);$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(void** dest, void* val)
internal_non_blocking	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^  internal_non_blocking = 2,$/;"	e	enum:boost::asio::detail::descriptor_ops::__anon9
internal_non_blocking	/usr/include/boost/asio/detail/socket_ops.hpp	/^  internal_non_blocking = 2,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
interrupt	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
interrupt	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:()
interrupt	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
interrupt	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::interrupt()$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:()
interrupt	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::interrupt()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
interrupt	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^void eventfd_select_interrupter::interrupt()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
interrupt	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::interrupt()$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:()
interrupt	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^void pipe_select_interrupter::interrupt()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
interrupt	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::interrupt()$/;"	f	class:boost::asio::detail::select_reactor	signature:()
interrupt	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^void socket_select_interrupter::interrupt()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
interrupt	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
interrupt	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
interrupt	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:()
interrupt	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL void interrupt();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
interrupted	/usr/include/boost/asio/error.hpp	/^  interrupted = BOOST_ASIO_SOCKET_ERROR(EINTR),$/;"	e	enum:boost::asio::error::basic_errors
interrupter_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
interrupter_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
interrupter_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
interrupter_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
invalid_argument	/usr/include/boost/asio/error.hpp	/^  invalid_argument = BOOST_ASIO_SOCKET_ERROR(EINVAL),$/;"	e	enum:boost::asio::error::basic_errors
invalid_service_owner	/usr/include/boost/asio/impl/io_service.ipp	/^invalid_service_owner::invalid_service_owner()$/;"	f	class:boost::asio::invalid_service_owner	signature:()
invalid_service_owner	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL invalid_service_owner();$/;"	p	class:boost::asio::invalid_service_owner	access:public	signature:()
invalid_service_owner	/usr/include/boost/asio/io_service.hpp	/^class invalid_service_owner$/;"	c	namespace:boost::asio	inherits:std::logic_error
invalid_socket	/usr/include/boost/asio/detail/socket_types.hpp	/^const SOCKET invalid_socket = INVALID_SOCKET;$/;"	m	namespace:boost::asio::detail
invocation_begin	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL void invocation_begin($/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:( const boost::system::error_code& ec, const char* arg)
invocation_begin	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL void invocation_begin($/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:( const boost::system::error_code& ec, int signal_number)
invocation_begin	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL void invocation_begin($/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:( const boost::system::error_code& ec, std::size_t bytes_transferred)
invocation_begin	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL void invocation_begin();$/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:()
invocation_begin	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL void invocation_begin(const boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:(const boost::system::error_code& ec)
invocation_begin	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::completion::invocation_begin($/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:( const boost::system::error_code& ec)
invocation_begin	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::completion::invocation_begin($/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:( const boost::system::error_code& ec, const char* arg)
invocation_begin	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::completion::invocation_begin($/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:( const boost::system::error_code& ec, int signal_number)
invocation_begin	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::completion::invocation_begin($/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:( const boost::system::error_code& ec, std::size_t bytes_transferred)
invocation_begin	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::completion::invocation_begin()$/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:()
invocation_end	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL void invocation_end();$/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:()
invocation_end	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::completion::invocation_end()$/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:()
invoke	/usr/include/boost/asio/detail/handler_invoke_helpers.hpp	/^inline void invoke(Function& function, Context& context)$/;"	f	namespace:boost_asio_handler_invoke_helpers	signature:(Function& function, Context& context)
invoke	/usr/include/boost/asio/detail/handler_invoke_helpers.hpp	/^inline void invoke(const Function& function, Context& context)$/;"	f	namespace:boost_asio_handler_invoke_helpers	signature:(const Function& function, Context& context)
invoked_	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    bool invoked_;$/;"	m	class:boost::asio::detail::handler_tracking::completion	access:private
io	/usr/include/boost/asio/ssl/detail/io.hpp	/^std::size_t io(Stream& next_layer, stream_core& core,$/;"	f	namespace:boost::asio::ssl::detail	signature:(Stream& next_layer, stream_core& core, const Operation& op, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code io_control(IoControlCommand& command,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/basic_socket.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(IoControlCommand& command)
io_control	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code io_control(IoControlCommand& command,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(IoControlCommand& command)
io_control	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/detail/io_control.hpp	/^namespace io_control {$/;"	n	namespace:boost::asio::detail
io_control	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, IO_Control_Command& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  boost::system::error_code io_control(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, IO_Control_Command& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::system::error_code io_control(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, IO_Control_Command& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code io_control(IoControlCommand& command,$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(IoControlCommand& command)
io_control	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
io_handler	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  struct io_handler$/;"	s	class:boost::asio::basic_socket_streambuf	access:private
io_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    io_handler(Handler handler, boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::io_handler	access:public	signature:(Handler handler, boost::asio::io_service& io_service)
io_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  class io_handler $/;"	c	class:boost::asio::ssl::old::detail::openssl_stream_service	inherits:base_handler	access:private
io_op	/usr/include/boost/asio/ssl/detail/io.hpp	/^  io_op(Stream& next_layer, stream_core& core,$/;"	f	class:boost::asio::ssl::detail::io_op	access:public	signature:(Stream& next_layer, stream_core& core, const Operation& op, Handler& handler)
io_op	/usr/include/boost/asio/ssl/detail/io.hpp	/^  io_op(const io_op& other)$/;"	f	class:boost::asio::ssl::detail::io_op	access:public	signature:(const io_op& other)
io_op	/usr/include/boost/asio/ssl/detail/io.hpp	/^  io_op(io_op&& other)$/;"	f	class:boost::asio::ssl::detail::io_op	access:public	signature:(io_op&& other)
io_op	/usr/include/boost/asio/ssl/detail/io.hpp	/^class io_op$/;"	c	namespace:boost::asio::ssl::detail
io_service	/usr/include/boost/asio/impl/io_service.ipp	/^io_service::io_service()$/;"	f	class:boost::asio::io_service	signature:()
io_service	/usr/include/boost/asio/impl/io_service.ipp	/^io_service::io_service(std::size_t concurrency_hint)$/;"	f	class:boost::asio::io_service	signature:(std::size_t concurrency_hint)
io_service	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL explicit io_service(std::size_t concurrency_hint);$/;"	p	class:boost::asio::io_service	access:public	signature:(std::size_t concurrency_hint)
io_service	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL io_service();$/;"	p	class:boost::asio::io_service	access:public	signature:()
io_service	/usr/include/boost/asio/io_service.hpp	/^class io_service$/;"	c	namespace:boost::asio	inherits:noncopyable
io_service_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
io_service_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
io_service_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_write_stream::flush_handler	access:private
io_service_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
io_service_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
io_service_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
io_service_	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^  boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::resolver_service_base::work_io_service_runner	file:	access:private
io_service_	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^  io_service_impl* io_service_;$/;"	m	struct:boost::asio::detail::strand_service::on_dispatch_exit	access:public
io_service_	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^  win_iocp_io_service* io_service_;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::timer_thread_function	file:	access:public
io_service_	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^  win_iocp_io_service* io_service_;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::work_finished_on_block_exit	file:	access:public
io_service_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
io_service_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
io_service_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::signal_set_service	access:private
io_service_	/usr/include/boost/asio/detail/strand_service.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::strand_service	access:private
io_service_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service_base	access:protected
io_service_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  io_service_impl& io_service_;$/;"	m	class:boost::asio::detail::win_object_handle_service	access:private
io_service_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:private
io_service_impl	/usr/include/boost/asio/io_service.hpp	/^namespace detail { typedef win_iocp_io_service io_service_impl; }$/;"	t	namespace:boost::asio::detail
io_service_impl_	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  io_service_impl& io_service_impl_;$/;"	m	class:boost::asio::detail::resolve_endpoint_op	access:private
io_service_impl_	/usr/include/boost/asio/detail/resolve_op.hpp	/^  io_service_impl& io_service_impl_;$/;"	m	class:boost::asio::detail::resolve_op	access:private
io_service_impl_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  io_service_impl& io_service_impl_;$/;"	m	class:boost::asio::detail::resolver_service_base	access:protected
io_service_impl_	/usr/include/boost/asio/io_service.hpp	/^  detail::io_service_impl& io_service_impl_;$/;"	m	class:boost::asio::io_service::work	access:private
iocp_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  auto_handle iocp_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
iocp_service_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  win_iocp_io_service& iocp_service_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service	access:private
iocp_service_	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  win_iocp_io_service* iocp_service_;$/;"	m	class:boost::asio::detail::win_iocp_overlapped_ptr	access:private
iocp_service_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  win_iocp_io_service& iocp_service_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service_base	access:protected
ioctl	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int ioctl(int d, state_type& state, long cmd,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, long cmd, ioctl_arg_type* arg, boost::system::error_code& ec)
ioctl	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int ioctl(int d, state_type& state, long cmd,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, long cmd, ioctl_arg_type* arg, boost::system::error_code& ec)
ioctl	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int ioctl(socket_type s, state_type& state, int cmd,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, int cmd, ioctl_arg_type* arg, boost::system::error_code& ec)
ioctl	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int ioctl(socket_type s, state_type& state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, int cmd, ioctl_arg_type* arg, boost::system::error_code& ec)
ioctl_arg_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef unsigned long ioctl_arg_type;$/;"	t	namespace:boost::asio::detail
iostream	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_socket_iostream<tcp> iostream;$/;"	t	class:boost::asio::ip::tcp	access:public
iostream	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_socket_iostream<stream_protocol> iostream;$/;"	t	class:boost::asio::local::stream_protocol	access:public
ip	/usr/include/boost/asio/ip/address.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/address_v4.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/address_v6.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/basic_resolver.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^namespace ip {$/;"	n	namespace:boost::asio	file:
ip	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/host_name.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/icmp.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/impl/address.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/impl/address.ipp	/^namespace ip {$/;"	n	namespace:boost::asio	file:
ip	/usr/include/boost/asio/ip/impl/address_v4.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^namespace ip {$/;"	n	namespace:boost::asio	file:
ip	/usr/include/boost/asio/ip/impl/address_v6.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^namespace ip {$/;"	n	namespace:boost::asio	file:
ip	/usr/include/boost/asio/ip/impl/basic_endpoint.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/impl/host_name.ipp	/^namespace ip {$/;"	n	namespace:boost::asio	file:
ip	/usr/include/boost/asio/ip/multicast.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/resolver_service.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/tcp.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/udp.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/unicast.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/v6_only.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ipv4	/usr/include/boost/asio/ip/address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	e	enum:boost::asio::ip::address::__anon20
ipv4_address_	/usr/include/boost/asio/ip/address.hpp	/^  boost::asio::ip::address_v4 ipv4_address_;$/;"	m	class:boost::asio::ip::address	access:private
ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  boost::asio::detail::in4_addr_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::network_interface	access:private
ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  boost::asio::detail::in4_mreq_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_request	access:private
ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv4_value_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:private
ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv4_value_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_hops	access:private
ipv4_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef int ipv4_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public
ipv4_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef unsigned char ipv4_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public
ipv6	/usr/include/boost/asio/ip/address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	e	enum:boost::asio::ip::address::__anon20
ipv6_address_	/usr/include/boost/asio/ip/address.hpp	/^  boost::asio::ip::address_v6 ipv6_address_;$/;"	m	class:boost::asio::ip::address	access:private
ipv6_mreq_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct ipv6_mreq_emulation$/;"	s	namespace:boost::asio::detail
ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  boost::asio::detail::in6_mreq_type ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_request	access:private
ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv6_value_type ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:private
ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv6_value_type ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_hops	access:private
ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  unsigned int ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::network_interface	access:private
ipv6_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef int ipv6_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public
ipv6_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef unsigned char ipv6_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public
ipv6mr_interface	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  unsigned int ipv6mr_interface;$/;"	m	struct:boost::asio::detail::ipv6_mreq_emulation	access:public
ipv6mr_multiaddr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  in6_addr_emulation ipv6mr_multiaddr;$/;"	m	struct:boost::asio::detail::ipv6_mreq_emulation	access:public
is_class_a	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bool is_class_a() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
is_class_a	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^bool address_v4::is_class_a() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
is_class_b	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bool is_class_b() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
is_class_b	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^bool address_v4::is_class_b() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
is_class_c	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bool is_class_c() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
is_class_c	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^bool address_v4::is_class_c() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::addrinfo_errors>$/;"	s	namespace:boost::system
is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::basic_errors>$/;"	s	namespace:boost::system
is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::misc_errors>$/;"	s	namespace:boost::system
is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::netdb_errors>$/;"	s	namespace:boost::system
is_error_code_enum	/usr/include/boost/asio/ssl/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::ssl_errors>$/;"	s	namespace:boost::system
is_link_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_link_local() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
is_link_local	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_link_local() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
is_loopback	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL bool is_loopback() const;$/;"	p	class:boost::asio::ip::address	access:public	signature:() const
is_loopback	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bool is_loopback() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
is_loopback	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_loopback() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
is_loopback	/usr/include/boost/asio/ip/impl/address.ipp	/^bool address::is_loopback() const$/;"	f	class:boost::asio::ip::address	signature:() const
is_loopback	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^bool address_v4::is_loopback() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
is_loopback	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_loopback() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
is_match_condition	/usr/include/boost/asio/read_until.hpp	/^struct is_match_condition$/;"	s	namespace:boost::asio
is_multicast	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL bool is_multicast() const;$/;"	p	class:boost::asio::ip::address	access:public	signature:() const
is_multicast	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bool is_multicast() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
is_multicast	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_multicast() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
is_multicast	/usr/include/boost/asio/ip/impl/address.ipp	/^bool address::is_multicast() const$/;"	f	class:boost::asio::ip::address	signature:() const
is_multicast	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^bool address_v4::is_multicast() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
is_multicast	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_multicast() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
is_multicast_global	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_multicast_global() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
is_multicast_global	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_multicast_global() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
is_multicast_link_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_multicast_link_local() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
is_multicast_link_local	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_multicast_link_local() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
is_multicast_node_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_multicast_node_local() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
is_multicast_node_local	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_multicast_node_local() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
is_multicast_org_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_multicast_org_local() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
is_multicast_org_local	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_multicast_org_local() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
is_multicast_site_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_multicast_site_local() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
is_multicast_site_local	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_multicast_site_local() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
is_mutable	/usr/include/boost/asio/buffers_iterator.hpp	/^      is_mutable = boost::is_convertible<$/;"	e	enum:boost::asio::detail::buffers_iterator_types::__anon6
is_open	/usr/include/boost/asio/basic_serial_port.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:() const
is_open	/usr/include/boost/asio/basic_socket.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
is_open	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:() const
is_open	/usr/include/boost/asio/datagram_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  bool is_open(const base_implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(const base_implementation_type& impl) const
is_open	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  bool is_open(const base_implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(const base_implementation_type& impl) const
is_open	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_object_handle_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:() const
is_open	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/raw_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/stream_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/windows/basic_handle.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:() const
is_open	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(const implementation_type& impl) const
is_positive_infinity	/usr/include/boost/asio/detail/timer_queue.hpp	/^  static bool is_positive_infinity($/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:( const boost::date_time::base_time<T, TimeSystem>& time)
is_positive_infinity	/usr/include/boost/asio/detail/timer_queue.hpp	/^  static bool is_positive_infinity(const Time_Type&)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(const Time_Type&)
is_read_buffered	/usr/include/boost/asio/is_read_buffered.hpp	/^class is_read_buffered$/;"	c	namespace:boost::asio
is_read_buffered_big_type	/usr/include/boost/asio/is_read_buffered.hpp	/^struct is_read_buffered_big_type { char data[10]; };$/;"	s	namespace:boost::asio::detail
is_read_buffered_helper	/usr/include/boost/asio/is_read_buffered.hpp	/^char is_read_buffered_helper(buffered_read_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_read_stream<Stream>* s)
is_read_buffered_helper	/usr/include/boost/asio/is_read_buffered.hpp	/^char is_read_buffered_helper(buffered_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_stream<Stream>* s)
is_read_buffered_helper	/usr/include/boost/asio/is_read_buffered.hpp	/^is_read_buffered_big_type is_read_buffered_helper(...);$/;"	p	namespace:boost::asio::detail	signature:(....)
is_set	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  bool is_set(socket_type descriptor) const$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:(socket_type descriptor) const
is_set	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  bool is_set(socket_type descriptor) const$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:(socket_type descriptor) const
is_site_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_site_local() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
is_site_local	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_site_local() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
is_unspecified	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL bool is_unspecified() const;$/;"	p	class:boost::asio::ip::address	access:public	signature:() const
is_unspecified	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bool is_unspecified() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
is_unspecified	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_unspecified() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
is_unspecified	/usr/include/boost/asio/ip/impl/address.ipp	/^bool address::is_unspecified() const$/;"	f	class:boost::asio::ip::address	signature:() const
is_unspecified	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^bool address_v4::is_unspecified() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
is_unspecified	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_unspecified() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
is_v4	/usr/include/boost/asio/ip/address.hpp	/^  bool is_v4() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
is_v4	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  bool is_v4() const$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:() const
is_v4_compatible	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_v4_compatible() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
is_v4_compatible	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_v4_compatible() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
is_v4_mapped	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bool is_v4_mapped() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
is_v4_mapped	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool address_v6::is_v4_mapped() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
is_v6	/usr/include/boost/asio/ip/address.hpp	/^  bool is_v6() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
is_write_buffered	/usr/include/boost/asio/is_write_buffered.hpp	/^class is_write_buffered$/;"	c	namespace:boost::asio
is_write_buffered_big_type	/usr/include/boost/asio/is_write_buffered.hpp	/^struct is_write_buffered_big_type { char data[10]; };$/;"	s	namespace:boost::asio::detail
is_write_buffered_helper	/usr/include/boost/asio/is_write_buffered.hpp	/^char is_write_buffered_helper(buffered_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_stream<Stream>* s)
is_write_buffered_helper	/usr/include/boost/asio/is_write_buffered.hpp	/^char is_write_buffered_helper(buffered_write_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_write_stream<Stream>* s)
is_write_buffered_helper	/usr/include/boost/asio/is_write_buffered.hpp	/^is_write_buffered_big_type is_write_buffered_helper(...);$/;"	p	namespace:boost::asio::detail	signature:(....)
iter_	/usr/include/boost/asio/buffer.hpp	/^  Iterator iter_;$/;"	m	class:boost::asio::detail::buffer_debug_check	access:private
iter_	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  iterator_type iter_;$/;"	m	class:boost::asio::detail::resolve_endpoint_op	access:private
iter_	/usr/include/boost/asio/impl/connect.hpp	/^    Iterator iter_;$/;"	m	class:boost::asio::detail::connect_op	access:public
iterator	/usr/include/boost/asio/detail/hash_map.hpp	/^  typedef typename std::list<value_type>::iterator iterator;$/;"	t	class:boost::asio::detail::hash_map	access:public
iterator	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef basic_resolver_iterator<InternetProtocol> iterator;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
iterator	/usr/include/boost/asio/placeholders.hpp	/^unspecified iterator;$/;"	m	namespace:boost::asio::placeholders
iterator_category	/usr/include/boost/asio/buffers_iterator.hpp	/^  typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:boost::asio::buffers_iterator	access:public
iterator_category	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef std::forward_iterator_tag iterator_category;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:public
iterator_type	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  typedef boost::asio::ip::basic_resolver_iterator<Protocol> iterator_type;$/;"	t	class:boost::asio::detail::resolve_endpoint_op	access:public
iterator_type	/usr/include/boost/asio/detail/resolve_op.hpp	/^  typedef boost::asio::ip::basic_resolver_iterator<Protocol> iterator_type;$/;"	t	class:boost::asio::detail::resolve_op	access:public
iterator_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef boost::asio::ip::basic_resolver_iterator<Protocol> iterator_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
iterator_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef basic_resolver_iterator<InternetProtocol> iterator_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
join	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^void posix_thread::join()$/;"	f	class:boost::asio::detail::posix_thread	signature:()
join	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^void win_thread::join()$/;"	f	class:boost::asio::detail::win_thread	signature:()
join	/usr/include/boost/asio/detail/null_thread.hpp	/^  void join()$/;"	f	class:boost::asio::detail::null_thread	access:public	signature:()
join	/usr/include/boost/asio/detail/posix_thread.hpp	/^  BOOST_ASIO_DECL void join();$/;"	p	class:boost::asio::detail::posix_thread	access:public	signature:()
join	/usr/include/boost/asio/detail/win_thread.hpp	/^  BOOST_ASIO_DECL void join();$/;"	p	class:boost::asio::detail::win_thread	access:public	signature:()
join	/usr/include/boost/asio/detail/wince_thread.hpp	/^  void join()$/;"	f	class:boost::asio::detail::wince_thread	access:public	signature:()
join_group	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined join_group;$/;"	t	namespace:boost::asio::ip::multicast
joined_	/usr/include/boost/asio/detail/posix_thread.hpp	/^  bool joined_;$/;"	m	class:boost::asio::detail::posix_thread	access:private
keep_alive	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_KEEPALIVE> keep_alive;$/;"	t	class:boost::asio::socket_base	access:public
keep_alive	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined keep_alive;$/;"	t	class:boost::asio::socket_base	access:public
key	/usr/include/boost/asio/io_service.hpp	/^    key() : type_info_(0), id_(0) {}$/;"	f	struct:boost::asio::io_service::service::key	access:public	signature:()
key	/usr/include/boost/asio/io_service.hpp	/^  struct key$/;"	s	class:boost::asio::io_service::service	access:private
key_	/usr/include/boost/asio/detail/call_stack.hpp	/^    Key* key_;$/;"	m	class:boost::asio::detail::call_stack::context	access:private
key_	/usr/include/boost/asio/io_service.hpp	/^  } key_;$/;"	m	class:boost::asio::io_service::service	typeref:struct:boost::asio::io_service::service::key	access:private
keys_match	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^bool service_registry::keys_match($/;"	f	class:boost::asio::detail::service_registry	signature:( const boost::asio::io_service::service::key& key1, const boost::asio::io_service::service::key& key2)
keys_match	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL static bool keys_match($/;"	p	class:boost::asio::detail::service_registry	access:private	signature:( const boost::asio::io_service::service::key& key1, const boost::asio::io_service::service::key& key2)
keyword_tss_ptr	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^  keyword_tss_ptr()$/;"	f	class:boost::asio::detail::keyword_tss_ptr	access:public	signature:()
keyword_tss_ptr	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^class keyword_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
kqueue_fd_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  int kqueue_fd_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
kqueue_reactor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^kqueue_reactor::kqueue_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(boost::asio::io_service& io_service)
kqueue_reactor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL kqueue_reactor(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(boost::asio::io_service& io_service)
kqueue_reactor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^class kqueue_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
last	/usr/include/boost/asio/detail/hash_map.hpp	/^    iterator last;$/;"	m	struct:boost::asio::detail::hash_map::bucket_type	access:public
lbarrier	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  static void lbarrier()$/;"	f	class:boost::asio::detail::gcc_x86_fenced_block	access:private	signature:()
leave_group	/usr/include/boost/asio/ip/multicast.hpp	/^  IPPROTO_IP, IP_DROP_MEMBERSHIP, IPPROTO_IPV6, IPV6_LEAVE_GROUP> leave_group;$/;"	t	namespace:boost::asio::ip::multicast
leave_group	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined leave_group;$/;"	t	namespace:boost::asio::ip::multicast
less_than	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  static bool less_than(const time_type& t1, const time_type& t2)$/;"	f	struct:boost::asio::detail::chrono_time_traits	access:public	signature:(const time_type& t1, const time_type& t2)
less_than	/usr/include/boost/asio/time_traits.hpp	/^  static bool less_than(const time_type& t1, const time_type& t2)$/;"	f	struct:boost::asio::time_traits	access:public	signature:(const time_type& t1, const time_type& t2)
level	/usr/include/boost/asio/detail/socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
level	/usr/include/boost/asio/detail/socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
level	/usr/include/boost/asio/detail/socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol& protocol) const
linger	/usr/include/boost/asio/detail/socket_option.hpp	/^  linger()$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:()
linger	/usr/include/boost/asio/detail/socket_option.hpp	/^  linger(bool e, int t)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(bool e, int t)
linger	/usr/include/boost/asio/detail/socket_option.hpp	/^class linger$/;"	c	namespace:boost::asio::detail::socket_option
linger	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_LINGER> linger;$/;"	t	class:boost::asio::socket_base	access:public
linger	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined linger;$/;"	t	class:boost::asio::socket_base	access:public
listen	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code listen(int backlog, boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(int backlog, boost::system::error_code& ec)
listen	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void listen(int backlog = socket_base::max_connections)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(int backlog = socket_base::max_connections)
listen	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int listen(socket_type s, int backlog, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int backlog, boost::system::error_code& ec)
listen	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  boost::system::error_code listen(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, int backlog, boost::system::error_code& ec)
listen	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int listen(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int backlog, boost::system::error_code& ec)
listen	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::system::error_code listen(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, int backlog, boost::system::error_code& ec)
listen	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code listen(implementation_type& impl, int backlog,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, int backlog, boost::system::error_code& ec)
live_list_	/usr/include/boost/asio/detail/object_pool.hpp	/^  Object* live_list_;$/;"	m	class:boost::asio::detail::object_pool	access:private
load	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::baud_rate::load($/;"	f	class:boost::asio::serial_port_base::baud_rate	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::character_size::load($/;"	f	class:boost::asio::serial_port_base::character_size	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::flow_control::load($/;"	f	class:boost::asio::serial_port_base::flow_control	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::parity::load($/;"	f	class:boost::asio::serial_port_base::parity	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::stop_bits::load($/;"	f	class:boost::asio::serial_port_base::stop_bits	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code load($/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code load($/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code load($/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code load($/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code load($/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:( const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load_function_type	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  typedef boost::system::error_code (*load_function_type)($/;"	t	class:boost::asio::detail::reactive_serial_port_service::boost::system	access:private
load_function_type	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  typedef boost::system::error_code (*load_function_type)($/;"	t	class:boost::asio::detail::win_iocp_serial_port_service::boost::system	access:private
load_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  static boost::system::error_code load_option(void* option,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:private	signature:(void* option, const termios& storage, boost::system::error_code& ec)
load_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  static boost::system::error_code load_option(void* option,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:private	signature:(void* option, const ::DCB& storage, boost::system::error_code& ec)
load_verify_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::load_verify_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, boost::system::error_code& ec)
load_verify_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::load_verify_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::context	signature:(const std::string& filename)
load_verify_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code load_verify_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, boost::system::error_code& ec)
load_verify_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void load_verify_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename)
load_verify_file	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code load_verify_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
load_verify_file	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code load_verify_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
local	/usr/include/boost/asio/local/basic_endpoint.hpp	/^namespace local {$/;"	n	namespace:boost::asio
local	/usr/include/boost/asio/local/connect_pair.hpp	/^namespace local {$/;"	n	namespace:boost::asio
local	/usr/include/boost/asio/local/datagram_protocol.hpp	/^namespace local {$/;"	n	namespace:boost::asio
local	/usr/include/boost/asio/local/detail/endpoint.hpp	/^    boost::asio::detail::sockaddr_un_type local;$/;"	m	union:boost::asio::local::detail::endpoint::data_union	access:public
local	/usr/include/boost/asio/local/detail/endpoint.hpp	/^namespace local {$/;"	n	namespace:boost::asio
local	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^namespace local {$/;"	n	namespace:boost::asio	file:
local	/usr/include/boost/asio/local/stream_protocol.hpp	/^namespace local {$/;"	n	namespace:boost::asio
local_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type local_endpoint() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
local_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type local_endpoint(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  endpoint_type local_endpoint() const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:() const
local_endpoint	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  endpoint_type local_endpoint(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/datagram_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/raw_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/stream_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
local_free_on_block_exit	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^  explicit local_free_on_block_exit(void* p)$/;"	f	class:boost::asio::detail::local_free_on_block_exit	access:public	signature:(void* p)
local_free_on_block_exit	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^class local_free_on_block_exit$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
lock	/usr/include/boost/asio/detail/null_mutex.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
lock	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^  void lock()$/;"	f	struct:boost::asio::detail::null_static_mutex	access:public	signature:()
lock	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
lock	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^  void lock()$/;"	f	struct:boost::asio::detail::posix_static_mutex	access:public	signature:()
lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
lock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
lock	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  void lock()$/;"	f	struct:boost::asio::detail::win_static_mutex	access:public	signature:()
lock_	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  mutex::scoped_lock* lock_;$/;"	m	struct:boost::asio::detail::task_io_service::task_cleanup	file:	access:public
lock_	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  mutex::scoped_lock* lock_;$/;"	m	struct:boost::asio::detail::task_io_service::work_cleanup	file:	access:public
locked	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  bool locked() const$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:() const
locked_	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  bool locked_;$/;"	m	class:boost::asio::detail::scoped_lock	access:private
locked_	/usr/include/boost/asio/detail/strand_service.hpp	/^    bool locked_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
loopback	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 loopback()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
loopback	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 loopback();$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:()
loopback	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::loopback()$/;"	f	class:boost::asio::ip::address_v6	signature:()
lowest_layer	/usr/include/boost/asio/basic_serial_port.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/basic_serial_port.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
lowest_layer	/usr/include/boost/asio/basic_socket.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/basic_socket.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
lowest_layer	/usr/include/boost/asio/buffered_read_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/buffered_read_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
lowest_layer	/usr/include/boost/asio/buffered_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::buffered_stream	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/buffered_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
lowest_layer	/usr/include/boost/asio/buffered_write_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/buffered_write_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
lowest_layer	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
lowest_layer	/usr/include/boost/asio/ssl/old/stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/ssl/old/stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
lowest_layer	/usr/include/boost/asio/windows/basic_handle.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/windows/basic_handle.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
lowest_layer_type	/usr/include/boost/asio/basic_serial_port.hpp	/^  typedef basic_serial_port<SerialPortService> lowest_layer_type;$/;"	t	class:boost::asio::basic_serial_port	access:public
lowest_layer_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef basic_socket<Protocol, SocketService> lowest_layer_type;$/;"	t	class:boost::asio::basic_socket	access:public
lowest_layer_type	/usr/include/boost/asio/buffered_read_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::buffered_read_stream	access:public
lowest_layer_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::buffered_stream	access:public
lowest_layer_type	/usr/include/boost/asio/buffered_write_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::buffered_write_stream	access:public
lowest_layer_type	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  typedef basic_descriptor<DescriptorService> lowest_layer_type;$/;"	t	class:boost::asio::posix::basic_descriptor	access:public
lowest_layer_type	/usr/include/boost/asio/ssl/old/stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::ssl::old::stream	access:public
lowest_layer_type	/usr/include/boost/asio/windows/basic_handle.hpp	/^  typedef basic_handle<HandleService> lowest_layer_type;$/;"	t	class:boost::asio::windows::basic_handle	access:public
lvref	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^template <typename T> T& lvref();$/;"	p	namespace:boost::asio::detail	signature:()
lvref	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^template <typename T> T& lvref(T);$/;"	p	namespace:boost::asio::detail	signature:(T)
macos_fenced_block	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  explicit macos_fenced_block(full_t)$/;"	f	class:boost::asio::detail::macos_fenced_block	access:public	signature:(full_t)
macos_fenced_block	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  explicit macos_fenced_block(half_t)$/;"	f	class:boost::asio::detail::macos_fenced_block	access:public	signature:(half_t)
macos_fenced_block	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^class macos_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
make_connect_op	/usr/include/boost/asio/impl/connect.hpp	/^  make_connect_op(basic_socket<Protocol, SocketService>& sock,$/;"	f	namespace:boost::asio::detail	signature:(basic_socket<Protocol, SocketService>& sock, const Iterator& begin, const Iterator& end, const ConnectCondition& connect_condition, ComposedConnectHandler handler)
make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(addrinfo_errors e)$/;"	f	namespace:boost::asio::error	signature:(addrinfo_errors e)
make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(basic_errors e)$/;"	f	namespace:boost::asio::error	signature:(basic_errors e)
make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(misc_errors e)$/;"	f	namespace:boost::asio::error	signature:(misc_errors e)
make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(netdb_errors e)$/;"	f	namespace:boost::asio::error	signature:(netdb_errors e)
make_error_code	/usr/include/boost/asio/ssl/error.hpp	/^inline boost::system::error_code make_error_code(ssl_errors e)$/;"	f	namespace:boost::asio::error	signature:(ssl_errors e)
make_read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^  make_read_at_op(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio::detail	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, ReadHandler handler)
make_read_at_streambuf_op	/usr/include/boost/asio/impl/read_at.hpp	/^  make_read_at_streambuf_op(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio::detail	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, ReadHandler handler)
make_read_op	/usr/include/boost/asio/impl/read.hpp	/^  make_read_op(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:boost::asio::detail	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, ReadHandler handler)
make_read_streambuf_op	/usr/include/boost/asio/impl/read.hpp	/^  make_read_streambuf_op($/;"	f	namespace:boost::asio::detail	signature:( AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, ReadHandler handler)
make_read_until_delim_op	/usr/include/boost/asio/impl/read_until.hpp	/^  make_read_until_delim_op(AsyncReadStream& s,$/;"	f	namespace:boost::asio::detail	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, ReadHandler handler)
make_read_until_delim_string_op	/usr/include/boost/asio/impl/read_until.hpp	/^  make_read_until_delim_string_op(AsyncReadStream& s,$/;"	f	namespace:boost::asio::detail	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, ReadHandler handler)
make_read_until_expr_op	/usr/include/boost/asio/impl/read_until.hpp	/^  make_read_until_expr_op(AsyncReadStream& s,$/;"	f	namespace:boost::asio::detail	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const RegEx& expr, ReadHandler handler)
make_read_until_match_op	/usr/include/boost/asio/impl/read_until.hpp	/^  make_read_until_match_op(AsyncReadStream& s,$/;"	f	namespace:boost::asio::detail	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, ReadHandler handler)
make_write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^  make_write_at_op(AsyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio::detail	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, WriteHandler handler)
make_write_at_streambuf_op	/usr/include/boost/asio/impl/write_at.hpp	/^  make_write_at_streambuf_op($/;"	f	namespace:boost::asio::detail	signature:( boost::asio::basic_streambuf<Allocator>& b, WriteHandler handler)
make_write_op	/usr/include/boost/asio/impl/write.hpp	/^  make_write_op(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio::detail	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, WriteHandler handler)
make_write_streambuf_handler	/usr/include/boost/asio/impl/write.hpp	/^  make_write_streambuf_handler($/;"	f	namespace:boost::asio::detail	signature:( boost::asio::basic_streambuf<Allocator>& b, WriteHandler handler)
map_error_code	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL const boost::system::error_code& map_error_code($/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:( boost::system::error_code& ec) const
map_error_code	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^const boost::system::error_code& engine::map_error_code($/;"	f	class:boost::asio::ssl::detail::engine	signature:( boost::system::error_code& ec) const
match_condition_	/usr/include/boost/asio/impl/read_until.hpp	/^    MatchCondition match_condition_;$/;"	m	class:boost::asio::detail::read_until_match_op	access:public
match_pattern	/usr/include/boost/asio/ssl/impl/rfc2818_verification.ipp	/^bool rfc2818_verification::match_pattern(const char* pattern,$/;"	f	class:boost::asio::ssl::rfc2818_verification	signature:(const char* pattern, std::size_t pattern_length, const char* host)
match_pattern	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^  BOOST_ASIO_DECL static bool match_pattern(const char* pattern,$/;"	p	class:boost::asio::ssl::rfc2818_verification	access:private	signature:(const char* pattern, std::size_t pattern_length, const char* host)
max_addr_v4_str_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_addr_v4_str_len = 256;$/;"	m	namespace:boost::asio::detail
max_addr_v6_str_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_addr_v6_str_len = 256;$/;"	m	namespace:boost::asio::detail
max_buffer_size	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  enum { max_buffer_size = INT_MAX };$/;"	e	enum:boost::asio::ssl::old::detail::openssl_stream_service::__anon2
max_buffers	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  enum { max_buffers = 64 < max_iov_len ? 64 : max_iov_len };$/;"	e	enum:boost::asio::detail::buffer_sequence_adapter::__anon8
max_connections	/usr/include/boost/asio/socket_base.hpp	/^  static const int max_connections = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
max_descriptor	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  socket_type max_descriptor() const$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:() const
max_descriptor	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  socket_type max_descriptor() const$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:() const
max_descriptor_	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  socket_type max_descriptor_;$/;"	m	class:boost::asio::detail::posix_fd_set_adapter	access:private
max_descriptor_	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  socket_type max_descriptor_;$/;"	m	class:boost::asio::detail::win_fd_set_adapter	access:private
max_iov_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_iov_len = 16;$/;"	m	namespace:boost::asio::detail
max_iov_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_iov_len = 64;$/;"	m	namespace:boost::asio::detail
max_ops	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::dev_poll_reactor::op_types
max_ops	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::epoll_reactor::op_types
max_ops	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:boost::asio::detail::kqueue_reactor::op_types
max_ops	/usr/include/boost/asio/detail/select_reactor.hpp	/^    max_select_ops = 3, connect_op = 3, max_ops = 4 };$/;"	e	enum:boost::asio::detail::select_reactor::op_types
max_select_ops	/usr/include/boost/asio/detail/select_reactor.hpp	/^    max_select_ops = 3, connect_op = 3, max_ops = 4 };$/;"	e	enum:boost::asio::detail::select_reactor::op_types
max_signal_number	/usr/include/boost/asio/detail/signal_set_service.hpp	/^enum { max_signal_number = NSIG };$/;"	e	enum:boost::asio::detail::__anon15
max_size	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::size_t max_size() const$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:() const
max_size_	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::size_t max_size_;$/;"	m	class:boost::asio::basic_streambuf	access:private
max_size_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  std::size_t max_size_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
max_size_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  std::size_t max_size_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
max_timeout_msec	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    max_timeout_msec = 5 * 60 * 1000,$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon19
max_timeout_usec	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    max_timeout_usec = max_timeout_msec * 1000,$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon19
max_tls_record_size	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  enum { max_tls_record_size = 17 * 1024 };$/;"	e	enum:boost::asio::ssl::detail::stream_core::__anon1
message	/usr/include/boost/asio/impl/error.ipp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::addrinfo_category	access:public	signature:(int value) const
message	/usr/include/boost/asio/impl/error.ipp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::misc_category	access:public	signature:(int value) const
message	/usr/include/boost/asio/impl/error.ipp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::netdb_category	access:public	signature:(int value) const
message	/usr/include/boost/asio/ssl/impl/error.ipp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::ssl_category	access:public	signature:(int value) const
message_do_not_route	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_do_not_route = MSG_DONTROUTE;$/;"	m	namespace:boost::asio::detail
message_do_not_route	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_do_not_route = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
message_end_of_record	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_end_of_record = 0; \/\/ Not supported on Windows.$/;"	m	namespace:boost::asio::detail
message_end_of_record	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_end_of_record = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
message_flags	/usr/include/boost/asio/socket_base.hpp	/^  typedef int message_flags;$/;"	t	class:boost::asio::socket_base	access:public
message_out_of_band	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_out_of_band = MSG_OOB;$/;"	m	namespace:boost::asio::detail
message_out_of_band	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_out_of_band = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
message_peek	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_peek = MSG_PEEK;$/;"	m	namespace:boost::asio::detail
message_peek	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_peek = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
message_size	/usr/include/boost/asio/error.hpp	/^  message_size = BOOST_ASIO_SOCKET_ERROR(EMSGSIZE),$/;"	e	enum:boost::asio::error::basic_errors
method	/usr/include/boost/asio/ssl/context_base.hpp	/^  enum method$/;"	g	class:boost::asio::ssl::context_base	access:public
might_have_pending_waits	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    bool might_have_pending_waits;$/;"	m	struct:boost::asio::detail::deadline_timer_service::implementation_type	access:public
minimum_	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t minimum_;$/;"	m	class:boost::asio::detail::transfer_at_least_t	access:private
misc_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& misc_category$/;"	m	namespace:boost::asio::error
misc_category	/usr/include/boost/asio/impl/error.ipp	/^class misc_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	file:	inherits:boost::system::error_category
misc_errors	/usr/include/boost/asio/error.hpp	/^enum misc_errors$/;"	g	namespace:boost::asio::error
move_assign	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, datagram_socket_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^void reactive_descriptor_service::move_assign($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl, reactive_descriptor_service& other_service, reactive_descriptor_service::implementation_type& other_impl)
move_assign	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::move_assign($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, win_iocp_handle_service& other_service, win_iocp_handle_service::implementation_type& other_impl)
move_assign	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::move_assign($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, win_object_handle_service& other_service, win_object_handle_service::implementation_type& other_impl)
move_assign	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL void move_assign(implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, reactive_descriptor_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, reactive_serial_port_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, reactive_socket_service_base& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void move_assign(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, win_iocp_handle_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, win_iocp_serial_port_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, win_iocp_socket_service_base& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void move_assign(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, win_object_handle_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, stream_descriptor_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/raw_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, raw_socket_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, seq_packet_socket_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/serial_port_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, serial_port_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, socket_acceptor_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/stream_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, stream_socket_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, object_handle_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, random_access_handle_service& other_service, implementation_type& other_impl)
move_assign	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, stream_handle_service& other_service, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^void reactive_descriptor_service::move_construct($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl, reactive_descriptor_service::implementation_type& other_impl)
move_construct	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::move_construct($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, win_iocp_handle_service::implementation_type& other_impl)
move_construct	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::move_construct($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, win_object_handle_service::implementation_type& other_impl)
move_construct	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL void move_construct(implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void move_construct(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void move_construct(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/raw_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/serial_port_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/stream_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_construct	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, implementation_type& other_impl)
move_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void move_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& target_descriptor_data, per_descriptor_data& source_descriptor_data)
move_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void move_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& target_descriptor_data, per_descriptor_data& source_descriptor_data)
move_descriptor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::move_descriptor(socket_type,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(socket_type, dev_poll_reactor::per_descriptor_data&, dev_poll_reactor::per_descriptor_data&)
move_descriptor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::move_descriptor(socket_type,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(socket_type, epoll_reactor::per_descriptor_data& target_descriptor_data, epoll_reactor::per_descriptor_data& source_descriptor_data)
move_descriptor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::move_descriptor(socket_type,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(socket_type, kqueue_reactor::per_descriptor_data& target_descriptor_data, kqueue_reactor::per_descriptor_data& source_descriptor_data)
move_descriptor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::move_descriptor(socket_type,$/;"	f	class:boost::asio::detail::select_reactor	signature:(socket_type, select_reactor::per_descriptor_data&, select_reactor::per_descriptor_data&)
move_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void move_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& target_descriptor_data, per_descriptor_data& source_descriptor_data)
move_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void move_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& target_descriptor_data, per_descriptor_data& source_descriptor_data)
msg_namelen	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^struct msghdr { int msg_namelen; };$/;"	m	struct:boost::asio::detail::socket_ops::msghdr	file:	access:public
msghdr	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^struct msghdr { int msg_namelen; };$/;"	s	namespace:boost::asio::detail::socket_ops	file:
multicast	/usr/include/boost/asio/ip/multicast.hpp	/^namespace multicast {$/;"	n	namespace:boost::asio::ip
multicast_enable_loopback	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_enable_loopback(bool v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(bool v)
multicast_enable_loopback	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_enable_loopback()$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:()
multicast_enable_loopback	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class multicast_enable_loopback$/;"	c	namespace:boost::asio::ip::detail::socket_option
multicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_hops(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(int v)
multicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_hops()$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:()
multicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class multicast_hops$/;"	c	namespace:boost::asio::ip::detail::socket_option
multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_request($/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:( const boost::asio::ip::address_v4& multicast_address, const boost::asio::ip::address_v4& network_interface = boost::asio::ip::address_v4::any())
multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_request($/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:( const boost::asio::ip::address_v6& multicast_address, unsigned long network_interface = 0)
multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_request(const boost::asio::ip::address& multicast_address)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const boost::asio::ip::address& multicast_address)
multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_request()$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:()
multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class multicast_request$/;"	c	namespace:boost::asio::ip::detail::socket_option
mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer()$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:()
mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer(void* data, std::size_t size)$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:(void* data, std::size_t size)
mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer(void* data, std::size_t size,$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:(void* data, std::size_t size, boost::function<void()> debug_check)
mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^class mutable_buffer$/;"	c	namespace:boost::asio
mutable_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  explicit mutable_buffers_1(const mutable_buffer& b)$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:(const mutable_buffer& b)
mutable_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffers_1(void* data, std::size_t size)$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:(void* data, std::size_t size)
mutable_buffers_1	/usr/include/boost/asio/buffer.hpp	/^class mutable_buffers_1$/;"	c	namespace:boost::asio	inherits:mutable_buffer
mutable_buffers_type	/usr/include/boost/asio/basic_streambuf.hpp	/^  typedef implementation_defined mutable_buffers_type;$/;"	t	class:boost::asio::basic_streambuf	access:public
mutex	/usr/include/boost/asio/detail/mutex.hpp	/^typedef null_mutex mutex;$/;"	t	namespace:boost::asio::detail
mutex	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  Mutex& mutex()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
mutex_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
mutex_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    mutex mutex_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
mutex_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  mutex mutex_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
mutex_	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^  static_mutex mutex_;$/;"	m	struct:boost::asio::detail::handler_tracking::tracking_state	file:	access:public
mutex_	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  static_mutex mutex_;$/;"	m	struct:boost::asio::detail::signal_state	file:	access:public
mutex_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    mutex mutex_;$/;"	m	struct:boost::asio::detail::kqueue_reactor::descriptor_state	access:public
mutex_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  mutex mutex_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
mutex_	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  ::pthread_mutex_t mutex_;$/;"	m	class:boost::asio::detail::posix_mutex	access:private
mutex_	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^  ::pthread_mutex_t mutex_;$/;"	m	struct:boost::asio::detail::posix_static_mutex	access:public
mutex_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::resolver_service_base	access:private
mutex_	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  Mutex& mutex_;$/;"	m	class:boost::asio::detail::scoped_lock	access:private
mutex_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
mutex_	/usr/include/boost/asio/detail/service_registry.hpp	/^  mutable boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::service_registry	access:private
mutex_	/usr/include/boost/asio/detail/strand_service.hpp	/^    boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
mutex_	/usr/include/boost/asio/detail/strand_service.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::strand_service	access:private
mutex_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  mutable mutex mutex_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
mutex_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  mutex mutex_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service	access:private
mutex_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service_base	access:protected
mutex_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  mutex mutex_;$/;"	m	class:boost::asio::detail::win_object_handle_service	access:private
mutex_type	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  typedef boost::asio::detail::mutex mutex_type;$/;"	t	class:boost::asio::ssl::old::detail::openssl_stream_service	access:private
mutexes_	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^        boost::asio::detail::mutex> > mutexes_;$/;"	m	class:boost::asio::ssl::detail::openssl_init_base::do_init	file:	access:private
name	/usr/include/boost/asio/detail/io_control.hpp	/^  int name() const$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:() const
name	/usr/include/boost/asio/detail/io_control.hpp	/^  int name() const$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:() const
name	/usr/include/boost/asio/detail/socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
name	/usr/include/boost/asio/detail/socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
name	/usr/include/boost/asio/detail/socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol& protocol) const
name_too_long	/usr/include/boost/asio/error.hpp	/^  name_too_long = BOOST_ASIO_SOCKET_ERROR(ENAMETOOLONG),$/;"	e	enum:boost::asio::error::basic_errors
native	/usr/include/boost/asio/basic_serial_port.hpp	/^  native_type native()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
native	/usr/include/boost/asio/basic_socket.hpp	/^  native_type native()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
native	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  native_type native()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
native	/usr/include/boost/asio/datagram_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  native_type native()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
native	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/raw_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/serial_port_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/stream_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/windows/basic_handle.hpp	/^  native_type native()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
native	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
native_buffer_type	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  typedef WSABUF native_buffer_type;$/;"	t	class:boost::asio::detail::buffer_sequence_adapter_base	access:protected
native_handle	/usr/include/boost/asio/basic_serial_port.hpp	/^  native_handle_type native_handle()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
native_handle	/usr/include/boost/asio/basic_socket.hpp	/^  native_handle_type native_handle()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
native_handle	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  native_handle_type native_handle()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
native_handle	/usr/include/boost/asio/datagram_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  native_handle_type native_handle(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(const implementation_type& impl) const
native_handle	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  native_handle_type native_handle(base_implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl)
native_handle	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  native_handle_type native_handle(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(const implementation_type& impl) const
native_handle	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  native_handle_type native_handle(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_object_handle_service	access:public	signature:(const implementation_type& impl) const
native_handle	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  native_handle_type native_handle()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
native_handle	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/raw_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/serial_port_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL SSL* native_handle();$/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:()
native_handle	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^SSL* engine::native_handle()$/;"	f	class:boost::asio::ssl::detail::engine	signature:()
native_handle	/usr/include/boost/asio/ssl/impl/context.ipp	/^context::native_handle_type context::native_handle()$/;"	f	class:boost::asio::ssl::context	signature:()
native_handle	/usr/include/boost/asio/ssl/verify_context.hpp	/^  native_handle_type native_handle()$/;"	f	class:boost::asio::ssl::verify_context	access:public	signature:()
native_handle	/usr/include/boost/asio/stream_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  native_handle_type native_handle()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
native_handle	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
native_handle	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
native_handle_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef typename DatagramSocketService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
native_handle_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef typename RawSocketService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
native_handle_type	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^    native_handle_type;$/;"	t	class:boost::asio::basic_seq_packet_socket	access:public
native_handle_type	/usr/include/boost/asio/basic_serial_port.hpp	/^  typedef typename SerialPortService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::basic_serial_port	access:public
native_handle_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef typename SocketService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::basic_socket	access:public
native_handle_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef typename SocketAcceptorService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
native_handle_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef typename StreamSocketService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
native_handle_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
native_handle_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
native_handle_type	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  typedef int native_handle_type;$/;"	t	class:boost::asio::detail::reactive_descriptor_service	access:public
native_handle_type	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  typedef reactive_descriptor_service::native_handle_type native_handle_type;$/;"	t	class:boost::asio::detail::reactive_serial_port_service	access:public
native_handle_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  typedef socket_type native_handle_type;$/;"	t	class:boost::asio::detail::reactive_socket_service	access:public
native_handle_type	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  typedef socket_type native_handle_type;$/;"	t	class:boost::asio::detail::reactive_socket_service_base	access:public
native_handle_type	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  typedef HANDLE native_handle_type;$/;"	t	class:boost::asio::detail::win_iocp_handle_service	access:public
native_handle_type	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  typedef win_iocp_handle_service::native_handle_type native_handle_type;$/;"	t	class:boost::asio::detail::win_iocp_serial_port_service	access:public
native_handle_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    native_handle_type(socket_type s)$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:public	signature:(socket_type s)
native_handle_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    native_handle_type(socket_type s, const endpoint_type& ep)$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:public	signature:(socket_type s, const endpoint_type& ep)
native_handle_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  class native_handle_type$/;"	c	class:boost::asio::detail::win_iocp_socket_service	access:public
native_handle_type	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  typedef HANDLE native_handle_type;$/;"	t	class:boost::asio::detail::win_object_handle_service	access:public
native_handle_type	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  typedef typename DescriptorService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::posix::basic_descriptor	access:public
native_handle_type	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^    native_handle_type;$/;"	t	class:boost::asio::posix::basic_stream_descriptor	access:public
native_handle_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
native_handle_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
native_handle_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
native_handle_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
native_handle_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
native_handle_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
native_handle_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::serial_port_service	access:public
native_handle_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::serial_port_service	access:public
native_handle_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
native_handle_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
native_handle_type	/usr/include/boost/asio/ssl/verify_context.hpp	/^  typedef X509_STORE_CTX* native_handle_type;$/;"	t	class:boost::asio::ssl::verify_context	access:public
native_handle_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
native_handle_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
native_handle_type	/usr/include/boost/asio/windows/basic_handle.hpp	/^  typedef typename HandleService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::windows::basic_handle	access:public
native_handle_type	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  typedef typename ObjectHandleService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::windows::basic_object_handle	access:public
native_handle_type	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^    native_handle_type;$/;"	t	class:boost::asio::windows::basic_random_access_handle	access:public
native_handle_type	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  typedef typename StreamHandleService::native_handle_type native_handle_type;$/;"	t	class:boost::asio::windows::basic_stream_handle	access:public
native_handle_type	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::windows::object_handle_service	access:public
native_handle_type	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::windows::object_handle_service	access:public
native_handle_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
native_handle_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
native_handle_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
native_handle_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
native_non_blocking	/usr/include/boost/asio/basic_socket.hpp	/^  bool native_non_blocking() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
native_non_blocking	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code native_non_blocking($/;"	f	class:boost::asio::basic_socket	access:public	signature:( bool mode, boost::system::error_code& ec)
native_non_blocking	/usr/include/boost/asio/basic_socket.hpp	/^  void native_non_blocking(bool mode)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(bool mode)
native_non_blocking	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  bool native_non_blocking() const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:() const
native_non_blocking	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code native_non_blocking($/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:( bool mode, boost::system::error_code& ec)
native_non_blocking	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void native_non_blocking(bool mode)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(bool mode)
native_non_blocking	/usr/include/boost/asio/datagram_socket_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl) const
native_non_blocking	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
native_non_blocking	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(const implementation_type& impl) const
native_non_blocking	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
native_non_blocking	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  bool native_non_blocking(const base_implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(const base_implementation_type& impl) const
native_non_blocking	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  boost::system::error_code native_non_blocking(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, bool mode, boost::system::error_code& ec)
native_non_blocking	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  bool native_non_blocking(const base_implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(const base_implementation_type& impl) const
native_non_blocking	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::system::error_code native_non_blocking(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, bool mode, boost::system::error_code& ec)
native_non_blocking	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  bool native_non_blocking() const$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:() const
native_non_blocking	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code native_non_blocking($/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:( bool mode, boost::system::error_code& ec)
native_non_blocking	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void native_non_blocking(bool mode)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(bool mode)
native_non_blocking	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(const implementation_type& impl) const
native_non_blocking	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
native_non_blocking	/usr/include/boost/asio/raw_socket_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl) const
native_non_blocking	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
native_non_blocking	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl) const
native_non_blocking	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
native_non_blocking	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl) const
native_non_blocking	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
native_non_blocking	/usr/include/boost/asio/stream_socket_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl) const
native_non_blocking	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
native_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef typename DatagramSocketService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
native_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef typename RawSocketService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
native_type	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  typedef typename SeqPacketSocketService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_seq_packet_socket	access:public
native_type	/usr/include/boost/asio/basic_serial_port.hpp	/^  typedef typename SerialPortService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_serial_port	access:public
native_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef typename SocketService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_socket	access:public
native_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef typename SocketAcceptorService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
native_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef typename StreamSocketService::native_handle_type native_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
native_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
native_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
native_type	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  typedef typename DescriptorService::native_handle_type native_type;$/;"	t	class:boost::asio::posix::basic_descriptor	access:public
native_type	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  typedef typename StreamDescriptorService::native_handle_type native_type;$/;"	t	class:boost::asio::posix::basic_stream_descriptor	access:public
native_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
native_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
native_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
native_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
native_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
native_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
native_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::serial_port_service	access:public
native_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::serial_port_service	access:public
native_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
native_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
native_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
native_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
native_type	/usr/include/boost/asio/windows/basic_handle.hpp	/^  typedef typename HandleService::native_handle_type native_type;$/;"	t	class:boost::asio::windows::basic_handle	access:public
native_type	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  typedef typename RandomAccessHandleService::native_handle_type native_type;$/;"	t	class:boost::asio::windows::basic_random_access_handle	access:public
native_type	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  typedef typename StreamHandleService::native_handle_type native_type;$/;"	t	class:boost::asio::windows::basic_stream_handle	access:public
native_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
native_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
native_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
native_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
net_buffer	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  net_buffer()$/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
net_buffer	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^class net_buffer$/;"	c	namespace:boost::asio::ssl::old::detail
netdb_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& netdb_category$/;"	m	namespace:boost::asio::error
netdb_category	/usr/include/boost/asio/impl/error.ipp	/^class netdb_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	file:	inherits:boost::system::error_category
netdb_errors	/usr/include/boost/asio/error.hpp	/^enum netdb_errors$/;"	g	namespace:boost::asio::error
netmask	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL static address_v4 netmask(const address_v4& addr);$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& addr)
netmask	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4 address_v4::netmask(const address_v4& addr)$/;"	f	class:boost::asio::ip::address_v4	signature:(const address_v4& addr)
network_down	/usr/include/boost/asio/error.hpp	/^  network_down = BOOST_ASIO_SOCKET_ERROR(ENETDOWN),$/;"	e	enum:boost::asio::error::basic_errors
network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit network_interface(const boost::asio::ip::address_v4& ipv4_interface)$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const boost::asio::ip::address_v4& ipv4_interface)
network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit network_interface(unsigned int ipv6_interface)$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(unsigned int ipv6_interface)
network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  network_interface()$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:()
network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class network_interface$/;"	c	namespace:boost::asio::ip::detail::socket_option
network_reset	/usr/include/boost/asio/error.hpp	/^  network_reset = BOOST_ASIO_SOCKET_ERROR(ENETRESET),$/;"	e	enum:boost::asio::error::basic_errors
network_to_host_long	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^u_long_type network_to_host_long(u_long_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_long_type value)
network_to_host_long	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL u_long_type network_to_host_long(u_long_type value);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(u_long_type value)
network_to_host_short	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^u_short_type network_to_host_short(u_short_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_short_type value)
network_to_host_short	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL u_short_type network_to_host_short(u_short_type value);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(u_short_type value)
network_unreachable	/usr/include/boost/asio/error.hpp	/^  network_unreachable = BOOST_ASIO_SOCKET_ERROR(ENETUNREACH),$/;"	e	enum:boost::asio::error::basic_errors
new_socket	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  socket_holder& new_socket()$/;"	f	class:boost::asio::detail::win_iocp_socket_accept_op	access:public	signature:()
new_socket_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  socket_holder new_socket_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
next	/usr/include/boost/asio/detail/object_pool.hpp	/^  static Object*& next(Object* o)$/;"	f	class:boost::asio::detail::object_pool_access	access:public	signature:(Object* o)
next	/usr/include/boost/asio/detail/op_queue.hpp	/^  static Operation* next(Operation* o)$/;"	f	class:boost::asio::detail::op_queue_access	access:public	signature:(Operation* o)
next	/usr/include/boost/asio/detail/op_queue.hpp	/^  static void next(Operation1*& o1, Operation2* o2)$/;"	f	class:boost::asio::detail::op_queue_access	access:public	signature:(Operation1*& o1, Operation2* o2)
next	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^  task_io_service_thread_info* next;$/;"	m	struct:boost::asio::detail::task_io_service_thread_info	access:public
next_	/usr/include/boost/asio/detail/call_stack.hpp	/^    context* next_;$/;"	m	class:boost::asio::detail::call_stack::context	access:private
next_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    descriptor_state* next_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
next_	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    completion* next_;$/;"	m	class:boost::asio::detail::handler_tracking::completion	access:private
next_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    descriptor_state* next_;$/;"	m	struct:boost::asio::detail::kqueue_reactor::descriptor_state	access:public
next_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  signal_set_service* next_;$/;"	m	class:boost::asio::detail::signal_set_service	access:private
next_	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  task_io_service_operation* next_;$/;"	m	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:private
next_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    per_timer_data* next_;$/;"	m	class:boost::asio::detail::timer_queue::per_timer_data	access:private
next_	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  timer_queue_base* next_;$/;"	m	class:boost::asio::detail::timer_queue_base	access:private
next_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    implementation_type* next_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
next_	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  win_iocp_operation* next_;$/;"	m	class:boost::asio::detail::win_iocp_operation	access:private
next_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    base_implementation_type* next_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
next_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    implementation_type* next_;$/;"	m	class:boost::asio::detail::win_object_handle_service::implementation_type	access:private
next_	/usr/include/boost/asio/io_service.hpp	/^  service* next_;$/;"	m	class:boost::asio::io_service::service	access:private
next_by_key	/usr/include/boost/asio/detail/call_stack.hpp	/^    Value* next_by_key() const$/;"	f	class:boost::asio::detail::call_stack::context	access:public	signature:() const
next_id_	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^  boost::uint64_t next_id_;$/;"	m	struct:boost::asio::detail::handler_tracking::tracking_state	file:	access:public
next_in_set_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    registration* next_in_set_;$/;"	m	class:boost::asio::detail::signal_set_service::registration	access:private
next_in_table_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    registration* next_in_table_;$/;"	m	class:boost::asio::detail::signal_set_service::registration	access:private
next_layer	/usr/include/boost/asio/buffered_read_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
next_layer	/usr/include/boost/asio/buffered_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
next_layer	/usr/include/boost/asio/buffered_write_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
next_layer	/usr/include/boost/asio/ssl/old/stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
next_layer_	/usr/include/boost/asio/buffered_read_stream.hpp	/^  Stream next_layer_;$/;"	m	class:boost::asio::buffered_read_stream	access:private
next_layer_	/usr/include/boost/asio/buffered_write_stream.hpp	/^  Stream next_layer_;$/;"	m	class:boost::asio::buffered_write_stream	access:private
next_layer_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  Stream& next_layer_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
next_layer_	/usr/include/boost/asio/ssl/old/stream.hpp	/^  Stream next_layer_;$/;"	m	class:boost::asio::ssl::old::stream	access:private
next_layer_type	/usr/include/boost/asio/buffered_read_stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::buffered_read_stream	access:public
next_layer_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::buffered_stream	access:public
next_layer_type	/usr/include/boost/asio/buffered_write_stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::buffered_write_stream	access:public
next_layer_type	/usr/include/boost/asio/ssl/old/stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::ssl::old::stream	access:public
no_buffer_space	/usr/include/boost/asio/error.hpp	/^  no_buffer_space = BOOST_ASIO_SOCKET_ERROR(ENOBUFS),$/;"	e	enum:boost::asio::error::basic_errors
no_data	/usr/include/boost/asio/error.hpp	/^  no_data = BOOST_ASIO_NETDB_ERROR(NO_DATA),$/;"	e	enum:boost::asio::error::netdb_errors
no_delay	/usr/include/boost/asio/ip/tcp.hpp	/^    IPPROTO_TCP, TCP_NODELAY> no_delay;$/;"	t	class:boost::asio::ip::tcp	access:public
no_delay	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef implementation_defined no_delay;$/;"	t	class:boost::asio::ip::tcp	access:public
no_descriptors	/usr/include/boost/asio/error.hpp	/^  no_descriptors = BOOST_ASIO_SOCKET_ERROR(EMFILE),$/;"	e	enum:boost::asio::error::basic_errors
no_memory	/usr/include/boost/asio/error.hpp	/^  no_memory = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
no_permission	/usr/include/boost/asio/error.hpp	/^  no_permission = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
no_protocol_option	/usr/include/boost/asio/error.hpp	/^  no_protocol_option = BOOST_ASIO_SOCKET_ERROR(ENOPROTOOPT),$/;"	e	enum:boost::asio::error::basic_errors
no_recovery	/usr/include/boost/asio/error.hpp	/^  no_recovery = BOOST_ASIO_NETDB_ERROR(NO_RECOVERY)$/;"	e	enum:boost::asio::error::netdb_errors
no_sslv2	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const long no_sslv2 = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
no_sslv3	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const long no_sslv3 = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
no_timer	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum state { no_timer, timer_is_pending, timer_has_expired } timer_state_;$/;"	e	enum:boost::asio::basic_socket_streambuf::state
no_tlsv1	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const long no_tlsv1 = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
non_blocking	/usr/include/boost/asio/basic_socket.hpp	/^  bool non_blocking() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
non_blocking	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code non_blocking($/;"	f	class:boost::asio::basic_socket	access:public	signature:( bool mode, boost::system::error_code& ec)
non_blocking	/usr/include/boost/asio/basic_socket.hpp	/^  void non_blocking(bool mode)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(bool mode)
non_blocking	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  bool non_blocking() const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:() const
non_blocking	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code non_blocking($/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:( bool mode, boost::system::error_code& ec)
non_blocking	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void non_blocking(bool mode)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(bool mode)
non_blocking	/usr/include/boost/asio/datagram_socket_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl) const
non_blocking	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
non_blocking	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^  non_blocking = user_set_non_blocking | internal_non_blocking,$/;"	e	enum:boost::asio::detail::descriptor_ops::__anon9
non_blocking	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(const implementation_type& impl) const
non_blocking	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
non_blocking	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  bool non_blocking(const base_implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(const base_implementation_type& impl) const
non_blocking	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  boost::system::error_code non_blocking(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, bool mode, boost::system::error_code& ec)
non_blocking	/usr/include/boost/asio/detail/socket_ops.hpp	/^  non_blocking = user_set_non_blocking | internal_non_blocking,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
non_blocking	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  bool non_blocking(const base_implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(const base_implementation_type& impl) const
non_blocking	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::system::error_code non_blocking(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, bool mode, boost::system::error_code& ec)
non_blocking	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  bool non_blocking() const$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:() const
non_blocking	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code non_blocking($/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:( bool mode, boost::system::error_code& ec)
non_blocking	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void non_blocking(bool mode)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(bool mode)
non_blocking	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(const implementation_type& impl) const
non_blocking	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
non_blocking	/usr/include/boost/asio/raw_socket_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl) const
non_blocking	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
non_blocking	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl) const
non_blocking	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
non_blocking	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl) const
non_blocking	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
non_blocking	/usr/include/boost/asio/stream_socket_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl) const
non_blocking	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code non_blocking(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, bool mode, boost::system::error_code& ec)
non_blocking_accept	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_accept(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec, socket_type& new_socket)
non_blocking_accept	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_accept(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec, socket_type& new_socket)
non_blocking_connect	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_connect(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
non_blocking_connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_connect($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( socket_type s, boost::system::error_code& ec)
non_blocking_io	/usr/include/boost/asio/detail/io_control.hpp	/^  non_blocking_io()$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:()
non_blocking_io	/usr/include/boost/asio/detail/io_control.hpp	/^  non_blocking_io(bool value)$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:(bool value)
non_blocking_io	/usr/include/boost/asio/detail/io_control.hpp	/^class non_blocking_io$/;"	c	namespace:boost::asio::detail::io_control
non_blocking_io	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  typedef implementation_defined non_blocking_io;$/;"	t	class:boost::asio::posix::descriptor_base	access:public
non_blocking_io	/usr/include/boost/asio/socket_base.hpp	/^  typedef boost::asio::detail::io_control::non_blocking_io non_blocking_io;$/;"	t	class:boost::asio::socket_base	access:public
non_blocking_io	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined non_blocking_io;$/;"	t	class:boost::asio::socket_base	access:public
non_blocking_read	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_read(int d, buf* bufs, std::size_t count,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, buf* bufs, std::size_t count, boost::system::error_code& ec, std::size_t& bytes_transferred)
non_blocking_read	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^bool non_blocking_read(int d, buf* bufs, std::size_t count,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, buf* bufs, std::size_t count, boost::system::error_code& ec, std::size_t& bytes_transferred)
non_blocking_recv	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_recv(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, bool is_stream, boost::system::error_code& ec, size_t& bytes_transferred)
non_blocking_recv	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_recv(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, bool is_stream, boost::system::error_code& ec, size_t& bytes_transferred)
non_blocking_recvfrom	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_recvfrom(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec, size_t& bytes_transferred)
non_blocking_recvfrom	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_recvfrom(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec, size_t& bytes_transferred)
non_blocking_recvmsg	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_recvmsg(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int in_flags, int& out_flags, boost::system::error_code& ec, size_t& bytes_transferred)
non_blocking_recvmsg	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_recvmsg(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int in_flags, int& out_flags, boost::system::error_code& ec, size_t& bytes_transferred)
non_blocking_send	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_send(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, boost::system::error_code& ec, size_t& bytes_transferred)
non_blocking_send	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_send(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, boost::system::error_code& ec, size_t& bytes_transferred)
non_blocking_sendto	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool non_blocking_sendto(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec, size_t& bytes_transferred)
non_blocking_sendto	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_sendto(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec, size_t& bytes_transferred)
non_blocking_write	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL bool non_blocking_write(int d,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, const buf* bufs, std::size_t count, boost::system::error_code& ec, std::size_t& bytes_transferred)
non_blocking_write	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^bool non_blocking_write(int d, const buf* bufs, std::size_t count,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, const buf* bufs, std::size_t count, boost::system::error_code& ec, std::size_t& bytes_transferred)
noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^  noncopyable() {}$/;"	f	class:boost::asio::detail::noncopyable	access:protected	signature:()
noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^  noncopyable(const noncopyable&);$/;"	p	class:boost::asio::detail::noncopyable	access:private	signature:(const noncopyable&)
noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^class noncopyable$/;"	c	namespace:boost::asio::detail
none	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:boost::asio::serial_port_base::parity::type
none	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:boost::asio::serial_port_base::flow_control::type
noop_deleter	/usr/include/boost/asio/detail/socket_ops.hpp	/^struct noop_deleter { void operator()(void*) {} };$/;"	s	namespace:boost::asio::detail::socket_ops
not_connected	/usr/include/boost/asio/error.hpp	/^  not_connected = BOOST_ASIO_SOCKET_ERROR(ENOTCONN),$/;"	e	enum:boost::asio::error::basic_errors
not_found	/usr/include/boost/asio/error.hpp	/^  not_found,$/;"	e	enum:boost::asio::error::misc_errors
not_socket	/usr/include/boost/asio/error.hpp	/^  not_socket = BOOST_ASIO_SOCKET_ERROR(ENOTSOCK),$/;"	e	enum:boost::asio::error::basic_errors
notify_fork	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^void service_registry::notify_fork(boost::asio::io_service::fork_event fork_ev)$/;"	f	class:boost::asio::detail::service_registry	signature:(boost::asio::io_service::fork_event fork_ev)
notify_fork	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL void notify_fork(boost::asio::io_service::fork_event fork_ev);$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:(boost::asio::io_service::fork_event fork_ev)
notify_fork	/usr/include/boost/asio/impl/io_service.ipp	/^void io_service::notify_fork(boost::asio::io_service::fork_event event)$/;"	f	class:boost::asio::io_service	signature:(boost::asio::io_service::fork_event event)
notify_fork	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL void notify_fork(boost::asio::io_service::fork_event event);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::asio::io_service::fork_event event)
now	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  static time_type now()$/;"	f	struct:boost::asio::detail::chrono_time_traits	access:public	signature:()
now	/usr/include/boost/asio/time_traits.hpp	/^  static time_type now()$/;"	f	struct:boost::asio::time_traits	access:public	signature:()
null	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  impl_type null() const$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:() const
null	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  static impl_type null()$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:()
null	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  impl_type null() const$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:() const
null	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  impl_type null() const$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:() const
null_buffers	/usr/include/boost/asio/buffer.hpp	/^class null_buffers$/;"	c	namespace:boost::asio
null_event	/usr/include/boost/asio/detail/null_event.hpp	/^  null_event()$/;"	f	class:boost::asio::detail::null_event	access:public	signature:()
null_event	/usr/include/boost/asio/detail/null_event.hpp	/^class null_event$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
null_fenced_block	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^  explicit null_fenced_block(half_or_full_t)$/;"	f	class:boost::asio::detail::null_fenced_block	access:public	signature:(half_or_full_t)
null_fenced_block	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^class null_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
null_mutex	/usr/include/boost/asio/detail/null_mutex.hpp	/^  null_mutex()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
null_mutex	/usr/include/boost/asio/detail/null_mutex.hpp	/^class null_mutex$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
null_signal_blocker	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  null_signal_blocker()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
null_signal_blocker	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^class null_signal_blocker$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
null_static_mutex	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^struct null_static_mutex$/;"	s	namespace:boost::asio::detail
null_thread	/usr/include/boost/asio/detail/null_thread.hpp	/^  null_thread(Function, unsigned int = 0)$/;"	f	class:boost::asio::detail::null_thread	access:public	signature:(Function, unsigned int = 0)
null_thread	/usr/include/boost/asio/detail/null_thread.hpp	/^class null_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
null_tss_ptr	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  null_tss_ptr()$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:()
null_tss_ptr	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^class null_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
num_buckets_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::size_t num_buckets_;$/;"	m	class:boost::asio::detail::hash_map	access:private
num_implementations	/usr/include/boost/asio/detail/strand_service.hpp	/^  enum { num_implementations = 193 };$/;"	e	enum:boost::asio::detail::strand_service::__anon17
num_implementations	/usr/include/boost/asio/detail/strand_service.hpp	/^  enum { num_implementations = BOOST_ASIO_STRAND_IMPLEMENTATIONS };$/;"	e	enum:boost::asio::detail::strand_service::__anon16
numeric_host	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags numeric_host = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
numeric_service	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags numeric_service = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
object_handle	/usr/include/boost/asio/windows/object_handle.hpp	/^typedef basic_object_handle<> object_handle;$/;"	t	namespace:boost::asio::windows
object_handle_service	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  explicit object_handle_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(boost::asio::io_service& io_service)
object_handle_service	/usr/include/boost/asio/windows/object_handle_service.hpp	/^class object_handle_service$/;"	c	namespace:boost::asio::windows	inherits:boost::asio::io_service::service
object_pool	/usr/include/boost/asio/detail/object_pool.hpp	/^  object_pool()$/;"	f	class:boost::asio::detail::object_pool	access:public	signature:()
object_pool	/usr/include/boost/asio/detail/object_pool.hpp	/^class object_pool$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
object_pool_access	/usr/include/boost/asio/detail/object_pool.hpp	/^class object_pool_access$/;"	c	namespace:boost::asio::detail
odd	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:boost::asio::serial_port_base::parity::type
offset_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  std::size_t offset_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
offset_	/usr/include/boost/asio/impl/read_at.hpp	/^    boost::uint64_t offset_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
offset_	/usr/include/boost/asio/impl/read_at.hpp	/^    boost::uint64_t offset_;$/;"	m	class:boost::asio::detail::read_at_streambuf_op	access:public
offset_	/usr/include/boost/asio/impl/write_at.hpp	/^    boost::uint64_t offset_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
old	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
old	/usr/include/boost/asio/ssl/old/context_service.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
old	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
old	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
old	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
old	/usr/include/boost/asio/ssl/old/stream.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
old	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^namespace old {$/;"	n	namespace:boost::asio::ssl
old_mask_	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  sigset_t old_mask_;$/;"	m	class:boost::asio::detail::posix_signal_blocker	access:private
old_size_	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  size_t old_size_;$/;"	m	class:boost::asio::detail::buffer_resize_guard	access:private
on_completion	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::on_completion(win_iocp_operation* op,$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(win_iocp_operation* op, DWORD last_error, DWORD bytes_transferred)
on_completion	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::on_completion(win_iocp_operation* op,$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(win_iocp_operation* op, const boost::system::error_code& ec, DWORD bytes_transferred)
on_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void on_completion(win_iocp_operation* op,$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op, DWORD last_error = 0, DWORD bytes_transferred = 0)
on_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void on_completion(win_iocp_operation* op,$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op, const boost::system::error_code& ec, DWORD bytes_transferred = 0)
on_dispatch_exit	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^struct strand_service::on_dispatch_exit$/;"	s	class:boost::asio::detail::strand_service
on_do_complete_exit	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^struct strand_service::on_do_complete_exit$/;"	s	class:boost::asio::detail::strand_service	file:
on_pending	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::on_pending(win_iocp_operation* op)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(win_iocp_operation* op)
on_pending	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void on_pending(win_iocp_operation* op);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op)
one	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:boost::asio::serial_port_base::stop_bits::type
one_arg_handler_test	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^char (&one_arg_handler_test(Handler h, ...))[2];$/;"	p	namespace:boost::asio::detail	signature:(Handler h, ...)
one_thread_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  const bool one_thread_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
onepointfive	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:boost::asio::serial_port_base::stop_bits::type
op_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  Operation op_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
op_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    openssl_operation<Stream>* op_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:private
op_queue	/usr/include/boost/asio/detail/op_queue.hpp	/^  op_queue()$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:()
op_queue	/usr/include/boost/asio/detail/op_queue.hpp	/^class op_queue$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
op_queue_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  reactor_op_queue<socket_type> op_queue_[max_ops];$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
op_queue_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    op_queue<reactor_op> op_queue_[max_ops];$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
op_queue_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    op_queue<reactor_op> op_queue_[max_ops];$/;"	m	struct:boost::asio::detail::kqueue_reactor::descriptor_state	access:public
op_queue_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    op_queue<reactor_op> op_queue_;$/;"	m	struct:boost::asio::detail::reactor_op_queue::operations	access:public
op_queue_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  reactor_op_queue<socket_type> op_queue_[max_ops];$/;"	m	class:boost::asio::detail::select_reactor	access:private
op_queue_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  op_queue<operation> op_queue_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
op_queue_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    op_queue<wait_op> op_queue_;$/;"	m	class:boost::asio::detail::timer_queue::per_timer_data	access:private
op_queue_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    op_queue<wait_op> op_queue_;$/;"	m	class:boost::asio::detail::win_object_handle_service::implementation_type	access:private
op_queue_access	/usr/include/boost/asio/detail/op_queue.hpp	/^class op_queue_access$/;"	c	namespace:boost::asio::detail
op_types	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	g	class:boost::asio::detail::dev_poll_reactor	access:public
op_types	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	g	class:boost::asio::detail::epoll_reactor	access:public
op_types	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	g	class:boost::asio::detail::kqueue_reactor	access:public
op_types	/usr/include/boost/asio/detail/select_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1, except_op = 2,$/;"	g	class:boost::asio::detail::select_reactor	access:public
open	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code open(const std::string& device,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const std::string& device, boost::system::error_code& ec)
open	/usr/include/boost/asio/basic_serial_port.hpp	/^  void open(const std::string& device)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const std::string& device)
open	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code open(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/basic_socket.hpp	/^  void open(const protocol_type& protocol = protocol_type())$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol = protocol_type())
open	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code open(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void open(const protocol_type& protocol = protocol_type())$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol = protocol_type())
open	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int open(const char* path, int flags,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(const char* path, int flags, boost::system::error_code& ec)
open	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int open(const char* path, int flags, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(const char* path, int flags, boost::system::error_code& ec)
open	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^boost::system::error_code reactive_serial_port_service::open($/;"	f	class:boost::asio::detail::reactive_serial_port_service	signature:( reactive_serial_port_service::implementation_type& impl, const std::string& device, boost::system::error_code& ec)
open	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^boost::system::error_code win_iocp_serial_port_service::open($/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	signature:( win_iocp_serial_port_service::implementation_type& impl, const std::string& device, boost::system::error_code& ec)
open	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code open(implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const std::string& device, boost::system::error_code& ec)
open	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code open(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const std::string& device, boost::system::error_code& ec)
open	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const std::string& device, boost::system::error_code& ec)
open	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
open_descriptors	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL void open_descriptors();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:private	signature:()
open_descriptors	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^void eventfd_select_interrupter::open_descriptors()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
open_descriptors	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^void pipe_select_interrupter::open_descriptors()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
open_descriptors	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::open_descriptors()$/;"	f	class:boost::asio::detail::signal_set_service	signature:()
open_descriptors	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^void socket_select_interrupter::open_descriptors()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
open_descriptors	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL void open_descriptors();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:private	signature:()
open_descriptors	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL static void open_descriptors();$/;"	p	class:boost::asio::detail::signal_set_service	access:private	signature:()
open_descriptors	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL void open_descriptors();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:private	signature:()
openssl_context_service	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  openssl_context_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(boost::asio::io_service& io_service)
openssl_context_service	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^class openssl_context_service$/;"	c	namespace:boost::asio::ssl::old::detail	inherits:boost::asio::detail::service_base
openssl_id_func	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^  static unsigned long openssl_id_func()$/;"	f	class:boost::asio::ssl::detail::openssl_init_base::do_init	file:	access:private	signature:()
openssl_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  openssl_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init	access:public	signature:()
openssl_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^class openssl_init : private openssl_init_base$/;"	c	namespace:boost::asio::ssl::detail	inherits:openssl_init_base
openssl_init_base	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^class openssl_init_base$/;"	c	namespace:boost::asio::ssl::detail	inherits:noncopyable
openssl_locking_func	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^  static void openssl_locking_func(int mode, int n, $/;"	f	class:boost::asio::ssl::detail::openssl_init_base::do_init	file:	access:private	signature:(int mode, int n, const char* , int )
openssl_operation	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  openssl_operation(ssl_primitive_func primitive,$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:public	signature:(ssl_primitive_func primitive, Stream& socket, net_buffer& recv_buf, SSL* session, BIO* ssl_bio)
openssl_operation	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  openssl_operation(ssl_primitive_func primitive,$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:public	signature:(ssl_primitive_func primitive, Stream& socket, net_buffer& recv_buf, SSL* session, BIO* ssl_bio, user_handler_func handler, boost::asio::io_service::strand& strand )
openssl_operation	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^class openssl_operation$/;"	c	namespace:boost::asio::ssl::old::detail
openssl_stream_service	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  explicit openssl_stream_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(boost::asio::io_service& io_service)
openssl_stream_service	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^class openssl_stream_service$/;"	c	namespace:boost::asio::ssl::old::detail	inherits:boost::asio::detail::service_base
operation	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  BOOST_ASIO_DECL static void operation(const char* object_type,$/;"	p	class:boost::asio::detail::handler_tracking	access:public	signature:(const char* object_type, void* object, const char* op_name)
operation	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::operation(const char* object_type,$/;"	f	class:boost::asio::detail::handler_tracking	signature:(const char* object_type, void* object, const char* op_name)
operation	/usr/include/boost/asio/detail/operation.hpp	/^typedef win_iocp_operation operation;$/;"	t	namespace:boost::asio::detail
operation	/usr/include/boost/asio/detail/task_io_service.hpp	/^  typedef task_io_service_operation operation;$/;"	t	class:boost::asio::detail::task_io_service	access:public
operation_aborted	/usr/include/boost/asio/error.hpp	/^  operation_aborted = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
operation_not_supported	/usr/include/boost/asio/error.hpp	/^  operation_not_supported = BOOST_ASIO_SOCKET_ERROR(EOPNOTSUPP),$/;"	e	enum:boost::asio::error::basic_errors
operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    operations() {}$/;"	f	struct:boost::asio::detail::reactor_op_queue::operations	access:public	signature:()
operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    operations(const operations&) {}$/;"	f	struct:boost::asio::detail::reactor_op_queue::operations	access:public	signature:(const operations&)
operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  struct operations$/;"	s	class:boost::asio::detail::reactor_op_queue	access:private
operations_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  operations_map operations_;$/;"	m	class:boost::asio::detail::reactor_op_queue	access:private
operations_map	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  typedef hash_map<Descriptor, operations> operations_map;$/;"	t	class:boost::asio::detail::reactor_op_queue	access:private
operator !	/usr/include/boost/asio/detail/socket_option.hpp	/^  bool operator!() const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:() const
operator !	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  bool operator!() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:() const
operator !=	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend bool operator!=(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
operator !=	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  friend bool operator!=(const consuming_buffers_iterator& a,$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:friend	signature:(const consuming_buffers_iterator& a, const consuming_buffers_iterator& b)
operator !=	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator!=(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
operator !=	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator!=(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
operator !=	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator!=(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
operator !=	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator!=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
operator !=	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  friend bool operator!=(const basic_resolver_iterator& a,$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:friend	signature:(const basic_resolver_iterator& a, const basic_resolver_iterator& b)
operator !=	/usr/include/boost/asio/ip/icmp.hpp	/^  friend bool operator!=(const icmp& p1, const icmp& p2)$/;"	f	class:boost::asio::ip::icmp	access:friend	signature:(const icmp& p1, const icmp& p2)
operator !=	/usr/include/boost/asio/ip/tcp.hpp	/^  friend bool operator!=(const tcp& p1, const tcp& p2)$/;"	f	class:boost::asio::ip::tcp	access:friend	signature:(const tcp& p1, const tcp& p2)
operator !=	/usr/include/boost/asio/ip/udp.hpp	/^  friend bool operator!=(const udp& p1, const udp& p2)$/;"	f	class:boost::asio::ip::udp	access:friend	signature:(const udp& p1, const udp& p2)
operator !=	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator!=(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
operator ()	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	struct:boost::asio::basic_socket_streambuf::io_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred = 0)
operator ()	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    void operator()(const boost::system::error_code&)$/;"	f	struct:boost::asio::basic_socket_streambuf::timer_handler	access:public	signature:(const boost::system::error_code&)
operator ()	/usr/include/boost/asio/buffer.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::buffer_debug_check	access:public	signature:()
operator ()	/usr/include/boost/asio/buffered_read_stream.hpp	/^    void operator()(const boost::system::error_code& ec, std::size_t)$/;"	f	class:boost::asio::buffered_read_stream::read_some_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t)
operator ()	/usr/include/boost/asio/buffered_read_stream.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::buffered_read_stream::fill_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
operator ()	/usr/include/boost/asio/buffered_write_stream.hpp	/^    void operator()(const boost::system::error_code& ec, std::size_t)$/;"	f	class:boost::asio::buffered_write_stream::write_some_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t)
operator ()	/usr/include/boost/asio/buffered_write_stream.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::buffered_write_stream::flush_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_written)
operator ()	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t bytes_transferred)$/;"	f	class:boost::asio::detail::transfer_at_least_t	access:public	signature:(const Error& err, std::size_t bytes_transferred)
operator ()	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t bytes_transferred)$/;"	f	class:boost::asio::detail::transfer_exactly_t	access:public	signature:(const Error& err, std::size_t bytes_transferred)
operator ()	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t)$/;"	f	class:boost::asio::detail::transfer_all_t	access:public	signature:(const Error& err, std::size_t)
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder1	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder2	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder3	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder4	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder5	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder1	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder2	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder3	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder4	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder5	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^  void operator()() { io_service_.run(); }$/;"	f	class:boost::asio::detail::resolver_service_base::work_io_service_runner	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^  void operator()()$/;"	f	struct:boost::asio::detail::win_iocp_io_service::timer_thread_function	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/socket_ops.hpp	/^struct noop_deleter { void operator()(void*) {} };$/;"	f	struct:boost::asio::detail::socket_ops::noop_deleter	access:public	signature:(void*)
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1) const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1) const
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1)
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2) const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2) const
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2)
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3) const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3) const
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4) const
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5) const
operator ()	/usr/include/boost/asio/impl/connect.hpp	/^    Iterator operator()(const boost::system::error_code&, Iterator next)$/;"	f	struct:boost::asio::detail::default_connect_condition	access:public	signature:(const boost::system::error_code&, Iterator next)
operator ()	/usr/include/boost/asio/impl/connect.hpp	/^    void operator()(boost::system::error_code ec, int start = 0)$/;"	f	class:boost::asio::detail::connect_op	access:public	signature:(boost::system::error_code ec, int start = 0)
operator ()	/usr/include/boost/asio/impl/read.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
operator ()	/usr/include/boost/asio/impl/read.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_streambuf_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
operator ()	/usr/include/boost/asio/impl/read_at.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
operator ()	/usr/include/boost/asio/impl/read_at.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_at_streambuf_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
operator ()	/usr/include/boost/asio/impl/read_until.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_until_delim_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
operator ()	/usr/include/boost/asio/impl/read_until.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_until_delim_string_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
operator ()	/usr/include/boost/asio/impl/read_until.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_until_expr_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
operator ()	/usr/include/boost/asio/impl/read_until.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_until_match_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
operator ()	/usr/include/boost/asio/impl/write.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
operator ()	/usr/include/boost/asio/impl/write.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::write_streambuf_handler	access:public	signature:(const boost::system::error_code& ec, const std::size_t bytes_transferred)
operator ()	/usr/include/boost/asio/impl/write_at.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred, int start = 0)
operator ()	/usr/include/boost/asio/impl/write_at.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::write_at_streambuf_op	access:public	signature:(const boost::system::error_code& ec, const std::size_t bytes_transferred)
operator ()	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:boost::asio::ssl::detail::handshake_op	access:public	signature:(engine& eng, boost::system::error_code& ec, std::size_t& bytes_transferred) const
operator ()	/usr/include/boost/asio/ssl/detail/io.hpp	/^  void operator()(boost::system::error_code ec,$/;"	f	class:boost::asio::ssl::detail::io_op	access:public	signature:(boost::system::error_code ec, std::size_t bytes_transferred = ~std::size_t(0), int start = 0)
operator ()	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:boost::asio::ssl::detail::read_op	access:public	signature:(engine& eng, boost::system::error_code& ec, std::size_t& bytes_transferred) const
operator ()	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:boost::asio::ssl::detail::shutdown_op	access:public	signature:(engine& eng, boost::system::error_code& ec, std::size_t& bytes_transferred) const
operator ()	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:boost::asio::ssl::detail::write_op	access:public	signature:(engine& eng, boost::system::error_code& ec, std::size_t& bytes_transferred) const
operator ()	/usr/include/boost/asio/ssl/impl/rfc2818_verification.ipp	/^bool rfc2818_verification::operator()($/;"	f	class:boost::asio::ssl::rfc2818_verification	signature:( bool preverified, verify_context& ctx) const
operator ()	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^  BOOST_ASIO_DECL bool operator()(bool preverified, verify_context& ctx) const;$/;"	p	class:boost::asio::ssl::rfc2818_verification	access:public	signature:(bool preverified, verify_context& ctx) const
operator *	/usr/include/boost/asio/buffers_iterator.hpp	/^  reference operator*() const$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:() const
operator *	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const Buffer& operator*() const$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:() const
operator *	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  T& operator*()$/;"	f	class:boost::asio::detail::scoped_ptr	access:public	signature:()
operator *	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  const basic_resolver_entry<InternetProtocol>& operator*() const$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:() const
operator +	/usr/include/boost/asio/buffer.hpp	/^inline const_buffer operator+(const const_buffer& b, std::size_t start)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b, std::size_t start)
operator +	/usr/include/boost/asio/buffer.hpp	/^inline const_buffer operator+(std::size_t start, const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(std::size_t start, const const_buffer& b)
operator +	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffer operator+(const mutable_buffer& b, std::size_t start)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b, std::size_t start)
operator +	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffer operator+(std::size_t start, const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(std::size_t start, const mutable_buffer& b)
operator +	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend buffers_iterator operator+(const buffers_iterator& iter,$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& iter, std::ptrdiff_t difference)
operator +	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend buffers_iterator operator+(std::ptrdiff_t difference,$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(std::ptrdiff_t difference, const buffers_iterator& iter)
operator ++	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator operator++(int)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator& operator++()$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:()
operator ++	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers_iterator operator++(int)$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers_iterator& operator++()$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:()
operator ++	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  basic_resolver_iterator operator++(int)$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  basic_resolver_iterator& operator++()$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:()
operator +=	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator& operator+=(std::ptrdiff_t difference)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(std::ptrdiff_t difference)
operator -	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend buffers_iterator operator-(const buffers_iterator& iter,$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& iter, std::ptrdiff_t difference)
operator -	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend std::ptrdiff_t operator-(const buffers_iterator& a,$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
operator --	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator operator--(int)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(int)
operator --	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator& operator--()$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:()
operator -=	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator& operator-=(std::ptrdiff_t difference)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(std::ptrdiff_t difference)
operator ->	/usr/include/boost/asio/buffers_iterator.hpp	/^  pointer operator->() const$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:() const
operator ->	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const Buffer* operator->() const$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:() const
operator ->	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  T* operator->()$/;"	f	class:boost::asio::detail::scoped_ptr	access:public	signature:()
operator ->	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  const basic_resolver_entry<InternetProtocol>* operator->() const$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:() const
operator <	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend bool operator<(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
operator <	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL friend bool operator<(const address& a1, const address& a2);$/;"	p	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
operator <	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator<(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
operator <	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL friend bool operator<($/;"	p	class:boost::asio::ip::address_v6	access:friend	signature:( const address_v6& a1, const address_v6& a2)
operator <	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator<(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
operator <	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL friend bool operator<($/;"	p	class:boost::asio::ip::detail::endpoint	access:friend	signature:( const endpoint& e1, const endpoint& e2)
operator <	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^bool operator<(const endpoint& e1, const endpoint& e2)$/;"	f	namespace:boost::asio::ip::detail	signature:(const endpoint& e1, const endpoint& e2)
operator <	/usr/include/boost/asio/ip/impl/address.ipp	/^bool operator<(const address& a1, const address& a2)$/;"	f	namespace:boost::asio::ip	signature:(const address& a1, const address& a2)
operator <	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool operator<(const address_v6& a1, const address_v6& a2)$/;"	f	namespace:boost::asio::ip	signature:(const address_v6& a1, const address_v6& a2)
operator <	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator<(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
operator <	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL friend bool operator<($/;"	p	class:boost::asio::local::detail::endpoint	access:friend	signature:( const endpoint& e1, const endpoint& e2)
operator <	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^bool operator<(const endpoint& e1, const endpoint& e2)$/;"	f	namespace:boost::asio::local::detail	signature:(const endpoint& e1, const endpoint& e2)
operator <<	/usr/include/boost/asio/ip/address.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	p	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address& addr)
operator <<	/usr/include/boost/asio/ip/address_v4.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	p	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address_v4& addr)
operator <<	/usr/include/boost/asio/ip/address_v6.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	p	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address_v6& addr)
operator <<	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	p	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const basic_endpoint<InternetProtocol>& endpoint)
operator <<	/usr/include/boost/asio/ip/impl/address.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address& addr)
operator <<	/usr/include/boost/asio/ip/impl/address_v4.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address_v4& addr)
operator <<	/usr/include/boost/asio/ip/impl/address_v6.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address_v6& addr)
operator <<	/usr/include/boost/asio/ip/impl/basic_endpoint.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const basic_endpoint<InternetProtocol>& endpoint)
operator <<	/usr/include/boost/asio/local/basic_endpoint.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::local	signature:( std::basic_ostream<Elem, Traits>& os, const basic_endpoint<Protocol>& endpoint)
operator <=	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend bool operator<=(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
operator <=	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator<=(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
operator <=	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator<=(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
operator <=	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator<=(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
operator <=	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator<=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
operator <=	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator<=(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
operator =	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket& operator=(basic_datagram_socket&& other)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(basic_datagram_socket&& other)
operator =	/usr/include/boost/asio/basic_io_object.hpp	/^  basic_io_object& operator=(basic_io_object&& other)$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:(basic_io_object&& other)
operator =	/usr/include/boost/asio/basic_io_object.hpp	/^  basic_io_object& operator=(basic_io_object&& other);$/;"	p	class:boost::asio::basic_io_object	access:protected	signature:(basic_io_object&& other)
operator =	/usr/include/boost/asio/basic_io_object.hpp	/^  basic_io_object& operator=(const basic_io_object&);$/;"	p	class:boost::asio::basic_io_object	access:private	signature:(const basic_io_object&)
operator =	/usr/include/boost/asio/basic_io_object.hpp	/^  void operator=(const basic_io_object&);$/;"	p	class:boost::asio::basic_io_object	access:private	signature:(const basic_io_object&)
operator =	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket& operator=(basic_raw_socket&& other)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(basic_raw_socket&& other)
operator =	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket& operator=(basic_seq_packet_socket&& other)$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(basic_seq_packet_socket&& other)
operator =	/usr/include/boost/asio/basic_serial_port.hpp	/^  basic_serial_port& operator=(basic_serial_port&& other)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(basic_serial_port&& other)
operator =	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket& operator=(basic_socket&& other)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(basic_socket&& other)
operator =	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor& operator=(basic_socket_acceptor&& other)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket_acceptor&& other)
operator =	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket& operator=(basic_stream_socket&& other)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(basic_stream_socket&& other)
operator =	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers& operator=(const consuming_buffers& other)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const consuming_buffers& other)
operator =	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::keyword_tss_ptr	access:public	signature:(T* value)
operator =	/usr/include/boost/asio/detail/noncopyable.hpp	/^  const noncopyable& operator=(const noncopyable&);$/;"	p	class:boost::asio::detail::noncopyable	access:private	signature:(const noncopyable&)
operator =	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:(T* value)
operator =	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:(T* value)
operator =	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    void operator=(const operations&) {}$/;"	f	struct:boost::asio::detail::reactor_op_queue::operations	access:public	signature:(const operations&)
operator =	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  scoped_ptr& operator=(const scoped_ptr&);$/;"	p	class:boost::asio::detail::scoped_ptr	access:private	signature:(const scoped_ptr&)
operator =	/usr/include/boost/asio/detail/socket_option.hpp	/^  boolean& operator=(bool v)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(bool v)
operator =	/usr/include/boost/asio/detail/socket_option.hpp	/^  integer& operator=(int v)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(int v)
operator =	/usr/include/boost/asio/detail/tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::tss_ptr	access:public	signature:(T* value)
operator =	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    void operator=(socket_type s)$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:public	signature:(socket_type s)
operator =	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:(T* value)
operator =	/usr/include/boost/asio/io_service.hpp	/^  void operator=(const work& other);$/;"	p	class:boost::asio::io_service::work	access:private	signature:(const work& other)
operator =	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address& operator=($/;"	p	class:boost::asio::ip::address	access:public	signature:( const boost::asio::ip::address_v4& ipv4_address)
operator =	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address& operator=($/;"	p	class:boost::asio::ip::address	access:public	signature:( const boost::asio::ip::address_v6& ipv6_address)
operator =	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address& operator=(address&& other);$/;"	p	class:boost::asio::ip::address	access:public	signature:(address&& other)
operator =	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL address& operator=(const address& other);$/;"	p	class:boost::asio::ip::address	access:public	signature:(const address& other)
operator =	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4& operator=(address_v4&& other)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(address_v4&& other)
operator =	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4& operator=(const address_v4& other)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& other)
operator =	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL address_v6& operator=(address_v6&& other);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(address_v6&& other)
operator =	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL address_v6& operator=(const address_v6& other);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const address_v6& other)
operator =	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint& operator=(basic_endpoint&& other)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(basic_endpoint&& other)
operator =	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint& operator=(const basic_endpoint& other)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const basic_endpoint& other)
operator =	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  endpoint& operator=(const endpoint& other)$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:(const endpoint& other)
operator =	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_enable_loopback& operator=(bool v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(bool v)
operator =	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_hops& operator=(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(int v)
operator =	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  unicast_hops& operator=(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(int v)
operator =	/usr/include/boost/asio/ip/impl/address.ipp	/^address& address::operator=(address&& other)$/;"	f	class:boost::asio::ip::address	signature:(address&& other)
operator =	/usr/include/boost/asio/ip/impl/address.ipp	/^address& address::operator=(const address& other)$/;"	f	class:boost::asio::ip::address	signature:(const address& other)
operator =	/usr/include/boost/asio/ip/impl/address.ipp	/^address& address::operator=(const boost::asio::ip::address_v4& ipv4_address)$/;"	f	class:boost::asio::ip::address	signature:(const boost::asio::ip::address_v4& ipv4_address)
operator =	/usr/include/boost/asio/ip/impl/address.ipp	/^address& address::operator=(const boost::asio::ip::address_v6& ipv6_address)$/;"	f	class:boost::asio::ip::address	signature:(const boost::asio::ip::address_v6& ipv6_address)
operator =	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6& address_v6::operator=(address_v6&& other)$/;"	f	class:boost::asio::ip::address_v6	signature:(address_v6&& other)
operator =	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6& address_v6::operator=(const address_v6& other)$/;"	f	class:boost::asio::ip::address_v6	signature:(const address_v6& other)
operator =	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint& operator=(basic_endpoint&& other)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(basic_endpoint&& other)
operator =	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint& operator=(const basic_endpoint& other)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const basic_endpoint& other)
operator =	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  endpoint& operator=(const endpoint& other)$/;"	f	class:boost::asio::local::detail::endpoint	access:public	signature:(const endpoint& other)
operator =	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  basic_descriptor& operator=(basic_descriptor&& other)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(basic_descriptor&& other)
operator =	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  basic_stream_descriptor& operator=(basic_stream_descriptor&& other)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(basic_stream_descriptor&& other)
operator =	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  engine& operator=(const engine&);$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(const engine&)
operator =	/usr/include/boost/asio/ssl/impl/context.ipp	/^context& context::operator=(context&& other)$/;"	f	class:boost::asio::ssl::context	signature:(context&& other)
operator =	/usr/include/boost/asio/windows/basic_handle.hpp	/^  basic_handle& operator=(basic_handle&& other)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(basic_handle&& other)
operator =	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  basic_object_handle& operator=(basic_object_handle&& other)$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:(basic_object_handle&& other)
operator =	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  basic_random_access_handle& operator=(basic_random_access_handle&& other)$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(basic_random_access_handle&& other)
operator =	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  basic_stream_handle& operator=(basic_stream_handle&& other)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(basic_stream_handle&& other)
operator ==	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend bool operator==(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
operator ==	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  friend bool operator==(const consuming_buffers_iterator& a,$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:friend	signature:(const consuming_buffers_iterator& a, const consuming_buffers_iterator& b)
operator ==	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL friend bool operator==(const address& a1, const address& a2);$/;"	p	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
operator ==	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator==(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
operator ==	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL friend bool operator==($/;"	p	class:boost::asio::ip::address_v6	access:friend	signature:( const address_v6& a1, const address_v6& a2)
operator ==	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator==(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
operator ==	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  friend bool operator==(const basic_resolver_iterator& a,$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:friend	signature:(const basic_resolver_iterator& a, const basic_resolver_iterator& b)
operator ==	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL friend bool operator==($/;"	p	class:boost::asio::ip::detail::endpoint	access:friend	signature:( const endpoint& e1, const endpoint& e2)
operator ==	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^bool operator==(const endpoint& e1, const endpoint& e2)$/;"	f	namespace:boost::asio::ip::detail	signature:(const endpoint& e1, const endpoint& e2)
operator ==	/usr/include/boost/asio/ip/icmp.hpp	/^  friend bool operator==(const icmp& p1, const icmp& p2)$/;"	f	class:boost::asio::ip::icmp	access:friend	signature:(const icmp& p1, const icmp& p2)
operator ==	/usr/include/boost/asio/ip/impl/address.ipp	/^bool operator==(const address& a1, const address& a2)$/;"	f	namespace:boost::asio::ip	signature:(const address& a1, const address& a2)
operator ==	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^bool operator==(const address_v6& a1, const address_v6& a2)$/;"	f	namespace:boost::asio::ip	signature:(const address_v6& a1, const address_v6& a2)
operator ==	/usr/include/boost/asio/ip/tcp.hpp	/^  friend bool operator==(const tcp& p1, const tcp& p2)$/;"	f	class:boost::asio::ip::tcp	access:friend	signature:(const tcp& p1, const tcp& p2)
operator ==	/usr/include/boost/asio/ip/udp.hpp	/^  friend bool operator==(const udp& p1, const udp& p2)$/;"	f	class:boost::asio::ip::udp	access:friend	signature:(const udp& p1, const udp& p2)
operator ==	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator==(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
operator ==	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL friend bool operator==($/;"	p	class:boost::asio::local::detail::endpoint	access:friend	signature:( const endpoint& e1, const endpoint& e2)
operator ==	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^bool operator==(const endpoint& e1, const endpoint& e2)$/;"	f	namespace:boost::asio::local::detail	signature:(const endpoint& e1, const endpoint& e2)
operator >	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend bool operator>(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
operator >	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator>(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
operator >	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator>(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
operator >	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator>(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
operator >	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator>(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
operator >	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator>(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
operator >=	/usr/include/boost/asio/buffers_iterator.hpp	/^  friend bool operator>=(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:boost::asio::buffers_iterator	access:friend	signature:(const buffers_iterator& a, const buffers_iterator& b)
operator >=	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator>=(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
operator >=	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator>=(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
operator >=	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator>=(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
operator >=	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator>=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
operator >=	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator>=(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
operator T*	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::keyword_tss_ptr	access:public	signature:() const
operator T*	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:() const
operator T*	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:() const
operator T*	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:() const
operator []	/usr/include/boost/asio/buffers_iterator.hpp	/^  reference operator[](std::ptrdiff_t difference) const$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(std::ptrdiff_t difference) const
operator bool	/usr/include/boost/asio/detail/socket_option.hpp	/^  operator bool() const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:() const
operator bool	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  operator bool() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:() const
operator boost::asio::detail::addrinfo_type*	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^    operator boost::asio::detail::addrinfo_type*()$/;"	f	class:boost::asio::detail::resolver_service_base::auto_addrinfo	access:public	signature:()
operator endpoint_type	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  operator endpoint_type() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
operator fd_set*	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  operator fd_set*()$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:()
operator fd_set*	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  operator fd_set*()$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:()
operator socket_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    operator socket_type() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:public	signature:() const
ops_	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^  op_queue<operation> ops_;$/;"	m	struct:boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit	file:	access:public
options	/usr/include/boost/asio/ssl/context_base.hpp	/^  typedef long options;$/;"	t	class:boost::asio::ssl::context_base	access:public
out_flags_	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  socket_base::message_flags& out_flags_;$/;"	m	class:boost::asio::detail::reactive_socket_recvmsg_op_base	access:private
out_flags_	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  socket_base::message_flags& out_flags_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:private
outbound_interface	/usr/include/boost/asio/ip/multicast.hpp	/^  outbound_interface;$/;"	t	namespace:boost::asio::ip::multicast
outbound_interface	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined outbound_interface;$/;"	t	namespace:boost::asio::ip::multicast
output_buffer	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  void* output_buffer()$/;"	f	class:boost::asio::detail::win_iocp_socket_accept_op	access:public	signature:()
output_buffer_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  unsigned char output_buffer_[(sizeof(sockaddr_storage_type) + 16) * 2];$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
output_buffer_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  const boost::asio::mutable_buffers_1 output_buffer_; $/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
output_buffer_space_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  std::vector<unsigned char> output_buffer_space_; $/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
outstanding_work_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  atomic_count outstanding_work_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
outstanding_work_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long outstanding_work_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
overflow	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  int_type overflow(int_type c)$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:(int_type c)
overflow	/usr/include/boost/asio/basic_streambuf.hpp	/^  int_type overflow(int_type c)$/;"	f	class:boost::asio::basic_streambuf	access:protected	signature:(int_type c)
overlapped_contains_result	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    overlapped_contains_result = 2$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon19
overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  explicit overlapped_ptr(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:(boost::asio::io_service& io_service, BOOST_ASIO_MOVE_ARG(Handler) handler)
overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  overlapped_ptr()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^class overlapped_ptr$/;"	c	namespace:boost::asio::windows	inherits:noncopyable
overlapped_wrapper	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^  explicit overlapped_wrapper(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_handle_service::overlapped_wrapper	access:public	signature:(boost::system::error_code& ec)
overlapped_wrapper	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^class win_iocp_handle_service::overlapped_wrapper$/;"	c	class:boost::asio::detail::win_iocp_handle_service	file:	inherits:OVERLAPPED
owner_	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^  io_service_impl* owner_;$/;"	m	struct:boost::asio::detail::strand_service::on_do_complete_exit	file:	access:public
owner_	/usr/include/boost/asio/detail/service_registry.hpp	/^  boost::asio::io_service& owner_;$/;"	m	class:boost::asio::detail::service_registry	access:private
owner_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    win_object_handle_service* owner_;$/;"	m	class:boost::asio::detail::win_object_handle_service::implementation_type	access:private
owner_	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& owner_;$/;"	m	class:boost::asio::io_service::service	access:private
p_	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^  void* p_;$/;"	m	class:boost::asio::detail::local_free_on_block_exit	access:private
p_	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  T* p_;$/;"	m	class:boost::asio::detail::scoped_ptr	access:private
parity	/usr/include/boost/asio/impl/serial_port_base.ipp	/^serial_port_base::parity::parity(serial_port_base::parity::type t)$/;"	f	class:boost::asio::serial_port_base::parity	signature:(serial_port_base::parity::type t)
parity	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL explicit parity(type t = none);$/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:(type t = none)
parity	/usr/include/boost/asio/serial_port_base.hpp	/^  class parity$/;"	c	class:boost::asio::serial_port_base	access:public
partial_search	/usr/include/boost/asio/impl/read_until.hpp	/^  std::pair<Iterator1, bool> partial_search($/;"	f	namespace:boost::asio::detail	signature:( Iterator1 first1, Iterator1 last1, Iterator2 first2, Iterator2 last2)
passive	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags passive = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
password_callback	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^  explicit password_callback(PasswordCallback callback)$/;"	f	class:boost::asio::ssl::detail::password_callback	access:public	signature:(PasswordCallback callback)
password_callback	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^class password_callback : public password_callback_base$/;"	c	namespace:boost::asio::ssl::detail	inherits:password_callback_base
password_callback	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  static int password_callback(char* buf, int size, int purpose, void* data)$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(char* buf, int size, int purpose, void* data)
password_callback_base	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^class password_callback_base$/;"	c	namespace:boost::asio::ssl::detail
password_callback_function	/usr/include/boost/asio/ssl/impl/context.ipp	/^int context::password_callback_function($/;"	f	class:boost::asio::ssl::context	signature:( char* buf, int size, int purpose, void* data)
password_callback_type	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^      context_base::password_purpose)> password_callback_type;$/;"	t	class:boost::asio::ssl::old::detail::openssl_context_service	access:public
password_purpose	/usr/include/boost/asio/ssl/context_base.hpp	/^  enum password_purpose$/;"	g	class:boost::asio::ssl::context_base	access:public
path	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::string path() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
path	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void path(const char* p)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const char* p)
path	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void path(const std::string& p)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const std::string& p)
path	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL std::string path() const;$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:() const
path	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void path(const char* p);$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:(const char* p)
path	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void path(const std::string& p);$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:(const std::string& p)
path	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^std::string endpoint::path() const$/;"	f	class:boost::asio::local::detail::endpoint	signature:() const
path	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^void endpoint::path(const char* p)$/;"	f	class:boost::asio::local::detail::endpoint	signature:(const char* p)
path	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^void endpoint::path(const std::string& p)$/;"	f	class:boost::asio::local::detail::endpoint	signature:(const std::string& p)
path_length_	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  std::size_t path_length_;$/;"	m	class:boost::asio::local::detail::endpoint	access:private
peek	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers)
peek	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
peek	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers)
peek	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
peek	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers)
peek	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
peek	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  std::size_t peek(impl_type& \/*impl*\/, Stream& \/*next_layer*\/,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& , Stream& , const Mutable_Buffers& , boost::system::error_code& ec)
peek	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const MutableBufferSequence& buffers)
peek	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
peek	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  std::size_t peek(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const MutableBufferSequence& buffers, boost::system::error_code& ec)
peek_copy	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t peek_copy(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:private	signature:(const MutableBufferSequence& buffers)
peer_	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  Socket& peer_;$/;"	m	class:boost::asio::detail::reactive_socket_accept_op_base	access:private
peer_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  Socket& peer_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
peer_endpoint_	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  typename Protocol::endpoint* peer_endpoint_;$/;"	m	class:boost::asio::detail::reactive_socket_accept_op_base	access:private
peer_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  typename Protocol::endpoint* peer_endpoint_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
pem	/usr/include/boost/asio/ssl/context_base.hpp	/^    pem$/;"	e	enum:boost::asio::ssl::context_base::file_format
pending_event_change_index_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  hash_map<int, std::size_t> pending_event_change_index_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
pending_event_changes_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::vector< ::pollfd> pending_event_changes_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
pending_read_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  boost::asio::deadline_timer pending_read_;$/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
pending_write_	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  boost::asio::deadline_timer pending_write_;$/;"	m	struct:boost::asio::ssl::detail::stream_core	access:public
per_descriptor_data	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:boost::asio::detail::dev_poll_reactor	access:public
per_descriptor_data	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  typedef descriptor_state* per_descriptor_data;$/;"	t	class:boost::asio::detail::epoll_reactor	access:public
per_descriptor_data	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  typedef descriptor_state* per_descriptor_data;$/;"	t	class:boost::asio::detail::kqueue_reactor	access:public
per_descriptor_data	/usr/include/boost/asio/detail/select_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:boost::asio::detail::select_reactor	access:public
per_timer_data	/usr/include/boost/asio/detail/timer_queue.hpp	/^    per_timer_data() : next_(0), prev_(0) {}$/;"	f	class:boost::asio::detail::timer_queue::per_timer_data	access:public	signature:()
per_timer_data	/usr/include/boost/asio/detail/timer_queue.hpp	/^  class per_timer_data$/;"	c	class:boost::asio::detail::timer_queue	access:public
per_timer_data	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^    per_timer_data;$/;"	t	class:boost::asio::detail::timer_queue	access:public
perform	/usr/include/boost/asio/detail/reactor_op.hpp	/^  bool perform()$/;"	f	class:boost::asio::detail::reactor_op	access:public	signature:()
perform	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL want perform(int (engine::* op)(void*, std::size_t),$/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:(int (engine::* op)(void*, std::size_t), void* data, std::size_t length, boost::system::error_code& ec, std::size_t* bytes_transferred)
perform	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::want engine::perform(int (engine::* op)(void*, std::size_t),$/;"	f	class:boost::asio::ssl::detail::engine	signature:(int (engine::* op)(void*, std::size_t), void* data, std::size_t length, boost::system::error_code& ec, std::size_t* bytes_transferred)
perform_func_	/usr/include/boost/asio/detail/reactor_op.hpp	/^  perform_func_type perform_func_;$/;"	m	class:boost::asio::detail::reactor_op	access:private
perform_func_type	/usr/include/boost/asio/detail/reactor_op.hpp	/^  typedef bool (*perform_func_type)(reactor_op*);$/;"	t	class:boost::asio::detail::reactor_op	access:protected
perform_io	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    BOOST_ASIO_DECL operation* perform_io(uint32_t events);$/;"	p	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private	signature:(uint32_t events)
perform_io	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^operation* epoll_reactor::descriptor_state::perform_io(uint32_t events)$/;"	f	class:boost::asio::detail::epoll_reactor::descriptor_state	signature:(uint32_t events)
perform_io_cleanup_on_block_exit	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^  explicit perform_io_cleanup_on_block_exit(epoll_reactor* r)$/;"	f	struct:boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit	access:public	signature:(epoll_reactor* r)
perform_io_cleanup_on_block_exit	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^struct epoll_reactor::perform_io_cleanup_on_block_exit$/;"	s	class:boost::asio::detail::epoll_reactor	file:
perform_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool perform_operations(Descriptor descriptor, op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor, op_queue<operation>& ops)
perform_operations_for_descriptors	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void perform_operations_for_descriptors($/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:( const Descriptor_Set& descriptors, op_queue<operation>& ops)
period_type	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  typedef typename duration_type::period period_type;$/;"	t	struct:boost::asio::detail::chrono_time_traits	access:public
pipe_read_op	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  pipe_read_op()$/;"	f	class:boost::asio::detail::signal_set_service::pipe_read_op	access:public	signature:()
pipe_read_op	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^class signal_set_service::pipe_read_op : public reactor_op$/;"	c	class:boost::asio::detail::signal_set_service	file:	inherits:reactor_op
pipe_select_interrupter	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^pipe_select_interrupter::pipe_select_interrupter()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
pipe_select_interrupter	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL pipe_select_interrupter();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
pipe_select_interrupter	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^class pipe_select_interrupter$/;"	c	namespace:boost::asio::detail
placeholders	/usr/include/boost/asio/placeholders.hpp	/^namespace placeholders {$/;"	n	namespace:boost::asio
pointer	/usr/include/boost/asio/buffers_iterator.hpp	/^      BufferSequence, ByteType>::byte_type* pointer;$/;"	t	class:boost::asio::buffers_iterator	access:public
pointer	/usr/include/boost/asio/buffers_iterator.hpp	/^  typedef const_or_non_const_ByteType* pointer;$/;"	t	class:boost::asio::buffers_iterator	access:public
pointer	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef const basic_resolver_entry<InternetProtocol>* pointer;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:public
poll	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^std::size_t task_io_service::poll(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	signature:(boost::system::error_code& ec)
poll	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^size_t win_iocp_io_service::poll(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(boost::system::error_code& ec)
poll	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL std::size_t poll(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
poll	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL size_t poll(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
poll	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::poll()$/;"	f	class:boost::asio::io_service	signature:()
poll	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::poll(boost::system::error_code& ec)$/;"	f	class:boost::asio::io_service	signature:(boost::system::error_code& ec)
poll	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t poll();$/;"	p	class:boost::asio::io_service	access:public	signature:()
poll	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t poll(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
poll_connect	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int poll_connect(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
poll_connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int poll_connect(socket_type s, boost::system::error_code& ec);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
poll_one	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^std::size_t task_io_service::poll_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	signature:(boost::system::error_code& ec)
poll_one	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^size_t win_iocp_io_service::poll_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(boost::system::error_code& ec)
poll_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL std::size_t poll_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
poll_one	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL size_t poll_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
poll_one	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::poll_one()$/;"	f	class:boost::asio::io_service	signature:()
poll_one	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::poll_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::io_service	signature:(boost::system::error_code& ec)
poll_one	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t poll_one();$/;"	p	class:boost::asio::io_service	access:public	signature:()
poll_one	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t poll_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
poll_read	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int poll_read(int d,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, boost::system::error_code& ec)
poll_read	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int poll_read(int d, state_type state, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, boost::system::error_code& ec)
poll_read	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int poll_read(socket_type s, state_type state, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, boost::system::error_code& ec)
poll_read	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int poll_read(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, boost::system::error_code& ec)
poll_write	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL int poll_write(int d,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, boost::system::error_code& ec)
poll_write	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^int poll_write(int d, state_type state, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, boost::system::error_code& ec)
poll_write	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int poll_write(socket_type s, state_type state, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, boost::system::error_code& ec)
poll_write	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int poll_write(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, boost::system::error_code& ec)
pop	/usr/include/boost/asio/detail/op_queue.hpp	/^  void pop()$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:()
port	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  unsigned short port() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
port	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  void port(unsigned short port_num)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(unsigned short port_num)
port	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL unsigned short port() const;$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:() const
port	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void port(unsigned short port_num);$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:(unsigned short port_num)
port	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^unsigned short endpoint::port() const$/;"	f	class:boost::asio::ip::detail::endpoint	signature:() const
port	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^void endpoint::port(unsigned short port_num)$/;"	f	class:boost::asio::ip::detail::endpoint	signature:(unsigned short port_num)
position_	/usr/include/boost/asio/buffers_iterator.hpp	/^  std::size_t position_;$/;"	m	class:boost::asio::buffers_iterator	access:private
posix	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
posix	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
posix	/usr/include/boost/asio/posix/descriptor_base.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
posix	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
posix	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
posix_event	/usr/include/boost/asio/detail/impl/posix_event.ipp	/^posix_event::posix_event()$/;"	f	class:boost::asio::detail::posix_event	signature:()
posix_event	/usr/include/boost/asio/detail/posix_event.hpp	/^  BOOST_ASIO_DECL posix_event();$/;"	p	class:boost::asio::detail::posix_event	access:public	signature:()
posix_event	/usr/include/boost/asio/detail/posix_event.hpp	/^class posix_event$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
posix_fd_set_adapter	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  posix_fd_set_adapter()$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:()
posix_fd_set_adapter	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^class posix_fd_set_adapter : noncopyable$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
posix_mutex	/usr/include/boost/asio/detail/impl/posix_mutex.ipp	/^posix_mutex::posix_mutex()$/;"	f	class:boost::asio::detail::posix_mutex	signature:()
posix_mutex	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  BOOST_ASIO_DECL posix_mutex();$/;"	p	class:boost::asio::detail::posix_mutex	access:public	signature:()
posix_mutex	/usr/include/boost/asio/detail/posix_mutex.hpp	/^class posix_mutex$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
posix_signal_blocker	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  posix_signal_blocker()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
posix_signal_blocker	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^class posix_signal_blocker$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
posix_static_mutex	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^struct posix_static_mutex$/;"	s	namespace:boost::asio::detail
posix_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^  posix_thread(Function f, unsigned int = 0)$/;"	f	class:boost::asio::detail::posix_thread	access:public	signature:(Function f, unsigned int = 0)
posix_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^class posix_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
posix_time	/usr/include/boost/asio/detail/date_time_fwd.hpp	/^namespace posix_time {$/;"	n	namespace:boost
posix_time_duration	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    explicit posix_time_duration(const duration_type& d)$/;"	f	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:public	signature:(const duration_type& d)
posix_time_duration	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  class posix_time_duration$/;"	c	struct:boost::asio::detail::chrono_time_traits	access:public
posix_tss_ptr	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  posix_tss_ptr()$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:()
posix_tss_ptr	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^class posix_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
posix_tss_ptr_create	/usr/include/boost/asio/detail/impl/posix_tss_ptr.ipp	/^void posix_tss_ptr_create(pthread_key_t& key)$/;"	f	namespace:boost::asio::detail	signature:(pthread_key_t& key)
posix_tss_ptr_create	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^BOOST_ASIO_DECL void posix_tss_ptr_create(pthread_key_t& key);$/;"	p	namespace:boost::asio::detail	signature:(pthread_key_t& key)
possible_dup	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^  possible_dup = 4$/;"	e	enum:boost::asio::detail::descriptor_ops::__anon9
possible_dup	/usr/include/boost/asio/detail/socket_ops.hpp	/^  possible_dup = 64$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
post	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^void strand_service::post(strand_service::implementation_type& impl,$/;"	f	class:boost::asio::detail::strand_service	signature:(strand_service::implementation_type& impl, Handler handler)
post	/usr/include/boost/asio/detail/impl/task_io_service.hpp	/^void task_io_service::post(Handler handler)$/;"	f	class:boost::asio::detail::task_io_service	signature:(Handler handler)
post	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^void win_iocp_io_service::post(Handler handler)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(Handler handler)
post	/usr/include/boost/asio/detail/strand_service.hpp	/^  void post(implementation_type& impl, Handler handler);$/;"	p	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl, Handler handler)
post	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void post(Handler handler);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(Handler handler)
post	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void post(Handler handler);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(Handler handler)
post_deferred_completion	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_deferred_completion(task_io_service::operation* op)$/;"	f	class:boost::asio::detail::task_io_service	signature:(task_io_service::operation* op)
post_deferred_completion	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::post_deferred_completion(win_iocp_operation* op)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(win_iocp_operation* op)
post_deferred_completion	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_deferred_completion(operation* op);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(operation* op)
post_deferred_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void post_deferred_completion(win_iocp_operation* op);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op)
post_deferred_completions	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_deferred_completions($/;"	f	class:boost::asio::detail::task_io_service	signature:( op_queue<task_io_service::operation>& ops)
post_deferred_completions	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::post_deferred_completions($/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:( op_queue<win_iocp_operation>& ops)
post_deferred_completions	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_deferred_completions(op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(op_queue<operation>& ops)
post_deferred_completions	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void post_deferred_completions($/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:( op_queue<win_iocp_operation>& ops)
post_immediate_completion	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void post_immediate_completion(reactor_op* op)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(reactor_op* op)
post_immediate_completion	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void post_immediate_completion(reactor_op* op)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(reactor_op* op)
post_immediate_completion	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_immediate_completion(task_io_service::operation* op)$/;"	f	class:boost::asio::detail::task_io_service	signature:(task_io_service::operation* op)
post_immediate_completion	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void post_immediate_completion(reactor_op* op)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(reactor_op* op)
post_immediate_completion	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void post_immediate_completion(reactor_op* op)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(reactor_op* op)
post_immediate_completion	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_immediate_completion(operation* op);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(operation* op)
post_immediate_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void post_immediate_completion(win_iocp_operation* op)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op)
post_non_private_deferred_completion	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_non_private_deferred_completion($/;"	f	class:boost::asio::detail::task_io_service	signature:( task_io_service::operation* op)
post_non_private_deferred_completion	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_non_private_deferred_completion(operation* op);$/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:(operation* op)
post_non_private_immediate_completion	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_non_private_immediate_completion($/;"	f	class:boost::asio::detail::task_io_service	signature:( task_io_service::operation* op)
post_non_private_immediate_completion	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_non_private_immediate_completion(operation* op);$/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:(operation* op)
post_private_deferred_completion	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_private_deferred_completion($/;"	f	class:boost::asio::detail::task_io_service	signature:( task_io_service::operation* op)
post_private_deferred_completion	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_private_deferred_completion(operation* op);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(operation* op)
post_private_deferred_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void post_private_deferred_completion(win_iocp_operation* op)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op)
post_private_immediate_completion	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::post_private_immediate_completion($/;"	f	class:boost::asio::detail::task_io_service	signature:( task_io_service::operation* op)
post_private_immediate_completion	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void post_private_immediate_completion(operation* op);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(operation* op)
post_private_immediate_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void post_private_immediate_completion(win_iocp_operation* op)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(win_iocp_operation* op)
prepare	/usr/include/boost/asio/basic_streambuf.hpp	/^  mutable_buffers_type prepare(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:(std::size_t n)
prepare	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void prepare(std::size_t max_size)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t max_size)
prepare	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void prepare(std::size_t)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t)
prev	/usr/include/boost/asio/detail/object_pool.hpp	/^  static Object*& prev(Object* o)$/;"	f	class:boost::asio::detail::object_pool_access	access:public	signature:(Object* o)
prev_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    descriptor_state* prev_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
prev_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    descriptor_state* prev_;$/;"	m	struct:boost::asio::detail::kqueue_reactor::descriptor_state	access:public
prev_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  signal_set_service* prev_;$/;"	m	class:boost::asio::detail::signal_set_service	access:private
prev_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    per_timer_data* prev_;$/;"	m	class:boost::asio::detail::timer_queue::per_timer_data	access:private
prev_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    implementation_type* prev_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
prev_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    base_implementation_type* prev_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
prev_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    implementation_type* prev_;$/;"	m	class:boost::asio::detail::win_object_handle_service::implementation_type	access:private
prev_in_table_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    registration* prev_in_table_;$/;"	m	class:boost::asio::detail::signal_set_service::registration	access:private
previous_size_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    std::size_t previous_size_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
primitive_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  ssl_primitive_func  primitive_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
private_op_queue	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^  op_queue<task_io_service_operation> private_op_queue;$/;"	m	struct:boost::asio::detail::task_io_service_thread_info	access:public
private_outstanding_work	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^  long private_outstanding_work;$/;"	m	struct:boost::asio::detail::task_io_service_thread_info	access:public
protocol	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  protocol_type protocol() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
protocol	/usr/include/boost/asio/ip/icmp.hpp	/^  int protocol() const$/;"	f	class:boost::asio::ip::icmp	access:public	signature:() const
protocol	/usr/include/boost/asio/ip/tcp.hpp	/^  int protocol() const$/;"	f	class:boost::asio::ip::tcp	access:public	signature:() const
protocol	/usr/include/boost/asio/ip/udp.hpp	/^  int protocol() const$/;"	f	class:boost::asio::ip::udp	access:public	signature:() const
protocol	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  protocol_type protocol() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
protocol	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  int protocol() const$/;"	f	class:boost::asio::local::datagram_protocol	access:public	signature:() const
protocol	/usr/include/boost/asio/local/stream_protocol.hpp	/^  int protocol() const$/;"	f	class:boost::asio::local::stream_protocol	access:public	signature:() const
protocol_	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  Protocol protocol_;$/;"	m	class:boost::asio::detail::reactive_socket_accept_op_base	access:private
protocol_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    protocol_type protocol_;$/;"	m	struct:boost::asio::detail::reactive_socket_service::implementation_type	access:public
protocol_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  Protocol protocol_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
protocol_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    protocol_type protocol_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service::implementation_type	access:public
protocol_	/usr/include/boost/asio/ip/icmp.hpp	/^  int protocol_;$/;"	m	class:boost::asio::ip::icmp	access:private
protocol_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
protocol_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
protocol_type	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_seq_packet_socket	access:public
protocol_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_socket	access:public
protocol_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
protocol_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
protocol_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
protocol_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::detail::reactive_socket_service	access:public
protocol_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
protocol_type	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_endpoint	access:public
protocol_type	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
protocol_type	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_resolver_entry	access:public
protocol_type	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_resolver_query	access:public
protocol_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
protocol_type	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::local::basic_endpoint	access:public
protocol_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
protocol_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:public
protocol_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
protocol_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
protocol_type_	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  int protocol_type_;$/;"	m	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:private
ptr	/usr/include/boost/asio/detail/posix_thread.hpp	/^    func_base* ptr;$/;"	m	struct:boost::asio::detail::posix_thread::auto_func_base_ptr	access:public
ptr	/usr/include/boost/asio/detail/win_thread.hpp	/^    func_base* ptr;$/;"	m	struct:boost::asio::detail::win_thread::auto_func_base_ptr	access:public
ptr_	/usr/include/boost/asio/detail/service_registry.hpp	/^    boost::asio::io_service::service* ptr_;$/;"	m	struct:boost::asio::detail::service_registry::auto_service_ptr	access:public
ptr_	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  win_iocp_operation* ptr_;$/;"	m	class:boost::asio::detail::win_iocp_overlapped_ptr	access:private
puberror	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  const boost::system::error_code& puberror() const$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:() const
push	/usr/include/boost/asio/detail/op_queue.hpp	/^  void push(Operation* h)$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:(Operation* h)
push	/usr/include/boost/asio/detail/op_queue.hpp	/^  void push(op_queue<OtherOperation>& q)$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:(op_queue<OtherOperation>& q)
put_buffer_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  boost::asio::detail::array<char, buffer_size> put_buffer_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
put_input	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL boost::asio::const_buffer put_input($/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:( const boost::asio::const_buffer& data)
put_input	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^boost::asio::const_buffer engine::put_input($/;"	f	class:boost::asio::ssl::detail::engine	signature:( const boost::asio::const_buffer& data)
putback_max	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum { putback_max = 8 };$/;"	e	enum:boost::asio::basic_socket_streambuf::__anon3
query	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef basic_resolver_query<InternetProtocol> query;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
query_	/usr/include/boost/asio/detail/resolve_op.hpp	/^  query_type query_;$/;"	m	class:boost::asio::detail::resolve_op	access:private
query_type	/usr/include/boost/asio/detail/resolve_op.hpp	/^  typedef boost::asio::ip::basic_resolver_query<Protocol> query_type;$/;"	t	class:boost::asio::detail::resolve_op	access:public
query_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef boost::asio::ip::basic_resolver_query<Protocol> query_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
query_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef basic_resolver_query<InternetProtocol> query_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
queue_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    op_queue<signal_op> queue_;$/;"	m	class:boost::asio::detail::signal_set_service::implementation_type	access:private
queue_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    op_queue<signal_op>* queue_;$/;"	m	class:boost::asio::detail::signal_set_service::registration	access:private
random_access_handle	/usr/include/boost/asio/windows/random_access_handle.hpp	/^typedef basic_random_access_handle<> random_access_handle;$/;"	t	namespace:boost::asio::windows
random_access_handle_service	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  explicit random_access_handle_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(boost::asio::io_service& io_service)
random_access_handle_service	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^class random_access_handle_service$/;"	c	namespace:boost::asio::windows	inherits:boost::asio::io_service::service
raw_socket_service	/usr/include/boost/asio/raw_socket_service.hpp	/^  explicit raw_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(boost::asio::io_service& io_service)
raw_socket_service	/usr/include/boost/asio/raw_socket_service.hpp	/^class raw_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
rdbuf	/usr/include/boost/asio/basic_socket_iostream.hpp	/^    Time, TimeTraits, TimerService>* rdbuf() const$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:() const
reactive_descriptor_service	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^reactive_descriptor_service::reactive_descriptor_service($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( boost::asio::io_service& io_service)
reactive_descriptor_service	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL reactive_descriptor_service($/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:( boost::asio::io_service& io_service)
reactive_descriptor_service	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^class reactive_descriptor_service$/;"	c	namespace:boost::asio::detail
reactive_null_buffers_op	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^  reactive_null_buffers_op(Handler& handler)$/;"	f	class:boost::asio::detail::reactive_null_buffers_op	access:public	signature:(Handler& handler)
reactive_null_buffers_op	/usr/include/boost/asio/detail/reactive_null_buffers_op.hpp	/^class reactive_null_buffers_op : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
reactive_serial_port_service	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^reactive_serial_port_service::reactive_serial_port_service($/;"	f	class:boost::asio::detail::reactive_serial_port_service	signature:( boost::asio::io_service& io_service)
reactive_serial_port_service	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  BOOST_ASIO_DECL reactive_serial_port_service($/;"	p	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:( boost::asio::io_service& io_service)
reactive_serial_port_service	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^class reactive_serial_port_service$/;"	c	namespace:boost::asio::detail
reactive_socket_accept_op	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  reactive_socket_accept_op(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_accept_op	access:public	signature:(socket_type socket, socket_ops::state_type state, Socket& peer, const Protocol& protocol, typename Protocol::endpoint* peer_endpoint, Handler& handler)
reactive_socket_accept_op	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^class reactive_socket_accept_op :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_accept_op_base
reactive_socket_accept_op_base	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  reactive_socket_accept_op_base(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_accept_op_base	access:public	signature:(socket_type socket, socket_ops::state_type state, Socket& peer, const Protocol& protocol, typename Protocol::endpoint* peer_endpoint, func_type complete_func)
reactive_socket_accept_op_base	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^class reactive_socket_accept_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
reactive_socket_connect_op	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  reactive_socket_connect_op(socket_type socket, Handler& handler)$/;"	f	class:boost::asio::detail::reactive_socket_connect_op	access:public	signature:(socket_type socket, Handler& handler)
reactive_socket_connect_op	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^class reactive_socket_connect_op : public reactive_socket_connect_op_base$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_connect_op_base
reactive_socket_connect_op_base	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  reactive_socket_connect_op_base(socket_type socket, func_type complete_func)$/;"	f	class:boost::asio::detail::reactive_socket_connect_op_base	access:public	signature:(socket_type socket, func_type complete_func)
reactive_socket_connect_op_base	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^class reactive_socket_connect_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
reactive_socket_recv_op	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  reactive_socket_recv_op(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_recv_op	access:public	signature:(socket_type socket, socket_ops::state_type state, const MutableBufferSequence& buffers, socket_base::message_flags flags, Handler& handler)
reactive_socket_recv_op	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^class reactive_socket_recv_op :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_recv_op_base
reactive_socket_recv_op_base	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  reactive_socket_recv_op_base(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_recv_op_base	access:public	signature:(socket_type socket, socket_ops::state_type state, const MutableBufferSequence& buffers, socket_base::message_flags flags, func_type complete_func)
reactive_socket_recv_op_base	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^class reactive_socket_recv_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
reactive_socket_recvfrom_op	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  reactive_socket_recvfrom_op(socket_type socket, int protocol_type,$/;"	f	class:boost::asio::detail::reactive_socket_recvfrom_op	access:public	signature:(socket_type socket, int protocol_type, const MutableBufferSequence& buffers, Endpoint& endpoint, socket_base::message_flags flags, Handler& handler)
reactive_socket_recvfrom_op	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^class reactive_socket_recvfrom_op :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_recvfrom_op_base
reactive_socket_recvfrom_op_base	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  reactive_socket_recvfrom_op_base(socket_type socket, int protocol_type,$/;"	f	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:public	signature:(socket_type socket, int protocol_type, const MutableBufferSequence& buffers, Endpoint& endpoint, socket_base::message_flags flags, func_type complete_func)
reactive_socket_recvfrom_op_base	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^class reactive_socket_recvfrom_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
reactive_socket_recvmsg_op	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  reactive_socket_recvmsg_op(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_recvmsg_op	access:public	signature:(socket_type socket, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, Handler& handler)
reactive_socket_recvmsg_op	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^class reactive_socket_recvmsg_op :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_recvmsg_op_base
reactive_socket_recvmsg_op_base	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  reactive_socket_recvmsg_op_base(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_recvmsg_op_base	access:public	signature:(socket_type socket, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, func_type complete_func)
reactive_socket_recvmsg_op_base	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^class reactive_socket_recvmsg_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
reactive_socket_send_op	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  reactive_socket_send_op(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_send_op	access:public	signature:(socket_type socket, const ConstBufferSequence& buffers, socket_base::message_flags flags, Handler& handler)
reactive_socket_send_op	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^class reactive_socket_send_op :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_send_op_base
reactive_socket_send_op_base	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  reactive_socket_send_op_base(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_send_op_base	access:public	signature:(socket_type socket, const ConstBufferSequence& buffers, socket_base::message_flags flags, func_type complete_func)
reactive_socket_send_op_base	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^class reactive_socket_send_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
reactive_socket_sendto_op	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  reactive_socket_sendto_op(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_sendto_op	access:public	signature:(socket_type socket, const ConstBufferSequence& buffers, const Endpoint& endpoint, socket_base::message_flags flags, Handler& handler)
reactive_socket_sendto_op	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^class reactive_socket_sendto_op :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_sendto_op_base
reactive_socket_sendto_op_base	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  reactive_socket_sendto_op_base(socket_type socket,$/;"	f	class:boost::asio::detail::reactive_socket_sendto_op_base	access:public	signature:(socket_type socket, const ConstBufferSequence& buffers, const Endpoint& endpoint, socket_base::message_flags flags, func_type complete_func)
reactive_socket_sendto_op_base	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^class reactive_socket_sendto_op_base : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
reactive_socket_service	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  reactive_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(boost::asio::io_service& io_service)
reactive_socket_service	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^class reactive_socket_service :$/;"	c	namespace:boost::asio::detail	inherits:reactive_socket_service_base
reactive_socket_service_base	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^reactive_socket_service_base::reactive_socket_service_base($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( boost::asio::io_service& io_service)
reactive_socket_service_base	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL reactive_socket_service_base($/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:( boost::asio::io_service& io_service)
reactive_socket_service_base	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^class reactive_socket_service_base$/;"	c	namespace:boost::asio::detail
reactor	/usr/include/boost/asio/detail/reactor_fwd.hpp	/^typedef select_reactor reactor;$/;"	t	namespace:boost::asio::detail
reactor_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    epoll_reactor* reactor_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
reactor_	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^  dev_poll_reactor* reactor_;$/;"	m	class:boost::asio::detail::dev_poll_reactor::fork_helper	file:	access:private
reactor_	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^  epoll_reactor* reactor_;$/;"	m	struct:boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit	file:	access:public
reactor_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  reactor& reactor_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service	access:private
reactor_	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  reactor& reactor_;$/;"	m	class:boost::asio::detail::reactive_socket_service_base	access:protected
reactor_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  reactor& reactor_;$/;"	m	class:boost::asio::detail::signal_set_service	access:private
reactor_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  reactor* reactor_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service_base	access:protected
reactor_data_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    reactor::per_descriptor_data reactor_data_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:private
reactor_data_	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^    reactor::per_descriptor_data reactor_data_;$/;"	m	struct:boost::asio::detail::reactive_socket_service_base::base_implementation_type	access:public
reactor_data_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  reactor::per_descriptor_data reactor_data_;$/;"	m	class:boost::asio::detail::signal_set_service	access:private
reactor_data_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    reactor::per_descriptor_data reactor_data_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
reactor_op	/usr/include/boost/asio/detail/reactor_op.hpp	/^  reactor_op(perform_func_type perform_func, func_type complete_func)$/;"	f	class:boost::asio::detail::reactor_op	access:protected	signature:(perform_func_type perform_func, func_type complete_func)
reactor_op	/usr/include/boost/asio/detail/reactor_op.hpp	/^class reactor_op$/;"	c	namespace:boost::asio::detail	inherits:operation
reactor_op_queue	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  reactor_op_queue()$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:()
reactor_op_queue	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^class reactor_op_queue$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
read	/usr/include/boost/asio/impl/read.hpp	/^inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers)$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers)
read	/usr/include/boost/asio/impl/read.hpp	/^inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition)
read	/usr/include/boost/asio/impl/read.hpp	/^inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read	/usr/include/boost/asio/impl/read.hpp	/^inline std::size_t read(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b)
read	/usr/include/boost/asio/impl/read.hpp	/^inline std::size_t read(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
read	/usr/include/boost/asio/impl/read.hpp	/^inline std::size_t read(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, boost::system::error_code& ec)
read	/usr/include/boost/asio/impl/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
read	/usr/include/boost/asio/impl/read.hpp	/^std::size_t read(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b);$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b, boost::system::error_code& ec)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers);$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL want read(const boost::asio::mutable_buffer& data,$/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:(const boost::asio::mutable_buffer& data, boost::system::error_code& ec, std::size_t& bytes_transferred)
read	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::want engine::read(const boost::asio::mutable_buffer& data,$/;"	f	class:boost::asio::ssl::detail::engine	signature:(const boost::asio::mutable_buffer& data, boost::system::error_code& ec, std::size_t& bytes_transferred)
read_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  read_func  read_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b)
read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, boost::system::error_code& ec)
read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers)
read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition)
read_at	/usr/include/boost/asio/impl/read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_at	/usr/include/boost/asio/impl/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
read_at	/usr/include/boost/asio/impl/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, boost::system::error_code& ec)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_op(AsyncRandomAccessReadDevice& device,$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(AsyncRandomAccessReadDevice& device, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, ReadHandler& handler)
read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_op(AsyncRandomAccessReadDevice& device,$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(AsyncRandomAccessReadDevice& device, boost::uint64_t offset, const boost::array<Elem, 2>& buffers, CompletionCondition completion_condition, ReadHandler& handler)
read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_op(AsyncRandomAccessReadDevice& device,$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(AsyncRandomAccessReadDevice& device, boost::uint64_t offset, const boost::asio::mutable_buffers_1& buffers, CompletionCondition completion_condition, ReadHandler& handler)
read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_op(AsyncRandomAccessReadDevice& device,$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(AsyncRandomAccessReadDevice& device, boost::uint64_t offset, const std::array<Elem, 2>& buffers, CompletionCondition completion_condition, ReadHandler& handler)
read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_op(const read_at_op& other)$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(const read_at_op& other)
read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_op(read_at_op&& other)$/;"	f	class:boost::asio::detail::read_at_op	access:public	signature:(read_at_op&& other)
read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^  class read_at_op$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^  class read_at_op<AsyncRandomAccessReadDevice, boost::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^  class read_at_op<AsyncRandomAccessReadDevice, std::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
read_at_op	/usr/include/boost/asio/impl/read_at.hpp	/^  class read_at_op<AsyncRandomAccessReadDevice,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
read_at_streambuf_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_streambuf_op(AsyncRandomAccessReadDevice& device,$/;"	f	class:boost::asio::detail::read_at_streambuf_op	access:public	signature:(AsyncRandomAccessReadDevice& device, boost::uint64_t offset, basic_streambuf<Allocator>& streambuf, CompletionCondition completion_condition, ReadHandler& handler)
read_at_streambuf_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_streambuf_op(const read_at_streambuf_op& other)$/;"	f	class:boost::asio::detail::read_at_streambuf_op	access:public	signature:(const read_at_streambuf_op& other)
read_at_streambuf_op	/usr/include/boost/asio/impl/read_at.hpp	/^    read_at_streambuf_op(read_at_streambuf_op&& other)$/;"	f	class:boost::asio::detail::read_at_streambuf_op	access:public	signature:(read_at_streambuf_op&& other)
read_at_streambuf_op	/usr/include/boost/asio/impl/read_at.hpp	/^  class read_at_streambuf_op$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
read_descriptor	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  int read_descriptor() const$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:() const
read_descriptor	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  int read_descriptor() const$/;"	f	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:() const
read_descriptor	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_type read_descriptor() const$/;"	f	class:boost::asio::detail::socket_select_interrupter	access:public	signature:() const
read_descriptor_	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  int read_descriptor_;$/;"	m	class:boost::asio::detail::eventfd_select_interrupter	access:private
read_descriptor_	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  int read_descriptor_;$/;"	m	struct:boost::asio::detail::signal_state	file:	access:public
read_descriptor_	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  int read_descriptor_;$/;"	m	class:boost::asio::detail::pipe_select_interrupter	access:private
read_descriptor_	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_type read_descriptor_;$/;"	m	class:boost::asio::detail::socket_select_interrupter	access:private
read_func	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  typedef boost::function<int ()> read_func;$/;"	t	class:boost::asio::ssl::old::detail::openssl_operation	access:private
read_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:boost::asio::detail::dev_poll_reactor::op_types
read_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:boost::asio::detail::epoll_reactor::op_types
read_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:boost::asio::detail::kqueue_reactor::op_types
read_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1, except_op = 2,$/;"	e	enum:boost::asio::detail::select_reactor::op_types
read_op	/usr/include/boost/asio/impl/read.hpp	/^    read_op(AsyncReadStream& stream, const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(AsyncReadStream& stream, const MutableBufferSequence& buffers, CompletionCondition completion_condition, ReadHandler& handler)
read_op	/usr/include/boost/asio/impl/read.hpp	/^    read_op(AsyncReadStream& stream, const boost::array<Elem, 2>& buffers,$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(AsyncReadStream& stream, const boost::array<Elem, 2>& buffers, CompletionCondition completion_condition, ReadHandler& handler)
read_op	/usr/include/boost/asio/impl/read.hpp	/^    read_op(AsyncReadStream& stream, const std::array<Elem, 2>& buffers,$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(AsyncReadStream& stream, const std::array<Elem, 2>& buffers, CompletionCondition completion_condition, ReadHandler& handler)
read_op	/usr/include/boost/asio/impl/read.hpp	/^    read_op(AsyncReadStream& stream,$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(AsyncReadStream& stream, const boost::asio::mutable_buffers_1& buffers, CompletionCondition completion_condition, ReadHandler& handler)
read_op	/usr/include/boost/asio/impl/read.hpp	/^    read_op(const read_op& other)$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(const read_op& other)
read_op	/usr/include/boost/asio/impl/read.hpp	/^    read_op(read_op&& other)$/;"	f	class:boost::asio::detail::read_op	access:public	signature:(read_op&& other)
read_op	/usr/include/boost/asio/impl/read.hpp	/^  class read_op$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
read_op	/usr/include/boost/asio/impl/read.hpp	/^  class read_op<AsyncReadStream, boost::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
read_op	/usr/include/boost/asio/impl/read.hpp	/^  class read_op<AsyncReadStream, boost::asio::mutable_buffers_1,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
read_op	/usr/include/boost/asio/impl/read.hpp	/^  class read_op<AsyncReadStream, std::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
read_op	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^  read_op(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::detail::read_op	access:public	signature:(const MutableBufferSequence& buffers)
read_op	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^class read_op$/;"	c	namespace:boost::asio::ssl::detail
read_size_helper	/usr/include/boost/asio/basic_streambuf.hpp	/^  friend std::size_t read_size_helper($/;"	f	class:boost::asio::basic_streambuf	access:friend	signature:( basic_streambuf& sb, std::size_t max_size)
read_size_helper	/usr/include/boost/asio/basic_streambuf.hpp	/^inline std::size_t read_size_helper($/;"	f	namespace:boost::asio	signature:( basic_streambuf<Allocator>& sb, std::size_t max_size)
read_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const null_buffers&, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/serial_port_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  std::size_t read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Mutable_Buffers& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  std::size_t read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, boost::system::error_code& ec)
read_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t read_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const MutableBufferSequence& buffers)
read_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t read_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  std::size_t read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^    read_some_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_read_stream::read_some_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, const MutableBufferSequence& buffers, ReadHandler handler)
read_some_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^  class read_some_handler$/;"	c	class:boost::asio::buffered_read_stream	access:public
read_stream_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef buffered_read_stream<write_stream_type&> read_stream_type;$/;"	t	class:boost::asio::buffered_stream	access:private
read_streambuf_op	/usr/include/boost/asio/impl/read.hpp	/^    read_streambuf_op(AsyncReadStream& stream,$/;"	f	class:boost::asio::detail::read_streambuf_op	access:public	signature:(AsyncReadStream& stream, basic_streambuf<Allocator>& streambuf, CompletionCondition completion_condition, ReadHandler& handler)
read_streambuf_op	/usr/include/boost/asio/impl/read.hpp	/^    read_streambuf_op(const read_streambuf_op& other)$/;"	f	class:boost::asio::detail::read_streambuf_op	access:public	signature:(const read_streambuf_op& other)
read_streambuf_op	/usr/include/boost/asio/impl/read.hpp	/^    read_streambuf_op(read_streambuf_op&& other)$/;"	f	class:boost::asio::detail::read_streambuf_op	access:public	signature:(read_streambuf_op&& other)
read_streambuf_op	/usr/include/boost/asio/impl/read.hpp	/^  class read_streambuf_op$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
read_until	/usr/include/boost/asio/impl/read_until.hpp	/^inline std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, typename boost::enable_if<is_match_condition<MatchCondition> >::type*)
read_until	/usr/include/boost/asio/impl/read_until.hpp	/^inline std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim)
read_until	/usr/include/boost/asio/impl/read_until.hpp	/^inline std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr)
read_until	/usr/include/boost/asio/impl/read_until.hpp	/^inline std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim)
read_until	/usr/include/boost/asio/impl/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, boost::system::error_code& ec, typename boost::enable_if<is_match_condition<MatchCondition> >::type*)
read_until	/usr/include/boost/asio/impl/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, boost::system::error_code& ec)
read_until	/usr/include/boost/asio/impl/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr, boost::system::error_code& ec)
read_until	/usr/include/boost/asio/impl/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, boost::system::error_code& ec)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, boost::system::error_code& ec, typename boost::enable_if<is_match_condition<MatchCondition> >::type* = 0)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, typename boost::enable_if<is_match_condition<MatchCondition> >::type* = 0)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, boost::system::error_code& ec)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr, boost::system::error_code& ec)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, boost::system::error_code& ec)
read_until_delim_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_delim_op(AsyncReadStream& stream,$/;"	f	class:boost::asio::detail::read_until_delim_op	access:public	signature:(AsyncReadStream& stream, boost::asio::basic_streambuf<Allocator>& streambuf, char delim, ReadHandler& handler)
read_until_delim_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_delim_op(const read_until_delim_op& other)$/;"	f	class:boost::asio::detail::read_until_delim_op	access:public	signature:(const read_until_delim_op& other)
read_until_delim_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_delim_op(read_until_delim_op&& other)$/;"	f	class:boost::asio::detail::read_until_delim_op	access:public	signature:(read_until_delim_op&& other)
read_until_delim_op	/usr/include/boost/asio/impl/read_until.hpp	/^  class read_until_delim_op$/;"	c	namespace:boost::asio::detail
read_until_delim_string_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_delim_string_op(AsyncReadStream& stream,$/;"	f	class:boost::asio::detail::read_until_delim_string_op	access:public	signature:(AsyncReadStream& stream, boost::asio::basic_streambuf<Allocator>& streambuf, const std::string& delim, ReadHandler& handler)
read_until_delim_string_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_delim_string_op(const read_until_delim_string_op& other)$/;"	f	class:boost::asio::detail::read_until_delim_string_op	access:public	signature:(const read_until_delim_string_op& other)
read_until_delim_string_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_delim_string_op(read_until_delim_string_op&& other)$/;"	f	class:boost::asio::detail::read_until_delim_string_op	access:public	signature:(read_until_delim_string_op&& other)
read_until_delim_string_op	/usr/include/boost/asio/impl/read_until.hpp	/^  class read_until_delim_string_op$/;"	c	namespace:boost::asio::detail
read_until_expr_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_expr_op(AsyncReadStream& stream,$/;"	f	class:boost::asio::detail::read_until_expr_op	access:public	signature:(AsyncReadStream& stream, boost::asio::basic_streambuf<Allocator>& streambuf, const boost::regex& expr, ReadHandler& handler)
read_until_expr_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_expr_op(const read_until_expr_op& other)$/;"	f	class:boost::asio::detail::read_until_expr_op	access:public	signature:(const read_until_expr_op& other)
read_until_expr_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_expr_op(read_until_expr_op&& other)$/;"	f	class:boost::asio::detail::read_until_expr_op	access:public	signature:(read_until_expr_op&& other)
read_until_expr_op	/usr/include/boost/asio/impl/read_until.hpp	/^  class read_until_expr_op$/;"	c	namespace:boost::asio::detail
read_until_match_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_match_op(AsyncReadStream& stream,$/;"	f	class:boost::asio::detail::read_until_match_op	access:public	signature:(AsyncReadStream& stream, boost::asio::basic_streambuf<Allocator>& streambuf, MatchCondition match_condition, ReadHandler& handler)
read_until_match_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_match_op(const read_until_match_op& other)$/;"	f	class:boost::asio::detail::read_until_match_op	access:public	signature:(const read_until_match_op& other)
read_until_match_op	/usr/include/boost/asio/impl/read_until.hpp	/^    read_until_match_op(read_until_match_op&& other)$/;"	f	class:boost::asio::detail::read_until_match_op	access:public	signature:(read_until_match_op&& other)
read_until_match_op	/usr/include/boost/asio/impl/read_until.hpp	/^  class read_until_match_op$/;"	c	namespace:boost::asio::detail
ready_	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  long ready_;$/;"	m	class:boost::asio::detail::win_iocp_operation	access:private
ready_queue_	/usr/include/boost/asio/detail/strand_service.hpp	/^    op_queue<operation> ready_queue_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers)
receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags)
receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers)
receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags)
receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags)
receive	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags& out_flags)
receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers)
receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags)
receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  size_t receive(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  size_t receive(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  size_t receive(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  size_t receive(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/stream_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_RCVBUF> receive_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
receive_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined receive_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint)
receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags)
receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint)
receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags)
receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
receive_from	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t receive_from(implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, endpoint_type& sender_endpoint, socket_base::message_flags, boost::system::error_code& ec)
receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
receive_from	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
receive_from	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, endpoint_type& sender_endpoint, socket_base::message_flags, boost::system::error_code& ec)
receive_from	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
receive_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_RCVLOWAT> receive_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
receive_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined receive_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
receive_with_flags	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  size_t receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, boost::system::error_code& ec)
receive_with_flags	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  size_t receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, socket_base::message_flags& out_flags, boost::system::error_code& ec)
receive_with_flags	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  size_t receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags in_flags, socket_base::message_flags& out_flags, boost::system::error_code& ec)
receive_with_flags	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  size_t receive_with_flags(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, socket_base::message_flags& out_flags, boost::system::error_code& ec)
recreate	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL void recreate();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
recreate	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^void eventfd_select_interrupter::recreate()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
recreate	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^void pipe_select_interrupter::recreate()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
recreate	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^void socket_select_interrupter::recreate()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
recreate	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL void recreate();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
recreate	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL void recreate();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
recv	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^signed_size_type recv(socket_type s, buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, boost::system::error_code& ec)
recv	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL signed_size_type recv(socket_type s, buf* bufs,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, boost::system::error_code& ec)
recv_buf	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    net_buffer recv_buf;$/;"	m	struct:boost::asio::ssl::old::detail::openssl_stream_service::impl_struct	access:public
recv_buf_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  net_buffer& recv_buf_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
recvfrom	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^signed_size_type recvfrom(socket_type s, buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
recvfrom	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL signed_size_type recvfrom(socket_type s, buf* bufs,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
recvmsg	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^signed_size_type recvmsg(socket_type s, buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int in_flags, int& out_flags, boost::system::error_code& ec)
recvmsg	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL signed_size_type recvmsg(socket_type s, buf* bufs,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int in_flags, int& out_flags, boost::system::error_code& ec)
ref_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  boost::asio::detail::shared_ptr<do_init> ref_;$/;"	m	class:boost::asio::ssl::detail::openssl_init	access:private
reference	/usr/include/boost/asio/buffers_iterator.hpp	/^      BufferSequence, ByteType>::byte_type& reference;$/;"	t	class:boost::asio::buffers_iterator	access:public
reference	/usr/include/boost/asio/buffers_iterator.hpp	/^  typedef const_or_non_const_ByteType& reference;$/;"	t	class:boost::asio::buffers_iterator	access:public
reference	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef const basic_resolver_entry<InternetProtocol>& reference;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:public
register_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL int register_descriptor(socket_type, per_descriptor_data&);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type, per_descriptor_data&)
register_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL int register_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data)
register_descriptor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^int dev_poll_reactor::register_descriptor(socket_type, per_descriptor_data&)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(socket_type, per_descriptor_data&)
register_descriptor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^int epoll_reactor::register_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(socket_type descriptor, epoll_reactor::per_descriptor_data& descriptor_data)
register_descriptor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^int kqueue_reactor::register_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(socket_type descriptor, kqueue_reactor::per_descriptor_data& descriptor_data)
register_descriptor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^int select_reactor::register_descriptor(socket_type,$/;"	f	class:boost::asio::detail::select_reactor	signature:(socket_type, select_reactor::per_descriptor_data&)
register_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL int register_descriptor(socket_type descriptor,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data)
register_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL int register_descriptor(socket_type, per_descriptor_data&);$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type, per_descriptor_data&)
register_handle	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^boost::system::error_code win_iocp_io_service::register_handle($/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:( HANDLE handle, boost::system::error_code& ec)
register_handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code register_handle($/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:( HANDLE handle, boost::system::error_code& ec)
register_internal_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL int register_internal_descriptor($/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:( int op_type, socket_type descriptor, per_descriptor_data& descriptor_data, reactor_op* op)
register_internal_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL int register_internal_descriptor($/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:( int op_type, socket_type descriptor, per_descriptor_data& descriptor_data, reactor_op* op)
register_internal_descriptor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^int dev_poll_reactor::register_internal_descriptor(int op_type,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(int op_type, socket_type descriptor, per_descriptor_data&, reactor_op* op)
register_internal_descriptor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^int epoll_reactor::register_internal_descriptor($/;"	f	class:boost::asio::detail::epoll_reactor	signature:( int op_type, socket_type descriptor, epoll_reactor::per_descriptor_data& descriptor_data, reactor_op* op)
register_internal_descriptor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^int kqueue_reactor::register_internal_descriptor($/;"	f	class:boost::asio::detail::kqueue_reactor	signature:( int op_type, socket_type descriptor, kqueue_reactor::per_descriptor_data& descriptor_data, reactor_op* op)
register_internal_descriptor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^int select_reactor::register_internal_descriptor($/;"	f	class:boost::asio::detail::select_reactor	signature:( int op_type, socket_type descriptor, select_reactor::per_descriptor_data&, reactor_op* op)
register_internal_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL int register_internal_descriptor($/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:( int op_type, socket_type descriptor, per_descriptor_data& descriptor_data, reactor_op* op)
register_internal_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL int register_internal_descriptor($/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:( int op_type, socket_type descriptor, per_descriptor_data& descriptor_data, reactor_op* op)
register_wait_callback	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::register_wait_callback($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, mutex::scoped_lock& lock)
register_wait_callback	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void register_wait_callback($/;"	p	class:boost::asio::detail::win_object_handle_service	access:private	signature:( implementation_type& impl, mutex::scoped_lock& lock)
registered_descriptors_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  object_pool<descriptor_state> registered_descriptors_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
registered_descriptors_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  object_pool<descriptor_state> registered_descriptors_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
registered_descriptors_mutex_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  mutex registered_descriptors_mutex_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
registered_descriptors_mutex_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  mutex registered_descriptors_mutex_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
registered_events_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    boost::uint32_t registered_events_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
registration	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    registration()$/;"	f	class:boost::asio::detail::signal_set_service::registration	access:public	signature:()
registration	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  class registration$/;"	c	class:boost::asio::detail::signal_set_service	access:public
registration_count_	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  std::size_t registration_count_[max_signal_number];$/;"	m	struct:boost::asio::detail::signal_state	file:	access:public
registrations_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  registration* registrations_[max_signal_number];$/;"	m	class:boost::asio::detail::signal_set_service	access:private
rehash	/usr/include/boost/asio/detail/hash_map.hpp	/^  void rehash(std::size_t num_buckets)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(std::size_t num_buckets)
release	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^reactive_descriptor_service::release($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl)
release	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL native_handle_type release(implementation_type& impl);$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl)
release	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_type release()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
release	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  OVERLAPPED* release()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
release	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  native_handle_type release()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
release	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  native_handle_type release(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
release	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  OVERLAPPED* release()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
remote_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type remote_endpoint() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
remote_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type remote_endpoint(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
remote_endpoint	/usr/include/boost/asio/datagram_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
remote_endpoint	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
remote_endpoint	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:public	signature:() const
remote_endpoint	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
remote_endpoint	/usr/include/boost/asio/raw_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
remote_endpoint	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
remote_endpoint	/usr/include/boost/asio/stream_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
remote_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:private
remote_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service::implementation_type	access:public
remove	/usr/include/boost/asio/basic_signal_set.hpp	/^  boost::system::error_code remove(int signal_number,$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(int signal_number, boost::system::error_code& ec)
remove	/usr/include/boost/asio/basic_signal_set.hpp	/^  void remove(int signal_number)$/;"	f	class:boost::asio::basic_signal_set	access:public	signature:(int signal_number)
remove	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^boost::system::error_code signal_set_service::remove($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl, int signal_number, boost::system::error_code& ec)
remove	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL boost::system::error_code remove(implementation_type& impl,$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(implementation_type& impl, int signal_number, boost::system::error_code& ec)
remove	/usr/include/boost/asio/signal_set_service.hpp	/^  boost::system::error_code remove(implementation_type& impl,$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(implementation_type& impl, int signal_number, boost::system::error_code& ec)
remove_service	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::remove_service(signal_set_service* service)$/;"	f	class:boost::asio::detail::signal_set_service	signature:(signal_set_service* service)
remove_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL static void remove_service(signal_set_service* service);$/;"	p	class:boost::asio::detail::signal_set_service	access:private	signature:(signal_set_service* service)
remove_timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void remove_timer(per_timer_data& timer)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(per_timer_data& timer)
remove_timer_queue	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& queue);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& queue)
remove_timer_queue	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue);$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
remove_timer_queue	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^void dev_poll_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(timer_queue<Time_Traits>& queue)
remove_timer_queue	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^void epoll_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(timer_queue<Time_Traits>& queue)
remove_timer_queue	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^void kqueue_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timer_queue<Time_Traits>& queue)
remove_timer_queue	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^void select_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:boost::asio::detail::select_reactor	signature:(timer_queue<Time_Traits>& queue)
remove_timer_queue	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^void win_iocp_io_service::remove_timer_queue($/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:( timer_queue<Time_Traits>& queue)
remove_timer_queue	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& queue);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& queue)
remove_timer_queue	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& queue);$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& queue)
remove_timer_queue	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
reserve	/usr/include/boost/asio/basic_streambuf.hpp	/^  void reserve(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:protected	signature:(std::size_t n)
reset	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL bool reset();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
reset	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^bool eventfd_select_interrupter::reset()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
reset	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^bool pipe_select_interrupter::reset()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
reset	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^bool socket_select_interrupter::reset()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
reset	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::reset()$/;"	f	class:boost::asio::detail::task_io_service	signature:()
reset	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL bool reset();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
reset	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:()
reset	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  void reset(T* p = 0)$/;"	f	class:boost::asio::detail::scoped_ptr	access:public	signature:(T* p = 0)
reset	/usr/include/boost/asio/detail/socket_holder.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
reset	/usr/include/boost/asio/detail/socket_holder.hpp	/^  void reset(socket_type s)$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:(socket_type s)
reset	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL bool reset();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
reset	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void reset();$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:()
reset	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:()
reset	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
reset	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::win_iocp_operation	access:protected	signature:()
reset	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
reset	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  void reset(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
reset	/usr/include/boost/asio/impl/io_service.ipp	/^void io_service::reset()$/;"	f	class:boost::asio::io_service	signature:()
reset	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL void reset();$/;"	p	class:boost::asio::io_service	access:public	signature:()
reset	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  void reset() { data_start_ = buf_; data_end_ = buf_; }               $/;"	f	class:boost::asio::ssl::old::detail::net_buffer	access:public	signature:()
reset	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  void reset()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
reset	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  void reset(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:(boost::asio::io_service& io_service, BOOST_ASIO_MOVE_ARG(Handler) handler)
resize	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  void resize(size_type length)$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:(size_type length)
resize	/usr/include/boost/asio/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&, std::size_t s)
resize	/usr/include/boost/asio/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&, std::size_t s)
resize	/usr/include/boost/asio/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&, std::size_t s)
resize	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  void resize(std::size_t new_size)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(std::size_t new_size)
resize	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void resize(std::size_t new_size);$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:(std::size_t new_size)
resize	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^void endpoint::resize(std::size_t new_size)$/;"	f	class:boost::asio::ip::detail::endpoint	signature:(std::size_t new_size)
resize	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void resize(const Protocol& protocol, std::size_t s)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol, std::size_t s)
resize	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void resize(const Protocol& protocol, std::size_t s)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol, std::size_t s)
resize	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&, std::size_t s)
resize	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void resize(std::size_t new_size)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(std::size_t new_size)
resize	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  BOOST_ASIO_DECL void resize(std::size_t size);$/;"	p	class:boost::asio::local::detail::endpoint	access:public	signature:(std::size_t size)
resize	/usr/include/boost/asio/local/detail/impl/endpoint.ipp	/^void endpoint::resize(std::size_t new_size)$/;"	f	class:boost::asio::local::detail::endpoint	signature:(std::size_t new_size)
resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  iterator_type resolve(implementation_type&, const query_type& query,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type&, const query_type& query, boost::system::error_code& ec)
resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  iterator_type resolve(implementation_type&,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type&, const endpoint_type& endpoint, boost::system::error_code& ec)
resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const endpoint_type& e)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const endpoint_type& e)
resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const endpoint_type& e, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const endpoint_type& e, boost::system::error_code& ec)
resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const query& q)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const query& q)
resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const query& q, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const query& q, boost::system::error_code& ec)
resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  iterator_type resolve(implementation_type& impl, const query_type& query,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const query_type& query, boost::system::error_code& ec)
resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  iterator_type resolve(implementation_type& impl,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
resolve_and_connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void resolve_and_connect(const ResolverQuery& query)$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:(const ResolverQuery& query)
resolve_endpoint_op	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^  resolve_endpoint_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:boost::asio::detail::resolve_endpoint_op	access:public	signature:(socket_ops::weak_cancel_token_type cancel_token, const endpoint_type& endpoint, io_service_impl& ios, Handler& handler)
resolve_endpoint_op	/usr/include/boost/asio/detail/resolve_endpoint_op.hpp	/^class resolve_endpoint_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
resolve_op	/usr/include/boost/asio/detail/resolve_op.hpp	/^  resolve_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:boost::asio::detail::resolve_op	access:public	signature:(socket_ops::weak_cancel_token_type cancel_token, const query_type& query, io_service_impl& ios, Handler& handler)
resolve_op	/usr/include/boost/asio/detail/resolve_op.hpp	/^class resolve_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
resolver	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_resolver<icmp> resolver;$/;"	t	class:boost::asio::ip::icmp	access:public
resolver	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_resolver<tcp> resolver;$/;"	t	class:boost::asio::ip::tcp	access:public
resolver	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_resolver<udp> resolver;$/;"	t	class:boost::asio::ip::udp	access:public
resolver_query_base	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^class resolver_query_base$/;"	c	namespace:boost::asio::ip
resolver_service	/usr/include/boost/asio/detail/resolver_service.hpp	/^  resolver_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(boost::asio::io_service& io_service)
resolver_service	/usr/include/boost/asio/detail/resolver_service.hpp	/^class resolver_service : public resolver_service_base$/;"	c	namespace:boost::asio::detail	inherits:resolver_service_base
resolver_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^  explicit resolver_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(boost::asio::io_service& io_service)
resolver_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^class resolver_service$/;"	c	namespace:boost::asio::ip	inherits:boost::asio::io_service::service
resolver_service_base	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^resolver_service_base::resolver_service_base($/;"	f	class:boost::asio::detail::resolver_service_base	signature:( boost::asio::io_service& io_service)
resolver_service_base	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL resolver_service_base(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:(boost::asio::io_service& io_service)
resolver_service_base	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^class resolver_service_base$/;"	c	namespace:boost::asio::detail
restart_accept_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::restart_accept_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( socket_type s, socket_holder& new_socket, int family, int type, int protocol, void* output_buffer, DWORD address_length, operation* op)
restart_accept_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void restart_accept_op(socket_type s,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(socket_type s, socket_holder& new_socket, int family, int type, int protocol, void* output_buffer, DWORD address_length, operation* op)
result_	/usr/include/boost/asio/detail/winsock_init.hpp	/^    long result_;$/;"	m	struct:boost::asio::detail::winsock_init_base::data	access:public
result_type	/usr/include/boost/asio/completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:boost::asio::detail::transfer_all_t	access:public
result_type	/usr/include/boost/asio/completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:boost::asio::detail::transfer_at_least_t	access:public
result_type	/usr/include/boost/asio/completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:boost::asio::detail::transfer_exactly_t	access:public
result_type	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  typedef void result_type;$/;"	t	class:boost::asio::detail::wrapped_handler	access:public
result_type	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^  typedef bool result_type;$/;"	t	class:boost::asio::ssl::rfc2818_verification	access:public
reusable_memory_	/usr/include/boost/asio/detail/thread_info_base.hpp	/^  void* reusable_memory_;$/;"	m	class:boost::asio::detail::thread_info_base	access:private
reuse_address	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_REUSEADDR> reuse_address;$/;"	t	class:boost::asio::socket_base	access:public
reuse_address	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined reuse_address;$/;"	t	class:boost::asio::socket_base	access:public
rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  explicit rewrapped_handler(Handler& handler, const Context& context)$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:(Handler& handler, const Context& context)
rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  explicit rewrapped_handler(const Handler& handler, const Context& context)$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:(const Handler& handler, const Context& context)
rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  rewrapped_handler(const rewrapped_handler& other)$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:(const rewrapped_handler& other)
rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  rewrapped_handler(rewrapped_handler&& other)$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:(rewrapped_handler&& other)
rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^class rewrapped_handler$/;"	c	namespace:boost::asio::detail
rfc2818_verification	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^  explicit rfc2818_verification(const std::string& host)$/;"	f	class:boost::asio::ssl::rfc2818_verification	access:public	signature:(const std::string& host)
rfc2818_verification	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^class rfc2818_verification$/;"	c	namespace:boost::asio::ssl
run	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void run(bool block, op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(bool block, op_queue<operation>& ops)
run	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void run(bool block, op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(bool block, op_queue<operation>& ops)
run	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::run(bool block, op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(bool block, op_queue<operation>& ops)
run	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::run(bool block, op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(bool block, op_queue<operation>& ops)
run	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::run(bool block, op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(bool block, op_queue<operation>& ops)
run	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::run(bool block, op_queue<operation>& ops)$/;"	f	class:boost::asio::detail::select_reactor	signature:(bool block, op_queue<operation>& ops)
run	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^std::size_t task_io_service::run(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	signature:(boost::system::error_code& ec)
run	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^size_t win_iocp_io_service::run(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(boost::system::error_code& ec)
run	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void run(bool block, op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(bool block, op_queue<operation>& ops)
run	/usr/include/boost/asio/detail/posix_thread.hpp	/^    virtual void run() = 0;$/;"	p	class:boost::asio::detail::posix_thread::func_base	access:public	signature:()
run	/usr/include/boost/asio/detail/posix_thread.hpp	/^    virtual void run()$/;"	f	class:boost::asio::detail::posix_thread::func	access:public	signature:()
run	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void run(bool block, op_queue<operation>& ops);$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(bool block, op_queue<operation>& ops)
run	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL std::size_t run(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
run	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL size_t run(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
run	/usr/include/boost/asio/detail/win_thread.hpp	/^    virtual void run() = 0;$/;"	p	class:boost::asio::detail::win_thread::func_base	access:public	signature:()
run	/usr/include/boost/asio/detail/win_thread.hpp	/^    virtual void run()$/;"	f	class:boost::asio::detail::win_thread::func	access:public	signature:()
run	/usr/include/boost/asio/detail/wince_thread.hpp	/^    virtual void run() = 0;$/;"	p	class:boost::asio::detail::wince_thread::func_base	access:public	signature:()
run	/usr/include/boost/asio/detail/wince_thread.hpp	/^    virtual void run()$/;"	f	class:boost::asio::detail::wince_thread::func	access:public	signature:()
run	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::run()$/;"	f	class:boost::asio::io_service	signature:()
run	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::run(boost::system::error_code& ec)$/;"	f	class:boost::asio::io_service	signature:(boost::system::error_code& ec)
run	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t run();$/;"	p	class:boost::asio::io_service	access:public	signature:()
run	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t run(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
run_one	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^std::size_t task_io_service::run_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	signature:(boost::system::error_code& ec)
run_one	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^size_t win_iocp_io_service::run_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(boost::system::error_code& ec)
run_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL std::size_t run_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
run_one	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL size_t run_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
run_one	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::run_one()$/;"	f	class:boost::asio::io_service	signature:()
run_one	/usr/include/boost/asio/impl/io_service.ipp	/^std::size_t io_service::run_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::io_service	signature:(boost::system::error_code& ec)
run_one	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t run_one();$/;"	p	class:boost::asio::io_service	access:public	signature:()
run_one	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL std::size_t run_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
run_thread	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::run_thread()$/;"	f	class:boost::asio::detail::select_reactor	signature:()
run_thread	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void run_thread();$/;"	p	class:boost::asio::detail::select_reactor	access:private	signature:()
s6_addr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	70;"	d
safe_cancellation_thread_id_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    DWORD safe_cancellation_thread_id_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
safe_cancellation_thread_id_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    DWORD safe_cancellation_thread_id_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
salt_	/usr/include/boost/asio/detail/strand_service.hpp	/^  std::size_t salt_;$/;"	m	class:boost::asio::detail::strand_service	access:private
sbarrier	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  static void sbarrier()$/;"	f	class:boost::asio::detail::gcc_x86_fenced_block	access:private	signature:()
schedule_timer	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
schedule_timer	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
schedule_timer	/usr/include/boost/asio/detail/impl/dev_poll_reactor.hpp	/^void dev_poll_reactor::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
schedule_timer	/usr/include/boost/asio/detail/impl/epoll_reactor.hpp	/^void epoll_reactor::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
schedule_timer	/usr/include/boost/asio/detail/impl/kqueue_reactor.hpp	/^void kqueue_reactor::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
schedule_timer	/usr/include/boost/asio/detail/impl/select_reactor.hpp	/^void select_reactor::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::select_reactor	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
schedule_timer	/usr/include/boost/asio/detail/impl/win_iocp_io_service.hpp	/^void win_iocp_io_service::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
schedule_timer	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
schedule_timer	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
schedule_timer	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& queue,$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& queue, const typename Time_Traits::time_type& time, typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
scheduler_	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  timer_scheduler& scheduler_;$/;"	m	class:boost::asio::detail::deadline_timer_service	access:private
scope_id	/usr/include/boost/asio/ip/address_v6.hpp	/^  unsigned long scope_id() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
scope_id	/usr/include/boost/asio/ip/address_v6.hpp	/^  void scope_id(unsigned long id)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(unsigned long id)
scope_id_	/usr/include/boost/asio/ip/address_v6.hpp	/^  unsigned long scope_id_;$/;"	m	class:boost::asio::ip::address_v6	access:private
scoped_lock	/usr/include/boost/asio/detail/null_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<null_mutex> scoped_lock;$/;"	t	class:boost::asio::detail::null_mutex	access:public
scoped_lock	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<null_static_mutex> scoped_lock;$/;"	t	struct:boost::asio::detail::null_static_mutex	access:public
scoped_lock	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<posix_mutex> scoped_lock;$/;"	t	class:boost::asio::detail::posix_mutex	access:public
scoped_lock	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<posix_static_mutex> scoped_lock;$/;"	t	struct:boost::asio::detail::posix_static_mutex	access:public
scoped_lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  scoped_lock(Mutex& m)$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:(Mutex& m)
scoped_lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^class scoped_lock$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
scoped_lock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<win_mutex> scoped_lock;$/;"	t	class:boost::asio::detail::win_mutex	access:public
scoped_lock	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<win_static_mutex> scoped_lock;$/;"	t	struct:boost::asio::detail::win_static_mutex	access:public
scoped_ptr	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  explicit scoped_ptr(T* p = 0)$/;"	f	class:boost::asio::detail::scoped_ptr	access:public	signature:(T* p = 0)
scoped_ptr	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  scoped_ptr(const scoped_ptr&);$/;"	p	class:boost::asio::detail::scoped_ptr	access:private	signature:(const scoped_ptr&)
scoped_ptr	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^class scoped_ptr$/;"	c	namespace:boost::asio::detail
search_position_	/usr/include/boost/asio/impl/read_until.hpp	/^    std::size_t search_position_;$/;"	m	class:boost::asio::detail::read_until_delim_op	access:public
search_position_	/usr/include/boost/asio/impl/read_until.hpp	/^    std::size_t search_position_;$/;"	m	class:boost::asio::detail::read_until_delim_string_op	access:public
search_position_	/usr/include/boost/asio/impl/read_until.hpp	/^    std::size_t search_position_;$/;"	m	class:boost::asio::detail::read_until_expr_op	access:public
search_position_	/usr/include/boost/asio/impl/read_until.hpp	/^    std::size_t search_position_;$/;"	m	class:boost::asio::detail::read_until_match_op	access:public
select	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int select(int nfds, fd_set* readfds, fd_set* writefds,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, timeval* timeout, boost::system::error_code& ec)
select	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int select(int nfds, fd_set* readfds, fd_set* writefds,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, timeval* timeout, boost::system::error_code& ec)
select_interrupter	/usr/include/boost/asio/detail/select_interrupter.hpp	/^typedef socket_select_interrupter select_interrupter;$/;"	t	namespace:boost::asio::detail
select_reactor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^select_reactor::select_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::select_reactor	signature:(boost::asio::io_service& io_service)
select_reactor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL select_reactor(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(boost::asio::io_service& io_service)
select_reactor	/usr/include/boost/asio/detail/select_reactor.hpp	/^class select_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers)
send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers)
send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
send	/usr/include/boost/asio/basic_seq_packet_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_seq_packet_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers)
send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^signed_size_type send(socket_type s, const buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  size_t send(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  size_t send(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL signed_size_type send(socket_type s, const buf* bufs,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  size_t send(base_implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const null_buffers&, socket_base::message_flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  size_t send(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/stream_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send_break	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code send_break(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::system::error_code& ec)
send_break	/usr/include/boost/asio/basic_serial_port.hpp	/^  void send_break()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
send_break	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code send_break(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
send_break	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code send_break(implementation_type&,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type&, boost::system::error_code& ec)
send_break	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code send_break(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
send_buf_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  net_buffer send_buf_; \/\/ buffers for network IO$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
send_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_SNDBUF> send_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
send_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined send_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
send_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_SNDLOWAT> send_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
send_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined send_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination)
send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags)
send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination)
send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags)
send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
send_to	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t send_to(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, const endpoint_type&, socket_base::message_flags, boost::system::error_code& ec)
send_to	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
send_to	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const null_buffers&,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const null_buffers&, const endpoint_type&, socket_base::message_flags, boost::system::error_code& ec)
send_to	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t send_to(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
sender_endpoint_	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  Endpoint& sender_endpoint_;$/;"	m	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:private
sendto	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^signed_size_type sendto(socket_type s, const buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
sendto	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL signed_size_type sendto(socket_type s, const buf* bufs,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
seq_packet_socket_service	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  explicit seq_packet_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(boost::asio::io_service& io_service)
seq_packet_socket_service	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^class seq_packet_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
serial_port	/usr/include/boost/asio/serial_port.hpp	/^typedef basic_serial_port<> serial_port;$/;"	t	namespace:boost::asio
serial_port_base	/usr/include/boost/asio/serial_port_base.hpp	/^class serial_port_base$/;"	c	namespace:boost::asio
serial_port_service	/usr/include/boost/asio/serial_port_service.hpp	/^  explicit serial_port_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(boost::asio::io_service& io_service)
serial_port_service	/usr/include/boost/asio/serial_port_service.hpp	/^class serial_port_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
server	/usr/include/boost/asio/ssl/stream_base.hpp	/^    server$/;"	e	enum:boost::asio::ssl::stream_base::handshake_type
service	/usr/include/boost/asio/basic_io_object.hpp	/^  service_type& service;$/;"	m	class:boost::asio::basic_io_object	access:protected
service	/usr/include/boost/asio/impl/io_service.ipp	/^io_service::service::service(boost::asio::io_service& owner)$/;"	f	class:boost::asio::io_service::service	signature:(boost::asio::io_service& owner)
service	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL service(boost::asio::io_service& owner);$/;"	p	class:boost::asio::io_service::service	access:protected	signature:(boost::asio::io_service& owner)
service	/usr/include/boost/asio/io_service.hpp	/^class io_service::service$/;"	c	class:boost::asio::io_service	inherits:noncopyable
service_	/usr/include/boost/asio/basic_io_object.hpp	/^  IoObjectService* service_;$/;"	m	class:boost::asio::basic_io_object	access:private
service_	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  service_type& service_;$/;"	m	class:boost::asio::ssl::old::basic_context	access:private
service_	/usr/include/boost/asio/ssl/old/stream.hpp	/^  service_type& service_;$/;"	m	class:boost::asio::ssl::old::stream	access:private
service_	/usr/include/boost/asio/strand.hpp	/^  boost::asio::detail::strand_service& service_;$/;"	m	class:boost::asio::io_service::strand	access:private
service_already_exists	/usr/include/boost/asio/impl/io_service.ipp	/^service_already_exists::service_already_exists()$/;"	f	class:boost::asio::service_already_exists	signature:()
service_already_exists	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL service_already_exists();$/;"	p	class:boost::asio::service_already_exists	access:public	signature:()
service_already_exists	/usr/include/boost/asio/io_service.hpp	/^class service_already_exists$/;"	c	namespace:boost::asio	inherits:std::logic_error
service_base	/usr/include/boost/asio/io_service.hpp	/^  service_base(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::service_base	access:public	signature:(boost::asio::io_service& io_service)
service_base	/usr/include/boost/asio/io_service.hpp	/^class service_base$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::io_service::service
service_has_move	/usr/include/boost/asio/basic_io_object.hpp	/^  class service_has_move$/;"	c	namespace:boost::asio::detail
service_id	/usr/include/boost/asio/io_service.hpp	/^class service_id$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::io_service::id
service_impl_	/usr/include/boost/asio/datagram_socket_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::datagram_socket_service	access:private
service_impl_	/usr/include/boost/asio/deadline_timer_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::deadline_timer_service	access:private
service_impl_	/usr/include/boost/asio/ip/resolver_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::ip::resolver_service	access:private
service_impl_	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::posix::stream_descriptor_service	access:private
service_impl_	/usr/include/boost/asio/raw_socket_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::raw_socket_service	access:private
service_impl_	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::seq_packet_socket_service	access:private
service_impl_	/usr/include/boost/asio/serial_port_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::serial_port_service	access:private
service_impl_	/usr/include/boost/asio/signal_set_service.hpp	/^  detail::signal_set_service service_impl_;$/;"	m	class:boost::asio::signal_set_service	access:private
service_impl_	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::socket_acceptor_service	access:private
service_impl_	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::ssl::old::context_service	access:private
service_impl_	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::ssl::old::stream_service	access:private
service_impl_	/usr/include/boost/asio/stream_socket_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::stream_socket_service	access:private
service_impl_	/usr/include/boost/asio/waitable_timer_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::waitable_timer_service	access:private
service_impl_	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::windows::object_handle_service	access:private
service_impl_	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::windows::random_access_handle_service	access:private
service_impl_	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:boost::asio::windows::stream_handle_service	access:private
service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
service_impl_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef detail::deadline_timer_service<traits_type> service_impl_type;$/;"	t	class:boost::asio::deadline_timer_service	access:private
service_impl_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^    service_impl_type;$/;"	t	class:boost::asio::ip::resolver_service	access:private
service_impl_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef detail::reactive_descriptor_service service_impl_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:private
service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
service_impl_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:private
service_impl_type	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::seq_packet_socket_service	access:private
service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef detail::reactive_serial_port_service service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef detail::win_iocp_serial_port_service service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
service_impl_type	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  typedef old::detail::openssl_context_service service_impl_type;$/;"	t	class:boost::asio::ssl::old::context_service	access:private
service_impl_type	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  typedef old::detail::openssl_stream_service service_impl_type;$/;"	t	class:boost::asio::ssl::old::stream_service	access:private
service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
service_impl_type	/usr/include/boost/asio/waitable_timer_service.hpp	/^    detail::chrono_time_traits<Clock, WaitTraits> > service_impl_type;$/;"	t	class:boost::asio::waitable_timer_service	access:private
service_impl_type	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  typedef detail::win_object_handle_service service_impl_type;$/;"	t	class:boost::asio::windows::object_handle_service	access:private
service_impl_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef detail::win_iocp_handle_service service_impl_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:private
service_impl_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef detail::win_iocp_handle_service service_impl_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:private
service_list_	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  class signal_set_service* service_list_;$/;"	m	struct:boost::asio::detail::signal_state	typeref:class:boost::asio::detail::signal_state::signal_set_service	file:	access:public
service_name	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string service_name() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
service_name	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string service_name() const$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:() const
service_name_	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string service_name_;$/;"	m	class:boost::asio::ip::basic_resolver_entry	access:private
service_name_	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string service_name_;$/;"	m	class:boost::asio::ip::basic_resolver_query	access:private
service_not_found	/usr/include/boost/asio/error.hpp	/^  service_not_found = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::addrinfo_errors
service_registry	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^service_registry::service_registry($/;"	f	class:boost::asio::detail::service_registry	signature:( boost::asio::io_service& o, Service*, Arg arg)
service_registry	/usr/include/boost/asio/detail/service_registry.hpp	/^  service_registry(boost::asio::io_service& o,$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:(boost::asio::io_service& o, Service* initial_service, Arg arg)
service_registry	/usr/include/boost/asio/detail/service_registry.hpp	/^class service_registry$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
service_registry_	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::detail::service_registry* service_registry_;$/;"	m	class:boost::asio::io_service	access:private
service_type	/usr/include/boost/asio/basic_io_object.hpp	/^    typedef IoObjectService service_type;$/;"	t	class:boost::asio::detail::service_has_move	access:private
service_type	/usr/include/boost/asio/basic_io_object.hpp	/^  typedef IoObjectService service_type;$/;"	t	class:boost::asio::basic_io_object	access:public
service_type	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  typedef Service service_type;$/;"	t	class:boost::asio::ssl::old::basic_context	access:public
service_type	/usr/include/boost/asio/ssl/old/stream.hpp	/^  typedef Service service_type;$/;"	t	class:boost::asio::ssl::old::stream	access:public
session_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  SSL*    session_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
set	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^  bool set(int descriptor)$/;"	f	class:boost::asio::detail::dev_poll_reactor::fork_helper	access:public	signature:(int descriptor)
set	/usr/include/boost/asio/detail/io_control.hpp	/^  void set(bool value)$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:(bool value)
set	/usr/include/boost/asio/detail/io_control.hpp	/^  void set(std::size_t value)$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:(std::size_t value)
set	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  bool set(socket_type descriptor)$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:(socket_type descriptor)
set	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  bool set(socket_type descriptor)$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:(socket_type descriptor)
set_default_verify_paths	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::set_default_verify_paths($/;"	f	class:boost::asio::ssl::context	signature:( boost::system::error_code& ec)
set_default_verify_paths	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::set_default_verify_paths()$/;"	f	class:boost::asio::ssl::context	signature:()
set_func	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    void set_func(func_t func) { func_ = func; }$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:public	signature:(func_t func)
set_internal_non_blocking	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL bool set_internal_non_blocking(int d,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, bool value, boost::system::error_code& ec)
set_internal_non_blocking	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^bool set_internal_non_blocking(int d, state_type& state,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, bool value, boost::system::error_code& ec)
set_internal_non_blocking	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool set_internal_non_blocking(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, bool value, boost::system::error_code& ec)
set_internal_non_blocking	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool set_internal_non_blocking(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, bool value, boost::system::error_code& ec)
set_operation	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    void set_operation(openssl_operation<Stream>* op) { op_ = op; }$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:public	signature:(openssl_operation<Stream>* op)
set_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code set_option(const SettableSerialPortOption& option,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const SettableSerialPortOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  void set_option(const SettableSerialPortOption& option)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const SettableSerialPortOption& option)
set_option	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code set_option(const SettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const SettableSocketOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/basic_socket.hpp	/^  void set_option(const SettableSocketOption& option)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const SettableSocketOption& option)
set_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code set_option(const SettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const SettableSocketOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void set_option(const SettableSocketOption& option)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const SettableSocketOption& option)
set_option	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const SettableSerialPortOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service	access:public	signature:(implementation_type& impl, const Option& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const SettableSerialPortOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(implementation_type& impl, const Option& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const SettableSerialPortOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
set_options	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::set_options($/;"	f	class:boost::asio::ssl::context	signature:( context::options o, boost::system::error_code& ec)
set_options	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::set_options(context::options o)$/;"	f	class:boost::asio::ssl::context	signature:(context::options o)
set_options	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code set_options(options o,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(options o, boost::system::error_code& ec)
set_options	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void set_options(options o)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(options o)
set_options	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code set_options(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, context_base::options o, boost::system::error_code& ec)
set_options	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code set_options(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, context_base::options o, boost::system::error_code& ec)
set_password_callback	/usr/include/boost/asio/ssl/impl/context.hpp	/^boost::system::error_code context::set_password_callback($/;"	f	class:boost::asio::ssl::context	signature:( PasswordCallback callback, boost::system::error_code& ec)
set_password_callback	/usr/include/boost/asio/ssl/impl/context.hpp	/^void context::set_password_callback(PasswordCallback callback)$/;"	f	class:boost::asio::ssl::context	signature:(PasswordCallback callback)
set_password_callback	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code set_password_callback(PasswordCallback callback,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(PasswordCallback callback, boost::system::error_code& ec)
set_password_callback	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void set_password_callback(PasswordCallback callback)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(PasswordCallback callback)
set_password_callback	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code set_password_callback(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, PasswordCallback callback, boost::system::error_code& ec)
set_password_callback	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code set_password_callback(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, Password_Callback callback, boost::system::error_code& ec)
set_ready_events	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    void set_ready_events(uint32_t events) { task_result_ = events; }$/;"	f	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private	signature:(uint32_t events)
set_terminate_threads	/usr/include/boost/asio/detail/win_thread.hpp	/^  static void set_terminate_threads(bool b)$/;"	f	class:boost::asio::detail::win_thread_base	access:public	signature:(bool b)
set_user_non_blocking	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL bool set_user_non_blocking(int d,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, bool value, boost::system::error_code& ec)
set_user_non_blocking	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^bool set_user_non_blocking(int d, state_type& state,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type& state, bool value, boost::system::error_code& ec)
set_user_non_blocking	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool set_user_non_blocking(socket_type s,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, bool value, boost::system::error_code& ec)
set_user_non_blocking	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool set_user_non_blocking(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, bool value, boost::system::error_code& ec)
set_verify_callback	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL boost::system::error_code set_verify_callback($/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:( verify_callback_base* callback, boost::system::error_code& ec)
set_verify_callback	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^boost::system::error_code engine::set_verify_callback($/;"	f	class:boost::asio::ssl::detail::engine	signature:( verify_callback_base* callback, boost::system::error_code& ec)
set_verify_callback	/usr/include/boost/asio/ssl/impl/context.hpp	/^boost::system::error_code context::set_verify_callback($/;"	f	class:boost::asio::ssl::context	signature:( VerifyCallback callback, boost::system::error_code& ec)
set_verify_callback	/usr/include/boost/asio/ssl/impl/context.hpp	/^void context::set_verify_callback(VerifyCallback callback)$/;"	f	class:boost::asio::ssl::context	signature:(VerifyCallback callback)
set_verify_mode	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL boost::system::error_code set_verify_mode($/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:( verify_mode v, boost::system::error_code& ec)
set_verify_mode	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^boost::system::error_code engine::set_verify_mode($/;"	f	class:boost::asio::ssl::detail::engine	signature:( verify_mode v, boost::system::error_code& ec)
set_verify_mode	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::set_verify_mode($/;"	f	class:boost::asio::ssl::context	signature:( verify_mode v, boost::system::error_code& ec)
set_verify_mode	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::set_verify_mode(verify_mode v)$/;"	f	class:boost::asio::ssl::context	signature:(verify_mode v)
set_verify_mode	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code set_verify_mode(verify_mode v,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(verify_mode v, boost::system::error_code& ec)
set_verify_mode	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void set_verify_mode(verify_mode v)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(verify_mode v)
set_verify_mode	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code set_verify_mode(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, context_base::verify_mode v, boost::system::error_code& ec)
set_verify_mode	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code set_verify_mode(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, context_base::verify_mode v, boost::system::error_code& ec)
setbuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  std::streambuf* setbuf(char_type* s, std::streamsize n)$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:(char_type* s, std::streamsize n)
setsockopt	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int setsockopt(socket_type s, state_type& state, int level, int optname,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, int level, int optname, const void* optval, std::size_t optlen, boost::system::error_code& ec)
setsockopt	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int setsockopt(socket_type s, state_type& state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type& state, int level, int optname, const void* optval, std::size_t optlen, boost::system::error_code& ec)
shared_cancel_token_type	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef shared_ptr<void> shared_cancel_token_type;$/;"	t	namespace:boost::asio::detail::socket_ops
shut_down	/usr/include/boost/asio/error.hpp	/^  shut_down = BOOST_ASIO_SOCKET_ERROR(ESHUTDOWN),$/;"	e	enum:boost::asio::error::basic_errors
shutdown	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code shutdown(shutdown_type what,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(shutdown_type what, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/basic_socket.hpp	/^  void shutdown(shutdown_type what)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(shutdown_type what)
shutdown	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int shutdown(socket_type s, int what, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int what, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  boost::system::error_code shutdown(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:(base_implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int shutdown(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int what, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  boost::system::error_code shutdown(base_implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:(base_implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::seq_packet_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL want shutdown(boost::system::error_code& ec);$/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:(boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::want engine::shutdown(boost::system::error_code& ec)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  boost::system::error_code shutdown(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/ssl/old/stream.hpp	/^  boost::system::error_code shutdown(boost::system::error_code& ec)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/ssl/old/stream.hpp	/^  void shutdown()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
shutdown	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  boost::system::error_code shutdown(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
shutdown_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
shutdown_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    bool shutdown_;$/;"	m	class:boost::asio::detail::epoll_reactor::descriptor_state	access:private
shutdown_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
shutdown_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    bool shutdown_;$/;"	m	struct:boost::asio::detail::kqueue_reactor::descriptor_state	access:public
shutdown_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
shutdown_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
shutdown_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
shutdown_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long shutdown_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
shutdown_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::win_object_handle_service	access:private
shutdown_both	/usr/include/boost/asio/detail/socket_types.hpp	/^const int shutdown_both = SD_BOTH;$/;"	m	namespace:boost::asio::detail
shutdown_both	/usr/include/boost/asio/socket_base.hpp	/^    shutdown_both = implementation_defined$/;"	e	enum:boost::asio::socket_base::shutdown_type
shutdown_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    shutdown_handler(Handler handler, boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::shutdown_handler	access:public	signature:(Handler handler, boost::asio::io_service& io_service)
shutdown_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  class shutdown_handler$/;"	c	class:boost::asio::ssl::old::detail::openssl_stream_service	inherits:base_handler	access:private
shutdown_op	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^class shutdown_op$/;"	c	namespace:boost::asio::ssl::detail
shutdown_receive	/usr/include/boost/asio/detail/socket_types.hpp	/^const int shutdown_receive = SD_RECEIVE;$/;"	m	namespace:boost::asio::detail
shutdown_receive	/usr/include/boost/asio/socket_base.hpp	/^    shutdown_receive = implementation_defined,$/;"	e	enum:boost::asio::socket_base::shutdown_type
shutdown_send	/usr/include/boost/asio/detail/socket_types.hpp	/^const int shutdown_send = SD_SEND;$/;"	m	namespace:boost::asio::detail
shutdown_send	/usr/include/boost/asio/socket_base.hpp	/^    shutdown_send = implementation_defined,$/;"	e	enum:boost::asio::socket_base::shutdown_type
shutdown_service	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::datagram_socket_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::deadline_timer_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::shutdown_service()$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::shutdown_service()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::shutdown_service()$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^void reactive_descriptor_service::shutdown_service()$/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/reactive_serial_port_service.ipp	/^void reactive_serial_port_service::shutdown_service()$/;"	f	class:boost::asio::detail::reactive_serial_port_service	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::shutdown_service()$/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::shutdown_service()$/;"	f	class:boost::asio::detail::resolver_service_base	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::shutdown_service()$/;"	f	class:boost::asio::detail::select_reactor	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::shutdown_service()$/;"	f	class:boost::asio::detail::signal_set_service	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^void strand_service::shutdown_service()$/;"	f	class:boost::asio::detail::strand_service	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::shutdown_service()$/;"	f	class:boost::asio::detail::task_io_service	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^void win_iocp_serial_port_service::shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:()
shutdown_service	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::shutdown_service()$/;"	f	class:boost::asio::detail::win_object_handle_service	signature:()
shutdown_service	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/strand_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::strand_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void shutdown_service();$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/io_service.hpp	/^  virtual void shutdown_service() = 0;$/;"	p	class:boost::asio::io_service::service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ip::resolver_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/raw_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::raw_socket_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/seq_packet_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::seq_packet_socket_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/serial_port_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::serial_port_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/signal_set_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::signal_set_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::socket_acceptor_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::old::context_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::old::stream_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/stream_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::stream_socket_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/waitable_timer_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::waitable_timer_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::windows::object_handle_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::windows::random_access_handle_service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::windows::stream_handle_service	access:private	signature:()
shutdown_type	/usr/include/boost/asio/socket_base.hpp	/^  enum shutdown_type$/;"	g	class:boost::asio::socket_base	access:public
signal	/usr/include/boost/asio/detail/null_event.hpp	/^  void signal(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
signal	/usr/include/boost/asio/detail/posix_event.hpp	/^  void signal(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
signal	/usr/include/boost/asio/detail/win_event.hpp	/^  void signal(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
signal_and_unlock	/usr/include/boost/asio/detail/null_event.hpp	/^  void signal_and_unlock(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
signal_and_unlock	/usr/include/boost/asio/detail/posix_event.hpp	/^  void signal_and_unlock(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
signal_and_unlock	/usr/include/boost/asio/detail/win_event.hpp	/^  void signal_and_unlock(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
signal_blocker	/usr/include/boost/asio/detail/signal_blocker.hpp	/^typedef null_signal_blocker signal_blocker;$/;"	t	namespace:boost::asio::detail
signal_handler	/usr/include/boost/asio/detail/signal_handler.hpp	/^  signal_handler(Handler& h)$/;"	f	class:boost::asio::detail::signal_handler	access:public	signature:(Handler& h)
signal_handler	/usr/include/boost/asio/detail/signal_handler.hpp	/^class signal_handler : public signal_op$/;"	c	namespace:boost::asio::detail	inherits:signal_op
signal_init	/usr/include/boost/asio/detail/signal_init.hpp	/^  signal_init()$/;"	f	class:boost::asio::detail::signal_init	access:public	signature:()
signal_init	/usr/include/boost/asio/detail/signal_init.hpp	/^class signal_init$/;"	c	namespace:boost::asio::detail
signal_number	/usr/include/boost/asio/placeholders.hpp	/^unspecified signal_number;$/;"	m	namespace:boost::asio::placeholders
signal_number_	/usr/include/boost/asio/detail/signal_op.hpp	/^  int signal_number_;$/;"	m	class:boost::asio::detail::signal_op	access:public
signal_number_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    int signal_number_;$/;"	m	class:boost::asio::detail::signal_set_service::registration	access:private
signal_op	/usr/include/boost/asio/detail/signal_op.hpp	/^  signal_op(func_type func)$/;"	f	class:boost::asio::detail::signal_op	access:protected	signature:(func_type func)
signal_op	/usr/include/boost/asio/detail/signal_op.hpp	/^class signal_op$/;"	c	namespace:boost::asio::detail	inherits:operation
signal_set	/usr/include/boost/asio/signal_set.hpp	/^typedef basic_signal_set<> signal_set;$/;"	t	namespace:boost::asio
signal_set_service	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^signal_set_service::signal_set_service($/;"	f	class:boost::asio::detail::signal_set_service	signature:( boost::asio::io_service& io_service)
signal_set_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL signal_set_service(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:(boost::asio::io_service& io_service)
signal_set_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^class signal_set_service$/;"	c	namespace:boost::asio::detail
signal_set_service	/usr/include/boost/asio/signal_set_service.hpp	/^  explicit signal_set_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::signal_set_service	access:public	signature:(boost::asio::io_service& io_service)
signal_set_service	/usr/include/boost/asio/signal_set_service.hpp	/^class signal_set_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
signal_state	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^struct signal_state$/;"	s	namespace:boost::asio::detail	file:
signalled_	/usr/include/boost/asio/detail/posix_event.hpp	/^  bool signalled_;$/;"	m	class:boost::asio::detail::posix_event	access:private
signals_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    registration* signals_;$/;"	m	class:boost::asio::detail::signal_set_service::implementation_type	access:private
signed_size_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef int signed_size_type;$/;"	t	namespace:boost::asio::detail
sin6_addr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  in6_addr_emulation sin6_addr;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
sin6_family	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  short sin6_family;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
sin6_flowinfo	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  u_long sin6_flowinfo;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
sin6_port	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  u_short sin6_port;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
sin6_scope_id	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  u_long sin6_scope_id;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
single_dh_use	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const long single_dh_use = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
size	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:() const
size	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type size() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
size	/usr/include/boost/asio/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
size	/usr/include/boost/asio/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
size	/usr/include/boost/asio/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
size	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
size	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::ip::detail::endpoint	access:public	signature:() const
size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&) const
size	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
size	/usr/include/boost/asio/local/detail/endpoint.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::local::detail::endpoint	access:public	signature:() const
size_	/usr/include/boost/asio/buffer.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::const_buffer	access:private
size_	/usr/include/boost/asio/buffer.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::mutable_buffer	access:private
size_	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::detail::transfer_exactly_t	access:private
size_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::detail::hash_map	access:private
size_type	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  typedef std::size_t size_type;$/;"	t	class:boost::asio::detail::buffered_stream_storage	access:public
sockaddr_in4_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_in sockaddr_in4_type;$/;"	t	namespace:boost::asio::detail
sockaddr_in6_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct sockaddr_in6_emulation$/;"	s	namespace:boost::asio::detail
sockaddr_in6_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_in6 sockaddr_in6_type;$/;"	t	namespace:boost::asio::detail
sockaddr_in6_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_in6_emulation sockaddr_in6_type;$/;"	t	namespace:boost::asio::detail
sockaddr_storage_alignsize	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_alignsize = (sizeof(__int64)), \/\/ Desired alignment.$/;"	e	enum:boost::asio::detail::__anon12
sockaddr_storage_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct sockaddr_storage_emulation$/;"	s	namespace:boost::asio::detail
sockaddr_storage_maxsize	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_maxsize = 128, \/\/ Maximum size.$/;"	e	enum:boost::asio::detail::__anon12
sockaddr_storage_pad1size	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_pad1size = (sockaddr_storage_alignsize - sizeof(short)),$/;"	e	enum:boost::asio::detail::__anon12
sockaddr_storage_pad2size	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_pad2size = (sockaddr_storage_maxsize -$/;"	e	enum:boost::asio::detail::__anon12
sockaddr_storage_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_storage sockaddr_storage_type;$/;"	t	namespace:boost::asio::detail
sockaddr_storage_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_storage_emulation sockaddr_storage_type;$/;"	t	namespace:boost::asio::detail
sockatmark	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^bool sockatmark(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
sockatmark	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL bool sockatmark(socket_type s, boost::system::error_code& ec);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
socket	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^socket_type socket(int af, int type, int protocol,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, int type, int protocol, boost::system::error_code& ec)
socket	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL socket_type socket(int af, int type, int protocol,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(int af, int type, int protocol, boost::system::error_code& ec)
socket	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_raw_socket<icmp> socket;$/;"	t	class:boost::asio::ip::icmp	access:public
socket	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_stream_socket<tcp> socket;$/;"	t	class:boost::asio::ip::tcp	access:public
socket	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_datagram_socket<udp> socket;$/;"	t	class:boost::asio::ip::udp	access:public
socket	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  typedef basic_datagram_socket<datagram_protocol> socket;$/;"	t	class:boost::asio::local::datagram_protocol	access:public
socket	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_stream_socket<stream_protocol> socket;$/;"	t	class:boost::asio::local::stream_protocol	access:public
socket_	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_accept_op_base	access:private
socket_	/usr/include/boost/asio/detail/reactive_socket_connect_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_connect_op_base	access:private
socket_	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_recv_op_base	access:private
socket_	/usr/include/boost/asio/detail/reactive_socket_recvfrom_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_recvfrom_op_base	access:private
socket_	/usr/include/boost/asio/detail/reactive_socket_recvmsg_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_recvmsg_op_base	access:private
socket_	/usr/include/boost/asio/detail/reactive_socket_send_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_send_op_base	access:private
socket_	/usr/include/boost/asio/detail/reactive_socket_sendto_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_sendto_op_base	access:private
socket_	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^    socket_type socket_;$/;"	m	struct:boost::asio::detail::reactive_socket_service_base::base_implementation_type	access:public
socket_	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::socket_holder	access:private
socket_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
socket_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::native_handle_type	access:private
socket_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    socket_type socket_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
socket_	/usr/include/boost/asio/impl/connect.hpp	/^    basic_socket<Protocol, SocketService>& socket_;$/;"	m	class:boost::asio::detail::connect_op	access:public
socket_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  Stream& socket_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
socket_acceptor_service	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  explicit socket_acceptor_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(boost::asio::io_service& io_service)
socket_acceptor_service	/usr/include/boost/asio/socket_acceptor_service.hpp	/^class socket_acceptor_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
socket_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr socket_addr_type;$/;"	t	namespace:boost::asio::detail
socket_base	/usr/include/boost/asio/socket_base.hpp	/^class socket_base$/;"	c	namespace:boost::asio
socket_error_retval	/usr/include/boost/asio/detail/socket_types.hpp	/^const int socket_error_retval = SOCKET_ERROR;$/;"	m	namespace:boost::asio::detail
socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^  explicit socket_holder(socket_type s)$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:(socket_type s)
socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_holder()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^class socket_holder$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
socket_ops	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^namespace socket_ops {$/;"	n	namespace:boost::asio::detail	file:
socket_ops	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace socket_ops {$/;"	n	namespace:boost::asio::detail
socket_option	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace socket_option {$/;"	n	namespace:boost::asio::detail
socket_option	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace socket_option {$/;"	n	namespace:boost::asio::ip::detail
socket_select_interrupter	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^socket_select_interrupter::socket_select_interrupter()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
socket_select_interrupter	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL socket_select_interrupter();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
socket_select_interrupter	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^class socket_select_interrupter$/;"	c	namespace:boost::asio::detail
socket_service_	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  win_iocp_socket_service_base& socket_service_;$/;"	m	class:boost::asio::detail::win_iocp_socket_accept_op	access:private
socket_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef SOCKET socket_type;$/;"	t	namespace:boost::asio::detail
socket_type_not_supported	/usr/include/boost/asio/error.hpp	/^  socket_type_not_supported = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::addrinfo_errors
socketpair	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^int socketpair(int af, int type, int protocol,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, int type, int protocol, socket_type sv[2], boost::system::error_code& ec)
socketpair	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL int socketpair(int af, int type, int protocol,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(int af, int type, int protocol, socket_type sv[2], boost::system::error_code& ec)
software	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:boost::asio::serial_port_base::flow_control::type
solaris_fenced_block	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  explicit solaris_fenced_block(full_t)$/;"	f	class:boost::asio::detail::solaris_fenced_block	access:public	signature:(full_t)
solaris_fenced_block	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  explicit solaris_fenced_block(half_t)$/;"	f	class:boost::asio::detail::solaris_fenced_block	access:public	signature:(half_t)
solaris_fenced_block	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^class solaris_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
spares_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::list<value_type> spares_;$/;"	m	class:boost::asio::detail::hash_map	access:private
ss_family	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  short ss_family;$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
ssl	/usr/include/boost/asio/ssl/basic_context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/context_base.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/context_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/engine.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^namespace ssl {$/;"	n	namespace:boost::asio	file:
ssl	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^namespace ssl {$/;"	n	namespace:boost::asio	file:
ssl	/usr/include/boost/asio/ssl/detail/io.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/read_op.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/shutdown_op.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/impl/context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/impl/context.ipp	/^namespace ssl {$/;"	n	namespace:boost::asio	file:
ssl	/usr/include/boost/asio/ssl/impl/rfc2818_verification.ipp	/^namespace ssl {$/;"	n	namespace:boost::asio	file:
ssl	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/old/context_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    ::SSL* ssl;$/;"	m	struct:boost::asio::ssl::old::detail::openssl_stream_service::impl_struct	access:public
ssl	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/old/stream.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/rfc2818_verification.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/stream.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/stream_base.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/stream_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/verify_context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/verify_mode.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl_	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  SSL* ssl_;$/;"	m	class:boost::asio::ssl::detail::engine	access:private
ssl_bio_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  BIO*    ssl_bio_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
ssl_category	/usr/include/boost/asio/ssl/error.hpp	/^static const boost::system::error_category& ssl_category$/;"	m	namespace:boost::asio::error
ssl_category	/usr/include/boost/asio/ssl/impl/error.ipp	/^class ssl_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	file:	inherits:boost::system::error_category
ssl_errors	/usr/include/boost/asio/ssl/error.hpp	/^enum ssl_errors$/;"	g	namespace:boost::asio::error
ssl_mutex_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    static Mutex ssl_mutex_;$/;"	m	struct:boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap	access:public
ssl_mutex_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^Mutex openssl_stream_service::ssl_wrap<Mutex>::ssl_mutex_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::ssl_wrap
ssl_primitive_func	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^typedef boost::function<int (::SSL*)> ssl_primitive_func; $/;"	t	namespace:boost::asio::ssl::old::detail
ssl_wrap	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  struct ssl_wrap$/;"	s	class:boost::asio::ssl::old::detail::openssl_stream_service	access:private
sslv2	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv2,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv23	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv23,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv23_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv23_client,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv23_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv23_server$/;"	e	enum:boost::asio::ssl::context_base::method
sslv2_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv2_client,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv2_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv2_server,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv3	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv3,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv3_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv3_client,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv3_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv3_server,$/;"	e	enum:boost::asio::ssl::context_base::method
start	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int start()$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:public	signature:()
start_accept_op	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::start_accept_op($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, reactor_op* op, bool peer_is_open)
start_accept_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_accept_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, bool peer_is_open, socket_holder& new_socket, int family, int type, int protocol, void* output_buffer, DWORD address_length, operation* op)
start_accept_op	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_accept_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:protected	signature:(base_implementation_type& impl, reactor_op* op, bool peer_is_open)
start_accept_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_accept_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, bool peer_is_open, socket_holder& new_socket, int family, int type, int protocol, void* output_buffer, DWORD address_length, operation* op)
start_connect_op	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::start_connect_op($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, reactor_op* op, const socket_addr_type* addr, size_t addrlen)
start_connect_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_connect_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, reactor_op* op, const socket_addr_type* addr, std::size_t addrlen)
start_connect_op	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_connect_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:protected	signature:(base_implementation_type& impl, reactor_op* op, const socket_addr_type* addr, size_t addrlen)
start_connect_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_connect_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, reactor_op* op, const socket_addr_type* addr, std::size_t addrlen)
start_null_buffers_receive_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_null_buffers_receive_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, socket_base::message_flags flags, reactor_op* op)
start_null_buffers_receive_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_null_buffers_receive_op($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:( base_implementation_type& impl, socket_base::message_flags flags, reactor_op* op)
start_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL void start_op(int op_type, socket_type descriptor,$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(int op_type, socket_type descriptor, per_descriptor_data&, reactor_op* op, bool allow_speculative)
start_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void start_op(int op_type, socket_type descriptor,$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:(int op_type, socket_type descriptor, per_descriptor_data& descriptor_data, reactor_op* op, bool allow_speculative)
start_op	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^void dev_poll_reactor::start_op(int op_type, socket_type descriptor,$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:(int op_type, socket_type descriptor, dev_poll_reactor::per_descriptor_data&, reactor_op* op, bool allow_speculative)
start_op	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::start_op(int op_type, socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	signature:(int op_type, socket_type descriptor, epoll_reactor::per_descriptor_data& descriptor_data, reactor_op* op, bool allow_speculative)
start_op	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^void kqueue_reactor::start_op(int op_type, socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:(int op_type, socket_type descriptor, kqueue_reactor::per_descriptor_data& descriptor_data, reactor_op* op, bool allow_speculative)
start_op	/usr/include/boost/asio/detail/impl/reactive_descriptor_service.ipp	/^void reactive_descriptor_service::start_op($/;"	f	class:boost::asio::detail::reactive_descriptor_service	signature:( reactive_descriptor_service::implementation_type& impl, int op_type, reactor_op* op, bool is_non_blocking, bool noop)
start_op	/usr/include/boost/asio/detail/impl/reactive_socket_service_base.ipp	/^void reactive_socket_service_base::start_op($/;"	f	class:boost::asio::detail::reactive_socket_service_base	signature:( reactive_socket_service_base::base_implementation_type& impl, int op_type, reactor_op* op, bool is_non_blocking, bool noop)
start_op	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^void select_reactor::start_op(int op_type, socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor	signature:(int op_type, socket_type descriptor, select_reactor::per_descriptor_data&, reactor_op* op, bool)
start_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL void start_op(int op_type, socket_type descriptor,$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:(int op_type, socket_type descriptor, per_descriptor_data& descriptor_data, reactor_op* op, bool allow_speculative)
start_op	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  BOOST_ASIO_DECL void start_op(implementation_type& impl, int op_type,$/;"	p	class:boost::asio::detail::reactive_descriptor_service	access:private	signature:(implementation_type& impl, int op_type, reactor_op* op, bool is_non_blocking, bool noop)
start_op	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_op(base_implementation_type& impl, int op_type,$/;"	p	class:boost::asio::detail::reactive_socket_service_base	access:protected	signature:(base_implementation_type& impl, int op_type, reactor_op* op, bool is_non_blocking, bool noop)
start_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL void start_op(int op_type, socket_type descriptor,$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:(int op_type, socket_type descriptor, per_descriptor_data&, reactor_op* op, bool)
start_reactor_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_reactor_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, int op_type, reactor_op* op)
start_reactor_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_reactor_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, int op_type, reactor_op* op)
start_read_op	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::start_read_op($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, boost::uint64_t offset, const boost::asio::mutable_buffer& buffer, operation* op)
start_read_op	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void start_read_op(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const boost::asio::mutable_buffer& buffer, operation* op)
start_receive_from_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_receive_from_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, socket_addr_type* addr, socket_base::message_flags flags, int* addrlen, operation* op)
start_receive_from_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_receive_from_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, socket_addr_type* addr, socket_base::message_flags flags, int* addrlen, operation* op)
start_receive_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_receive_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, socket_base::message_flags flags, bool noop, operation* op)
start_receive_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_receive_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, socket_base::message_flags flags, bool noop, operation* op)
start_resolve_op	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::start_resolve_op(operation* op)$/;"	f	class:boost::asio::detail::resolver_service_base	signature:(operation* op)
start_resolve_op	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void start_resolve_op(operation* op);$/;"	p	class:boost::asio::detail::resolver_service_base	access:protected	signature:(operation* op)
start_send_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_send_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, socket_base::message_flags flags, bool noop, operation* op)
start_send_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_send_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, socket_base::message_flags flags, bool noop, operation* op)
start_send_to_op	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::start_send_to_op($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, const socket_addr_type* addr, int addrlen, socket_base::message_flags flags, operation* op)
start_send_to_op	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void start_send_to_op(base_implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:(base_implementation_type& impl, WSABUF* buffers, std::size_t buffer_count, const socket_addr_type* addr, int addrlen, socket_base::message_flags flags, operation* op)
start_thread	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^void posix_thread::start_thread(func_base* arg)$/;"	f	class:boost::asio::detail::posix_thread	signature:(func_base* arg)
start_thread	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^void win_thread::start_thread(func_base* arg, unsigned int stack_size)$/;"	f	class:boost::asio::detail::win_thread	signature:(func_base* arg, unsigned int stack_size)
start_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^  BOOST_ASIO_DECL void start_thread(func_base* arg);$/;"	p	class:boost::asio::detail::posix_thread	access:private	signature:(func_base* arg)
start_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^  BOOST_ASIO_DECL void start_thread(func_base* arg, unsigned int stack_size);$/;"	p	class:boost::asio::detail::win_thread	access:private	signature:(func_base* arg, unsigned int stack_size)
start_timer	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void start_timer()$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:()
start_wait_op	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^void signal_set_service::start_wait_op($/;"	f	class:boost::asio::detail::signal_set_service	signature:( signal_set_service::implementation_type& impl, signal_op* op)
start_wait_op	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::start_wait_op($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, wait_op* op)
start_wait_op	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL void start_wait_op(implementation_type& impl, signal_op* op);$/;"	p	class:boost::asio::detail::signal_set_service	access:private	signature:(implementation_type& impl, signal_op* op)
start_wait_op	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void start_wait_op(implementation_type& impl, wait_op* op);$/;"	p	class:boost::asio::detail::win_object_handle_service	access:private	signature:(implementation_type& impl, wait_op* op)
start_work_thread	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^void resolver_service_base::start_work_thread()$/;"	f	class:boost::asio::detail::resolver_service_base	signature:()
start_work_thread	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL void start_work_thread();$/;"	p	class:boost::asio::detail::resolver_service_base	access:protected	signature:()
start_write_op	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::start_write_op($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl, boost::uint64_t offset, const boost::asio::const_buffer& buffer, operation* op)
start_write_op	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void start_write_op(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const boost::asio::const_buffer& buffer, operation* op)
startup	/usr/include/boost/asio/detail/impl/winsock_init.ipp	/^void winsock_init_base::startup(data& d,$/;"	f	class:boost::asio::detail::winsock_init_base	signature:(data& d, unsigned char major, unsigned char minor)
startup	/usr/include/boost/asio/detail/winsock_init.hpp	/^  BOOST_ASIO_DECL static void startup(data& d,$/;"	p	class:boost::asio::detail::winsock_init_base	access:protected	signature:(data& d, unsigned char major, unsigned char minor)
state	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum state { no_timer, timer_is_pending, timer_has_expired } timer_state_;$/;"	g	class:boost::asio::basic_socket_streambuf	access:private
state_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    descriptor_ops::state_type state_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:private
state_	/usr/include/boost/asio/detail/reactive_socket_accept_op.hpp	/^  socket_ops::state_type state_;$/;"	m	class:boost::asio::detail::reactive_socket_accept_op_base	access:private
state_	/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp	/^  socket_ops::state_type state_;$/;"	m	class:boost::asio::detail::reactive_socket_recv_op_base	access:private
state_	/usr/include/boost/asio/detail/reactive_socket_service_base.hpp	/^    socket_ops::state_type state_;$/;"	m	struct:boost::asio::detail::reactive_socket_service_base::base_implementation_type	access:public
state_	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  socket_ops::state_type state_;$/;"	m	class:boost::asio::detail::win_iocp_socket_recv_op	access:private
state_	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^    socket_ops::state_type state_;$/;"	m	struct:boost::asio::detail::win_iocp_socket_service_base::base_implementation_type	access:public
state_type	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^typedef unsigned char state_type;$/;"	t	namespace:boost::asio::detail::descriptor_ops
state_type	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef unsigned char state_type;$/;"	t	namespace:boost::asio::detail::socket_ops
static_mutex	/usr/include/boost/asio/detail/static_mutex.hpp	/^typedef null_static_mutex static_mutex;$/;"	t	namespace:boost::asio::detail
steady_timer	/usr/include/boost/asio/steady_timer.hpp	/^typedef basic_waitable_timer<chrono::steady_clock> steady_timer;$/;"	t	namespace:boost::asio
stop	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::stop()$/;"	f	class:boost::asio::detail::task_io_service	signature:()
stop	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::stop()$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:()
stop	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void stop();$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:()
stop	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void stop();$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
stop	/usr/include/boost/asio/impl/io_service.ipp	/^void io_service::stop()$/;"	f	class:boost::asio::io_service	signature:()
stop	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL void stop();$/;"	p	class:boost::asio::io_service	access:public	signature:()
stop_all_threads	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::stop_all_threads($/;"	f	class:boost::asio::detail::task_io_service	signature:( mutex::scoped_lock& lock)
stop_all_threads	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void stop_all_threads(mutex::scoped_lock& lock);$/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:(mutex::scoped_lock& lock)
stop_bits	/usr/include/boost/asio/impl/serial_port_base.ipp	/^serial_port_base::stop_bits::stop_bits($/;"	f	class:boost::asio::serial_port_base::stop_bits	signature:( serial_port_base::stop_bits::type t)
stop_bits	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL explicit stop_bits(type t = one);$/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:(type t = one)
stop_bits	/usr/include/boost/asio/serial_port_base.hpp	/^  class stop_bits$/;"	c	class:boost::asio::serial_port_base	access:public
stop_event_posted_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long stop_event_posted_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
stop_thread_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  bool stop_thread_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
stopped	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^bool task_io_service::stopped() const$/;"	f	class:boost::asio::detail::task_io_service	signature:() const
stopped	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL bool stopped() const;$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:() const
stopped	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  bool stopped() const$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:() const
stopped	/usr/include/boost/asio/impl/io_service.ipp	/^bool io_service::stopped() const$/;"	f	class:boost::asio::io_service	signature:() const
stopped	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL bool stopped() const;$/;"	p	class:boost::asio::io_service	access:public	signature:() const
stopped_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool stopped_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
stopped_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  mutable long stopped_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
storage_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
storage_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
storage_	/usr/include/boost/asio/buffered_read_stream.hpp	/^  detail::buffered_stream_storage storage_;$/;"	m	class:boost::asio::buffered_read_stream	access:private
storage_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_write_stream::flush_handler	access:private
storage_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
storage_	/usr/include/boost/asio/buffered_write_stream.hpp	/^  detail::buffered_stream_storage storage_;$/;"	m	class:boost::asio::buffered_write_stream	access:private
store	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::baud_rate::store($/;"	f	class:boost::asio::serial_port_base::baud_rate	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::character_size::store($/;"	f	class:boost::asio::serial_port_base::character_size	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::flow_control::store($/;"	f	class:boost::asio::serial_port_base::flow_control	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::parity::store($/;"	f	class:boost::asio::serial_port_base::parity	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/impl/serial_port_base.ipp	/^boost::system::error_code serial_port_base::stop_bits::store($/;"	f	class:boost::asio::serial_port_base::stop_bits	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code store($/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code store($/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code store($/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code store($/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/serial_port_base.hpp	/^    BOOST_ASIO_DECL boost::system::error_code store($/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:( BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store_function_type	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  typedef boost::system::error_code (*store_function_type)($/;"	t	class:boost::asio::detail::reactive_serial_port_service::boost::system	access:private
store_function_type	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  typedef boost::system::error_code (*store_function_type)($/;"	t	class:boost::asio::detail::win_iocp_serial_port_service::boost::system	access:private
store_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  static boost::system::error_code store_option(const void* option,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:private	signature:(const void* option, termios& storage, boost::system::error_code& ec)
store_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  static boost::system::error_code store_option(const void* option,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:private	signature:(const void* option, ::DCB& storage, boost::system::error_code& ec)
strand	/usr/include/boost/asio/strand.hpp	/^  explicit strand(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::io_service::strand	access:public	signature:(boost::asio::io_service& io_service)
strand	/usr/include/boost/asio/strand.hpp	/^class io_service::strand$/;"	c	class:boost::asio::io_service
strand	/usr/include/boost/asio/strand.hpp	/^typedef boost::asio::io_service::strand strand;$/;"	t	namespace:boost::asio
strand_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  boost::asio::io_service::strand* strand_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
strand_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  boost::asio::io_service::strand strand_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service	access:private
strand_impl	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^inline strand_service::strand_impl::strand_impl()$/;"	f	class:boost::asio::detail::strand_service::strand_impl	signature:()
strand_impl	/usr/include/boost/asio/detail/strand_service.hpp	/^    strand_impl();$/;"	p	class:boost::asio::detail::strand_service::strand_impl	access:public	signature:()
strand_impl	/usr/include/boost/asio/detail/strand_service.hpp	/^  class strand_impl$/;"	c	class:boost::asio::detail::strand_service	inherits:operation	access:public
strand_service	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^strand_service::strand_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::strand_service	signature:(boost::asio::io_service& io_service)
strand_service	/usr/include/boost/asio/detail/strand_service.hpp	/^  BOOST_ASIO_DECL explicit strand_service(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::strand_service	access:public	signature:(boost::asio::io_service& io_service)
strand_service	/usr/include/boost/asio/detail/strand_service.hpp	/^class strand_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
stream	/usr/include/boost/asio/ssl/old/stream.hpp	/^  explicit stream(Arg& arg, basic_context<Context_Service>& context)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(Arg& arg, basic_context<Context_Service>& context)
stream	/usr/include/boost/asio/ssl/old/stream.hpp	/^class stream$/;"	c	namespace:boost::asio::ssl::old	inherits:stream_base,boost::noncopyable
stream_	/usr/include/boost/asio/impl/read.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:boost::asio::detail::read_op	access:public
stream_	/usr/include/boost/asio/impl/read.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:boost::asio::detail::read_streambuf_op	access:public
stream_	/usr/include/boost/asio/impl/read_until.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:boost::asio::detail::read_until_delim_op	access:public
stream_	/usr/include/boost/asio/impl/read_until.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:boost::asio::detail::read_until_delim_string_op	access:public
stream_	/usr/include/boost/asio/impl/read_until.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:boost::asio::detail::read_until_expr_op	access:public
stream_	/usr/include/boost/asio/impl/read_until.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:boost::asio::detail::read_until_match_op	access:public
stream_	/usr/include/boost/asio/impl/write.hpp	/^    AsyncWriteStream& stream_;$/;"	m	class:boost::asio::detail::write_op	access:public
stream_base	/usr/include/boost/asio/ssl/stream_base.hpp	/^class stream_base$/;"	c	namespace:boost::asio::ssl
stream_core	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  stream_core(SSL_CTX* context, boost::asio::io_service& io_service)$/;"	f	struct:boost::asio::ssl::detail::stream_core	access:public	signature:(SSL_CTX* context, boost::asio::io_service& io_service)
stream_core	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^struct stream_core$/;"	s	namespace:boost::asio::ssl::detail
stream_descriptor	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^typedef basic_stream_descriptor<> stream_descriptor;$/;"	t	namespace:boost::asio::posix
stream_descriptor_service	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  explicit stream_descriptor_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(boost::asio::io_service& io_service)
stream_descriptor_service	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^class stream_descriptor_service$/;"	c	namespace:boost::asio::posix	inherits:boost::asio::io_service::service
stream_handle	/usr/include/boost/asio/windows/stream_handle.hpp	/^typedef basic_stream_handle<> stream_handle;$/;"	t	namespace:boost::asio::windows
stream_handle_service	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  explicit stream_handle_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(boost::asio::io_service& io_service)
stream_handle_service	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^class stream_handle_service$/;"	c	namespace:boost::asio::windows	inherits:boost::asio::io_service::service
stream_impl_	/usr/include/boost/asio/buffered_stream.hpp	/^  read_stream_type stream_impl_;$/;"	m	class:boost::asio::buffered_stream	access:private
stream_oriented	/usr/include/boost/asio/detail/socket_ops.hpp	/^  stream_oriented = 16,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
stream_protocol	/usr/include/boost/asio/local/stream_protocol.hpp	/^class stream_protocol$/;"	c	namespace:boost::asio::local
stream_service	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  explicit stream_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(boost::asio::io_service& io_service)
stream_service	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^class stream_service$/;"	c	namespace:boost::asio::ssl::old	inherits:boost::asio::io_service::service
stream_socket_service	/usr/include/boost/asio/stream_socket_service.hpp	/^  explicit stream_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(boost::asio::io_service& io_service)
stream_socket_service	/usr/include/boost/asio/stream_socket_service.hpp	/^class stream_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
streambuf	/usr/include/boost/asio/streambuf.hpp	/^typedef basic_streambuf<> streambuf;$/;"	t	namespace:boost::asio
streambuf_	/usr/include/boost/asio/impl/read.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::read_streambuf_op	access:public
streambuf_	/usr/include/boost/asio/impl/read_at.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::read_at_streambuf_op	access:public
streambuf_	/usr/include/boost/asio/impl/read_until.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::read_until_delim_op	access:public
streambuf_	/usr/include/boost/asio/impl/read_until.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::read_until_delim_string_op	access:public
streambuf_	/usr/include/boost/asio/impl/read_until.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::read_until_expr_op	access:public
streambuf_	/usr/include/boost/asio/impl/read_until.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::read_until_match_op	access:public
streambuf_	/usr/include/boost/asio/impl/write.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::write_streambuf_handler	access:public
streambuf_	/usr/include/boost/asio/impl/write_at.hpp	/^    boost::asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:boost::asio::detail::write_at_streambuf_op	access:public
subtract	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  static duration_type subtract(const time_type& t1, const time_type& t2)$/;"	f	struct:boost::asio::detail::chrono_time_traits	access:public	signature:(const time_type& t1, const time_type& t2)
subtract	/usr/include/boost/asio/time_traits.hpp	/^  static duration_type subtract(const time_type& t1, const time_type& t2)$/;"	f	struct:boost::asio::time_traits	access:public	signature:(const time_type& t1, const time_type& t2)
swap_heap	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void swap_heap(std::size_t index1, std::size_t index2)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(std::size_t index1, std::size_t index2)
sync	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  int sync()$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:()
sync_accept	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^socket_type sync_accept(socket_type s, state_type state,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
sync_accept	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL socket_type sync_accept(socket_type s,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
sync_connect	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^void sync_connect(socket_type s, const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
sync_connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL void sync_connect(socket_type s, const socket_addr_type* addr,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
sync_getnameinfo	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^boost::system::error_code sync_getnameinfo($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int sock_type, boost::system::error_code& ec)
sync_getnameinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL boost::system::error_code sync_getnameinfo($/;"	p	namespace:boost::asio::detail::socket_ops	signature:( const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int sock_type, boost::system::error_code& ec)
sync_read	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL std::size_t sync_read(int d, state_type state, buf* bufs,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, buf* bufs, std::size_t count, bool all_empty, boost::system::error_code& ec)
sync_read	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^std::size_t sync_read(int d, state_type state, buf* bufs,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, buf* bufs, std::size_t count, bool all_empty, boost::system::error_code& ec)
sync_recv	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^size_t sync_recv(socket_type s, state_type state, buf* bufs,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, buf* bufs, size_t count, int flags, bool all_empty, boost::system::error_code& ec)
sync_recv	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL size_t sync_recv(socket_type s, state_type state, buf* bufs,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, buf* bufs, size_t count, int flags, bool all_empty, boost::system::error_code& ec)
sync_recvfrom	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^size_t sync_recvfrom(socket_type s, state_type state, buf* bufs,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
sync_recvfrom	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL size_t sync_recvfrom(socket_type s, state_type state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
sync_recvmsg	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^size_t sync_recvmsg(socket_type s, state_type state,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, buf* bufs, size_t count, int in_flags, int& out_flags, boost::system::error_code& ec)
sync_recvmsg	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL size_t sync_recvmsg(socket_type s, state_type state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, buf* bufs, size_t count, int in_flags, int& out_flags, boost::system::error_code& ec)
sync_send	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^size_t sync_send(socket_type s, state_type state, const buf* bufs,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, const buf* bufs, size_t count, int flags, bool all_empty, boost::system::error_code& ec)
sync_send	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL size_t sync_send(socket_type s, state_type state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, const buf* bufs, size_t count, int flags, bool all_empty, boost::system::error_code& ec)
sync_sendto	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^size_t sync_sendto(socket_type s, state_type state, const buf* bufs,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
sync_sendto	/usr/include/boost/asio/detail/socket_ops.hpp	/^BOOST_ASIO_DECL size_t sync_sendto(socket_type s, state_type state,$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, state_type state, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
sync_user_handler	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  int sync_user_handler(const boost::system::error_code& error, int rc)$/;"	f	class:boost::asio::ssl::old::detail::openssl_operation	access:private	signature:(const boost::system::error_code& error, int rc)
sync_write	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^BOOST_ASIO_DECL std::size_t sync_write(int d, state_type state,$/;"	p	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, const buf* bufs, std::size_t count, bool all_empty, boost::system::error_code& ec)
sync_write	/usr/include/boost/asio/detail/impl/descriptor_ops.ipp	/^std::size_t sync_write(int d, state_type state, const buf* bufs,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, state_type state, const buf* bufs, std::size_t count, bool all_empty, boost::system::error_code& ec)
system	/usr/include/boost/asio/error.hpp	/^namespace system {$/;"	n	namespace:boost
system	/usr/include/boost/asio/ssl/error.hpp	/^namespace system {$/;"	n	namespace:boost
system_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& system_category$/;"	m	namespace:boost::asio::error
system_timer	/usr/include/boost/asio/system_timer.hpp	/^typedef basic_waitable_timer<chrono::system_clock> system_timer;$/;"	t	namespace:boost::asio
task_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  reactor* task_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
task_cleanup	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^struct task_io_service::task_cleanup$/;"	s	class:boost::asio::detail::task_io_service	file:
task_interrupted_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool task_interrupted_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
task_io_service	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^task_io_service::task_io_service($/;"	f	class:boost::asio::detail::task_io_service	signature:( boost::asio::io_service& io_service, std::size_t concurrency_hint)
task_io_service	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL task_io_service(boost::asio::io_service& io_service,$/;"	p	class:boost::asio::detail::task_io_service	access:public	signature:(boost::asio::io_service& io_service, std::size_t concurrency_hint = 0)
task_io_service	/usr/include/boost/asio/detail/task_io_service.hpp	/^class task_io_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
task_io_service_	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  task_io_service* task_io_service_;$/;"	m	struct:boost::asio::detail::task_io_service::task_cleanup	file:	access:public
task_io_service_	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  task_io_service* task_io_service_;$/;"	m	struct:boost::asio::detail::task_io_service::work_cleanup	file:	access:public
task_io_service_operation	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  task_io_service_operation(func_type func)$/;"	f	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:protected	signature:(func_type func)
task_io_service_thread_info	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^struct task_io_service_thread_info : public thread_info_base$/;"	s	namespace:boost::asio::detail	inherits:thread_info_base
task_operation	/usr/include/boost/asio/detail/task_io_service.hpp	/^    task_operation() : operation(0) {}$/;"	f	struct:boost::asio::detail::task_io_service::task_operation	access:public	signature:()
task_operation	/usr/include/boost/asio/detail/task_io_service.hpp	/^  struct task_operation : operation$/;"	s	class:boost::asio::detail::task_io_service	inherits:operation	access:private
task_operation_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  } task_operation_;$/;"	m	class:boost::asio::detail::task_io_service	typeref:struct:boost::asio::detail::task_io_service::task_operation	access:private
task_result_	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  unsigned int task_result_; \/\/ Passed into bytes transferred.$/;"	m	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:protected
tcp	/usr/include/boost/asio/ip/tcp.hpp	/^  explicit tcp(int protocol_family)$/;"	f	class:boost::asio::ip::tcp	access:private	signature:(int protocol_family)
tcp	/usr/include/boost/asio/ip/tcp.hpp	/^class tcp$/;"	c	namespace:boost::asio::ip
terminate_threads	/usr/include/boost/asio/detail/win_thread.hpp	/^  static bool terminate_threads()$/;"	f	class:boost::asio::detail::win_thread_base	access:public	signature:()
terminate_threads_	/usr/include/boost/asio/detail/win_thread.hpp	/^  static long terminate_threads_;$/;"	m	class:boost::asio::detail::win_thread_base	access:private
terminate_threads_	/usr/include/boost/asio/detail/win_thread.hpp	/^long win_thread_base<T>::terminate_threads_ = 0;$/;"	m	class:boost::asio::detail::win_thread_base
this_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    basic_socket_streambuf* this_;$/;"	m	struct:boost::asio::basic_socket_streambuf::io_handler	access:public
this_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^    basic_socket_streambuf* this_;$/;"	m	struct:boost::asio::basic_socket_streambuf::timer_handler	access:public
this_thread_	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  thread_info* this_thread_;$/;"	m	struct:boost::asio::detail::task_io_service::task_cleanup	file:	access:public
this_thread_	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  thread_info* this_thread_;$/;"	m	struct:boost::asio::detail::task_io_service::work_cleanup	file:	access:public
thread	/usr/include/boost/asio/detail/thread.hpp	/^typedef null_thread thread;$/;"	t	namespace:boost::asio::detail
thread_	/usr/include/boost/asio/detail/posix_thread.hpp	/^  ::pthread_t thread_;$/;"	m	class:boost::asio::detail::posix_thread	access:private
thread_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  boost::asio::detail::thread* thread_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
thread_	/usr/include/boost/asio/detail/win_thread.hpp	/^  ::HANDLE thread_;$/;"	m	class:boost::asio::detail::win_thread	access:private
thread_	/usr/include/boost/asio/detail/wince_thread.hpp	/^  ::HANDLE thread_;$/;"	m	class:boost::asio::detail::wince_thread	access:private
thread_call_stack	/usr/include/boost/asio/detail/task_io_service.hpp	/^  typedef call_stack<task_io_service, thread_info> thread_call_stack;$/;"	t	class:boost::asio::detail::task_io_service	access:private
thread_call_stack	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^      win_iocp_thread_info> thread_call_stack;$/;"	t	class:boost::asio::detail::win_iocp_io_service	access:private
thread_id_	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^  boost::asio::detail::tss_ptr<void> thread_id_;$/;"	m	class:boost::asio::ssl::detail::openssl_init_base::do_init	file:	access:private
thread_info	/usr/include/boost/asio/detail/task_io_service.hpp	/^  typedef task_io_service_thread_info thread_info;$/;"	t	class:boost::asio::detail::task_io_service	access:private
thread_info_base	/usr/include/boost/asio/detail/thread_info_base.hpp	/^  thread_info_base()$/;"	f	class:boost::asio::detail::thread_info_base	access:public	signature:()
thread_info_base	/usr/include/boost/asio/detail/thread_info_base.hpp	/^class thread_info_base$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
throw_error	/usr/include/boost/asio/detail/throw_error.hpp	/^inline void throw_error(const boost::system::error_code& err)$/;"	f	namespace:boost::asio::detail	signature:(const boost::system::error_code& err)
throw_error	/usr/include/boost/asio/detail/throw_error.hpp	/^inline void throw_error(const boost::system::error_code& err,$/;"	f	namespace:boost::asio::detail	signature:(const boost::system::error_code& err, const char* location)
throw_on_error	/usr/include/boost/asio/detail/impl/winsock_init.ipp	/^void winsock_init_base::throw_on_error(data& d)$/;"	f	class:boost::asio::detail::winsock_init_base	signature:(data& d)
throw_on_error	/usr/include/boost/asio/detail/winsock_init.hpp	/^  BOOST_ASIO_DECL static void throw_on_error(data& d);$/;"	p	class:boost::asio::detail::winsock_init_base	access:protected	signature:(data& d)
ticks	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    boost::int64_t ticks() const$/;"	f	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:public	signature:() const
time_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    time_type time_;$/;"	m	struct:boost::asio::detail::timer_queue::heap_entry	access:public
time_point	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  typedef typename clock_type::time_point time_point;$/;"	t	class:boost::asio::basic_waitable_timer	access:public
time_point	/usr/include/boost/asio/waitable_timer_service.hpp	/^  typedef typename clock_type::time_point time_point;$/;"	t	class:boost::asio::waitable_timer_service	access:public
time_traits	/usr/include/boost/asio/time_traits.hpp	/^struct time_traits<boost::posix_time::ptime>$/;"	s	namespace:boost::asio
time_type	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  typedef typename traits_type::time_type time_type;$/;"	t	class:boost::asio::basic_deadline_timer	access:public
time_type	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  typedef typename TimeTraits::time_type time_type;$/;"	t	class:boost::asio::basic_socket_iostream	access:public
time_type	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  typedef typename TimeTraits::time_type time_type;$/;"	t	class:boost::asio::basic_socket_streambuf	access:public
time_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef typename traits_type::time_type time_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
time_type	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  typedef typename clock_type::time_point time_type;$/;"	t	struct:boost::asio::detail::chrono_time_traits	access:public
time_type	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  typedef typename Time_Traits::time_type time_type;$/;"	t	class:boost::asio::detail::deadline_timer_service	access:public
time_type	/usr/include/boost/asio/detail/timer_queue.hpp	/^  typedef typename Time_Traits::time_type time_type;$/;"	t	class:boost::asio::detail::timer_queue	access:public
time_type	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  typedef boost::posix_time::ptime time_type;$/;"	t	class:boost::asio::detail::timer_queue	access:public
time_type	/usr/include/boost/asio/time_traits.hpp	/^  typedef boost::posix_time::ptime time_type;$/;"	t	struct:boost::asio::time_traits	access:public
timed_out	/usr/include/boost/asio/error.hpp	/^  timed_out = BOOST_ASIO_SOCKET_ERROR(ETIMEDOUT),$/;"	e	enum:boost::asio::error::basic_errors
timer_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    per_timer_data* timer_;$/;"	m	struct:boost::asio::detail::timer_queue::heap_entry	access:public
timer_data	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    typename timer_queue<Time_Traits>::per_timer_data timer_data;$/;"	m	struct:boost::asio::detail::deadline_timer_service::implementation_type	access:public
timer_fd_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  int timer_fd_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
timer_handler	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  struct timer_handler$/;"	s	class:boost::asio::basic_socket_streambuf	access:private
timer_has_expired	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum state { no_timer, timer_is_pending, timer_has_expired } timer_state_;$/;"	e	enum:boost::asio::basic_socket_streambuf::state
timer_implementation_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  typename TimerService::implementation_type timer_implementation_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
timer_is_pending	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum state { no_timer, timer_is_pending, timer_has_expired } timer_state_;$/;"	e	enum:boost::asio::basic_socket_streambuf::state
timer_queue	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^timer_queue<time_traits<boost::posix_time::ptime> >::timer_queue()$/;"	f	class:boost::asio::detail::timer_queue	signature:()
timer_queue	/usr/include/boost/asio/detail/timer_queue.hpp	/^  timer_queue()$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:()
timer_queue	/usr/include/boost/asio/detail/timer_queue.hpp	/^class timer_queue$/;"	c	namespace:boost::asio::detail	inherits:timer_queue_base
timer_queue	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL timer_queue();$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:()
timer_queue	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^class timer_queue<time_traits<boost::posix_time::ptime> >$/;"	c	namespace:boost::asio::detail	inherits:timer_queue_base
timer_queue_	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  timer_queue<Time_Traits> timer_queue_;$/;"	m	class:boost::asio::detail::deadline_timer_service	access:private
timer_queue_base	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  timer_queue_base() : next_(0) {}$/;"	f	class:boost::asio::detail::timer_queue_base	access:public	signature:()
timer_queue_base	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^class timer_queue_base$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
timer_queue_set	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^timer_queue_set::timer_queue_set()$/;"	f	class:boost::asio::detail::timer_queue_set	signature:()
timer_queue_set	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL timer_queue_set();$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:()
timer_queue_set	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^class timer_queue_set$/;"	c	namespace:boost::asio::detail
timer_queues_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
timer_queues_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
timer_queues_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
timer_queues_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
timer_queues_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
timer_scheduler	/usr/include/boost/asio/detail/timer_scheduler_fwd.hpp	/^typedef win_iocp_io_service timer_scheduler;$/;"	t	namespace:boost::asio::detail
timer_service_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  TimerService* timer_service_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
timer_state_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum state { no_timer, timer_is_pending, timer_has_expired } timer_state_;$/;"	m	class:boost::asio::basic_socket_streambuf	typeref:enum:boost::asio::basic_socket_streambuf::state	access:private
timer_thread_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  scoped_ptr<thread> timer_thread_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
timer_thread_function	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^struct win_iocp_io_service::timer_thread_function$/;"	s	class:boost::asio::detail::win_iocp_io_service	file:
timers_	/usr/include/boost/asio/detail/timer_queue.hpp	/^  per_timer_data* timers_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
tlsv1	/usr/include/boost/asio/ssl/context_base.hpp	/^    tlsv1,$/;"	e	enum:boost::asio::ssl::context_base::method
tlsv1_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    tlsv1_client,$/;"	e	enum:boost::asio::ssl::context_base::method
tlsv1_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    tlsv1_server,$/;"	e	enum:boost::asio::ssl::context_base::method
to_bytes	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL bytes_type to_bytes() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
to_bytes	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL bytes_type to_bytes() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
to_bytes	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^address_v4::bytes_type address_v4::to_bytes() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
to_bytes	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6::bytes_type address_v6::to_bytes() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
to_msec	/usr/include/boost/asio/detail/timer_queue.hpp	/^  long to_msec(const Duration& d, long max_duration) const$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(const Duration& d, long max_duration) const
to_posix_duration	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^  static posix_time_duration to_posix_duration(const duration_type& d)$/;"	f	struct:boost::asio::detail::chrono_time_traits	access:public	signature:(const duration_type& d)
to_posix_duration	/usr/include/boost/asio/time_traits.hpp	/^  static boost::posix_time::time_duration to_posix_duration($/;"	f	struct:boost::asio::time_traits	access:public	signature:( const duration_type& d)
to_string	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL std::string to_string() const;$/;"	p	class:boost::asio::ip::address	access:public	signature:() const
to_string	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;$/;"	p	class:boost::asio::ip::address	access:public	signature:(boost::system::error_code& ec) const
to_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL std::string to_string() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
to_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:(boost::system::error_code& ec) const
to_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL std::string to_string() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
to_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(boost::system::error_code& ec) const
to_string	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^  BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;$/;"	p	class:boost::asio::ip::detail::endpoint	access:public	signature:(boost::system::error_code& ec) const
to_string	/usr/include/boost/asio/ip/detail/impl/endpoint.ipp	/^std::string endpoint::to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::detail::endpoint	signature:(boost::system::error_code& ec) const
to_string	/usr/include/boost/asio/ip/impl/address.ipp	/^std::string address::to_string() const$/;"	f	class:boost::asio::ip::address	signature:() const
to_string	/usr/include/boost/asio/ip/impl/address.ipp	/^std::string address::to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::address	signature:(boost::system::error_code& ec) const
to_string	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^std::string address_v4::to_string() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
to_string	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^std::string address_v4::to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::address_v4	signature:(boost::system::error_code& ec) const
to_string	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^std::string address_v6::to_string() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
to_string	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^std::string address_v6::to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::address_v6	signature:(boost::system::error_code& ec) const
to_ulong	/usr/include/boost/asio/ip/address_v4.hpp	/^  BOOST_ASIO_DECL unsigned long to_ulong() const;$/;"	p	class:boost::asio::ip::address_v4	access:public	signature:() const
to_ulong	/usr/include/boost/asio/ip/impl/address_v4.ipp	/^unsigned long address_v4::to_ulong() const$/;"	f	class:boost::asio::ip::address_v4	signature:() const
to_usec	/usr/include/boost/asio/detail/timer_queue.hpp	/^  long to_usec(const Duration& d, long max_duration) const$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(const Duration& d, long max_duration) const
to_v4	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL boost::asio::ip::address_v4 to_v4() const;$/;"	p	class:boost::asio::ip::address	access:public	signature:() const
to_v4	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL address_v4 to_v4() const;$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:() const
to_v4	/usr/include/boost/asio/ip/impl/address.ipp	/^boost::asio::ip::address_v4 address::to_v4() const$/;"	f	class:boost::asio::ip::address	signature:() const
to_v4	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v4 address_v6::to_v4() const$/;"	f	class:boost::asio::ip::address_v6	signature:() const
to_v6	/usr/include/boost/asio/ip/address.hpp	/^  BOOST_ASIO_DECL boost::asio::ip::address_v6 to_v6() const;$/;"	p	class:boost::asio::ip::address	access:public	signature:() const
to_v6	/usr/include/boost/asio/ip/impl/address.ipp	/^boost::asio::ip::address_v6 address::to_v6() const$/;"	f	class:boost::asio::ip::address	signature:() const
to_wait_duration	/usr/include/boost/asio/wait_traits.hpp	/^  static typename Clock::duration to_wait_duration($/;"	f	struct:boost::asio::wait_traits	access:public	signature:( const typename Clock::duration& d)
top	/usr/include/boost/asio/detail/call_stack.hpp	/^  static Value* top()$/;"	f	class:boost::asio::detail::call_stack	access:public	signature:()
top_	/usr/include/boost/asio/detail/call_stack.hpp	/^  static tss_ptr<context> top_;$/;"	m	class:boost::asio::detail::call_stack	access:private
top_	/usr/include/boost/asio/detail/call_stack.hpp	/^call_stack<Key, Value>::top_;$/;"	m	class:boost::asio::detail::call_stack
total_microseconds	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    boost::int64_t total_microseconds() const$/;"	f	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:public	signature:() const
total_milliseconds	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    boost::int64_t total_milliseconds() const$/;"	f	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:public	signature:() const
total_seconds	/usr/include/boost/asio/detail/chrono_time_traits.hpp	/^    boost::int64_t total_seconds() const$/;"	f	class:boost::asio::detail::chrono_time_traits::posix_time_duration	access:public	signature:() const
total_transferred_	/usr/include/boost/asio/impl/read.hpp	/^    std::size_t total_transferred_;$/;"	m	class:boost::asio::detail::read_op	access:public
total_transferred_	/usr/include/boost/asio/impl/read.hpp	/^    std::size_t total_transferred_;$/;"	m	class:boost::asio::detail::read_streambuf_op	access:public
total_transferred_	/usr/include/boost/asio/impl/read_at.hpp	/^    std::size_t total_transferred_;$/;"	m	class:boost::asio::detail::read_at_op	access:public
total_transferred_	/usr/include/boost/asio/impl/read_at.hpp	/^    std::size_t total_transferred_;$/;"	m	class:boost::asio::detail::read_at_streambuf_op	access:public
total_transferred_	/usr/include/boost/asio/impl/write.hpp	/^    std::size_t total_transferred_;$/;"	m	class:boost::asio::detail::write_op	access:public
total_transferred_	/usr/include/boost/asio/impl/write_at.hpp	/^    std::size_t total_transferred_;$/;"	m	class:boost::asio::detail::write_at_op	access:public
tracked_handler	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    tracked_handler() : id_(0) {}$/;"	f	class:boost::asio::detail::handler_tracking::tracked_handler	access:protected	signature:()
tracked_handler	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  class tracked_handler$/;"	c	class:boost::asio::detail::handler_tracking	access:public
tracking_state	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^struct handler_tracking::tracking_state$/;"	s	class:boost::asio::detail::handler_tracking	file:
traits_type	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  typedef TimeTraits traits_type;$/;"	t	class:boost::asio::basic_deadline_timer	access:public
traits_type	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  typedef WaitTraits traits_type;$/;"	t	class:boost::asio::basic_waitable_timer	access:public
traits_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef TimeTraits traits_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
traits_type	/usr/include/boost/asio/waitable_timer_service.hpp	/^  typedef WaitTraits traits_type;$/;"	t	class:boost::asio::waitable_timer_service	access:public
transfer_all_t	/usr/include/boost/asio/completion_condition.hpp	/^class transfer_all_t$/;"	c	namespace:boost::asio::detail
transfer_at_least	/usr/include/boost/asio/completion_condition.hpp	/^inline detail::transfer_at_least_t transfer_at_least(std::size_t minimum)$/;"	f	namespace:boost::asio	signature:(std::size_t minimum)
transfer_at_least	/usr/include/boost/asio/completion_condition.hpp	/^unspecified transfer_at_least(std::size_t minimum);$/;"	p	namespace:boost::asio	signature:(std::size_t minimum)
transfer_at_least_t	/usr/include/boost/asio/completion_condition.hpp	/^  explicit transfer_at_least_t(std::size_t minimum)$/;"	f	class:boost::asio::detail::transfer_at_least_t	access:public	signature:(std::size_t minimum)
transfer_at_least_t	/usr/include/boost/asio/completion_condition.hpp	/^class transfer_at_least_t$/;"	c	namespace:boost::asio::detail
transfer_exactly	/usr/include/boost/asio/completion_condition.hpp	/^inline detail::transfer_exactly_t transfer_exactly(std::size_t size)$/;"	f	namespace:boost::asio	signature:(std::size_t size)
transfer_exactly	/usr/include/boost/asio/completion_condition.hpp	/^unspecified transfer_exactly(std::size_t size);$/;"	p	namespace:boost::asio	signature:(std::size_t size)
transfer_exactly_t	/usr/include/boost/asio/completion_condition.hpp	/^  explicit transfer_exactly_t(std::size_t size)$/;"	f	class:boost::asio::detail::transfer_exactly_t	access:public	signature:(std::size_t size)
transfer_exactly_t	/usr/include/boost/asio/completion_condition.hpp	/^class transfer_exactly_t$/;"	c	namespace:boost::asio::detail
translate_addrinfo_error	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline boost::system::error_code translate_addrinfo_error(int error)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int error)
translate_netdb_error	/usr/include/boost/asio/detail/impl/socket_ops.ipp	/^inline boost::system::error_code translate_netdb_error(int error)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int error)
try_again	/usr/include/boost/asio/error.hpp	/^  try_again = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
tss_key_	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  pthread_key_t tss_key_;$/;"	m	class:boost::asio::detail::posix_tss_ptr	access:private
tss_key_	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  DWORD tss_key_;$/;"	m	class:boost::asio::detail::win_tss_ptr	access:private
tss_ptr	/usr/include/boost/asio/detail/tss_ptr.hpp	/^class tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:null_tss_ptr
two	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:boost::asio::serial_port_base::stop_bits::type
two_arg_handler_test	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^char (&two_arg_handler_test(Handler, ...))[2];$/;"	p	namespace:boost::asio::detail	signature:(Handler, ...)
type	/usr/include/boost/asio/buffers_iterator.hpp	/^      typedef ByteType type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper::byte_type	access:public
type	/usr/include/boost/asio/buffers_iterator.hpp	/^      typedef typename boost::add_const<ByteType>::type type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper::byte_type	access:public
type	/usr/include/boost/asio/detail/dependent_type.hpp	/^  typedef T type;$/;"	t	struct:boost::asio::detail::dependent_type	access:public
type	/usr/include/boost/asio/ip/icmp.hpp	/^  int type() const$/;"	f	class:boost::asio::ip::icmp	access:public	signature:() const
type	/usr/include/boost/asio/ip/tcp.hpp	/^  int type() const$/;"	f	class:boost::asio::ip::tcp	access:public	signature:() const
type	/usr/include/boost/asio/ip/udp.hpp	/^  int type() const$/;"	f	class:boost::asio::ip::udp	access:public	signature:() const
type	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  int type() const$/;"	f	class:boost::asio::local::datagram_protocol	access:public	signature:() const
type	/usr/include/boost/asio/local/stream_protocol.hpp	/^  int type() const$/;"	f	class:boost::asio::local::stream_protocol	access:public	signature:() const
type	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	g	class:boost::asio::serial_port_base::parity	access:public
type	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	g	class:boost::asio::serial_port_base::flow_control	access:public
type	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	g	class:boost::asio::serial_port_base::stop_bits	access:public
type_	/usr/include/boost/asio/ip/address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	m	class:boost::asio::ip::address	typeref:enum:boost::asio::ip::address::__anon20	access:private
type_	/usr/include/boost/asio/ssl/detail/handshake_op.hpp	/^  stream_base::handshake_type type_;$/;"	m	class:boost::asio::ssl::detail::handshake_op	access:private
type_info_	/usr/include/boost/asio/io_service.hpp	/^    const std::type_info* type_info_;$/;"	m	struct:boost::asio::io_service::service::key	access:public
typeid_wrapper	/usr/include/boost/asio/detail/service_registry.hpp	/^class typeid_wrapper {};$/;"	c	namespace:boost::asio::detail
u	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  } u;$/;"	m	struct:boost::asio::detail::in6_addr_emulation	typeref:union:boost::asio::detail::in6_addr_emulation::__anon13	access:public
u_long_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef u_long u_long_type;$/;"	t	namespace:boost::asio::detail
u_short_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef u_short u_short_type;$/;"	t	namespace:boost::asio::detail
udp	/usr/include/boost/asio/ip/udp.hpp	/^  explicit udp(int protocol_family)$/;"	f	class:boost::asio::ip::udp	access:private	signature:(int protocol_family)
udp	/usr/include/boost/asio/ip/udp.hpp	/^class udp$/;"	c	namespace:boost::asio::ip
ulong_ptr_t	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  typedef ULONG ulong_ptr_t;$/;"	t	class:boost::asio::detail::win_iocp_io_service	access:private
ulong_ptr_t	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  typedef ULONG_PTR ulong_ptr_t;$/;"	t	class:boost::asio::detail::win_iocp_io_service	access:private
unblock	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  void unblock()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
unblock	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  void unblock()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
unbuffered_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  bool unbuffered_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
undelivered_	/usr/include/boost/asio/detail/signal_set_service.hpp	/^    std::size_t undelivered_;$/;"	m	class:boost::asio::detail::signal_set_service::registration	access:private
underflow	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  int_type underflow()$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:()
underflow	/usr/include/boost/asio/basic_streambuf.hpp	/^  int_type underflow()$/;"	f	class:boost::asio::basic_streambuf	access:protected	signature:()
unicast	/usr/include/boost/asio/ip/unicast.hpp	/^namespace unicast {$/;"	n	namespace:boost::asio::ip
unicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit unicast_hops(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(int v)
unicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  unicast_hops()$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:()
unicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class unicast_hops$/;"	c	namespace:boost::asio::ip::detail::socket_option
unlock	/usr/include/boost/asio/detail/null_mutex.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
unlock	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^  void unlock()$/;"	f	struct:boost::asio::detail::null_static_mutex	access:public	signature:()
unlock	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
unlock	/usr/include/boost/asio/detail/posix_static_mutex.hpp	/^  void unlock()$/;"	f	struct:boost::asio::detail::posix_static_mutex	access:public	signature:()
unlock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
unlock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
unlock	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^  void unlock()$/;"	f	struct:boost::asio::detail::win_static_mutex	access:public	signature:()
unused_	/usr/include/boost/asio/detail/null_static_mutex.hpp	/^  int unused_;$/;"	m	struct:boost::asio::detail::null_static_mutex	access:public
up_heap	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void up_heap(std::size_t index)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(std::size_t index)
update_cancellation_thread_id	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^void win_iocp_handle_service::update_cancellation_thread_id($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( win_iocp_handle_service::implementation_type& impl)
update_cancellation_thread_id	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^void win_iocp_socket_service_base::update_cancellation_thread_id($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( win_iocp_socket_service_base::base_implementation_type& impl)
update_cancellation_thread_id	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL void update_cancellation_thread_id(implementation_type& impl);$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl)
update_cancellation_thread_id	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL void update_cancellation_thread_id($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:protected	signature:( base_implementation_type& impl)
update_timeout	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL void update_timeout();$/;"	p	class:boost::asio::detail::epoll_reactor	access:private	signature:()
update_timeout	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^void epoll_reactor::update_timeout()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
update_timeout	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^void win_iocp_io_service::update_timeout()$/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:()
update_timeout	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL void update_timeout();$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:private	signature:()
use_certificate_chain_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::use_certificate_chain_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, boost::system::error_code& ec)
use_certificate_chain_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::use_certificate_chain_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::context	signature:(const std::string& filename)
use_certificate_chain_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code use_certificate_chain_file($/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:( const std::string& filename, boost::system::error_code& ec)
use_certificate_chain_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void use_certificate_chain_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename)
use_certificate_chain_file	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code use_certificate_chain_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
use_certificate_chain_file	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code use_certificate_chain_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
use_certificate_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::use_certificate_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, file_format format, boost::system::error_code& ec)
use_certificate_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::use_certificate_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, file_format format)
use_certificate_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code use_certificate_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, file_format format, boost::system::error_code& ec)
use_certificate_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void use_certificate_file(const std::string& filename, file_format format)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, file_format format)
use_certificate_file	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code use_certificate_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
use_certificate_file	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code use_certificate_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
use_private_key_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::use_private_key_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, context::file_format format, boost::system::error_code& ec)
use_private_key_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::use_private_key_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, context::file_format format)
use_private_key_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code use_private_key_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, file_format format, boost::system::error_code& ec)
use_private_key_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void use_private_key_file(const std::string& filename, file_format format)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, file_format format)
use_private_key_file	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code use_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
use_private_key_file	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code use_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
use_rsa_private_key_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::use_rsa_private_key_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, context::file_format format, boost::system::error_code& ec)
use_rsa_private_key_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::use_rsa_private_key_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, context::file_format format)
use_rsa_private_key_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code use_rsa_private_key_file($/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:( const std::string& filename, file_format format, boost::system::error_code& ec)
use_rsa_private_key_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void use_rsa_private_key_file(const std::string& filename, file_format format)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, file_format format)
use_rsa_private_key_file	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code use_rsa_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
use_rsa_private_key_file	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code use_rsa_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
use_service	/usr/include/boost/asio/detail/impl/service_registry.hpp	/^Service& service_registry::use_service()$/;"	f	class:boost::asio::detail::service_registry	signature:()
use_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  Service& use_service();$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:()
use_service	/usr/include/boost/asio/impl/io_service.hpp	/^inline Service& use_service(io_service& ios)$/;"	f	namespace:boost::asio	signature:(io_service& ios)
use_service	/usr/include/boost/asio/impl/io_service.hpp	/^inline detail::io_service_impl& use_service<detail::io_service_impl>($/;"	f	namespace:boost::asio	signature:( io_service& ios)
use_service	/usr/include/boost/asio/io_service.hpp	/^  friend Service& use_service(io_service& ios);$/;"	p	class:boost::asio::io_service	access:friend	signature:(io_service& ios)
use_service	/usr/include/boost/asio/io_service.hpp	/^template <typename Service> Service& use_service(io_service& ios);$/;"	p	namespace:boost::asio	signature:(io_service& ios)
use_tmp_dh_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^boost::system::error_code context::use_tmp_dh_file($/;"	f	class:boost::asio::ssl::context	signature:( const std::string& filename, boost::system::error_code& ec)
use_tmp_dh_file	/usr/include/boost/asio/ssl/impl/context.ipp	/^void context::use_tmp_dh_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::context	signature:(const std::string& filename)
use_tmp_dh_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  boost::system::error_code use_tmp_dh_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename, boost::system::error_code& ec)
use_tmp_dh_file	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  void use_tmp_dh_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:(const std::string& filename)
use_tmp_dh_file	/usr/include/boost/asio/ssl/old/context_service.hpp	/^  boost::system::error_code use_tmp_dh_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
use_tmp_dh_file	/usr/include/boost/asio/ssl/old/detail/openssl_context_service.hpp	/^  boost::system::error_code use_tmp_dh_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::old::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
user_handler_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  user_handler_func  user_handler_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
user_handler_func	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  user_handler_func;$/;"	t	namespace:boost::asio::ssl::old::detail
user_set_linger	/usr/include/boost/asio/detail/socket_ops.hpp	/^  user_set_linger = 8,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
user_set_non_blocking	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^  user_set_non_blocking = 1,$/;"	e	enum:boost::asio::detail::descriptor_ops::__anon9
user_set_non_blocking	/usr/include/boost/asio/detail/socket_ops.hpp	/^  user_set_non_blocking = 1,$/;"	e	enum:boost::asio::detail::socket_ops::__anon14
v4	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^    boost::asio::detail::sockaddr_in4_type v4;$/;"	m	union:boost::asio::ip::detail::endpoint::data_union	access:public
v4	/usr/include/boost/asio/ip/icmp.hpp	/^  static icmp v4()$/;"	f	class:boost::asio::ip::icmp	access:public	signature:()
v4	/usr/include/boost/asio/ip/tcp.hpp	/^  static tcp v4()$/;"	f	class:boost::asio::ip::tcp	access:public	signature:()
v4	/usr/include/boost/asio/ip/udp.hpp	/^  static udp v4()$/;"	f	class:boost::asio::ip::udp	access:public	signature:()
v4_compatible	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 v4_compatible(const address_v4& addr);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const address_v4& addr)
v4_compatible	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::v4_compatible(const address_v4& addr)$/;"	f	class:boost::asio::ip::address_v6	signature:(const address_v4& addr)
v4_mapped	/usr/include/boost/asio/ip/address_v6.hpp	/^  BOOST_ASIO_DECL static address_v6 v4_mapped(const address_v4& addr);$/;"	p	class:boost::asio::ip::address_v6	access:public	signature:(const address_v4& addr)
v4_mapped	/usr/include/boost/asio/ip/impl/address_v6.ipp	/^address_v6 address_v6::v4_mapped(const address_v4& addr)$/;"	f	class:boost::asio::ip::address_v6	signature:(const address_v4& addr)
v4_mapped	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const flags v4_mapped = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
v6	/usr/include/boost/asio/ip/detail/endpoint.hpp	/^    boost::asio::detail::sockaddr_in6_type v6;$/;"	m	union:boost::asio::ip::detail::endpoint::data_union	access:public
v6	/usr/include/boost/asio/ip/icmp.hpp	/^  static icmp v6()$/;"	f	class:boost::asio::ip::icmp	access:public	signature:()
v6	/usr/include/boost/asio/ip/tcp.hpp	/^  static tcp v6()$/;"	f	class:boost::asio::ip::tcp	access:public	signature:()
v6	/usr/include/boost/asio/ip/udp.hpp	/^  static udp v6()$/;"	f	class:boost::asio::ip::udp	access:public	signature:()
v6_only	/usr/include/boost/asio/ip/v6_only.hpp	/^typedef implementation_defined v6_only;$/;"	t	namespace:boost::asio::ip
validate	/usr/include/boost/asio/detail/buffer_sequence_adapter.hpp	/^  static void validate(const Buffers& buffer_sequence)$/;"	f	class:boost::asio::detail::buffer_sequence_adapter	access:public	signature:(const Buffers& buffer_sequence)
value	/usr/include/boost/asio/basic_io_object.hpp	/^    static const bool value =$/;"	m	class:boost::asio::detail::service_has_move	access:public
value	/usr/include/boost/asio/detail/socket_option.hpp	/^  bool value() const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:() const
value	/usr/include/boost/asio/detail/socket_option.hpp	/^  int value() const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:() const
value	/usr/include/boost/asio/error.hpp	/^  static const bool value = true;$/;"	m	struct:boost::system::is_error_code_enum	access:public
value	/usr/include/boost/asio/impl/serial_port_base.hpp	/^inline serial_port_base::parity::type serial_port_base::parity::value() const$/;"	f	class:boost::asio::serial_port_base::parity	signature:() const
value	/usr/include/boost/asio/impl/serial_port_base.hpp	/^inline unsigned int serial_port_base::baud_rate::value() const$/;"	f	class:boost::asio::serial_port_base::baud_rate	signature:() const
value	/usr/include/boost/asio/impl/serial_port_base.hpp	/^inline unsigned int serial_port_base::character_size::value() const$/;"	f	class:boost::asio::serial_port_base::character_size	signature:() const
value	/usr/include/boost/asio/impl/serial_port_base.hpp	/^serial_port_base::flow_control::value() const$/;"	f	class:boost::asio::serial_port_base::flow_control	signature:() const
value	/usr/include/boost/asio/impl/serial_port_base.hpp	/^serial_port_base::stop_bits::value() const$/;"	f	class:boost::asio::serial_port_base::stop_bits	signature:() const
value	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  bool value() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:() const
value	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int value() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:() const
value	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int value() const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:() const
value	/usr/include/boost/asio/is_read_buffered.hpp	/^  static const bool value;$/;"	m	class:boost::asio::is_read_buffered	access:public
value	/usr/include/boost/asio/is_write_buffered.hpp	/^  static const bool value;$/;"	m	class:boost::asio::is_write_buffered	access:public
value	/usr/include/boost/asio/read_until.hpp	/^    enum { value = (sizeof((has_result_type_helper)((T*)(0))) == 1) };$/;"	e	enum:boost::asio::detail::has_result_type::__anon21
value	/usr/include/boost/asio/read_until.hpp	/^  static const bool value;$/;"	m	struct:boost::asio::is_match_condition	access:public
value	/usr/include/boost/asio/serial_port_base.hpp	/^    type value() const;$/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:() const
value	/usr/include/boost/asio/serial_port_base.hpp	/^    type value() const;$/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:() const
value	/usr/include/boost/asio/serial_port_base.hpp	/^    type value() const;$/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:() const
value	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value() const;$/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:() const
value	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value() const;$/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:() const
value	/usr/include/boost/asio/ssl/error.hpp	/^  static const bool value = true;$/;"	m	struct:boost::system::is_error_code_enum	access:public
value_	/usr/include/boost/asio/detail/call_stack.hpp	/^    Value* value_;$/;"	m	class:boost::asio::detail::call_stack::context	access:private
value_	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^  int value_;$/;"	m	class:boost::asio::detail::gcc_sync_fenced_block	access:private
value_	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type value_;$/;"	m	class:boost::asio::detail::io_control::bytes_readable	access:private
value_	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type value_;$/;"	m	class:boost::asio::detail::io_control::non_blocking_io	access:private
value_	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^  static __thread T* value_;$/;"	m	class:boost::asio::detail::keyword_tss_ptr	access:private
value_	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^__thread T* keyword_tss_ptr<T>::value_;$/;"	m	class:boost::asio::detail::keyword_tss_ptr
value_	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  T* value_;$/;"	m	class:boost::asio::detail::null_tss_ptr	access:private
value_	/usr/include/boost/asio/detail/socket_option.hpp	/^  ::linger value_;$/;"	m	class:boost::asio::detail::socket_option::linger	access:private
value_	/usr/include/boost/asio/detail/socket_option.hpp	/^  int value_;$/;"	m	class:boost::asio::detail::socket_option::boolean	access:private
value_	/usr/include/boost/asio/detail/socket_option.hpp	/^  int value_;$/;"	m	class:boost::asio::detail::socket_option::integer	access:private
value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int value_;$/;"	m	class:boost::asio::ip::detail::socket_option::unicast_hops	access:private
value_	/usr/include/boost/asio/serial_port_base.hpp	/^    type value_;$/;"	m	class:boost::asio::serial_port_base::flow_control	access:private
value_	/usr/include/boost/asio/serial_port_base.hpp	/^    type value_;$/;"	m	class:boost::asio::serial_port_base::parity	access:private
value_	/usr/include/boost/asio/serial_port_base.hpp	/^    type value_;$/;"	m	class:boost::asio::serial_port_base::stop_bits	access:private
value_	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value_;$/;"	m	class:boost::asio::serial_port_base::baud_rate	access:private
value_	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value_;$/;"	m	class:boost::asio::serial_port_base::character_size	access:private
value_type	/usr/include/boost/asio/buffer.hpp	/^  typedef const_buffer value_type;$/;"	t	class:boost::asio::const_buffers_1	access:public
value_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffer value_type;$/;"	t	class:boost::asio::mutable_buffers_1	access:public
value_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffer value_type;$/;"	t	class:boost::asio::null_buffers	access:public
value_type	/usr/include/boost/asio/buffers_iterator.hpp	/^  typedef ByteType value_type;$/;"	t	class:boost::asio::buffers_iterator	access:public
value_type	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  typedef Buffer value_type;$/;"	t	class:boost::asio::detail::consuming_buffers	access:public
value_type	/usr/include/boost/asio/detail/hash_map.hpp	/^  typedef std::pair<K, V> value_type;$/;"	t	class:boost::asio::detail::hash_map	access:public
value_type	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef basic_resolver_entry<InternetProtocol> value_type;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:public
values_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::list<value_type> values_;$/;"	m	class:boost::asio::detail::hash_map	access:private
values_	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  boost::asio::detail::shared_ptr<values_type> values_;$/;"	m	class:boost::asio::ip::basic_resolver_iterator	access:private
values_erase	/usr/include/boost/asio/detail/hash_map.hpp	/^  void values_erase(iterator it)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(iterator it)
values_insert	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator values_insert(iterator it, const value_type& v)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(iterator it, const value_type& v)
values_type	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef std::vector<basic_resolver_entry<InternetProtocol> > values_type;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:private
verify_callback	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^  explicit verify_callback(VerifyCallback callback)$/;"	f	class:boost::asio::ssl::detail::verify_callback	access:public	signature:(VerifyCallback callback)
verify_callback	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^class verify_callback : public verify_callback_base$/;"	c	namespace:boost::asio::ssl::detail	inherits:verify_callback_base
verify_callback_base	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^class verify_callback_base$/;"	c	namespace:boost::asio::ssl::detail
verify_callback_function	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL static int verify_callback_function($/;"	p	class:boost::asio::ssl::detail::engine	access:private	signature:( int preverified, X509_STORE_CTX* ctx)
verify_callback_function	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^int engine::verify_callback_function(int preverified, X509_STORE_CTX* ctx)$/;"	f	class:boost::asio::ssl::detail::engine	signature:(int preverified, X509_STORE_CTX* ctx)
verify_callback_function	/usr/include/boost/asio/ssl/impl/context.ipp	/^int context::verify_callback_function(int preverified, X509_STORE_CTX* ctx)$/;"	f	class:boost::asio::ssl::context	signature:(int preverified, X509_STORE_CTX* ctx)
verify_client_once	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_client_once = SSL_VERIFY_CLIENT_ONCE;$/;"	m	namespace:boost::asio::ssl
verify_client_once	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_client_once = implementation_defined;$/;"	m	namespace:boost::asio::ssl
verify_context	/usr/include/boost/asio/ssl/verify_context.hpp	/^  explicit verify_context(native_handle_type handle)$/;"	f	class:boost::asio::ssl::verify_context	access:public	signature:(native_handle_type handle)
verify_context	/usr/include/boost/asio/ssl/verify_context.hpp	/^class verify_context$/;"	c	namespace:boost::asio::ssl	inherits:noncopyable
verify_fail_if_no_peer_cert	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_fail_if_no_peer_cert = SSL_VERIFY_FAIL_IF_NO_PEER_CERT;$/;"	m	namespace:boost::asio::ssl
verify_fail_if_no_peer_cert	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_fail_if_no_peer_cert = implementation_defined;$/;"	m	namespace:boost::asio::ssl
verify_mode	/usr/include/boost/asio/ssl/context_base.hpp	/^  typedef int verify_mode;$/;"	t	class:boost::asio::ssl::context_base	access:public
verify_mode	/usr/include/boost/asio/ssl/verify_mode.hpp	/^typedef int verify_mode;$/;"	t	namespace:boost::asio::ssl
verify_none	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_none = SSL_VERIFY_NONE;$/;"	m	namespace:boost::asio::ssl
verify_none	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_none = implementation_defined;$/;"	m	namespace:boost::asio::ssl
verify_peer	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_peer = SSL_VERIFY_PEER;$/;"	m	namespace:boost::asio::ssl
verify_peer	/usr/include/boost/asio/ssl/verify_mode.hpp	/^const int verify_peer = implementation_defined;$/;"	m	namespace:boost::asio::ssl
wait	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  void wait()$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:()
wait	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  void wait(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::system::error_code& ec)
wait	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  void wait()$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:()
wait	/usr/include/boost/asio/basic_waitable_timer.hpp	/^  void wait(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_waitable_timer	access:public	signature:(boost::system::error_code& ec)
wait	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void wait(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
wait	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void wait(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
wait	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::wait($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( win_object_handle_service::implementation_type& impl, boost::system::error_code& ec)
wait	/usr/include/boost/asio/detail/null_event.hpp	/^  void wait(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
wait	/usr/include/boost/asio/detail/posix_event.hpp	/^  void wait(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
wait	/usr/include/boost/asio/detail/win_event.hpp	/^  void wait(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
wait	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL void wait(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
wait	/usr/include/boost/asio/waitable_timer_service.hpp	/^  void wait(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
wait	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  void wait()$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:()
wait	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^  void wait(boost::system::error_code& ec)$/;"	f	class:boost::asio::windows::basic_object_handle	access:public	signature:(boost::system::error_code& ec)
wait	/usr/include/boost/asio/windows/object_handle_service.hpp	/^  void wait(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::windows::object_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
wait_callback	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^void win_object_handle_service::wait_callback(PVOID param, BOOLEAN)$/;"	f	class:boost::asio::detail::win_object_handle_service	signature:(PVOID param, BOOLEAN)
wait_callback	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  static BOOST_ASIO_DECL VOID CALLBACK wait_callback($/;"	p	class:boost::asio::detail::win_object_handle_service	access:private	signature:( PVOID param, BOOLEAN timeout)
wait_duration_msec	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^long timer_queue<time_traits<boost::posix_time::ptime> >::wait_duration_msec($/;"	f	class:boost::asio::detail::timer_queue	signature:( long max_duration) const
wait_duration_msec	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^long timer_queue_set::wait_duration_msec(long max_duration) const$/;"	f	class:boost::asio::detail::timer_queue_set	signature:(long max_duration) const
wait_duration_msec	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual long wait_duration_msec(long max_duration) const$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(long max_duration) const
wait_duration_msec	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual long wait_duration_msec(long max_duration) const = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:(long max_duration) const
wait_duration_msec	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL virtual long wait_duration_msec(long max_duration) const;$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:(long max_duration) const
wait_duration_msec	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL long wait_duration_msec(long max_duration) const;$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:(long max_duration) const
wait_duration_usec	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^long timer_queue<time_traits<boost::posix_time::ptime> >::wait_duration_usec($/;"	f	class:boost::asio::detail::timer_queue	signature:( long max_duration) const
wait_duration_usec	/usr/include/boost/asio/detail/impl/timer_queue_set.ipp	/^long timer_queue_set::wait_duration_usec(long max_duration) const$/;"	f	class:boost::asio::detail::timer_queue_set	signature:(long max_duration) const
wait_duration_usec	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual long wait_duration_usec(long max_duration) const$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(long max_duration) const
wait_duration_usec	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual long wait_duration_usec(long max_duration) const = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:(long max_duration) const
wait_duration_usec	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL virtual long wait_duration_usec(long max_duration) const;$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:(long max_duration) const
wait_duration_usec	/usr/include/boost/asio/detail/timer_queue_set.hpp	/^  BOOST_ASIO_DECL long wait_duration_usec(long max_duration) const;$/;"	p	class:boost::asio::detail::timer_queue_set	access:public	signature:(long max_duration) const
wait_handle_	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^    HANDLE wait_handle_;$/;"	m	class:boost::asio::detail::win_object_handle_service::implementation_type	access:private
wait_handler	/usr/include/boost/asio/detail/wait_handler.hpp	/^  wait_handler(Handler& h)$/;"	f	class:boost::asio::detail::wait_handler	access:public	signature:(Handler& h)
wait_handler	/usr/include/boost/asio/detail/wait_handler.hpp	/^class wait_handler : public wait_op$/;"	c	namespace:boost::asio::detail	inherits:wait_op
wait_op	/usr/include/boost/asio/detail/wait_op.hpp	/^  wait_op(func_type func)$/;"	f	class:boost::asio::detail::wait_op	access:protected	signature:(func_type func)
wait_op	/usr/include/boost/asio/detail/wait_op.hpp	/^class wait_op$/;"	c	namespace:boost::asio::detail	inherits:operation
wait_traits	/usr/include/boost/asio/wait_traits.hpp	/^struct wait_traits$/;"	s	namespace:boost::asio
waitable_timer_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  auto_handle waitable_timer_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
waitable_timer_service	/usr/include/boost/asio/waitable_timer_service.hpp	/^  explicit waitable_timer_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::waitable_timer_service	access:public	signature:(boost::asio::io_service& io_service)
waitable_timer_service	/usr/include/boost/asio/waitable_timer_service.hpp	/^class waitable_timer_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
waiting_queue_	/usr/include/boost/asio/detail/strand_service.hpp	/^    op_queue<operation> waiting_queue_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
wake_for_dispatch	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    wake_for_dispatch = 1,$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon19
wake_one_idle_thread_and_unlock	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^bool task_io_service::wake_one_idle_thread_and_unlock($/;"	f	class:boost::asio::detail::task_io_service	signature:( mutex::scoped_lock& lock)
wake_one_idle_thread_and_unlock	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL bool wake_one_idle_thread_and_unlock($/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:( mutex::scoped_lock& lock)
wake_one_thread_and_unlock	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^void task_io_service::wake_one_thread_and_unlock($/;"	f	class:boost::asio::detail::task_io_service	signature:( mutex::scoped_lock& lock)
wake_one_thread_and_unlock	/usr/include/boost/asio/detail/task_io_service.hpp	/^  BOOST_ASIO_DECL void wake_one_thread_and_unlock($/;"	p	class:boost::asio::detail::task_io_service	access:private	signature:( mutex::scoped_lock& lock)
wakeup_event	/usr/include/boost/asio/detail/task_io_service_thread_info.hpp	/^  event* wakeup_event;$/;"	m	struct:boost::asio::detail::task_io_service_thread_info	access:public
want	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  enum want$/;"	g	class:boost::asio::ssl::detail::engine	access:public
want_	/usr/include/boost/asio/ssl/detail/io.hpp	/^  engine::want want_;$/;"	m	class:boost::asio::ssl::detail::io_op	access:public
want_input_and_retry	/usr/include/boost/asio/ssl/detail/engine.hpp	/^    want_input_and_retry = -2,$/;"	e	enum:boost::asio::ssl::detail::engine::want
want_nothing	/usr/include/boost/asio/ssl/detail/engine.hpp	/^    want_nothing = 0,$/;"	e	enum:boost::asio::ssl::detail::engine::want
want_output	/usr/include/boost/asio/ssl/detail/engine.hpp	/^    want_output = 1$/;"	e	enum:boost::asio::ssl::detail::engine::want
want_output_and_retry	/usr/include/boost/asio/ssl/detail/engine.hpp	/^    want_output_and_retry = -1,$/;"	e	enum:boost::asio::ssl::detail::engine::want
weak_cancel_token_type	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef weak_ptr<void> weak_cancel_token_type;$/;"	t	namespace:boost::asio::detail::socket_ops
win_event	/usr/include/boost/asio/detail/impl/win_event.ipp	/^win_event::win_event()$/;"	f	class:boost::asio::detail::win_event	signature:()
win_event	/usr/include/boost/asio/detail/win_event.hpp	/^  BOOST_ASIO_DECL win_event();$/;"	p	class:boost::asio::detail::win_event	access:public	signature:()
win_event	/usr/include/boost/asio/detail/win_event.hpp	/^class win_event$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
win_fd_set	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  struct win_fd_set$/;"	s	class:boost::asio::detail::win_fd_set_adapter	access:private
win_fd_set_adapter	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  win_fd_set_adapter()$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:()
win_fd_set_adapter	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^class win_fd_set_adapter : noncopyable$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
win_fenced_block	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  explicit win_fenced_block(full_t)$/;"	f	class:boost::asio::detail::win_fenced_block	access:public	signature:(full_t)
win_fenced_block	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  explicit win_fenced_block(half_t)$/;"	f	class:boost::asio::detail::win_fenced_block	access:public	signature:(half_t)
win_fenced_block	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^class win_fenced_block$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
win_iocp_handle_read_op	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^  win_iocp_handle_read_op($/;"	f	class:boost::asio::detail::win_iocp_handle_read_op	access:public	signature:( const MutableBufferSequence& buffers, Handler& handler)
win_iocp_handle_read_op	/usr/include/boost/asio/detail/win_iocp_handle_read_op.hpp	/^class win_iocp_handle_read_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
win_iocp_handle_service	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^win_iocp_handle_service::win_iocp_handle_service($/;"	f	class:boost::asio::detail::win_iocp_handle_service	signature:( boost::asio::io_service& io_service)
win_iocp_handle_service	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  BOOST_ASIO_DECL win_iocp_handle_service(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(boost::asio::io_service& io_service)
win_iocp_handle_service	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^class win_iocp_handle_service$/;"	c	namespace:boost::asio::detail
win_iocp_handle_write_op	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^  win_iocp_handle_write_op(const ConstBufferSequence& buffers, Handler& handler)$/;"	f	class:boost::asio::detail::win_iocp_handle_write_op	access:public	signature:(const ConstBufferSequence& buffers, Handler& handler)
win_iocp_handle_write_op	/usr/include/boost/asio/detail/win_iocp_handle_write_op.hpp	/^class win_iocp_handle_write_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
win_iocp_io_service	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^win_iocp_io_service::win_iocp_io_service($/;"	f	class:boost::asio::detail::win_iocp_io_service	signature:( boost::asio::io_service& io_service, size_t concurrency_hint)
win_iocp_io_service	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  BOOST_ASIO_DECL win_iocp_io_service(boost::asio::io_service& io_service,$/;"	p	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::asio::io_service& io_service, size_t concurrency_hint = 0)
win_iocp_io_service	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^class win_iocp_io_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
win_iocp_null_buffers_op	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^  win_iocp_null_buffers_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:boost::asio::detail::win_iocp_null_buffers_op	access:public	signature:(socket_ops::weak_cancel_token_type cancel_token, Handler& handler)
win_iocp_null_buffers_op	/usr/include/boost/asio/detail/win_iocp_null_buffers_op.hpp	/^class win_iocp_null_buffers_op : public reactor_op$/;"	c	namespace:boost::asio::detail	inherits:reactor_op
win_iocp_operation	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  win_iocp_operation(func_type func)$/;"	f	class:boost::asio::detail::win_iocp_operation	access:protected	signature:(func_type func)
win_iocp_operation	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^class win_iocp_operation$/;"	c	namespace:boost::asio::detail	inherits:OVERLAPPEDBOOST_ASIO_ALSO_INHERIT_TRACKED_HANDLER
win_iocp_overlapped_op	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^  win_iocp_overlapped_op(Handler& handler)$/;"	f	class:boost::asio::detail::win_iocp_overlapped_op	access:public	signature:(Handler& handler)
win_iocp_overlapped_op	/usr/include/boost/asio/detail/win_iocp_overlapped_op.hpp	/^class win_iocp_overlapped_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  explicit win_iocp_overlapped_ptr($/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:( boost::asio::io_service& io_service, BOOST_ASIO_MOVE_ARG(Handler) handler)
win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  win_iocp_overlapped_ptr()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^class win_iocp_overlapped_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
win_iocp_serial_port_service	/usr/include/boost/asio/detail/impl/win_iocp_serial_port_service.ipp	/^win_iocp_serial_port_service::win_iocp_serial_port_service($/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	signature:( boost::asio::io_service& io_service)
win_iocp_serial_port_service	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  BOOST_ASIO_DECL win_iocp_serial_port_service($/;"	p	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:( boost::asio::io_service& io_service)
win_iocp_serial_port_service	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^class win_iocp_serial_port_service$/;"	c	namespace:boost::asio::detail
win_iocp_socket_accept_op	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^  win_iocp_socket_accept_op(win_iocp_socket_service_base& socket_service,$/;"	f	class:boost::asio::detail::win_iocp_socket_accept_op	access:public	signature:(win_iocp_socket_service_base& socket_service, socket_type socket, Socket& peer, const Protocol& protocol, typename Protocol::endpoint* peer_endpoint, bool enable_connection_aborted, Handler& handler)
win_iocp_socket_accept_op	/usr/include/boost/asio/detail/win_iocp_socket_accept_op.hpp	/^class win_iocp_socket_accept_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
win_iocp_socket_recv_op	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^  win_iocp_socket_recv_op(socket_ops::state_type state,$/;"	f	class:boost::asio::detail::win_iocp_socket_recv_op	access:public	signature:(socket_ops::state_type state, socket_ops::weak_cancel_token_type cancel_token, const MutableBufferSequence& buffers, Handler& handler)
win_iocp_socket_recv_op	/usr/include/boost/asio/detail/win_iocp_socket_recv_op.hpp	/^class win_iocp_socket_recv_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
win_iocp_socket_recvfrom_op	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^  win_iocp_socket_recvfrom_op(Endpoint& endpoint,$/;"	f	class:boost::asio::detail::win_iocp_socket_recvfrom_op	access:public	signature:(Endpoint& endpoint, socket_ops::weak_cancel_token_type cancel_token, const MutableBufferSequence& buffers, Handler& handler)
win_iocp_socket_recvfrom_op	/usr/include/boost/asio/detail/win_iocp_socket_recvfrom_op.hpp	/^class win_iocp_socket_recvfrom_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
win_iocp_socket_recvmsg_op	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^  win_iocp_socket_recvmsg_op($/;"	f	class:boost::asio::detail::win_iocp_socket_recvmsg_op	access:public	signature:( socket_ops::weak_cancel_token_type cancel_token, const MutableBufferSequence& buffers, socket_base::message_flags& out_flags, Handler& handler)
win_iocp_socket_recvmsg_op	/usr/include/boost/asio/detail/win_iocp_socket_recvmsg_op.hpp	/^class win_iocp_socket_recvmsg_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
win_iocp_socket_send_op	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^  win_iocp_socket_send_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:boost::asio::detail::win_iocp_socket_send_op	access:public	signature:(socket_ops::weak_cancel_token_type cancel_token, const ConstBufferSequence& buffers, Handler& handler)
win_iocp_socket_send_op	/usr/include/boost/asio/detail/win_iocp_socket_send_op.hpp	/^class win_iocp_socket_send_op : public operation$/;"	c	namespace:boost::asio::detail	inherits:operation
win_iocp_socket_service	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  win_iocp_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::win_iocp_socket_service	access:public	signature:(boost::asio::io_service& io_service)
win_iocp_socket_service	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^class win_iocp_socket_service : public win_iocp_socket_service_base$/;"	c	namespace:boost::asio::detail	inherits:win_iocp_socket_service_base
win_iocp_socket_service_base	/usr/include/boost/asio/detail/impl/win_iocp_socket_service_base.ipp	/^win_iocp_socket_service_base::win_iocp_socket_service_base($/;"	f	class:boost::asio::detail::win_iocp_socket_service_base	signature:( boost::asio::io_service& io_service)
win_iocp_socket_service_base	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^  BOOST_ASIO_DECL win_iocp_socket_service_base($/;"	p	class:boost::asio::detail::win_iocp_socket_service_base	access:public	signature:( boost::asio::io_service& io_service)
win_iocp_socket_service_base	/usr/include/boost/asio/detail/win_iocp_socket_service_base.hpp	/^class win_iocp_socket_service_base$/;"	c	namespace:boost::asio::detail
win_iocp_thread_info	/usr/include/boost/asio/detail/win_iocp_thread_info.hpp	/^struct win_iocp_thread_info : public thread_info_base$/;"	s	namespace:boost::asio::detail	inherits:thread_info_base
win_mutex	/usr/include/boost/asio/detail/impl/win_mutex.ipp	/^win_mutex::win_mutex()$/;"	f	class:boost::asio::detail::win_mutex	signature:()
win_mutex	/usr/include/boost/asio/detail/win_mutex.hpp	/^  BOOST_ASIO_DECL win_mutex();$/;"	p	class:boost::asio::detail::win_mutex	access:public	signature:()
win_mutex	/usr/include/boost/asio/detail/win_mutex.hpp	/^class win_mutex$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
win_object_handle_service	/usr/include/boost/asio/detail/impl/win_object_handle_service.ipp	/^win_object_handle_service::win_object_handle_service($/;"	f	class:boost::asio::detail::win_object_handle_service	signature:( boost::asio::io_service& io_service)
win_object_handle_service	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^  BOOST_ASIO_DECL win_object_handle_service($/;"	p	class:boost::asio::detail::win_object_handle_service	access:public	signature:( boost::asio::io_service& io_service)
win_object_handle_service	/usr/include/boost/asio/detail/win_object_handle_service.hpp	/^class win_object_handle_service$/;"	c	namespace:boost::asio::detail
win_static_mutex	/usr/include/boost/asio/detail/win_static_mutex.hpp	/^struct win_static_mutex$/;"	s	namespace:boost::asio::detail
win_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^  win_thread(Function f, unsigned int stack_size = 0)$/;"	f	class:boost::asio::detail::win_thread	access:public	signature:(Function f, unsigned int stack_size = 0)
win_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^class win_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable,win_thread_base
win_thread_base	/usr/include/boost/asio/detail/win_thread.hpp	/^class win_thread_base$/;"	c	namespace:boost::asio::detail
win_thread_function	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^unsigned int __stdcall win_thread_function(void* arg)$/;"	f	namespace:boost::asio::detail	signature:(void* arg)
win_thread_function	/usr/include/boost/asio/detail/win_thread.hpp	/^  friend BOOST_ASIO_DECL unsigned int __stdcall win_thread_function(void* arg);$/;"	p	class:boost::asio::detail::win_thread	access:friend	signature:(void* arg)
win_thread_function	/usr/include/boost/asio/detail/win_thread.hpp	/^BOOST_ASIO_DECL unsigned int __stdcall win_thread_function(void* arg);$/;"	p	namespace:boost::asio::detail	signature:(void* arg)
win_tss_ptr	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  win_tss_ptr()$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:()
win_tss_ptr	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^class win_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
win_tss_ptr_create	/usr/include/boost/asio/detail/impl/win_tss_ptr.ipp	/^DWORD win_tss_ptr_create()$/;"	f	namespace:boost::asio::detail	signature:()
win_tss_ptr_create	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^BOOST_ASIO_DECL DWORD win_tss_ptr_create();$/;"	p	namespace:boost::asio::detail	signature:()
wince_thread	/usr/include/boost/asio/detail/wince_thread.hpp	/^  wince_thread(Function f, unsigned int = 0)$/;"	f	class:boost::asio::detail::wince_thread	access:public	signature:(Function f, unsigned int = 0)
wince_thread	/usr/include/boost/asio/detail/wince_thread.hpp	/^class wince_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
wince_thread_function	/usr/include/boost/asio/detail/wince_thread.hpp	/^  friend DWORD WINAPI wince_thread_function(LPVOID arg);$/;"	p	class:boost::asio::detail::wince_thread	access:friend	signature:(LPVOID arg)
wince_thread_function	/usr/include/boost/asio/detail/wince_thread.hpp	/^DWORD WINAPI wince_thread_function(LPVOID arg);$/;"	p	namespace:boost::asio::detail	signature:(LPVOID arg)
wince_thread_function	/usr/include/boost/asio/detail/wince_thread.hpp	/^inline DWORD WINAPI wince_thread_function(LPVOID arg)$/;"	f	namespace:boost::asio::detail	signature:(LPVOID arg)
windows	/usr/include/boost/asio/windows/basic_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/basic_object_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/object_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/object_handle_service.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/random_access_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/stream_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^  winsock_init(bool allow_throw = true)$/;"	f	class:boost::asio::detail::winsock_init	access:public	signature:(bool allow_throw = true)
winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^  winsock_init(const winsock_init&)$/;"	f	class:boost::asio::detail::winsock_init	access:public	signature:(const winsock_init&)
winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^class winsock_init : private winsock_init_base$/;"	c	namespace:boost::asio::detail	inherits:winsock_init_base
winsock_init_base	/usr/include/boost/asio/detail/winsock_init.hpp	/^class winsock_init_base$/;"	c	namespace:boost::asio::detail
winsock_init_instance	/usr/include/boost/asio/detail/winsock_init.hpp	/^static const winsock_init<>& winsock_init_instance = winsock_init<>(false);$/;"	m	namespace:boost::asio::detail
work	/usr/include/boost/asio/impl/io_service.hpp	/^inline io_service::work::work(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::io_service::work	signature:(boost::asio::io_service& io_service)
work	/usr/include/boost/asio/impl/io_service.hpp	/^inline io_service::work::work(const work& other)$/;"	f	class:boost::asio::io_service::work	signature:(const work& other)
work	/usr/include/boost/asio/io_service.hpp	/^  explicit work(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::io_service::work	access:public	signature:(boost::asio::io_service& io_service)
work	/usr/include/boost/asio/io_service.hpp	/^  work(const work& other);$/;"	p	class:boost::asio::io_service::work	access:public	signature:(const work& other)
work	/usr/include/boost/asio/io_service.hpp	/^class io_service::work$/;"	c	class:boost::asio::io_service
work_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  boost::asio::detail::scoped_ptr<boost::asio::io_service::work> work_;$/;"	m	class:boost::asio::detail::resolver_service_base	access:private
work_	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:private
work_cleanup	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^struct task_io_service::work_cleanup$/;"	s	class:boost::asio::detail::task_io_service	file:
work_finished	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void work_finished()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
work_finished	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void work_finished()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
work_finished_on_block_exit	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^struct win_iocp_io_service::work_finished_on_block_exit$/;"	s	class:boost::asio::detail::win_iocp_io_service	file:
work_io_service_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  boost::asio::detail::scoped_ptr<boost::asio::io_service> work_io_service_;$/;"	m	class:boost::asio::detail::resolver_service_base	access:private
work_io_service_impl_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  io_service_impl& work_io_service_impl_;$/;"	m	class:boost::asio::detail::resolver_service_base	access:private
work_io_service_runner	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^  work_io_service_runner(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::resolver_service_base::work_io_service_runner	access:public	signature:(boost::asio::io_service& io_service)
work_io_service_runner	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^class resolver_service_base::work_io_service_runner$/;"	c	class:boost::asio::detail::resolver_service_base	file:
work_started	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void work_started()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
work_started	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void work_started()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
work_thread_	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  boost::asio::detail::scoped_ptr<boost::asio::detail::thread> work_thread_;$/;"	m	class:boost::asio::detail::resolver_service_base	access:private
would_block	/usr/include/boost/asio/error.hpp	/^  would_block = BOOST_ASIO_SOCKET_ERROR(EWOULDBLOCK)$/;"	e	enum:boost::asio::error::basic_errors
wrap	/usr/include/boost/asio/impl/io_service.hpp	/^io_service::wrap(Handler handler)$/;"	f	class:boost::asio::io_service	signature:(Handler handler)
wrap	/usr/include/boost/asio/io_service.hpp	/^  wrap(Handler handler);$/;"	p	class:boost::asio::io_service	access:public	signature:(Handler handler)
wrap	/usr/include/boost/asio/strand.hpp	/^  wrap(Handler handler)$/;"	f	class:boost::asio::io_service::strand	access:public	signature:(Handler handler)
wrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  wrapped_handler(Dispatcher dispatcher, Handler& handler)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(Dispatcher dispatcher, Handler& handler)
wrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  wrapped_handler(const wrapped_handler& other)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const wrapped_handler& other)
wrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  wrapped_handler(wrapped_handler&& other)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(wrapped_handler&& other)
wrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^class wrapped_handler$/;"	c	namespace:boost::asio::detail
write	/usr/include/boost/asio/impl/write.hpp	/^inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers)$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers)
write	/usr/include/boost/asio/impl/write.hpp	/^inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition)
write	/usr/include/boost/asio/impl/write.hpp	/^inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write	/usr/include/boost/asio/impl/write.hpp	/^inline std::size_t write(SyncWriteStream& s,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, boost::asio::basic_streambuf<Allocator>& b)
write	/usr/include/boost/asio/impl/write.hpp	/^inline std::size_t write(SyncWriteStream& s,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
write	/usr/include/boost/asio/impl/write.hpp	/^inline std::size_t write(SyncWriteStream& s,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, boost::asio::basic_streambuf<Allocator>& b, boost::system::error_code& ec)
write	/usr/include/boost/asio/impl/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
write	/usr/include/boost/asio/impl/write.hpp	/^std::size_t write(SyncWriteStream& s,$/;"	f	namespace:boost::asio	signature:(SyncWriteStream& s, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
write	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL want write(const boost::asio::const_buffer& data,$/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:(const boost::asio::const_buffer& data, boost::system::error_code& ec, std::size_t& bytes_transferred)
write	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::want engine::write(const boost::asio::const_buffer& data,$/;"	f	class:boost::asio::ssl::detail::engine	signature:(const boost::asio::const_buffer& data, boost::system::error_code& ec, std::size_t& bytes_transferred)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b);$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b, boost::system::error_code& ec)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers);$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  write_func  write_;$/;"	m	class:boost::asio::ssl::old::detail::openssl_operation	access:private
write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b)
write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, boost::system::error_code& ec)
write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers)
write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition)
write_at	/usr/include/boost/asio/impl/write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_at	/usr/include/boost/asio/impl/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
write_at	/usr/include/boost/asio/impl/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, boost::system::error_code& ec)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(AsyncRandomAccessWriteDevice& device,$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(AsyncRandomAccessWriteDevice& device, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, WriteHandler& handler)
write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(AsyncRandomAccessWriteDevice& device,$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(AsyncRandomAccessWriteDevice& device, boost::uint64_t offset, const boost::array<Elem, 2>& buffers, CompletionCondition completion_condition, WriteHandler& handler)
write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(AsyncRandomAccessWriteDevice& device,$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(AsyncRandomAccessWriteDevice& device, boost::uint64_t offset, const boost::asio::const_buffers_1& buffers, CompletionCondition completion_condition, WriteHandler& handler)
write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(AsyncRandomAccessWriteDevice& device,$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(AsyncRandomAccessWriteDevice& device, boost::uint64_t offset, const boost::asio::mutable_buffers_1& buffers, CompletionCondition completion_condition, WriteHandler& handler)
write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(AsyncRandomAccessWriteDevice& device,$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(AsyncRandomAccessWriteDevice& device, boost::uint64_t offset, const std::array<Elem, 2>& buffers, CompletionCondition completion_condition, WriteHandler& handler)
write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(const write_at_op& other)$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(const write_at_op& other)
write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_op(write_at_op&& other)$/;"	f	class:boost::asio::detail::write_at_op	access:public	signature:(write_at_op&& other)
write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^  class write_at_op$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^  class write_at_op<AsyncRandomAccessWriteDevice, boost::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^  class write_at_op<AsyncRandomAccessWriteDevice, boost::asio::const_buffers_1,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^  class write_at_op<AsyncRandomAccessWriteDevice, std::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
write_at_op	/usr/include/boost/asio/impl/write_at.hpp	/^  class write_at_op<AsyncRandomAccessWriteDevice,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
write_at_streambuf_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_streambuf_op($/;"	f	class:boost::asio::detail::write_at_streambuf_op	access:public	signature:( boost::asio::basic_streambuf<Allocator>& streambuf, WriteHandler& handler)
write_at_streambuf_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_streambuf_op(const write_at_streambuf_op& other)$/;"	f	class:boost::asio::detail::write_at_streambuf_op	access:public	signature:(const write_at_streambuf_op& other)
write_at_streambuf_op	/usr/include/boost/asio/impl/write_at.hpp	/^    write_at_streambuf_op(write_at_streambuf_op&& other)$/;"	f	class:boost::asio::detail::write_at_streambuf_op	access:public	signature:(write_at_streambuf_op&& other)
write_at_streambuf_op	/usr/include/boost/asio/impl/write_at.hpp	/^  class write_at_streambuf_op$/;"	c	namespace:boost::asio::detail
write_descriptor_	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  int write_descriptor_;$/;"	m	class:boost::asio::detail::eventfd_select_interrupter	access:private
write_descriptor_	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^  int write_descriptor_;$/;"	m	struct:boost::asio::detail::signal_state	file:	access:public
write_descriptor_	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  int write_descriptor_;$/;"	m	class:boost::asio::detail::pipe_select_interrupter	access:private
write_descriptor_	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_type write_descriptor_;$/;"	m	class:boost::asio::detail::socket_select_interrupter	access:private
write_func	/usr/include/boost/asio/ssl/old/detail/openssl_operation.hpp	/^  typedef boost::function<int (bool, int)> write_func;$/;"	t	class:boost::asio::ssl::old::detail::openssl_operation	access:private
write_line	/usr/include/boost/asio/detail/handler_tracking.hpp	/^  BOOST_ASIO_DECL static void write_line(const char* format, ...);$/;"	p	class:boost::asio::detail::handler_tracking	access:public	signature:(const char* format, ...)
write_line	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^void handler_tracking::write_line(const char* format, ...)$/;"	f	class:boost::asio::detail::handler_tracking	signature:(const char* format, ...)
write_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:boost::asio::detail::dev_poll_reactor::op_types
write_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:boost::asio::detail::epoll_reactor::op_types
write_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:boost::asio::detail::kqueue_reactor::op_types
write_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1, except_op = 2,$/;"	e	enum:boost::asio::detail::select_reactor::op_types
write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(AsyncWriteStream& stream, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(AsyncWriteStream& stream, const ConstBufferSequence& buffers, CompletionCondition completion_condition, WriteHandler& handler)
write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(AsyncWriteStream& stream, const boost::array<Elem, 2>& buffers,$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(AsyncWriteStream& stream, const boost::array<Elem, 2>& buffers, CompletionCondition completion_condition, WriteHandler& handler)
write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(AsyncWriteStream& stream, const std::array<Elem, 2>& buffers,$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(AsyncWriteStream& stream, const std::array<Elem, 2>& buffers, CompletionCondition completion_condition, WriteHandler& handler)
write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(AsyncWriteStream& stream,$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(AsyncWriteStream& stream, const boost::asio::const_buffers_1& buffers, CompletionCondition completion_condition, WriteHandler& handler)
write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(AsyncWriteStream& stream,$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(AsyncWriteStream& stream, const boost::asio::mutable_buffers_1& buffers, CompletionCondition completion_condition, WriteHandler& handler)
write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(const write_op& other)$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(const write_op& other)
write_op	/usr/include/boost/asio/impl/write.hpp	/^    write_op(write_op&& other)$/;"	f	class:boost::asio::detail::write_op	access:public	signature:(write_op&& other)
write_op	/usr/include/boost/asio/impl/write.hpp	/^  class write_op$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
write_op	/usr/include/boost/asio/impl/write.hpp	/^  class write_op<AsyncWriteStream, boost::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
write_op	/usr/include/boost/asio/impl/write.hpp	/^  class write_op<AsyncWriteStream, boost::asio::const_buffers_1,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
write_op	/usr/include/boost/asio/impl/write.hpp	/^  class write_op<AsyncWriteStream, boost::asio::mutable_buffers_1,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
write_op	/usr/include/boost/asio/impl/write.hpp	/^  class write_op<AsyncWriteStream, std::array<Elem, 2>,$/;"	c	namespace:boost::asio::detail	inherits:detail::base_from_completion_cond
write_op	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^  write_op(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::detail::write_op	access:public	signature:(const ConstBufferSequence& buffers)
write_op	/usr/include/boost/asio/ssl/detail/write_op.hpp	/^class write_op$/;"	c	namespace:boost::asio::ssl::detail
write_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_descriptor_service	access:public	signature:(implementation_type& impl, const null_buffers&, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/serial_port_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^  std::size_t write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Const_Buffers& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/ssl/old/stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/ssl/old/stream_service.hpp	/^  std::size_t write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::old::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, boost::system::error_code& ec)
write_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t write_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const ConstBufferSequence& buffers)
write_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t write_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  std::size_t write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^    write_some_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_write_stream::write_some_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, const ConstBufferSequence& buffers, WriteHandler handler)
write_some_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^  class write_some_handler$/;"	c	class:boost::asio::buffered_write_stream	access:public
write_stream_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef buffered_write_stream<Stream> write_stream_type;$/;"	t	class:boost::asio::buffered_stream	access:private
write_streambuf_handler	/usr/include/boost/asio/impl/write.hpp	/^    write_streambuf_handler(boost::asio::basic_streambuf<Allocator>& streambuf,$/;"	f	class:boost::asio::detail::write_streambuf_handler	access:public	signature:(boost::asio::basic_streambuf<Allocator>& streambuf, WriteHandler& handler)
write_streambuf_handler	/usr/include/boost/asio/impl/write.hpp	/^    write_streambuf_handler(const write_streambuf_handler& other)$/;"	f	class:boost::asio::detail::write_streambuf_handler	access:public	signature:(const write_streambuf_handler& other)
write_streambuf_handler	/usr/include/boost/asio/impl/write.hpp	/^    write_streambuf_handler(write_streambuf_handler&& other)$/;"	f	class:boost::asio::detail::write_streambuf_handler	access:public	signature:(write_streambuf_handler&& other)
write_streambuf_handler	/usr/include/boost/asio/impl/write.hpp	/^  class write_streambuf_handler$/;"	c	namespace:boost::asio::detail
zero_arg_handler_test	/usr/include/boost/asio/detail/handler_type_requirements.hpp	/^char (&zero_arg_handler_test(Handler, ...))[2];$/;"	p	namespace:boost::asio::detail	signature:(Handler, ...)
~auto_addrinfo	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^    ~auto_addrinfo()$/;"	f	class:boost::asio::detail::resolver_service_base::auto_addrinfo	access:public	signature:()
~auto_func_base_ptr	/usr/include/boost/asio/detail/posix_thread.hpp	/^    ~auto_func_base_ptr() { delete ptr; }$/;"	f	struct:boost::asio::detail::posix_thread::auto_func_base_ptr	access:public	signature:()
~auto_func_base_ptr	/usr/include/boost/asio/detail/win_thread.hpp	/^    ~auto_func_base_ptr() { delete ptr; }$/;"	f	struct:boost::asio::detail::win_thread::auto_func_base_ptr	access:public	signature:()
~auto_handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    ~auto_handle() { if (handle) ::CloseHandle(handle); }$/;"	f	struct:boost::asio::detail::win_iocp_io_service::auto_handle	access:public	signature:()
~auto_service_ptr	/usr/include/boost/asio/detail/service_registry.hpp	/^    ~auto_service_ptr() { destroy(ptr_); }$/;"	f	struct:boost::asio::detail::service_registry::auto_service_ptr	access:public	signature:()
~base_handler	/usr/include/boost/asio/ssl/old/detail/openssl_stream_service.hpp	/^    ~base_handler()$/;"	f	class:boost::asio::ssl::old::detail::openssl_stream_service::base_handler	access:public	signature:()
~basic_context	/usr/include/boost/asio/ssl/old/basic_context.hpp	/^  ~basic_context()$/;"	f	class:boost::asio::ssl::old::basic_context	access:public	signature:()
~basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  ~basic_descriptor()$/;"	f	class:boost::asio::posix::basic_descriptor	access:protected	signature:()
~basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  ~basic_handle()$/;"	f	class:boost::asio::windows::basic_handle	access:protected	signature:()
~basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  ~basic_io_object()$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:()
~basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  ~basic_socket()$/;"	f	class:boost::asio::basic_socket	access:protected	signature:()
~basic_socket_streambuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  virtual ~basic_socket_streambuf()$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:()
~buffer_debug_check	/usr/include/boost/asio/buffer.hpp	/^  ~buffer_debug_check()$/;"	f	class:boost::asio::detail::buffer_debug_check	access:public	signature:()
~buffer_resize_guard	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  ~buffer_resize_guard()$/;"	f	class:boost::asio::detail::buffer_resize_guard	access:public	signature:()
~completion	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    BOOST_ASIO_DECL ~completion();$/;"	p	class:boost::asio::detail::handler_tracking::completion	access:public	signature:()
~completion	/usr/include/boost/asio/detail/impl/handler_tracking.ipp	/^handler_tracking::completion::~completion()$/;"	f	class:boost::asio::detail::handler_tracking::completion	signature:()
~context	/usr/include/boost/asio/detail/call_stack.hpp	/^    ~context()$/;"	f	class:boost::asio::detail::call_stack::context	access:public	signature:()
~context	/usr/include/boost/asio/ssl/impl/context.ipp	/^context::~context()$/;"	f	class:boost::asio::ssl::context	signature:()
~context_base	/usr/include/boost/asio/ssl/context_base.hpp	/^  ~context_base()$/;"	f	class:boost::asio::ssl::context_base	access:protected	signature:()
~deadline_timer_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  ~deadline_timer_service()$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:()
~descriptor_base	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  ~descriptor_base()$/;"	f	class:boost::asio::posix::descriptor_base	access:protected	signature:()
~dev_poll_reactor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  BOOST_ASIO_DECL ~dev_poll_reactor();$/;"	p	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
~dev_poll_reactor	/usr/include/boost/asio/detail/impl/dev_poll_reactor.ipp	/^dev_poll_reactor::~dev_poll_reactor()$/;"	f	class:boost::asio::detail::dev_poll_reactor	signature:()
~do_init	/usr/include/boost/asio/ssl/detail/impl/openssl_init.ipp	/^  ~do_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init_base::do_init	access:public	signature:()
~engine	/usr/include/boost/asio/ssl/detail/engine.hpp	/^  BOOST_ASIO_DECL ~engine();$/;"	p	class:boost::asio::ssl::detail::engine	access:public	signature:()
~engine	/usr/include/boost/asio/ssl/detail/impl/engine.ipp	/^engine::~engine()$/;"	f	class:boost::asio::ssl::detail::engine	signature:()
~epoll_reactor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  BOOST_ASIO_DECL ~epoll_reactor();$/;"	p	class:boost::asio::detail::epoll_reactor	access:public	signature:()
~epoll_reactor	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^epoll_reactor::~epoll_reactor()$/;"	f	class:boost::asio::detail::epoll_reactor	signature:()
~eventfd_select_interrupter	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  BOOST_ASIO_DECL ~eventfd_select_interrupter();$/;"	p	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
~eventfd_select_interrupter	/usr/include/boost/asio/detail/impl/eventfd_select_interrupter.ipp	/^eventfd_select_interrupter::~eventfd_select_interrupter()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	signature:()
~func_base	/usr/include/boost/asio/detail/posix_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:boost::asio::detail::posix_thread::func_base	access:public	signature:()
~func_base	/usr/include/boost/asio/detail/win_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:boost::asio::detail::win_thread::func_base	access:public	signature:()
~func_base	/usr/include/boost/asio/detail/wince_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:boost::asio::detail::wince_thread::func_base	access:public	signature:()
~gcc_arm_fenced_block	/usr/include/boost/asio/detail/gcc_arm_fenced_block.hpp	/^  ~gcc_arm_fenced_block()$/;"	f	class:boost::asio::detail::gcc_arm_fenced_block	access:public	signature:()
~gcc_hppa_fenced_block	/usr/include/boost/asio/detail/gcc_hppa_fenced_block.hpp	/^  ~gcc_hppa_fenced_block()$/;"	f	class:boost::asio::detail::gcc_hppa_fenced_block	access:public	signature:()
~gcc_sync_fenced_block	/usr/include/boost/asio/detail/gcc_sync_fenced_block.hpp	/^  ~gcc_sync_fenced_block()$/;"	f	class:boost::asio::detail::gcc_sync_fenced_block	access:public	signature:()
~gcc_x86_fenced_block	/usr/include/boost/asio/detail/gcc_x86_fenced_block.hpp	/^  ~gcc_x86_fenced_block()$/;"	f	class:boost::asio::detail::gcc_x86_fenced_block	access:public	signature:()
~hash_map	/usr/include/boost/asio/detail/hash_map.hpp	/^  ~hash_map()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
~io_service	/usr/include/boost/asio/impl/io_service.ipp	/^io_service::~io_service()$/;"	f	class:boost::asio::io_service	signature:()
~io_service	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL ~io_service();$/;"	p	class:boost::asio::io_service	access:public	signature:()
~keyword_tss_ptr	/usr/include/boost/asio/detail/keyword_tss_ptr.hpp	/^  ~keyword_tss_ptr()$/;"	f	class:boost::asio::detail::keyword_tss_ptr	access:public	signature:()
~kqueue_reactor	/usr/include/boost/asio/detail/impl/kqueue_reactor.ipp	/^kqueue_reactor::~kqueue_reactor()$/;"	f	class:boost::asio::detail::kqueue_reactor	signature:()
~kqueue_reactor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  BOOST_ASIO_DECL ~kqueue_reactor();$/;"	p	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
~local_free_on_block_exit	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^  ~local_free_on_block_exit()$/;"	f	class:boost::asio::detail::local_free_on_block_exit	access:public	signature:()
~macos_fenced_block	/usr/include/boost/asio/detail/macos_fenced_block.hpp	/^  ~macos_fenced_block()$/;"	f	class:boost::asio::detail::macos_fenced_block	access:public	signature:()
~noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^  ~noncopyable() {}$/;"	f	class:boost::asio::detail::noncopyable	access:protected	signature:()
~null_event	/usr/include/boost/asio/detail/null_event.hpp	/^  ~null_event()$/;"	f	class:boost::asio::detail::null_event	access:public	signature:()
~null_fenced_block	/usr/include/boost/asio/detail/null_fenced_block.hpp	/^  ~null_fenced_block()$/;"	f	class:boost::asio::detail::null_fenced_block	access:public	signature:()
~null_mutex	/usr/include/boost/asio/detail/null_mutex.hpp	/^  ~null_mutex()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
~null_signal_blocker	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  ~null_signal_blocker()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
~null_thread	/usr/include/boost/asio/detail/null_thread.hpp	/^  ~null_thread()$/;"	f	class:boost::asio::detail::null_thread	access:public	signature:()
~null_tss_ptr	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  ~null_tss_ptr()$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:()
~object_pool	/usr/include/boost/asio/detail/object_pool.hpp	/^  ~object_pool()$/;"	f	class:boost::asio::detail::object_pool	access:public	signature:()
~on_dispatch_exit	/usr/include/boost/asio/detail/impl/strand_service.hpp	/^  ~on_dispatch_exit()$/;"	f	struct:boost::asio::detail::strand_service::on_dispatch_exit	access:public	signature:()
~on_do_complete_exit	/usr/include/boost/asio/detail/impl/strand_service.ipp	/^  ~on_do_complete_exit()$/;"	f	struct:boost::asio::detail::strand_service::on_do_complete_exit	access:public	signature:()
~op_queue	/usr/include/boost/asio/detail/op_queue.hpp	/^  ~op_queue()$/;"	f	class:boost::asio::detail::op_queue	access:public	signature:()
~openssl_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  ~openssl_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init	access:public	signature:()
~overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  ~overlapped_ptr()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
~overlapped_wrapper	/usr/include/boost/asio/detail/impl/win_iocp_handle_service.ipp	/^  ~overlapped_wrapper()$/;"	f	class:boost::asio::detail::win_iocp_handle_service::overlapped_wrapper	access:public	signature:()
~password_callback_base	/usr/include/boost/asio/ssl/detail/password_callback.hpp	/^  virtual ~password_callback_base()$/;"	f	class:boost::asio::ssl::detail::password_callback_base	access:public	signature:()
~perform_io_cleanup_on_block_exit	/usr/include/boost/asio/detail/impl/epoll_reactor.ipp	/^  ~perform_io_cleanup_on_block_exit()$/;"	f	struct:boost::asio::detail::epoll_reactor::perform_io_cleanup_on_block_exit	access:public	signature:()
~pipe_select_interrupter	/usr/include/boost/asio/detail/impl/pipe_select_interrupter.ipp	/^pipe_select_interrupter::~pipe_select_interrupter()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	signature:()
~pipe_select_interrupter	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  BOOST_ASIO_DECL ~pipe_select_interrupter();$/;"	p	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
~posix_event	/usr/include/boost/asio/detail/posix_event.hpp	/^  ~posix_event()$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:()
~posix_mutex	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  ~posix_mutex()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
~posix_signal_blocker	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  ~posix_signal_blocker()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
~posix_thread	/usr/include/boost/asio/detail/impl/posix_thread.ipp	/^posix_thread::~posix_thread()$/;"	f	class:boost::asio::detail::posix_thread	signature:()
~posix_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^  BOOST_ASIO_DECL ~posix_thread();$/;"	p	class:boost::asio::detail::posix_thread	access:public	signature:()
~posix_tss_ptr	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  ~posix_tss_ptr()$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:()
~resolve_op	/usr/include/boost/asio/detail/resolve_op.hpp	/^  ~resolve_op()$/;"	f	class:boost::asio::detail::resolve_op	access:public	signature:()
~resolver_query_base	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  ~resolver_query_base()$/;"	f	class:boost::asio::ip::resolver_query_base	access:protected	signature:()
~resolver_service_base	/usr/include/boost/asio/detail/impl/resolver_service_base.ipp	/^resolver_service_base::~resolver_service_base()$/;"	f	class:boost::asio::detail::resolver_service_base	signature:()
~resolver_service_base	/usr/include/boost/asio/detail/resolver_service_base.hpp	/^  BOOST_ASIO_DECL ~resolver_service_base();$/;"	p	class:boost::asio::detail::resolver_service_base	access:public	signature:()
~scoped_lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  ~scoped_lock()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
~scoped_ptr	/usr/include/boost/asio/detail/scoped_ptr.hpp	/^  ~scoped_ptr()$/;"	f	class:boost::asio::detail::scoped_ptr	access:public	signature:()
~select_reactor	/usr/include/boost/asio/detail/impl/select_reactor.ipp	/^select_reactor::~select_reactor()$/;"	f	class:boost::asio::detail::select_reactor	signature:()
~select_reactor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  BOOST_ASIO_DECL ~select_reactor();$/;"	p	class:boost::asio::detail::select_reactor	access:public	signature:()
~serial_port_base	/usr/include/boost/asio/serial_port_base.hpp	/^  ~serial_port_base()$/;"	f	class:boost::asio::serial_port_base	access:protected	signature:()
~service	/usr/include/boost/asio/impl/io_service.ipp	/^io_service::service::~service()$/;"	f	class:boost::asio::io_service::service	signature:()
~service	/usr/include/boost/asio/io_service.hpp	/^  BOOST_ASIO_DECL virtual ~service();$/;"	p	class:boost::asio::io_service::service	access:protected	signature:()
~service_registry	/usr/include/boost/asio/detail/impl/service_registry.ipp	/^service_registry::~service_registry()$/;"	f	class:boost::asio::detail::service_registry	signature:()
~service_registry	/usr/include/boost/asio/detail/service_registry.hpp	/^  BOOST_ASIO_DECL ~service_registry();$/;"	p	class:boost::asio::detail::service_registry	access:public	signature:()
~signal_set_service	/usr/include/boost/asio/detail/impl/signal_set_service.ipp	/^signal_set_service::~signal_set_service()$/;"	f	class:boost::asio::detail::signal_set_service	signature:()
~signal_set_service	/usr/include/boost/asio/detail/signal_set_service.hpp	/^  BOOST_ASIO_DECL ~signal_set_service();$/;"	p	class:boost::asio::detail::signal_set_service	access:public	signature:()
~socket_base	/usr/include/boost/asio/socket_base.hpp	/^  ~socket_base()$/;"	f	class:boost::asio::socket_base	access:protected	signature:()
~socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^  ~socket_holder()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
~socket_select_interrupter	/usr/include/boost/asio/detail/impl/socket_select_interrupter.ipp	/^socket_select_interrupter::~socket_select_interrupter()$/;"	f	class:boost::asio::detail::socket_select_interrupter	signature:()
~socket_select_interrupter	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  BOOST_ASIO_DECL ~socket_select_interrupter();$/;"	p	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
~solaris_fenced_block	/usr/include/boost/asio/detail/solaris_fenced_block.hpp	/^  ~solaris_fenced_block()$/;"	f	class:boost::asio::detail::solaris_fenced_block	access:public	signature:()
~strand	/usr/include/boost/asio/strand.hpp	/^  ~strand()$/;"	f	class:boost::asio::io_service::strand	access:public	signature:()
~stream	/usr/include/boost/asio/ssl/old/stream.hpp	/^  ~stream()$/;"	f	class:boost::asio::ssl::old::stream	access:public	signature:()
~stream_base	/usr/include/boost/asio/ssl/stream_base.hpp	/^  ~stream_base()$/;"	f	class:boost::asio::ssl::stream_base	access:protected	signature:()
~stream_core	/usr/include/boost/asio/ssl/detail/stream_core.hpp	/^  ~stream_core()$/;"	f	struct:boost::asio::ssl::detail::stream_core	access:public	signature:()
~task_cleanup	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  ~task_cleanup()$/;"	f	struct:boost::asio::detail::task_io_service::task_cleanup	access:public	signature:()
~task_io_service_operation	/usr/include/boost/asio/detail/task_io_service_operation.hpp	/^  ~task_io_service_operation()$/;"	f	class:boost::asio::detail::BOOST_ASIO_INHERIT_TRACKED_HANDLER	access:protected	signature:()
~thread_info_base	/usr/include/boost/asio/detail/thread_info_base.hpp	/^  ~thread_info_base()$/;"	f	class:boost::asio::detail::thread_info_base	access:public	signature:()
~timer_queue	/usr/include/boost/asio/detail/impl/timer_queue_ptime.ipp	/^timer_queue<time_traits<boost::posix_time::ptime> >::~timer_queue()$/;"	f	class:boost::asio::detail::timer_queue	signature:()
~timer_queue	/usr/include/boost/asio/detail/timer_queue_ptime.hpp	/^  BOOST_ASIO_DECL virtual ~timer_queue();$/;"	p	class:boost::asio::detail::timer_queue	access:public	signature:()
~timer_queue_base	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual ~timer_queue_base() {}$/;"	f	class:boost::asio::detail::timer_queue_base	access:public	signature:()
~tracked_handler	/usr/include/boost/asio/detail/handler_tracking.hpp	/^    ~tracked_handler() {}$/;"	f	class:boost::asio::detail::handler_tracking::tracked_handler	access:protected	signature:()
~verify_callback_base	/usr/include/boost/asio/ssl/detail/verify_callback.hpp	/^  virtual ~verify_callback_base()$/;"	f	class:boost::asio::ssl::detail::verify_callback_base	access:public	signature:()
~win_event	/usr/include/boost/asio/detail/win_event.hpp	/^  ~win_event()$/;"	f	class:boost::asio::detail::win_event	access:public	signature:()
~win_fd_set_adapter	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  ~win_fd_set_adapter()$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:()
~win_fenced_block	/usr/include/boost/asio/detail/win_fenced_block.hpp	/^  ~win_fenced_block()$/;"	f	class:boost::asio::detail::win_fenced_block	access:public	signature:()
~win_iocp_operation	/usr/include/boost/asio/detail/win_iocp_operation.hpp	/^  ~win_iocp_operation()$/;"	f	class:boost::asio::detail::win_iocp_operation	access:protected	signature:()
~win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  ~win_iocp_overlapped_ptr()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
~win_mutex	/usr/include/boost/asio/detail/win_mutex.hpp	/^  ~win_mutex()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
~win_thread	/usr/include/boost/asio/detail/impl/win_thread.ipp	/^win_thread::~win_thread()$/;"	f	class:boost::asio::detail::win_thread	signature:()
~win_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^  BOOST_ASIO_DECL ~win_thread();$/;"	p	class:boost::asio::detail::win_thread	access:public	signature:()
~win_tss_ptr	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  ~win_tss_ptr()$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:()
~wince_thread	/usr/include/boost/asio/detail/wince_thread.hpp	/^  ~wince_thread()$/;"	f	class:boost::asio::detail::wince_thread	access:public	signature:()
~winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^  ~winsock_init()$/;"	f	class:boost::asio::detail::winsock_init	access:public	signature:()
~work	/usr/include/boost/asio/impl/io_service.hpp	/^inline io_service::work::~work()$/;"	f	class:boost::asio::io_service::work	signature:()
~work	/usr/include/boost/asio/io_service.hpp	/^  ~work();$/;"	p	class:boost::asio::io_service::work	access:public	signature:()
~work_cleanup	/usr/include/boost/asio/detail/impl/task_io_service.ipp	/^  ~work_cleanup()$/;"	f	struct:boost::asio::detail::task_io_service::work_cleanup	access:public	signature:()
~work_finished_on_block_exit	/usr/include/boost/asio/detail/impl/win_iocp_io_service.ipp	/^  ~work_finished_on_block_exit()$/;"	f	struct:boost::asio::detail::win_iocp_io_service::work_finished_on_block_exit	access:public	signature:()
