!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_INDIRECT_CONTAINER_NULLABLE_HPP	/usr/include/boost/ptr_container/nullable.hpp	14;"	d
BOOST_MOVE_HPP_INCLUDED	/usr/include/boost/ptr_container/detail/move.hpp	9;"	d
BOOST_MOVE_PTR_ARRAYS_HPP_INCLUDED	/usr/include/boost/ptr_container/detail/is_convertible.hpp	14;"	d
BOOST_MOVE_PTR_DEFAULT_DELETER_HPP_INCLUDED	/usr/include/boost/ptr_container/detail/default_deleter.hpp	12;"	d
BOOST_PTR_CONTAINER_CLONE_ALLOCATOR_HPP	/usr/include/boost/ptr_container/clone_allocator.hpp	13;"	d
BOOST_PTR_CONTAINER_DEFINE_CONSTRUCTORS	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	715;"	d
BOOST_PTR_CONTAINER_DEFINE_COPY_CONSTRUCTORS	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	703;"	d
BOOST_PTR_CONTAINER_DEFINE_NON_INHERITED_MEMBERS	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	728;"	d
BOOST_PTR_CONTAINER_DEFINE_RELEASE	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	665;"	d
BOOST_PTR_CONTAINER_DEFINE_RELEASE	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	672;"	d
BOOST_PTR_CONTAINER_DEFINE_RELEASE_AND_CLONE	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	680;"	d
BOOST_PTR_CONTAINER_DEFINE_SEQEUENCE_MEMBERS	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	732;"	d
BOOST_PTR_CONTAINER_DETAIL_ASSOCIATIVE_PTR_CONTAINER_HPP	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	14;"	d
BOOST_PTR_CONTAINER_DETAIL_META_FUNCTIONS	/usr/include/boost/ptr_container/detail/meta_functions.hpp	13;"	d
BOOST_PTR_CONTAINER_DETAIL_PTR_MAP_ADAPTER_HPP	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	13;"	d
BOOST_PTR_CONTAINER_DETAIL_REVERSIBLE_PTR_CONTAINER_HPP	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	14;"	d
BOOST_PTR_CONTAINER_DETAIL_SERIALIZE_PTR_MAP_ADAPTER_HPP	/usr/include/boost/ptr_container/detail/serialize_ptr_map_adapter.hpp	7;"	d
BOOST_PTR_CONTAINER_DETAIL_SERIALIZE_REVERSIBLE_PTR_CONTAINER_HPP	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	7;"	d
BOOST_PTR_CONTAINER_DETAIL_SERIALIZE_XML_NAMES	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	13;"	d
BOOST_PTR_CONTAINER_DETAIL_THROW_EXCEPTION	/usr/include/boost/ptr_container/detail/throw_exception.hpp	13;"	d
BOOST_PTR_CONTAINER_DETAIL_VOID_PTR_ITERATOR_HPP	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	13;"	d
BOOST_PTR_CONTAINER_EXCEPTION_HPP	/usr/include/boost/ptr_container/exception.hpp	13;"	d
BOOST_PTR_CONTAINER_HPP	/usr/include/boost/ptr_container/ptr_container.hpp	13;"	d
BOOST_PTR_CONTAINER_INDIRECT_FUN_HPP	/usr/include/boost/ptr_container/indirect_fun.hpp	13;"	d
BOOST_PTR_CONTAINER_MAP_ITERATOR_HPP	/usr/include/boost/ptr_container/detail/map_iterator.hpp	13;"	d
BOOST_PTR_CONTAINER_NO_EXCEPTIONS	/usr/include/boost/ptr_container/detail/throw_exception.hpp	19;"	d
BOOST_PTR_CONTAINER_PTR_ARRAY_HPP	/usr/include/boost/ptr_container/ptr_array.hpp	13;"	d
BOOST_PTR_CONTAINER_PTR_CIRCULAR_BUFFER_HPP	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	13;"	d
BOOST_PTR_CONTAINER_PTR_DEQUE_HPP	/usr/include/boost/ptr_container/ptr_deque.hpp	13;"	d
BOOST_PTR_CONTAINER_PTR_INSERTER_HPP	/usr/include/boost/ptr_container/ptr_inserter.hpp	13;"	d
BOOST_PTR_CONTAINER_PTR_LIST_HPP	/usr/include/boost/ptr_container/ptr_list.hpp	13;"	d
BOOST_PTR_CONTAINER_PTR_MAP_HPP	/usr/include/boost/ptr_container/ptr_map.hpp	13;"	d
BOOST_PTR_CONTAINER_PTR_SEQUENCE_ADAPTER_HPP	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	13;"	d
BOOST_PTR_CONTAINER_PTR_SET_ADAPTER_HPP	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	13;"	d
BOOST_PTR_CONTAINER_PTR_SET_HPP	/usr/include/boost/ptr_container/ptr_set.hpp	13;"	d
BOOST_PTR_CONTAINER_PTR_UNORDERED_MAP_HPP	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	13;"	d
BOOST_PTR_CONTAINER_PTR_UNORDERED_SET_HPP	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	13;"	d
BOOST_PTR_CONTAINER_PTR_VECTOR_HPP	/usr/include/boost/ptr_container/ptr_vector.hpp	13;"	d
BOOST_PTR_CONTAINER_SCOPED_DELETER_HPP	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	13;"	d
BOOST_PTR_CONTAINER_SERIALIZE_HPP	/usr/include/boost/ptr_container/serialize_ptr_container.hpp	7;"	d
BOOST_PTR_CONTAINER_SERIALIZE_PTR_ARRAY_HPP	/usr/include/boost/ptr_container/serialize_ptr_array.hpp	7;"	d
BOOST_PTR_CONTAINER_SERIALIZE_PTR_CIRCULAR_BUFFER_HPP	/usr/include/boost/ptr_container/serialize_ptr_circular_buffer.hpp	13;"	d
BOOST_PTR_CONTAINER_SERIALIZE_PTR_DEQUE_HPP	/usr/include/boost/ptr_container/serialize_ptr_deque.hpp	7;"	d
BOOST_PTR_CONTAINER_SERIALIZE_PTR_LIST_HPP	/usr/include/boost/ptr_container/serialize_ptr_list.hpp	7;"	d
BOOST_PTR_CONTAINER_SERIALIZE_PTR_MAP_HPP	/usr/include/boost/ptr_container/serialize_ptr_map.hpp	7;"	d
BOOST_PTR_CONTAINER_SERIALIZE_PTR_SET_HPP	/usr/include/boost/ptr_container/serialize_ptr_set.hpp	7;"	d
BOOST_PTR_CONTAINER_SERIALIZE_PTR_UNORDERED_SET_HPP	/usr/include/boost/ptr_container/serialize_ptr_unordered_set.hpp	13;"	d
BOOST_PTR_CONTAINER_SERIALIZE_PTR_VECTOR_HPP	/usr/include/boost/ptr_container/serialize_ptr_vector.hpp	7;"	d
BOOST_PTR_CONTAINER_SERIALIZE_UNORDERED_PTR_MAP_HPP	/usr/include/boost/ptr_container/serialize_ptr_unordered_map.hpp	13;"	d
BOOST_PTR_CONTAINER_THROW_EXCEPTION	/usr/include/boost/ptr_container/detail/throw_exception.hpp	24;"	d
BOOST_PTR_CONTAINER_THROW_EXCEPTION	/usr/include/boost/ptr_container/detail/throw_exception.hpp	28;"	d
BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    BOOST_STATIC_CONSTANT(bool, value = type::value);$/;"	p	struct:boost::ptr_container_detail::move_ptrs::is_array_convertible	access:public	signature:(bool, value = type::value)
BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        BOOST_STATIC_CONSTANT( bool, allow_null = Config::allow_null );$/;"	p	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( bool, allow_null = Config::allow_null )
BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        BOOST_STATIC_CONSTANT(bool, value = is_pointer<T>::value || is_integral<T>::value );$/;"	p	struct:boost::ptr_container_detail::is_pointer_or_integral	access:public	signature:(bool, value = is_pointer<T>::value || is_integral<T>::value )
BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/nullable.hpp	/^            BOOST_STATIC_CONSTANT( T*, var );$/;"	p	struct:boost::is_nullable	access:private	signature:( T*, var )
BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/nullable.hpp	/^            BOOST_STATIC_CONSTANT(bool, value = sizeof( ptr_container_detail::is_nullable( var ) ) $/;"	p	struct:boost::is_nullable	access:public	signature:(bool, value = sizeof( ptr_container_detail::is_nullable( var ) ) == sizeof( type_traits::yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        BOOST_STATIC_CONSTANT( bool, allow_null = boost::is_nullable<T>::value );$/;"	p	struct:boost::ptr_container_detail::map_config	access:public	signature:( bool, allow_null = boost::is_nullable<T>::value )
BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        BOOST_STATIC_CONSTANT(bool, allow_null = boost::is_nullable<T>::value );$/;"	p	struct:boost::ptr_container_detail::sequence_config	access:public	signature:(bool, allow_null = boost::is_nullable<T>::value )
BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^       BOOST_STATIC_CONSTANT(bool, allow_null = false );$/;"	p	struct:boost::ptr_container_detail::set_config	access:public	signature:(bool, allow_null = false )
BOOST_STATIC_MOVE_PTR_HPP_INCLUDED	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	18;"	d
Cont	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef BOOST_DEDUCED_TYPENAME Config::void_container_type  Cont;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:private
Deleter	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef clone_deleter<null_cloner_type>                     Deleter;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:private
Ty_	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef BOOST_DEDUCED_TYPENAME Config::value_type Ty_;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:private
U	/usr/include/boost/ptr_container/ptr_array.hpp	/^        typedef BOOST_DEDUCED_TYPENAME remove_nullable<T>::type U;$/;"	t	class:boost::ptr_array	access:private
U	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     U;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
U	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                    U;$/;"	t	struct:boost::ptr_container_detail::sequence_config	access:public
add	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            void add( T* t )$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:( T* t )
advance	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        ForwardIterator advance( ForwardIterator begin, size_type n ) $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( ForwardIterator begin, size_type n )
allocate_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^        static U* allocate_clone( const U& r )$/;"	f	struct:boost::heap_clone_allocator	access:public	signature:( const U& r )
allocate_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^        static U* allocate_clone( const U& r )$/;"	f	struct:boost::view_clone_allocator	access:public	signature:( const U& r )
allocate_clone	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^            static Ty_* allocate_clone( const Ty_* x )$/;"	f	struct:boost::ptr_container_detail::reversible_ptr_container::null_clone_allocator	access:public	signature:( const Ty_* x )
allocate_clone_from_iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^            static Ty_* allocate_clone_from_iterator( Iter i )$/;"	f	struct:boost::ptr_container_detail::reversible_ptr_container::null_clone_allocator	access:public	signature:( Iter i )
allocator_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   allocator_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
allocator_type	/usr/include/boost/ptr_container/ptr_array.hpp	/^            typedef Allocator allocator_type;$/;"	t	class:boost::ptr_container_detail::ptr_array_impl	access:public
allocator_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename base_type::allocator_type allocator_type;$/;"	t	class:boost::ptr_circular_buffer	access:public
allocator_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     allocator_type;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
allocator_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    allocator_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
allocator_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    allocator_type;$/;"	t	class:boost::ptr_map_adapter	access:public
allocator_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    allocator_type;$/;"	t	class:boost::ptr_multimap_adapter	access:public
allocator_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                                                              allocator_type;$/;"	t	class:boost::ptr_sequence_adapter	access:public
allocator_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                    allocator_type;$/;"	t	struct:boost::ptr_container_detail::sequence_config	access:public
allocator_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                       allocator_type;        $/;"	t	class:boost::ptr_multiset_adapter	access:public
allocator_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                     allocator_type;        $/;"	t	class:boost::ptr_set_adapter	access:public
allocator_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    allocator_type;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
array_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    array_deleter() : base(do_delete) { }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter	access:public	signature:()
array_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^struct array_deleter $/;"	s	namespace:boost::ptr_container_detail::move_ptrs::ptr_container_detail	inherits:deleter_base
array_one	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        array_range array_one() \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:()
array_one	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        const_array_range array_one() const \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:() const
array_range	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef std::pair<pointer,size_type>                  array_range;$/;"	t	class:boost::ptr_circular_buffer	access:public
array_two	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        array_range array_two() \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:()
array_two	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        const_array_range array_two() const \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:() const
assign	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void assign( InputIterator first, InputIterator last ) \/\/ strong$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( InputIterator first, InputIterator last )
assign	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void assign( capacity_type capacity, $/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type capacity, InputIterator first, InputIterator last )
assign	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void assign( capacity_type capacity, size_type n, $/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type capacity, size_type n, value_type to_clone )
assign	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void assign( const Range& r ) \/\/ strong$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( const Range& r )
assign	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void assign( size_type n, value_type to_clone ) \/\/ strong$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( size_type n, value_type to_clone )
assign	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void assign( InputIterator first, InputIterator last ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( InputIterator first, InputIterator last )
assign	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void assign( const Range& r ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const Range& r )
associative_constructor_impl	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void associative_constructor_impl( I first, I last ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( I first, I last )
associative_container_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct associative_container_tag {};$/;"	s	namespace:boost::ptr_container_detail
associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator& a )
associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( SizeType n, unordered_associative_container_tag tag )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( SizeType n, unordered_associative_container_tag tag )
associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( const Compare& comp,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( const Compare& comp, const Allocator& a )
associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( const Hash& hash,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( const associative_ptr_container& r )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( const associative_ptr_container& r )
associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( const associative_ptr_container<C,V>& r )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( const associative_ptr_container<C,V>& r )
associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container()$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:()
associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        explicit associative_ptr_container( std::auto_ptr<PtrContainer> r )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( std::auto_ptr<PtrContainer> r )
associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^    class associative_ptr_container :$/;"	c	namespace:boost::ptr_container_detail	inherits:reversible_ptr_container
at	/usr/include/boost/ptr_container/ptr_array.hpp	/^        T& at()$/;"	f	class:boost::ptr_array	access:public	signature:()
at	/usr/include/boost/ptr_container/ptr_array.hpp	/^        const T& at() const$/;"	f	class:boost::ptr_array	access:public	signature:() const
at	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        const_mapped_reference at( const key_type& key ) const$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& key ) const
at	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        mapped_reference at( const key_type& key )  $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& key )
at	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        const_reference at( size_type n ) const$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type n ) const
at	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        reference at( size_type n )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type n )
auto_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   auto_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
auto_type	/usr/include/boost/ptr_container/ptr_array.hpp	/^                            auto_type;$/;"	t	class:boost::ptr_array	access:public
auto_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename base_type::auto_type      auto_type;$/;"	t	class:boost::ptr_circular_buffer	access:public
auto_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    auto_type;            $/;"	t	class:boost::ptr_multimap_adapter	access:public
auto_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    auto_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
auto_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    auto_type;$/;"	t	class:boost::ptr_map_adapter	access:public
auto_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_type::auto_type   auto_type;$/;"	t	class:boost::ptr_sequence_adapter	access:public
auto_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                       auto_type;$/;"	t	class:boost::ptr_multiset_adapter	access:public
auto_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                     auto_type;$/;"	t	class:boost::ptr_set_adapter	access:public
back	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_reference back() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
back	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        reference back()$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:()
back	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        const_reference back() const$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:() const
back	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        reference back()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
bad_index	/usr/include/boost/ptr_container/exception.hpp	/^        bad_index( const char* what ) : bad_ptr_container_operation( what )$/;"	f	class:boost::bad_index	access:public	signature:( const char* what )
bad_index	/usr/include/boost/ptr_container/exception.hpp	/^    class bad_index : public bad_ptr_container_operation$/;"	c	namespace:boost	inherits:bad_ptr_container_operation
bad_pointer	/usr/include/boost/ptr_container/exception.hpp	/^        bad_pointer( const char* text ) : bad_ptr_container_operation( text )$/;"	f	class:boost::bad_pointer	access:public	signature:( const char* text )
bad_pointer	/usr/include/boost/ptr_container/exception.hpp	/^        bad_pointer() : bad_ptr_container_operation( "Null pointer not allowed in a pointer container!" )$/;"	f	class:boost::bad_pointer	access:public	signature:()
bad_pointer	/usr/include/boost/ptr_container/exception.hpp	/^    class bad_pointer : public bad_ptr_container_operation$/;"	c	namespace:boost	inherits:bad_ptr_container_operation
bad_ptr_container_operation	/usr/include/boost/ptr_container/exception.hpp	/^        bad_ptr_container_operation( const char* what ) : what_( what )$/;"	f	class:boost::bad_ptr_container_operation	access:public	signature:( const char* what )
bad_ptr_container_operation	/usr/include/boost/ptr_container/exception.hpp	/^    class bad_ptr_container_operation : public std::exception$/;"	c	namespace:boost	inherits:std::exception
base	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    typedef deleter_base<T> base;$/;"	t	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::scalar_deleter	access:public
base	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    typedef deleter_base<element_type> base;$/;"	t	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter	access:public
base	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        Cont&       base()               { return c_; }$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
base	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const Cont& base() const         { return c_; }        $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:() const
base	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            VoidIter base() const$/;"	f	class:boost::void_ptr_iterator	access:public	signature:() const
base_class	/usr/include/boost/ptr_container/ptr_array.hpp	/^            base_class;$/;"	t	class:boost::ptr_array	access:private
base_class	/usr/include/boost/ptr_container/ptr_deque.hpp	/^          base_class;$/;"	t	class:boost::ptr_deque	access:private
base_class	/usr/include/boost/ptr_container/ptr_list.hpp	/^            base_class;$/;"	t	class:boost::ptr_list	access:private
base_class	/usr/include/boost/ptr_container/ptr_vector.hpp	/^            base_class;$/;"	t	class:boost::ptr_vector	access:private
base_type	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                base_type;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:private
base_type	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            base_type;$/;"	t	class:boost::ptr_map_iterator	access:private
base_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^            base_type;$/;"	t	class:boost::ptr_circular_buffer	access:private
base_type	/usr/include/boost/ptr_container/ptr_map.hpp	/^             base_type;$/;"	t	class:boost::ptr_multimap	access:private
base_type	/usr/include/boost/ptr_container/ptr_map.hpp	/^            base_type;$/;"	t	class:boost::ptr_map	access:private
base_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^             base_type;$/;"	t	class:boost::ptr_multimap_adapter	access:private
base_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            base_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:private
base_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            base_type;$/;"	t	class:boost::ptr_map_adapter	access:private
base_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^             base_type;$/;"	t	class:boost::ptr_sequence_adapter	access:private
base_type	/usr/include/boost/ptr_container/ptr_set.hpp	/^              base_type;$/;"	t	class:boost::ptr_multiset	access:private
base_type	/usr/include/boost/ptr_container/ptr_set.hpp	/^             base_type;$/;"	t	class:boost::ptr_set	access:private
base_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^              base_type;$/;"	t	class:boost::ptr_container_detail::ptr_set_adapter_base	access:private
base_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^            base_type;$/;"	t	class:boost::ptr_set_adapter	access:private
base_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^         typedef ptr_container_detail::ptr_set_adapter_base<Key,VoidPtrMultiSet,CloneAllocator,Ordered> base_type;$/;"	t	class:boost::ptr_multiset_adapter	access:private
base_type	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^            base_type;$/;"	t	class:boost::ptr_unordered_map	access:private
base_type	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^            base_type;$/;"	t	class:boost::ptr_unordered_multimap	access:private
base_type	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^              base_type;$/;"	t	class:boost::ptr_unordered_multiset	access:private
base_type	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^             base_type;$/;"	t	class:boost::ptr_unordered_set	access:private
begin	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_iterator begin() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:() const
begin	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_local_iterator begin( size_type n ) const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n ) const
begin	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        iterator begin()$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:()
begin	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        local_iterator begin( size_type n )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n )
begin	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_iterator begin() const      $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
begin	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator begin()            $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
begin	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            T** begin()$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:()
boost	/usr/include/boost/ptr_container/clone_allocator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^namespace boost { namespace ptr_container_detail { namespace move_ptrs {$/;"	n
boost	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^namespace boost { namespace ptr_container_detail { namespace move_ptrs {$/;"	n
boost	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/detail/move.hpp	/^namespace boost { namespace ptr_container_detail {$/;"	n
boost	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/detail/serialize_ptr_map_adapter.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^namespace boost { namespace ptr_container_detail {$/;"	n
boost	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/exception.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/indirect_fun.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/nullable.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_array.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_deque.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_list.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_map.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_set.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/ptr_vector.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/ptr_container/serialize_ptr_array.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/ptr_container/serialize_ptr_circular_buffer.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/ptr_container/serialize_ptr_deque.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/ptr_container/serialize_ptr_list.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/ptr_container/serialize_ptr_map.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/ptr_container/serialize_ptr_set.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/ptr_container/serialize_ptr_unordered_map.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/ptr_container/serialize_ptr_unordered_set.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/ptr_container/serialize_ptr_vector.hpp	/^namespace boost $/;"	n
boost::bad_index	/usr/include/boost/ptr_container/exception.hpp	/^    class bad_index : public bad_ptr_container_operation$/;"	c	namespace:boost	inherits:bad_ptr_container_operation
boost::bad_index::bad_index	/usr/include/boost/ptr_container/exception.hpp	/^        bad_index( const char* what ) : bad_ptr_container_operation( what )$/;"	f	class:boost::bad_index	access:public	signature:( const char* what )
boost::bad_pointer	/usr/include/boost/ptr_container/exception.hpp	/^    class bad_pointer : public bad_ptr_container_operation$/;"	c	namespace:boost	inherits:bad_ptr_container_operation
boost::bad_pointer::bad_pointer	/usr/include/boost/ptr_container/exception.hpp	/^        bad_pointer( const char* text ) : bad_ptr_container_operation( text )$/;"	f	class:boost::bad_pointer	access:public	signature:( const char* text )
boost::bad_pointer::bad_pointer	/usr/include/boost/ptr_container/exception.hpp	/^        bad_pointer() : bad_ptr_container_operation( "Null pointer not allowed in a pointer container!" )$/;"	f	class:boost::bad_pointer	access:public	signature:()
boost::bad_ptr_container_operation	/usr/include/boost/ptr_container/exception.hpp	/^    class bad_ptr_container_operation : public std::exception$/;"	c	namespace:boost	inherits:std::exception
boost::bad_ptr_container_operation::bad_ptr_container_operation	/usr/include/boost/ptr_container/exception.hpp	/^        bad_ptr_container_operation( const char* what ) : what_( what )$/;"	f	class:boost::bad_ptr_container_operation	access:public	signature:( const char* what )
boost::bad_ptr_container_operation::what	/usr/include/boost/ptr_container/exception.hpp	/^        virtual const char* what() const throw()$/;"	f	class:boost::bad_ptr_container_operation	access:public	signature:() const
boost::bad_ptr_container_operation::what_	/usr/include/boost/ptr_container/exception.hpp	/^        const char* what_;$/;"	m	class:boost::bad_ptr_container_operation	access:private
boost::delete_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^    inline void delete_clone( const T* r )$/;"	f	namespace:boost	signature:( const T* r )
boost::heap_clone_allocator	/usr/include/boost/ptr_container/clone_allocator.hpp	/^    struct heap_clone_allocator$/;"	s	namespace:boost
boost::heap_clone_allocator::allocate_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^        static U* allocate_clone( const U& r )$/;"	f	struct:boost::heap_clone_allocator	access:public	signature:( const U& r )
boost::heap_clone_allocator::deallocate_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^        static void deallocate_clone( const U* r )$/;"	f	struct:boost::heap_clone_allocator	access:public	signature:( const U* r )
boost::indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^    class indirect_fun$/;"	c	namespace:boost
boost::indirect_fun::fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        Fun fun;$/;"	m	class:boost::indirect_fun	access:private
boost::indirect_fun::indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        indirect_fun( Fun f ) : fun(f)$/;"	f	class:boost::indirect_fun	access:public	signature:( Fun f )
boost::indirect_fun::indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        indirect_fun() : fun(Fun())$/;"	f	class:boost::indirect_fun	access:public	signature:()
boost::indirect_fun::operator ()	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        operator()( const T& r ) const$/;"	f	class:boost::indirect_fun	access:public	signature:( const T& r ) const
boost::indirect_fun::operator ()	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        operator()( const T& r, const U& r2 ) const$/;"	f	class:boost::indirect_fun	access:public	signature:( const T& r, const U& r2 ) const
boost::is_null	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^    inline bool is_null( const ptr_map_iterator<I,F,S>& i )$/;"	f	namespace:boost	signature:( const ptr_map_iterator<I,F,S>& i )
boost::is_null	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^    inline bool is_null( void_ptr_iterator<Iterator,T> i )$/;"	f	namespace:boost	signature:( void_ptr_iterator<Iterator,T> i )
boost::is_nullable	/usr/include/boost/ptr_container/nullable.hpp	/^    struct is_nullable$/;"	s	namespace:boost
boost::is_nullable::BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/nullable.hpp	/^            BOOST_STATIC_CONSTANT( T*, var );$/;"	p	struct:boost::is_nullable	access:private	signature:( T*, var )
boost::is_nullable::BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/nullable.hpp	/^            BOOST_STATIC_CONSTANT(bool, value = sizeof( ptr_container_detail::is_nullable( var ) ) $/;"	p	struct:boost::is_nullable	access:public	signature:(bool, value = sizeof( ptr_container_detail::is_nullable( var ) ) == sizeof( type_traits::yes_type ) )
boost::make_indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^    inline indirect_fun<Fun> make_indirect_fun( Fun f )$/;"	f	namespace:boost	signature:( Fun f )
boost::make_void_ptr_indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^    inline void_ptr_indirect_fun<Fun,Arg> make_void_ptr_indirect_fun( Fun f )$/;"	f	namespace:boost	signature:( Fun f )
boost::new_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^    inline T* new_clone( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::new_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^    inline T* new_clone( const T* r )$/;"	f	namespace:boost	signature:( const T* r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_array.hpp	/^    inline ptr_array<T,size,CA>* new_clone( const ptr_array<T,size,CA>& r )$/;"	f	namespace:boost	signature:( const ptr_array<T,size,CA>& r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^    inline ptr_circular_buffer<T,CA,A>* new_clone( const ptr_circular_buffer<T,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_circular_buffer<T,CA,A>& r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_deque.hpp	/^    inline ptr_deque<T,CA,A>* new_clone( const ptr_deque<T,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_deque<T,CA,A>& r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_list.hpp	/^    inline ptr_list<T,CA,A>* new_clone( const ptr_list<T,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_list<T,CA,A>& r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_map.hpp	/^    inline ptr_map<K,T,C,CA,A>* new_clone( const ptr_map<K,T,C,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_map<K,T,C,CA,A>& r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_map.hpp	/^    inline ptr_multimap<K,T,C,CA,A>* new_clone( const ptr_multimap<K,T,C,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_multimap<K,T,C,CA,A>& r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_set.hpp	/^    inline ptr_multiset<K,C,CA,A>* new_clone( const ptr_multiset<K,C,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_multiset<K,C,CA,A>& r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_set.hpp	/^    inline ptr_set<K,C,CA,A>* new_clone( const ptr_set<K,C,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_set<K,C,CA,A>& r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^    new_clone( const ptr_unordered_map<K,T,H,P,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_unordered_map<K,T,H,P,CA,A>& r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^    new_clone( const ptr_unordered_multimap<K,T,H,P,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_unordered_multimap<K,T,H,P,CA,A>& r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^    new_clone( const ptr_unordered_multiset<K,H,P,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_unordered_multiset<K,H,P,CA,A>& r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^    new_clone( const ptr_unordered_set<K,H,P,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_unordered_set<K,H,P,CA,A>& r )
boost::new_clone	/usr/include/boost/ptr_container/ptr_vector.hpp	/^    inline ptr_vector<T,CA,A>* new_clone( const ptr_vector<T,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_vector<T,CA,A>& r )
boost::nullable	/usr/include/boost/ptr_container/nullable.hpp	/^    struct nullable$/;"	s	namespace:boost
boost::nullable::type	/usr/include/boost/ptr_container/nullable.hpp	/^        typedef T type;$/;"	t	struct:boost::nullable	access:public
boost::operator !=	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        inline bool operator!=( const void_ptr_iterator<VoidIterT,T>& l,$/;"	f	namespace:boost	signature:( const void_ptr_iterator<VoidIterT,T>& l, const void_ptr_iterator<VoidIterU,U>& r )
boost::operator +	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        operator+( BOOST_DEDUCED_TYPENAME void_ptr_iterator<VoidIter,T>::difference_type n, $/;"	f	namespace:boost	signature:( BOOST_DEDUCED_TYPENAME void_ptr_iterator<VoidIter,T>::difference_type n, void_ptr_iterator<VoidIter,T> r )
boost::operator +	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        operator+( void_ptr_iterator<VoidIter,T> l, $/;"	f	namespace:boost	signature:( void_ptr_iterator<VoidIter,T> l, BOOST_DEDUCED_TYPENAME void_ptr_iterator<VoidIter,T>::difference_type n )
boost::operator -	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        operator-( BOOST_DEDUCED_TYPENAME void_ptr_iterator<VoidIter,T>::difference_type n, $/;"	f	namespace:boost	signature:( BOOST_DEDUCED_TYPENAME void_ptr_iterator<VoidIter,T>::difference_type n, void_ptr_iterator<VoidIter,T> r )
boost::operator -	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        operator-( void_ptr_iterator<VoidIter,T> l, $/;"	f	namespace:boost	signature:( void_ptr_iterator<VoidIter,T> l, BOOST_DEDUCED_TYPENAME void_ptr_iterator<VoidIter,T>::difference_type n )
boost::operator -	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        operator-( void_ptr_iterator<VoidIter,T> l,$/;"	f	namespace:boost	signature:( void_ptr_iterator<VoidIter,T> l, void_ptr_iterator<VoidIterU,U> r )
boost::operator <	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        inline bool operator<( const void_ptr_iterator<VoidIterT,T>& l,$/;"	f	namespace:boost	signature:( const void_ptr_iterator<VoidIterT,T>& l, const void_ptr_iterator<VoidIterU,U>& r )
boost::operator <=	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        inline bool operator<=( const void_ptr_iterator<VoidIterT,T>& l,$/;"	f	namespace:boost	signature:( const void_ptr_iterator<VoidIterT,T>& l, const void_ptr_iterator<VoidIterU,U>& r )
boost::operator ==	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        inline bool operator==( const void_ptr_iterator<VoidIterT,T>& l,$/;"	f	namespace:boost	signature:( const void_ptr_iterator<VoidIterT,T>& l, const void_ptr_iterator<VoidIterU,U>& r )
boost::operator >	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        inline bool operator>( const void_ptr_iterator<VoidIterT,T>& l,$/;"	f	namespace:boost	signature:( const void_ptr_iterator<VoidIterT,T>& l, const void_ptr_iterator<VoidIterU,U>& r )
boost::operator >=	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        inline bool operator>=( const void_ptr_iterator<VoidIterT,T>& l,$/;"	f	namespace:boost	signature:( const void_ptr_iterator<VoidIterT,T>& l, const void_ptr_iterator<VoidIterU,U>& r )
boost::ptr_array	/usr/include/boost/ptr_container/ptr_array.hpp	/^    class ptr_array : public$/;"	c	namespace:boost	inherits:ptr_sequence_adapter
boost::ptr_array::U	/usr/include/boost/ptr_container/ptr_array.hpp	/^        typedef BOOST_DEDUCED_TYPENAME remove_nullable<T>::type U;$/;"	t	class:boost::ptr_array	access:private
boost::ptr_array::at	/usr/include/boost/ptr_container/ptr_array.hpp	/^        T& at()$/;"	f	class:boost::ptr_array	access:public	signature:()
boost::ptr_array::at	/usr/include/boost/ptr_container/ptr_array.hpp	/^        const T& at() const$/;"	f	class:boost::ptr_array	access:public	signature:() const
boost::ptr_array::auto_type	/usr/include/boost/ptr_container/ptr_array.hpp	/^                            auto_type;$/;"	t	class:boost::ptr_array	access:public
boost::ptr_array::base_class	/usr/include/boost/ptr_container/ptr_array.hpp	/^            base_class;$/;"	t	class:boost::ptr_array	access:private
boost::ptr_array::clone	/usr/include/boost/ptr_container/ptr_array.hpp	/^        std::auto_ptr<this_type> clone() const$/;"	f	class:boost::ptr_array	access:public	signature:() const
boost::ptr_array::const_reference	/usr/include/boost/ptr_container/ptr_array.hpp	/^        typedef const U&    const_reference;$/;"	t	class:boost::ptr_array	access:public
boost::ptr_array::is_null	/usr/include/boost/ptr_container/ptr_array.hpp	/^        bool is_null( size_t idx ) const$/;"	f	class:boost::ptr_array	access:public	signature:( size_t idx ) const
boost::ptr_array::is_null	/usr/include/boost/ptr_container/ptr_array.hpp	/^        bool is_null() const$/;"	f	class:boost::ptr_array	access:public	signature:() const
boost::ptr_array::operator =	/usr/include/boost/ptr_container/ptr_array.hpp	/^        ptr_array& operator=( ptr_array r )$/;"	f	class:boost::ptr_array	access:public	signature:( ptr_array r )
boost::ptr_array::operator =	/usr/include/boost/ptr_container/ptr_array.hpp	/^        ptr_array& operator=( std::auto_ptr<this_type> r )$/;"	f	class:boost::ptr_array	access:public	signature:( std::auto_ptr<this_type> r )
boost::ptr_array::pointer	/usr/include/boost/ptr_container/ptr_array.hpp	/^        typedef U*          pointer;$/;"	t	class:boost::ptr_array	access:public
boost::ptr_array::ptr_array	/usr/include/boost/ptr_container/ptr_array.hpp	/^        explicit ptr_array( std::auto_ptr<this_type> r )$/;"	f	class:boost::ptr_array	access:public	signature:( std::auto_ptr<this_type> r )
boost::ptr_array::ptr_array	/usr/include/boost/ptr_container/ptr_array.hpp	/^        ptr_array( const ptr_array& r )$/;"	f	class:boost::ptr_array	access:public	signature:( const ptr_array& r )
boost::ptr_array::ptr_array	/usr/include/boost/ptr_container/ptr_array.hpp	/^        ptr_array( const ptr_array<U,N>& r )$/;"	f	class:boost::ptr_array	access:public	signature:( const ptr_array<U,N>& r )
boost::ptr_array::ptr_array	/usr/include/boost/ptr_container/ptr_array.hpp	/^        ptr_array() : base_class()$/;"	f	class:boost::ptr_array	access:public	signature:()
boost::ptr_array::reference	/usr/include/boost/ptr_container/ptr_array.hpp	/^        typedef U&          reference;$/;"	t	class:boost::ptr_array	access:public
boost::ptr_array::release	/usr/include/boost/ptr_container/ptr_array.hpp	/^        std::auto_ptr<this_type> release()$/;"	f	class:boost::ptr_array	access:public	signature:()
boost::ptr_array::replace	/usr/include/boost/ptr_container/ptr_array.hpp	/^        auto_type replace( U* r ) \/\/ strong$/;"	f	class:boost::ptr_array	access:public	signature:( U* r )
boost::ptr_array::replace	/usr/include/boost/ptr_container/ptr_array.hpp	/^        auto_type replace( size_t idx, U* r ) \/\/ strong$/;"	f	class:boost::ptr_array	access:public	signature:( size_t idx, U* r )
boost::ptr_array::replace	/usr/include/boost/ptr_container/ptr_array.hpp	/^        auto_type replace( size_t idx, std::auto_ptr<V> r )$/;"	f	class:boost::ptr_array	access:public	signature:( size_t idx, std::auto_ptr<V> r )
boost::ptr_array::replace	/usr/include/boost/ptr_container/ptr_array.hpp	/^        auto_type replace( std::auto_ptr<V> r )$/;"	f	class:boost::ptr_array	access:public	signature:( std::auto_ptr<V> r )
boost::ptr_array::size_type	/usr/include/boost/ptr_container/ptr_array.hpp	/^        typedef std::size_t size_type;$/;"	t	class:boost::ptr_array	access:public
boost::ptr_array::this_type	/usr/include/boost/ptr_container/ptr_array.hpp	/^                          this_type;$/;"	t	class:boost::ptr_array	access:private
boost::ptr_array::value_type	/usr/include/boost/ptr_container/ptr_array.hpp	/^        typedef U*          value_type;$/;"	t	class:boost::ptr_array	access:public
boost::ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^    class ptr_circular_buffer : public $/;"	c	namespace:boost	inherits:ptr_sequence_adapter
boost::ptr_circular_buffer::allocator_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename base_type::allocator_type allocator_type;$/;"	t	class:boost::ptr_circular_buffer	access:public
boost::ptr_circular_buffer::array_one	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        array_range array_one() \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:()
boost::ptr_circular_buffer::array_one	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        const_array_range array_one() const \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:() const
boost::ptr_circular_buffer::array_range	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef std::pair<pointer,size_type>                  array_range;$/;"	t	class:boost::ptr_circular_buffer	access:public
boost::ptr_circular_buffer::array_two	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        array_range array_two() \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:()
boost::ptr_circular_buffer::array_two	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        const_array_range array_two() const \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:() const
boost::ptr_circular_buffer::assign	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void assign( InputIterator first, InputIterator last ) \/\/ strong$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_circular_buffer::assign	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void assign( capacity_type capacity, $/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type capacity, InputIterator first, InputIterator last )
boost::ptr_circular_buffer::assign	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void assign( capacity_type capacity, size_type n, $/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type capacity, size_type n, value_type to_clone )
boost::ptr_circular_buffer::assign	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void assign( const Range& r ) \/\/ strong$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( const Range& r )
boost::ptr_circular_buffer::assign	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void assign( size_type n, value_type to_clone ) \/\/ strong$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( size_type n, value_type to_clone )
boost::ptr_circular_buffer::auto_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename base_type::auto_type      auto_type;$/;"	t	class:boost::ptr_circular_buffer	access:public
boost::ptr_circular_buffer::base_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^            base_type;$/;"	t	class:boost::ptr_circular_buffer	access:private
boost::ptr_circular_buffer::c_array	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        value_type* c_array() \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:()
boost::ptr_circular_buffer::capacity	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        capacity_type capacity() const \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:() const
boost::ptr_circular_buffer::capacity_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename circular_buffer_type::capacity_type  capacity_type;$/;"	t	class:boost::ptr_circular_buffer	access:public
boost::ptr_circular_buffer::circular_buffer_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef boost::circular_buffer<void*,Allocator>         circular_buffer_type;$/;"	t	class:boost::ptr_circular_buffer	access:private
boost::ptr_circular_buffer::const_array_range	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef std::pair<const_pointer,size_type>            const_array_range;$/;"	t	class:boost::ptr_circular_buffer	access:public
boost::ptr_circular_buffer::const_iterator	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename base_type::const_iterator const_iterator;$/;"	t	class:boost::ptr_circular_buffer	access:public
boost::ptr_circular_buffer::const_pointer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef const value_type*                  const_pointer;$/;"	t	class:boost::ptr_circular_buffer	access:public
boost::ptr_circular_buffer::full	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        bool full() const \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:() const
boost::ptr_circular_buffer::get_allocator	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        allocator_type get_allocator() const$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:() const
boost::ptr_circular_buffer::get_allocator	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        allocator_type& get_allocator() $/;"	f	class:boost::ptr_circular_buffer	access:public	signature:()
boost::ptr_circular_buffer::insert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        insert( iterator before, const Range& r )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, const Range& r )
boost::ptr_circular_buffer::insert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator insert( iterator pos, std::auto_ptr<U> ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos, std::auto_ptr<U> ptr )
boost::ptr_circular_buffer::insert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator insert( iterator pos, value_type ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos, value_type ptr )
boost::ptr_circular_buffer::insert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void insert( iterator pos, InputIterator first, InputIterator last ) \/\/ basic$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos, InputIterator first, InputIterator last )
boost::ptr_circular_buffer::iterator	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename base_type::iterator       iterator;$/;"	t	class:boost::ptr_circular_buffer	access:public
boost::ptr_circular_buffer::linearize	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        pointer linearize() \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:()
boost::ptr_circular_buffer::operator =	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer& operator=( ptr_circular_buffer r )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( ptr_circular_buffer r )
boost::ptr_circular_buffer::pointer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef value_type*                        pointer;$/;"	t	class:boost::ptr_circular_buffer	access:public
boost::ptr_circular_buffer::ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        explicit ptr_circular_buffer( capacity_type n )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type n )
boost::ptr_circular_buffer::ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer( ForwardIterator first, ForwardIterator last )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( ForwardIterator first, ForwardIterator last )
boost::ptr_circular_buffer::ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer( capacity_type n, InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type n, InputIterator first, InputIterator last )
boost::ptr_circular_buffer::ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer( capacity_type n,$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type n, const allocator_type& alloc )
boost::ptr_circular_buffer::ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer( const ptr_circular_buffer& r )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( const ptr_circular_buffer& r )
boost::ptr_circular_buffer::ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer( const ptr_circular_buffer<U>& r )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( const ptr_circular_buffer<U>& r )
boost::ptr_circular_buffer::ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer()$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:()
boost::ptr_circular_buffer::push_back	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void push_back( std::auto_ptr<U> ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( std::auto_ptr<U> ptr )
boost::ptr_circular_buffer::push_back	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void push_back( value_type ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( value_type ptr )
boost::ptr_circular_buffer::push_front	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void push_front( std::auto_ptr<U> ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( std::auto_ptr<U> ptr )
boost::ptr_circular_buffer::push_front	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void push_front( value_type ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( value_type ptr )
boost::ptr_circular_buffer::rerase	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator rerase( const Range& r ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( const Range& r )
boost::ptr_circular_buffer::rerase	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator rerase( iterator first, iterator last ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator first, iterator last )
boost::ptr_circular_buffer::rerase	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator rerase( iterator pos ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos )
boost::ptr_circular_buffer::reserve	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        size_type reserve() const \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:() const
boost::ptr_circular_buffer::reserve	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void reserve( size_type n ) \/\/ strong$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( size_type n )
boost::ptr_circular_buffer::resize	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void resize( size_type size ) \/\/ basic$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( size_type size )
boost::ptr_circular_buffer::resize	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void resize( size_type size, value_type to_clone ) \/\/ basic$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( size_type size, value_type to_clone )
boost::ptr_circular_buffer::rinsert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator rinsert( iterator pos, std::auto_ptr<U> ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos, std::auto_ptr<U> ptr )
boost::ptr_circular_buffer::rinsert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator rinsert( iterator pos, value_type ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos, value_type ptr )
boost::ptr_circular_buffer::rinsert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        rinsert( iterator before, const Range& r )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, const Range& r )
boost::ptr_circular_buffer::rinsert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void rinsert( iterator pos, InputIterator first, InputIterator last ) \/\/ basic$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos, InputIterator first, InputIterator last )
boost::ptr_circular_buffer::rotate	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void rotate( const_iterator new_begin ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( const_iterator new_begin )
boost::ptr_circular_buffer::rresize	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void rresize( size_type size ) \/\/ basic$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( size_type size )
boost::ptr_circular_buffer::rresize	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void rresize( size_type size, value_type to_clone ) \/\/ basic$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( size_type size, value_type to_clone )
boost::ptr_circular_buffer::rset_capacity	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void rset_capacity( capacity_type new_capacity ) \/\/ strong$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type new_capacity )
boost::ptr_circular_buffer::set_capacity	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void set_capacity( capacity_type new_capacity ) \/\/ strong$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type new_capacity )
boost::ptr_circular_buffer::size_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename base_type::size_type      size_type;$/;"	t	class:boost::ptr_circular_buffer	access:public
boost::ptr_circular_buffer::this_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef ptr_circular_buffer<T,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_circular_buffer	access:private
boost::ptr_circular_buffer::transfer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        transfer( iterator before, const Range& r, PtrSeqAdapter& from ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, const Range& r, PtrSeqAdapter& from )
boost::ptr_circular_buffer::transfer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void transfer( iterator before, $/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, BOOST_DEDUCED_TYPENAME PtrSeqAdapter::iterator first, BOOST_DEDUCED_TYPENAME PtrSeqAdapter::iterator last, PtrSeqAdapter& from )
boost::ptr_circular_buffer::transfer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void transfer( iterator before, $/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, BOOST_DEDUCED_TYPENAME PtrSeqAdapter::iterator object, PtrSeqAdapter& from )
boost::ptr_circular_buffer::transfer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void transfer( iterator before, PtrSeqAdapter& from ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, PtrSeqAdapter& from )
boost::ptr_circular_buffer::transfer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void transfer( iterator before, value_type* from, $/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, value_type* from, size_type size, bool delete_from = true )
boost::ptr_circular_buffer::value_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename base_type::value_type     value_type;$/;"	t	class:boost::ptr_circular_buffer	access:public
boost::ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    namespace ptr_container$/;"	n	namespace:boost
boost::ptr_container	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^namespace ptr_container$/;"	n	namespace:boost
boost::ptr_container::ptr_back_insert_iterator	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    class ptr_back_insert_iterator :$/;"	c	namespace:boost::ptr_container	inherits:std::iterator
boost::ptr_container::ptr_back_insert_iterator::container	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        PtrContainer* container;$/;"	m	class:boost::ptr_container::ptr_back_insert_iterator	access:protected
boost::ptr_container::ptr_back_insert_iterator::container_type	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        typedef PtrContainer container_type;$/;"	t	class:boost::ptr_container::ptr_back_insert_iterator	access:public
boost::ptr_container::ptr_back_insert_iterator::operator *	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_back_insert_iterator& operator*()$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:()
boost::ptr_container::ptr_back_insert_iterator::operator ++	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_back_insert_iterator operator++(int)$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:(int)
boost::ptr_container::ptr_back_insert_iterator::operator ++	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_back_insert_iterator& operator++()$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:()
boost::ptr_container::ptr_back_insert_iterator::operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( std::auto_ptr<T> r )$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:( std::auto_ptr<T> r )
boost::ptr_container::ptr_back_insert_iterator::operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( typename PtrContainer::const_reference r )$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:( typename PtrContainer::const_reference r )
boost::ptr_container::ptr_back_insert_iterator::operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( typename PtrContainer::value_type r )$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:( typename PtrContainer::value_type r )
boost::ptr_container::ptr_back_insert_iterator::ptr_back_insert_iterator	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        explicit ptr_back_insert_iterator( PtrContainer& cont )$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:( PtrContainer& cont )
boost::ptr_container::ptr_back_inserter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    ptr_back_inserter( PtrContainer& cont )$/;"	f	namespace:boost::ptr_container	signature:( PtrContainer& cont )
boost::ptr_container::ptr_back_inserter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    ptr_back_inserter( PtrContainer& cont );$/;"	p	namespace:boost::ptr_container	signature:( PtrContainer& cont )
boost::ptr_container::ptr_front_insert_iterator	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    class ptr_front_insert_iterator :$/;"	c	namespace:boost::ptr_container	inherits:std::iterator
boost::ptr_container::ptr_front_insert_iterator::container	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        PtrContainer* container;$/;"	m	class:boost::ptr_container::ptr_front_insert_iterator	access:protected
boost::ptr_container::ptr_front_insert_iterator::container_type	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        typedef PtrContainer container_type;$/;"	t	class:boost::ptr_container::ptr_front_insert_iterator	access:public
boost::ptr_container::ptr_front_insert_iterator::operator *	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_front_insert_iterator& operator*()$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:()
boost::ptr_container::ptr_front_insert_iterator::operator ++	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_front_insert_iterator operator++(int)$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:(int)
boost::ptr_container::ptr_front_insert_iterator::operator ++	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_front_insert_iterator& operator++()$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:()
boost::ptr_container::ptr_front_insert_iterator::operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( std::auto_ptr<T> r )$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:( std::auto_ptr<T> r )
boost::ptr_container::ptr_front_insert_iterator::operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( typename PtrContainer::const_reference r )$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:( typename PtrContainer::const_reference r )
boost::ptr_container::ptr_front_insert_iterator::operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( typename PtrContainer::value_type r )$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:( typename PtrContainer::value_type r )
boost::ptr_container::ptr_front_insert_iterator::ptr_front_insert_iterator	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        explicit ptr_front_insert_iterator( PtrContainer& cont )$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:( PtrContainer& cont )
boost::ptr_container::ptr_front_inserter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    ptr_front_inserter( PtrContainer& cont )$/;"	f	namespace:boost::ptr_container	signature:( PtrContainer& cont )
boost::ptr_container::ptr_front_inserter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    ptr_front_inserter( PtrContainer& cont );$/;"	p	namespace:boost::ptr_container	signature:( PtrContainer& cont )
boost::ptr_container::ptr_insert_iterator	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    class ptr_insert_iterator :$/;"	c	namespace:boost::ptr_container	inherits:std::iterator
boost::ptr_container::ptr_insert_iterator::container	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        PtrContainer*                    container;$/;"	m	class:boost::ptr_container::ptr_insert_iterator	access:protected
boost::ptr_container::ptr_insert_iterator::container_type	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        typedef PtrContainer container_type;$/;"	t	class:boost::ptr_container::ptr_insert_iterator	access:public
boost::ptr_container::ptr_insert_iterator::iter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        typename PtrContainer::iterator  iter;$/;"	m	class:boost::ptr_container::ptr_insert_iterator	access:protected
boost::ptr_container::ptr_insert_iterator::operator *	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_insert_iterator& operator*()$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:()
boost::ptr_container::ptr_insert_iterator::operator ++	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_insert_iterator operator++(int)$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:(int)
boost::ptr_container::ptr_insert_iterator::operator ++	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_insert_iterator& operator++()$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:()
boost::ptr_container::ptr_insert_iterator::operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( std::auto_ptr<T> r )$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:( std::auto_ptr<T> r )
boost::ptr_container::ptr_insert_iterator::operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( typename PtrContainer::const_reference r )$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:( typename PtrContainer::const_reference r )
boost::ptr_container::ptr_insert_iterator::operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( typename PtrContainer::value_type r )$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:( typename PtrContainer::value_type r )
boost::ptr_container::ptr_insert_iterator::ptr_insert_iterator	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_insert_iterator( PtrContainer& cont,$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:( PtrContainer& cont, typename PtrContainer::iterator before )
boost::ptr_container::ptr_inserter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    ptr_inserter( PtrContainer& cont, $/;"	f	namespace:boost::ptr_container	signature:( PtrContainer& cont, typename PtrContainer::iterator before )
boost::ptr_container::ptr_inserter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    ptr_inserter( PtrContainer& cont, typename PtrContainer::iterator before );$/;"	p	namespace:boost::ptr_container	signature:( PtrContainer& cont, typename PtrContainer::iterator before )
boost::ptr_container_detail	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^namespace boost { namespace ptr_container_detail { namespace move_ptrs {$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^namespace boost { namespace ptr_container_detail { namespace move_ptrs {$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^    namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/detail/move.hpp	/^namespace boost { namespace ptr_container_detail {$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^    namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^    namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^namespace boost { namespace ptr_container_detail {$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/indirect_fun.hpp	/^    namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/nullable.hpp	/^    namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/ptr_array.hpp	/^    namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
boost::ptr_container_detail::associative_container_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct associative_container_tag {};$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^    class associative_ptr_container :$/;"	c	namespace:boost::ptr_container_detail	inherits:reversible_ptr_container
boost::ptr_container_detail::associative_ptr_container::associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator& a )
boost::ptr_container_detail::associative_ptr_container::associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_container_detail::associative_ptr_container::associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( SizeType n, unordered_associative_container_tag tag )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( SizeType n, unordered_associative_container_tag tag )
boost::ptr_container_detail::associative_ptr_container::associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( const Compare& comp,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( const Compare& comp, const Allocator& a )
boost::ptr_container_detail::associative_ptr_container::associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( const Hash& hash,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_container_detail::associative_ptr_container::associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( const associative_ptr_container& r )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( const associative_ptr_container& r )
boost::ptr_container_detail::associative_ptr_container::associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container( const associative_ptr_container<C,V>& r )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( const associative_ptr_container<C,V>& r )
boost::ptr_container_detail::associative_ptr_container::associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container()$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:()
boost::ptr_container_detail::associative_ptr_container::associative_ptr_container	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        explicit associative_ptr_container( std::auto_ptr<PtrContainer> r )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( std::auto_ptr<PtrContainer> r )
boost::ptr_container_detail::associative_ptr_container::back	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_reference back() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
boost::ptr_container_detail::associative_ptr_container::back	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        reference back()$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:()
boost::ptr_container_detail::associative_ptr_container::base_type	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                base_type;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:private
boost::ptr_container_detail::associative_ptr_container::begin	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_iterator begin() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:() const
boost::ptr_container_detail::associative_ptr_container::begin	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_local_iterator begin( size_type n ) const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n ) const
boost::ptr_container_detail::associative_ptr_container::begin	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        iterator begin()$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:()
boost::ptr_container_detail::associative_ptr_container::begin	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        local_iterator begin( size_type n )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n )
boost::ptr_container_detail::associative_ptr_container::bucket_count	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        size_type bucket_count() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
boost::ptr_container_detail::associative_ptr_container::bucket_size	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        size_type bucket_size( size_type n ) const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n ) const
boost::ptr_container_detail::associative_ptr_container::cbegin	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_iterator cbegin() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:() const
boost::ptr_container_detail::associative_ptr_container::cbegin	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_local_iterator cbegin( size_type n ) const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n ) const
boost::ptr_container_detail::associative_ptr_container::cend	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_iterator cend() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:() const
boost::ptr_container_detail::associative_ptr_container::cend	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_local_iterator cend( size_type n )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n )
boost::ptr_container_detail::associative_ptr_container::const_iterator	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                const_iterator;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
boost::ptr_container_detail::associative_ptr_container::const_local_iterator	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                const_local_iterator;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
boost::ptr_container_detail::associative_ptr_container::const_reference	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                    const_reference;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
boost::ptr_container_detail::associative_ptr_container::container_type	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                container_type;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:private
boost::ptr_container_detail::associative_ptr_container::end	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_iterator end() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:() const
boost::ptr_container_detail::associative_ptr_container::end	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_local_iterator end( size_type n ) const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n ) const
boost::ptr_container_detail::associative_ptr_container::end	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        iterator end()$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:()
boost::ptr_container_detail::associative_ptr_container::end	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        local_iterator end( size_type n )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n )
boost::ptr_container_detail::associative_ptr_container::erase	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        erase( const Range& r )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( const Range& r )
boost::ptr_container_detail::associative_ptr_container::erase	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        iterator erase( iterator before ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( iterator before )
boost::ptr_container_detail::associative_ptr_container::erase	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        iterator erase( iterator first,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( iterator first, iterator last )
boost::ptr_container_detail::associative_ptr_container::erase	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        size_type erase( const key_type& x ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( const key_type& x )
boost::ptr_container_detail::associative_ptr_container::front	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_reference front() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
boost::ptr_container_detail::associative_ptr_container::front	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        reference front()$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:()
boost::ptr_container_detail::associative_ptr_container::hash_function	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        hasher hash_function() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
boost::ptr_container_detail::associative_ptr_container::hasher	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                hasher;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
boost::ptr_container_detail::associative_ptr_container::iterator	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                iterator;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
boost::ptr_container_detail::associative_ptr_container::key_comp	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        key_compare key_comp() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:() const
boost::ptr_container_detail::associative_ptr_container::key_compare	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                key_compare;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
boost::ptr_container_detail::associative_ptr_container::key_eq	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        key_equal key_eq() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
boost::ptr_container_detail::associative_ptr_container::key_equal	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                key_equal;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
boost::ptr_container_detail::associative_ptr_container::key_type	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                key_type;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
boost::ptr_container_detail::associative_ptr_container::load_factor	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        float load_factor() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
boost::ptr_container_detail::associative_ptr_container::local_iterator	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                local_iterator;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
boost::ptr_container_detail::associative_ptr_container::max_bucket_count	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        size_type max_bucket_count() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
boost::ptr_container_detail::associative_ptr_container::max_load_factor	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        float max_load_factor() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
boost::ptr_container_detail::associative_ptr_container::max_load_factor	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        void max_load_factor( float factor )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( float factor )
boost::ptr_container_detail::associative_ptr_container::multi_transfer	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        size_type multi_transfer( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator first,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator first, BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator last, AssociatePtrCont& from )
boost::ptr_container_detail::associative_ptr_container::multi_transfer	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        void multi_transfer( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator object,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator object, AssociatePtrCont& from )
boost::ptr_container_detail::associative_ptr_container::operator =	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container& operator=( associative_ptr_container r ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( associative_ptr_container r )
boost::ptr_container_detail::associative_ptr_container::operator =	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container& operator=( std::auto_ptr<PtrContainer> r ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( std::auto_ptr<PtrContainer> r )
boost::ptr_container_detail::associative_ptr_container::reference	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                reference;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
boost::ptr_container_detail::associative_ptr_container::rehash	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        void rehash( size_type n )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n )
boost::ptr_container_detail::associative_ptr_container::scoped_deleter	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                scoped_deleter;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:private
boost::ptr_container_detail::associative_ptr_container::single_transfer	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        bool single_transfer( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator object,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator object, AssociatePtrCont& from )
boost::ptr_container_detail::associative_ptr_container::single_transfer	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        size_type single_transfer( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator first,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator first, BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator last, AssociatePtrCont& from )
boost::ptr_container_detail::associative_ptr_container::size_type	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                size_type;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
boost::ptr_container_detail::associative_ptr_container::value_comp	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        value_compare value_comp() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:() const
boost::ptr_container_detail::associative_ptr_container::value_compare	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                value_compare;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
boost::ptr_container_detail::clone_deleter	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct clone_deleter$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::clone_deleter::operator ()	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void operator()( const T* p ) const$/;"	f	struct:boost::ptr_container_detail::clone_deleter	access:public	signature:( const T* p ) const
boost::ptr_container_detail::count	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^        inline const char* count()  { return "count"; }$/;"	f	namespace:boost::ptr_container_detail	signature:()
boost::ptr_container_detail::first	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^        inline const char* first()  { return "first"; }$/;"	f	namespace:boost::ptr_container_detail	signature:()
boost::ptr_container_detail::fixed_length_sequence_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct fixed_length_sequence_tag : sequence_tag {};$/;"	s	namespace:boost::ptr_container_detail	inherits:sequence_tag
boost::ptr_container_detail::is_nullable	/usr/include/boost/ptr_container/nullable.hpp	/^        type_traits::no_type is_nullable( ... );        $/;"	p	namespace:boost::ptr_container_detail	signature:( .... )
boost::ptr_container_detail::is_nullable	/usr/include/boost/ptr_container/nullable.hpp	/^        type_traits::yes_type is_nullable( const nullable<T>* );$/;"	p	namespace:boost::ptr_container_detail	signature:( const nullable<T>* )
boost::ptr_container_detail::is_pointer_or_integral	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct is_pointer_or_integral$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::is_pointer_or_integral::BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        BOOST_STATIC_CONSTANT(bool, value = is_pointer<T>::value || is_integral<T>::value );$/;"	p	struct:boost::ptr_container_detail::is_pointer_or_integral	access:public	signature:(bool, value = is_pointer<T>::value || is_integral<T>::value )
boost::ptr_container_detail::is_pointer_or_integral_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct is_pointer_or_integral_tag {};$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::is_range_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct is_range_tag {};$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::item	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^        inline const char* item()   { return "item"; }$/;"	f	namespace:boost::ptr_container_detail	signature:()
boost::ptr_container_detail::load_helper	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^void load_helper(Archive& ar, ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c,$/;"	f	namespace:boost::ptr_container_detail	signature:(Archive& ar, ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c, BOOST_DEDUCED_TYPENAME ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>::size_type n)
boost::ptr_container_detail::make_lazy	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        struct make_lazy$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::make_lazy::type	/usr/include/boost/ptr_container/indirect_fun.hpp	/^            typedef typename Type::type type;$/;"	t	struct:boost::ptr_container_detail::make_lazy	access:public
boost::ptr_container_detail::map_config	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^    struct map_config$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::map_config::BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        BOOST_STATIC_CONSTANT( bool, allow_null = boost::is_nullable<T>::value );$/;"	p	struct:boost::ptr_container_detail::map_config	access:public	signature:( bool, allow_null = boost::is_nullable<T>::value )
boost::ptr_container_detail::map_config::U	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     U;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::allocator_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     allocator_type;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::const_iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     const_iterator;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::const_local_iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    const_local_iterator;  $/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::container_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    container_type;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::get_const_pointer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        static const U* get_const_pointer( Iter i )$/;"	f	struct:boost::ptr_container_detail::map_config	access:public	signature:( Iter i )
boost::ptr_container_detail::map_config::get_pointer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        static U* get_pointer( Iter i )$/;"	f	struct:boost::ptr_container_detail::map_config	access:public	signature:( Iter i )
boost::ptr_container_detail::map_config::hasher	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    hasher;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     iterator;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::key_compare	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    key_compare;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::key_equal	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    key_equal;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::key_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     key_type;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::local_iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    local_iterator;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::value_compare	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    value_compare;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::value_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        typedef U    value_type;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::map_config::void_container_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     void_container_type;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
boost::ptr_container_detail::move	/usr/include/boost/ptr_container/detail/move.hpp	/^move_ptrs::move_source<T> move(T& x) $/;"	f	namespace:boost::ptr_container_detail	signature:(T& x)
boost::ptr_container_detail::move_ptrs	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^namespace boost { namespace ptr_container_detail { namespace move_ptrs {$/;"	n	namespace:boost::ptr_container_detail
boost::ptr_container_detail::move_ptrs	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^namespace boost { namespace ptr_container_detail { namespace move_ptrs {$/;"	n	namespace:boost::ptr_container_detail
boost::ptr_container_detail::move_ptrs	/usr/include/boost/ptr_container/detail/move.hpp	/^namespace move_ptrs {$/;"	n	namespace:boost::ptr_container_detail
boost::ptr_container_detail::move_ptrs::default_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^struct default_deleter$/;"	s	namespace:boost::ptr_container_detail::move_ptrs	inherits:mpl::if_::type
boost::ptr_container_detail::move_ptrs::default_deleter::default_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    default_deleter() { }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::default_deleter	access:public	signature:()
boost::ptr_container_detail::move_ptrs::default_deleter::default_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    default_deleter(default_deleter<TT> tt) { }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::default_deleter	access:public	signature:(default_deleter<TT> tt)
boost::ptr_container_detail::move_ptrs::enable_if_convertible	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    struct enable_if_convertible $/;"	s	namespace:boost::ptr_container_detail::move_ptrs	inherits:enable_if
boost::ptr_container_detail::move_ptrs::enable_if_convertible	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    struct enable_if_convertible : mpl::identity<T> { };$/;"	s	namespace:boost::ptr_container_detail::move_ptrs	inherits:mpl::identity
boost::ptr_container_detail::move_ptrs::is_array_convertible	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^struct is_array_convertible {$/;"	s	namespace:boost::ptr_container_detail::move_ptrs
boost::ptr_container_detail::move_ptrs::is_array_convertible::BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    BOOST_STATIC_CONSTANT(bool, value = type::value);$/;"	p	struct:boost::ptr_container_detail::move_ptrs::is_array_convertible	access:public	signature:(bool, value = type::value)
boost::ptr_container_detail::move_ptrs::is_array_convertible::t_base	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    typedef typename remove_cv<t_element>::type  t_base; $/;"	t	struct:boost::ptr_container_detail::move_ptrs::is_array_convertible	access:public
boost::ptr_container_detail::move_ptrs::is_array_convertible::t_element	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    typedef typename remove_bounds<T>::type      t_element; $/;"	t	struct:boost::ptr_container_detail::move_ptrs::is_array_convertible	access:public
boost::ptr_container_detail::move_ptrs::is_array_convertible::type	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^            >::type                                     type;$/;"	t	struct:boost::ptr_container_detail::move_ptrs::is_array_convertible	access:public
boost::ptr_container_detail::move_ptrs::is_array_convertible::u_base	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    typedef typename remove_cv<u_element>::type  u_base; $/;"	t	struct:boost::ptr_container_detail::move_ptrs::is_array_convertible	access:public
boost::ptr_container_detail::move_ptrs::is_array_convertible::u_element	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    typedef typename remove_bounds<U>::type      u_element; $/;"	t	struct:boost::ptr_container_detail::move_ptrs::is_array_convertible	access:public
boost::ptr_container_detail::move_ptrs::is_smart_ptr_convertible	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^struct is_smart_ptr_convertible $/;"	s	namespace:boost::ptr_container_detail::move_ptrs	inherits:mpl::if_::type
boost::ptr_container_detail::move_ptrs::move_source	/usr/include/boost/ptr_container/detail/move.hpp	/^class move_source {$/;"	c	namespace:boost::ptr_container_detail::move_ptrs
boost::ptr_container_detail::move_ptrs::move_source::move_source	/usr/include/boost/ptr_container/detail/move.hpp	/^    move_source(Ptr& ptr) : ptr_(ptr) {}$/;"	f	class:boost::ptr_container_detail::move_ptrs::move_source	access:public	signature:(Ptr& ptr)
boost::ptr_container_detail::move_ptrs::move_source::move_source	/usr/include/boost/ptr_container/detail/move.hpp	/^    move_source(const Ptr&);$/;"	p	class:boost::ptr_container_detail::move_ptrs::move_source	access:private	signature:(const Ptr&)
boost::ptr_container_detail::move_ptrs::move_source::ptr	/usr/include/boost/ptr_container/detail/move.hpp	/^    Ptr& ptr() const { return ptr_; }$/;"	f	class:boost::ptr_container_detail::move_ptrs::move_source	access:public	signature:() const
boost::ptr_container_detail::move_ptrs::move_source::ptr_	/usr/include/boost/ptr_container/detail/move.hpp	/^    Ptr& ptr_;$/;"	m	class:boost::ptr_container_detail::move_ptrs::move_source	access:private
boost::ptr_container_detail::move_ptrs::ptr_container_detail	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^namespace ptr_container_detail {$/;"	n	namespace:boost::ptr_container_detail::move_ptrs
boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^struct array_deleter $/;"	s	namespace:boost::ptr_container_detail::move_ptrs::ptr_container_detail	inherits:deleter_base
boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter::array_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    array_deleter() : base(do_delete) { }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter	access:public	signature:()
boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter::base	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    typedef deleter_base<element_type> base;$/;"	t	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter	access:public
boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter::do_delete	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    static void do_delete(element_type* t) { checked_array_delete(t); }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter	access:public	signature:(element_type* t)
boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter::element_type	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    typedef typename remove_bounds<T>::type element_type;$/;"	t	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter	access:public
boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^struct deleter_base {$/;"	s	namespace:boost::ptr_container_detail::move_ptrs::ptr_container_detail
boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base::delete_	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    static deleter delete_;$/;"	m	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base	access:public
boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base::delete_	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^deleter_base<T>::delete_;$/;"	m	class:boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base
boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base::deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    typedef void (*deleter)(T*);$/;"	t	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base	access:public
boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base::deleter_base	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    deleter_base(deleter d) { delete_ = d; }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base	access:public	signature:(deleter d)
boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base::operator ()	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    void operator() (T* t) const { delete_(t); }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base	access:public	signature:(T* t) const
boost::ptr_container_detail::move_ptrs::ptr_container_detail::scalar_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^struct scalar_deleter : deleter_base<T> {$/;"	s	namespace:boost::ptr_container_detail::move_ptrs::ptr_container_detail	inherits:deleter_base
boost::ptr_container_detail::move_ptrs::ptr_container_detail::scalar_deleter::base	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    typedef deleter_base<T> base;$/;"	t	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::scalar_deleter	access:public
boost::ptr_container_detail::move_ptrs::ptr_container_detail::scalar_deleter::do_delete	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    static void do_delete(T* t) { checked_delete(t); }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::scalar_deleter	access:public	signature:(T* t)
boost::ptr_container_detail::move_ptrs::ptr_container_detail::scalar_deleter::scalar_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    scalar_deleter() : base(do_delete) { }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::scalar_deleter	access:public	signature:()
boost::ptr_container_detail::ordered_associative_container_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct ordered_associative_container_tag : associative_container_tag {};$/;"	s	namespace:boost::ptr_container_detail	inherits:associative_container_tag
boost::ptr_container_detail::ptr_array_impl	/usr/include/boost/ptr_container/ptr_array.hpp	/^        class ptr_array_impl : public boost::array<T,N>$/;"	c	namespace:boost::ptr_container_detail	inherits:boost::array
boost::ptr_container_detail::ptr_array_impl::allocator_type	/usr/include/boost/ptr_container/ptr_array.hpp	/^            typedef Allocator allocator_type;$/;"	t	class:boost::ptr_container_detail::ptr_array_impl	access:public
boost::ptr_container_detail::ptr_array_impl::ptr_array_impl	/usr/include/boost/ptr_container/ptr_array.hpp	/^            ptr_array_impl( Allocator \/*a*\/ = Allocator() )$/;"	f	class:boost::ptr_container_detail::ptr_array_impl	access:public	signature:( Allocator = Allocator() )
boost::ptr_container_detail::ptr_array_impl::ptr_array_impl	/usr/include/boost/ptr_container/ptr_array.hpp	/^            ptr_array_impl( size_t, T*, Allocator \/*a*\/ = Allocator() )$/;"	f	class:boost::ptr_container_detail::ptr_array_impl	access:public	signature:( size_t, T*, Allocator = Allocator() )
boost::ptr_container_detail::ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^    class ptr_map_adapter_base : $/;"	c	namespace:boost::ptr_container_detail	inherits:ptr_container_detail::associative_ptr_container
boost::ptr_container_detail::ptr_map_adapter_base::allocator_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    allocator_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::at	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        const_mapped_reference at( const key_type& key ) const$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& key ) const
boost::ptr_container_detail::ptr_map_adapter_base::at	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        mapped_reference at( const key_type& key )  $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& key )
boost::ptr_container_detail::ptr_map_adapter_base::auto_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    auto_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::base_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            base_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:private
boost::ptr_container_detail::ptr_map_adapter_base::bucket	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        size_type bucket( const key_type& key ) const$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:protected	signature:( const key_type& key ) const
boost::ptr_container_detail::ptr_map_adapter_base::config	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        typedef map_config<T,VoidPtrMap,Ordered>                           config;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:private
boost::ptr_container_detail::ptr_map_adapter_base::const_iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    const_iterator;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::const_mapped_reference	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    const_mapped_reference;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::const_pointer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    const_pointer;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::const_reference	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    const_reference;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::count	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        size_type count( const key_type& x ) const                                        $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x ) const
boost::ptr_container_detail::ptr_map_adapter_base::equal_range	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator_range<const_iterator> equal_range( const key_type& x ) const  $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x ) const
boost::ptr_container_detail::ptr_map_adapter_base::equal_range	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator_range<iterator> equal_range( const key_type& x )                    $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x )
boost::ptr_container_detail::ptr_map_adapter_base::eraser	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        struct eraser \/\/ scope guard$/;"	s	class:boost::ptr_container_detail::ptr_map_adapter_base	access:private
boost::ptr_container_detail::ptr_map_adapter_base::eraser::eraser	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            eraser( VoidPtrMap* m, const key_type& key ) $/;"	f	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:public	signature:( VoidPtrMap* m, const key_type& key )
boost::ptr_container_detail::ptr_map_adapter_base::eraser::key_	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            const key_type& key_;$/;"	m	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:public
boost::ptr_container_detail::ptr_map_adapter_base::eraser::m_	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            VoidPtrMap*     m_;$/;"	m	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:public
boost::ptr_container_detail::ptr_map_adapter_base::eraser::operator =	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            eraser& operator=(const eraser&);  $/;"	p	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:private	signature:(const eraser&)
boost::ptr_container_detail::ptr_map_adapter_base::eraser::release	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            void release() { released_ = true; }$/;"	f	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:public	signature:()
boost::ptr_container_detail::ptr_map_adapter_base::eraser::released_	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            bool            released_;$/;"	m	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:public
boost::ptr_container_detail::ptr_map_adapter_base::eraser::~eraser	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            ~eraser() $/;"	f	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:public	signature:()
boost::ptr_container_detail::ptr_map_adapter_base::find	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        const_iterator find( const key_type& x ) const                                    $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x ) const
boost::ptr_container_detail::ptr_map_adapter_base::find	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator find( const key_type& x )                                                $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x )
boost::ptr_container_detail::ptr_map_adapter_base::insert_lookup	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        mapped_reference insert_lookup( const key_type& key )$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:private	signature:( const key_type& key )
boost::ptr_container_detail::ptr_map_adapter_base::iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    iterator;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::key_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    key_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::lookup	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        const_mapped_reference lookup( const key_type& key ) const$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:private	signature:( const key_type& key ) const
boost::ptr_container_detail::ptr_map_adapter_base::lower_bound	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        const_iterator lower_bound( const key_type& x ) const                             $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x ) const
boost::ptr_container_detail::ptr_map_adapter_base::lower_bound	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator lower_bound( const key_type& x )                                         $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x )
boost::ptr_container_detail::ptr_map_adapter_base::mapped_reference	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    mapped_reference;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::mapped_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    mapped_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::operator =	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base& operator=( std::auto_ptr<PtrContainer> clone )    $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( std::auto_ptr<PtrContainer> clone )
boost::ptr_container_detail::ptr_map_adapter_base::operator []	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        mapped_reference operator[]( const key_type& key )$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& key )
boost::ptr_container_detail::ptr_map_adapter_base::pointer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    pointer;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        explicit ptr_map_adapter_base( SizeType n, $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( SizeType n, ptr_container_detail::unordered_associative_container_tag tag )
boost::ptr_container_detail::ptr_map_adapter_base::ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        explicit ptr_map_adapter_base( std::auto_ptr<PtrContainer> clone ) $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( std::auto_ptr<PtrContainer> clone )
boost::ptr_container_detail::ptr_map_adapter_base::ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_container_detail::ptr_map_adapter_base::ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( InputIterator first, InputIterator last, const Comp& comp, const allocator_type& a = allocator_type() )
boost::ptr_container_detail::ptr_map_adapter_base::ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_container_detail::ptr_map_adapter_base::ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base( const Compare& comp,$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const Compare& comp, const Allocator& a )
boost::ptr_container_detail::ptr_map_adapter_base::ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base( const Hash& hash,$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_container_detail::ptr_map_adapter_base::ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base()$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:()
boost::ptr_container_detail::ptr_map_adapter_base::reference	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    reference;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::replace	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        auto_type replace( iterator where, mapped_type x ) \/\/ strong  $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( iterator where, mapped_type x )
boost::ptr_container_detail::ptr_map_adapter_base::replace	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        auto_type replace( iterator where, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( iterator where, std::auto_ptr<U> x )
boost::ptr_container_detail::ptr_map_adapter_base::size_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    size_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_map_adapter_base::this_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        typedef ptr_map_adapter_base<T,VoidPtrMap,CloneAllocator,Ordered>  this_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:private
boost::ptr_container_detail::ptr_map_adapter_base::upper_bound	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        const_iterator upper_bound( const key_type& x ) const                             $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x ) const
boost::ptr_container_detail::ptr_map_adapter_base::upper_bound	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator upper_bound( const key_type& x )                                         $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x )
boost::ptr_container_detail::ptr_map_adapter_base::value_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    value_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
boost::ptr_container_detail::ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^    class ptr_set_adapter_base $/;"	c	namespace:boost::ptr_container_detail	inherits:ptr_container_detail::associative_ptr_container
boost::ptr_container_detail::ptr_set_adapter_base::base_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^              base_type;$/;"	t	class:boost::ptr_container_detail::ptr_set_adapter_base	access:private
boost::ptr_container_detail::ptr_set_adapter_base::bucket	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        size_type bucket( const key_type& key ) const$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:protected	signature:( const key_type& key ) const
boost::ptr_container_detail::ptr_set_adapter_base::const_iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                      const_iterator;$/;"	t	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public
boost::ptr_container_detail::ptr_set_adapter_base::count	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        size_type count( const key_type& x ) const                                        $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x ) const
boost::ptr_container_detail::ptr_set_adapter_base::equal_range	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator_range<const_iterator> equal_range( const key_type& x ) const  $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x ) const
boost::ptr_container_detail::ptr_set_adapter_base::equal_range	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator_range<iterator> equal_range( const key_type& x )                    $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x )
boost::ptr_container_detail::ptr_set_adapter_base::erase	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        size_type erase( const key_type& x ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x )
boost::ptr_container_detail::ptr_set_adapter_base::find	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        const_iterator find( const key_type& x ) const                                    $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x ) const
boost::ptr_container_detail::ptr_set_adapter_base::find	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator find( const key_type& x )                                                $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x )
boost::ptr_container_detail::ptr_set_adapter_base::iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                      iterator;$/;"	t	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public
boost::ptr_container_detail::ptr_set_adapter_base::key_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        typedef Key   key_type;$/;"	t	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public
boost::ptr_container_detail::ptr_set_adapter_base::lower_bound	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        const_iterator lower_bound( const key_type& x ) const                             $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x ) const
boost::ptr_container_detail::ptr_set_adapter_base::lower_bound	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator lower_bound( const key_type& x )                                         $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x )
boost::ptr_container_detail::ptr_set_adapter_base::operator =	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base& operator=( ptr_set_adapter_base r ) $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( ptr_set_adapter_base r )
boost::ptr_container_detail::ptr_set_adapter_base::operator =	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base& operator=( std::auto_ptr<PtrContainer> clone )    $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( std::auto_ptr<PtrContainer> clone )
boost::ptr_container_detail::ptr_set_adapter_base::ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_set_adapter_base( std::auto_ptr<PtrContainer> clone )$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( std::auto_ptr<PtrContainer> clone )
boost::ptr_container_detail::ptr_set_adapter_base::ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator& a )
boost::ptr_container_detail::ptr_set_adapter_base::ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_container_detail::ptr_set_adapter_base::ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( SizeType n, $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( SizeType n, ptr_container_detail::unordered_associative_container_tag tag )
boost::ptr_container_detail::ptr_set_adapter_base::ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( const Compare& comp,$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const Compare& comp, const Allocator& a )
boost::ptr_container_detail::ptr_set_adapter_base::ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( const Hash& hash,$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_container_detail::ptr_set_adapter_base::ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( const ptr_set_adapter_base& r )$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const ptr_set_adapter_base& r )
boost::ptr_container_detail::ptr_set_adapter_base::ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( const ptr_set_adapter_base<U,Set,CA,b>& r )$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const ptr_set_adapter_base<U,Set,CA,b>& r )
boost::ptr_container_detail::ptr_set_adapter_base::ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base() $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:()
boost::ptr_container_detail::ptr_set_adapter_base::size_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                      size_type;$/;"	t	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public
boost::ptr_container_detail::ptr_set_adapter_base::upper_bound	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        const_iterator upper_bound( const key_type& x ) const                             $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x ) const
boost::ptr_container_detail::ptr_set_adapter_base::upper_bound	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator upper_bound( const key_type& x )                                         $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x )
boost::ptr_container_detail::ref_pair	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^        struct ref_pair$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::ref_pair::first	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            const F& first;$/;"	m	struct:boost::ptr_container_detail::ref_pair	access:public
boost::ptr_container_detail::ref_pair::first_type	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            typedef F first_type;$/;"	t	struct:boost::ptr_container_detail::ref_pair	access:public
boost::ptr_container_detail::ref_pair::operator !=	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            friend inline bool operator!=( ref_pair l, ref_pair r )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:friend	signature:( ref_pair l, ref_pair r )
boost::ptr_container_detail::ref_pair::operator ->	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            const ref_pair* const operator->() const$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:public	signature:() const
boost::ptr_container_detail::ref_pair::operator <	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            friend inline bool operator<( ref_pair l, ref_pair r )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:friend	signature:( ref_pair l, ref_pair r )
boost::ptr_container_detail::ref_pair::operator <=	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            friend inline bool operator<=( ref_pair l, ref_pair r )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:friend	signature:( ref_pair l, ref_pair r )
boost::ptr_container_detail::ref_pair::operator ==	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            friend inline bool operator==( ref_pair l, ref_pair r )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:friend	signature:( ref_pair l, ref_pair r )
boost::ptr_container_detail::ref_pair::operator >	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            friend inline bool operator>( ref_pair l, ref_pair r )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:friend	signature:( ref_pair l, ref_pair r )
boost::ptr_container_detail::ref_pair::operator >=	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            friend inline bool operator>=( ref_pair l, ref_pair r )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:friend	signature:( ref_pair l, ref_pair r )
boost::ptr_container_detail::ref_pair::ref_pair	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            ref_pair( const RP* rp )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:public	signature:( const RP* rp )
boost::ptr_container_detail::ref_pair::ref_pair	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            ref_pair( const std::pair<F2,S2>& p )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:public	signature:( const std::pair<F2,S2>& p )
boost::ptr_container_detail::ref_pair::second	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            S        second;$/;"	m	struct:boost::ptr_container_detail::ref_pair	access:public
boost::ptr_container_detail::ref_pair::second_type	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            typedef S second_type;$/;"	t	struct:boost::ptr_container_detail::ref_pair	access:public
boost::ptr_container_detail::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    class reversible_ptr_container $/;"	c	namespace:boost::ptr_container_detail
boost::ptr_container_detail::reversible_ptr_container::BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        BOOST_STATIC_CONSTANT( bool, allow_null = Config::allow_null );$/;"	p	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( bool, allow_null = Config::allow_null )
boost::ptr_container_detail::reversible_ptr_container::Cont	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef BOOST_DEDUCED_TYPENAME Config::void_container_type  Cont;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:private
boost::ptr_container_detail::reversible_ptr_container::Deleter	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef clone_deleter<null_cloner_type>                     Deleter;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:private
boost::ptr_container_detail::reversible_ptr_container::Ty_	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef BOOST_DEDUCED_TYPENAME Config::value_type Ty_;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:private
boost::ptr_container_detail::reversible_ptr_container::advance	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        ForwardIterator advance( ForwardIterator begin, size_type n ) $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( ForwardIterator begin, size_type n )
boost::ptr_container_detail::reversible_ptr_container::allocator_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   allocator_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::associative_constructor_impl	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void associative_constructor_impl( I first, I last ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( I first, I last )
boost::ptr_container_detail::reversible_ptr_container::auto_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   auto_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::base	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        Cont&       base()               { return c_; }$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
boost::ptr_container_detail::reversible_ptr_container::base	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const Cont& base() const         { return c_; }        $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:() const
boost::ptr_container_detail::reversible_ptr_container::begin	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_iterator begin() const      $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
boost::ptr_container_detail::reversible_ptr_container::begin	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator begin()            $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
boost::ptr_container_detail::reversible_ptr_container::c_	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        Cont      c_;$/;"	m	class:boost::ptr_container_detail::reversible_ptr_container	access:private
boost::ptr_container_detail::reversible_ptr_container::cbegin	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_iterator cbegin() const      $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
boost::ptr_container_detail::reversible_ptr_container::cend	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_iterator cend() const             $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
boost::ptr_container_detail::reversible_ptr_container::clear	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void clear()$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
boost::ptr_container_detail::reversible_ptr_container::clone_allocator_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef CloneAllocator     clone_allocator_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::clone_assign	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void clone_assign( ForwardIterator first, $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( ForwardIterator first, ForwardIterator last )
boost::ptr_container_detail::reversible_ptr_container::clone_back_insert	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void clone_back_insert( ForwardIterator first,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( ForwardIterator first, ForwardIterator last )
boost::ptr_container_detail::reversible_ptr_container::const_iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   const_iterator;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::const_reference	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef  const Ty_&    const_reference;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::const_reverse_iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   const_reverse_iterator;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::constructor_impl	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void constructor_impl( I first, I last, std::forward_iterator_tag ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( I first, I last, std::forward_iterator_tag )
boost::ptr_container_detail::reversible_ptr_container::constructor_impl	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void constructor_impl( I first, I last, std::input_iterator_tag ) \/\/ basic$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( I first, I last, std::input_iterator_tag )
boost::ptr_container_detail::reversible_ptr_container::copy	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void copy( InputIterator first, InputIterator last ) $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( InputIterator first, InputIterator last )
boost::ptr_container_detail::reversible_ptr_container::copy	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void copy( const reversible_ptr_container& r )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( const reversible_ptr_container& r )
boost::ptr_container_detail::reversible_ptr_container::copy_clones_and_release	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void copy_clones_and_release( scoped_deleter& sd ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( scoped_deleter& sd )
boost::ptr_container_detail::reversible_ptr_container::crbegin	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_reverse_iterator crbegin() const      $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
boost::ptr_container_detail::reversible_ptr_container::crend	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_reverse_iterator crend() const             $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
boost::ptr_container_detail::reversible_ptr_container::difference_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   difference_type; $/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::empty	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool empty() const \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
boost::ptr_container_detail::reversible_ptr_container::end	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_iterator end() const        $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
boost::ptr_container_detail::reversible_ptr_container::end	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator end()              $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
boost::ptr_container_detail::reversible_ptr_container::enforce_null_policy	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        static void enforce_null_policy( const Ty_* x, const char* msg )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( const Ty_* x, const char* msg )
boost::ptr_container_detail::reversible_ptr_container::erase	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator erase( const Range& r )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const Range& r )
boost::ptr_container_detail::reversible_ptr_container::erase	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator erase( iterator first, iterator last ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator first, iterator last )
boost::ptr_container_detail::reversible_ptr_container::erase	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator erase( iterator x ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator x )
boost::ptr_container_detail::reversible_ptr_container::get_allocator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        allocator_type get_allocator() const                   $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
boost::ptr_container_detail::reversible_ptr_container::insert	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator insert( iterator before, Ty_* x )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator before, Ty_* x )
boost::ptr_container_detail::reversible_ptr_container::insert	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator insert( iterator before, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator before, std::auto_ptr<U> x )
boost::ptr_container_detail::reversible_ptr_container::insert_clones_and_release	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void insert_clones_and_release( scoped_deleter& sd ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( scoped_deleter& sd )
boost::ptr_container_detail::reversible_ptr_container::insert_clones_and_release	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void insert_clones_and_release( scoped_deleter& sd, $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( scoped_deleter& sd, iterator where )
boost::ptr_container_detail::reversible_ptr_container::iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   iterator;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::max_size	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        size_type max_size() const \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
boost::ptr_container_detail::reversible_ptr_container::null_clone_allocator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        struct null_clone_allocator$/;"	s	class:boost::ptr_container_detail::reversible_ptr_container	access:private
boost::ptr_container_detail::reversible_ptr_container::null_clone_allocator::allocate_clone	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^            static Ty_* allocate_clone( const Ty_* x )$/;"	f	struct:boost::ptr_container_detail::reversible_ptr_container::null_clone_allocator	access:public	signature:( const Ty_* x )
boost::ptr_container_detail::reversible_ptr_container::null_clone_allocator::allocate_clone_from_iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^            static Ty_* allocate_clone_from_iterator( Iter i )$/;"	f	struct:boost::ptr_container_detail::reversible_ptr_container::null_clone_allocator	access:public	signature:( Iter i )
boost::ptr_container_detail::reversible_ptr_container::null_clone_allocator::deallocate_clone	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^            static void deallocate_clone( const Ty_* x )$/;"	f	struct:boost::ptr_container_detail::reversible_ptr_container::null_clone_allocator	access:public	signature:( const Ty_* x )
boost::ptr_container_detail::reversible_ptr_container::null_cloner_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                                                    null_cloner_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:private
boost::ptr_container_detail::reversible_ptr_container::null_cloner_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef null_clone_allocator<allow_null>                    null_cloner_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:private
boost::ptr_container_detail::reversible_ptr_container::null_policy_allocate_clone	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        static Ty_* null_policy_allocate_clone( const Ty_* x )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( const Ty_* x )
boost::ptr_container_detail::reversible_ptr_container::null_policy_deallocate_clone	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        static void null_policy_deallocate_clone( const Ty_* x )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( const Ty_* x )
boost::ptr_container_detail::reversible_ptr_container::operator !=	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool operator!=( const reversible_ptr_container& r ) const \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r ) const
boost::ptr_container_detail::reversible_ptr_container::operator <	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool operator<( const reversible_ptr_container& r ) const \/\/ nothrow $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r ) const
boost::ptr_container_detail::reversible_ptr_container::operator <=	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool operator<=( const reversible_ptr_container& r ) const \/\/ nothrow $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r ) const
boost::ptr_container_detail::reversible_ptr_container::operator =	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container& operator=( reversible_ptr_container r ) \/\/ strong $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( reversible_ptr_container r )
boost::ptr_container_detail::reversible_ptr_container::operator =	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container& operator=( std::auto_ptr<PtrContainer> clone ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( std::auto_ptr<PtrContainer> clone )
boost::ptr_container_detail::reversible_ptr_container::operator ==	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool operator==( const reversible_ptr_container& r ) const \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r ) const
boost::ptr_container_detail::reversible_ptr_container::operator >	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool operator>( const reversible_ptr_container& r ) const \/\/ nothrow $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r ) const
boost::ptr_container_detail::reversible_ptr_container::operator >=	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool operator>=( const reversible_ptr_container& r ) const \/\/ nothrow $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r ) const
boost::ptr_container_detail::reversible_ptr_container::pointer	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef  Ty_*          pointer;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::ptr_const_iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   ptr_const_iterator; $/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:protected
boost::ptr_container_detail::reversible_ptr_container::ptr_iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   ptr_iterator; $/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:protected
boost::ptr_container_detail::reversible_ptr_container::rbegin	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_reverse_iterator rbegin() const     $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
boost::ptr_container_detail::reversible_ptr_container::rbegin	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reverse_iterator rbegin()           $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
boost::ptr_container_detail::reversible_ptr_container::reference	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef  Ty_&          reference;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::release	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        auto_type release( iterator where )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator where )
boost::ptr_container_detail::reversible_ptr_container::remove	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void remove( I first, I last ) $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( I first, I last )
boost::ptr_container_detail::reversible_ptr_container::remove	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void remove( I i )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( I i )
boost::ptr_container_detail::reversible_ptr_container::remove	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void remove( U* ptr )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( U* ptr )
boost::ptr_container_detail::reversible_ptr_container::remove_all	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void remove_all() $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:()
boost::ptr_container_detail::reversible_ptr_container::rend	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_reverse_iterator rend() const       $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
boost::ptr_container_detail::reversible_ptr_container::rend	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reverse_iterator rend()             $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
boost::ptr_container_detail::reversible_ptr_container::replace	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        auto_type replace( iterator where, Ty_* x ) \/\/ strong  $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator where, Ty_* x )
boost::ptr_container_detail::reversible_ptr_container::replace	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        auto_type replace( iterator where, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator where, std::auto_ptr<U> x )
boost::ptr_container_detail::reversible_ptr_container::replace	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        auto_type replace( size_type idx, Ty_* x ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( size_type idx, Ty_* x )
boost::ptr_container_detail::reversible_ptr_container::replace	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        auto_type replace( size_type idx, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( size_type idx, std::auto_ptr<U> x )
boost::ptr_container_detail::reversible_ptr_container::reverse_iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   reverse_iterator;  $/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        explicit reversible_ptr_container( const allocator_type& a ) $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const allocator_type& a )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        explicit reversible_ptr_container( size_type n )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( size_type n )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        explicit reversible_ptr_container( std::auto_ptr<PtrContainer> clone )                $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( std::auto_ptr<PtrContainer> clone )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( ForwardIterator first,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( ForwardIterator first, ForwardIterator last, fixed_length_sequence_tag )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( InputIterator first, $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( InputIterator first, InputIterator last, const allocator_type& a = allocator_type() )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( InputIterator first,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( InputIterator first, InputIterator last, associative_container_tag )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( InputIterator first,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const allocator_type& a, associative_container_tag )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( InputIterator first,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( InputIterator first, InputIterator last, const Hash& h, const Pred& pred, const allocator_type& a )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( SizeType n, const allocator_type& a, $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( SizeType n, const allocator_type& a, fixed_length_sequence_tag )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( SizeType n, fixed_length_sequence_tag )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( SizeType n, fixed_length_sequence_tag )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( SizeType n, unordered_associative_container_tag )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( SizeType n, unordered_associative_container_tag )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( SizeType n,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( SizeType n, InputIterator first, InputIterator last, fixed_length_sequence_tag )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( const Compare& comp,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const Compare& comp, const allocator_type& a )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( const Compare& comp,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const Compare& comp, const allocator_type& a, associative_container_tag )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( const Hash& h,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const Hash& h, const Pred& pred, const allocator_type& a )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( const reversible_ptr_container& r ) $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( const reversible_ptr_container<C,V>& r ) $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container<C,V>& r )
boost::ptr_container_detail::reversible_ptr_container::reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container()$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
boost::ptr_container_detail::reversible_ptr_container::scoped_deleter	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   scoped_deleter;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:protected
boost::ptr_container_detail::reversible_ptr_container::size	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        size_type size() const \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
boost::ptr_container_detail::reversible_ptr_container::size_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   size_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::swap	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void swap( reversible_ptr_container& r ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( reversible_ptr_container& r )
boost::ptr_container_detail::reversible_ptr_container::value_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef  Ty_*          value_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
boost::ptr_container_detail::reversible_ptr_container::~reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        ~reversible_ptr_container()$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
boost::ptr_container_detail::save_helper	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^void save_helper(Archive& ar, const ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c)$/;"	f	namespace:boost::ptr_container_detail	signature:(Archive& ar, const ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c)
boost::ptr_container_detail::scoped_deleter	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^        class scoped_deleter$/;"	c	namespace:boost::ptr_container_detail
boost::ptr_container_detail::scoped_deleter::add	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            void add( T* t )$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:( T* t )
boost::ptr_container_detail::scoped_deleter::begin	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            T** begin()$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:()
boost::ptr_container_detail::scoped_deleter::end	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            T** end()$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:()
boost::ptr_container_detail::scoped_deleter::ptrs_	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            scoped_array<T*>  ptrs_;$/;"	m	class:boost::ptr_container_detail::scoped_deleter	access:private
boost::ptr_container_detail::scoped_deleter::release	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            void release()$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:()
boost::ptr_container_detail::scoped_deleter::released_	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            bool              released_;$/;"	m	class:boost::ptr_container_detail::scoped_deleter	access:private
boost::ptr_container_detail::scoped_deleter::scoped_deleter	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            scoped_deleter ( InputIterator first, InputIterator last  ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_container_detail::scoped_deleter::scoped_deleter	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            scoped_deleter( T** a, size_type size ) $/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:( T** a, size_type size )
boost::ptr_container_detail::scoped_deleter::scoped_deleter	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            scoped_deleter( size_type n, const T& x ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:( size_type n, const T& x )
boost::ptr_container_detail::scoped_deleter::scoped_deleter	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            scoped_deleter( size_type size ) $/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:( size_type size )
boost::ptr_container_detail::scoped_deleter::size_type	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            typedef std::size_t size_type;$/;"	t	class:boost::ptr_container_detail::scoped_deleter	access:private
boost::ptr_container_detail::scoped_deleter::stored_	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            size_type         stored_; $/;"	m	class:boost::ptr_container_detail::scoped_deleter	access:private
boost::ptr_container_detail::scoped_deleter::~scoped_deleter	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            ~scoped_deleter()$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:()
boost::ptr_container_detail::second	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^        inline const char* second() { return "second"; }$/;"	f	namespace:boost::ptr_container_detail	signature:()
boost::ptr_container_detail::select_const_local_iterator	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_const_local_iterator$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::select_const_local_iterator::type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::const_local_iterator type;$/;"	t	struct:boost::ptr_container_detail::select_const_local_iterator	access:public
boost::ptr_container_detail::select_hasher	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_hasher$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::select_hasher::type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::hasher type;$/;"	t	struct:boost::ptr_container_detail::select_hasher	access:public
boost::ptr_container_detail::select_iterator	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_iterator$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::select_iterator::type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::iterator type;$/;"	t	struct:boost::ptr_container_detail::select_iterator	access:public
boost::ptr_container_detail::select_key_compare	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_key_compare$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::select_key_compare::type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::key_compare type;$/;"	t	struct:boost::ptr_container_detail::select_key_compare	access:public
boost::ptr_container_detail::select_key_equal	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_key_equal$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::select_key_equal::type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::key_equal type;$/;"	t	struct:boost::ptr_container_detail::select_key_equal	access:public
boost::ptr_container_detail::select_local_iterator	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_local_iterator$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::select_local_iterator::type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::local_iterator type;$/;"	t	struct:boost::ptr_container_detail::select_local_iterator	access:public
boost::ptr_container_detail::select_value_compare	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_value_compare$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::select_value_compare::type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::value_compare type;$/;"	t	struct:boost::ptr_container_detail::select_value_compare	access:public
boost::ptr_container_detail::sequence_config	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^    struct sequence_config$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::sequence_config::BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        BOOST_STATIC_CONSTANT(bool, allow_null = boost::is_nullable<T>::value );$/;"	p	struct:boost::ptr_container_detail::sequence_config	access:public	signature:(bool, allow_null = boost::is_nullable<T>::value )
boost::ptr_container_detail::sequence_config::U	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                    U;$/;"	t	struct:boost::ptr_container_detail::sequence_config	access:public
boost::ptr_container_detail::sequence_config::allocator_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                    allocator_type;$/;"	t	struct:boost::ptr_container_detail::sequence_config	access:public
boost::ptr_container_detail::sequence_config::const_iterator	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                    const_iterator;$/;"	t	struct:boost::ptr_container_detail::sequence_config	access:public
boost::ptr_container_detail::sequence_config::get_const_pointer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        static const U* get_const_pointer( Iter i )$/;"	f	struct:boost::ptr_container_detail::sequence_config	access:public	signature:( Iter i )
boost::ptr_container_detail::sequence_config::get_const_pointer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        static const U* get_const_pointer( void_ptr_iterator<Iter,U> i )$/;"	f	struct:boost::ptr_container_detail::sequence_config	access:public	signature:( void_ptr_iterator<Iter,U> i )
boost::ptr_container_detail::sequence_config::get_const_pointer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        static const U* get_const_pointer( void_ptr_iterator<Iter,const U> i )$/;"	f	struct:boost::ptr_container_detail::sequence_config	access:public	signature:( void_ptr_iterator<Iter,const U> i )
boost::ptr_container_detail::sequence_config::get_pointer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        static U* get_pointer( Iter i )$/;"	f	struct:boost::ptr_container_detail::sequence_config	access:public	signature:( Iter i )
boost::ptr_container_detail::sequence_config::get_pointer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        static U* get_pointer( void_ptr_iterator<Iter,U> i )$/;"	f	struct:boost::ptr_container_detail::sequence_config	access:public	signature:( void_ptr_iterator<Iter,U> i )
boost::ptr_container_detail::sequence_config::iterator	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                    iterator;$/;"	t	struct:boost::ptr_container_detail::sequence_config	access:public
boost::ptr_container_detail::sequence_config::value_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef U   value_type;$/;"	t	struct:boost::ptr_container_detail::sequence_config	access:public
boost::ptr_container_detail::sequence_config::void_container_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                    void_container_type;$/;"	t	struct:boost::ptr_container_detail::sequence_config	access:public
boost::ptr_container_detail::sequence_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct sequence_tag {};$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::serialize_as_const	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^        inline T const& serialize_as_const(T const& r)$/;"	f	namespace:boost::ptr_container_detail	signature:(T const& r)
boost::ptr_container_detail::set_config	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^    struct set_config$/;"	s	namespace:boost::ptr_container_detail
boost::ptr_container_detail::set_config::BOOST_STATIC_CONSTANT	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^       BOOST_STATIC_CONSTANT(bool, allow_null = false );$/;"	p	struct:boost::ptr_container_detail::set_config	access:public	signature:(bool, allow_null = false )
boost::ptr_container_detail::set_config::allocator_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    allocator_type;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::set_config::const_iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    const_iterator;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::set_config::const_local_iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    const_local_iterator;           $/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::set_config::container_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    container_type;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::set_config::get_const_pointer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^       static const Key* get_const_pointer( Iter i )$/;"	f	struct:boost::ptr_container_detail::set_config	access:public	signature:( Iter i )
boost::ptr_container_detail::set_config::get_pointer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^       static Key* get_pointer( Iter i )$/;"	f	struct:boost::ptr_container_detail::set_config	access:public	signature:( Iter i )
boost::ptr_container_detail::set_config::hasher	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    hasher;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::set_config::iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    iterator;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::set_config::key_compare	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    key_compare;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::set_config::key_equal	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    key_equal;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::set_config::key_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    key_type;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::set_config::local_iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    local_iterator;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::set_config::value_compare	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    value_compare;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::set_config::value_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^       typedef Key  value_type;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::set_config::void_container_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    void_container_type;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
boost::ptr_container_detail::static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^class static_move_ptr $/;"	c	namespace:boost::ptr_container_detail
boost::ptr_container_detail::static_move_ptr::cant_move_from_const	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    struct cant_move_from_const< const static_move_ptr<TT, DD> > { $/;"	s	class:boost::ptr_container_detail::static_move_ptr	access:private
boost::ptr_container_detail::static_move_ptr::cant_move_from_const::type	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^        typedef typename static_move_ptr<TT, DD>::error type; $/;"	t	struct:boost::ptr_container_detail::static_move_ptr::cant_move_from_const	access:public
boost::ptr_container_detail::static_move_ptr::check	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    void check(const static_move_ptr<TT, DD>& ptr)$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:private	signature:(const static_move_ptr<TT, DD>& ptr)
boost::ptr_container_detail::static_move_ptr::deleter_const_reference	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    typedef typename impl_type::second_const_reference  deleter_const_reference;$/;"	t	class:boost::ptr_container_detail::static_move_ptr	access:public
boost::ptr_container_detail::static_move_ptr::deleter_reference	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    typedef typename impl_type::second_reference        deleter_reference;$/;"	t	class:boost::ptr_container_detail::static_move_ptr	access:public
boost::ptr_container_detail::static_move_ptr::deleter_type	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    typedef Deleter                                     deleter_type;$/;"	t	class:boost::ptr_container_detail::static_move_ptr	access:public
boost::ptr_container_detail::static_move_ptr::element_type	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    typedef typename remove_bounds<T>::type             element_type;$/;"	t	class:boost::ptr_container_detail::static_move_ptr	access:public
boost::ptr_container_detail::static_move_ptr::get	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    element_type* get() const { return ptr(); }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:() const
boost::ptr_container_detail::static_move_ptr::get_deleter	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    deleter_const_reference get_deleter() const { return impl_.second(); }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:() const
boost::ptr_container_detail::static_move_ptr::get_deleter	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    deleter_reference get_deleter() { return impl_.second(); }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
boost::ptr_container_detail::static_move_ptr::impl_	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    impl_type impl_;$/;"	m	class:boost::ptr_container_detail::static_move_ptr	access:public
boost::ptr_container_detail::static_move_ptr::impl_type	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    typedef boost::compressed_pair<element_type*, Deleter> impl_type;$/;"	t	class:boost::ptr_container_detail::static_move_ptr	access:private
boost::ptr_container_detail::static_move_ptr::operator *	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    const element_type& operator*() const $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:() const
boost::ptr_container_detail::static_move_ptr::operator *	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    element_type& operator*() $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
boost::ptr_container_detail::static_move_ptr::operator ->	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    const element_type* operator->() const $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:() const
boost::ptr_container_detail::static_move_ptr::operator ->	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    element_type* operator->()  $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
boost::ptr_container_detail::static_move_ptr::operator =	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr& operator=(static_move_ptr rhs)$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(static_move_ptr rhs)
boost::ptr_container_detail::static_move_ptr::operator safe_bool	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    operator safe_bool() const { return ptr() ? &safe_bool_helper::x : 0; }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:() const
boost::ptr_container_detail::static_move_ptr::ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    ptr() const { return impl_.first(); }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:() const
boost::ptr_container_detail::static_move_ptr::ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    ptr() { return impl_.first(); } $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
boost::ptr_container_detail::static_move_ptr::release	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    element_type* release()$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
boost::ptr_container_detail::static_move_ptr::reset	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    void reset()$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
boost::ptr_container_detail::static_move_ptr::reset	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    void reset(TT* tt) $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(TT* tt)
boost::ptr_container_detail::static_move_ptr::reset	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    void reset(TT* tt, DD dd) $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(TT* tt, DD dd)
boost::ptr_container_detail::static_move_ptr::safe_bool_helper	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    struct safe_bool_helper { int x; };$/;"	s	class:boost::ptr_container_detail::static_move_ptr	access:private
boost::ptr_container_detail::static_move_ptr::safe_bool_helper::safe_bool	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    typedef int safe_bool_helper::* safe_bool;$/;"	t	class:boost::ptr_container_detail::static_move_ptr::safe_bool_helper	access:private
boost::ptr_container_detail::static_move_ptr::safe_bool_helper::x	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    struct safe_bool_helper { int x; };$/;"	m	struct:boost::ptr_container_detail::static_move_ptr::safe_bool_helper	access:public
boost::ptr_container_detail::static_move_ptr::static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    explicit static_move_ptr(TT* tt) $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(TT* tt)
boost::ptr_container_detail::static_move_ptr::static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr( const move_ptrs::move_source<static_move_ptr<T,Deleter> >& src )$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:( const move_ptrs::move_source<static_move_ptr<T,Deleter> >& src )
boost::ptr_container_detail::static_move_ptr::static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr( static_move_ptr<TT, DD>&,$/;"	p	class:boost::ptr_container_detail::static_move_ptr	access:private	signature:( static_move_ptr<TT, DD>&, typename move_ptrs::enable_if_convertible< TT, T, static_move_ptr& >::type::type* = 0 )
boost::ptr_container_detail::static_move_ptr::static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr() : impl_(0) { }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
boost::ptr_container_detail::static_move_ptr::static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr(Ptr&, typename cant_move_from_const<Ptr>::type = 0);$/;"	p	class:boost::ptr_container_detail::static_move_ptr	access:private	signature:(Ptr&, typename cant_move_from_const<Ptr>::type = 0)
boost::ptr_container_detail::static_move_ptr::static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr(const static_move_ptr& p)$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(const static_move_ptr& p)
boost::ptr_container_detail::static_move_ptr::static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr(static_move_ptr&);$/;"	p	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(static_move_ptr&)
boost::ptr_container_detail::static_move_ptr::swap	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    void swap(static_move_ptr& p) { impl_.swap(p.impl_); }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(static_move_ptr& p)
boost::ptr_container_detail::static_move_ptr::~static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    ~static_move_ptr() { if (ptr()) get_deleter()(ptr()); }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
boost::ptr_container_detail::unordered_associative_container_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct unordered_associative_container_tag : associative_container_tag {};$/;"	s	namespace:boost::ptr_container_detail	inherits:associative_container_tag
boost::ptr_deque	/usr/include/boost/ptr_container/ptr_deque.hpp	/^    class ptr_deque : public $/;"	c	namespace:boost	inherits:ptr_sequence_adapter
boost::ptr_deque::base_class	/usr/include/boost/ptr_container/ptr_deque.hpp	/^          base_class;$/;"	t	class:boost::ptr_deque	access:private
boost::ptr_deque::this_type	/usr/include/boost/ptr_container/ptr_deque.hpp	/^         typedef ptr_deque<T,CloneAllocator,Allocator> this_type; $/;"	t	class:boost::ptr_deque	access:private
boost::ptr_list	/usr/include/boost/ptr_container/ptr_list.hpp	/^    class ptr_list : public $/;"	c	namespace:boost	inherits:ptr_sequence_adapter
boost::ptr_list::base_class	/usr/include/boost/ptr_container/ptr_list.hpp	/^            base_class;$/;"	t	class:boost::ptr_list	access:private
boost::ptr_list::erase_if	/usr/include/boost/ptr_container/ptr_list.hpp	/^        void erase_if( Pred pred )$/;"	f	class:boost::ptr_list	access:public	signature:( Pred pred )
boost::ptr_list::erase_if	/usr/include/boost/ptr_container/ptr_list.hpp	/^        void erase_if( iterator first, iterator last, Pred pred )$/;"	f	class:boost::ptr_list	access:public	signature:( iterator first, iterator last, Pred pred )
boost::ptr_list::merge	/usr/include/boost/ptr_container/ptr_list.hpp	/^        void merge( ptr_list& x )                                 $/;"	f	class:boost::ptr_list	access:public	signature:( ptr_list& x )
boost::ptr_list::merge	/usr/include/boost/ptr_container/ptr_list.hpp	/^        void merge( ptr_list& x, Compare comp )                   $/;"	f	class:boost::ptr_list	access:public	signature:( ptr_list& x, Compare comp )
boost::ptr_list::sort	/usr/include/boost/ptr_container/ptr_list.hpp	/^        void sort( Compare comp )                             $/;"	f	class:boost::ptr_list	access:public	signature:( Compare comp )
boost::ptr_list::sort	/usr/include/boost/ptr_container/ptr_list.hpp	/^        void sort()                                                    $/;"	f	class:boost::ptr_list	access:public	signature:()
boost::ptr_list::this_type	/usr/include/boost/ptr_container/ptr_list.hpp	/^        typedef ptr_list<T,CloneAllocator,Allocator>  this_type;$/;"	t	class:boost::ptr_list	access:private
boost::ptr_list::value_type	/usr/include/boost/ptr_container/ptr_list.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_class::value_type value_type;$/;"	t	class:boost::ptr_list	access:public
boost::ptr_map	/usr/include/boost/ptr_container/ptr_map.hpp	/^    class ptr_map : $/;"	c	namespace:boost	inherits:ptr_map_adapter
boost::ptr_map::base_type	/usr/include/boost/ptr_container/ptr_map.hpp	/^            base_type;$/;"	t	class:boost::ptr_map	access:private
boost::ptr_map::operator =	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_map& operator=( ptr_map r )$/;"	f	class:boost::ptr_map	access:public	signature:( ptr_map r )
boost::ptr_map::ptr_map	/usr/include/boost/ptr_container/ptr_map.hpp	/^        explicit ptr_map( const Compare& comp,$/;"	f	class:boost::ptr_map	access:public	signature:( const Compare& comp, const Allocator& a = Allocator() )
boost::ptr_map::ptr_map	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_map( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_map	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_map::ptr_map	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_map( InputIterator first, InputIterator last, $/;"	f	class:boost::ptr_map	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator& a = Allocator() )
boost::ptr_map::ptr_map	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_map( const ptr_map<Key,U>& r ) : base_type( r )$/;"	f	class:boost::ptr_map	access:public	signature:( const ptr_map<Key,U>& r )
boost::ptr_map::ptr_map	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_map()$/;"	f	class:boost::ptr_map	access:public	signature:()
boost::ptr_map::this_type	/usr/include/boost/ptr_container/ptr_map.hpp	/^        typedef ptr_map<Key,T,Compare,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_map	access:private
boost::ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^    class ptr_map_adapter : $/;"	c	namespace:boost	inherits:ptr_container_detail::ptr_map_adapter_base
boost::ptr_map_adapter::allocator_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    allocator_type;$/;"	t	class:boost::ptr_map_adapter	access:public
boost::ptr_map_adapter::auto_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    auto_type;$/;"	t	class:boost::ptr_map_adapter	access:public
boost::ptr_map_adapter::base_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            base_type;$/;"	t	class:boost::ptr_map_adapter	access:private
boost::ptr_map_adapter::const_iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     const_iterator;$/;"	t	class:boost::ptr_map_adapter	access:public
boost::ptr_map_adapter::const_reference	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    const_reference;$/;"	t	class:boost::ptr_map_adapter	access:public
boost::ptr_map_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( iterator before, const key_type& key, std::auto_ptr<U> x ) \/\/ strong$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( iterator before, const key_type& key, std::auto_ptr<U> x )
boost::ptr_map_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( iterator before, key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( iterator before, key_type& key, mapped_type x )
boost::ptr_map_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( iterator before, ptr_container_detail::ref_pair<F,S> p ) \/\/ strong$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( iterator before, ptr_container_detail::ref_pair<F,S> p )
boost::ptr_map_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        std::pair<iterator,bool> insert( const key_type& key, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const key_type& key, std::auto_ptr<U> x )
boost::ptr_map_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        std::pair<iterator,bool> insert( key_type& key, mapped_type x )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( key_type& key, mapped_type x )
boost::ptr_map_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void insert( InputIterator first, InputIterator last ) \/\/ basic$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_map_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void insert( const Range& r )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const Range& r )
boost::ptr_map_adapter::insert_impl	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert_impl( iterator before, const key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_map_adapter	access:private	signature:( iterator before, const key_type& key, mapped_type x )
boost::ptr_map_adapter::insert_impl	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        std::pair<iterator,bool> insert_impl( const key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_map_adapter	access:private	signature:( const key_type& key, mapped_type x )
boost::ptr_map_adapter::iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     iterator;       $/;"	t	class:boost::ptr_map_adapter	access:public
boost::ptr_map_adapter::key_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    key_type;$/;"	t	class:boost::ptr_map_adapter	access:public
boost::ptr_map_adapter::map_basic_clone_and_insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void map_basic_clone_and_insert( II first, II last )                  $/;"	f	class:boost::ptr_map_adapter	access:private	signature:( II first, II last )
boost::ptr_map_adapter::mapped_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    mapped_type;$/;"	t	class:boost::ptr_map_adapter	access:public
boost::ptr_map_adapter::operator =	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter& operator=( ptr_map_adapter r )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( ptr_map_adapter r )
boost::ptr_map_adapter::operator =	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter& operator=( std::auto_ptr<U> r )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( std::auto_ptr<U> r )
boost::ptr_map_adapter::ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        explicit ptr_map_adapter( const Comp& comp,$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const Comp& comp, const allocator_type& a )
boost::ptr_map_adapter::ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( )
boost::ptr_map_adapter::ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_map_adapter::ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( InputIterator first, InputIterator last, $/;"	f	class:boost::ptr_map_adapter	access:public	signature:( InputIterator first, InputIterator last, const Comp& comp, const allocator_type& a = allocator_type() )
boost::ptr_map_adapter::ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_map_adapter::ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( const Hash& hash,$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_map_adapter::ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( const ptr_map_adapter& r )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const ptr_map_adapter& r )
boost::ptr_map_adapter::ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( const ptr_map_adapter<Key,U,CA,b>& r )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const ptr_map_adapter<Key,U,CA,b>& r )
boost::ptr_map_adapter::ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( std::auto_ptr<U> r ) : base_type( r )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( std::auto_ptr<U> r )
boost::ptr_map_adapter::safe_insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void safe_insert( const key_type& key, auto_type ptr ) \/\/ strong$/;"	f	class:boost::ptr_map_adapter	access:private	signature:( const key_type& key, auto_type ptr )
boost::ptr_map_adapter::size_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    size_type;$/;"	t	class:boost::ptr_map_adapter	access:public
boost::ptr_map_adapter::transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        bool transfer( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator object, $/;"	f	class:boost::ptr_map_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator object, PtrMapAdapter& from )
boost::ptr_map_adapter::transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        size_type transfer( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator first, $/;"	f	class:boost::ptr_map_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator first, BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator last, PtrMapAdapter& from )
boost::ptr_map_adapter::transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        size_type transfer( PtrMapAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( PtrMapAdapter& from )
boost::ptr_map_adapter::transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        transfer( const Range& r, PtrMapAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const Range& r, PtrMapAdapter& from )
boost::ptr_map_iterator	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^    class ptr_map_iterator : $/;"	c	namespace:boost	inherits:boost::iterator_adaptor
boost::ptr_map_iterator::base_type	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            base_type;$/;"	t	class:boost::ptr_map_iterator	access:private
boost::ptr_map_iterator::ptr_map_iterator	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            ptr_map_iterator( const ptr_map_iterator<I2,F2,S2>& r ) $/;"	f	class:boost::ptr_map_iterator	access:public	signature:( const ptr_map_iterator<I2,F2,S2>& r )
boost::ptr_map_iterator::ptr_map_iterator	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^        explicit ptr_map_iterator( const I& i ) : base_type(i)$/;"	f	class:boost::ptr_map_iterator	access:public	signature:( const I& i )
boost::ptr_map_iterator::ptr_map_iterator	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^        ptr_map_iterator() : base_type()                                 $/;"	f	class:boost::ptr_map_iterator	access:public	signature:()
boost::ptr_multimap	/usr/include/boost/ptr_container/ptr_map.hpp	/^    class ptr_multimap : $/;"	c	namespace:boost	inherits:ptr_multimap_adapter
boost::ptr_multimap::base_type	/usr/include/boost/ptr_container/ptr_map.hpp	/^             base_type;$/;"	t	class:boost::ptr_multimap	access:private
boost::ptr_multimap::operator =	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_multimap& operator=( ptr_multimap r )$/;"	f	class:boost::ptr_multimap	access:public	signature:( ptr_multimap r )
boost::ptr_multimap::ptr_multimap	/usr/include/boost/ptr_container/ptr_map.hpp	/^        explicit ptr_multimap( const Compare& comp,$/;"	f	class:boost::ptr_multimap	access:public	signature:( const Compare& comp, const Allocator& a = Allocator() )
boost::ptr_multimap::ptr_multimap	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_multimap( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_multimap	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_multimap::ptr_multimap	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_multimap( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_multimap	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator& a = Allocator() )
boost::ptr_multimap::ptr_multimap	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_multimap( const ptr_multimap<Key,U>& r ) : base_type( r )$/;"	f	class:boost::ptr_multimap	access:public	signature:( const ptr_multimap<Key,U>& r )
boost::ptr_multimap::ptr_multimap	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_multimap()$/;"	f	class:boost::ptr_multimap	access:public	signature:()
boost::ptr_multimap::this_type	/usr/include/boost/ptr_container/ptr_map.hpp	/^        typedef ptr_multimap<Key,T,Compare,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_multimap	access:private
boost::ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^    class ptr_multimap_adapter : $/;"	c	namespace:boost	inherits:ptr_container_detail::ptr_map_adapter_base
boost::ptr_multimap_adapter::allocator_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    allocator_type;$/;"	t	class:boost::ptr_multimap_adapter	access:public
boost::ptr_multimap_adapter::auto_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    auto_type;            $/;"	t	class:boost::ptr_multimap_adapter	access:public
boost::ptr_multimap_adapter::base_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^             base_type;$/;"	t	class:boost::ptr_multimap_adapter	access:private
boost::ptr_multimap_adapter::const_iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                       const_iterator;           $/;"	t	class:boost::ptr_multimap_adapter	access:public
boost::ptr_multimap_adapter::const_reference	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                       const_reference;$/;"	t	class:boost::ptr_multimap_adapter	access:public
boost::ptr_multimap_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( const key_type& key, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const key_type& key, std::auto_ptr<U> x )
boost::ptr_multimap_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( iterator before, const key_type& key, std::auto_ptr<U> x ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( iterator before, const key_type& key, std::auto_ptr<U> x )
boost::ptr_multimap_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( iterator before, key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( iterator before, key_type& key, mapped_type x )
boost::ptr_multimap_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( iterator before, ptr_container_detail::ref_pair<F,S> p ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( iterator before, ptr_container_detail::ref_pair<F,S> p )
boost::ptr_multimap_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( key_type& key, mapped_type x )
boost::ptr_multimap_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void insert( InputIterator first, InputIterator last ) \/\/ basic$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_multimap_adapter::insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void insert( const Range& r )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const Range& r )
boost::ptr_multimap_adapter::insert_impl	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert_impl( const key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:private	signature:( const key_type& key, mapped_type x )
boost::ptr_multimap_adapter::insert_impl	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert_impl( iterator before, const key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:private	signature:( iterator before, const key_type& key, mapped_type x )
boost::ptr_multimap_adapter::iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                       iterator;                 $/;"	t	class:boost::ptr_multimap_adapter	access:public
boost::ptr_multimap_adapter::key_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                       key_type;$/;"	t	class:boost::ptr_multimap_adapter	access:public
boost::ptr_multimap_adapter::map_basic_clone_and_insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void map_basic_clone_and_insert( II first, II last )                  $/;"	f	class:boost::ptr_multimap_adapter	access:private	signature:( II first, II last )
boost::ptr_multimap_adapter::mapped_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    mapped_type;$/;"	t	class:boost::ptr_multimap_adapter	access:public
boost::ptr_multimap_adapter::operator =	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter& operator=( ptr_multimap_adapter r )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( ptr_multimap_adapter r )
boost::ptr_multimap_adapter::operator =	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter& operator=( std::auto_ptr<U> r )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( std::auto_ptr<U> r )
boost::ptr_multimap_adapter::ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        explicit ptr_multimap_adapter( const Comp& comp,$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const Comp& comp, const allocator_type& a )
boost::ptr_multimap_adapter::ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        explicit ptr_multimap_adapter( std::auto_ptr<U> r ) : base_type( r )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( std::auto_ptr<U> r )
boost::ptr_multimap_adapter::ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_multimap_adapter::ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( InputIterator first, InputIterator last, const Comp& comp, const allocator_type& a )
boost::ptr_multimap_adapter::ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_multimap_adapter::ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( SizeType n, $/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( SizeType n, ptr_container_detail::unordered_associative_container_tag tag )
boost::ptr_multimap_adapter::ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( const Hash& hash,$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_multimap_adapter::ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( const ptr_multimap_adapter& r )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const ptr_multimap_adapter& r )
boost::ptr_multimap_adapter::ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( const ptr_multimap_adapter<Key,U,CA,b>& r )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const ptr_multimap_adapter<Key,U,CA,b>& r )
boost::ptr_multimap_adapter::ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter()$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:()
boost::ptr_multimap_adapter::safe_insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void safe_insert( const key_type& key, auto_type ptr ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:private	signature:( const key_type& key, auto_type ptr )
boost::ptr_multimap_adapter::size_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                       size_type;$/;"	t	class:boost::ptr_multimap_adapter	access:public
boost::ptr_multimap_adapter::transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        size_type transfer( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator first, $/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator first, BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator last, PtrMapAdapter& from )
boost::ptr_multimap_adapter::transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        transfer( const Range& r, PtrMapAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const Range& r, PtrMapAdapter& from )
boost::ptr_multimap_adapter::transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void transfer( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator object, $/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator object, PtrMapAdapter& from )
boost::ptr_multimap_adapter::transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void transfer( PtrMapAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( PtrMapAdapter& from )
boost::ptr_multiset	/usr/include/boost/ptr_container/ptr_set.hpp	/^    class ptr_multiset : $/;"	c	namespace:boost	inherits:ptr_multiset_adapter
boost::ptr_multiset::base_type	/usr/include/boost/ptr_container/ptr_set.hpp	/^              base_type;$/;"	t	class:boost::ptr_multiset	access:private
boost::ptr_multiset::ptr_multiset	/usr/include/boost/ptr_container/ptr_set.hpp	/^        explicit ptr_multiset( const Compare& comp,$/;"	f	class:boost::ptr_multiset	access:public	signature:( const Compare& comp, const Allocator& a = Allocator() )
boost::ptr_multiset::ptr_multiset	/usr/include/boost/ptr_container/ptr_set.hpp	/^        ptr_multiset( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_multiset	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_multiset::ptr_multiset	/usr/include/boost/ptr_container/ptr_set.hpp	/^        ptr_multiset( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_multiset	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator& a = Allocator() )
boost::ptr_multiset::ptr_multiset	/usr/include/boost/ptr_container/ptr_set.hpp	/^        ptr_multiset()$/;"	f	class:boost::ptr_multiset	access:public	signature:()
boost::ptr_multiset::this_type	/usr/include/boost/ptr_container/ptr_set.hpp	/^        typedef ptr_multiset<Key,Compare,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_multiset	access:private
boost::ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^    class ptr_multiset_adapter : $/;"	c	namespace:boost	inherits:ptr_container_detail::ptr_set_adapter_base
boost::ptr_multiset_adapter::allocator_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                       allocator_type;        $/;"	t	class:boost::ptr_multiset_adapter	access:public
boost::ptr_multiset_adapter::auto_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                       auto_type;$/;"	t	class:boost::ptr_multiset_adapter	access:public
boost::ptr_multiset_adapter::base_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^         typedef ptr_container_detail::ptr_set_adapter_base<Key,VoidPtrMultiSet,CloneAllocator,Ordered> base_type;$/;"	t	class:boost::ptr_multiset_adapter	access:private
boost::ptr_multiset_adapter::insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        insert( const Range& r )$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( const Range& r )
boost::ptr_multiset_adapter::insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator insert( iterator before, key_type* x ) \/\/ strong  $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( iterator before, key_type* x )
boost::ptr_multiset_adapter::insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator insert( iterator before, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( iterator before, std::auto_ptr<U> x )
boost::ptr_multiset_adapter::insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator insert( key_type* x ) \/\/ strong                                      $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( key_type* x )
boost::ptr_multiset_adapter::insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator insert( std::auto_ptr<U> x )$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( std::auto_ptr<U> x )
boost::ptr_multiset_adapter::insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void insert( InputIterator first, InputIterator last ) \/\/ basic$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_multiset_adapter::iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                       iterator;          $/;"	t	class:boost::ptr_multiset_adapter	access:public
boost::ptr_multiset_adapter::key_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        typedef Key    key_type;$/;"	t	class:boost::ptr_multiset_adapter	access:public
boost::ptr_multiset_adapter::operator =	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter& operator=( const ptr_multiset_adapter<U,Set,CA,b>& r ) $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( const ptr_multiset_adapter<U,Set,CA,b>& r )
boost::ptr_multiset_adapter::operator =	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void operator=( std::auto_ptr<T> r ) $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( std::auto_ptr<T> r )
boost::ptr_multiset_adapter::ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_multiset_adapter( const Comp& comp,$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( const Comp& comp, const allocator_type& a )
boost::ptr_multiset_adapter::ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_multiset_adapter( const ptr_multiset_adapter<U,Set,CA,b>& r )$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( const ptr_multiset_adapter<U,Set,CA,b>& r )
boost::ptr_multiset_adapter::ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_multiset_adapter( std::auto_ptr<PtrContainer> clone )$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( std::auto_ptr<PtrContainer> clone )
boost::ptr_multiset_adapter::ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_multiset_adapter::ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( InputIterator first, InputIterator last, const Comp& comp, const allocator_type& a = allocator_type() )
boost::ptr_multiset_adapter::ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_multiset_adapter::ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter( SizeType n, $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( SizeType n, ptr_container_detail::unordered_associative_container_tag tag )
boost::ptr_multiset_adapter::ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter( const Hash& hash,$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_multiset_adapter::ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter()$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:()
boost::ptr_multiset_adapter::set_basic_clone_and_insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void set_basic_clone_and_insert( II first, II last ) \/\/ basic                 $/;"	f	class:boost::ptr_multiset_adapter	access:private	signature:( II first, II last )
boost::ptr_multiset_adapter::size_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                       size_type;$/;"	t	class:boost::ptr_multiset_adapter	access:public
boost::ptr_multiset_adapter::transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        size_type transfer( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator first, $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator first, BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator last, PtrSetAdapter& from )
boost::ptr_multiset_adapter::transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        transfer(  const Range& r, PtrSetAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( const Range& r, PtrSetAdapter& from )
boost::ptr_multiset_adapter::transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void transfer( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator object, $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator object, PtrSetAdapter& from )
boost::ptr_multiset_adapter::transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void transfer( PtrSetAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( PtrSetAdapter& from )
boost::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^    class ptr_sequence_adapter : public $/;"	c	namespace:boost	inherits:ptr_container_detail::reversible_ptr_container
boost::ptr_sequence_adapter::allocator_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                                                              allocator_type;$/;"	t	class:boost::ptr_sequence_adapter	access:public
boost::ptr_sequence_adapter::assign	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void assign( InputIterator first, InputIterator last ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_sequence_adapter::assign	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void assign( const Range& r ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const Range& r )
boost::ptr_sequence_adapter::at	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        const_reference at( size_type n ) const$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type n ) const
boost::ptr_sequence_adapter::at	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        reference at( size_type n )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type n )
boost::ptr_sequence_adapter::auto_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_type::auto_type   auto_type;$/;"	t	class:boost::ptr_sequence_adapter	access:public
boost::ptr_sequence_adapter::back	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        const_reference back() const$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:() const
boost::ptr_sequence_adapter::back	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        reference back()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
boost::ptr_sequence_adapter::base_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^             base_type;$/;"	t	class:boost::ptr_sequence_adapter	access:private
boost::ptr_sequence_adapter::c_array	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        value_type* c_array() \/\/ nothrow$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
boost::ptr_sequence_adapter::capacity	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        size_type capacity() const$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:() const
boost::ptr_sequence_adapter::clone_allocator_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                                                              clone_allocator_type;$/;"	t	class:boost::ptr_sequence_adapter	access:public
boost::ptr_sequence_adapter::compact_and_erase_nulls	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void compact_and_erase_nulls( iterator first, iterator last ) \/\/ nothrow$/;"	f	class:boost::ptr_sequence_adapter	access:private	signature:( iterator first, iterator last )
boost::ptr_sequence_adapter::const_reference	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                                                              const_reference;$/;"	t	class:boost::ptr_sequence_adapter	access:public
boost::ptr_sequence_adapter::erase_if	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void erase_if( Pred pred )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( Pred pred )
boost::ptr_sequence_adapter::erase_if	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void erase_if( iterator first, iterator last, Pred pred )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last, Pred pred )
boost::ptr_sequence_adapter::front	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        const_reference front() const  $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:() const
boost::ptr_sequence_adapter::front	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        reference front()        $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
boost::ptr_sequence_adapter::insert	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        insert( iterator before, const Range& r )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, const Range& r )
boost::ptr_sequence_adapter::insert	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void insert( iterator before, InputIterator first, InputIterator last ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, InputIterator first, InputIterator last )
boost::ptr_sequence_adapter::insert_impl	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void insert_impl( iterator before, I first, I last, std::forward_iterator_tag ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:private	signature:( iterator before, I first, I last, std::forward_iterator_tag )
boost::ptr_sequence_adapter::insert_impl	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void insert_impl( iterator before, I first, I last, std::input_iterator_tag ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:private	signature:( iterator before, I first, I last, std::input_iterator_tag )
boost::ptr_sequence_adapter::is_not_zero_ptr	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        struct is_not_zero_ptr$/;"	s	class:boost::ptr_sequence_adapter	access:private
boost::ptr_sequence_adapter::is_not_zero_ptr::operator ()	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^            bool operator()( const U* r ) const$/;"	f	struct:boost::ptr_sequence_adapter::is_not_zero_ptr	access:public	signature:( const U* r ) const
boost::ptr_sequence_adapter::is_null	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        bool is_null( size_type idx ) const$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type idx ) const
boost::ptr_sequence_adapter::iterator	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_type::iterator    iterator;          $/;"	t	class:boost::ptr_sequence_adapter	access:public
boost::ptr_sequence_adapter::merge	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void merge( iterator first, iterator last, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last, ptr_sequence_adapter& from )
boost::ptr_sequence_adapter::merge	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void merge( iterator first, iterator last, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last, ptr_sequence_adapter& from, BinPred pred )
boost::ptr_sequence_adapter::merge	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void merge( ptr_sequence_adapter& r )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( ptr_sequence_adapter& r )
boost::ptr_sequence_adapter::merge	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void merge( ptr_sequence_adapter& r, BinPred pred )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( ptr_sequence_adapter& r, BinPred pred )
boost::ptr_sequence_adapter::operator =	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter& operator=( const ptr_sequence_adapter r )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const ptr_sequence_adapter r )
boost::ptr_sequence_adapter::operator =	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter& operator=( std::auto_ptr<PtrContainer> clone )    $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( std::auto_ptr<PtrContainer> clone )
boost::ptr_sequence_adapter::operator []	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        const_reference operator[]( size_type n ) const \/\/ nothrow  $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type n ) const
boost::ptr_sequence_adapter::operator []	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        reference operator[]( size_type n ) \/\/ nothrow $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type n )
boost::ptr_sequence_adapter::pop_back	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        auto_type pop_back()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
boost::ptr_sequence_adapter::pop_front	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        auto_type pop_front()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        explicit ptr_sequence_adapter( const Allocator& a )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const Allocator& a )
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        explicit ptr_sequence_adapter( std::auto_ptr<PtrContainer> clone )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( std::auto_ptr<PtrContainer> clone )
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( ForwardIterator first,$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( ForwardIterator first, ForwardIterator last, ptr_container_detail::fixed_length_sequence_tag tag )
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( InputIterator first, InputIterator last, const Allocator& a )
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( SizeType n, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( SizeType n, ptr_container_detail::fixed_length_sequence_tag tag )
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( SizeType n, const Allocator& a, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( SizeType n, const Allocator& a, ptr_container_detail::fixed_length_sequence_tag tag )
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( SizeType n,$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( SizeType n, ForwardIterator first, ForwardIterator last, ptr_container_detail::fixed_length_sequence_tag tag )
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( const ptr_sequence_adapter& r )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const ptr_sequence_adapter& r )
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( const ptr_sequence_adapter& r,$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const ptr_sequence_adapter& r, ptr_container_detail::fixed_length_sequence_tag tag )
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( const ptr_sequence_adapter<U,VoidPtrSeq,CloneAllocator>& r )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const ptr_sequence_adapter<U,VoidPtrSeq,CloneAllocator>& r )
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( const ptr_sequence_adapter<U,VoidPtrSeq,CloneAllocator>& r,$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const ptr_sequence_adapter<U,VoidPtrSeq,CloneAllocator>& r, ptr_container_detail::fixed_length_sequence_tag tag )
boost::ptr_sequence_adapter::ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
boost::ptr_sequence_adapter::push_back	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void push_back( std::auto_ptr<U> x )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( std::auto_ptr<U> x )
boost::ptr_sequence_adapter::push_back	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void push_back( value_type x )  \/\/ strong               $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( value_type x )
boost::ptr_sequence_adapter::push_front	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void push_front( std::auto_ptr<U> x )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( std::auto_ptr<U> x )
boost::ptr_sequence_adapter::push_front	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void push_front( value_type x )                $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( value_type x )
boost::ptr_sequence_adapter::range_check	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void range_check( iterator first, iterator last )$/;"	f	class:boost::ptr_sequence_adapter	access:private	signature:( iterator first, iterator last )
boost::ptr_sequence_adapter::range_check_impl	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void range_check_impl( iterator first, iterator last, $/;"	f	class:boost::ptr_sequence_adapter	access:private	signature:( iterator first, iterator last, std::bidirectional_iterator_tag )
boost::ptr_sequence_adapter::range_check_impl	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void range_check_impl( iterator first, iterator last,$/;"	f	class:boost::ptr_sequence_adapter	access:private	signature:( iterator first, iterator last, std::random_access_iterator_tag )
boost::ptr_sequence_adapter::reference	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_type::reference   reference; $/;"	t	class:boost::ptr_sequence_adapter	access:public
boost::ptr_sequence_adapter::reserve	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void reserve( size_type n )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type n )
boost::ptr_sequence_adapter::resize	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void resize( size_type size ) \/\/ basic$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type size )
boost::ptr_sequence_adapter::resize	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void resize( size_type size, value_type to_clone ) \/\/ basic$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type size, value_type to_clone )
boost::ptr_sequence_adapter::reverse	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void reverse()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
boost::ptr_sequence_adapter::rresize	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void rresize( size_type size ) \/\/ basic$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type size )
boost::ptr_sequence_adapter::rresize	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void rresize( size_type size, value_type to_clone ) \/\/ basic$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type size, value_type to_clone )
boost::ptr_sequence_adapter::scoped_deleter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_type::scoped_deleter scoped_deleter;$/;"	t	class:boost::ptr_sequence_adapter	access:protected
boost::ptr_sequence_adapter::size_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_type::size_type   size_type;  $/;"	t	class:boost::ptr_sequence_adapter	access:public
boost::ptr_sequence_adapter::sort	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void sort( Compare comp )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( Compare comp )
boost::ptr_sequence_adapter::sort	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void sort( iterator first, iterator last )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last )
boost::ptr_sequence_adapter::sort	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void sort( iterator first, iterator last, Compare comp )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last, Compare comp )
boost::ptr_sequence_adapter::sort	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void sort()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
boost::ptr_sequence_adapter::this_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^            this_type;$/;"	t	class:boost::ptr_sequence_adapter	access:private
boost::ptr_sequence_adapter::transfer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        transfer( iterator before, const Range& r, PtrSeqAdapter& from ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, const Range& r, PtrSeqAdapter& from )
boost::ptr_sequence_adapter::transfer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void transfer( iterator before, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, BOOST_DEDUCED_TYPENAME PtrSeqAdapter::iterator first, BOOST_DEDUCED_TYPENAME PtrSeqAdapter::iterator last, PtrSeqAdapter& from )
boost::ptr_sequence_adapter::transfer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void transfer( iterator before, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, BOOST_DEDUCED_TYPENAME PtrSeqAdapter::iterator object, PtrSeqAdapter& from )
boost::ptr_sequence_adapter::transfer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void transfer( iterator before, PtrSeqAdapter& from ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, PtrSeqAdapter& from )
boost::ptr_sequence_adapter::transfer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void transfer( iterator before, value_type* from, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, value_type* from, size_type size, bool delete_from = true )
boost::ptr_sequence_adapter::unique	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void unique( Compare comp )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( Compare comp )
boost::ptr_sequence_adapter::unique	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void unique( iterator first, iterator last )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last )
boost::ptr_sequence_adapter::unique	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void unique( iterator first, iterator last, Compare comp )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last, Compare comp )
boost::ptr_sequence_adapter::unique	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void unique()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
boost::ptr_sequence_adapter::value_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_type::value_type  value_type; $/;"	t	class:boost::ptr_sequence_adapter	access:public
boost::ptr_sequence_adapter::void_ptr_delete_if	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        class void_ptr_delete_if $/;"	c	class:boost::ptr_sequence_adapter	access:protected
boost::ptr_sequence_adapter::void_ptr_delete_if::fun	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^            Fun fun;$/;"	m	class:boost::ptr_sequence_adapter::void_ptr_delete_if	access:private
boost::ptr_sequence_adapter::void_ptr_delete_if::operator ()	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^            bool operator()( void* r ) const$/;"	f	class:boost::ptr_sequence_adapter::void_ptr_delete_if	access:public	signature:( void* r ) const
boost::ptr_sequence_adapter::void_ptr_delete_if::void_ptr_delete_if	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^            void_ptr_delete_if( Fun f ) : fun(f)$/;"	f	class:boost::ptr_sequence_adapter::void_ptr_delete_if	access:public	signature:( Fun f )
boost::ptr_sequence_adapter::void_ptr_delete_if::void_ptr_delete_if	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^            void_ptr_delete_if() : fun(Fun())$/;"	f	class:boost::ptr_sequence_adapter::void_ptr_delete_if	access:public	signature:()
boost::ptr_set	/usr/include/boost/ptr_container/ptr_set.hpp	/^    class ptr_set : $/;"	c	namespace:boost	inherits:ptr_set_adapter
boost::ptr_set::base_type	/usr/include/boost/ptr_container/ptr_set.hpp	/^             base_type;$/;"	t	class:boost::ptr_set	access:private
boost::ptr_set::ptr_set	/usr/include/boost/ptr_container/ptr_set.hpp	/^        explicit ptr_set( const Compare& comp,$/;"	f	class:boost::ptr_set	access:public	signature:( const Compare& comp, const Allocator& a = Allocator() )
boost::ptr_set::ptr_set	/usr/include/boost/ptr_container/ptr_set.hpp	/^        ptr_set( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_set	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_set::ptr_set	/usr/include/boost/ptr_container/ptr_set.hpp	/^        ptr_set( InputIterator first, InputIterator last, $/;"	f	class:boost::ptr_set	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator& a = Allocator() )
boost::ptr_set::ptr_set	/usr/include/boost/ptr_container/ptr_set.hpp	/^        ptr_set()$/;"	f	class:boost::ptr_set	access:public	signature:()
boost::ptr_set::this_type	/usr/include/boost/ptr_container/ptr_set.hpp	/^        typedef ptr_set<Key,Compare,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_set	access:private
boost::ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^    class ptr_set_adapter : $/;"	c	namespace:boost	inherits:ptr_container_detail::ptr_set_adapter_base
boost::ptr_set_adapter::allocator_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                     allocator_type;        $/;"	t	class:boost::ptr_set_adapter	access:public
boost::ptr_set_adapter::auto_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                     auto_type;$/;"	t	class:boost::ptr_set_adapter	access:public
boost::ptr_set_adapter::base_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^            base_type;$/;"	t	class:boost::ptr_set_adapter	access:private
boost::ptr_set_adapter::const_iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                     const_iterator;                 $/;"	t	class:boost::ptr_set_adapter	access:public
boost::ptr_set_adapter::insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        insert( const Range& r )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const Range& r )
boost::ptr_set_adapter::insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator insert( iterator where, key_type* x ) \/\/ strong$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( iterator where, key_type* x )
boost::ptr_set_adapter::insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator insert( iterator where, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( iterator where, std::auto_ptr<U> x )
boost::ptr_set_adapter::insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        std::pair<iterator,bool> insert( key_type* x ) \/\/ strong                      $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( key_type* x )
boost::ptr_set_adapter::insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        std::pair<iterator,bool> insert( std::auto_ptr<U> x )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( std::auto_ptr<U> x )
boost::ptr_set_adapter::insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void insert( InputIterator first, InputIterator last ) \/\/ basic$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_set_adapter::iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                     iterator;                 $/;"	t	class:boost::ptr_set_adapter	access:public
boost::ptr_set_adapter::key_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        typedef Key  key_type;$/;"	t	class:boost::ptr_set_adapter	access:public
boost::ptr_set_adapter::operator =	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter& operator=( const ptr_set_adapter<U,Set,CA,b>& r ) $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const ptr_set_adapter<U,Set,CA,b>& r )
boost::ptr_set_adapter::operator =	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void operator=( std::auto_ptr<T> r ) $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( std::auto_ptr<T> r )
boost::ptr_set_adapter::ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_set_adapter( const Comp& comp,$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const Comp& comp, const allocator_type& a )
boost::ptr_set_adapter::ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_set_adapter( const ptr_set_adapter& r )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const ptr_set_adapter& r )
boost::ptr_set_adapter::ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_set_adapter( const ptr_set_adapter<U,Set,CA,b>& r )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const ptr_set_adapter<U,Set,CA,b>& r )
boost::ptr_set_adapter::ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_set_adapter( std::auto_ptr<PtrContainer> clone )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( std::auto_ptr<PtrContainer> clone )
boost::ptr_set_adapter::ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_set_adapter::ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter( InputIterator first, InputIterator last, $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator a = Allocator() )
boost::ptr_set_adapter::ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_set_adapter::ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter( SizeType n, $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( SizeType n, ptr_container_detail::unordered_associative_container_tag tag )
boost::ptr_set_adapter::ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter( const Hash& hash,$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
boost::ptr_set_adapter::ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter()$/;"	f	class:boost::ptr_set_adapter	access:public	signature:()
boost::ptr_set_adapter::set_basic_clone_and_insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void set_basic_clone_and_insert( II first, II last ) \/\/ basic                 $/;"	f	class:boost::ptr_set_adapter	access:private	signature:( II first, II last )
boost::ptr_set_adapter::size_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                     size_type;    $/;"	t	class:boost::ptr_set_adapter	access:public
boost::ptr_set_adapter::transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        bool transfer( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator object, $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator object, PtrSetAdapter& from )
boost::ptr_set_adapter::transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        size_type transfer( PtrSetAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( PtrSetAdapter& from )
boost::ptr_set_adapter::transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        transfer( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator first, $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator first, BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator last, PtrSetAdapter& from )
boost::ptr_set_adapter::transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        transfer( const Range& r, PtrSetAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const Range& r, PtrSetAdapter& from )
boost::ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^    class ptr_unordered_map : $/;"	c	namespace:boost	inherits:ptr_map_adapter
boost::ptr_unordered_map::base_type	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^            base_type;$/;"	t	class:boost::ptr_unordered_map	access:private
boost::ptr_unordered_map::operator =	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_map& operator=( ptr_unordered_map r )$/;"	f	class:boost::ptr_unordered_map	access:public	signature:( ptr_unordered_map r )
boost::ptr_unordered_map::ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        explicit ptr_unordered_map( size_type n )$/;"	f	class:boost::ptr_unordered_map	access:public	signature:( size_type n )
boost::ptr_unordered_map::ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_map( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_unordered_map	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_unordered_map::ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_map( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_unordered_map	access:public	signature:( InputIterator first, InputIterator last, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
boost::ptr_unordered_map::ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_map( const ptr_unordered_map<Key,U>& r ) : base_type( r )$/;"	f	class:boost::ptr_unordered_map	access:public	signature:( const ptr_unordered_map<Key,U>& r )
boost::ptr_unordered_map::ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_map( size_type n,$/;"	f	class:boost::ptr_unordered_map	access:public	signature:( size_type n, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
boost::ptr_unordered_map::ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_map()$/;"	f	class:boost::ptr_unordered_map	access:public	signature:()
boost::ptr_unordered_map::size_type	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        typedef typename base_type::size_type size_type;$/;"	t	class:boost::ptr_unordered_map	access:public
boost::ptr_unordered_map::this_type	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        typedef ptr_unordered_map<Key,T,Hash,Pred,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_unordered_map	access:private
boost::ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^    class ptr_unordered_multimap : $/;"	c	namespace:boost	inherits:ptr_multimap_adapter
boost::ptr_unordered_multimap::base_type	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^            base_type;$/;"	t	class:boost::ptr_unordered_multimap	access:private
boost::ptr_unordered_multimap::operator =	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_multimap& operator=( ptr_unordered_multimap r )$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:( ptr_unordered_multimap r )
boost::ptr_unordered_multimap::ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        explicit ptr_unordered_multimap( size_type n )$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:( size_type n )
boost::ptr_unordered_multimap::ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_multimap( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_unordered_multimap::ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_multimap( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:( InputIterator first, InputIterator last, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
boost::ptr_unordered_multimap::ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_multimap( const ptr_unordered_multimap<Key,U>& r ) : base_type( r )$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:( const ptr_unordered_multimap<Key,U>& r )
boost::ptr_unordered_multimap::ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_multimap( size_type n,$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:( size_type n, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
boost::ptr_unordered_multimap::ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_multimap()$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:()
boost::ptr_unordered_multimap::size_type	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        typedef typename base_type::size_type size_type;$/;"	t	class:boost::ptr_unordered_multimap	access:public
boost::ptr_unordered_multimap::this_type	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        typedef ptr_unordered_multimap<Key,T,Hash,Pred,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_unordered_multimap	access:private
boost::ptr_unordered_multiset	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^    class ptr_unordered_multiset : $/;"	c	namespace:boost	inherits:ptr_multiset_adapter
boost::ptr_unordered_multiset::base_type	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^              base_type;$/;"	t	class:boost::ptr_unordered_multiset	access:private
boost::ptr_unordered_multiset::ptr_unordered_multiset	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        explicit ptr_unordered_multiset( size_type n )$/;"	f	class:boost::ptr_unordered_multiset	access:public	signature:( size_type n )
boost::ptr_unordered_multiset::ptr_unordered_multiset	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_multiset( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_unordered_multiset	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_unordered_multiset::ptr_unordered_multiset	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_multiset( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_unordered_multiset	access:public	signature:( InputIterator first, InputIterator last, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
boost::ptr_unordered_multiset::ptr_unordered_multiset	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_multiset( size_type n,$/;"	f	class:boost::ptr_unordered_multiset	access:public	signature:( size_type n, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
boost::ptr_unordered_multiset::ptr_unordered_multiset	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_multiset()$/;"	f	class:boost::ptr_unordered_multiset	access:public	signature:()
boost::ptr_unordered_multiset::size_type	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        typedef typename base_type::size_type size_type;$/;"	t	class:boost::ptr_unordered_multiset	access:public
boost::ptr_unordered_multiset::this_type	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        typedef ptr_unordered_multiset<Key,Hash,Pred,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_unordered_multiset	access:private
boost::ptr_unordered_set	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^    class ptr_unordered_set : $/;"	c	namespace:boost	inherits:ptr_set_adapter
boost::ptr_unordered_set::base_type	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^             base_type;$/;"	t	class:boost::ptr_unordered_set	access:private
boost::ptr_unordered_set::ptr_unordered_set	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        explicit ptr_unordered_set( size_type n )$/;"	f	class:boost::ptr_unordered_set	access:public	signature:( size_type n )
boost::ptr_unordered_set::ptr_unordered_set	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_set( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_unordered_set	access:public	signature:( InputIterator first, InputIterator last )
boost::ptr_unordered_set::ptr_unordered_set	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_set( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_unordered_set	access:public	signature:( InputIterator first, InputIterator last, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
boost::ptr_unordered_set::ptr_unordered_set	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_set( size_type n,$/;"	f	class:boost::ptr_unordered_set	access:public	signature:( size_type n, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
boost::ptr_unordered_set::ptr_unordered_set	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_set()$/;"	f	class:boost::ptr_unordered_set	access:public	signature:()
boost::ptr_unordered_set::size_type	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        typedef typename base_type::size_type size_type;$/;"	t	class:boost::ptr_unordered_set	access:public
boost::ptr_unordered_set::this_type	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        typedef ptr_unordered_set<Key,Hash,Pred,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_unordered_set	access:private
boost::ptr_vector	/usr/include/boost/ptr_container/ptr_vector.hpp	/^    class ptr_vector : public $/;"	c	namespace:boost	inherits:ptr_sequence_adapter
boost::ptr_vector::base_class	/usr/include/boost/ptr_container/ptr_vector.hpp	/^            base_class;$/;"	t	class:boost::ptr_vector	access:private
boost::ptr_vector::ptr_vector	/usr/include/boost/ptr_container/ptr_vector.hpp	/^        explicit ptr_vector( size_type n,$/;"	f	class:boost::ptr_vector	access:public	signature:( size_type n, const allocator_type& alloc = allocator_type() )
boost::ptr_vector::this_type	/usr/include/boost/ptr_container/ptr_vector.hpp	/^        typedef ptr_vector<T,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_vector	access:private
boost::remove_nullable	/usr/include/boost/ptr_container/nullable.hpp	/^    struct remove_nullable$/;"	s	namespace:boost
boost::remove_nullable::type	/usr/include/boost/ptr_container/nullable.hpp	/^            type;$/;"	t	struct:boost::remove_nullable	access:public
boost::serialization	/usr/include/boost/ptr_container/detail/serialize_ptr_map_adapter.hpp	/^namespace serialization $/;"	n	namespace:boost
boost::serialization	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^namespace serialization $/;"	n	namespace:boost
boost::serialization	/usr/include/boost/ptr_container/serialize_ptr_array.hpp	/^namespace serialization $/;"	n	namespace:boost
boost::serialization	/usr/include/boost/ptr_container/serialize_ptr_circular_buffer.hpp	/^namespace serialization $/;"	n	namespace:boost
boost::serialization	/usr/include/boost/ptr_container/serialize_ptr_deque.hpp	/^namespace serialization $/;"	n	namespace:boost
boost::serialization	/usr/include/boost/ptr_container/serialize_ptr_list.hpp	/^namespace serialization $/;"	n	namespace:boost
boost::serialization	/usr/include/boost/ptr_container/serialize_ptr_map.hpp	/^namespace serialization $/;"	n	namespace:boost
boost::serialization	/usr/include/boost/ptr_container/serialize_ptr_set.hpp	/^namespace serialization $/;"	n	namespace:boost
boost::serialization	/usr/include/boost/ptr_container/serialize_ptr_unordered_map.hpp	/^namespace serialization $/;"	n	namespace:boost
boost::serialization	/usr/include/boost/ptr_container/serialize_ptr_unordered_set.hpp	/^namespace serialization $/;"	n	namespace:boost
boost::serialization	/usr/include/boost/ptr_container/serialize_ptr_vector.hpp	/^namespace serialization $/;"	n	namespace:boost
boost::serialization::load	/usr/include/boost/ptr_container/detail/serialize_ptr_map_adapter.hpp	/^void load(Archive& ar, ptr_map_adapter<T, VoidPtrMap, CloneAllocator,Ordered>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_map_adapter<T, VoidPtrMap, CloneAllocator,Ordered>& c, unsigned int )
boost::serialization::load	/usr/include/boost/ptr_container/detail/serialize_ptr_map_adapter.hpp	/^void load(Archive& ar, ptr_multimap_adapter<T, VoidPtrMap, CloneAllocator,Ordered>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_multimap_adapter<T, VoidPtrMap, CloneAllocator,Ordered>& c, unsigned int )
boost::serialization::load	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^void load(Archive& ar, ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c, unsigned int )
boost::serialization::load	/usr/include/boost/ptr_container/serialize_ptr_array.hpp	/^void load(Archive& ar, ptr_array<T, N, CloneAllocator>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_array<T, N, CloneAllocator>& c, unsigned int )
boost::serialization::load	/usr/include/boost/ptr_container/serialize_ptr_circular_buffer.hpp	/^void load(Archive& ar, ptr_circular_buffer<T, CloneAllocator, Allocator>& c, unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_circular_buffer<T, CloneAllocator, Allocator>& c, unsigned int version)
boost::serialization::load	/usr/include/boost/ptr_container/serialize_ptr_vector.hpp	/^void load(Archive& ar, ptr_vector<T, CloneAllocator, Allocator>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_vector<T, CloneAllocator, Allocator>& c, unsigned int )
boost::serialization::save	/usr/include/boost/ptr_container/detail/serialize_ptr_map_adapter.hpp	/^void save(Archive& ar, const ptr_container_detail::ptr_map_adapter_base<T, VoidPtrMap, CloneAllocator,Ordered>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, const ptr_container_detail::ptr_map_adapter_base<T, VoidPtrMap, CloneAllocator,Ordered>& c, unsigned int )
boost::serialization::save	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^void save(Archive& ar, const ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, const ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c, unsigned int )
boost::serialization::save	/usr/include/boost/ptr_container/serialize_ptr_array.hpp	/^void save(Archive& ar, const ptr_array<T, N, CloneAllocator>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, const ptr_array<T, N, CloneAllocator>& c, unsigned int )
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_array.hpp	/^void serialize(Archive& ar, ptr_array<T, N, CloneAllocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_array<T, N, CloneAllocator>& c, const unsigned int version)
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_circular_buffer.hpp	/^void serialize(Archive& ar, ptr_circular_buffer<T, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_circular_buffer<T, CloneAllocator, Allocator>& c, const unsigned int version)
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_deque.hpp	/^void serialize(Archive& ar, ptr_deque<T, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_deque<T, CloneAllocator, Allocator>& c, const unsigned int version)
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_list.hpp	/^void serialize(Archive& ar, ptr_list<T, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_list<T, CloneAllocator, Allocator>& c, const unsigned int version)
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_map.hpp	/^void serialize(Archive& ar, ptr_map<Key, T, Compare, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_map<Key, T, Compare, CloneAllocator, Allocator>& c, const unsigned int version)
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_map.hpp	/^void serialize(Archive& ar, ptr_multimap<Key, T, Compare, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_multimap<Key, T, Compare, CloneAllocator, Allocator>& c, const unsigned int version)
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_set.hpp	/^void serialize(Archive& ar, ptr_multiset<T, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_multiset<T, CloneAllocator, Allocator>& c, const unsigned int version)
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_set.hpp	/^void serialize(Archive& ar, ptr_set<T, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_set<T, CloneAllocator, Allocator>& c, const unsigned int version)
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_unordered_map.hpp	/^void serialize(Archive& ar, ptr_unordered_map<Key, T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_unordered_map<Key, T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_unordered_map.hpp	/^void serialize(Archive& ar, ptr_unordered_multimap<Key, T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_unordered_multimap<Key, T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_unordered_set.hpp	/^void serialize(Archive& ar, ptr_unordered_multiset<T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_unordered_multiset<T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_unordered_set.hpp	/^void serialize(Archive& ar, ptr_unordered_set<T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_unordered_set<T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)
boost::serialization::serialize	/usr/include/boost/ptr_container/serialize_ptr_vector.hpp	/^void serialize(Archive& ar, ptr_vector<T, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_vector<T, CloneAllocator, Allocator>& c, const unsigned int version)
boost::swap	/usr/include/boost/ptr_container/ptr_array.hpp	/^    inline void swap( ptr_array<T,size,CA>& l, ptr_array<T,size,CA>& r )$/;"	f	namespace:boost	signature:( ptr_array<T,size,CA>& l, ptr_array<T,size,CA>& r )
boost::swap	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^    inline void swap( ptr_circular_buffer<T,CA,A>& l, ptr_circular_buffer<T,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_circular_buffer<T,CA,A>& l, ptr_circular_buffer<T,CA,A>& r )
boost::swap	/usr/include/boost/ptr_container/ptr_deque.hpp	/^    inline void swap( ptr_deque<T,CA,A>& l, ptr_deque<T,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_deque<T,CA,A>& l, ptr_deque<T,CA,A>& r )
boost::swap	/usr/include/boost/ptr_container/ptr_list.hpp	/^    inline void swap( ptr_list<T,CA,A>& l, ptr_list<T,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_list<T,CA,A>& l, ptr_list<T,CA,A>& r )
boost::swap	/usr/include/boost/ptr_container/ptr_map.hpp	/^    inline void swap( ptr_map<K,T,C,CA,A>& l, ptr_map<K,T,C,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_map<K,T,C,CA,A>& l, ptr_map<K,T,C,CA,A>& r )
boost::swap	/usr/include/boost/ptr_container/ptr_map.hpp	/^    inline void swap( ptr_multimap<K,T,C,CA,A>& l, ptr_multimap<K,T,C,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_multimap<K,T,C,CA,A>& l, ptr_multimap<K,T,C,CA,A>& r )
boost::swap	/usr/include/boost/ptr_container/ptr_set.hpp	/^    inline void swap( ptr_multiset<K,C,CA,A>& l, ptr_multiset<K,C,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_multiset<K,C,CA,A>& l, ptr_multiset<K,C,CA,A>& r )
boost::swap	/usr/include/boost/ptr_container/ptr_set.hpp	/^    inline void swap( ptr_set<K,C,CA,A>& l, ptr_set<K,C,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_set<K,C,CA,A>& l, ptr_set<K,C,CA,A>& r )
boost::swap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^    inline void swap( ptr_unordered_map<K,T,H,P,CA,A>& l, $/;"	f	namespace:boost	signature:( ptr_unordered_map<K,T,H,P,CA,A>& l, ptr_unordered_map<K,T,H,P,CA,A>& r )
boost::swap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^    inline void swap( ptr_unordered_multimap<K,T,H,P,CA,A>& l, $/;"	f	namespace:boost	signature:( ptr_unordered_multimap<K,T,H,P,CA,A>& l, ptr_unordered_multimap<K,T,H,P,CA,A>& r )
boost::swap	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^    inline void swap( ptr_unordered_multiset<K,H,P,CA,A>& l, $/;"	f	namespace:boost	signature:( ptr_unordered_multiset<K,H,P,CA,A>& l, ptr_unordered_multiset<K,H,P,CA,A>& r )
boost::swap	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^    inline void swap( ptr_unordered_set<K,H,P,CA,A>& l, $/;"	f	namespace:boost	signature:( ptr_unordered_set<K,H,P,CA,A>& l, ptr_unordered_set<K,H,P,CA,A>& r )
boost::swap	/usr/include/boost/ptr_container/ptr_vector.hpp	/^    inline void swap( ptr_vector<T,CA,A>& l, ptr_vector<T,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_vector<T,CA,A>& l, ptr_vector<T,CA,A>& r )
boost::view_clone_allocator	/usr/include/boost/ptr_container/clone_allocator.hpp	/^    struct view_clone_allocator$/;"	s	namespace:boost
boost::view_clone_allocator::allocate_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^        static U* allocate_clone( const U& r )$/;"	f	struct:boost::view_clone_allocator	access:public	signature:( const U& r )
boost::view_clone_allocator::deallocate_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^        static void deallocate_clone( const U* \/*r*\/ )$/;"	f	struct:boost::view_clone_allocator	access:public	signature:( const U* )
boost::void_ptr_indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^    class void_ptr_indirect_fun$/;"	c	namespace:boost
boost::void_ptr_indirect_fun::fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        Fun fun;$/;"	m	class:boost::void_ptr_indirect_fun	access:private
boost::void_ptr_indirect_fun::operator ()	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        operator()( const Void* l, const Void* r ) const$/;"	f	class:boost::void_ptr_indirect_fun	access:public	signature:( const Void* l, const Void* r ) const
boost::void_ptr_indirect_fun::operator ()	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        operator()( const Void* r ) const$/;"	f	class:boost::void_ptr_indirect_fun	access:public	signature:( const Void* r ) const
boost::void_ptr_indirect_fun::void_ptr_indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        void_ptr_indirect_fun( Fun f ) : fun(f)$/;"	f	class:boost::void_ptr_indirect_fun	access:public	signature:( Fun f )
boost::void_ptr_indirect_fun::void_ptr_indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        void_ptr_indirect_fun() : fun(Fun())$/;"	f	class:boost::void_ptr_indirect_fun	access:public	signature:()
boost::void_ptr_iterator	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        class void_ptr_iterator$/;"	c	namespace:boost
boost::void_ptr_iterator::base	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            VoidIter base() const$/;"	f	class:boost::void_ptr_iterator	access:public	signature:() const
boost::void_ptr_iterator::difference_type	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^                             difference_type;           $/;"	t	class:boost::void_ptr_iterator	access:public
boost::void_ptr_iterator::iter_	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            VoidIter iter_;$/;"	m	class:boost::void_ptr_iterator	access:private
boost::void_ptr_iterator::iterator_category	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^                             iterator_category;           $/;"	t	class:boost::void_ptr_iterator	access:public
boost::void_ptr_iterator::operator *	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            T& operator*() const$/;"	f	class:boost::void_ptr_iterator	access:public	signature:() const
boost::void_ptr_iterator::operator ++	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator operator++(int)$/;"	f	class:boost::void_ptr_iterator	access:public	signature:(int)
boost::void_ptr_iterator::operator ++	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator& operator++()$/;"	f	class:boost::void_ptr_iterator	access:public	signature:()
boost::void_ptr_iterator::operator +=	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator& operator+=( difference_type n )$/;"	f	class:boost::void_ptr_iterator	access:public	signature:( difference_type n )
boost::void_ptr_iterator::operator --	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator operator--(int)$/;"	f	class:boost::void_ptr_iterator	access:public	signature:(int)
boost::void_ptr_iterator::operator --	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator& operator--()$/;"	f	class:boost::void_ptr_iterator	access:public	signature:()
boost::void_ptr_iterator::operator -=	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator& operator-=( difference_type n )$/;"	f	class:boost::void_ptr_iterator	access:public	signature:( difference_type n )
boost::void_ptr_iterator::operator ->	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            T* operator->() const$/;"	f	class:boost::void_ptr_iterator	access:public	signature:() const
boost::void_ptr_iterator::operator []	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            T& operator[]( difference_type n ) const$/;"	f	class:boost::void_ptr_iterator	access:public	signature:( difference_type n ) const
boost::void_ptr_iterator::pointer	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            typedef T*       pointer;$/;"	t	class:boost::void_ptr_iterator	access:public
boost::void_ptr_iterator::reference	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            typedef T&       reference;$/;"	t	class:boost::void_ptr_iterator	access:public
boost::void_ptr_iterator::value_type	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^                             value_type;$/;"	t	class:boost::void_ptr_iterator	access:public
boost::void_ptr_iterator::void_ptr_iterator	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator( VoidIter r ) : iter_(r)$/;"	f	class:boost::void_ptr_iterator	access:public	signature:( VoidIter r )
boost::void_ptr_iterator::void_ptr_iterator	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator( const void_ptr_iterator<MutableIterator,MutableT>& r )$/;"	f	class:boost::void_ptr_iterator	access:public	signature:( const void_ptr_iterator<MutableIterator,MutableT>& r )
boost::void_ptr_iterator::void_ptr_iterator	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator() : iter_()$/;"	f	class:boost::void_ptr_iterator	access:public	signature:()
bucket	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        size_type bucket( const key_type& key ) const$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:protected	signature:( const key_type& key ) const
bucket	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        size_type bucket( const key_type& key ) const$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:protected	signature:( const key_type& key ) const
bucket_count	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        size_type bucket_count() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
bucket_size	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        size_type bucket_size( size_type n ) const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n ) const
c_	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        Cont      c_;$/;"	m	class:boost::ptr_container_detail::reversible_ptr_container	access:private
c_array	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        value_type* c_array() \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:()
c_array	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        value_type* c_array() \/\/ nothrow$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
cant_move_from_const	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    struct cant_move_from_const< const static_move_ptr<TT, DD> > { $/;"	s	class:boost::ptr_container_detail::static_move_ptr	access:private
capacity	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        capacity_type capacity() const \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:() const
capacity	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        size_type capacity() const$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:() const
capacity_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename circular_buffer_type::capacity_type  capacity_type;$/;"	t	class:boost::ptr_circular_buffer	access:public
cbegin	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_iterator cbegin() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:() const
cbegin	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_local_iterator cbegin( size_type n ) const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n ) const
cbegin	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_iterator cbegin() const      $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
cend	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_iterator cend() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:() const
cend	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_local_iterator cend( size_type n )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n )
cend	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_iterator cend() const             $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
check	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    void check(const static_move_ptr<TT, DD>& ptr)$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:private	signature:(const static_move_ptr<TT, DD>& ptr)
circular_buffer_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef boost::circular_buffer<void*,Allocator>         circular_buffer_type;$/;"	t	class:boost::ptr_circular_buffer	access:private
clear	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void clear()$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
clone	/usr/include/boost/ptr_container/ptr_array.hpp	/^        std::auto_ptr<this_type> clone() const$/;"	f	class:boost::ptr_array	access:public	signature:() const
clone_allocator_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef CloneAllocator     clone_allocator_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
clone_allocator_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                                                              clone_allocator_type;$/;"	t	class:boost::ptr_sequence_adapter	access:public
clone_assign	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void clone_assign( ForwardIterator first, $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( ForwardIterator first, ForwardIterator last )
clone_back_insert	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void clone_back_insert( ForwardIterator first,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( ForwardIterator first, ForwardIterator last )
clone_deleter	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct clone_deleter$/;"	s	namespace:boost::ptr_container_detail
compact_and_erase_nulls	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void compact_and_erase_nulls( iterator first, iterator last ) \/\/ nothrow$/;"	f	class:boost::ptr_sequence_adapter	access:private	signature:( iterator first, iterator last )
config	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        typedef map_config<T,VoidPtrMap,Ordered>                           config;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:private
const_array_range	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef std::pair<const_pointer,size_type>            const_array_range;$/;"	t	class:boost::ptr_circular_buffer	access:public
const_iterator	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                const_iterator;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
const_iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   const_iterator;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
const_iterator	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename base_type::const_iterator const_iterator;$/;"	t	class:boost::ptr_circular_buffer	access:public
const_iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                       const_iterator;           $/;"	t	class:boost::ptr_multimap_adapter	access:public
const_iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     const_iterator;$/;"	t	class:boost::ptr_map_adapter	access:public
const_iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     const_iterator;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
const_iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    const_iterator;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
const_iterator	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                    const_iterator;$/;"	t	struct:boost::ptr_container_detail::sequence_config	access:public
const_iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                      const_iterator;$/;"	t	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public
const_iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                     const_iterator;                 $/;"	t	class:boost::ptr_set_adapter	access:public
const_iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    const_iterator;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
const_local_iterator	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                const_local_iterator;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
const_local_iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    const_local_iterator;  $/;"	t	struct:boost::ptr_container_detail::map_config	access:public
const_local_iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    const_local_iterator;           $/;"	t	struct:boost::ptr_container_detail::set_config	access:public
const_mapped_reference	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    const_mapped_reference;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
const_pointer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef const value_type*                  const_pointer;$/;"	t	class:boost::ptr_circular_buffer	access:public
const_pointer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    const_pointer;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
const_reference	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                    const_reference;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
const_reference	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef  const Ty_&    const_reference;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
const_reference	/usr/include/boost/ptr_container/ptr_array.hpp	/^        typedef const U&    const_reference;$/;"	t	class:boost::ptr_array	access:public
const_reference	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                       const_reference;$/;"	t	class:boost::ptr_multimap_adapter	access:public
const_reference	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    const_reference;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
const_reference	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    const_reference;$/;"	t	class:boost::ptr_map_adapter	access:public
const_reference	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                                                              const_reference;$/;"	t	class:boost::ptr_sequence_adapter	access:public
const_reverse_iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   const_reverse_iterator;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
constructor_impl	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void constructor_impl( I first, I last, std::forward_iterator_tag ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( I first, I last, std::forward_iterator_tag )
constructor_impl	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void constructor_impl( I first, I last, std::input_iterator_tag ) \/\/ basic$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( I first, I last, std::input_iterator_tag )
container	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        PtrContainer*                    container;$/;"	m	class:boost::ptr_container::ptr_insert_iterator	access:protected
container	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        PtrContainer* container;$/;"	m	class:boost::ptr_container::ptr_back_insert_iterator	access:protected
container	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        PtrContainer* container;$/;"	m	class:boost::ptr_container::ptr_front_insert_iterator	access:protected
container_type	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                container_type;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:private
container_type	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        typedef PtrContainer container_type;$/;"	t	class:boost::ptr_container::ptr_back_insert_iterator	access:public
container_type	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        typedef PtrContainer container_type;$/;"	t	class:boost::ptr_container::ptr_front_insert_iterator	access:public
container_type	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        typedef PtrContainer container_type;$/;"	t	class:boost::ptr_container::ptr_insert_iterator	access:public
container_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    container_type;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
container_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    container_type;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
copy	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void copy( InputIterator first, InputIterator last ) $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( InputIterator first, InputIterator last )
copy	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void copy( const reversible_ptr_container& r )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( const reversible_ptr_container& r )
copy_clones_and_release	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void copy_clones_and_release( scoped_deleter& sd ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:( scoped_deleter& sd )
count	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^        inline const char* count()  { return "count"; }$/;"	f	namespace:boost::ptr_container_detail	signature:()
count	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        size_type count( const key_type& x ) const                                        $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x ) const
count	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        size_type count( const key_type& x ) const                                        $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x ) const
crbegin	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_reverse_iterator crbegin() const      $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
crend	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_reverse_iterator crend() const             $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
deallocate_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^        static void deallocate_clone( const U* \/*r*\/ )$/;"	f	struct:boost::view_clone_allocator	access:public	signature:( const U* )
deallocate_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^        static void deallocate_clone( const U* r )$/;"	f	struct:boost::heap_clone_allocator	access:public	signature:( const U* r )
deallocate_clone	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^            static void deallocate_clone( const Ty_* x )$/;"	f	struct:boost::ptr_container_detail::reversible_ptr_container::null_clone_allocator	access:public	signature:( const Ty_* x )
default_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    default_deleter() { }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::default_deleter	access:public	signature:()
default_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    default_deleter(default_deleter<TT> tt) { }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::default_deleter	access:public	signature:(default_deleter<TT> tt)
default_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^struct default_deleter$/;"	s	namespace:boost::ptr_container_detail::move_ptrs	inherits:mpl::if_::type
delete_	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    static deleter delete_;$/;"	m	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base	access:public
delete_	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^deleter_base<T>::delete_;$/;"	m	class:boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base
delete_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^    inline void delete_clone( const T* r )$/;"	f	namespace:boost	signature:( const T* r )
deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    typedef void (*deleter)(T*);$/;"	t	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base	access:public
deleter_base	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    deleter_base(deleter d) { delete_ = d; }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base	access:public	signature:(deleter d)
deleter_base	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^struct deleter_base {$/;"	s	namespace:boost::ptr_container_detail::move_ptrs::ptr_container_detail
deleter_const_reference	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    typedef typename impl_type::second_const_reference  deleter_const_reference;$/;"	t	class:boost::ptr_container_detail::static_move_ptr	access:public
deleter_reference	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    typedef typename impl_type::second_reference        deleter_reference;$/;"	t	class:boost::ptr_container_detail::static_move_ptr	access:public
deleter_type	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    typedef Deleter                                     deleter_type;$/;"	t	class:boost::ptr_container_detail::static_move_ptr	access:public
difference_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   difference_type; $/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
difference_type	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^                             difference_type;           $/;"	t	class:boost::void_ptr_iterator	access:public
do_delete	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    static void do_delete(T* t) { checked_delete(t); }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::scalar_deleter	access:public	signature:(T* t)
do_delete	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    static void do_delete(element_type* t) { checked_array_delete(t); }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter	access:public	signature:(element_type* t)
element_type	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    typedef typename remove_bounds<T>::type element_type;$/;"	t	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::array_deleter	access:public
element_type	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    typedef typename remove_bounds<T>::type             element_type;$/;"	t	class:boost::ptr_container_detail::static_move_ptr	access:public
empty	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool empty() const \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
enable_if_convertible	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    struct enable_if_convertible $/;"	s	namespace:boost::ptr_container_detail::move_ptrs	inherits:enable_if
enable_if_convertible	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    struct enable_if_convertible : mpl::identity<T> { };$/;"	s	namespace:boost::ptr_container_detail::move_ptrs	inherits:mpl::identity
end	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_iterator end() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:() const
end	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_local_iterator end( size_type n ) const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n ) const
end	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        iterator end()$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:()
end	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        local_iterator end( size_type n )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n )
end	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_iterator end() const        $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
end	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator end()              $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
end	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            T** end()$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:()
enforce_null_policy	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        static void enforce_null_policy( const Ty_* x, const char* msg )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( const Ty_* x, const char* msg )
equal_range	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator_range<const_iterator> equal_range( const key_type& x ) const  $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x ) const
equal_range	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator_range<iterator> equal_range( const key_type& x )                    $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x )
equal_range	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator_range<const_iterator> equal_range( const key_type& x ) const  $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x ) const
equal_range	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator_range<iterator> equal_range( const key_type& x )                    $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x )
erase	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        erase( const Range& r )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( const Range& r )
erase	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        iterator erase( iterator before ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( iterator before )
erase	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        iterator erase( iterator first,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( iterator first, iterator last )
erase	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        size_type erase( const key_type& x ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( const key_type& x )
erase	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator erase( const Range& r )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const Range& r )
erase	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator erase( iterator first, iterator last ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator first, iterator last )
erase	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator erase( iterator x ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator x )
erase	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        size_type erase( const key_type& x ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x )
erase_if	/usr/include/boost/ptr_container/ptr_list.hpp	/^        void erase_if( Pred pred )$/;"	f	class:boost::ptr_list	access:public	signature:( Pred pred )
erase_if	/usr/include/boost/ptr_container/ptr_list.hpp	/^        void erase_if( iterator first, iterator last, Pred pred )$/;"	f	class:boost::ptr_list	access:public	signature:( iterator first, iterator last, Pred pred )
erase_if	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void erase_if( Pred pred )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( Pred pred )
erase_if	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void erase_if( iterator first, iterator last, Pred pred )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last, Pred pred )
eraser	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            eraser( VoidPtrMap* m, const key_type& key ) $/;"	f	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:public	signature:( VoidPtrMap* m, const key_type& key )
eraser	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        struct eraser \/\/ scope guard$/;"	s	class:boost::ptr_container_detail::ptr_map_adapter_base	access:private
find	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        const_iterator find( const key_type& x ) const                                    $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x ) const
find	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator find( const key_type& x )                                                $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x )
find	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        const_iterator find( const key_type& x ) const                                    $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x ) const
find	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator find( const key_type& x )                                                $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x )
first	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            const F& first;$/;"	m	struct:boost::ptr_container_detail::ref_pair	access:public
first	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^        inline const char* first()  { return "first"; }$/;"	f	namespace:boost::ptr_container_detail	signature:()
first_type	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            typedef F first_type;$/;"	t	struct:boost::ptr_container_detail::ref_pair	access:public
fixed_length_sequence_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct fixed_length_sequence_tag : sequence_tag {};$/;"	s	namespace:boost::ptr_container_detail	inherits:sequence_tag
front	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        const_reference front() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
front	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        reference front()$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:()
front	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        const_reference front() const  $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:() const
front	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        reference front()        $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
full	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        bool full() const \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:() const
fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        Fun fun;$/;"	m	class:boost::indirect_fun	access:private
fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        Fun fun;$/;"	m	class:boost::void_ptr_indirect_fun	access:private
fun	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^            Fun fun;$/;"	m	class:boost::ptr_sequence_adapter::void_ptr_delete_if	access:private
get	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    element_type* get() const { return ptr(); }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:() const
get_allocator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        allocator_type get_allocator() const                   $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
get_allocator	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        allocator_type get_allocator() const$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:() const
get_allocator	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        allocator_type& get_allocator() $/;"	f	class:boost::ptr_circular_buffer	access:public	signature:()
get_const_pointer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        static const U* get_const_pointer( Iter i )$/;"	f	struct:boost::ptr_container_detail::map_config	access:public	signature:( Iter i )
get_const_pointer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        static const U* get_const_pointer( Iter i )$/;"	f	struct:boost::ptr_container_detail::sequence_config	access:public	signature:( Iter i )
get_const_pointer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        static const U* get_const_pointer( void_ptr_iterator<Iter,U> i )$/;"	f	struct:boost::ptr_container_detail::sequence_config	access:public	signature:( void_ptr_iterator<Iter,U> i )
get_const_pointer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        static const U* get_const_pointer( void_ptr_iterator<Iter,const U> i )$/;"	f	struct:boost::ptr_container_detail::sequence_config	access:public	signature:( void_ptr_iterator<Iter,const U> i )
get_const_pointer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^       static const Key* get_const_pointer( Iter i )$/;"	f	struct:boost::ptr_container_detail::set_config	access:public	signature:( Iter i )
get_deleter	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    deleter_const_reference get_deleter() const { return impl_.second(); }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:() const
get_deleter	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    deleter_reference get_deleter() { return impl_.second(); }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
get_pointer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        static U* get_pointer( Iter i )$/;"	f	struct:boost::ptr_container_detail::map_config	access:public	signature:( Iter i )
get_pointer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        static U* get_pointer( Iter i )$/;"	f	struct:boost::ptr_container_detail::sequence_config	access:public	signature:( Iter i )
get_pointer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        static U* get_pointer( void_ptr_iterator<Iter,U> i )$/;"	f	struct:boost::ptr_container_detail::sequence_config	access:public	signature:( void_ptr_iterator<Iter,U> i )
get_pointer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^       static Key* get_pointer( Iter i )$/;"	f	struct:boost::ptr_container_detail::set_config	access:public	signature:( Iter i )
hash_function	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        hasher hash_function() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
hasher	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                hasher;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
hasher	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    hasher;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
hasher	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    hasher;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
heap_clone_allocator	/usr/include/boost/ptr_container/clone_allocator.hpp	/^    struct heap_clone_allocator$/;"	s	namespace:boost
impl_	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    impl_type impl_;$/;"	m	class:boost::ptr_container_detail::static_move_ptr	access:public
impl_type	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    typedef boost::compressed_pair<element_type*, Deleter> impl_type;$/;"	t	class:boost::ptr_container_detail::static_move_ptr	access:private
indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        indirect_fun( Fun f ) : fun(f)$/;"	f	class:boost::indirect_fun	access:public	signature:( Fun f )
indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        indirect_fun() : fun(Fun())$/;"	f	class:boost::indirect_fun	access:public	signature:()
indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^    class indirect_fun$/;"	c	namespace:boost
insert	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator insert( iterator before, Ty_* x )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator before, Ty_* x )
insert	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        iterator insert( iterator before, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator before, std::auto_ptr<U> x )
insert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        insert( iterator before, const Range& r )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, const Range& r )
insert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator insert( iterator pos, std::auto_ptr<U> ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos, std::auto_ptr<U> ptr )
insert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator insert( iterator pos, value_type ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos, value_type ptr )
insert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void insert( iterator pos, InputIterator first, InputIterator last ) \/\/ basic$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos, InputIterator first, InputIterator last )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( const key_type& key, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const key_type& key, std::auto_ptr<U> x )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( iterator before, const key_type& key, std::auto_ptr<U> x ) \/\/ strong$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( iterator before, const key_type& key, std::auto_ptr<U> x )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( iterator before, const key_type& key, std::auto_ptr<U> x ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( iterator before, const key_type& key, std::auto_ptr<U> x )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( iterator before, key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( iterator before, key_type& key, mapped_type x )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( iterator before, key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( iterator before, key_type& key, mapped_type x )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( iterator before, ptr_container_detail::ref_pair<F,S> p ) \/\/ strong$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( iterator before, ptr_container_detail::ref_pair<F,S> p )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( iterator before, ptr_container_detail::ref_pair<F,S> p ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( iterator before, ptr_container_detail::ref_pair<F,S> p )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert( key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( key_type& key, mapped_type x )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        std::pair<iterator,bool> insert( const key_type& key, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const key_type& key, std::auto_ptr<U> x )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        std::pair<iterator,bool> insert( key_type& key, mapped_type x )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( key_type& key, mapped_type x )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void insert( InputIterator first, InputIterator last ) \/\/ basic$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( InputIterator first, InputIterator last )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void insert( InputIterator first, InputIterator last ) \/\/ basic$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( InputIterator first, InputIterator last )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void insert( const Range& r )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const Range& r )
insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void insert( const Range& r )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const Range& r )
insert	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        insert( iterator before, const Range& r )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, const Range& r )
insert	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void insert( iterator before, InputIterator first, InputIterator last ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, InputIterator first, InputIterator last )
insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        insert( const Range& r )$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( const Range& r )
insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        insert( const Range& r )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const Range& r )
insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator insert( iterator before, key_type* x ) \/\/ strong  $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( iterator before, key_type* x )
insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator insert( iterator before, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( iterator before, std::auto_ptr<U> x )
insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator insert( iterator where, key_type* x ) \/\/ strong$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( iterator where, key_type* x )
insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator insert( iterator where, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( iterator where, std::auto_ptr<U> x )
insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator insert( key_type* x ) \/\/ strong                                      $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( key_type* x )
insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator insert( std::auto_ptr<U> x )$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( std::auto_ptr<U> x )
insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        std::pair<iterator,bool> insert( key_type* x ) \/\/ strong                      $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( key_type* x )
insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        std::pair<iterator,bool> insert( std::auto_ptr<U> x )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( std::auto_ptr<U> x )
insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void insert( InputIterator first, InputIterator last ) \/\/ basic$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( InputIterator first, InputIterator last )
insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void insert( InputIterator first, InputIterator last ) \/\/ basic$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( InputIterator first, InputIterator last )
insert_clones_and_release	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void insert_clones_and_release( scoped_deleter& sd ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( scoped_deleter& sd )
insert_clones_and_release	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void insert_clones_and_release( scoped_deleter& sd, $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( scoped_deleter& sd, iterator where )
insert_impl	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert_impl( const key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:private	signature:( const key_type& key, mapped_type x )
insert_impl	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert_impl( iterator before, const key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_map_adapter	access:private	signature:( iterator before, const key_type& key, mapped_type x )
insert_impl	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator insert_impl( iterator before, const key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:private	signature:( iterator before, const key_type& key, mapped_type x )
insert_impl	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        std::pair<iterator,bool> insert_impl( const key_type& key, mapped_type x ) \/\/ strong$/;"	f	class:boost::ptr_map_adapter	access:private	signature:( const key_type& key, mapped_type x )
insert_impl	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void insert_impl( iterator before, I first, I last, std::forward_iterator_tag ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:private	signature:( iterator before, I first, I last, std::forward_iterator_tag )
insert_impl	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void insert_impl( iterator before, I first, I last, std::input_iterator_tag ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:private	signature:( iterator before, I first, I last, std::input_iterator_tag )
insert_lookup	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        mapped_reference insert_lookup( const key_type& key )$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:private	signature:( const key_type& key )
is_array_convertible	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^struct is_array_convertible {$/;"	s	namespace:boost::ptr_container_detail::move_ptrs
is_not_zero_ptr	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        struct is_not_zero_ptr$/;"	s	class:boost::ptr_sequence_adapter	access:private
is_null	/usr/include/boost/ptr_container/ptr_array.hpp	/^        bool is_null( size_t idx ) const$/;"	f	class:boost::ptr_array	access:public	signature:( size_t idx ) const
is_null	/usr/include/boost/ptr_container/ptr_array.hpp	/^        bool is_null() const$/;"	f	class:boost::ptr_array	access:public	signature:() const
is_null	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^    inline bool is_null( const ptr_map_iterator<I,F,S>& i )$/;"	f	namespace:boost	signature:( const ptr_map_iterator<I,F,S>& i )
is_null	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        bool is_null( size_type idx ) const$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type idx ) const
is_null	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^    inline bool is_null( void_ptr_iterator<Iterator,T> i )$/;"	f	namespace:boost	signature:( void_ptr_iterator<Iterator,T> i )
is_nullable	/usr/include/boost/ptr_container/nullable.hpp	/^        type_traits::no_type is_nullable( ... );        $/;"	p	namespace:boost::ptr_container_detail	signature:( .... )
is_nullable	/usr/include/boost/ptr_container/nullable.hpp	/^        type_traits::yes_type is_nullable( const nullable<T>* );$/;"	p	namespace:boost::ptr_container_detail	signature:( const nullable<T>* )
is_nullable	/usr/include/boost/ptr_container/nullable.hpp	/^    struct is_nullable$/;"	s	namespace:boost
is_pointer_or_integral	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct is_pointer_or_integral$/;"	s	namespace:boost::ptr_container_detail
is_pointer_or_integral_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct is_pointer_or_integral_tag {};$/;"	s	namespace:boost::ptr_container_detail
is_range_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct is_range_tag {};$/;"	s	namespace:boost::ptr_container_detail
is_smart_ptr_convertible	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^struct is_smart_ptr_convertible $/;"	s	namespace:boost::ptr_container_detail::move_ptrs	inherits:mpl::if_::type
item	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^        inline const char* item()   { return "item"; }$/;"	f	namespace:boost::ptr_container_detail	signature:()
iter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        typename PtrContainer::iterator  iter;$/;"	m	class:boost::ptr_container::ptr_insert_iterator	access:protected
iter_	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            VoidIter iter_;$/;"	m	class:boost::void_ptr_iterator	access:private
iterator	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                iterator;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   iterator;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
iterator	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename base_type::iterator       iterator;$/;"	t	class:boost::ptr_circular_buffer	access:public
iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                       iterator;                 $/;"	t	class:boost::ptr_multimap_adapter	access:public
iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     iterator;       $/;"	t	class:boost::ptr_map_adapter	access:public
iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     iterator;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    iterator;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
iterator	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                    iterator;$/;"	t	struct:boost::ptr_container_detail::sequence_config	access:public
iterator	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_type::iterator    iterator;          $/;"	t	class:boost::ptr_sequence_adapter	access:public
iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                       iterator;          $/;"	t	class:boost::ptr_multiset_adapter	access:public
iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                      iterator;$/;"	t	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public
iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                     iterator;                 $/;"	t	class:boost::ptr_set_adapter	access:public
iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    iterator;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
iterator_category	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^                             iterator_category;           $/;"	t	class:boost::void_ptr_iterator	access:public
key_	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            const key_type& key_;$/;"	m	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:public
key_comp	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        key_compare key_comp() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:() const
key_compare	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                key_compare;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
key_compare	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    key_compare;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
key_compare	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    key_compare;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
key_eq	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        key_equal key_eq() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
key_equal	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                key_equal;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
key_equal	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    key_equal;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
key_equal	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    key_equal;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
key_type	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                key_type;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
key_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                       key_type;$/;"	t	class:boost::ptr_multimap_adapter	access:public
key_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     key_type;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
key_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    key_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
key_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    key_type;$/;"	t	class:boost::ptr_map_adapter	access:public
key_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    key_type;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
key_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        typedef Key    key_type;$/;"	t	class:boost::ptr_multiset_adapter	access:public
key_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        typedef Key   key_type;$/;"	t	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public
key_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        typedef Key  key_type;$/;"	t	class:boost::ptr_set_adapter	access:public
linearize	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        pointer linearize() \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:()
load	/usr/include/boost/ptr_container/detail/serialize_ptr_map_adapter.hpp	/^void load(Archive& ar, ptr_map_adapter<T, VoidPtrMap, CloneAllocator,Ordered>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_map_adapter<T, VoidPtrMap, CloneAllocator,Ordered>& c, unsigned int )
load	/usr/include/boost/ptr_container/detail/serialize_ptr_map_adapter.hpp	/^void load(Archive& ar, ptr_multimap_adapter<T, VoidPtrMap, CloneAllocator,Ordered>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_multimap_adapter<T, VoidPtrMap, CloneAllocator,Ordered>& c, unsigned int )
load	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^void load(Archive& ar, ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c, unsigned int )
load	/usr/include/boost/ptr_container/serialize_ptr_array.hpp	/^void load(Archive& ar, ptr_array<T, N, CloneAllocator>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_array<T, N, CloneAllocator>& c, unsigned int )
load	/usr/include/boost/ptr_container/serialize_ptr_circular_buffer.hpp	/^void load(Archive& ar, ptr_circular_buffer<T, CloneAllocator, Allocator>& c, unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_circular_buffer<T, CloneAllocator, Allocator>& c, unsigned int version)
load	/usr/include/boost/ptr_container/serialize_ptr_vector.hpp	/^void load(Archive& ar, ptr_vector<T, CloneAllocator, Allocator>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_vector<T, CloneAllocator, Allocator>& c, unsigned int )
load_factor	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        float load_factor() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
load_helper	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^void load_helper(Archive& ar, ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c,$/;"	f	namespace:boost::ptr_container_detail	signature:(Archive& ar, ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c, BOOST_DEDUCED_TYPENAME ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>::size_type n)
local_iterator	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                local_iterator;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
local_iterator	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    local_iterator;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
local_iterator	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    local_iterator;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
lookup	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        const_mapped_reference lookup( const key_type& key ) const$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:private	signature:( const key_type& key ) const
lower_bound	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        const_iterator lower_bound( const key_type& x ) const                             $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x ) const
lower_bound	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator lower_bound( const key_type& x )                                         $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x )
lower_bound	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        const_iterator lower_bound( const key_type& x ) const                             $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x ) const
lower_bound	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator lower_bound( const key_type& x )                                         $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x )
m_	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            VoidPtrMap*     m_;$/;"	m	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:public
make_indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^    inline indirect_fun<Fun> make_indirect_fun( Fun f )$/;"	f	namespace:boost	signature:( Fun f )
make_lazy	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        struct make_lazy$/;"	s	namespace:boost::ptr_container_detail
make_void_ptr_indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^    inline void_ptr_indirect_fun<Fun,Arg> make_void_ptr_indirect_fun( Fun f )$/;"	f	namespace:boost	signature:( Fun f )
map_basic_clone_and_insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void map_basic_clone_and_insert( II first, II last )                  $/;"	f	class:boost::ptr_map_adapter	access:private	signature:( II first, II last )
map_basic_clone_and_insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void map_basic_clone_and_insert( II first, II last )                  $/;"	f	class:boost::ptr_multimap_adapter	access:private	signature:( II first, II last )
map_config	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^    struct map_config$/;"	s	namespace:boost::ptr_container_detail
mapped_reference	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    mapped_reference;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
mapped_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    mapped_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
mapped_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    mapped_type;$/;"	t	class:boost::ptr_map_adapter	access:public
mapped_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    mapped_type;$/;"	t	class:boost::ptr_multimap_adapter	access:public
max_bucket_count	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        size_type max_bucket_count() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
max_load_factor	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        float max_load_factor() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:() const
max_load_factor	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        void max_load_factor( float factor )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( float factor )
max_size	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        size_type max_size() const \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
merge	/usr/include/boost/ptr_container/ptr_list.hpp	/^        void merge( ptr_list& x )                                 $/;"	f	class:boost::ptr_list	access:public	signature:( ptr_list& x )
merge	/usr/include/boost/ptr_container/ptr_list.hpp	/^        void merge( ptr_list& x, Compare comp )                   $/;"	f	class:boost::ptr_list	access:public	signature:( ptr_list& x, Compare comp )
merge	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void merge( iterator first, iterator last, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last, ptr_sequence_adapter& from )
merge	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void merge( iterator first, iterator last, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last, ptr_sequence_adapter& from, BinPred pred )
merge	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void merge( ptr_sequence_adapter& r )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( ptr_sequence_adapter& r )
merge	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void merge( ptr_sequence_adapter& r, BinPred pred )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( ptr_sequence_adapter& r, BinPred pred )
move	/usr/include/boost/ptr_container/detail/move.hpp	/^move_ptrs::move_source<T> move(T& x) $/;"	f	namespace:boost::ptr_container_detail	signature:(T& x)
move_ptrs	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^namespace boost { namespace ptr_container_detail { namespace move_ptrs {$/;"	n	namespace:boost::ptr_container_detail
move_ptrs	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^namespace boost { namespace ptr_container_detail { namespace move_ptrs {$/;"	n	namespace:boost::ptr_container_detail
move_ptrs	/usr/include/boost/ptr_container/detail/move.hpp	/^namespace move_ptrs {$/;"	n	namespace:boost::ptr_container_detail
move_source	/usr/include/boost/ptr_container/detail/move.hpp	/^    move_source(Ptr& ptr) : ptr_(ptr) {}$/;"	f	class:boost::ptr_container_detail::move_ptrs::move_source	access:public	signature:(Ptr& ptr)
move_source	/usr/include/boost/ptr_container/detail/move.hpp	/^    move_source(const Ptr&);$/;"	p	class:boost::ptr_container_detail::move_ptrs::move_source	access:private	signature:(const Ptr&)
move_source	/usr/include/boost/ptr_container/detail/move.hpp	/^class move_source {$/;"	c	namespace:boost::ptr_container_detail::move_ptrs
multi_transfer	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        size_type multi_transfer( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator first,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator first, BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator last, AssociatePtrCont& from )
multi_transfer	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        void multi_transfer( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator object,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator object, AssociatePtrCont& from )
new_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^    inline T* new_clone( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
new_clone	/usr/include/boost/ptr_container/clone_allocator.hpp	/^    inline T* new_clone( const T* r )$/;"	f	namespace:boost	signature:( const T* r )
new_clone	/usr/include/boost/ptr_container/ptr_array.hpp	/^    inline ptr_array<T,size,CA>* new_clone( const ptr_array<T,size,CA>& r )$/;"	f	namespace:boost	signature:( const ptr_array<T,size,CA>& r )
new_clone	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^    inline ptr_circular_buffer<T,CA,A>* new_clone( const ptr_circular_buffer<T,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_circular_buffer<T,CA,A>& r )
new_clone	/usr/include/boost/ptr_container/ptr_deque.hpp	/^    inline ptr_deque<T,CA,A>* new_clone( const ptr_deque<T,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_deque<T,CA,A>& r )
new_clone	/usr/include/boost/ptr_container/ptr_list.hpp	/^    inline ptr_list<T,CA,A>* new_clone( const ptr_list<T,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_list<T,CA,A>& r )
new_clone	/usr/include/boost/ptr_container/ptr_map.hpp	/^    inline ptr_map<K,T,C,CA,A>* new_clone( const ptr_map<K,T,C,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_map<K,T,C,CA,A>& r )
new_clone	/usr/include/boost/ptr_container/ptr_map.hpp	/^    inline ptr_multimap<K,T,C,CA,A>* new_clone( const ptr_multimap<K,T,C,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_multimap<K,T,C,CA,A>& r )
new_clone	/usr/include/boost/ptr_container/ptr_set.hpp	/^    inline ptr_multiset<K,C,CA,A>* new_clone( const ptr_multiset<K,C,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_multiset<K,C,CA,A>& r )
new_clone	/usr/include/boost/ptr_container/ptr_set.hpp	/^    inline ptr_set<K,C,CA,A>* new_clone( const ptr_set<K,C,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_set<K,C,CA,A>& r )
new_clone	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^    new_clone( const ptr_unordered_map<K,T,H,P,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_unordered_map<K,T,H,P,CA,A>& r )
new_clone	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^    new_clone( const ptr_unordered_multimap<K,T,H,P,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_unordered_multimap<K,T,H,P,CA,A>& r )
new_clone	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^    new_clone( const ptr_unordered_multiset<K,H,P,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_unordered_multiset<K,H,P,CA,A>& r )
new_clone	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^    new_clone( const ptr_unordered_set<K,H,P,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_unordered_set<K,H,P,CA,A>& r )
new_clone	/usr/include/boost/ptr_container/ptr_vector.hpp	/^    inline ptr_vector<T,CA,A>* new_clone( const ptr_vector<T,CA,A>& r )$/;"	f	namespace:boost	signature:( const ptr_vector<T,CA,A>& r )
null_clone_allocator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        struct null_clone_allocator$/;"	s	class:boost::ptr_container_detail::reversible_ptr_container	access:private
null_cloner_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                                                    null_cloner_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:private
null_cloner_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef null_clone_allocator<allow_null>                    null_cloner_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:private
null_policy_allocate_clone	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        static Ty_* null_policy_allocate_clone( const Ty_* x )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( const Ty_* x )
null_policy_deallocate_clone	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        static void null_policy_deallocate_clone( const Ty_* x )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( const Ty_* x )
nullable	/usr/include/boost/ptr_container/nullable.hpp	/^    struct nullable$/;"	s	namespace:boost
operator !=	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            friend inline bool operator!=( ref_pair l, ref_pair r )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:friend	signature:( ref_pair l, ref_pair r )
operator !=	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool operator!=( const reversible_ptr_container& r ) const \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r ) const
operator !=	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        inline bool operator!=( const void_ptr_iterator<VoidIterT,T>& l,$/;"	f	namespace:boost	signature:( const void_ptr_iterator<VoidIterT,T>& l, const void_ptr_iterator<VoidIterU,U>& r )
operator ()	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    void operator() (T* t) const { delete_(t); }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::deleter_base	access:public	signature:(T* t) const
operator ()	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void operator()( const T* p ) const$/;"	f	struct:boost::ptr_container_detail::clone_deleter	access:public	signature:( const T* p ) const
operator ()	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        operator()( const T& r ) const$/;"	f	class:boost::indirect_fun	access:public	signature:( const T& r ) const
operator ()	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        operator()( const T& r, const U& r2 ) const$/;"	f	class:boost::indirect_fun	access:public	signature:( const T& r, const U& r2 ) const
operator ()	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        operator()( const Void* l, const Void* r ) const$/;"	f	class:boost::void_ptr_indirect_fun	access:public	signature:( const Void* l, const Void* r ) const
operator ()	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        operator()( const Void* r ) const$/;"	f	class:boost::void_ptr_indirect_fun	access:public	signature:( const Void* r ) const
operator ()	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^            bool operator()( const U* r ) const$/;"	f	struct:boost::ptr_sequence_adapter::is_not_zero_ptr	access:public	signature:( const U* r ) const
operator ()	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^            bool operator()( void* r ) const$/;"	f	class:boost::ptr_sequence_adapter::void_ptr_delete_if	access:public	signature:( void* r ) const
operator *	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    const element_type& operator*() const $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:() const
operator *	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    element_type& operator*() $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
operator *	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            T& operator*() const$/;"	f	class:boost::void_ptr_iterator	access:public	signature:() const
operator *	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_back_insert_iterator& operator*()$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:()
operator *	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_front_insert_iterator& operator*()$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:()
operator *	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_insert_iterator& operator*()$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:()
operator +	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        operator+( BOOST_DEDUCED_TYPENAME void_ptr_iterator<VoidIter,T>::difference_type n, $/;"	f	namespace:boost	signature:( BOOST_DEDUCED_TYPENAME void_ptr_iterator<VoidIter,T>::difference_type n, void_ptr_iterator<VoidIter,T> r )
operator +	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        operator+( void_ptr_iterator<VoidIter,T> l, $/;"	f	namespace:boost	signature:( void_ptr_iterator<VoidIter,T> l, BOOST_DEDUCED_TYPENAME void_ptr_iterator<VoidIter,T>::difference_type n )
operator ++	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator operator++(int)$/;"	f	class:boost::void_ptr_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator& operator++()$/;"	f	class:boost::void_ptr_iterator	access:public	signature:()
operator ++	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_back_insert_iterator operator++(int)$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_back_insert_iterator& operator++()$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:()
operator ++	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_front_insert_iterator operator++(int)$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_front_insert_iterator& operator++()$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:()
operator ++	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_insert_iterator operator++(int)$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_insert_iterator& operator++()$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:()
operator +=	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator& operator+=( difference_type n )$/;"	f	class:boost::void_ptr_iterator	access:public	signature:( difference_type n )
operator -	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        operator-( BOOST_DEDUCED_TYPENAME void_ptr_iterator<VoidIter,T>::difference_type n, $/;"	f	namespace:boost	signature:( BOOST_DEDUCED_TYPENAME void_ptr_iterator<VoidIter,T>::difference_type n, void_ptr_iterator<VoidIter,T> r )
operator -	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        operator-( void_ptr_iterator<VoidIter,T> l, $/;"	f	namespace:boost	signature:( void_ptr_iterator<VoidIter,T> l, BOOST_DEDUCED_TYPENAME void_ptr_iterator<VoidIter,T>::difference_type n )
operator -	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        operator-( void_ptr_iterator<VoidIter,T> l,$/;"	f	namespace:boost	signature:( void_ptr_iterator<VoidIter,T> l, void_ptr_iterator<VoidIterU,U> r )
operator --	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator operator--(int)$/;"	f	class:boost::void_ptr_iterator	access:public	signature:(int)
operator --	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator& operator--()$/;"	f	class:boost::void_ptr_iterator	access:public	signature:()
operator -=	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator& operator-=( difference_type n )$/;"	f	class:boost::void_ptr_iterator	access:public	signature:( difference_type n )
operator ->	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            const ref_pair* const operator->() const$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:public	signature:() const
operator ->	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    const element_type* operator->() const $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:() const
operator ->	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    element_type* operator->()  $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
operator ->	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            T* operator->() const$/;"	f	class:boost::void_ptr_iterator	access:public	signature:() const
operator <	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            friend inline bool operator<( ref_pair l, ref_pair r )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:friend	signature:( ref_pair l, ref_pair r )
operator <	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool operator<( const reversible_ptr_container& r ) const \/\/ nothrow $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r ) const
operator <	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        inline bool operator<( const void_ptr_iterator<VoidIterT,T>& l,$/;"	f	namespace:boost	signature:( const void_ptr_iterator<VoidIterT,T>& l, const void_ptr_iterator<VoidIterU,U>& r )
operator <=	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            friend inline bool operator<=( ref_pair l, ref_pair r )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:friend	signature:( ref_pair l, ref_pair r )
operator <=	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool operator<=( const reversible_ptr_container& r ) const \/\/ nothrow $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r ) const
operator <=	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        inline bool operator<=( const void_ptr_iterator<VoidIterT,T>& l,$/;"	f	namespace:boost	signature:( const void_ptr_iterator<VoidIterT,T>& l, const void_ptr_iterator<VoidIterU,U>& r )
operator =	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container& operator=( associative_ptr_container r ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( associative_ptr_container r )
operator =	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        associative_ptr_container& operator=( std::auto_ptr<PtrContainer> r ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:( std::auto_ptr<PtrContainer> r )
operator =	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container& operator=( reversible_ptr_container r ) \/\/ strong $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( reversible_ptr_container r )
operator =	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container& operator=( std::auto_ptr<PtrContainer> clone ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( std::auto_ptr<PtrContainer> clone )
operator =	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr& operator=(static_move_ptr rhs)$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(static_move_ptr rhs)
operator =	/usr/include/boost/ptr_container/ptr_array.hpp	/^        ptr_array& operator=( ptr_array r )$/;"	f	class:boost::ptr_array	access:public	signature:( ptr_array r )
operator =	/usr/include/boost/ptr_container/ptr_array.hpp	/^        ptr_array& operator=( std::auto_ptr<this_type> r )$/;"	f	class:boost::ptr_array	access:public	signature:( std::auto_ptr<this_type> r )
operator =	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer& operator=( ptr_circular_buffer r )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( ptr_circular_buffer r )
operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( std::auto_ptr<T> r )$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:( std::auto_ptr<T> r )
operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( std::auto_ptr<T> r )$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:( std::auto_ptr<T> r )
operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( std::auto_ptr<T> r )$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:( std::auto_ptr<T> r )
operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( typename PtrContainer::const_reference r )$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:( typename PtrContainer::const_reference r )
operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( typename PtrContainer::const_reference r )$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:( typename PtrContainer::const_reference r )
operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( typename PtrContainer::const_reference r )$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:( typename PtrContainer::const_reference r )
operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( typename PtrContainer::value_type r )$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:( typename PtrContainer::value_type r )
operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( typename PtrContainer::value_type r )$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:( typename PtrContainer::value_type r )
operator =	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        operator=( typename PtrContainer::value_type r )$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:( typename PtrContainer::value_type r )
operator =	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_map& operator=( ptr_map r )$/;"	f	class:boost::ptr_map	access:public	signature:( ptr_map r )
operator =	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_multimap& operator=( ptr_multimap r )$/;"	f	class:boost::ptr_multimap	access:public	signature:( ptr_multimap r )
operator =	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            eraser& operator=(const eraser&);  $/;"	p	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:private	signature:(const eraser&)
operator =	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter& operator=( ptr_map_adapter r )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( ptr_map_adapter r )
operator =	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter& operator=( std::auto_ptr<U> r )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( std::auto_ptr<U> r )
operator =	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base& operator=( std::auto_ptr<PtrContainer> clone )    $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( std::auto_ptr<PtrContainer> clone )
operator =	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter& operator=( ptr_multimap_adapter r )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( ptr_multimap_adapter r )
operator =	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter& operator=( std::auto_ptr<U> r )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( std::auto_ptr<U> r )
operator =	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter& operator=( const ptr_sequence_adapter r )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const ptr_sequence_adapter r )
operator =	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter& operator=( std::auto_ptr<PtrContainer> clone )    $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( std::auto_ptr<PtrContainer> clone )
operator =	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter& operator=( const ptr_multiset_adapter<U,Set,CA,b>& r ) $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( const ptr_multiset_adapter<U,Set,CA,b>& r )
operator =	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter& operator=( const ptr_set_adapter<U,Set,CA,b>& r ) $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const ptr_set_adapter<U,Set,CA,b>& r )
operator =	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base& operator=( ptr_set_adapter_base r ) $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( ptr_set_adapter_base r )
operator =	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base& operator=( std::auto_ptr<PtrContainer> clone )    $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( std::auto_ptr<PtrContainer> clone )
operator =	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void operator=( std::auto_ptr<T> r ) $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( std::auto_ptr<T> r )
operator =	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void operator=( std::auto_ptr<T> r ) $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( std::auto_ptr<T> r )
operator =	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_map& operator=( ptr_unordered_map r )$/;"	f	class:boost::ptr_unordered_map	access:public	signature:( ptr_unordered_map r )
operator =	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_multimap& operator=( ptr_unordered_multimap r )$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:( ptr_unordered_multimap r )
operator ==	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            friend inline bool operator==( ref_pair l, ref_pair r )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:friend	signature:( ref_pair l, ref_pair r )
operator ==	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool operator==( const reversible_ptr_container& r ) const \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r ) const
operator ==	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        inline bool operator==( const void_ptr_iterator<VoidIterT,T>& l,$/;"	f	namespace:boost	signature:( const void_ptr_iterator<VoidIterT,T>& l, const void_ptr_iterator<VoidIterU,U>& r )
operator >	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            friend inline bool operator>( ref_pair l, ref_pair r )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:friend	signature:( ref_pair l, ref_pair r )
operator >	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool operator>( const reversible_ptr_container& r ) const \/\/ nothrow $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r ) const
operator >	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        inline bool operator>( const void_ptr_iterator<VoidIterT,T>& l,$/;"	f	namespace:boost	signature:( const void_ptr_iterator<VoidIterT,T>& l, const void_ptr_iterator<VoidIterU,U>& r )
operator >=	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            friend inline bool operator>=( ref_pair l, ref_pair r )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:friend	signature:( ref_pair l, ref_pair r )
operator >=	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        bool operator>=( const reversible_ptr_container& r ) const \/\/ nothrow $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r ) const
operator >=	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        inline bool operator>=( const void_ptr_iterator<VoidIterT,T>& l,$/;"	f	namespace:boost	signature:( const void_ptr_iterator<VoidIterT,T>& l, const void_ptr_iterator<VoidIterU,U>& r )
operator []	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            T& operator[]( difference_type n ) const$/;"	f	class:boost::void_ptr_iterator	access:public	signature:( difference_type n ) const
operator []	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        mapped_reference operator[]( const key_type& key )$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& key )
operator []	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        const_reference operator[]( size_type n ) const \/\/ nothrow  $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type n ) const
operator []	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        reference operator[]( size_type n ) \/\/ nothrow $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type n )
operator safe_bool	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    operator safe_bool() const { return ptr() ? &safe_bool_helper::x : 0; }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:() const
ordered_associative_container_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct ordered_associative_container_tag : associative_container_tag {};$/;"	s	namespace:boost::ptr_container_detail	inherits:associative_container_tag
pointer	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef  Ty_*          pointer;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
pointer	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            typedef T*       pointer;$/;"	t	class:boost::void_ptr_iterator	access:public
pointer	/usr/include/boost/ptr_container/ptr_array.hpp	/^        typedef U*          pointer;$/;"	t	class:boost::ptr_array	access:public
pointer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef value_type*                        pointer;$/;"	t	class:boost::ptr_circular_buffer	access:public
pointer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    pointer;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
pop_back	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        auto_type pop_back()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
pop_front	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        auto_type pop_front()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
ptr	/usr/include/boost/ptr_container/detail/move.hpp	/^    Ptr& ptr() const { return ptr_; }$/;"	f	class:boost::ptr_container_detail::move_ptrs::move_source	access:public	signature:() const
ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    ptr() const { return impl_.first(); }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:() const
ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    ptr() { return impl_.first(); } $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
ptr_	/usr/include/boost/ptr_container/detail/move.hpp	/^    Ptr& ptr_;$/;"	m	class:boost::ptr_container_detail::move_ptrs::move_source	access:private
ptr_array	/usr/include/boost/ptr_container/ptr_array.hpp	/^        explicit ptr_array( std::auto_ptr<this_type> r )$/;"	f	class:boost::ptr_array	access:public	signature:( std::auto_ptr<this_type> r )
ptr_array	/usr/include/boost/ptr_container/ptr_array.hpp	/^        ptr_array( const ptr_array& r )$/;"	f	class:boost::ptr_array	access:public	signature:( const ptr_array& r )
ptr_array	/usr/include/boost/ptr_container/ptr_array.hpp	/^        ptr_array( const ptr_array<U,N>& r )$/;"	f	class:boost::ptr_array	access:public	signature:( const ptr_array<U,N>& r )
ptr_array	/usr/include/boost/ptr_container/ptr_array.hpp	/^        ptr_array() : base_class()$/;"	f	class:boost::ptr_array	access:public	signature:()
ptr_array	/usr/include/boost/ptr_container/ptr_array.hpp	/^    class ptr_array : public$/;"	c	namespace:boost	inherits:ptr_sequence_adapter
ptr_array_impl	/usr/include/boost/ptr_container/ptr_array.hpp	/^            ptr_array_impl( Allocator \/*a*\/ = Allocator() )$/;"	f	class:boost::ptr_container_detail::ptr_array_impl	access:public	signature:( Allocator = Allocator() )
ptr_array_impl	/usr/include/boost/ptr_container/ptr_array.hpp	/^            ptr_array_impl( size_t, T*, Allocator \/*a*\/ = Allocator() )$/;"	f	class:boost::ptr_container_detail::ptr_array_impl	access:public	signature:( size_t, T*, Allocator = Allocator() )
ptr_array_impl	/usr/include/boost/ptr_container/ptr_array.hpp	/^        class ptr_array_impl : public boost::array<T,N>$/;"	c	namespace:boost::ptr_container_detail	inherits:boost::array
ptr_back_insert_iterator	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        explicit ptr_back_insert_iterator( PtrContainer& cont )$/;"	f	class:boost::ptr_container::ptr_back_insert_iterator	access:public	signature:( PtrContainer& cont )
ptr_back_insert_iterator	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    class ptr_back_insert_iterator :$/;"	c	namespace:boost::ptr_container	inherits:std::iterator
ptr_back_inserter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    ptr_back_inserter( PtrContainer& cont )$/;"	f	namespace:boost::ptr_container	signature:( PtrContainer& cont )
ptr_back_inserter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    ptr_back_inserter( PtrContainer& cont );$/;"	p	namespace:boost::ptr_container	signature:( PtrContainer& cont )
ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        explicit ptr_circular_buffer( capacity_type n )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type n )
ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer( ForwardIterator first, ForwardIterator last )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( ForwardIterator first, ForwardIterator last )
ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer( capacity_type n, InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type n, InputIterator first, InputIterator last )
ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer( capacity_type n,$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type n, const allocator_type& alloc )
ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer( const ptr_circular_buffer& r )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( const ptr_circular_buffer& r )
ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer( const ptr_circular_buffer<U>& r )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( const ptr_circular_buffer<U>& r )
ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        ptr_circular_buffer()$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:()
ptr_circular_buffer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^    class ptr_circular_buffer : public $/;"	c	namespace:boost	inherits:ptr_sequence_adapter
ptr_const_iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   ptr_const_iterator; $/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:protected
ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    namespace ptr_container$/;"	n	namespace:boost
ptr_container	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^namespace ptr_container$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^namespace boost { namespace ptr_container_detail { namespace move_ptrs {$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^namespace ptr_container_detail {$/;"	n	namespace:boost::ptr_container_detail::move_ptrs
ptr_container_detail	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^namespace boost { namespace ptr_container_detail { namespace move_ptrs {$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^    namespace ptr_container_detail$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/detail/move.hpp	/^namespace boost { namespace ptr_container_detail {$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^    namespace ptr_container_detail$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^    namespace ptr_container_detail$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^namespace boost { namespace ptr_container_detail {$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/indirect_fun.hpp	/^    namespace ptr_container_detail$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/nullable.hpp	/^    namespace ptr_container_detail$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/ptr_array.hpp	/^    namespace ptr_container_detail$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
ptr_container_detail	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^namespace ptr_container_detail$/;"	n	namespace:boost
ptr_deque	/usr/include/boost/ptr_container/ptr_deque.hpp	/^    class ptr_deque : public $/;"	c	namespace:boost	inherits:ptr_sequence_adapter
ptr_front_insert_iterator	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        explicit ptr_front_insert_iterator( PtrContainer& cont )$/;"	f	class:boost::ptr_container::ptr_front_insert_iterator	access:public	signature:( PtrContainer& cont )
ptr_front_insert_iterator	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    class ptr_front_insert_iterator :$/;"	c	namespace:boost::ptr_container	inherits:std::iterator
ptr_front_inserter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    ptr_front_inserter( PtrContainer& cont )$/;"	f	namespace:boost::ptr_container	signature:( PtrContainer& cont )
ptr_front_inserter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    ptr_front_inserter( PtrContainer& cont );$/;"	p	namespace:boost::ptr_container	signature:( PtrContainer& cont )
ptr_insert_iterator	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^        ptr_insert_iterator( PtrContainer& cont,$/;"	f	class:boost::ptr_container::ptr_insert_iterator	access:public	signature:( PtrContainer& cont, typename PtrContainer::iterator before )
ptr_insert_iterator	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    class ptr_insert_iterator :$/;"	c	namespace:boost::ptr_container	inherits:std::iterator
ptr_inserter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    ptr_inserter( PtrContainer& cont, $/;"	f	namespace:boost::ptr_container	signature:( PtrContainer& cont, typename PtrContainer::iterator before )
ptr_inserter	/usr/include/boost/ptr_container/ptr_inserter.hpp	/^    ptr_inserter( PtrContainer& cont, typename PtrContainer::iterator before );$/;"	p	namespace:boost::ptr_container	signature:( PtrContainer& cont, typename PtrContainer::iterator before )
ptr_iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   ptr_iterator; $/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:protected
ptr_list	/usr/include/boost/ptr_container/ptr_list.hpp	/^    class ptr_list : public $/;"	c	namespace:boost	inherits:ptr_sequence_adapter
ptr_map	/usr/include/boost/ptr_container/ptr_map.hpp	/^        explicit ptr_map( const Compare& comp,$/;"	f	class:boost::ptr_map	access:public	signature:( const Compare& comp, const Allocator& a = Allocator() )
ptr_map	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_map( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_map	access:public	signature:( InputIterator first, InputIterator last )
ptr_map	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_map( InputIterator first, InputIterator last, $/;"	f	class:boost::ptr_map	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator& a = Allocator() )
ptr_map	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_map( const ptr_map<Key,U>& r ) : base_type( r )$/;"	f	class:boost::ptr_map	access:public	signature:( const ptr_map<Key,U>& r )
ptr_map	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_map()$/;"	f	class:boost::ptr_map	access:public	signature:()
ptr_map	/usr/include/boost/ptr_container/ptr_map.hpp	/^    class ptr_map : $/;"	c	namespace:boost	inherits:ptr_map_adapter
ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        explicit ptr_map_adapter( const Comp& comp,$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const Comp& comp, const allocator_type& a )
ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( )
ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( InputIterator first, InputIterator last )
ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( InputIterator first, InputIterator last, $/;"	f	class:boost::ptr_map_adapter	access:public	signature:( InputIterator first, InputIterator last, const Comp& comp, const allocator_type& a = allocator_type() )
ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( const Hash& hash,$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( const ptr_map_adapter& r )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const ptr_map_adapter& r )
ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( const ptr_map_adapter<Key,U,CA,b>& r )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const ptr_map_adapter<Key,U,CA,b>& r )
ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter( std::auto_ptr<U> r ) : base_type( r )$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( std::auto_ptr<U> r )
ptr_map_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^    class ptr_map_adapter : $/;"	c	namespace:boost	inherits:ptr_container_detail::ptr_map_adapter_base
ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        explicit ptr_map_adapter_base( SizeType n, $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( SizeType n, ptr_container_detail::unordered_associative_container_tag tag )
ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        explicit ptr_map_adapter_base( std::auto_ptr<PtrContainer> clone ) $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( std::auto_ptr<PtrContainer> clone )
ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( InputIterator first, InputIterator last )
ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( InputIterator first, InputIterator last, const Comp& comp, const allocator_type& a = allocator_type() )
ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base( const Compare& comp,$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const Compare& comp, const Allocator& a )
ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base( const Hash& hash,$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_map_adapter_base()$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:()
ptr_map_adapter_base	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^    class ptr_map_adapter_base : $/;"	c	namespace:boost::ptr_container_detail	inherits:ptr_container_detail::associative_ptr_container
ptr_map_iterator	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            ptr_map_iterator( const ptr_map_iterator<I2,F2,S2>& r ) $/;"	f	class:boost::ptr_map_iterator	access:public	signature:( const ptr_map_iterator<I2,F2,S2>& r )
ptr_map_iterator	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^        explicit ptr_map_iterator( const I& i ) : base_type(i)$/;"	f	class:boost::ptr_map_iterator	access:public	signature:( const I& i )
ptr_map_iterator	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^        ptr_map_iterator() : base_type()                                 $/;"	f	class:boost::ptr_map_iterator	access:public	signature:()
ptr_map_iterator	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^    class ptr_map_iterator : $/;"	c	namespace:boost	inherits:boost::iterator_adaptor
ptr_multimap	/usr/include/boost/ptr_container/ptr_map.hpp	/^        explicit ptr_multimap( const Compare& comp,$/;"	f	class:boost::ptr_multimap	access:public	signature:( const Compare& comp, const Allocator& a = Allocator() )
ptr_multimap	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_multimap( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_multimap	access:public	signature:( InputIterator first, InputIterator last )
ptr_multimap	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_multimap( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_multimap	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator& a = Allocator() )
ptr_multimap	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_multimap( const ptr_multimap<Key,U>& r ) : base_type( r )$/;"	f	class:boost::ptr_multimap	access:public	signature:( const ptr_multimap<Key,U>& r )
ptr_multimap	/usr/include/boost/ptr_container/ptr_map.hpp	/^        ptr_multimap()$/;"	f	class:boost::ptr_multimap	access:public	signature:()
ptr_multimap	/usr/include/boost/ptr_container/ptr_map.hpp	/^    class ptr_multimap : $/;"	c	namespace:boost	inherits:ptr_multimap_adapter
ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        explicit ptr_multimap_adapter( const Comp& comp,$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const Comp& comp, const allocator_type& a )
ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        explicit ptr_multimap_adapter( std::auto_ptr<U> r ) : base_type( r )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( std::auto_ptr<U> r )
ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( InputIterator first, InputIterator last )
ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( InputIterator first, InputIterator last, const Comp& comp, const allocator_type& a )
ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( SizeType n, $/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( SizeType n, ptr_container_detail::unordered_associative_container_tag tag )
ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( const Hash& hash,$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( const ptr_multimap_adapter& r )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const ptr_multimap_adapter& r )
ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter( const ptr_multimap_adapter<Key,U,CA,b>& r )$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const ptr_multimap_adapter<Key,U,CA,b>& r )
ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        ptr_multimap_adapter()$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:()
ptr_multimap_adapter	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^    class ptr_multimap_adapter : $/;"	c	namespace:boost	inherits:ptr_container_detail::ptr_map_adapter_base
ptr_multiset	/usr/include/boost/ptr_container/ptr_set.hpp	/^        explicit ptr_multiset( const Compare& comp,$/;"	f	class:boost::ptr_multiset	access:public	signature:( const Compare& comp, const Allocator& a = Allocator() )
ptr_multiset	/usr/include/boost/ptr_container/ptr_set.hpp	/^        ptr_multiset( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_multiset	access:public	signature:( InputIterator first, InputIterator last )
ptr_multiset	/usr/include/boost/ptr_container/ptr_set.hpp	/^        ptr_multiset( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_multiset	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator& a = Allocator() )
ptr_multiset	/usr/include/boost/ptr_container/ptr_set.hpp	/^        ptr_multiset()$/;"	f	class:boost::ptr_multiset	access:public	signature:()
ptr_multiset	/usr/include/boost/ptr_container/ptr_set.hpp	/^    class ptr_multiset : $/;"	c	namespace:boost	inherits:ptr_multiset_adapter
ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_multiset_adapter( const Comp& comp,$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( const Comp& comp, const allocator_type& a )
ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_multiset_adapter( const ptr_multiset_adapter<U,Set,CA,b>& r )$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( const ptr_multiset_adapter<U,Set,CA,b>& r )
ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_multiset_adapter( std::auto_ptr<PtrContainer> clone )$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( std::auto_ptr<PtrContainer> clone )
ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( InputIterator first, InputIterator last )
ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( InputIterator first, InputIterator last, const Comp& comp, const allocator_type& a = allocator_type() )
ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter( SizeType n, $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( SizeType n, ptr_container_detail::unordered_associative_container_tag tag )
ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter( const Hash& hash,$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_multiset_adapter()$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:()
ptr_multiset_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^    class ptr_multiset_adapter : $/;"	c	namespace:boost	inherits:ptr_container_detail::ptr_set_adapter_base
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        explicit ptr_sequence_adapter( const Allocator& a )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const Allocator& a )
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        explicit ptr_sequence_adapter( std::auto_ptr<PtrContainer> clone )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( std::auto_ptr<PtrContainer> clone )
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( ForwardIterator first,$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( ForwardIterator first, ForwardIterator last, ptr_container_detail::fixed_length_sequence_tag tag )
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( InputIterator first, InputIterator last )
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( InputIterator first, InputIterator last, const Allocator& a )
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( SizeType n, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( SizeType n, ptr_container_detail::fixed_length_sequence_tag tag )
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( SizeType n, const Allocator& a, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( SizeType n, const Allocator& a, ptr_container_detail::fixed_length_sequence_tag tag )
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( SizeType n,$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( SizeType n, ForwardIterator first, ForwardIterator last, ptr_container_detail::fixed_length_sequence_tag tag )
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( const ptr_sequence_adapter& r )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const ptr_sequence_adapter& r )
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( const ptr_sequence_adapter& r,$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const ptr_sequence_adapter& r, ptr_container_detail::fixed_length_sequence_tag tag )
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( const ptr_sequence_adapter<U,VoidPtrSeq,CloneAllocator>& r )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const ptr_sequence_adapter<U,VoidPtrSeq,CloneAllocator>& r )
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter( const ptr_sequence_adapter<U,VoidPtrSeq,CloneAllocator>& r,$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( const ptr_sequence_adapter<U,VoidPtrSeq,CloneAllocator>& r, ptr_container_detail::fixed_length_sequence_tag tag )
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        ptr_sequence_adapter()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
ptr_sequence_adapter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^    class ptr_sequence_adapter : public $/;"	c	namespace:boost	inherits:ptr_container_detail::reversible_ptr_container
ptr_set	/usr/include/boost/ptr_container/ptr_set.hpp	/^        explicit ptr_set( const Compare& comp,$/;"	f	class:boost::ptr_set	access:public	signature:( const Compare& comp, const Allocator& a = Allocator() )
ptr_set	/usr/include/boost/ptr_container/ptr_set.hpp	/^        ptr_set( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_set	access:public	signature:( InputIterator first, InputIterator last )
ptr_set	/usr/include/boost/ptr_container/ptr_set.hpp	/^        ptr_set( InputIterator first, InputIterator last, $/;"	f	class:boost::ptr_set	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator& a = Allocator() )
ptr_set	/usr/include/boost/ptr_container/ptr_set.hpp	/^        ptr_set()$/;"	f	class:boost::ptr_set	access:public	signature:()
ptr_set	/usr/include/boost/ptr_container/ptr_set.hpp	/^    class ptr_set : $/;"	c	namespace:boost	inherits:ptr_set_adapter
ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_set_adapter( const Comp& comp,$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const Comp& comp, const allocator_type& a )
ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_set_adapter( const ptr_set_adapter& r )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const ptr_set_adapter& r )
ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_set_adapter( const ptr_set_adapter<U,Set,CA,b>& r )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const ptr_set_adapter<U,Set,CA,b>& r )
ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_set_adapter( std::auto_ptr<PtrContainer> clone )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( std::auto_ptr<PtrContainer> clone )
ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( InputIterator first, InputIterator last )
ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter( InputIterator first, InputIterator last, $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator a = Allocator() )
ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter( SizeType n, $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( SizeType n, ptr_container_detail::unordered_associative_container_tag tag )
ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter( const Hash& hash,$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter()$/;"	f	class:boost::ptr_set_adapter	access:public	signature:()
ptr_set_adapter	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^    class ptr_set_adapter : $/;"	c	namespace:boost	inherits:ptr_container_detail::ptr_set_adapter_base
ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        explicit ptr_set_adapter_base( std::auto_ptr<PtrContainer> clone )$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( std::auto_ptr<PtrContainer> clone )
ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const Allocator& a )
ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( InputIterator first, InputIterator last, const Hash& hash, const Pred& pred, const Allocator& a )
ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( SizeType n, $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( SizeType n, ptr_container_detail::unordered_associative_container_tag tag )
ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( const Compare& comp,$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const Compare& comp, const Allocator& a )
ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( const Hash& hash,$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const Hash& hash, const Pred& pred, const Allocator& a )
ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( const ptr_set_adapter_base& r )$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const ptr_set_adapter_base& r )
ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base( const ptr_set_adapter_base<U,Set,CA,b>& r )$/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const ptr_set_adapter_base<U,Set,CA,b>& r )
ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        ptr_set_adapter_base() $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:()
ptr_set_adapter_base	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^    class ptr_set_adapter_base $/;"	c	namespace:boost::ptr_container_detail	inherits:ptr_container_detail::associative_ptr_container
ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        explicit ptr_unordered_map( size_type n )$/;"	f	class:boost::ptr_unordered_map	access:public	signature:( size_type n )
ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_map( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_unordered_map	access:public	signature:( InputIterator first, InputIterator last )
ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_map( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_unordered_map	access:public	signature:( InputIterator first, InputIterator last, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_map( const ptr_unordered_map<Key,U>& r ) : base_type( r )$/;"	f	class:boost::ptr_unordered_map	access:public	signature:( const ptr_unordered_map<Key,U>& r )
ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_map( size_type n,$/;"	f	class:boost::ptr_unordered_map	access:public	signature:( size_type n, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_map()$/;"	f	class:boost::ptr_unordered_map	access:public	signature:()
ptr_unordered_map	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^    class ptr_unordered_map : $/;"	c	namespace:boost	inherits:ptr_map_adapter
ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        explicit ptr_unordered_multimap( size_type n )$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:( size_type n )
ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_multimap( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:( InputIterator first, InputIterator last )
ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_multimap( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:( InputIterator first, InputIterator last, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_multimap( const ptr_unordered_multimap<Key,U>& r ) : base_type( r )$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:( const ptr_unordered_multimap<Key,U>& r )
ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_multimap( size_type n,$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:( size_type n, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        ptr_unordered_multimap()$/;"	f	class:boost::ptr_unordered_multimap	access:public	signature:()
ptr_unordered_multimap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^    class ptr_unordered_multimap : $/;"	c	namespace:boost	inherits:ptr_multimap_adapter
ptr_unordered_multiset	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        explicit ptr_unordered_multiset( size_type n )$/;"	f	class:boost::ptr_unordered_multiset	access:public	signature:( size_type n )
ptr_unordered_multiset	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_multiset( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_unordered_multiset	access:public	signature:( InputIterator first, InputIterator last )
ptr_unordered_multiset	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_multiset( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_unordered_multiset	access:public	signature:( InputIterator first, InputIterator last, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
ptr_unordered_multiset	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_multiset( size_type n,$/;"	f	class:boost::ptr_unordered_multiset	access:public	signature:( size_type n, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
ptr_unordered_multiset	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_multiset()$/;"	f	class:boost::ptr_unordered_multiset	access:public	signature:()
ptr_unordered_multiset	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^    class ptr_unordered_multiset : $/;"	c	namespace:boost	inherits:ptr_multiset_adapter
ptr_unordered_set	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        explicit ptr_unordered_set( size_type n )$/;"	f	class:boost::ptr_unordered_set	access:public	signature:( size_type n )
ptr_unordered_set	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_set( InputIterator first, InputIterator last )$/;"	f	class:boost::ptr_unordered_set	access:public	signature:( InputIterator first, InputIterator last )
ptr_unordered_set	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_set( InputIterator first, InputIterator last,$/;"	f	class:boost::ptr_unordered_set	access:public	signature:( InputIterator first, InputIterator last, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
ptr_unordered_set	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_set( size_type n,$/;"	f	class:boost::ptr_unordered_set	access:public	signature:( size_type n, const Hash& comp, const Pred& pred = Pred(), const Allocator& a = Allocator() )
ptr_unordered_set	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        ptr_unordered_set()$/;"	f	class:boost::ptr_unordered_set	access:public	signature:()
ptr_unordered_set	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^    class ptr_unordered_set : $/;"	c	namespace:boost	inherits:ptr_set_adapter
ptr_vector	/usr/include/boost/ptr_container/ptr_vector.hpp	/^        explicit ptr_vector( size_type n,$/;"	f	class:boost::ptr_vector	access:public	signature:( size_type n, const allocator_type& alloc = allocator_type() )
ptr_vector	/usr/include/boost/ptr_container/ptr_vector.hpp	/^    class ptr_vector : public $/;"	c	namespace:boost	inherits:ptr_sequence_adapter
ptrs_	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            scoped_array<T*>  ptrs_;$/;"	m	class:boost::ptr_container_detail::scoped_deleter	access:private
push_back	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void push_back( std::auto_ptr<U> ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( std::auto_ptr<U> ptr )
push_back	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void push_back( value_type ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( value_type ptr )
push_back	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void push_back( std::auto_ptr<U> x )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( std::auto_ptr<U> x )
push_back	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void push_back( value_type x )  \/\/ strong               $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( value_type x )
push_front	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void push_front( std::auto_ptr<U> ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( std::auto_ptr<U> ptr )
push_front	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void push_front( value_type ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( value_type ptr )
push_front	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void push_front( std::auto_ptr<U> x )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( std::auto_ptr<U> x )
push_front	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void push_front( value_type x )                $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( value_type x )
range_check	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void range_check( iterator first, iterator last )$/;"	f	class:boost::ptr_sequence_adapter	access:private	signature:( iterator first, iterator last )
range_check_impl	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void range_check_impl( iterator first, iterator last, $/;"	f	class:boost::ptr_sequence_adapter	access:private	signature:( iterator first, iterator last, std::bidirectional_iterator_tag )
range_check_impl	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void range_check_impl( iterator first, iterator last,$/;"	f	class:boost::ptr_sequence_adapter	access:private	signature:( iterator first, iterator last, std::random_access_iterator_tag )
rbegin	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_reverse_iterator rbegin() const     $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
rbegin	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reverse_iterator rbegin()           $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
ref_pair	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            ref_pair( const RP* rp )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:public	signature:( const RP* rp )
ref_pair	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            ref_pair( const std::pair<F2,S2>& p )$/;"	f	struct:boost::ptr_container_detail::ref_pair	access:public	signature:( const std::pair<F2,S2>& p )
ref_pair	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^        struct ref_pair$/;"	s	namespace:boost::ptr_container_detail
reference	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                reference;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
reference	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef  Ty_&          reference;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
reference	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            typedef T&       reference;$/;"	t	class:boost::void_ptr_iterator	access:public
reference	/usr/include/boost/ptr_container/ptr_array.hpp	/^        typedef U&          reference;$/;"	t	class:boost::ptr_array	access:public
reference	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    reference;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
reference	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_type::reference   reference; $/;"	t	class:boost::ptr_sequence_adapter	access:public
rehash	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        void rehash( size_type n )$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( size_type n )
release	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        auto_type release( iterator where )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator where )
release	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            void release()$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:()
release	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    element_type* release()$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
release	/usr/include/boost/ptr_container/ptr_array.hpp	/^        std::auto_ptr<this_type> release()$/;"	f	class:boost::ptr_array	access:public	signature:()
release	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            void release() { released_ = true; }$/;"	f	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:public	signature:()
released_	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            bool              released_;$/;"	m	class:boost::ptr_container_detail::scoped_deleter	access:private
released_	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            bool            released_;$/;"	m	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:public
remove	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void remove( I first, I last ) $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( I first, I last )
remove	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void remove( I i )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( I i )
remove	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void remove( U* ptr )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:protected	signature:( U* ptr )
remove_all	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void remove_all() $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:private	signature:()
remove_nullable	/usr/include/boost/ptr_container/nullable.hpp	/^    struct remove_nullable$/;"	s	namespace:boost
rend	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        const_reverse_iterator rend() const       $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
rend	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reverse_iterator rend()             $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
replace	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        auto_type replace( iterator where, Ty_* x ) \/\/ strong  $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator where, Ty_* x )
replace	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        auto_type replace( iterator where, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( iterator where, std::auto_ptr<U> x )
replace	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        auto_type replace( size_type idx, Ty_* x ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( size_type idx, Ty_* x )
replace	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        auto_type replace( size_type idx, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( size_type idx, std::auto_ptr<U> x )
replace	/usr/include/boost/ptr_container/ptr_array.hpp	/^        auto_type replace( U* r ) \/\/ strong$/;"	f	class:boost::ptr_array	access:public	signature:( U* r )
replace	/usr/include/boost/ptr_container/ptr_array.hpp	/^        auto_type replace( size_t idx, U* r ) \/\/ strong$/;"	f	class:boost::ptr_array	access:public	signature:( size_t idx, U* r )
replace	/usr/include/boost/ptr_container/ptr_array.hpp	/^        auto_type replace( size_t idx, std::auto_ptr<V> r )$/;"	f	class:boost::ptr_array	access:public	signature:( size_t idx, std::auto_ptr<V> r )
replace	/usr/include/boost/ptr_container/ptr_array.hpp	/^        auto_type replace( std::auto_ptr<V> r )$/;"	f	class:boost::ptr_array	access:public	signature:( std::auto_ptr<V> r )
replace	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        auto_type replace( iterator where, mapped_type x ) \/\/ strong  $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( iterator where, mapped_type x )
replace	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        auto_type replace( iterator where, std::auto_ptr<U> x )$/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( iterator where, std::auto_ptr<U> x )
rerase	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator rerase( const Range& r ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( const Range& r )
rerase	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator rerase( iterator first, iterator last ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator first, iterator last )
rerase	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator rerase( iterator pos ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos )
reserve	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        size_type reserve() const \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:() const
reserve	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void reserve( size_type n ) \/\/ strong$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( size_type n )
reserve	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void reserve( size_type n )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type n )
reset	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    void reset()$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
reset	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    void reset(TT* tt) $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(TT* tt)
reset	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    void reset(TT* tt, DD dd) $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(TT* tt, DD dd)
resize	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void resize( size_type size ) \/\/ basic$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( size_type size )
resize	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void resize( size_type size, value_type to_clone ) \/\/ basic$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( size_type size, value_type to_clone )
resize	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void resize( size_type size ) \/\/ basic$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type size )
resize	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void resize( size_type size, value_type to_clone ) \/\/ basic$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type size, value_type to_clone )
reverse	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void reverse()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
reverse_iterator	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   reverse_iterator;  $/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        explicit reversible_ptr_container( const allocator_type& a ) $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const allocator_type& a )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        explicit reversible_ptr_container( size_type n )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( size_type n )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        explicit reversible_ptr_container( std::auto_ptr<PtrContainer> clone )                $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( std::auto_ptr<PtrContainer> clone )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( ForwardIterator first,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( ForwardIterator first, ForwardIterator last, fixed_length_sequence_tag )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( InputIterator first, $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( InputIterator first, InputIterator last, const allocator_type& a = allocator_type() )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( InputIterator first,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( InputIterator first, InputIterator last, associative_container_tag )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( InputIterator first,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( InputIterator first, InputIterator last, const Compare& comp, const allocator_type& a, associative_container_tag )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( InputIterator first,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( InputIterator first, InputIterator last, const Hash& h, const Pred& pred, const allocator_type& a )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( SizeType n, const allocator_type& a, $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( SizeType n, const allocator_type& a, fixed_length_sequence_tag )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( SizeType n, fixed_length_sequence_tag )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( SizeType n, fixed_length_sequence_tag )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( SizeType n, unordered_associative_container_tag )$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( SizeType n, unordered_associative_container_tag )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( SizeType n,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( SizeType n, InputIterator first, InputIterator last, fixed_length_sequence_tag )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( const Compare& comp,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const Compare& comp, const allocator_type& a )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( const Compare& comp,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const Compare& comp, const allocator_type& a, associative_container_tag )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( const Hash& h,$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const Hash& h, const Pred& pred, const allocator_type& a )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( const reversible_ptr_container& r ) $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container& r )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container( const reversible_ptr_container<C,V>& r ) $/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( const reversible_ptr_container<C,V>& r )
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        reversible_ptr_container()$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    class reversible_ptr_container $/;"	c	namespace:boost::ptr_container_detail
rinsert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator rinsert( iterator pos, std::auto_ptr<U> ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos, std::auto_ptr<U> ptr )
rinsert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        iterator rinsert( iterator pos, value_type ptr ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos, value_type ptr )
rinsert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        rinsert( iterator before, const Range& r )$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, const Range& r )
rinsert	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void rinsert( iterator pos, InputIterator first, InputIterator last ) \/\/ basic$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator pos, InputIterator first, InputIterator last )
rotate	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void rotate( const_iterator new_begin ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( const_iterator new_begin )
rresize	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void rresize( size_type size ) \/\/ basic$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( size_type size )
rresize	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void rresize( size_type size, value_type to_clone ) \/\/ basic$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( size_type size, value_type to_clone )
rresize	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void rresize( size_type size ) \/\/ basic$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type size )
rresize	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void rresize( size_type size, value_type to_clone ) \/\/ basic$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( size_type size, value_type to_clone )
rset_capacity	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void rset_capacity( capacity_type new_capacity ) \/\/ strong$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type new_capacity )
safe_bool	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    typedef int safe_bool_helper::* safe_bool;$/;"	t	class:boost::ptr_container_detail::static_move_ptr::safe_bool_helper	access:private
safe_bool_helper	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    struct safe_bool_helper { int x; };$/;"	s	class:boost::ptr_container_detail::static_move_ptr	access:private
safe_insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void safe_insert( const key_type& key, auto_type ptr ) \/\/ strong$/;"	f	class:boost::ptr_map_adapter	access:private	signature:( const key_type& key, auto_type ptr )
safe_insert	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void safe_insert( const key_type& key, auto_type ptr ) \/\/ strong$/;"	f	class:boost::ptr_multimap_adapter	access:private	signature:( const key_type& key, auto_type ptr )
save	/usr/include/boost/ptr_container/detail/serialize_ptr_map_adapter.hpp	/^void save(Archive& ar, const ptr_container_detail::ptr_map_adapter_base<T, VoidPtrMap, CloneAllocator,Ordered>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, const ptr_container_detail::ptr_map_adapter_base<T, VoidPtrMap, CloneAllocator,Ordered>& c, unsigned int )
save	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^void save(Archive& ar, const ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, const ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c, unsigned int )
save	/usr/include/boost/ptr_container/serialize_ptr_array.hpp	/^void save(Archive& ar, const ptr_array<T, N, CloneAllocator>& c, unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, const ptr_array<T, N, CloneAllocator>& c, unsigned int )
save_helper	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^void save_helper(Archive& ar, const ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c)$/;"	f	namespace:boost::ptr_container_detail	signature:(Archive& ar, const ptr_container_detail::reversible_ptr_container<Config, CloneAllocator>& c)
scalar_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^    scalar_deleter() : base(do_delete) { }$/;"	f	struct:boost::ptr_container_detail::move_ptrs::ptr_container_detail::scalar_deleter	access:public	signature:()
scalar_deleter	/usr/include/boost/ptr_container/detail/default_deleter.hpp	/^struct scalar_deleter : deleter_base<T> {$/;"	s	namespace:boost::ptr_container_detail::move_ptrs::ptr_container_detail	inherits:deleter_base
scoped_deleter	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                scoped_deleter;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:private
scoped_deleter	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   scoped_deleter;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:protected
scoped_deleter	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            scoped_deleter ( InputIterator first, InputIterator last  ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:( InputIterator first, InputIterator last )
scoped_deleter	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            scoped_deleter( T** a, size_type size ) $/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:( T** a, size_type size )
scoped_deleter	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            scoped_deleter( size_type n, const T& x ) \/\/ strong$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:( size_type n, const T& x )
scoped_deleter	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            scoped_deleter( size_type size ) $/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:( size_type size )
scoped_deleter	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^        class scoped_deleter$/;"	c	namespace:boost::ptr_container_detail
scoped_deleter	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_type::scoped_deleter scoped_deleter;$/;"	t	class:boost::ptr_sequence_adapter	access:protected
second	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            S        second;$/;"	m	struct:boost::ptr_container_detail::ref_pair	access:public
second	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^        inline const char* second() { return "second"; }$/;"	f	namespace:boost::ptr_container_detail	signature:()
second_type	/usr/include/boost/ptr_container/detail/map_iterator.hpp	/^            typedef S second_type;$/;"	t	struct:boost::ptr_container_detail::ref_pair	access:public
select_const_local_iterator	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_const_local_iterator$/;"	s	namespace:boost::ptr_container_detail
select_hasher	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_hasher$/;"	s	namespace:boost::ptr_container_detail
select_iterator	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_iterator$/;"	s	namespace:boost::ptr_container_detail
select_key_compare	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_key_compare$/;"	s	namespace:boost::ptr_container_detail
select_key_equal	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_key_equal$/;"	s	namespace:boost::ptr_container_detail
select_local_iterator	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_local_iterator$/;"	s	namespace:boost::ptr_container_detail
select_value_compare	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^    struct select_value_compare$/;"	s	namespace:boost::ptr_container_detail
sequence_config	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^    struct sequence_config$/;"	s	namespace:boost::ptr_container_detail
sequence_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct sequence_tag {};$/;"	s	namespace:boost::ptr_container_detail
serialization	/usr/include/boost/ptr_container/detail/serialize_ptr_map_adapter.hpp	/^namespace serialization $/;"	n	namespace:boost
serialization	/usr/include/boost/ptr_container/detail/serialize_reversible_cont.hpp	/^namespace serialization $/;"	n	namespace:boost
serialization	/usr/include/boost/ptr_container/serialize_ptr_array.hpp	/^namespace serialization $/;"	n	namespace:boost
serialization	/usr/include/boost/ptr_container/serialize_ptr_circular_buffer.hpp	/^namespace serialization $/;"	n	namespace:boost
serialization	/usr/include/boost/ptr_container/serialize_ptr_deque.hpp	/^namespace serialization $/;"	n	namespace:boost
serialization	/usr/include/boost/ptr_container/serialize_ptr_list.hpp	/^namespace serialization $/;"	n	namespace:boost
serialization	/usr/include/boost/ptr_container/serialize_ptr_map.hpp	/^namespace serialization $/;"	n	namespace:boost
serialization	/usr/include/boost/ptr_container/serialize_ptr_set.hpp	/^namespace serialization $/;"	n	namespace:boost
serialization	/usr/include/boost/ptr_container/serialize_ptr_unordered_map.hpp	/^namespace serialization $/;"	n	namespace:boost
serialization	/usr/include/boost/ptr_container/serialize_ptr_unordered_set.hpp	/^namespace serialization $/;"	n	namespace:boost
serialization	/usr/include/boost/ptr_container/serialize_ptr_vector.hpp	/^namespace serialization $/;"	n	namespace:boost
serialize	/usr/include/boost/ptr_container/serialize_ptr_array.hpp	/^void serialize(Archive& ar, ptr_array<T, N, CloneAllocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_array<T, N, CloneAllocator>& c, const unsigned int version)
serialize	/usr/include/boost/ptr_container/serialize_ptr_circular_buffer.hpp	/^void serialize(Archive& ar, ptr_circular_buffer<T, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_circular_buffer<T, CloneAllocator, Allocator>& c, const unsigned int version)
serialize	/usr/include/boost/ptr_container/serialize_ptr_deque.hpp	/^void serialize(Archive& ar, ptr_deque<T, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_deque<T, CloneAllocator, Allocator>& c, const unsigned int version)
serialize	/usr/include/boost/ptr_container/serialize_ptr_list.hpp	/^void serialize(Archive& ar, ptr_list<T, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_list<T, CloneAllocator, Allocator>& c, const unsigned int version)
serialize	/usr/include/boost/ptr_container/serialize_ptr_map.hpp	/^void serialize(Archive& ar, ptr_map<Key, T, Compare, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_map<Key, T, Compare, CloneAllocator, Allocator>& c, const unsigned int version)
serialize	/usr/include/boost/ptr_container/serialize_ptr_map.hpp	/^void serialize(Archive& ar, ptr_multimap<Key, T, Compare, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_multimap<Key, T, Compare, CloneAllocator, Allocator>& c, const unsigned int version)
serialize	/usr/include/boost/ptr_container/serialize_ptr_set.hpp	/^void serialize(Archive& ar, ptr_multiset<T, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_multiset<T, CloneAllocator, Allocator>& c, const unsigned int version)
serialize	/usr/include/boost/ptr_container/serialize_ptr_set.hpp	/^void serialize(Archive& ar, ptr_set<T, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_set<T, CloneAllocator, Allocator>& c, const unsigned int version)
serialize	/usr/include/boost/ptr_container/serialize_ptr_unordered_map.hpp	/^void serialize(Archive& ar, ptr_unordered_map<Key, T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_unordered_map<Key, T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)
serialize	/usr/include/boost/ptr_container/serialize_ptr_unordered_map.hpp	/^void serialize(Archive& ar, ptr_unordered_multimap<Key, T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_unordered_multimap<Key, T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)
serialize	/usr/include/boost/ptr_container/serialize_ptr_unordered_set.hpp	/^void serialize(Archive& ar, ptr_unordered_multiset<T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_unordered_multiset<T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)
serialize	/usr/include/boost/ptr_container/serialize_ptr_unordered_set.hpp	/^void serialize(Archive& ar, ptr_unordered_set<T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_unordered_set<T, Hash, Pred, CloneAllocator, Allocator>& c, const unsigned int version)
serialize	/usr/include/boost/ptr_container/serialize_ptr_vector.hpp	/^void serialize(Archive& ar, ptr_vector<T, CloneAllocator, Allocator>& c, const unsigned int version)$/;"	f	namespace:boost::serialization	signature:(Archive& ar, ptr_vector<T, CloneAllocator, Allocator>& c, const unsigned int version)
serialize_as_const	/usr/include/boost/ptr_container/detail/serialize_xml_names.hpp	/^        inline T const& serialize_as_const(T const& r)$/;"	f	namespace:boost::ptr_container_detail	signature:(T const& r)
set_basic_clone_and_insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void set_basic_clone_and_insert( II first, II last ) \/\/ basic                 $/;"	f	class:boost::ptr_multiset_adapter	access:private	signature:( II first, II last )
set_basic_clone_and_insert	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void set_basic_clone_and_insert( II first, II last ) \/\/ basic                 $/;"	f	class:boost::ptr_set_adapter	access:private	signature:( II first, II last )
set_capacity	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void set_capacity( capacity_type new_capacity ) \/\/ strong$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( capacity_type new_capacity )
set_config	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^    struct set_config$/;"	s	namespace:boost::ptr_container_detail
single_transfer	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        bool single_transfer( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator object,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator object, AssociatePtrCont& from )
single_transfer	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        size_type single_transfer( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator first,$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:protected	signature:( BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator first, BOOST_DEDUCED_TYPENAME AssociatePtrCont::iterator last, AssociatePtrCont& from )
size	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        size_type size() const \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:() const
size_type	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                size_type;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
size_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^                                   size_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
size_type	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            typedef std::size_t size_type;$/;"	t	class:boost::ptr_container_detail::scoped_deleter	access:private
size_type	/usr/include/boost/ptr_container/ptr_array.hpp	/^        typedef std::size_t size_type;$/;"	t	class:boost::ptr_array	access:public
size_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename base_type::size_type      size_type;$/;"	t	class:boost::ptr_circular_buffer	access:public
size_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                       size_type;$/;"	t	class:boost::ptr_multimap_adapter	access:public
size_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    size_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
size_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    size_type;$/;"	t	class:boost::ptr_map_adapter	access:public
size_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_type::size_type   size_type;  $/;"	t	class:boost::ptr_sequence_adapter	access:public
size_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                       size_type;$/;"	t	class:boost::ptr_multiset_adapter	access:public
size_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                      size_type;$/;"	t	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public
size_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                     size_type;    $/;"	t	class:boost::ptr_set_adapter	access:public
size_type	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        typedef typename base_type::size_type size_type;$/;"	t	class:boost::ptr_unordered_map	access:public
size_type	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        typedef typename base_type::size_type size_type;$/;"	t	class:boost::ptr_unordered_multimap	access:public
size_type	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        typedef typename base_type::size_type size_type;$/;"	t	class:boost::ptr_unordered_multiset	access:public
size_type	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        typedef typename base_type::size_type size_type;$/;"	t	class:boost::ptr_unordered_set	access:public
sort	/usr/include/boost/ptr_container/ptr_list.hpp	/^        void sort( Compare comp )                             $/;"	f	class:boost::ptr_list	access:public	signature:( Compare comp )
sort	/usr/include/boost/ptr_container/ptr_list.hpp	/^        void sort()                                                    $/;"	f	class:boost::ptr_list	access:public	signature:()
sort	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void sort( Compare comp )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( Compare comp )
sort	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void sort( iterator first, iterator last )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last )
sort	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void sort( iterator first, iterator last, Compare comp )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last, Compare comp )
sort	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void sort()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    explicit static_move_ptr(TT* tt) $/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(TT* tt)
static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr( const move_ptrs::move_source<static_move_ptr<T,Deleter> >& src )$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:( const move_ptrs::move_source<static_move_ptr<T,Deleter> >& src )
static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr( static_move_ptr<TT, DD>&,$/;"	p	class:boost::ptr_container_detail::static_move_ptr	access:private	signature:( static_move_ptr<TT, DD>&, typename move_ptrs::enable_if_convertible< TT, T, static_move_ptr& >::type::type* = 0 )
static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr() : impl_(0) { }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr(Ptr&, typename cant_move_from_const<Ptr>::type = 0);$/;"	p	class:boost::ptr_container_detail::static_move_ptr	access:private	signature:(Ptr&, typename cant_move_from_const<Ptr>::type = 0)
static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr(const static_move_ptr& p)$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(const static_move_ptr& p)
static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    static_move_ptr(static_move_ptr&);$/;"	p	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(static_move_ptr&)
static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^class static_move_ptr $/;"	c	namespace:boost::ptr_container_detail
stored_	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            size_type         stored_; $/;"	m	class:boost::ptr_container_detail::scoped_deleter	access:private
swap	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        void swap( reversible_ptr_container& r ) \/\/ nothrow$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:( reversible_ptr_container& r )
swap	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    void swap(static_move_ptr& p) { impl_.swap(p.impl_); }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:(static_move_ptr& p)
swap	/usr/include/boost/ptr_container/ptr_array.hpp	/^    inline void swap( ptr_array<T,size,CA>& l, ptr_array<T,size,CA>& r )$/;"	f	namespace:boost	signature:( ptr_array<T,size,CA>& l, ptr_array<T,size,CA>& r )
swap	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^    inline void swap( ptr_circular_buffer<T,CA,A>& l, ptr_circular_buffer<T,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_circular_buffer<T,CA,A>& l, ptr_circular_buffer<T,CA,A>& r )
swap	/usr/include/boost/ptr_container/ptr_deque.hpp	/^    inline void swap( ptr_deque<T,CA,A>& l, ptr_deque<T,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_deque<T,CA,A>& l, ptr_deque<T,CA,A>& r )
swap	/usr/include/boost/ptr_container/ptr_list.hpp	/^    inline void swap( ptr_list<T,CA,A>& l, ptr_list<T,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_list<T,CA,A>& l, ptr_list<T,CA,A>& r )
swap	/usr/include/boost/ptr_container/ptr_map.hpp	/^    inline void swap( ptr_map<K,T,C,CA,A>& l, ptr_map<K,T,C,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_map<K,T,C,CA,A>& l, ptr_map<K,T,C,CA,A>& r )
swap	/usr/include/boost/ptr_container/ptr_map.hpp	/^    inline void swap( ptr_multimap<K,T,C,CA,A>& l, ptr_multimap<K,T,C,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_multimap<K,T,C,CA,A>& l, ptr_multimap<K,T,C,CA,A>& r )
swap	/usr/include/boost/ptr_container/ptr_set.hpp	/^    inline void swap( ptr_multiset<K,C,CA,A>& l, ptr_multiset<K,C,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_multiset<K,C,CA,A>& l, ptr_multiset<K,C,CA,A>& r )
swap	/usr/include/boost/ptr_container/ptr_set.hpp	/^    inline void swap( ptr_set<K,C,CA,A>& l, ptr_set<K,C,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_set<K,C,CA,A>& l, ptr_set<K,C,CA,A>& r )
swap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^    inline void swap( ptr_unordered_map<K,T,H,P,CA,A>& l, $/;"	f	namespace:boost	signature:( ptr_unordered_map<K,T,H,P,CA,A>& l, ptr_unordered_map<K,T,H,P,CA,A>& r )
swap	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^    inline void swap( ptr_unordered_multimap<K,T,H,P,CA,A>& l, $/;"	f	namespace:boost	signature:( ptr_unordered_multimap<K,T,H,P,CA,A>& l, ptr_unordered_multimap<K,T,H,P,CA,A>& r )
swap	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^    inline void swap( ptr_unordered_multiset<K,H,P,CA,A>& l, $/;"	f	namespace:boost	signature:( ptr_unordered_multiset<K,H,P,CA,A>& l, ptr_unordered_multiset<K,H,P,CA,A>& r )
swap	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^    inline void swap( ptr_unordered_set<K,H,P,CA,A>& l, $/;"	f	namespace:boost	signature:( ptr_unordered_set<K,H,P,CA,A>& l, ptr_unordered_set<K,H,P,CA,A>& r )
swap	/usr/include/boost/ptr_container/ptr_vector.hpp	/^    inline void swap( ptr_vector<T,CA,A>& l, ptr_vector<T,CA,A>& r )$/;"	f	namespace:boost	signature:( ptr_vector<T,CA,A>& l, ptr_vector<T,CA,A>& r )
t_base	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    typedef typename remove_cv<t_element>::type  t_base; $/;"	t	struct:boost::ptr_container_detail::move_ptrs::is_array_convertible	access:public
t_element	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    typedef typename remove_bounds<T>::type      t_element; $/;"	t	struct:boost::ptr_container_detail::move_ptrs::is_array_convertible	access:public
this_type	/usr/include/boost/ptr_container/ptr_array.hpp	/^                          this_type;$/;"	t	class:boost::ptr_array	access:private
this_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef ptr_circular_buffer<T,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_circular_buffer	access:private
this_type	/usr/include/boost/ptr_container/ptr_deque.hpp	/^         typedef ptr_deque<T,CloneAllocator,Allocator> this_type; $/;"	t	class:boost::ptr_deque	access:private
this_type	/usr/include/boost/ptr_container/ptr_list.hpp	/^        typedef ptr_list<T,CloneAllocator,Allocator>  this_type;$/;"	t	class:boost::ptr_list	access:private
this_type	/usr/include/boost/ptr_container/ptr_map.hpp	/^        typedef ptr_map<Key,T,Compare,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_map	access:private
this_type	/usr/include/boost/ptr_container/ptr_map.hpp	/^        typedef ptr_multimap<Key,T,Compare,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_multimap	access:private
this_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        typedef ptr_map_adapter_base<T,VoidPtrMap,CloneAllocator,Ordered>  this_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:private
this_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^            this_type;$/;"	t	class:boost::ptr_sequence_adapter	access:private
this_type	/usr/include/boost/ptr_container/ptr_set.hpp	/^        typedef ptr_multiset<Key,Compare,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_multiset	access:private
this_type	/usr/include/boost/ptr_container/ptr_set.hpp	/^        typedef ptr_set<Key,Compare,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_set	access:private
this_type	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        typedef ptr_unordered_map<Key,T,Hash,Pred,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_unordered_map	access:private
this_type	/usr/include/boost/ptr_container/ptr_unordered_map.hpp	/^        typedef ptr_unordered_multimap<Key,T,Hash,Pred,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_unordered_multimap	access:private
this_type	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        typedef ptr_unordered_multiset<Key,Hash,Pred,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_unordered_multiset	access:private
this_type	/usr/include/boost/ptr_container/ptr_unordered_set.hpp	/^        typedef ptr_unordered_set<Key,Hash,Pred,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_unordered_set	access:private
this_type	/usr/include/boost/ptr_container/ptr_vector.hpp	/^        typedef ptr_vector<T,CloneAllocator,Allocator> this_type;$/;"	t	class:boost::ptr_vector	access:private
transfer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        transfer( iterator before, const Range& r, PtrSeqAdapter& from ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, const Range& r, PtrSeqAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void transfer( iterator before, $/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, BOOST_DEDUCED_TYPENAME PtrSeqAdapter::iterator first, BOOST_DEDUCED_TYPENAME PtrSeqAdapter::iterator last, PtrSeqAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void transfer( iterator before, $/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, BOOST_DEDUCED_TYPENAME PtrSeqAdapter::iterator object, PtrSeqAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void transfer( iterator before, PtrSeqAdapter& from ) \/\/ nothrow$/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, PtrSeqAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        void transfer( iterator before, value_type* from, $/;"	f	class:boost::ptr_circular_buffer	access:public	signature:( iterator before, value_type* from, size_type size, bool delete_from = true )
transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        bool transfer( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator object, $/;"	f	class:boost::ptr_map_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator object, PtrMapAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        size_type transfer( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator first, $/;"	f	class:boost::ptr_map_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator first, BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator last, PtrMapAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        size_type transfer( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator first, $/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator first, BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator last, PtrMapAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        size_type transfer( PtrMapAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( PtrMapAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        transfer( const Range& r, PtrMapAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_map_adapter	access:public	signature:( const Range& r, PtrMapAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        transfer( const Range& r, PtrMapAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( const Range& r, PtrMapAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void transfer( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator object, $/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrMapAdapter::iterator object, PtrMapAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        void transfer( PtrMapAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_multimap_adapter	access:public	signature:( PtrMapAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        transfer( iterator before, const Range& r, PtrSeqAdapter& from ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, const Range& r, PtrSeqAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void transfer( iterator before, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, BOOST_DEDUCED_TYPENAME PtrSeqAdapter::iterator first, BOOST_DEDUCED_TYPENAME PtrSeqAdapter::iterator last, PtrSeqAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void transfer( iterator before, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, BOOST_DEDUCED_TYPENAME PtrSeqAdapter::iterator object, PtrSeqAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void transfer( iterator before, PtrSeqAdapter& from ) \/\/ strong$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, PtrSeqAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void transfer( iterator before, value_type* from, $/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator before, value_type* from, size_type size, bool delete_from = true )
transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        bool transfer( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator object, $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator object, PtrSetAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        size_type transfer( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator first, $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator first, BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator last, PtrSetAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        size_type transfer( PtrSetAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( PtrSetAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        transfer(  const Range& r, PtrSetAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( const Range& r, PtrSetAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        transfer( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator first, $/;"	f	class:boost::ptr_set_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator first, BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator last, PtrSetAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        transfer( const Range& r, PtrSetAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_set_adapter	access:public	signature:( const Range& r, PtrSetAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void transfer( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator object, $/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( BOOST_DEDUCED_TYPENAME PtrSetAdapter::iterator object, PtrSetAdapter& from )
transfer	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        void transfer( PtrSetAdapter& from ) \/\/ basic$/;"	f	class:boost::ptr_multiset_adapter	access:public	signature:( PtrSetAdapter& from )
type	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^            >::type                                     type;$/;"	t	struct:boost::ptr_container_detail::move_ptrs::is_array_convertible	access:public
type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::const_local_iterator type;$/;"	t	struct:boost::ptr_container_detail::select_const_local_iterator	access:public
type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::hasher type;$/;"	t	struct:boost::ptr_container_detail::select_hasher	access:public
type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::iterator type;$/;"	t	struct:boost::ptr_container_detail::select_iterator	access:public
type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::key_compare type;$/;"	t	struct:boost::ptr_container_detail::select_key_compare	access:public
type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::key_equal type;$/;"	t	struct:boost::ptr_container_detail::select_key_equal	access:public
type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::local_iterator type;$/;"	t	struct:boost::ptr_container_detail::select_local_iterator	access:public
type	/usr/include/boost/ptr_container/detail/meta_functions.hpp	/^        typedef typename T::value_compare type;$/;"	t	struct:boost::ptr_container_detail::select_value_compare	access:public
type	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^        typedef typename static_move_ptr<TT, DD>::error type; $/;"	t	struct:boost::ptr_container_detail::static_move_ptr::cant_move_from_const	access:public
type	/usr/include/boost/ptr_container/indirect_fun.hpp	/^            typedef typename Type::type type;$/;"	t	struct:boost::ptr_container_detail::make_lazy	access:public
type	/usr/include/boost/ptr_container/nullable.hpp	/^            type;$/;"	t	struct:boost::remove_nullable	access:public
type	/usr/include/boost/ptr_container/nullable.hpp	/^        typedef T type;$/;"	t	struct:boost::nullable	access:public
u_base	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    typedef typename remove_cv<u_element>::type  u_base; $/;"	t	struct:boost::ptr_container_detail::move_ptrs::is_array_convertible	access:public
u_element	/usr/include/boost/ptr_container/detail/is_convertible.hpp	/^    typedef typename remove_bounds<U>::type      u_element; $/;"	t	struct:boost::ptr_container_detail::move_ptrs::is_array_convertible	access:public
unique	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void unique( Compare comp )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( Compare comp )
unique	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void unique( iterator first, iterator last )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last )
unique	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void unique( iterator first, iterator last, Compare comp )$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:( iterator first, iterator last, Compare comp )
unique	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        void unique()$/;"	f	class:boost::ptr_sequence_adapter	access:public	signature:()
unordered_associative_container_tag	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^    struct unordered_associative_container_tag : associative_container_tag {};$/;"	s	namespace:boost::ptr_container_detail	inherits:associative_container_tag
upper_bound	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        const_iterator upper_bound( const key_type& x ) const                             $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x ) const
upper_bound	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        iterator upper_bound( const key_type& x )                                         $/;"	f	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public	signature:( const key_type& x )
upper_bound	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        const_iterator upper_bound( const key_type& x ) const                             $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x ) const
upper_bound	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^        iterator upper_bound( const key_type& x )                                         $/;"	f	class:boost::ptr_container_detail::ptr_set_adapter_base	access:public	signature:( const key_type& x )
value_comp	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^        value_compare value_comp() const$/;"	f	class:boost::ptr_container_detail::associative_ptr_container	access:public	signature:() const
value_compare	/usr/include/boost/ptr_container/detail/associative_ptr_container.hpp	/^                                value_compare;$/;"	t	class:boost::ptr_container_detail::associative_ptr_container	access:public
value_compare	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    value_compare;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
value_compare	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    value_compare;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
value_type	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        typedef  Ty_*          value_type;$/;"	t	class:boost::ptr_container_detail::reversible_ptr_container	access:public
value_type	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^                             value_type;$/;"	t	class:boost::void_ptr_iterator	access:public
value_type	/usr/include/boost/ptr_container/ptr_array.hpp	/^        typedef U*          value_type;$/;"	t	class:boost::ptr_array	access:public
value_type	/usr/include/boost/ptr_container/ptr_circular_buffer.hpp	/^        typedef typename base_type::value_type     value_type;$/;"	t	class:boost::ptr_circular_buffer	access:public
value_type	/usr/include/boost/ptr_container/ptr_list.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_class::value_type value_type;$/;"	t	class:boost::ptr_list	access:public
value_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                    value_type;$/;"	t	class:boost::ptr_container_detail::ptr_map_adapter_base	access:public
value_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^        typedef U    value_type;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
value_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base_type::value_type  value_type; $/;"	t	class:boost::ptr_sequence_adapter	access:public
value_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        typedef U   value_type;$/;"	t	struct:boost::ptr_container_detail::sequence_config	access:public
value_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^       typedef Key  value_type;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
view_clone_allocator	/usr/include/boost/ptr_container/clone_allocator.hpp	/^    struct view_clone_allocator$/;"	s	namespace:boost
void_container_type	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^                     void_container_type;$/;"	t	struct:boost::ptr_container_detail::map_config	access:public
void_container_type	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^                    void_container_type;$/;"	t	struct:boost::ptr_container_detail::sequence_config	access:public
void_container_type	/usr/include/boost/ptr_container/ptr_set_adapter.hpp	/^                    void_container_type;$/;"	t	struct:boost::ptr_container_detail::set_config	access:public
void_ptr_delete_if	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^            void_ptr_delete_if( Fun f ) : fun(f)$/;"	f	class:boost::ptr_sequence_adapter::void_ptr_delete_if	access:public	signature:( Fun f )
void_ptr_delete_if	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^            void_ptr_delete_if() : fun(Fun())$/;"	f	class:boost::ptr_sequence_adapter::void_ptr_delete_if	access:public	signature:()
void_ptr_delete_if	/usr/include/boost/ptr_container/ptr_sequence_adapter.hpp	/^        class void_ptr_delete_if $/;"	c	class:boost::ptr_sequence_adapter	access:protected
void_ptr_indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        void_ptr_indirect_fun( Fun f ) : fun(f)$/;"	f	class:boost::void_ptr_indirect_fun	access:public	signature:( Fun f )
void_ptr_indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^        void_ptr_indirect_fun() : fun(Fun())$/;"	f	class:boost::void_ptr_indirect_fun	access:public	signature:()
void_ptr_indirect_fun	/usr/include/boost/ptr_container/indirect_fun.hpp	/^    class void_ptr_indirect_fun$/;"	c	namespace:boost
void_ptr_iterator	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator( VoidIter r ) : iter_(r)$/;"	f	class:boost::void_ptr_iterator	access:public	signature:( VoidIter r )
void_ptr_iterator	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator( const void_ptr_iterator<MutableIterator,MutableT>& r )$/;"	f	class:boost::void_ptr_iterator	access:public	signature:( const void_ptr_iterator<MutableIterator,MutableT>& r )
void_ptr_iterator	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^            void_ptr_iterator() : iter_()$/;"	f	class:boost::void_ptr_iterator	access:public	signature:()
void_ptr_iterator	/usr/include/boost/ptr_container/detail/void_ptr_iterator.hpp	/^        class void_ptr_iterator$/;"	c	namespace:boost
what	/usr/include/boost/ptr_container/exception.hpp	/^        virtual const char* what() const throw()$/;"	f	class:boost::bad_ptr_container_operation	access:public	signature:() const
what_	/usr/include/boost/ptr_container/exception.hpp	/^        const char* what_;$/;"	m	class:boost::bad_ptr_container_operation	access:private
x	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    struct safe_bool_helper { int x; };$/;"	m	struct:boost::ptr_container_detail::static_move_ptr::safe_bool_helper	access:public
~eraser	/usr/include/boost/ptr_container/ptr_map_adapter.hpp	/^            ~eraser() $/;"	f	struct:boost::ptr_container_detail::ptr_map_adapter_base::eraser	access:public	signature:()
~reversible_ptr_container	/usr/include/boost/ptr_container/detail/reversible_ptr_container.hpp	/^        ~reversible_ptr_container()$/;"	f	class:boost::ptr_container_detail::reversible_ptr_container	access:public	signature:()
~scoped_deleter	/usr/include/boost/ptr_container/detail/scoped_deleter.hpp	/^            ~scoped_deleter()$/;"	f	class:boost::ptr_container_detail::scoped_deleter	access:public	signature:()
~static_move_ptr	/usr/include/boost/ptr_container/detail/static_move_ptr.hpp	/^    ~static_move_ptr() { if (ptr()) get_deleter()(ptr()); }$/;"	f	class:boost::ptr_container_detail::static_move_ptr	access:public	signature:()
