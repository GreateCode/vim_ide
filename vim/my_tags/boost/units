!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_MPL_ASSERT	/usr/include/boost/units/unit.hpp	/^        BOOST_MPL_ASSERT((detail::check_system<System, Dim>));$/;"	p	class:boost::units::unit	access:private	signature:(detail::check_system<System, Dim>)
BOOST_MPL_ASSERT	/usr/include/boost/units/unit.hpp	/^        BOOST_MPL_ASSERT((is_dimension_list<Dim>));$/;"	p	class:boost::units::unit	access:private	signature:(is_dimension_list<Dim>)
BOOST_MPL_ASSERT_MSG	/usr/include/boost/units/detail/linear_algebra.hpp	/^    BOOST_MPL_ASSERT_MSG((N > 0), base_units_are_probably_not_linearly_independent, (void));$/;"	p	struct:boost::units::detail::add_zeroes_impl	access:public	signature:(N > 0), base_units_are_probably_not_linearly_independent, (void)
BOOST_MPL_ASSERT_MSG	/usr/include/boost/units/heterogeneous_system.hpp	/^    BOOST_MPL_ASSERT_MSG((!boost::is_same<exponents, inconsistent>::value), the_specified_dimension_is_not_representible_in_the_given_system, (types<Dimensions, System>));$/;"	p	struct:boost::units::detail::make_heterogeneous_system	access:public	signature:(!boost::is_same<exponents, inconsistent>::value), the_specified_dimension_is_not_representible_in_the_given_system, (types<Dimensions, System>)
BOOST_MPL_ASSERT_NOT	/usr/include/boost/units/quantity.hpp	/^        BOOST_MPL_ASSERT_NOT((detail::is_base_unit<Unit>));$/;"	p	class:boost::units::quantity	access:private	signature:(detail::is_base_unit<Unit>)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^abs BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^ceil BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^copysign BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^fabs BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^fdim BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^floor BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^fmax BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^fmin BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^fpclassify BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^hypot BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,const quantity<Unit,Y>& q2)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1,const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isfinite BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isgreater BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isgreaterequal BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isinf BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isless BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^islessequal BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^islessgreater BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isnan BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isnormal BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isunordered BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^quantity<Unit,Y> nextafter BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^quantity<Unit,Y> nexttoward BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^round BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^signbit BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^trunc BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline Y fdim BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline Y fmax BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline Y fmin BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline Y trunc BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& val)$/;"	f	namespace:boost::units::detail	signature:(const Y& val)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline bool isgreater BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline bool isgreaterequal BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline bool isless BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline bool islessequal BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline bool islessgreater BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline bool isunordered BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
BOOST_STATIC_ASSERT	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        BOOST_STATIC_ASSERT((next::size::value - 1 == type::size::value));$/;"	p	struct:boost::units::detail::try_add_unit_impl::apply	access:public	signature:(next::size::value - 1 == type::size::value)
BOOST_STATIC_ASSERT	/usr/include/boost/units/dim.hpp	/^        BOOST_STATIC_ASSERT((boost::is_same<typename T0::tag_type,typename T1::tag_type>::value == true));$/;"	p	struct:boost::mpl::minus_impl::apply	access:public	signature:(boost::is_same<typename T0::tag_type,typename T1::tag_type>::value == true)
BOOST_STATIC_ASSERT	/usr/include/boost/units/dim.hpp	/^        BOOST_STATIC_ASSERT((boost::is_same<typename T0::tag_type,typename T1::tag_type>::value == true));$/;"	p	struct:boost::mpl::plus_impl::apply	access:public	signature:(boost::is_same<typename T0::tag_type,typename T1::tag_type>::value == true)
BOOST_STATIC_ASSERT	/usr/include/boost/units/dimension.hpp	/^        BOOST_STATIC_ASSERT((boost::is_same<T0,T1>::value == true));$/;"	p	struct:boost::mpl::minus_impl::apply	access:public	signature:(boost::is_same<T0,T1>::value == true)
BOOST_STATIC_ASSERT	/usr/include/boost/units/dimension.hpp	/^        BOOST_STATIC_ASSERT((boost::is_same<T0,T1>::value == true));$/;"	p	struct:boost::mpl::plus_impl::apply	access:public	signature:(boost::is_same<T0,T1>::value == true)
BOOST_STATIC_CONSTANT	/usr/include/boost/units/static_rational.hpp	/^        BOOST_STATIC_CONSTANT(integer_type, Denominator =$/;"	p	class:boost::units::static_rational	access:public	signature:(integer_type, Denominator = (::boost::mpl::divides<D_type, den_type>::value))
BOOST_STATIC_CONSTANT	/usr/include/boost/units/static_rational.hpp	/^        BOOST_STATIC_CONSTANT(integer_type, Numerator =$/;"	p	class:boost::units::static_rational	access:public	signature:(integer_type, Numerator = (::boost::mpl::divides<N_type, den_type>::value))
BOOST_STATIC_CONSTANT	/usr/include/boost/units/static_rational.hpp	/^    BOOST_STATIC_CONSTANT(integer_type,value = Value < 0 ? -Value : Value);$/;"	p	struct:boost::units::static_abs	access:public	signature:(integer_type,value = Value < 0 ? -Value : Value)
BOOST_UNITS_ABSOLUTE_HPP	/usr/include/boost/units/absolute.hpp	18;"	d
BOOST_UNITS_ABSOLUTE_IMPL_HPP	/usr/include/boost/units/detail/absolute_impl.hpp	12;"	d
BOOST_UNITS_ABSORBED_DOSE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/absorbed_dose.hpp	12;"	d
BOOST_UNITS_ABSTRACT_HPP	/usr/include/boost/units/systems/abstract.hpp	12;"	d
BOOST_UNITS_ACCELERATION_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/acceleration.hpp	12;"	d
BOOST_UNITS_ACTION_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/action.hpp	12;"	d
BOOST_UNITS_ACTIVITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/activity.hpp	12;"	d
BOOST_UNITS_AMOUNT_BASE_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/amount.hpp	12;"	d
BOOST_UNITS_ANGLE_DEGREE_BASE_UNIT_HPP	/usr/include/boost/units/base_units/angle/degree.hpp	12;"	d
BOOST_UNITS_ANGLE_DEGREE_HPP	/usr/include/boost/units/systems/angle/degrees.hpp	12;"	d
BOOST_UNITS_ANGLE_GRADIANS_HPP	/usr/include/boost/units/systems/angle/gradians.hpp	12;"	d
BOOST_UNITS_ANGLE_GRADIAN_BASE_UNIT_HPP	/usr/include/boost/units/base_units/angle/gradian.hpp	12;"	d
BOOST_UNITS_ANGLE_RADIAN_BASE_UNIT_HPP	/usr/include/boost/units/base_units/angle/radian.hpp	12;"	d
BOOST_UNITS_ANGLE_REVOLUTIONS_HPP	/usr/include/boost/units/systems/angle/revolutions.hpp	12;"	d
BOOST_UNITS_ANGLE_STERADIAN_BASE_UNIT_HPP	/usr/include/boost/units/base_units/angle/steradian.hpp	12;"	d
BOOST_UNITS_ANGULAR_ACCELERATION_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/angular_acceleration.hpp	12;"	d
BOOST_UNITS_ANGULAR_MOMENTUM_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/angular_momentum.hpp	12;"	d
BOOST_UNITS_ANGULAR_VELOCITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/angular_velocity.hpp	12;"	d
BOOST_UNITS_AREA_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/area.hpp	12;"	d
BOOST_UNITS_AUTO_STATIC_CONSTANT	/usr/include/boost/units/static_constant.hpp	39;"	d
BOOST_UNITS_AUTO_STATIC_CONSTANT	/usr/include/boost/units/static_constant.hpp	45;"	d
BOOST_UNITS_AUTO_STATIC_CONSTANT	/usr/include/boost/units/static_constant.hpp	50;"	d
BOOST_UNITS_BASE_DIMENSION_HPP	/usr/include/boost/units/base_dimension.hpp	16;"	d
BOOST_UNITS_BASE_UNITS_IMPERIAL_FLUID_OUNCE_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_IMPERIAL_GALLON_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/gallon.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_IMPERIAL_GILL_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/gill.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_IMPERIAL_PINT_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/pint.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_IMPERIAL_QUART_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/quart.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_REVOLUTION_HPP	/usr/include/boost/units/base_units/angle/revolution.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_US_CUP_HPP_INCLUDED	/usr/include/boost/units/base_units/us/cup.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_US_FLUID_DRAM_HPP_INCLUDED	/usr/include/boost/units/base_units/us/fluid_dram.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_US_FLUID_OUNCE_HPP_INCLUDED	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_US_GALLON_HPP_INCLUDED	/usr/include/boost/units/base_units/us/gallon.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_US_GILL_HPP_INCLUDED	/usr/include/boost/units/base_units/us/gill.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_US_MINIM_HPP_INCLUDED	/usr/include/boost/units/base_units/us/minim.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_US_PINT_HPP_INCLUDED	/usr/include/boost/units/base_units/us/pint.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_US_QUART_HPP_INCLUDED	/usr/include/boost/units/base_units/us/quart.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_US_TABLESPOON_HPP_INCLUDED	/usr/include/boost/units/base_units/us/tablespoon.hpp	12;"	d
BOOST_UNITS_BASE_UNITS_US_TEASPOON_HPP_INCLUDED	/usr/include/boost/units/base_units/us/teaspoon.hpp	12;"	d
BOOST_UNITS_BASE_UNIT_HPP	/usr/include/boost/units/base_unit.hpp	16;"	d
BOOST_UNITS_CAPACITANCE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/capacitance.hpp	12;"	d
BOOST_UNITS_CENTIMETER_BASE_UNIT_HPP	/usr/include/boost/units/base_units/cgs/centimeter.hpp	12;"	d
BOOST_UNITS_CGS_ACCELERATION_HPP	/usr/include/boost/units/systems/cgs/acceleration.hpp	12;"	d
BOOST_UNITS_CGS_AREA_HPP	/usr/include/boost/units/systems/cgs/area.hpp	12;"	d
BOOST_UNITS_CGS_BASE_HPP	/usr/include/boost/units/systems/cgs/base.hpp	12;"	d
BOOST_UNITS_CGS_BIOT_BASE_UNIT_HPP	/usr/include/boost/units/base_units/cgs/biot.hpp	12;"	d
BOOST_UNITS_CGS_CURRENT_HPP	/usr/include/boost/units/systems/cgs/current.hpp	12;"	d
BOOST_UNITS_CGS_DIMENSIONLESS_HPP	/usr/include/boost/units/systems/cgs/dimensionless.hpp	12;"	d
BOOST_UNITS_CGS_DYNAMIC_VISCOSITY_HPP	/usr/include/boost/units/systems/cgs/dynamic_viscosity.hpp	12;"	d
BOOST_UNITS_CGS_ENERGY_HPP	/usr/include/boost/units/systems/cgs/energy.hpp	12;"	d
BOOST_UNITS_CGS_FORCE_HPP	/usr/include/boost/units/systems/cgs/force.hpp	12;"	d
BOOST_UNITS_CGS_FREQUENCY_HPP	/usr/include/boost/units/systems/cgs/frequency.hpp	12;"	d
BOOST_UNITS_CGS_GRAM_BASE_UNIT_HPP	/usr/include/boost/units/base_units/cgs/gram.hpp	12;"	d
BOOST_UNITS_CGS_HPP	/usr/include/boost/units/systems/cgs.hpp	12;"	d
BOOST_UNITS_CGS_IO_HPP	/usr/include/boost/units/systems/cgs/io.hpp	12;"	d
BOOST_UNITS_CGS_KINEMATIC_VISCOSITY_HPP	/usr/include/boost/units/systems/cgs/kinematic_viscosity.hpp	12;"	d
BOOST_UNITS_CGS_LENGTH_HPP	/usr/include/boost/units/systems/cgs/length.hpp	12;"	d
BOOST_UNITS_CGS_MASS_DENSITY_HPP	/usr/include/boost/units/systems/cgs/mass_density.hpp	12;"	d
BOOST_UNITS_CGS_MASS_HPP	/usr/include/boost/units/systems/cgs/mass.hpp	12;"	d
BOOST_UNITS_CGS_MOMENTUM_HPP	/usr/include/boost/units/systems/cgs/momentum.hpp	12;"	d
BOOST_UNITS_CGS_POWER_HPP	/usr/include/boost/units/systems/cgs/power.hpp	12;"	d
BOOST_UNITS_CGS_PRESSURE_HPP	/usr/include/boost/units/systems/cgs/pressure.hpp	12;"	d
BOOST_UNITS_CGS_TIME_HPP	/usr/include/boost/units/systems/cgs/time.hpp	12;"	d
BOOST_UNITS_CGS_VELOCITY_HPP	/usr/include/boost/units/systems/cgs/velocity.hpp	12;"	d
BOOST_UNITS_CGS_VOLUME_HPP	/usr/include/boost/units/systems/cgs/volume.hpp	12;"	d
BOOST_UNITS_CGS_WAVENUMBER_HPP	/usr/include/boost/units/systems/cgs/wavenumber.hpp	12;"	d
BOOST_UNITS_CHECK_HOMOGENEOUS_UNITS	/usr/include/boost/units/config.hpp	101;"	d
BOOST_UNITS_CHECK_LAYOUT_COMPATIBILITY	/usr/include/boost/units/config.hpp	82;"	d
BOOST_UNITS_CHECK_LAYOUT_COMPATIBILITY	/usr/include/boost/units/config.hpp	85;"	d
BOOST_UNITS_CMATH_HPP	/usr/include/boost/units/cmath.hpp	12;"	d
BOOST_UNITS_CMATH_IMPL_HPP	/usr/include/boost/units/detail/cmath_impl.hpp	12;"	d
BOOST_UNITS_CODATA_ALPHA_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	12;"	d
BOOST_UNITS_CODATA_ATOMIC_AND_NUCLEAR_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	12;"	d
BOOST_UNITS_CODATA_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata_constants.hpp	12;"	d
BOOST_UNITS_CODATA_DEUTERON_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	12;"	d
BOOST_UNITS_CODATA_ELECTROMAGNETIC_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	12;"	d
BOOST_UNITS_CODATA_ELECTRON_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	12;"	d
BOOST_UNITS_CODATA_HELION_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	12;"	d
BOOST_UNITS_CODATA_MUON_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	12;"	d
BOOST_UNITS_CODATA_NEUTRON_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	12;"	d
BOOST_UNITS_CODATA_PHYSICO_CHEMICAL_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	12;"	d
BOOST_UNITS_CODATA_PROTON_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	12;"	d
BOOST_UNITS_CODATA_TAU_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	12;"	d
BOOST_UNITS_CODATA_TRITON_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	12;"	d
BOOST_UNITS_CODATA_TYPEDEFS_HPP	/usr/include/boost/units/systems/si/codata/typedefs.hpp	12;"	d
BOOST_UNITS_CODATA_UNIVERSAL_CONSTANTS_HPP	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	12;"	d
BOOST_UNITS_CONDUCTANCE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/conductance.hpp	12;"	d
BOOST_UNITS_CONDUCTIVITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/conductivity.hpp	12;"	d
BOOST_UNITS_CONFIG_HPP	/usr/include/boost/units/config.hpp	12;"	d
BOOST_UNITS_CONSTANTS_HPP	/usr/include/boost/units/systems/detail/constants.hpp	12;"	d
BOOST_UNITS_CONVERSION_HPP	/usr/include/boost/units/conversion.hpp	12;"	d
BOOST_UNITS_CURRENT_BASE_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/current.hpp	12;"	d
BOOST_UNITS_DEFAULT_CONVERSION	/usr/include/boost/units/conversion.hpp	118;"	d
BOOST_UNITS_DEFAULT_CONVERSION_TEMPLATE	/usr/include/boost/units/conversion.hpp	137;"	d
BOOST_UNITS_DEFINE_BASE_UNIT_WITH_CONVERSIONS	/usr/include/boost/units/conversion.hpp	155;"	d
BOOST_UNITS_DEFINE_CONVERSION_FACTOR	/usr/include/boost/units/conversion.hpp	65;"	d
BOOST_UNITS_DEFINE_CONVERSION_FACTOR_TEMPLATE	/usr/include/boost/units/conversion.hpp	97;"	d
BOOST_UNITS_DEFINE_CONVERSION_OFFSET	/usr/include/boost/units/absolute.hpp	133;"	d
BOOST_UNITS_DEFINE_HELPER	/usr/include/boost/units/systems/detail/constants.hpp	137;"	d
BOOST_UNITS_DEFINE_HELPER	/usr/include/boost/units/systems/detail/constants.hpp	139;"	d
BOOST_UNITS_DEFINE_HELPER	/usr/include/boost/units/systems/detail/constants.hpp	170;"	d
BOOST_UNITS_DEFINE_HELPER	/usr/include/boost/units/systems/detail/constants.hpp	183;"	d
BOOST_UNITS_DEFINE_HELPER	/usr/include/boost/units/systems/detail/constants.hpp	52;"	d
BOOST_UNITS_DEFINE_HELPER	/usr/include/boost/units/systems/detail/constants.hpp	89;"	d
BOOST_UNITS_DEFINE_HELPER	/usr/include/boost/units/systems/detail/constants.hpp	91;"	d
BOOST_UNITS_DERIVED_DIMENSION_HPP	/usr/include/boost/units/derived_dimension.hpp	12;"	d
BOOST_UNITS_DETAIL_BASE_UNIT_CONVERTER_IS_DEFINED	/usr/include/boost/units/detail/conversion_impl.hpp	281;"	d
BOOST_UNITS_DETAIL_CONVERSION_IMPL_HPP	/usr/include/boost/units/detail/conversion_impl.hpp	12;"	d
BOOST_UNITS_DETAIL_DIMENSIONLESS_UNIT_HPP	/usr/include/boost/units/detail/dimensionless_unit.hpp	12;"	d
BOOST_UNITS_DETAIL_HETEROGENEOUS_CONVERSION_HPP	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	12;"	d
BOOST_UNITS_DETAIL_LINEAR_ALGEBRA_HPP	/usr/include/boost/units/detail/linear_algebra.hpp	12;"	d
BOOST_UNITS_DETAIL_ONE_HPP	/usr/include/boost/units/detail/one.hpp	12;"	d
BOOST_UNITS_DETAIL_ORDINAL_HPP_INCLUDED	/usr/include/boost/units/detail/ordinal.hpp	12;"	d
BOOST_UNITS_DETAIL_PREVENT_REDEFINITION_HPP	/usr/include/boost/units/detail/prevent_redefinition.hpp	12;"	d
BOOST_UNITS_DETAIL_PUSH_FRONT_IF_HPP	/usr/include/boost/units/detail/push_front_if.hpp	12;"	d
BOOST_UNITS_DETAIL_PUSH_FRONT_OR_ADD_HPP	/usr/include/boost/units/detail/push_front_or_add.hpp	12;"	d
BOOST_UNITS_DETAIL_SORT_HPP	/usr/include/boost/units/detail/sort.hpp	12;"	d
BOOST_UNITS_DETAIL_STATIC_RATIONAL_POWER_HPP	/usr/include/boost/units/detail/static_rational_power.hpp	12;"	d
BOOST_UNITS_DETAIL_UNSCALE_HPP_INCLUDED	/usr/include/boost/units/detail/unscale.hpp	12;"	d
BOOST_UNITS_DIMENSIONLESS_QUANTITY_HPP	/usr/include/boost/units/dimensionless_quantity.hpp	12;"	d
BOOST_UNITS_DIMENSIONLESS_TYPE_HPP	/usr/include/boost/units/dimensionless_type.hpp	12;"	d
BOOST_UNITS_DIMENSIONLESS_UNIT	/usr/include/boost/units/detail/dimensionless_unit.hpp	70;"	d
BOOST_UNITS_DIMENSIONLESS_UNIT_HPP	/usr/include/boost/units/dimensionless_unit.hpp	12;"	d
BOOST_UNITS_DIMENSION_HPP	/usr/include/boost/units/dimension.hpp	12;"	d
BOOST_UNITS_DIMENSION_IMPL_HPP	/usr/include/boost/units/detail/dimension_impl.hpp	12;"	d
BOOST_UNITS_DIMENSION_LIST_HPP	/usr/include/boost/units/detail/dimension_list.hpp	12;"	d
BOOST_UNITS_DIM_HPP	/usr/include/boost/units/dim.hpp	12;"	d
BOOST_UNITS_DIM_IMPL_HPP	/usr/include/boost/units/detail/dim_impl.hpp	12;"	d
BOOST_UNITS_DOSE_EQUIVALENT_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/dose_equivalent.hpp	12;"	d
BOOST_UNITS_DYNAMIC_VISCOSITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/dynamic_viscosity.hpp	12;"	d
BOOST_UNITS_ELECTRIC_CHARGE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/electric_charge.hpp	12;"	d
BOOST_UNITS_ELECTRIC_POTENTIAL_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/electric_potential.hpp	12;"	d
BOOST_UNITS_ENERGY_DENSITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/energy_density.hpp	12;"	d
BOOST_UNITS_ENERGY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/energy.hpp	12;"	d
BOOST_UNITS_FORCE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/force.hpp	12;"	d
BOOST_UNITS_FREQUENCY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/frequency.hpp	12;"	d
BOOST_UNITS_GET_DIMENSION_HPP	/usr/include/boost/units/get_dimension.hpp	12;"	d
BOOST_UNITS_GET_SYSTEM_HPP	/usr/include/boost/units/get_system.hpp	12;"	d
BOOST_UNITS_HAS_BOOST_TYPEOF	/usr/include/boost/units/config.hpp	20;"	d
BOOST_UNITS_HAS_BOOST_TYPEOF	/usr/include/boost/units/config.hpp	23;"	d
BOOST_UNITS_HAS_GNU_TYPEOF	/usr/include/boost/units/config.hpp	36;"	d
BOOST_UNITS_HAS_MWERKS_TYPEOF	/usr/include/boost/units/config.hpp	41;"	d
BOOST_UNITS_HAS_TYPEOF	/usr/include/boost/units/config.hpp	30;"	d
BOOST_UNITS_HAS_TYPEOF	/usr/include/boost/units/config.hpp	34;"	d
BOOST_UNITS_HAS_TYPEOF	/usr/include/boost/units/config.hpp	39;"	d
BOOST_UNITS_HAS_TYPEOF	/usr/include/boost/units/config.hpp	44;"	d
BOOST_UNITS_HEAT_CAPACITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/heat_capacity.hpp	12;"	d
BOOST_UNITS_HETEROGENEOUS_DIMENSIONLESS_UNIT	/usr/include/boost/units/detail/dimensionless_unit.hpp	77;"	d
BOOST_UNITS_HETEROGENEOUS_SYSTEM_HPP	/usr/include/boost/units/heterogeneous_system.hpp	12;"	d
BOOST_UNITS_HOMOGENEOUS_SYSTEM_HPP_INCLUDED	/usr/include/boost/units/homogeneous_system.hpp	12;"	d
BOOST_UNITS_ILLUMINANCE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/illuminance.hpp	12;"	d
BOOST_UNITS_IMPEDANCE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/impedance.hpp	12;"	d
BOOST_UNITS_IMPERIAL_FOOT_BASE_UNIT_HPP	/usr/include/boost/units/base_units/imperial/foot.hpp	12;"	d
BOOST_UNITS_IMPERIAL_FURLONG_BASE_UNIT_HPP	/usr/include/boost/units/base_units/imperial/furlong.hpp	12;"	d
BOOST_UNITS_IMPERIAL_INCH_BASE_UNIT_HPP	/usr/include/boost/units/base_units/imperial/inch.hpp	12;"	d
BOOST_UNITS_IMPERIAL_LEAGUE_BASE_UNIT_HPP	/usr/include/boost/units/base_units/imperial/league.hpp	12;"	d
BOOST_UNITS_IMPERIAL_MILE_BASE_UNIT_HPP	/usr/include/boost/units/base_units/imperial/mile.hpp	12;"	d
BOOST_UNITS_IMPERIAL_THOU_BASE_UNIT_HPP	/usr/include/boost/units/base_units/imperial/thou.hpp	12;"	d
BOOST_UNITS_INDUCTANCE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/inductance.hpp	12;"	d
BOOST_UNITS_IO_HPP	/usr/include/boost/units/io.hpp	12;"	d
BOOST_UNITS_IS_DIMENSIONLESS_HPP	/usr/include/boost/units/is_dimensionless.hpp	12;"	d
BOOST_UNITS_IS_DIMENSIONLESS_QUANTITY_HPP	/usr/include/boost/units/is_dimensionless_quantity.hpp	12;"	d
BOOST_UNITS_IS_DIMENSIONLESS_UNIT_HPP	/usr/include/boost/units/is_dimensionless_unit.hpp	12;"	d
BOOST_UNITS_IS_DIMENSION_LIST_HPP	/usr/include/boost/units/is_dimension_list.hpp	12;"	d
BOOST_UNITS_IS_DIM_HPP	/usr/include/boost/units/is_dim.hpp	12;"	d
BOOST_UNITS_IS_QUANTITY_HPP	/usr/include/boost/units/is_quantity.hpp	12;"	d
BOOST_UNITS_IS_QUANTITY_OF_DIMENSION_HPP	/usr/include/boost/units/is_quantity_of_dimension.hpp	12;"	d
BOOST_UNITS_IS_QUANTITY_OF_SYSTEM_HPP	/usr/include/boost/units/is_quantity_of_system.hpp	12;"	d
BOOST_UNITS_IS_UNIT_HPP	/usr/include/boost/units/is_unit.hpp	12;"	d
BOOST_UNITS_IS_UNIT_OF_DIMENSION_HPP	/usr/include/boost/units/is_unit_of_dimension.hpp	12;"	d
BOOST_UNITS_IS_UNIT_OF_SYSTEM_HPP	/usr/include/boost/units/is_unit_of_system.hpp	12;"	d
BOOST_UNITS_KINEMATIC_VISCOSITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/kinematic_viscosity.hpp	12;"	d
BOOST_UNITS_LAMBDA_HPP	/usr/include/boost/units/lambda.hpp	14;"	d
BOOST_UNITS_LENGTH_BASE_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/length.hpp	12;"	d
BOOST_UNITS_LIMITS_HPP	/usr/include/boost/units/limits.hpp	12;"	d
BOOST_UNITS_LUMINANCE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/luminance.hpp	12;"	d
BOOST_UNITS_LUMINOUS_FLUX_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/luminous_flux.hpp	12;"	d
BOOST_UNITS_LUMINOUS_INTENSITY_BASE_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/luminous_intensity.hpp	12;"	d
BOOST_UNITS_MAGNETIC_FIELD_INTENSITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/magnetic_field_intensity.hpp	12;"	d
BOOST_UNITS_MAGNETIC_FLUX_DENSITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/magnetic_flux_density.hpp	12;"	d
BOOST_UNITS_MAGNETIC_FLUX_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/magnetic_flux.hpp	12;"	d
BOOST_UNITS_MAKE_HETEROGENEOUS_UNIT	/usr/include/boost/units/heterogeneous_system.hpp	95;"	d
BOOST_UNITS_MAKE_SCALED_UNIT_HPP_INCLUDED	/usr/include/boost/units/make_scaled_unit.hpp	12;"	d
BOOST_UNITS_MAKE_SYSTEM_HPP	/usr/include/boost/units/make_system.hpp	12;"	d
BOOST_UNITS_MASS_BASE_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/mass.hpp	12;"	d
BOOST_UNITS_MASS_DENSITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/mass_density.hpp	12;"	d
BOOST_UNITS_METRIC_PREFIX	/usr/include/boost/units/systems/si/prefixes.hpp	25;"	d
BOOST_UNITS_MOLAR_ENERGY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/molar_energy.hpp	12;"	d
BOOST_UNITS_MOLAR_HEAT_CAPACITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/molar_heat_capacity.hpp	12;"	d
BOOST_UNITS_MOMENTUM_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/momentum.hpp	12;"	d
BOOST_UNITS_MOMENT_OF_INERTIA_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/moment_of_inertia.hpp	12;"	d
BOOST_UNITS_NO_COMPILER_CHECK	/usr/include/boost/units/config.hpp	96;"	d
BOOST_UNITS_NO_PASCAL	/usr/include/boost/units/systems/si/pressure.hpp	28;"	d
BOOST_UNITS_NO_PASCAL	/usr/include/boost/units/systems/si/pressure.hpp	30;"	d
BOOST_UNITS_NO_PASCAL	/usr/include/boost/units/systems/si/pressure.hpp	33;"	d
BOOST_UNITS_NO_PASCAL	/usr/include/boost/units/systems/si/pressure.hpp	35;"	d
BOOST_UNITS_OPERATORS_HPP	/usr/include/boost/units/operators.hpp	12;"	d
BOOST_UNITS_PERMEABILITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/permeability.hpp	12;"	d
BOOST_UNITS_PERMITTIVITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/permittivity.hpp	12;"	d
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/detail/constants.hpp	205;"	d
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_alpha,quantity<mass_over_amount>,4.001506179127e-3*kilograms\/mole,6.2e-14*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_alpha,quantity<mass_over_amount>,4.001506179127e-3*kilograms/mole,6.2e-14*kilograms/mole)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_alpha,quantity<mass>,6.64465620e-27*kilograms,3.3e-34*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_alpha,quantity<mass>,6.64465620e-27*kilograms,3.3e-34*kilograms)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_alpha_over_m_e,quantity<dimensionless>,7294.2995365*dimensionless(),3.1e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_alpha_over_m_e,quantity<dimensionless>,7294.2995365*dimensionless(),3.1e-6*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_alpha_over_m_p,quantity<dimensionless>,3.97259968951*dimensionless(),4.1e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_alpha_over_m_p,quantity<dimensionless>,3.97259968951*dimensionless(),4.1e-10*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(E_h,quantity<energy>,4.35974394e-18*joules,2.2e-25*joules);$/;"	p	namespace:boost::units::si::constants::codata	signature:(E_h,quantity<energy>,4.35974394e-18*joules,2.2e-25*joules)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(R_infinity,quantity<wavenumber>,10973731.568527\/meter,7.3e-5\/meter);$/;"	p	namespace:boost::units::si::constants::codata	signature:(R_infinity,quantity<wavenumber>,10973731.568527/meter,7.3e-5/meter)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(a_0,quantity<length>,0.52917720859e-10*meters,3.6e-20*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(a_0,quantity<length>,0.52917720859e-10*meters,3.6e-20*meters)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(alpha,quantity<dimensionless>,7.2973525376e-3*dimensionless(),5.0e-12*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(alpha,quantity<dimensionless>,7.2973525376e-3*dimensionless(),5.0e-12*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_d,quantity<mass_over_amount>,2.013553212724e-3*kilograms\/mole,7.8e-14*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_d,quantity<mass_over_amount>,2.013553212724e-3*kilograms/mole,7.8e-14*kilograms/mole)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(R_d,quantity<length>,2.1402e-15*meters,2.8e-18*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(R_d,quantity<length>,2.1402e-15*meters,2.8e-18*meters)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(g_d,quantity<dimensionless>,0.8574382308*dimensionless(),7.2e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(g_d,quantity<dimensionless>,0.8574382308*dimensionless(),7.2e-9*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_d,quantity<mass>,3.34358320e-27*kilograms,1.7e-34*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_d,quantity<mass>,3.34358320e-27*kilograms,1.7e-34*kilograms)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_d_over_m_e,quantity<dimensionless>,3670.4829654*dimensionless(),1.6e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_d_over_m_e,quantity<dimensionless>,3670.4829654*dimensionless(),1.6e-6*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_d_over_m_p,quantity<dimensionless>,1.99900750108*dimensionless(),2.2e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_d_over_m_p,quantity<dimensionless>,1.99900750108*dimensionless(),2.2e-10*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_d,quantity<energy_over_magnetic_flux_density>,0.433073465e-26*joules\/tesla,1.1e-34*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_d,quantity<energy_over_magnetic_flux_density>,0.433073465e-26*joules/tesla,1.1e-34*joules/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_d_over_mu_B,quantity<dimensionless>,0.4669754556e-3*dimensionless(),3.9e-12*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_d_over_mu_B,quantity<dimensionless>,0.4669754556e-3*dimensionless(),3.9e-12*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_d_over_mu_N,quantity<dimensionless>,0.8574382308*dimensionless(),7.2e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_d_over_mu_N,quantity<dimensionless>,0.8574382308*dimensionless(),7.2e-9*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_d_over_mu_e,quantity<dimensionless>,-4.664345537e-4*dimensionless(),3.9e-12*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_d_over_mu_e,quantity<dimensionless>,-4.664345537e-4*dimensionless(),3.9e-12*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_d_over_mu_n,quantity<dimensionless>,-0.44820652*dimensionless(),1.1e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_d_over_mu_n,quantity<dimensionless>,-0.44820652*dimensionless(),1.1e-7*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_d_over_mu_p,quantity<dimensionless>,0.3070122070*dimensionless(),2.4e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_d_over_mu_p,quantity<dimensionless>,0.3070122070*dimensionless(),2.4e-9*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(G_0,quantity<conductance>,7.7480917004e-5*siemens,5.3e-14*siemens);$/;"	p	namespace:boost::units::si::constants::codata	signature:(G_0,quantity<conductance>,7.7480917004e-5*siemens,5.3e-14*siemens)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(K_J,quantity<frequency_over_electric_potential>,483597.891e9*hertz\/volt,1.2e7*hertz\/volt);$/;"	p	namespace:boost::units::si::constants::codata	signature:(K_J,quantity<frequency_over_electric_potential>,483597.891e9*hertz/volt,1.2e7*hertz/volt)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(Phi_0,quantity<magnetic_flux>,2.067833667e-15*webers,5.2e-23*webers);$/;"	p	namespace:boost::units::si::constants::codata	signature:(Phi_0,quantity<magnetic_flux>,2.067833667e-15*webers,5.2e-23*webers)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(R_K,quantity<resistance>,25812.807557*ohms,1.77e-5*ohms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(R_K,quantity<resistance>,25812.807557*ohms,1.77e-5*ohms)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(e,quantity<electric_charge>,1.602176487e-19*coulombs,4.0e-27*coulombs);$/;"	p	namespace:boost::units::si::constants::codata	signature:(e,quantity<electric_charge>,1.602176487e-19*coulombs,4.0e-27*coulombs)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(e_over_h,quantity<current_over_energy>,2.417989454e14*amperes\/joule,6.0e6*amperes\/joule);$/;"	p	namespace:boost::units::si::constants::codata	signature:(e_over_h,quantity<current_over_energy>,2.417989454e14*amperes/joule,6.0e6*amperes/joule)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_B,quantity<energy_over_magnetic_flux_density>,927.400915e-26*joules\/tesla,2.3e-31*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_B,quantity<energy_over_magnetic_flux_density>,927.400915e-26*joules/tesla,2.3e-31*joules/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_N,quantity<energy_over_magnetic_flux_density>,5.05078324e-27*joules\/tesla,1.3e-34*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_N,quantity<energy_over_magnetic_flux_density>,5.05078324e-27*joules/tesla,1.3e-34*joules/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_e,quantity<mass_over_amount>,5.4857990943e-7*kilograms\/mole,2.3e-16*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_e,quantity<mass_over_amount>,5.4857990943e-7*kilograms/mole,2.3e-16*kilograms/mole)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(a_e,quantity<dimensionless>,1.15965218111e-3*dimensionless(),7.4e-13*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(a_e,quantity<dimensionless>,1.15965218111e-3*dimensionless(),7.4e-13*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(e_over_m_e,quantity<electric_charge_over_mass>,1.758820150e11*coulombs\/kilogram,4.4e3*coulombs\/kilogram);$/;"	p	namespace:boost::units::si::constants::codata	signature:(e_over_m_e,quantity<electric_charge_over_mass>,1.758820150e11*coulombs/kilogram,4.4e3*coulombs/kilogram)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(g_e,quantity<dimensionless>,-2.0023193043622*dimensionless(),1.5e-12*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(g_e,quantity<dimensionless>,-2.0023193043622*dimensionless(),1.5e-12*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(gamma_e,quantity<frequency_over_magnetic_flux_density>,1.760859770e11\/second\/tesla,4.4e3\/second\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(gamma_e,quantity<frequency_over_magnetic_flux_density>,1.760859770e11/second/tesla,4.4e3/second/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(lambda_C,quantity<length>,2.4263102175e-12*meters,3.3e-21*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(lambda_C,quantity<length>,2.4263102175e-12*meters,3.3e-21*meters)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e,quantity<mass>,9.10938215e-31*kilograms,4.5e-38*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e,quantity<mass>,9.10938215e-31*kilograms,4.5e-38*kilograms)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e_over_m_alpha,quantity<dimensionless>,1.37093355570e-4*dimensionless(),5.8e-14*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e_over_m_alpha,quantity<dimensionless>,1.37093355570e-4*dimensionless(),5.8e-14*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e_over_m_d,quantity<dimensionless>,2.7244371093e-4*dimensionless(),1.2e-13*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e_over_m_d,quantity<dimensionless>,2.7244371093e-4*dimensionless(),1.2e-13*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e_over_m_mu,quantity<dimensionless>,4.83633171e-3*dimensionless(),1.2e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e_over_m_mu,quantity<dimensionless>,4.83633171e-3*dimensionless(),1.2e-10*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e_over_m_n,quantity<dimensionless>,5.4386734459e-4*dimensionless(),3.3e-13*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e_over_m_n,quantity<dimensionless>,5.4386734459e-4*dimensionless(),3.3e-13*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e_over_m_p,quantity<dimensionless>,5.4461702177e-4*dimensionless(),2.4e-13*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e_over_m_p,quantity<dimensionless>,5.4461702177e-4*dimensionless(),2.4e-13*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e_over_m_tau,quantity<dimensionless>,2.87564e-4*dimensionless(),4.7e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e_over_m_tau,quantity<dimensionless>,2.87564e-4*dimensionless(),4.7e-8*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e,quantity<energy_over_magnetic_flux_density>,-928.476377e-26*joules\/tesla,2.3e-31*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e,quantity<energy_over_magnetic_flux_density>,-928.476377e-26*joules/tesla,2.3e-31*joules/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_B,quantity<dimensionless>,-1.00115965218111*dimensionless(),7.4e-13*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_B,quantity<dimensionless>,-1.00115965218111*dimensionless(),7.4e-13*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_N,quantity<dimensionless>,-183.28197092*dimensionless(),8.0e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_N,quantity<dimensionless>,-183.28197092*dimensionless(),8.0e-7*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_d,quantity<dimensionless>,-2143.923498*dimensionless(),1.8e-5*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_d,quantity<dimensionless>,-2143.923498*dimensionless(),1.8e-5*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_h_prime,quantity<dimensionless>,864.058257*dimensionless(),1.0e-5*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_h_prime,quantity<dimensionless>,864.058257*dimensionless(),1.0e-5*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_mu,quantity<dimensionless>,206.7669877*dimensionless(),5.2e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_mu,quantity<dimensionless>,206.7669877*dimensionless(),5.2e-6*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_n,quantity<dimensionless>,960.92050*dimensionless(),2.3e-4*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_n,quantity<dimensionless>,960.92050*dimensionless(),2.3e-4*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_p,quantity<dimensionless>,-658.2106848*dimensionless(),5.4e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_p,quantity<dimensionless>,-658.2106848*dimensionless(),5.4e-6*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_p_prime,quantity<dimensionless>,-658.2275971*dimensionless(),7.2e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_p_prime,quantity<dimensionless>,-658.2275971*dimensionless(),7.2e-6*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(r_e,quantity<length>,2.8179402894e-15*meters,5.8e-24*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(r_e,quantity<length>,2.8179402894e-15*meters,5.8e-24*meters)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(sigma_e,quantity<area>,0.6652458558e-28*square_meters,2.7e-37*square_meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(sigma_e,quantity<area>,0.6652458558e-28*square_meters,2.7e-37*square_meters)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_h,quantity<mass_over_amount>,3.0149322473e-3*kilograms\/mole,2.6e-12*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_h,quantity<mass_over_amount>,3.0149322473e-3*kilograms/mole,2.6e-12*kilograms/mole)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(gamma_h_prime,quantity<frequency_over_magnetic_flux_density>,2.037894730e8\/second\/tesla,5.6e-0\/second\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(gamma_h_prime,quantity<frequency_over_magnetic_flux_density>,2.037894730e8/second/tesla,5.6e-0/second/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_h,quantity<mass>,5.00641192e-27*kilograms,2.5e-34*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_h,quantity<mass>,5.00641192e-27*kilograms,2.5e-34*kilograms)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_h_over_m_e,quantity<dimensionless>,5495.8852765*dimensionless(),5.2e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_h_over_m_e,quantity<dimensionless>,5495.8852765*dimensionless(),5.2e-6*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_h_over_m_p,quantity<dimensionless>,2.9931526713*dimensionless(),2.6e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_h_over_m_p,quantity<dimensionless>,2.9931526713*dimensionless(),2.6e-9*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_h_prime,quantity<energy_over_magnetic_flux_density>,-1.074552982e-26*joules\/tesla,3.0e-34*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_h_prime,quantity<energy_over_magnetic_flux_density>,-1.074552982e-26*joules/tesla,3.0e-34*joules/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_h_prime_over_mu_B,quantity<dimensionless>,-1.158671471e-3*dimensionless(),1.4e-11*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_h_prime_over_mu_B,quantity<dimensionless>,-1.158671471e-3*dimensionless(),1.4e-11*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_h_prime_over_mu_N,quantity<dimensionless>,-2.127497718*dimensionless(),2.5e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_h_prime_over_mu_N,quantity<dimensionless>,-2.127497718*dimensionless(),2.5e-8*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_h_prime_over_mu_p,quantity<dimensionless>,-0.761766558*dimensionless(),1.1e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_h_prime_over_mu_p,quantity<dimensionless>,-0.761766558*dimensionless(),1.1e-8*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_h_prime_over_mu_p_prime,quantity<dimensionless>,-0.7617861313*dimensionless(),3.3e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_h_prime_over_mu_p_prime,quantity<dimensionless>,-0.7617861313*dimensionless(),3.3e-8*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_mu,quantity<mass_over_amount>,0.1134289256e-3*kilograms\/mole,2.9e-12*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_mu,quantity<mass_over_amount>,0.1134289256e-3*kilograms/mole,2.9e-12*kilograms/mole)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(a_mu,quantity<dimensionless>,1.16592069e-3*dimensionless(),6.0e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(a_mu,quantity<dimensionless>,1.16592069e-3*dimensionless(),6.0e-10*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(g_mu,quantity<dimensionless>,-2.0023318414*dimensionless(),1.2e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(g_mu,quantity<dimensionless>,-2.0023318414*dimensionless(),1.2e-9*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(lambda_C_mu,quantity<length>,11.73444104e-15*meters,3.0e-22*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(lambda_C_mu,quantity<length>,11.73444104e-15*meters,3.0e-22*meters)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_mu,quantity<mass>,1.88353130e-28*kilograms,1.1e-35*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_mu,quantity<mass>,1.88353130e-28*kilograms,1.1e-35*kilograms)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_mu_over_m_e,quantity<dimensionless>,206.7682823*dimensionless(),5.2e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_mu_over_m_e,quantity<dimensionless>,206.7682823*dimensionless(),5.2e-6*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_mu_over_m_n,quantity<dimensionless>,0.1124545167*dimensionless(),2.9e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_mu_over_m_n,quantity<dimensionless>,0.1124545167*dimensionless(),2.9e-9*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_mu_over_m_p,quantity<dimensionless>,0.1126095261*dimensionless(),2.9e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_mu_over_m_p,quantity<dimensionless>,0.1126095261*dimensionless(),2.9e-9*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_mu_over_m_tau,quantity<dimensionless>,5.94592e-2*dimensionless(),9.7e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_mu_over_m_tau,quantity<dimensionless>,5.94592e-2*dimensionless(),9.7e-6*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_mu,quantity<energy_over_magnetic_flux_density>,-4.49044786e-26*joules\/tesla,1.6e-33*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_mu,quantity<energy_over_magnetic_flux_density>,-4.49044786e-26*joules/tesla,1.6e-33*joules/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_mu_over_mu_B,quantity<dimensionless>,-4.84197049e-3*dimensionless(),1.2e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_mu_over_mu_B,quantity<dimensionless>,-4.84197049e-3*dimensionless(),1.2e-10*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_mu_over_mu_N,quantity<dimensionless>,-8.89059705*dimensionless(),2.3e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_mu_over_mu_N,quantity<dimensionless>,-8.89059705*dimensionless(),2.3e-7*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_mu_over_mu_p,quantity<dimensionless>,-3.183345137*dimensionless(),8.5e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_mu_over_mu_p,quantity<dimensionless>,-3.183345137*dimensionless(),8.5e-8*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_n,quantity<mass_over_amount>,1.00866491597e-3*kilograms\/mole,4.3e-13*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_n,quantity<mass_over_amount>,1.00866491597e-3*kilograms/mole,4.3e-13*kilograms/mole)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(g_n,quantity<dimensionless>,-3.82608545*dimensionless(),9.0e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(g_n,quantity<dimensionless>,-3.82608545*dimensionless(),9.0e-7*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(gamma_n,quantity<frequency_over_magnetic_flux_density>,1.83247185e8\/second\/tesla,4.3e1\/second\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(gamma_n,quantity<frequency_over_magnetic_flux_density>,1.83247185e8/second/tesla,4.3e1/second/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(lambda_C_n,quantity<length>,1.3195908951e-15*meters,2.0e-24*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(lambda_C_n,quantity<length>,1.3195908951e-15*meters,2.0e-24*meters)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_n,quantity<mass>,1.674927211e-27*kilograms,8.4e-35*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_n,quantity<mass>,1.674927211e-27*kilograms,8.4e-35*kilograms)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_n_over_m_e,quantity<dimensionless>,1838.6836605*dimensionless(),1.1e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_n_over_m_e,quantity<dimensionless>,1838.6836605*dimensionless(),1.1e-6*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_n_over_m_mu,quantity<dimensionless>,8.89248409*dimensionless(),2.3e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_n_over_m_mu,quantity<dimensionless>,8.89248409*dimensionless(),2.3e-7*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_n_over_m_p,quantity<dimensionless>,1.00137841918*dimensionless(),4.6e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_n_over_m_p,quantity<dimensionless>,1.00137841918*dimensionless(),4.6e-10*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_n_over_m_tau,quantity<dimensionless>,0.528740*dimensionless(),8.6e-5*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_n_over_m_tau,quantity<dimensionless>,0.528740*dimensionless(),8.6e-5*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_n,quantity<energy_over_magnetic_flux_density>,-0.96623641e-26*joules\/tesla,2.3e-33*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_n,quantity<energy_over_magnetic_flux_density>,-0.96623641e-26*joules/tesla,2.3e-33*joules/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_n_over_mu_e,quantity<dimensionless>,1.04066882e-3*dimensionless(),2.5e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_n_over_mu_e,quantity<dimensionless>,1.04066882e-3*dimensionless(),2.5e-10*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_n_over_mu_p,quantity<dimensionless>,-0.68497934*dimensionless(),1.6e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_n_over_mu_p,quantity<dimensionless>,-0.68497934*dimensionless(),1.6e-7*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_n_over_mu_p_prime,quantity<dimensionless>,-0.68499694*dimensionless(),1.6e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_n_over_mu_p_prime,quantity<dimensionless>,-0.68499694*dimensionless(),1.6e-7*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(F,quantity<electric_charge_over_amount>,96485.3399*coulombs\/mole,2.4e-3*coulombs\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(F,quantity<electric_charge_over_amount>,96485.3399*coulombs/mole,2.4e-3*coulombs/mole)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(N_A,quantity<inverse_amount>,6.02214179e23\/mole,3.0e16\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(N_A,quantity<inverse_amount>,6.02214179e23/mole,3.0e16/mole)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(R,quantity<energy_over_temperature_amount>,8.314472*joules\/kelvin\/mole,1.5e-5*joules\/kelvin\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(R,quantity<energy_over_temperature_amount>,8.314472*joules/kelvin/mole,1.5e-5*joules/kelvin/mole)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(b,quantity<length_temperature>,2.8977685e-3*meter*kelvin,5.1e-9*meter*kelvin);$/;"	p	namespace:boost::units::si::constants::codata	signature:(b,quantity<length_temperature>,2.8977685e-3*meter*kelvin,5.1e-9*meter*kelvin)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(b_prime,quantity<frequency_over_temperature>,5.878933e10*hertz\/kelvin,1.0e15*hertz\/kelvin);$/;"	p	namespace:boost::units::si::constants::codata	signature:(b_prime,quantity<frequency_over_temperature>,5.878933e10*hertz/kelvin,1.0e15*hertz/kelvin)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(c_1,quantity<power_area>,3.74177118e-16*watt*square_meters,1.9e-23*watt*square_meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(c_1,quantity<power_area>,3.74177118e-16*watt*square_meters,1.9e-23*watt*square_meters)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(c_1L,quantity<power_area_over_solid_angle>,1.191042759e-16*watt*square_meters\/steradian,5.9e-24*watt*square_meters\/steradian);$/;"	p	namespace:boost::units::si::constants::codata	signature:(c_1L,quantity<power_area_over_solid_angle>,1.191042759e-16*watt*square_meters/steradian,5.9e-24*watt*square_meters/steradian)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(c_2,quantity<length_temperature>,1.4387752e-2*meter*kelvin,2.5e-8*meter*kelvin);$/;"	p	namespace:boost::units::si::constants::codata	signature:(c_2,quantity<length_temperature>,1.4387752e-2*meter*kelvin,2.5e-8*meter*kelvin)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(k_B,quantity<energy_over_temperature>,1.3806504e-23*joules\/kelvin,2.4e-29*joules\/kelvin);$/;"	p	namespace:boost::units::si::constants::codata	signature:(k_B,quantity<energy_over_temperature>,1.3806504e-23*joules/kelvin,2.4e-29*joules/kelvin)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_u,quantity<mass>,1.660538782e-27*kilograms,8.3e-35*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_u,quantity<mass>,1.660538782e-27*kilograms,8.3e-35*kilograms)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(sigma_SB,quantity<power_over_area_temperature_4>,5.670400e-8*watts\/square_meter\/pow<4>(kelvin),4.0e-13*watts\/square_meter\/pow<4>(kelvin));$/;"	p	namespace:boost::units::si::constants::codata	signature:(sigma_SB,quantity<power_over_area_temperature_4>,5.670400e-8*watts/square_meter/pow<4>(kelvin),4.0e-13*watts/square_meter/pow<4>(kelvin))
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_p,quantity<mass_over_amount>,1.00727646677e-3*kilograms\/mole,1.0e-13*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_p,quantity<mass_over_amount>,1.00727646677e-3*kilograms/mole,1.0e-13*kilograms/mole)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(R_p,quantity<length>,0.8768e-15*meters,6.9e-18*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(R_p,quantity<length>,0.8768e-15*meters,6.9e-18*meters)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(e_over_m_p,quantity<electric_charge_over_mass>,9.57883392e7*coulombs\/kilogram,2.4e0*coulombs\/kilogram);$/;"	p	namespace:boost::units::si::constants::codata	signature:(e_over_m_p,quantity<electric_charge_over_mass>,9.57883392e7*coulombs/kilogram,2.4e0*coulombs/kilogram)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(g_p,quantity<dimensionless>,5.585694713*dimensionless(),4.6e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(g_p,quantity<dimensionless>,5.585694713*dimensionless(),4.6e-8*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(gamma_p,quantity<frequency_over_magnetic_flux_density>,2.675222099e8\/second\/tesla,7.0e0\/second\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(gamma_p,quantity<frequency_over_magnetic_flux_density>,2.675222099e8/second/tesla,7.0e0/second/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(gamma_p_prime,quantity<frequency_over_magnetic_flux_density>,2.675153362e8\/second\/tesla,7.3e0\/second\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(gamma_p_prime,quantity<frequency_over_magnetic_flux_density>,2.675153362e8/second/tesla,7.3e0/second/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(lambda_C_p,quantity<length>,1.3214098446e-15*meters,1.9e-24*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(lambda_C_p,quantity<length>,1.3214098446e-15*meters,1.9e-24*meters)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_p,quantity<mass>,1.672621637e-27*kilograms,8.3e-35*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_p,quantity<mass>,1.672621637e-27*kilograms,8.3e-35*kilograms)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_p_over_m_e,quantity<dimensionless>,1836.15267247*dimensionless(),8.0e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_p_over_m_e,quantity<dimensionless>,1836.15267247*dimensionless(),8.0e-7*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_p_over_m_mu,quantity<dimensionless>,8.88024339*dimensionless(),2.3e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_p_over_m_mu,quantity<dimensionless>,8.88024339*dimensionless(),2.3e-7*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_p_over_m_n,quantity<dimensionless>,0.99862347824*dimensionless(),4.6e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_p_over_m_n,quantity<dimensionless>,0.99862347824*dimensionless(),4.6e-10*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_p_over_m_tau,quantity<dimensionless>,0.528012*dimensionless(),8.6e-5*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_p_over_m_tau,quantity<dimensionless>,0.528012*dimensionless(),8.6e-5*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p,quantity<energy_over_magnetic_flux_density>,1.410606662e-26*joules\/tesla,3.7e-34*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p,quantity<energy_over_magnetic_flux_density>,1.410606662e-26*joules/tesla,3.7e-34*joules/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p_over_mu_B,quantity<dimensionless>,1.521032209e-3*dimensionless(),1.2e-11*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p_over_mu_B,quantity<dimensionless>,1.521032209e-3*dimensionless(),1.2e-11*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p_over_mu_N,quantity<dimensionless>,2.792847356*dimensionless(),2.3e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p_over_mu_N,quantity<dimensionless>,2.792847356*dimensionless(),2.3e-8*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p_over_mu_n,quantity<dimensionless>,-1.45989806*dimensionless(),3.4e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p_over_mu_n,quantity<dimensionless>,-1.45989806*dimensionless(),3.4e-7*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p_prime,quantity<energy_over_magnetic_flux_density>,1.410570419e-26*joules\/tesla,3.8e-34*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p_prime,quantity<energy_over_magnetic_flux_density>,1.410570419e-26*joules/tesla,3.8e-34*joules/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p_prime_over_mu_B,quantity<dimensionless>,1.520993128e-3*dimensionless(),1.7e-11*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p_prime_over_mu_B,quantity<dimensionless>,1.520993128e-3*dimensionless(),1.7e-11*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p_prime_over_mu_N,quantity<dimensionless>,2.792775598*dimensionless(),3.0e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p_prime_over_mu_N,quantity<dimensionless>,2.792775598*dimensionless(),3.0e-8*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(sigma_p_prime,quantity<dimensionless>,25.694e-6*dimensionless(),1.4e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(sigma_p_prime,quantity<dimensionless>,25.694e-6*dimensionless(),1.4e-8*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_tau,quantity<mass_over_amount>,1.90768e-3*kilograms\/mole,3.1e-7*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_tau,quantity<mass_over_amount>,1.90768e-3*kilograms/mole,3.1e-7*kilograms/mole)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(lambda_C_tau,quantity<length>,0.69772e-15*meters,1.1e-19*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(lambda_C_tau,quantity<length>,0.69772e-15*meters,1.1e-19*meters)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_tau,quantity<mass>,3.16777e-27*kilograms,5.2e-31*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_tau,quantity<mass>,3.16777e-27*kilograms,5.2e-31*kilograms)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_tau_over_m_e,quantity<dimensionless>,3477.48*dimensionless(),5.7e-1*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_tau_over_m_e,quantity<dimensionless>,3477.48*dimensionless(),5.7e-1*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_tau_over_m_mu,quantity<dimensionless>,16.8183*dimensionless(),2.7e-3*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_tau_over_m_mu,quantity<dimensionless>,16.8183*dimensionless(),2.7e-3*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_tau_over_m_n,quantity<dimensionless>,1.89129*dimensionless(),3.1e-4*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_tau_over_m_n,quantity<dimensionless>,1.89129*dimensionless(),3.1e-4*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_tau_over_m_p,quantity<dimensionless>,1.89390*dimensionless(),3.1e-4*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_tau_over_m_p,quantity<dimensionless>,1.89390*dimensionless(),3.1e-4*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_t,quantity<mass_over_amount>,3.0155007134e-3*kilograms\/mole,2.5e-12*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_t,quantity<mass_over_amount>,3.0155007134e-3*kilograms/mole,2.5e-12*kilograms/mole)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(g_t,quantity<dimensionless>,5.957924896*dimensionless(),7.6e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(g_t,quantity<dimensionless>,5.957924896*dimensionless(),7.6e-8*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_t,quantity<mass>,5.00735588e-27*kilograms,2.5e-34*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_t,quantity<mass>,5.00735588e-27*kilograms,2.5e-34*kilograms)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_t_over_m_e,quantity<dimensionless>,5496.9215269*dimensionless(),5.1e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_t_over_m_e,quantity<dimensionless>,5496.9215269*dimensionless(),5.1e-6*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_t_over_m_p,quantity<dimensionless>,2.9937170309*dimensionless(),2.5e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_t_over_m_p,quantity<dimensionless>,2.9937170309*dimensionless(),2.5e-9*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_t,quantity<energy_over_magnetic_flux_density>,1.504609361e-26*joules\/tesla,4.2e-34*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_t,quantity<energy_over_magnetic_flux_density>,1.504609361e-26*joules/tesla,4.2e-34*joules/tesla)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_t_over_mu_B,quantity<dimensionless>,1.622393657e-3*dimensionless(),2.1e-11*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_t_over_mu_B,quantity<dimensionless>,1.622393657e-3*dimensionless(),2.1e-11*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_t_over_mu_N,quantity<dimensionless>,2.978962448*dimensionless(),3.8e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_t_over_mu_N,quantity<dimensionless>,2.978962448*dimensionless(),3.8e-8*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_t_over_mu_e,quantity<dimensionless>,-1.620514423e-3*dimensionless(),2.1e-11*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_t_over_mu_e,quantity<dimensionless>,-1.620514423e-3*dimensionless(),2.1e-11*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_t_over_mu_n,quantity<dimensionless>,-1.55718553*dimensionless(),3.7e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_t_over_mu_n,quantity<dimensionless>,-1.55718553*dimensionless(),3.7e-7*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_t_over_mu_p,quantity<dimensionless>,1.066639908*dimensionless(),1.0e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_t_over_mu_p,quantity<dimensionless>,1.066639908*dimensionless(),1.0e-8*dimensionless())
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(G,quantity<volume_over_mass_time_squared>,6.67428e-11*cubic_meters\/kilogram\/second\/second,6.7e-15*cubic_meters\/kilogram\/second\/second);$/;"	p	namespace:boost::units::si::constants::codata	signature:(G,quantity<volume_over_mass_time_squared>,6.67428e-11*cubic_meters/kilogram/second/second,6.7e-15*cubic_meters/kilogram/second/second)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(T_P,quantity<temperature>,1.416785e32*kelvin,7.1e27*kelvin);$/;"	p	namespace:boost::units::si::constants::codata	signature:(T_P,quantity<temperature>,1.416785e32*kelvin,7.1e27*kelvin)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(Z_0,quantity<resistance>,376.7303134617706554681984004203193082686*ohm,0.0*ohm);$/;"	p	namespace:boost::units::si::constants::codata	signature:(Z_0,quantity<resistance>,376.7303134617706554681984004203193082686*ohm,0.0*ohm)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(c,quantity<velocity>,299792458.0*meters\/second,0.0*meters\/second);$/;"	p	namespace:boost::units::si::constants::codata	signature:(c,quantity<velocity>,299792458.0*meters/second,0.0*meters/second)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(epsilon_0,quantity<capacitance_over_length>,8.854187817620389850536563031710750260608e-12*farad\/meter,0.0*farad\/meter);$/;"	p	namespace:boost::units::si::constants::codata	signature:(epsilon_0,quantity<capacitance_over_length>,8.854187817620389850536563031710750260608e-12*farad/meter,0.0*farad/meter)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(h,quantity<energy_time>,6.62606896e-34*joule*seconds,3.3e-41*joule*seconds);$/;"	p	namespace:boost::units::si::constants::codata	signature:(h,quantity<energy_time>,6.62606896e-34*joule*seconds,3.3e-41*joule*seconds)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(hbar,quantity<energy_time>,1.054571628e-34*joule*seconds,5.3e-42*joule*seconds);$/;"	p	namespace:boost::units::si::constants::codata	signature:(hbar,quantity<energy_time>,1.054571628e-34*joule*seconds,5.3e-42*joule*seconds)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(l_P,quantity<length>,1.616252e-35*meters,8.1e-40*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(l_P,quantity<length>,1.616252e-35*meters,8.1e-40*meters)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_P,quantity<mass>,2.17644e-8*kilograms,1.1e-12*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_P,quantity<mass>,2.17644e-8*kilograms,1.1e-12*kilograms)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_0,quantity<force_over_current_squared>,12.56637061435917295385057353311801153679e-7*newtons\/ampere\/ampere,0.0*newtons\/ampere\/ampere);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_0,quantity<force_over_current_squared>,12.56637061435917295385057353311801153679e-7*newtons/ampere/ampere,0.0*newtons/ampere/ampere)
BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(t_P,quantity<time>,5.39124e-44*seconds,2.7e-48*seconds);$/;"	p	namespace:boost::units::si::constants::codata	signature:(t_P,quantity<time>,5.39124e-44*seconds,2.7e-48*seconds)
BOOST_UNITS_PHYSICAL_UNITS_HPP	/usr/include/boost/units/physical_dimensions.hpp	12;"	d
BOOST_UNITS_PLANE_ANGLE_BASE_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/plane_angle.hpp	12;"	d
BOOST_UNITS_POWER_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/power.hpp	12;"	d
BOOST_UNITS_POW_HPP	/usr/include/boost/units/pow.hpp	12;"	d
BOOST_UNITS_PRESSURE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/pressure.hpp	12;"	d
BOOST_UNITS_QUANTITY_HPP	/usr/include/boost/units/quantity.hpp	12;"	d
BOOST_UNITS_REDUCE_UNIT_HPP_INCLUDED	/usr/include/boost/units/reduce_unit.hpp	12;"	d
BOOST_UNITS_RELUCTANCE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/reluctance.hpp	12;"	d
BOOST_UNITS_REQUIRE_LAYOUT_COMPATIBILITY	/usr/include/boost/units/config.hpp	92;"	d
BOOST_UNITS_RESISTANCE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/resistance.hpp	12;"	d
BOOST_UNITS_RESISTIVITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/resistivity.hpp	12;"	d
BOOST_UNITS_SCALED_BASE_UNIT_HPP_INCLUDED	/usr/include/boost/units/scaled_base_unit.hpp	12;"	d
BOOST_UNITS_SCALE_DEF	/usr/include/boost/units/scale.hpp	126;"	d
BOOST_UNITS_SCALE_DEF	/usr/include/boost/units/scale.hpp	94;"	d
BOOST_UNITS_SCALE_HPP_INCLUDED	/usr/include/boost/units/scale.hpp	12;"	d
BOOST_UNITS_SCALE_SPECIALIZATION	/usr/include/boost/units/scale.hpp	127;"	d
BOOST_UNITS_SCALE_SPECIALIZATION	/usr/include/boost/units/scale.hpp	82;"	d
BOOST_UNITS_SI_ABSORBED_DOSE_HPP	/usr/include/boost/units/systems/si/absorbed_dose.hpp	12;"	d
BOOST_UNITS_SI_ACCELERATION_HPP	/usr/include/boost/units/systems/si/acceleration.hpp	12;"	d
BOOST_UNITS_SI_ACTION_HPP	/usr/include/boost/units/systems/si/action.hpp	12;"	d
BOOST_UNITS_SI_ACTIVITY_HPP	/usr/include/boost/units/systems/si/activity.hpp	12;"	d
BOOST_UNITS_SI_AMOUNT_HPP	/usr/include/boost/units/systems/si/amount.hpp	12;"	d
BOOST_UNITS_SI_AMPERE_BASE_UNIT_HPP	/usr/include/boost/units/base_units/si/ampere.hpp	12;"	d
BOOST_UNITS_SI_ANGULAR_ACCELERATION_HPP	/usr/include/boost/units/systems/si/angular_acceleration.hpp	12;"	d
BOOST_UNITS_SI_ANGULAR_MOMENTUM_HPP	/usr/include/boost/units/systems/si/angular_momentum.hpp	12;"	d
BOOST_UNITS_SI_ANGULAR_VELOCITY_HPP	/usr/include/boost/units/systems/si/angular_velocity.hpp	12;"	d
BOOST_UNITS_SI_AREA_HPP	/usr/include/boost/units/systems/si/area.hpp	12;"	d
BOOST_UNITS_SI_BASE_HPP	/usr/include/boost/units/systems/si/base.hpp	12;"	d
BOOST_UNITS_SI_CANDELA_BASE_UNIT_HPP	/usr/include/boost/units/base_units/si/candela.hpp	12;"	d
BOOST_UNITS_SI_CAPACITANCE_HPP	/usr/include/boost/units/systems/si/capacitance.hpp	12;"	d
BOOST_UNITS_SI_CATALYTIC_ACTIVITY_HPP	/usr/include/boost/units/systems/si/catalytic_activity.hpp	12;"	d
BOOST_UNITS_SI_CONDUCTANCE_HPP	/usr/include/boost/units/systems/si/conductance.hpp	12;"	d
BOOST_UNITS_SI_CONDUCTIVITY_HPP	/usr/include/boost/units/systems/si/conductivity.hpp	12;"	d
BOOST_UNITS_SI_CURRENT_HPP	/usr/include/boost/units/systems/si/current.hpp	12;"	d
BOOST_UNITS_SI_DIMENSIONLESS_HPP	/usr/include/boost/units/systems/si/dimensionless.hpp	12;"	d
BOOST_UNITS_SI_DOSE_EQUIVALENT_HPP	/usr/include/boost/units/systems/si/dose_equivalent.hpp	12;"	d
BOOST_UNITS_SI_DYNAMIC_VISCOSITY_HPP	/usr/include/boost/units/systems/si/dynamic_viscosity.hpp	12;"	d
BOOST_UNITS_SI_ELECTRIC_CHARGE_HPP	/usr/include/boost/units/systems/si/electric_charge.hpp	12;"	d
BOOST_UNITS_SI_ELECTRIC_POTENTIAL_HPP	/usr/include/boost/units/systems/si/electric_potential.hpp	12;"	d
BOOST_UNITS_SI_ENERGY_HPP	/usr/include/boost/units/systems/si/energy.hpp	12;"	d
BOOST_UNITS_SI_FORCE_HPP	/usr/include/boost/units/systems/si/force.hpp	12;"	d
BOOST_UNITS_SI_FREQUENCY_HPP	/usr/include/boost/units/systems/si/frequency.hpp	12;"	d
BOOST_UNITS_SI_HPP	/usr/include/boost/units/systems/si.hpp	12;"	d
BOOST_UNITS_SI_ILLUMINANCE_HPP	/usr/include/boost/units/systems/si/illuminance.hpp	12;"	d
BOOST_UNITS_SI_IMPEDANCE_HPP	/usr/include/boost/units/systems/si/impedance.hpp	12;"	d
BOOST_UNITS_SI_INDUCTANCE_HPP	/usr/include/boost/units/systems/si/inductance.hpp	12;"	d
BOOST_UNITS_SI_IO_HPP	/usr/include/boost/units/systems/si/io.hpp	12;"	d
BOOST_UNITS_SI_KELVIN_BASE_UNIT_HPP	/usr/include/boost/units/base_units/si/kelvin.hpp	12;"	d
BOOST_UNITS_SI_KILOGRAM_BASE_UNIT_HPP	/usr/include/boost/units/base_units/si/kilogram.hpp	12;"	d
BOOST_UNITS_SI_KINEMATIC_VISCOSITY_HPP	/usr/include/boost/units/systems/si/kinematic_viscosity.hpp	12;"	d
BOOST_UNITS_SI_LENGTH_HPP	/usr/include/boost/units/systems/si/length.hpp	12;"	d
BOOST_UNITS_SI_LUMINOUS_FLUX_HPP	/usr/include/boost/units/systems/si/luminous_flux.hpp	12;"	d
BOOST_UNITS_SI_LUMINOUS_INTENSITY_HPP	/usr/include/boost/units/systems/si/luminous_intensity.hpp	12;"	d
BOOST_UNITS_SI_MAGNETIC_FIELD_INTENSITY_HPP	/usr/include/boost/units/systems/si/magnetic_field_intensity.hpp	12;"	d
BOOST_UNITS_SI_MAGNETIC_FLUX_DENSITY_HPP	/usr/include/boost/units/systems/si/magnetic_flux_density.hpp	12;"	d
BOOST_UNITS_SI_MAGNETIC_FLUX_HPP	/usr/include/boost/units/systems/si/magnetic_flux.hpp	12;"	d
BOOST_UNITS_SI_MASS_DENSITY_HPP	/usr/include/boost/units/systems/si/mass_density.hpp	12;"	d
BOOST_UNITS_SI_MASS_HPP	/usr/include/boost/units/systems/si/mass.hpp	12;"	d
BOOST_UNITS_SI_METER_BASE_UNIT_HPP	/usr/include/boost/units/base_units/si/meter.hpp	12;"	d
BOOST_UNITS_SI_MOLE_BASE_UNIT_HPP	/usr/include/boost/units/base_units/si/mole.hpp	12;"	d
BOOST_UNITS_SI_MOMENTUM_HPP	/usr/include/boost/units/systems/si/momentum.hpp	12;"	d
BOOST_UNITS_SI_MOMENT_OF_INERTIA_HPP	/usr/include/boost/units/systems/si/moment_of_inertia.hpp	12;"	d
BOOST_UNITS_SI_PERMEABILITY_HPP	/usr/include/boost/units/systems/si/permeability.hpp	12;"	d
BOOST_UNITS_SI_PERMITTIVITY_HPP	/usr/include/boost/units/systems/si/permittivity.hpp	12;"	d
BOOST_UNITS_SI_PLANE_ANGLE_HPP	/usr/include/boost/units/systems/si/plane_angle.hpp	12;"	d
BOOST_UNITS_SI_POWER_HPP	/usr/include/boost/units/systems/si/power.hpp	12;"	d
BOOST_UNITS_SI_PREFIXES_HPP	/usr/include/boost/units/systems/si/prefixes.hpp	12;"	d
BOOST_UNITS_SI_PRESSURE_HPP	/usr/include/boost/units/systems/si/pressure.hpp	12;"	d
BOOST_UNITS_SI_RELUCTANCE_HPP	/usr/include/boost/units/systems/si/reluctance.hpp	12;"	d
BOOST_UNITS_SI_RESISTANCE_HPP	/usr/include/boost/units/systems/si/resistance.hpp	12;"	d
BOOST_UNITS_SI_RESISTIVITY_HPP	/usr/include/boost/units/systems/si/resistivity.hpp	12;"	d
BOOST_UNITS_SI_SECOND_BASE_UNIT_HPP	/usr/include/boost/units/base_units/si/second.hpp	12;"	d
BOOST_UNITS_SI_SOLID_ANGLE_HPP	/usr/include/boost/units/systems/si/solid_angle.hpp	12;"	d
BOOST_UNITS_SI_SURFACE_DENSITY_HPP	/usr/include/boost/units/systems/si/surface_density.hpp	12;"	d
BOOST_UNITS_SI_SURFACE_TENSION_HPP	/usr/include/boost/units/systems/si/surface_tension.hpp	12;"	d
BOOST_UNITS_SI_TEMPERATURE_HPP	/usr/include/boost/units/systems/si/temperature.hpp	12;"	d
BOOST_UNITS_SI_TIME_HPP	/usr/include/boost/units/systems/si/time.hpp	12;"	d
BOOST_UNITS_SI_TORQUE_HPP	/usr/include/boost/units/systems/si/torque.hpp	12;"	d
BOOST_UNITS_SI_VELOCITY_HPP	/usr/include/boost/units/systems/si/velocity.hpp	12;"	d
BOOST_UNITS_SI_VOLUME_HPP	/usr/include/boost/units/systems/si/volume.hpp	12;"	d
BOOST_UNITS_SI_WAVENUMBER_HPP	/usr/include/boost/units/systems/si/wavenumber.hpp	12;"	d
BOOST_UNITS_SOLID_ANGLE_BASE_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/solid_angle.hpp	12;"	d
BOOST_UNITS_SPECIFIC_ENERGY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/specific_energy.hpp	12;"	d
BOOST_UNITS_SPECIFIC_HEAT_CAPACITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/specific_heat_capacity.hpp	12;"	d
BOOST_UNITS_SPECIFIC_VOLUME_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/specific_volume.hpp	12;"	d
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/static_constant.hpp	18;"	d
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/angle/degrees.hpp	/^BOOST_UNITS_STATIC_CONSTANT(degree,plane_angle);$/;"	p	namespace:boost::units::degree	signature:(degree,plane_angle)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/angle/degrees.hpp	/^BOOST_UNITS_STATIC_CONSTANT(degrees,plane_angle);$/;"	p	namespace:boost::units::degree	signature:(degrees,plane_angle)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/angle/gradians.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gradian,plane_angle);$/;"	p	namespace:boost::units::gradian	signature:(gradian,plane_angle)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/angle/gradians.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gradians,plane_angle);$/;"	p	namespace:boost::units::gradian	signature:(gradians,plane_angle)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/angle/revolutions.hpp	/^BOOST_UNITS_STATIC_CONSTANT(revolution,plane_angle);$/;"	p	namespace:boost::units::revolution	signature:(revolution,plane_angle)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/angle/revolutions.hpp	/^BOOST_UNITS_STATIC_CONSTANT(revolutions,plane_angle);$/;"	p	namespace:boost::units::revolution	signature:(revolutions,plane_angle)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/acceleration.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gal,acceleration);  $/;"	p	namespace:boost::units::cgs	signature:(gal,acceleration)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/acceleration.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gals,acceleration); $/;"	p	namespace:boost::units::cgs	signature:(gals,acceleration)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_centimeter,area);$/;"	p	namespace:boost::units::cgs	signature:(square_centimeter,area)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_centimeters,area);$/;"	p	namespace:boost::units::cgs	signature:(square_centimeters,area)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_centimetre,area);$/;"	p	namespace:boost::units::cgs	signature:(square_centimetre,area)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_centimetres,area);$/;"	p	namespace:boost::units::cgs	signature:(square_centimetres,area)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/current.hpp	/^BOOST_UNITS_STATIC_CONSTANT(biot,current);$/;"	p	namespace:boost::units::cgs	signature:(biot,current)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/current.hpp	/^BOOST_UNITS_STATIC_CONSTANT(biots,current);$/;"	p	namespace:boost::units::cgs	signature:(biots,current)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/dimensionless.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cgs_dimensionless,dimensionless);$/;"	p	namespace:boost::units::cgs	signature:(cgs_dimensionless,dimensionless)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/dynamic_viscosity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(poise,dynamic_viscosity);    $/;"	p	namespace:boost::units::cgs	signature:(poise,dynamic_viscosity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/energy.hpp	/^BOOST_UNITS_STATIC_CONSTANT(erg,energy);$/;"	p	namespace:boost::units::cgs	signature:(erg,energy)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/energy.hpp	/^BOOST_UNITS_STATIC_CONSTANT(ergs,energy);$/;"	p	namespace:boost::units::cgs	signature:(ergs,energy)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/force.hpp	/^BOOST_UNITS_STATIC_CONSTANT(dyne,force);$/;"	p	namespace:boost::units::cgs	signature:(dyne,force)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/force.hpp	/^BOOST_UNITS_STATIC_CONSTANT(dynes,force);$/;"	p	namespace:boost::units::cgs	signature:(dynes,force)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/kinematic_viscosity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(stoke,kinematic_viscosity);           $/;"	p	namespace:boost::units::cgs	signature:(stoke,kinematic_viscosity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/kinematic_viscosity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(stokes,kinematic_viscosity);    $/;"	p	namespace:boost::units::cgs	signature:(stokes,kinematic_viscosity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimeter,length); $/;"	p	namespace:boost::units::cgs	signature:(centimeter,length)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimeters,length);    $/;"	p	namespace:boost::units::cgs	signature:(centimeters,length)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimetre,length); $/;"	p	namespace:boost::units::cgs	signature:(centimetre,length)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimetres,length);    $/;"	p	namespace:boost::units::cgs	signature:(centimetres,length)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gram,mass); $/;"	p	namespace:boost::units::cgs	signature:(gram,mass)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gramme,mass);   $/;"	p	namespace:boost::units::cgs	signature:(gramme,mass)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(grammes,mass);  $/;"	p	namespace:boost::units::cgs	signature:(grammes,mass)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(grams,mass);    $/;"	p	namespace:boost::units::cgs	signature:(grams,mass)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/pressure.hpp	/^BOOST_UNITS_STATIC_CONSTANT(barye,pressure);    $/;"	p	namespace:boost::units::cgs	signature:(barye,pressure)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/pressure.hpp	/^BOOST_UNITS_STATIC_CONSTANT(baryes,pressure);   $/;"	p	namespace:boost::units::cgs	signature:(baryes,pressure)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/time.hpp	/^BOOST_UNITS_STATIC_CONSTANT(second,time);   $/;"	p	namespace:boost::units::cgs	signature:(second,time)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/time.hpp	/^BOOST_UNITS_STATIC_CONSTANT(seconds,time);  $/;"	p	namespace:boost::units::cgs	signature:(seconds,time)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimeter_per_second,velocity);    $/;"	p	namespace:boost::units::cgs	signature:(centimeter_per_second,velocity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimeters_per_second,velocity);   $/;"	p	namespace:boost::units::cgs	signature:(centimeters_per_second,velocity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimetre_per_second,velocity);    $/;"	p	namespace:boost::units::cgs	signature:(centimetre_per_second,velocity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimetres_per_second,velocity);   $/;"	p	namespace:boost::units::cgs	signature:(centimetres_per_second,velocity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_centimeter,volume);   $/;"	p	namespace:boost::units::cgs	signature:(cubic_centimeter,volume)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_centimeters,volume);  $/;"	p	namespace:boost::units::cgs	signature:(cubic_centimeters,volume)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_centimetre,volume);   $/;"	p	namespace:boost::units::cgs	signature:(cubic_centimetre,volume)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_centimetres,volume);  $/;"	p	namespace:boost::units::cgs	signature:(cubic_centimetres,volume)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kayser,wavenumber); $/;"	p	namespace:boost::units::cgs	signature:(kayser,wavenumber)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kaysers,wavenumber);    $/;"	p	namespace:boost::units::cgs	signature:(kaysers,wavenumber)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_centimeter,wavenumber);  $/;"	p	namespace:boost::units::cgs	signature:(reciprocal_centimeter,wavenumber)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_centimeters,wavenumber); $/;"	p	namespace:boost::units::cgs	signature:(reciprocal_centimeters,wavenumber)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_centimetre,wavenumber);  $/;"	p	namespace:boost::units::cgs	signature:(reciprocal_centimetre,wavenumber)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_centimetres,wavenumber); $/;"	p	namespace:boost::units::cgs	signature:(reciprocal_centimetres,wavenumber)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/absorbed_dose.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gray,absorbed_dose);  $/;"	p	namespace:boost::units::si	signature:(gray,absorbed_dose)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/absorbed_dose.hpp	/^BOOST_UNITS_STATIC_CONSTANT(grays,absorbed_dose); $/;"	p	namespace:boost::units::si	signature:(grays,absorbed_dose)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/acceleration.hpp	/^BOOST_UNITS_STATIC_CONSTANT(meter_per_second_squared,acceleration);$/;"	p	namespace:boost::units::si	signature:(meter_per_second_squared,acceleration)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/acceleration.hpp	/^BOOST_UNITS_STATIC_CONSTANT(meters_per_second_squared,acceleration);$/;"	p	namespace:boost::units::si	signature:(meters_per_second_squared,acceleration)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/acceleration.hpp	/^BOOST_UNITS_STATIC_CONSTANT(metre_per_second_squared,acceleration);$/;"	p	namespace:boost::units::si	signature:(metre_per_second_squared,acceleration)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/acceleration.hpp	/^BOOST_UNITS_STATIC_CONSTANT(metres_per_second_squared,acceleration);$/;"	p	namespace:boost::units::si	signature:(metres_per_second_squared,acceleration)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/activity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(becquerel,activity);$/;"	p	namespace:boost::units::si	signature:(becquerel,activity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/activity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(becquerels,activity);$/;"	p	namespace:boost::units::si	signature:(becquerels,activity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/amount.hpp	/^BOOST_UNITS_STATIC_CONSTANT(mole,amount);$/;"	p	namespace:boost::units::si	signature:(mole,amount)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/amount.hpp	/^BOOST_UNITS_STATIC_CONSTANT(moles,amount);$/;"	p	namespace:boost::units::si	signature:(moles,amount)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/angular_velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(radian_per_second,angular_velocity); $/;"	p	namespace:boost::units::si	signature:(radian_per_second,angular_velocity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/angular_velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(radians_per_second,angular_velocity);    $/;"	p	namespace:boost::units::si	signature:(radians_per_second,angular_velocity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_meter,area);$/;"	p	namespace:boost::units::si	signature:(square_meter,area)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_meters,area);$/;"	p	namespace:boost::units::si	signature:(square_meters,area)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_metre,area);$/;"	p	namespace:boost::units::si	signature:(square_metre,area)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_metres,area);$/;"	p	namespace:boost::units::si	signature:(square_metres,area)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/capacitance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(farad,capacitance);$/;"	p	namespace:boost::units::si	signature:(farad,capacitance)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/capacitance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(farads,capacitance);$/;"	p	namespace:boost::units::si	signature:(farads,capacitance)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(katal,catalytic_activity);$/;"	p	namespace:boost::units::si	signature:(katal,catalytic_activity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(katals,catalytic_activity);$/;"	p	namespace:boost::units::si	signature:(katals,catalytic_activity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/conductance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(mho,conductance);   $/;"	p	namespace:boost::units::si	signature:(mho,conductance)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/conductance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(mhos,conductance);  $/;"	p	namespace:boost::units::si	signature:(mhos,conductance)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/conductance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(siemen,conductance);    $/;"	p	namespace:boost::units::si	signature:(siemen,conductance)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/conductance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(siemens,conductance);   $/;"	p	namespace:boost::units::si	signature:(siemens,conductance)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/current.hpp	/^BOOST_UNITS_STATIC_CONSTANT(ampere,current);$/;"	p	namespace:boost::units::si	signature:(ampere,current)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/current.hpp	/^BOOST_UNITS_STATIC_CONSTANT(amperes,current);$/;"	p	namespace:boost::units::si	signature:(amperes,current)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/dimensionless.hpp	/^BOOST_UNITS_STATIC_CONSTANT(si_dimensionless,dimensionless);$/;"	p	namespace:boost::units::si	signature:(si_dimensionless,dimensionless)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/dose_equivalent.hpp	/^BOOST_UNITS_STATIC_CONSTANT(sievert,dose_equivalent);  $/;"	p	namespace:boost::units::si	signature:(sievert,dose_equivalent)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/dose_equivalent.hpp	/^BOOST_UNITS_STATIC_CONSTANT(sieverts,dose_equivalent); $/;"	p	namespace:boost::units::si	signature:(sieverts,dose_equivalent)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/electric_charge.hpp	/^BOOST_UNITS_STATIC_CONSTANT(coulomb,electric_charge);   $/;"	p	namespace:boost::units::si	signature:(coulomb,electric_charge)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/electric_charge.hpp	/^BOOST_UNITS_STATIC_CONSTANT(coulombs,electric_charge);  $/;"	p	namespace:boost::units::si	signature:(coulombs,electric_charge)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/electric_potential.hpp	/^BOOST_UNITS_STATIC_CONSTANT(volt,electric_potential);   $/;"	p	namespace:boost::units::si	signature:(volt,electric_potential)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/electric_potential.hpp	/^BOOST_UNITS_STATIC_CONSTANT(volts,electric_potential);  $/;"	p	namespace:boost::units::si	signature:(volts,electric_potential)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/energy.hpp	/^BOOST_UNITS_STATIC_CONSTANT(joule,energy);  $/;"	p	namespace:boost::units::si	signature:(joule,energy)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/energy.hpp	/^BOOST_UNITS_STATIC_CONSTANT(joules,energy); $/;"	p	namespace:boost::units::si	signature:(joules,energy)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/force.hpp	/^BOOST_UNITS_STATIC_CONSTANT(newton,force);  $/;"	p	namespace:boost::units::si	signature:(newton,force)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/force.hpp	/^BOOST_UNITS_STATIC_CONSTANT(newtons,force); $/;"	p	namespace:boost::units::si	signature:(newtons,force)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/frequency.hpp	/^BOOST_UNITS_STATIC_CONSTANT(hertz,frequency);   $/;"	p	namespace:boost::units::si	signature:(hertz,frequency)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/illuminance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(lux,illuminance); $/;"	p	namespace:boost::units::si	signature:(lux,illuminance)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/inductance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(henry,inductance);  $/;"	p	namespace:boost::units::si	signature:(henry,inductance)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/inductance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(henrys,inductance); $/;"	p	namespace:boost::units::si	signature:(henrys,inductance)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(meter,length);  $/;"	p	namespace:boost::units::si	signature:(meter,length)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(meters,length); $/;"	p	namespace:boost::units::si	signature:(meters,length)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(metre,length);  $/;"	p	namespace:boost::units::si	signature:(metre,length)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(metres,length); $/;"	p	namespace:boost::units::si	signature:(metres,length)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/luminous_flux.hpp	/^BOOST_UNITS_STATIC_CONSTANT(lumen,luminous_flux); $/;"	p	namespace:boost::units::si	signature:(lumen,luminous_flux)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/luminous_flux.hpp	/^BOOST_UNITS_STATIC_CONSTANT(lumens,luminous_flux);    $/;"	p	namespace:boost::units::si	signature:(lumens,luminous_flux)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/luminous_intensity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(candela,luminous_intensity); $/;"	p	namespace:boost::units::si	signature:(candela,luminous_intensity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/luminous_intensity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(candelas,luminous_intensity);    $/;"	p	namespace:boost::units::si	signature:(candelas,luminous_intensity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/magnetic_flux.hpp	/^BOOST_UNITS_STATIC_CONSTANT(weber,magnetic_flux);   $/;"	p	namespace:boost::units::si	signature:(weber,magnetic_flux)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/magnetic_flux.hpp	/^BOOST_UNITS_STATIC_CONSTANT(webers,magnetic_flux);  $/;"	p	namespace:boost::units::si	signature:(webers,magnetic_flux)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/magnetic_flux_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(tesla,magnetic_flux_density);   $/;"	p	namespace:boost::units::si	signature:(tesla,magnetic_flux_density)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/magnetic_flux_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(teslas,magnetic_flux_density);  $/;"	p	namespace:boost::units::si	signature:(teslas,magnetic_flux_density)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogram,mass); $/;"	p	namespace:boost::units::si	signature:(kilogram,mass)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogramme,mass);   $/;"	p	namespace:boost::units::si	signature:(kilogramme,mass)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogrammes,mass);  $/;"	p	namespace:boost::units::si	signature:(kilogrammes,mass)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilograms,mass);    $/;"	p	namespace:boost::units::si	signature:(kilograms,mass)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogram_per_cubic_meter,mass_density);$/;"	p	namespace:boost::units::si	signature:(kilogram_per_cubic_meter,mass_density)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogramme_per_cubic_metre,mass_density);$/;"	p	namespace:boost::units::si	signature:(kilogramme_per_cubic_metre,mass_density)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogrammes_per_cubic_metre,mass_density);$/;"	p	namespace:boost::units::si	signature:(kilogrammes_per_cubic_metre,mass_density)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilograms_per_cubic_meter,mass_density);$/;"	p	namespace:boost::units::si	signature:(kilograms_per_cubic_meter,mass_density)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/plane_angle.hpp	/^BOOST_UNITS_STATIC_CONSTANT(radian,plane_angle); $/;"	p	namespace:boost::units::si	signature:(radian,plane_angle)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/plane_angle.hpp	/^BOOST_UNITS_STATIC_CONSTANT(radians,plane_angle);    $/;"	p	namespace:boost::units::si	signature:(radians,plane_angle)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/power.hpp	/^BOOST_UNITS_STATIC_CONSTANT(watt,power);    $/;"	p	namespace:boost::units::si	signature:(watt,power)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/power.hpp	/^BOOST_UNITS_STATIC_CONSTANT(watts,power);   $/;"	p	namespace:boost::units::si	signature:(watts,power)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/pressure.hpp	/^BOOST_UNITS_STATIC_CONSTANT(pascal,pressure);   $/;"	p	namespace:boost::units::si	signature:(pascal,pressure)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/pressure.hpp	/^BOOST_UNITS_STATIC_CONSTANT(pascals,pressure);  $/;"	p	namespace:boost::units::si	signature:(pascals,pressure)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/resistance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(ohm,resistance);    $/;"	p	namespace:boost::units::si	signature:(ohm,resistance)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/resistance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(ohms,resistance);   $/;"	p	namespace:boost::units::si	signature:(ohms,resistance)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/solid_angle.hpp	/^BOOST_UNITS_STATIC_CONSTANT(steradian,solid_angle); $/;"	p	namespace:boost::units::si	signature:(steradian,solid_angle)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/solid_angle.hpp	/^BOOST_UNITS_STATIC_CONSTANT(steradians,solid_angle);    $/;"	p	namespace:boost::units::si	signature:(steradians,solid_angle)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/surface_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogram_per_square_meter,surface_density);$/;"	p	namespace:boost::units::si	signature:(kilogram_per_square_meter,surface_density)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/surface_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogramme_per_square_metre,surface_density);$/;"	p	namespace:boost::units::si	signature:(kilogramme_per_square_metre,surface_density)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/surface_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogrammes_per_square_metre,surface_density);$/;"	p	namespace:boost::units::si	signature:(kilogrammes_per_square_metre,surface_density)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/surface_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilograms_per_square_meter,surface_density);$/;"	p	namespace:boost::units::si	signature:(kilograms_per_square_meter,surface_density)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/surface_tension.hpp	/^BOOST_UNITS_STATIC_CONSTANT(newton_per_meter,surface_tension);  $/;"	p	namespace:boost::units::si	signature:(newton_per_meter,surface_tension)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/surface_tension.hpp	/^BOOST_UNITS_STATIC_CONSTANT(newtons_per_meter,surface_tension); $/;"	p	namespace:boost::units::si	signature:(newtons_per_meter,surface_tension)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/temperature.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kelvin,temperature);    $/;"	p	namespace:boost::units::si	signature:(kelvin,temperature)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/temperature.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kelvins,temperature);   $/;"	p	namespace:boost::units::si	signature:(kelvins,temperature)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/time.hpp	/^BOOST_UNITS_STATIC_CONSTANT(second,time);   $/;"	p	namespace:boost::units::si	signature:(second,time)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/time.hpp	/^BOOST_UNITS_STATIC_CONSTANT(seconds,time);  $/;"	p	namespace:boost::units::si	signature:(seconds,time)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/torque.hpp	/^BOOST_UNITS_STATIC_CONSTANT(newton_meter,torque);  $/;"	p	namespace:boost::units::si	signature:(newton_meter,torque)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/torque.hpp	/^BOOST_UNITS_STATIC_CONSTANT(newton_meters,torque); $/;"	p	namespace:boost::units::si	signature:(newton_meters,torque)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(meter_per_second,velocity); $/;"	p	namespace:boost::units::si	signature:(meter_per_second,velocity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(meters_per_second,velocity);    $/;"	p	namespace:boost::units::si	signature:(meters_per_second,velocity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(metre_per_second,velocity); $/;"	p	namespace:boost::units::si	signature:(metre_per_second,velocity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(metres_per_second,velocity);    $/;"	p	namespace:boost::units::si	signature:(metres_per_second,velocity)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_meter,volume);    $/;"	p	namespace:boost::units::si	signature:(cubic_meter,volume)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_meters,volume);   $/;"	p	namespace:boost::units::si	signature:(cubic_meters,volume)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_metre,volume);    $/;"	p	namespace:boost::units::si	signature:(cubic_metre,volume)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_metres,volume);   $/;"	p	namespace:boost::units::si	signature:(cubic_metres,volume)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_meter,wavenumber);   $/;"	p	namespace:boost::units::si	signature:(reciprocal_meter,wavenumber)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_meters,wavenumber);  $/;"	p	namespace:boost::units::si	signature:(reciprocal_meters,wavenumber)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_metre,wavenumber);   $/;"	p	namespace:boost::units::si	signature:(reciprocal_metre,wavenumber)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_metres,wavenumber);  $/;"	p	namespace:boost::units::si	signature:(reciprocal_metres,wavenumber)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/temperature/celsius.hpp	/^BOOST_UNITS_STATIC_CONSTANT(degree,temperature);$/;"	p	namespace:boost::units::celsius	signature:(degree,temperature)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/temperature/celsius.hpp	/^BOOST_UNITS_STATIC_CONSTANT(degrees,temperature);$/;"	p	namespace:boost::units::celsius	signature:(degrees,temperature)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^BOOST_UNITS_STATIC_CONSTANT(degree,temperature);$/;"	p	namespace:boost::units::fahrenheit	signature:(degree,temperature)
BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^BOOST_UNITS_STATIC_CONSTANT(degrees,temperature);$/;"	p	namespace:boost::units::fahrenheit	signature:(degrees,temperature)
BOOST_UNITS_STATIC_CONSTANT_HPP	/usr/include/boost/units/static_constant.hpp	12;"	d
BOOST_UNITS_STATIC_RATIONAL_HPP	/usr/include/boost/units/static_rational.hpp	12;"	d
BOOST_UNITS_STRESS_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/stress.hpp	12;"	d
BOOST_UNITS_SURFACE_DENSITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/surface_density.hpp	12;"	d
BOOST_UNITS_SURFACE_TENSION_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/surface_tension.hpp	12;"	d
BOOST_UNITS_SYSTEMS_CELSUIS_TO_FAHRENHEIT_CONVERSION_DEFINED	/usr/include/boost/units/base_units/temperature/conversions.hpp	36;"	d
BOOST_UNITS_SYSTEMS_IMPERIAL_YARD_BASE_UNIT_HPP	/usr/include/boost/units/base_units/imperial/yard.hpp	12;"	d
BOOST_UNITS_SYSTEMS_KELVIN_TO_CELSIUS_CONVERSION_DEFINED	/usr/include/boost/units/base_units/temperature/conversions.hpp	18;"	d
BOOST_UNITS_SYSTEMS_KELVIN_TO_FAHRENHEIT_CONVERSION_DEFINED	/usr/include/boost/units/base_units/temperature/conversions.hpp	27;"	d
BOOST_UNITS_SYSTEMS_US_YARD_BASE_UNIT_HPP	/usr/include/boost/units/base_units/us/yard.hpp	12;"	d
BOOST_UNITS_TEMPERATURE_BASE_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/temperature.hpp	12;"	d
BOOST_UNITS_TEMPERATURE_CELSIUS_BASE_UNIT_HPP	/usr/include/boost/units/base_units/temperature/celsius.hpp	12;"	d
BOOST_UNITS_TEMPERATURE_CELSIUS_HPP	/usr/include/boost/units/systems/temperature/celsius.hpp	12;"	d
BOOST_UNITS_TEMPERATURE_FAHRENHEIT_BASE_UNIT_HPP	/usr/include/boost/units/base_units/temperature/fahrenheit.hpp	12;"	d
BOOST_UNITS_TEMPERATURE_FAHRENHEIT_HPP	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	12;"	d
BOOST_UNITS_THERMAL_CONDUCTIVITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/thermal_conductivity.hpp	12;"	d
BOOST_UNITS_TIME_BASE_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/time.hpp	12;"	d
BOOST_UNITS_TORQUE_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/torque.hpp	12;"	d
BOOST_UNITS_UNITS_FWD_HPP	/usr/include/boost/units/units_fwd.hpp	12;"	d
BOOST_UNITS_UNIT_HPP	/usr/include/boost/units/unit.hpp	12;"	d
BOOST_UNITS_USE_DEMANGLING	/usr/include/boost/units/detail/utility.hpp	19;"	d
BOOST_UNITS_US_FOOT_BASE_UNIT_HPP	/usr/include/boost/units/base_units/us/foot.hpp	12;"	d
BOOST_UNITS_US_INCH_BASE_UNIT_HPP	/usr/include/boost/units/base_units/us/inch.hpp	12;"	d
BOOST_UNITS_US_MILE_BASE_UNIT_HPP	/usr/include/boost/units/base_units/us/mile.hpp	12;"	d
BOOST_UNITS_US_MIL_BASE_UNIT_HPP	/usr/include/boost/units/base_units/us/mil.hpp	12;"	d
BOOST_UNITS_UTILITY_HPP	/usr/include/boost/units/detail/utility.hpp	12;"	d
BOOST_UNITS_VELOCITY_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/velocity.hpp	12;"	d
BOOST_UNITS_VOLUME_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/volume.hpp	12;"	d
BOOST_UNITS_WAVENUMBER_DERIVED_DIMENSION_HPP	/usr/include/boost/units/physical_dimensions/wavenumber.hpp	12;"	d
BOOST_UNIT_BASE_UNITS_ANGLE_ARCMINUTE_HPP_INCLUDED	/usr/include/boost/units/base_units/angle/arcminute.hpp	12;"	d
BOOST_UNIT_BASE_UNITS_US_DRAM_HPP_INCLUDED	/usr/include/boost/units/base_units/us/dram.hpp	12;"	d
BOOST_UNIT_BASE_UNITS_US_GRAIN_HPP_INCLUDED	/usr/include/boost/units/base_units/us/grain.hpp	12;"	d
BOOST_UNIT_BASE_UNITS_US_HUNDREDWEIGHT_HPP_INCLUDED	/usr/include/boost/units/base_units/us/hundredweight.hpp	12;"	d
BOOST_UNIT_BASE_UNITS_US_TON_HPP_INCLUDED	/usr/include/boost/units/base_units/us/ton.hpp	12;"	d
BOOST_UNIT_SYSTEMS_ANGLE_ARCSECOND_HPP_INCLUDED	/usr/include/boost/units/base_units/angle/arcsecond.hpp	12;"	d
BOOST_UNIT_SYSTEMS_ASTRONOMICAL_ASTRONOMICAL_UNIT_HPP_INCLUDED	/usr/include/boost/units/base_units/astronomical/astronomical_unit.hpp	12;"	d
BOOST_UNIT_SYSTEMS_ASTRONOMICAL_LIGHT_DAY_HPP_INCLUDED	/usr/include/boost/units/base_units/astronomical/light_day.hpp	12;"	d
BOOST_UNIT_SYSTEMS_ASTRONOMICAL_LIGHT_HOUR_HPP_INCLUDED	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	12;"	d
BOOST_UNIT_SYSTEMS_ASTRONOMICAL_LIGHT_MINUTE_HPP_INCLUDED	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	12;"	d
BOOST_UNIT_SYSTEMS_ASTRONOMICAL_LIGHT_SECOND_HPP_INCLUDED	/usr/include/boost/units/base_units/astronomical/light_second.hpp	12;"	d
BOOST_UNIT_SYSTEMS_ASTRONOMICAL_LIGHT_YEAR_HPP_INCLUDED	/usr/include/boost/units/base_units/astronomical/light_year.hpp	12;"	d
BOOST_UNIT_SYSTEMS_ASTRONOMICAL_PARSEC_HPP_INCLUDED	/usr/include/boost/units/base_units/astronomical/parsec.hpp	12;"	d
BOOST_UNIT_SYSTEMS_IMPERIAL_DRACHM_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/drachm.hpp	12;"	d
BOOST_UNIT_SYSTEMS_IMPERIAL_GRAIN_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/grain.hpp	12;"	d
BOOST_UNIT_SYSTEMS_IMPERIAL_HUNDREDWEIGHT_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	12;"	d
BOOST_UNIT_SYSTEMS_IMPERIAL_OUNCE_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/ounce.hpp	12;"	d
BOOST_UNIT_SYSTEMS_IMPERIAL_POUND_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/pound.hpp	12;"	d
BOOST_UNIT_SYSTEMS_IMPERIAL_QUARTER_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/quarter.hpp	12;"	d
BOOST_UNIT_SYSTEMS_IMPERIAL_STONE_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/stone.hpp	12;"	d
BOOST_UNIT_SYSTEMS_IMPERIAL_TON_HPP_INCLUDED	/usr/include/boost/units/base_units/imperial/ton.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_ANGSTROM_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/angstrom.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_ARE_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/are.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_ATMOSPHERE_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/atmosphere.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_BARN_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/barn.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_BAR_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/bar.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_FERMI_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/fermi.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_HECTARE_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/hectare.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_HOUR_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/hour.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_KNOT_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/knot.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_LITER_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/liter.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_MICRON_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/micron.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_MINUTE_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/minute.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_MMHG_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/mmHg.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_NAUTICAL_MILE_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_TON_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/ton.hpp	12;"	d
BOOST_UNIT_SYSTEMS_METRIC_TORR_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/torr.hpp	12;"	d
BOOST_UNIT_SYSTEMS_OTHER_DAY_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/day.hpp	12;"	d
BOOST_UNIT_SYSTEMS_OTHER_YEAR_HPP_INCLUDED	/usr/include/boost/units/base_units/metric/year.hpp	12;"	d
BOOST_UNIT_SYSTEMS_US_OUNCE_HPP_INCLUDED	/usr/include/boost/units/base_units/us/ounce.hpp	12;"	d
BOOST_UNIT_SYSTEMS_US_POUND_FORCE_HPP_INCLUDED	/usr/include/boost/units/base_units/us/pound_force.hpp	12;"	d
BOOST_UNIT_SYSTEMS_US_POUND_HPP_INCLUDED	/usr/include/boost/units/base_units/us/pound.hpp	12;"	d
Begin	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef T Begin;$/;"	t	struct:boost::units::detail::is_simple_system	access:public
D_type	/usr/include/boost/units/static_rational.hpp	/^        typedef boost::mpl::integral_c<integer_type, D> D_type;$/;"	t	class:boost::units::static_rational	access:public
Denominator	/usr/include/boost/units/static_rational.hpp	/^            Denominator = D\/den;$/;"	m	class:boost::units::static_rational	access:public
N_type	/usr/include/boost/units/static_rational.hpp	/^        typedef boost::mpl::integral_c<integer_type, N> N_type;$/;"	t	class:boost::units::static_rational	access:public
Numerator	/usr/include/boost/units/static_rational.hpp	/^        static const integer_type   Numerator = N\/den,$/;"	m	class:boost::units::static_rational	access:public
absolute	/usr/include/boost/units/absolute.hpp	/^        absolute() : val_() { }$/;"	f	class:boost::units::absolute	access:public	signature:()
absolute	/usr/include/boost/units/absolute.hpp	/^        absolute(const this_type& source) : val_(source.val_) { }$/;"	f	class:boost::units::absolute	access:public	signature:(const this_type& source)
absolute	/usr/include/boost/units/absolute.hpp	/^        absolute(const value_type& val) : val_(val) { }$/;"	f	class:boost::units::absolute	access:public	signature:(const value_type& val)
absolute	/usr/include/boost/units/absolute.hpp	/^class absolute$/;"	c	namespace:boost::units
absorbed_dose	/usr/include/boost/units/systems/si/absorbed_dose.hpp	/^typedef unit<absorbed_dose_dimension,si::system>     absorbed_dose;$/;"	t	namespace:boost::units::si
absorbed_dose_dimension	/usr/include/boost/units/physical_dimensions/absorbed_dose.hpp	/^                          time_base_dimension,-2>::type absorbed_dose_dimension;  $/;"	t	namespace:boost::units
abstract	/usr/include/boost/units/systems/abstract.hpp	/^namespace abstract {$/;"	n	namespace:boost::units
acceleration	/usr/include/boost/units/systems/cgs/acceleration.hpp	/^typedef unit<acceleration_dimension,cgs::system>     acceleration;$/;"	t	namespace:boost::units::cgs
acceleration	/usr/include/boost/units/systems/si/acceleration.hpp	/^typedef unit<acceleration_dimension,si::system>  acceleration;$/;"	t	namespace:boost::units::si
acceleration_dimension	/usr/include/boost/units/physical_dimensions/acceleration.hpp	/^                          time_base_dimension,-2>::type acceleration_dimension;  $/;"	t	namespace:boost::units
acos	/usr/include/boost/units/cmath.hpp	/^acos(const quantity<unit<dimensionless_type, heterogeneous_dimensionless_system>,Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<unit<dimensionless_type, heterogeneous_dimensionless_system>,Y>& val)
acos	/usr/include/boost/units/cmath.hpp	/^acos(const quantity<unit<dimensionless_type, homogeneous_system<System> >,Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<unit<dimensionless_type, homogeneous_system<System> >,Y>& val)
action	/usr/include/boost/units/systems/si/action.hpp	/^typedef unit<action_dimension,si::system>    action;$/;"	t	namespace:boost::units::si
action_dimension	/usr/include/boost/units/physical_dimensions/action.hpp	/^                          time_base_dimension,-1>::type action_dimension;$/;"	t	namespace:boost::units
activity	/usr/include/boost/units/systems/si/activity.hpp	/^typedef unit<activity_dimension,si::system>  activity;$/;"	t	namespace:boost::units::si
activity_dimension	/usr/include/boost/units/physical_dimensions/activity.hpp	/^typedef derived_dimension<time_base_dimension,-1>::type activity_dimension; $/;"	t	namespace:boost::units
add_typeof_helper	/usr/include/boost/units/operators.hpp	/^template<typename X,typename Y> struct add_typeof_helper        $/;"	s	namespace:boost::units
add_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct add_typeof_helper< quantity<Unit1,X>,quantity<Unit2,Y> >$/;"	s	namespace:boost::units
add_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct add_typeof_helper< quantity<unit<Dim, System>,X>,quantity<unit<Dim, System>,Y> >$/;"	s	namespace:boost::units
add_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct add_typeof_helper< quantity<unit<Dim1, System1>,X>,quantity<unit<Dim2, System2>,Y> >$/;"	s	namespace:boost::units
add_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct add_typeof_helper< unit<Dim,System>,unit<Dim,System> >$/;"	s	namespace:boost::units
add_zeroes_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct add_zeroes_impl {$/;"	s	namespace:boost::units::detail
add_zeroes_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct add_zeroes_impl<0> {$/;"	s	namespace:boost::units::detail
affine_conversion_helper	/usr/include/boost/units/detail/absolute_impl.hpp	/^struct affine_conversion_helper : detail::undefined_affine_conversion_base { };$/;"	s	namespace:boost::units	inherits:detail::undefined_affine_conversion_base
affine_conversion_impl	/usr/include/boost/units/detail/absolute_impl.hpp	/^struct affine_conversion_impl<false, true>$/;"	s	namespace:boost::units::detail
affine_conversion_impl	/usr/include/boost/units/detail/absolute_impl.hpp	/^struct affine_conversion_impl<true, ReverseIsDefined>$/;"	s	namespace:boost::units::detail
all_base_units	/usr/include/boost/units/detail/conversion_impl.hpp	/^    >::type all_base_units;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
amount	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<amount_dimension,system>                amount;                 \/\/\/< abstract unit of amount$/;"	t	namespace:boost::units::abstract
amount	/usr/include/boost/units/systems/si/amount.hpp	/^typedef unit<amount_dimension,si::system>    amount;$/;"	t	namespace:boost::units::si
amount_base_dimension	/usr/include/boost/units/physical_dimensions/amount.hpp	/^struct amount_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
amount_dimension	/usr/include/boost/units/physical_dimensions/amount.hpp	/^typedef amount_base_dimension::dimension_type     amount_dimension;$/;"	t	namespace:boost::units
amount_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct amount_unit_tag : base_unit<amount_unit_tag, amount_dimension, -25> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
ampere_base_unit	/usr/include/boost/units/base_units/si/ampere.hpp	/^struct ampere_base_unit : public base_unit<ampere_base_unit, current_dimension, -6>$/;"	s	namespace:boost::units::si	inherits:base_unit
angle	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^namespace angle {$/;"	n	namespace:boost::units
angle	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^namespace angle {$/;"	n	namespace:boost::units
angle	/usr/include/boost/units/base_units/angle/radian.hpp	/^namespace angle {$/;"	n	namespace:boost::units
angle	/usr/include/boost/units/base_units/angle/revolution.hpp	/^namespace angle {$/;"	n	namespace:boost::units
angle	/usr/include/boost/units/base_units/angle/steradian.hpp	/^namespace angle {$/;"	n	namespace:boost::units
angstrom_base_unit	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^typedef scaled_base_unit<boost::units::si::meter_base_unit, scale<10, static_rational<-10> > > angstrom_base_unit;$/;"	t	namespace:boost::units::metric
angular_acceleration	/usr/include/boost/units/systems/si/angular_acceleration.hpp	/^typedef unit<angular_acceleration_dimension,si::system>      angular_acceleration;$/;"	t	namespace:boost::units::si
angular_acceleration_dimension	/usr/include/boost/units/physical_dimensions/angular_acceleration.hpp	/^                          plane_angle_base_dimension,1>::type angular_acceleration_dimension; $/;"	t	namespace:boost::units
angular_momentum	/usr/include/boost/units/systems/si/angular_momentum.hpp	/^typedef unit<angular_momentum_dimension,si::system>      angular_momentum;$/;"	t	namespace:boost::units::si
angular_momentum_dimension	/usr/include/boost/units/physical_dimensions/angular_momentum.hpp	/^                          plane_angle_base_dimension,-1>::type angular_momentum_dimension;                $/;"	t	namespace:boost::units
angular_velocity	/usr/include/boost/units/systems/si/angular_velocity.hpp	/^typedef unit<angular_velocity_dimension,si::system>      angular_velocity;$/;"	t	namespace:boost::units::si
angular_velocity_dimension	/usr/include/boost/units/physical_dimensions/angular_velocity.hpp	/^                          plane_angle_base_dimension,1>::type angular_velocity_dimension; $/;"	t	namespace:boost::units
append_scale_to	/usr/include/boost/units/io.hpp	/^    void append_scale_to(std::string& str) {$/;"	f	struct:boost::units::detail::format_raw_name_impl	access:public	signature:(std::string& str)
append_scale_to	/usr/include/boost/units/io.hpp	/^    void append_scale_to(std::string& str) {$/;"	f	struct:boost::units::detail::format_raw_symbol_impl	access:public	signature:(std::string& str)
append_units_to	/usr/include/boost/units/io.hpp	/^    void append_units_to(std::string& str) {$/;"	f	struct:boost::units::detail::format_raw_name_impl	access:public	signature:(std::string& str)
append_units_to	/usr/include/boost/units/io.hpp	/^    void append_units_to(std::string& str) {$/;"	f	struct:boost::units::detail::format_raw_symbol_impl	access:public	signature:(std::string& str)
apply	/usr/include/boost/units/detail/absolute_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::affine_conversion_impl	access:public
apply	/usr/include/boost/units/detail/absolute_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::affine_conversion_impl	access:public
apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::call_base_unit_converter_impl	access:public
apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::call_base_unit_converter_base_unit_impl	access:public
apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::call_base_unit_converter_base_unit_impl	inherits:do_call_base_unit_converter	access:public
apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::call_base_unit_converter_impl	inherits:do_call_base_unit_converter	access:public
apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::conversion_impl	access:public
apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::get_default_conversion_impl	access:public
apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::unscaled_get_default_conversion_impl	access:public
apply	/usr/include/boost/units/detail/dim_impl.hpp	/^    struct apply : mpl::less<typename T0::tag_type, typename T1::tag_type> {};$/;"	s	struct:boost::mpl::less_impl	inherits:mpl::less	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply $/;"	s	struct:boost::units::detail::static_root_impl	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_dims_comparison_impl	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_dims_impl	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_dims_insert	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_dims_mpl_sequence	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::iterator_to_list	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::static_inverse_impl	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::static_root_impl	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::iterator_to_list	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::merge_dimensions_func	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::merge_dimensions_impl	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::static_inverse_impl	access:public
apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::static_power_impl	access:public
apply	/usr/include/boost/units/detail/dimension_list.hpp	/^    struct apply $/;"	s	struct:boost::mpl::begin_impl	access:public
apply	/usr/include/boost/units/detail/dimension_list.hpp	/^    struct apply $/;"	s	struct:boost::mpl::end_impl	access:public
apply	/usr/include/boost/units/detail/dimension_list.hpp	/^    struct apply $/;"	s	struct:boost::mpl::front_impl	access:public
apply	/usr/include/boost/units/detail/dimension_list.hpp	/^    struct apply $/;"	s	struct:boost::mpl::pop_front_impl	access:public
apply	/usr/include/boost/units/detail/dimension_list.hpp	/^    struct apply $/;"	s	struct:boost::mpl::push_front_impl	access:public
apply	/usr/include/boost/units/detail/dimension_list.hpp	/^    template<class L> struct apply : public L::size { };$/;"	s	struct:boost::mpl::size_impl	inherits:L::size	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::extract_base_units	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_homogeneous_system_func	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_homogeneous_system_impl	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_solve_list_first_non_zero	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_solve_list_internal_zero	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_solve_list_leading_zeroes	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_solve_list_normal	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::solve_end	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::solve_first_non_zero	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::solve_internal_zero	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::solve_leading_zeroes	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::solve_normal	access:public
apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::try_add_unit_impl	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply : $/;"	s	struct:boost::units::detail::begins_with_dimension	inherits:boost::is_same	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply : mpl::false_ {};$/;"	s	struct:boost::units::detail::begins_with_dimension	inherits:mpl::false_	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply : mpl::true_ {$/;"	s	struct:boost::units::detail::is_simple_system_impl	inherits:mpl::true_	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::add_zeroes_impl	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::calculate_base_dimension_coefficients_func	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::calculate_base_dimension_coefficients_impl	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::calculate_base_unit_exponents_impl	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::create_unit_matrix	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::determine_extra_equations	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::determine_extra_equations_impl	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::divide_equation	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::eliminate_from_pair_of_equations_impl	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::expand_dimensions	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::find_base_dimensions_impl	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::find_base_dimensions_impl_impl	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::invert_handle_after_pivot_row	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::invert_handle_inital_rows	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::invert_impl	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::invert_strip_leading_zeroes	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::is_simple_system_impl	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_identity	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::multiply_add_units	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::multiply_add_units_impl	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::set_insert	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::strip_zeroes_func	access:public
apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::strip_zeroes_impl	access:public
apply	/usr/include/boost/units/detail/push_front_if.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::push_front_if	access:public
apply	/usr/include/boost/units/detail/push_front_or_add.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::push_front_or_add_impl	access:public
apply	/usr/include/boost/units/detail/sort.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_comparison_impl	access:public
apply	/usr/include/boost/units/detail/sort.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_impl	access:public
apply	/usr/include/boost/units/detail/sort.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_insert	access:public
apply	/usr/include/boost/units/detail/static_rational_power.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::static_int_power_impl	access:public
apply	/usr/include/boost/units/dim.hpp	/^    struct apply$/;"	s	struct:boost::mpl::divides_impl	access:public
apply	/usr/include/boost/units/dim.hpp	/^    struct apply$/;"	s	struct:boost::mpl::minus_impl	access:public
apply	/usr/include/boost/units/dim.hpp	/^    struct apply$/;"	s	struct:boost::mpl::negate_impl	access:public
apply	/usr/include/boost/units/dim.hpp	/^    struct apply$/;"	s	struct:boost::mpl::plus_impl	access:public
apply	/usr/include/boost/units/dim.hpp	/^    struct apply$/;"	s	struct:boost::mpl::times_impl	access:public
apply	/usr/include/boost/units/dimension.hpp	/^    struct apply$/;"	s	struct:boost::mpl::divides_impl	access:public
apply	/usr/include/boost/units/dimension.hpp	/^    struct apply$/;"	s	struct:boost::mpl::minus_impl	access:public
apply	/usr/include/boost/units/dimension.hpp	/^    struct apply$/;"	s	struct:boost::mpl::negate_impl	access:public
apply	/usr/include/boost/units/dimension.hpp	/^    struct apply$/;"	s	struct:boost::mpl::plus_impl	access:public
apply	/usr/include/boost/units/dimension.hpp	/^    struct apply$/;"	s	struct:boost::mpl::times_impl	access:public
apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply : mpl::less<typename T0::tag_type, typename T1::tag_type> {};$/;"	s	struct:boost::mpl::less_impl	inherits:mpl::less	access:public
apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::mpl::divides_impl	access:public
apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::mpl::negate_impl	access:public
apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::mpl::plus_impl	access:public
apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::mpl::times_impl	access:public
apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::get_scale_list_of_heterogeneous_system_impl	access:public
apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::make_heterogeneous_system_impl	access:public
apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::unscale_heterogeneous_system_impl	access:public
apply	/usr/include/boost/units/io.hpp	/^    struct apply $/;"	s	struct:boost::units::detail::scale_name_string_impl	access:public
apply	/usr/include/boost/units/io.hpp	/^    struct apply $/;"	s	struct:boost::units::detail::scale_symbol_string_impl	access:public
apply	/usr/include/boost/units/io.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::name_string_impl	access:public
apply	/usr/include/boost/units/io.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::symbol_string_impl	access:public
apply	/usr/include/boost/units/scaled_base_unit.hpp	/^    struct apply : mpl::bool_<$/;"	s	struct:boost::mpl::less_impl	inherits:mpl::bool_	access:public
apply	/usr/include/boost/units/static_rational.hpp	/^    struct apply {$/;"	s	struct:boost::mpl::divides_impl	access:public
apply	/usr/include/boost/units/static_rational.hpp	/^    struct apply {$/;"	s	struct:boost::mpl::minus_impl	access:public
apply	/usr/include/boost/units/static_rational.hpp	/^    struct apply {$/;"	s	struct:boost::mpl::negate_impl	access:public
apply	/usr/include/boost/units/static_rational.hpp	/^    struct apply {$/;"	s	struct:boost::mpl::plus_impl	access:public
apply	/usr/include/boost/units/static_rational.hpp	/^    struct apply {$/;"	s	struct:boost::mpl::times_impl	access:public
apply	/usr/include/boost/units/static_rational.hpp	/^    struct apply$/;"	s	struct:boost::mpl::less_impl	access:public
arcminute_base_unit	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^typedef scaled_base_unit<degree_base_unit, scale<60, static_rational<-1> > >  arcminute_base_unit;$/;"	t	namespace:boost::units::angle
arcsecond_base_unit	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^typedef scaled_base_unit<degree_base_unit, scale<3600, static_rational<-1> > >  arcsecond_base_unit;$/;"	t	namespace:boost::units::angle
area	/usr/include/boost/units/systems/cgs/area.hpp	/^typedef unit<area_dimension,cgs::system>     area;$/;"	t	namespace:boost::units::cgs
area	/usr/include/boost/units/systems/si/area.hpp	/^typedef unit<area_dimension,si::system>      area;$/;"	t	namespace:boost::units::si
area_dimension	/usr/include/boost/units/physical_dimensions/area.hpp	/^typedef derived_dimension<length_base_dimension,2>::type area_dimension; $/;"	t	namespace:boost::units
asin	/usr/include/boost/units/cmath.hpp	/^asin(const quantity<unit<dimensionless_type, heterogeneous_dimensionless_system>,Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<unit<dimensionless_type, heterogeneous_dimensionless_system>,Y>& val)
asin	/usr/include/boost/units/cmath.hpp	/^asin(const quantity<unit<dimensionless_type, homogeneous_system<System> >,Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<unit<dimensionless_type, homogeneous_system<System> >,Y>& val)
astronomical	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^namespace astronomical {$/;"	n	namespace:boost::units
astronomical	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^namespace astronomical {$/;"	n	namespace:boost::units
astronomical	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^namespace astronomical {$/;"	n	namespace:boost::units
astronomical	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^namespace astronomical {$/;"	n	namespace:boost::units
atan	/usr/include/boost/units/cmath.hpp	/^atan(const quantity<unit<dimensionless_type, heterogeneous_dimensionless_system>, Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<unit<dimensionless_type, heterogeneous_dimensionless_system>, Y>& val)
atan	/usr/include/boost/units/cmath.hpp	/^atan(const quantity<unit<dimensionless_type, homogeneous_system<System> >, Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<unit<dimensionless_type, homogeneous_system<System> >, Y>& val)
atan2	/usr/include/boost/units/cmath.hpp	/^atan2(const quantity<unit<Dimension, heterogeneous_system<System> >, Y>& y,$/;"	f	namespace:boost::units	signature:(const quantity<unit<Dimension, heterogeneous_system<System> >, Y>& y, const quantity<unit<Dimension, heterogeneous_system<System> >, Y>& x)
atan2	/usr/include/boost/units/cmath.hpp	/^atan2(const quantity<unit<Dimension, homogeneous_system<System> >, Y>& y,$/;"	f	namespace:boost::units	signature:(const quantity<unit<Dimension, homogeneous_system<System> >, Y>& y, const quantity<unit<Dimension, homogeneous_system<System> >, Y>& x)
autoprefix_binary	/usr/include/boost/units/io.hpp	/^    autoprefix_binary = 8, \/\/\/ Scale and prefix with 2^10 (1024) multiples, 1024 as 1 kb.$/;"	e	enum:boost::units::autoprefix_mode
autoprefix_engineering	/usr/include/boost/units/io.hpp	/^    autoprefix_engineering = 4, \/\/\/ Scale and prefix with 10^3 multiples, 1234.5 m output as 1.2345 km.$/;"	e	enum:boost::units::autoprefix_mode
autoprefix_mask	/usr/include/boost/units/io.hpp	/^    autoprefix_mask = 12 \/\/\/  Bits used for autoprefix.$/;"	e	enum:boost::units::autoprefix_mode
autoprefix_mode	/usr/include/boost/units/io.hpp	/^enum autoprefix_mode$/;"	g	namespace:boost::units
autoprefix_none	/usr/include/boost/units/io.hpp	/^    autoprefix_none = 0, \/\/\/ No automatic prefix.$/;"	e	enum:boost::units::autoprefix_mode
autoprefix_norm	/usr/include/boost/units/io.hpp	/^double autoprefix_norm(const T& arg);$/;"	p	namespace:boost::units	signature:(const T& arg)
base	/usr/include/boost/units/pow.hpp	/^    typedef power_typeof_helper<T, static_rational<D,N> > base;$/;"	t	struct:boost::units::root_typeof_helper	access:public
base	/usr/include/boost/units/pow.hpp	/^    typedef power_typeof_helper<double, static_rational<N,D> > base;$/;"	t	struct:boost::units::power_typeof_helper	access:public
base	/usr/include/boost/units/scale.hpp	/^    static const long base = Base;$/;"	m	struct:boost::units::scale	access:public
base	/usr/include/boost/units/scale.hpp	/^const long scale<Base, Exponent>::base;$/;"	m	class:boost::units::scale
base	/usr/include/boost/units/scale.hpp	/^const long scale<Base, static_rational<0> >::base;$/;"	m	class:boost::units::scale
base	/usr/include/boost/units/systems/detail/constants.hpp	/^    typedef power_typeof_helper<typename T1::value_type, static_rational<N,D> > base;$/;"	t	struct:boost::units::power_typeof_helper	access:public
base_dimension	/usr/include/boost/units/base_dimension.hpp	/^class base_dimension : $/;"	c	namespace:boost::units	inherits:ordinal
base_dimension_ordinal	/usr/include/boost/units/base_dimension.hpp	/^template<long N> struct base_dimension_ordinal { };$/;"	s	namespace:boost::units
base_dimension_pair	/usr/include/boost/units/base_dimension.hpp	/^template<class T, long N> struct base_dimension_pair { };$/;"	s	namespace:boost::units
base_dimension_type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef T base_dimension_type;$/;"	t	struct:boost::units::detail::is_base_dimension_unit	access:public
base_dimension_type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef void base_dimension_type;$/;"	t	struct:boost::units::detail::is_base_dimension_unit	access:public
base_dimensions	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    typedef typename find_base_dimensions<Units>::type base_dimensions;$/;"	t	struct:boost::units::detail::make_homogeneous_system	access:public
base_solutions	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef normalize_units<T> base_solutions;$/;"	t	struct:boost::units::detail::calculate_base_unit_exponents_impl::apply	access:public
base_unit	/usr/include/boost/units/base_unit.hpp	/^class base_unit : $/;"	c	namespace:boost::units	inherits:ordinal
base_unit_converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct base_unit_converter : base_unit_converter_base<Source, Dest> { };$/;"	s	namespace:boost::units	inherits:base_unit_converter_base
base_unit_converter_base	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct base_unit_converter_base : undefined_base_unit_converter_base {$/;"	s	namespace:boost::units	inherits:undefined_base_unit_converter_base
base_unit_converter_base	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct base_unit_converter_base<Source, BOOST_UNITS_MAKE_HETEROGENEOUS_UNIT(Source, typename Source::dimension_type)>$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^struct base_unit_info<angle::arcminute_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^struct base_unit_info<angle::arcsecond_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/angle/revolution.hpp	/^struct base_unit_info<angle::revolution_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^struct base_unit_info<astronomical::light_day_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^struct base_unit_info<astronomical::light_hour_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^struct base_unit_info<astronomical::light_minute_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^struct base_unit_info<astronomical::light_year_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^struct base_unit_info<imperial::drachm_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^struct base_unit_info<imperial::fluid_ounce_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/foot.hpp	/^struct base_unit_info<imperial::foot_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^struct base_unit_info<imperial::furlong_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^struct base_unit_info<imperial::gallon_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/gill.hpp	/^struct base_unit_info<imperial::gill_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/grain.hpp	/^struct base_unit_info<imperial::grain_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^struct base_unit_info<imperial::hundredweight_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/inch.hpp	/^struct base_unit_info<imperial::inch_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/league.hpp	/^struct base_unit_info<imperial::league_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/mile.hpp	/^struct base_unit_info<imperial::mile_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^struct base_unit_info<imperial::ounce_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/quart.hpp	/^struct base_unit_info<imperial::quart_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^struct base_unit_info<imperial::quarter_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/stone.hpp	/^struct base_unit_info<imperial::stone_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/thou.hpp	/^struct base_unit_info<imperial::thou_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/imperial/ton.hpp	/^struct base_unit_info<imperial::ton_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^struct base_unit_info<metric::angstrom_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/metric/day.hpp	/^struct base_unit_info<metric::day_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/metric/fermi.hpp	/^struct base_unit_info<metric::fermi_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/metric/hour.hpp	/^struct base_unit_info<metric::hour_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/metric/micron.hpp	/^struct base_unit_info<metric::micron_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/metric/minute.hpp	/^struct base_unit_info<metric::minute_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^struct base_unit_info<metric::nautical_mile_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/metric/ton.hpp	/^struct base_unit_info<metric::ton_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/metric/year.hpp	/^struct base_unit_info<metric::year_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/cup.hpp	/^struct base_unit_info<us::cup_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/dram.hpp	/^struct base_unit_info<us::dram_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^struct base_unit_info<us::fluid_dram_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^struct base_unit_info<us::fluid_ounce_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/foot.hpp	/^struct base_unit_info<us::foot_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/gallon.hpp	/^struct base_unit_info<us::gallon_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/gill.hpp	/^struct base_unit_info<us::gill_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/grain.hpp	/^struct base_unit_info<us::grain_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^struct base_unit_info<us::hundredweight_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/inch.hpp	/^struct base_unit_info<us::inch_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/mil.hpp	/^struct base_unit_info<us::mil_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/mile.hpp	/^struct base_unit_info<us::mile_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/minim.hpp	/^struct base_unit_info<us::minim_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/ounce.hpp	/^struct base_unit_info<us::ounce_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/quart.hpp	/^struct base_unit_info<us::quart_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^struct base_unit_info<us::tablespoon_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^struct base_unit_info<us::teaspoon_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/base_units/us/ton.hpp	/^struct base_unit_info<us::ton_base_unit> {$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/io.hpp	/^struct base_unit_info$/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::amount_unit_tag> $/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::current_unit_tag> $/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::length_unit_tag> $/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::luminous_intensity_unit_tag> $/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::mass_unit_tag> $/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::plane_angle_unit_tag> $/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::solid_angle_unit_tag> $/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::temperature_unit_tag> $/;"	s	namespace:boost::units
base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::time_unit_tag> $/;"	s	namespace:boost::units
base_unit_info_primary_template	/usr/include/boost/units/io.hpp	/^    typedef void base_unit_info_primary_template;$/;"	t	struct:boost::units::base_unit_info	access:public
base_unit_name_string	/usr/include/boost/units/io.hpp	/^inline std::string base_unit_name_string(const T&)$/;"	f	namespace:boost::units::detail	signature:(const T&)
base_unit_ordinal	/usr/include/boost/units/base_unit.hpp	/^template<long N> struct base_unit_ordinal { };$/;"	s	namespace:boost::units
base_unit_pair	/usr/include/boost/units/base_unit.hpp	/^template<class T, long N> struct base_unit_pair { };$/;"	s	namespace:boost::units
base_unit_symbol_string	/usr/include/boost/units/io.hpp	/^inline std::string base_unit_symbol_string(const T&)$/;"	f	namespace:boost::units::detail	signature:(const T&)
begin1	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef E1 begin1;$/;"	t	struct:boost::units::detail::eliminate_from_pair_of_equations	access:public
begin2	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef E2 begin2;$/;"	t	struct:boost::units::detail::eliminate_from_pair_of_equations	access:public
begin_impl	/usr/include/boost/units/detail/dimension_list.hpp	/^struct begin_impl<units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
begins_with_dimension	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct begins_with_dimension {$/;"	s	namespace:boost::units::detail
begins_with_dimension	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct begins_with_dimension<dimensionless_type> {$/;"	s	namespace:boost::units::detail
binary_prefix	/usr/include/boost/units/io.hpp	/^inline std::ios_base& binary_prefix(std::ios_base& ios)$/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
binary_prefixes	/usr/include/boost/units/io.hpp	/^        dimensionless_type> > > > > > > binary_prefixes;$/;"	t	namespace:boost::units::detail
biot_base_unit	/usr/include/boost/units/base_units/cgs/biot.hpp	/^typedef scaled_base_unit<boost::units::si::ampere_base_unit, scale<10, static_rational<-1> > > biot_base_unit;$/;"	t	namespace:boost::units::cgs
boost	/usr/include/boost/units/absolute.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_dimension.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_unit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/angle/radian.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/angle/revolution.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/angle/steradian.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/cgs/biot.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/cgs/centimeter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/cgs/gram.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/foot.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/gill.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/grain.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/inch.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/league.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/mile.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/quart.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/stone.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/thou.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/imperial/ton.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/metric/day.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/metric/fermi.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/metric/hour.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/metric/micron.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/metric/minute.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/metric/ton.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/metric/year.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/si/ampere.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/si/candela.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/si/kelvin.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/si/kilogram.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/si/meter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/si/mole.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/si/second.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/temperature/celsius.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/temperature/fahrenheit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/cup.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/dram.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/foot.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/gallon.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/gill.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/grain.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/inch.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/mil.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/mile.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/minim.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/ounce.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/quart.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/base_units/us/ton.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/cmath.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/conversion.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/derived_dimension.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/absolute_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/cmath_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/conversion_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/dim_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/dimension_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/dimension_list.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/linear_algebra.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/one.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/ordinal.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/push_front_if.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/push_front_or_add.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/sort.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/static_rational_power.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/unscale.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/detail/utility.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/dim.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/dimension.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/dimensionless_quantity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/dimensionless_type.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/dimensionless_unit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/get_dimension.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/get_system.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/heterogeneous_system.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/homogeneous_system.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/io.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/is_dim.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/is_dimension_list.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/is_dimensionless.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/is_dimensionless_quantity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/is_dimensionless_unit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/is_quantity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/is_quantity_of_dimension.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/is_quantity_of_system.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/is_unit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/is_unit_of_dimension.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/is_unit_of_system.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/lambda.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/make_scaled_unit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/make_system.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/operators.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/absorbed_dose.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/acceleration.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/action.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/activity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/amount.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/angular_acceleration.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/angular_momentum.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/angular_velocity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/area.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/capacitance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/conductance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/conductivity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/current.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/dose_equivalent.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/dynamic_viscosity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/electric_charge.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/electric_potential.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/energy.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/energy_density.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/force.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/frequency.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/heat_capacity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/illuminance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/impedance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/inductance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/kinematic_viscosity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/length.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/luminance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/luminous_flux.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/luminous_intensity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/magnetic_field_intensity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/magnetic_flux.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/magnetic_flux_density.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/mass.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/mass_density.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/molar_energy.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/molar_heat_capacity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/moment_of_inertia.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/momentum.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/permeability.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/permittivity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/plane_angle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/power.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/pressure.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/reluctance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/resistance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/resistivity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/solid_angle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/specific_energy.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/specific_heat_capacity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/specific_volume.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/stress.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/surface_density.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/surface_tension.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/temperature.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/thermal_conductivity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/time.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/torque.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/velocity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/volume.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/physical_dimensions/wavenumber.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/pow.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/quantity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/reduce_unit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/scale.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/scaled_base_unit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/static_rational.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/abstract.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/angle/degrees.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/angle/gradians.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/angle/revolutions.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/acceleration.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/area.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/current.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/dimensionless.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/dynamic_viscosity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/energy.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/force.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/frequency.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/io.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/kinematic_viscosity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/length.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/mass.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/mass_density.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/momentum.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/power.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/pressure.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/time.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/velocity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/volume.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/detail/constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/absorbed_dose.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/acceleration.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/action.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/activity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/amount.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/angular_acceleration.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/angular_momentum.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/angular_velocity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/area.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/capacitance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/conductance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/conductivity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/current.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/dimensionless.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/dose_equivalent.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/dynamic_viscosity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/electric_charge.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/electric_potential.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/energy.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/force.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/frequency.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/illuminance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/impedance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/inductance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/io.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/kinematic_viscosity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/length.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/luminous_flux.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/luminous_intensity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/magnetic_field_intensity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/magnetic_flux.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/magnetic_flux_density.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/mass.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/mass_density.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/moment_of_inertia.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/momentum.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/permeability.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/permittivity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/plane_angle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/power.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/prefixes.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/pressure.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/reluctance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/resistance.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/resistivity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/solid_angle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/surface_density.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/surface_tension.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/temperature.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/time.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/torque.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/velocity.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/volume.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/si/wavenumber.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/temperature/celsius.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/unit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/units/units_fwd.hpp	/^namespace boost {$/;"	n
boost::lambda	/usr/include/boost/units/lambda.hpp	/^namespace lambda {$/;"	n	namespace:boost
boost::lambda::plain_return_type_1	/usr/include/boost/units/lambda.hpp	/^    struct plain_return_type_1<unary_arithmetic_action<minus_action>,$/;"	s	namespace:boost::lambda
boost::lambda::plain_return_type_1	/usr/include/boost/units/lambda.hpp	/^    struct plain_return_type_1<unary_arithmetic_action<plus_action>,$/;"	s	namespace:boost::lambda
boost::lambda::plain_return_type_1::type	/usr/include/boost/units/lambda.hpp	/^            boost::units::quantity<Unit, Y> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_1	access:public
boost::lambda::plain_return_type_1::type	/usr/include/boost/units/lambda.hpp	/^            boost::units::unit<Dim, System> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_1	access:public
boost::lambda::plain_return_type_2	/usr/include/boost/units/lambda.hpp	/^    struct plain_return_type_2<arithmetic_action<divide_action>,$/;"	s	namespace:boost::lambda
boost::lambda::plain_return_type_2	/usr/include/boost/units/lambda.hpp	/^    struct plain_return_type_2<arithmetic_action<minus_action>,$/;"	s	namespace:boost::lambda
boost::lambda::plain_return_type_2	/usr/include/boost/units/lambda.hpp	/^    struct plain_return_type_2<arithmetic_action<multiply_action>,$/;"	s	namespace:boost::lambda
boost::lambda::plain_return_type_2	/usr/include/boost/units/lambda.hpp	/^    struct plain_return_type_2<arithmetic_action<plus_action>,$/;"	s	namespace:boost::lambda
boost::lambda::plain_return_type_2::type	/usr/include/boost/units/lambda.hpp	/^            X, boost::units::quantity<Unit, X> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
boost::lambda::plain_return_type_2::type	/usr/include/boost/units/lambda.hpp	/^            Y, boost::units::unit<Dim, System> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
boost::lambda::plain_return_type_2::type	/usr/include/boost/units/lambda.hpp	/^            Y>::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
boost::lambda::plain_return_type_2::type	/usr/include/boost/units/lambda.hpp	/^            boost::units::absolute<boost::units::unit<D, S> >, T> type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
boost::lambda::plain_return_type_2::type	/usr/include/boost/units/lambda.hpp	/^            boost::units::quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(System), Y> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
boost::lambda::plain_return_type_2::type	/usr/include/boost/units/lambda.hpp	/^            boost::units::quantity<Unit, X>, X>::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
boost::lambda::plain_return_type_2::type	/usr/include/boost/units/lambda.hpp	/^            boost::units::quantity<Unit2, Y> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
boost::lambda::plain_return_type_2::type	/usr/include/boost/units/lambda.hpp	/^            boost::units::unit<Dim, System>, Y >::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
boost::lambda::plain_return_type_2::type	/usr/include/boost/units/lambda.hpp	/^            boost::units::unit<Dim2, System2> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
boost::lambda::plain_return_type_2::type	/usr/include/boost/units/lambda.hpp	/^        typedef Y type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
boost::lambda::plain_return_type_2::type	/usr/include/boost/units/lambda.hpp	/^        typedef typename boost::units::absolute<Y> type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
boost::mpl	/usr/include/boost/units/detail/dim_impl.hpp	/^namespace mpl {$/;"	n	namespace:boost
boost::mpl	/usr/include/boost/units/detail/dimension_list.hpp	/^namespace mpl {$/;"	n	namespace:boost
boost::mpl	/usr/include/boost/units/detail/ordinal.hpp	/^namespace mpl {$/;"	n	namespace:boost
boost::mpl	/usr/include/boost/units/detail/unscale.hpp	/^namespace mpl {$/;"	n	namespace:boost
boost::mpl	/usr/include/boost/units/dim.hpp	/^namespace mpl {$/;"	n	namespace:boost
boost::mpl	/usr/include/boost/units/dimension.hpp	/^namespace mpl {$/;"	n	namespace:boost
boost::mpl	/usr/include/boost/units/heterogeneous_system.hpp	/^namespace mpl {$/;"	n	namespace:boost
boost::mpl	/usr/include/boost/units/scaled_base_unit.hpp	/^namespace mpl {$/;"	n	namespace:boost
boost::mpl	/usr/include/boost/units/static_rational.hpp	/^namespace mpl {$/;"	n	namespace:boost
boost::mpl::begin_impl	/usr/include/boost/units/detail/dimension_list.hpp	/^struct begin_impl<units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
boost::mpl::begin_impl::apply	/usr/include/boost/units/detail/dimension_list.hpp	/^    struct apply $/;"	s	struct:boost::mpl::begin_impl	access:public
boost::mpl::begin_impl::apply::type	/usr/include/boost/units/detail/dimension_list.hpp	/^        typedef L type;$/;"	t	struct:boost::mpl::begin_impl::apply	access:public
boost::mpl::deref	/usr/include/boost/units/detail/dimension_list.hpp	/^struct deref<units::list<Item, Next> >$/;"	s	namespace:boost::mpl
boost::mpl::deref::type	/usr/include/boost/units/detail/dimension_list.hpp	/^    typedef Item type;$/;"	t	struct:boost::mpl::deref	access:public
boost::mpl::divides_impl	/usr/include/boost/units/dim.hpp	/^struct divides_impl<boost::units::detail::dim_tag,boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
boost::mpl::divides_impl	/usr/include/boost/units/dim.hpp	/^struct divides_impl<boost::units::detail::static_rational_tag,boost::units::detail::dim_tag>$/;"	s	namespace:boost::mpl
boost::mpl::divides_impl	/usr/include/boost/units/dimension.hpp	/^struct divides_impl<boost::units::detail::dimension_list_tag,boost::units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
boost::mpl::divides_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct divides_impl<boost::units::heterogeneous_system_dim_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
boost::mpl::divides_impl	/usr/include/boost/units/static_rational.hpp	/^struct divides_impl<boost::units::detail::static_rational_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
boost::mpl::divides_impl::apply	/usr/include/boost/units/dim.hpp	/^    struct apply$/;"	s	struct:boost::mpl::divides_impl	access:public
boost::mpl::divides_impl::apply	/usr/include/boost/units/dimension.hpp	/^    struct apply$/;"	s	struct:boost::mpl::divides_impl	access:public
boost::mpl::divides_impl::apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::mpl::divides_impl	access:public
boost::mpl::divides_impl::apply	/usr/include/boost/units/static_rational.hpp	/^    struct apply {$/;"	s	struct:boost::mpl::divides_impl	access:public
boost::mpl::divides_impl::apply::type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T0::tag_type, typename mpl::divides<typename T0::value_type, T1>::type> type;$/;"	t	struct:boost::mpl::divides_impl::apply	access:public
boost::mpl::divides_impl::apply::type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T1::tag_type, typename mpl::divides<T0, typename T1::value_type>::type> type;$/;"	t	struct:boost::mpl::divides_impl::apply	access:public
boost::mpl::divides_impl::apply::type	/usr/include/boost/units/dimension.hpp	/^        >::type type;$/;"	t	struct:boost::mpl::divides_impl::apply	access:public
boost::mpl::divides_impl::apply::type	/usr/include/boost/units/heterogeneous_system.hpp	/^        > type;$/;"	t	struct:boost::mpl::divides_impl::apply	access:public
boost::mpl::divides_impl::apply::type	/usr/include/boost/units/static_rational.hpp	/^        >::type type;$/;"	t	struct:boost::mpl::divides_impl::apply	access:public
boost::mpl::end_impl	/usr/include/boost/units/detail/dimension_list.hpp	/^struct end_impl<units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
boost::mpl::end_impl::apply	/usr/include/boost/units/detail/dimension_list.hpp	/^    struct apply $/;"	s	struct:boost::mpl::end_impl	access:public
boost::mpl::end_impl::apply::type	/usr/include/boost/units/detail/dimension_list.hpp	/^        typedef units::dimensionless_type type;$/;"	t	struct:boost::mpl::end_impl::apply	access:public
boost::mpl::front_impl	/usr/include/boost/units/detail/dimension_list.hpp	/^struct front_impl<units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
boost::mpl::front_impl::apply	/usr/include/boost/units/detail/dimension_list.hpp	/^    struct apply $/;"	s	struct:boost::mpl::front_impl	access:public
boost::mpl::front_impl::apply::type	/usr/include/boost/units/detail/dimension_list.hpp	/^        typedef typename L::item type;$/;"	t	struct:boost::mpl::front_impl::apply	access:public
boost::mpl::less_impl	/usr/include/boost/units/detail/dim_impl.hpp	/^struct less_impl<boost::units::detail::dim_tag, boost::units::detail::dim_tag>$/;"	s	namespace:boost::mpl
boost::mpl::less_impl	/usr/include/boost/units/detail/ordinal.hpp	/^struct less_impl<units::detail::ordinal_tag, units::detail::ordinal_tag> {$/;"	s	namespace:boost::mpl
boost::mpl::less_impl	/usr/include/boost/units/detail/unscale.hpp	/^struct less_impl<boost::units::scale_dim_tag, boost::units::scale_dim_tag>$/;"	s	namespace:boost::mpl
boost::mpl::less_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct less_impl<boost::units::heterogeneous_system_dim_tag, boost::units::heterogeneous_system_dim_tag>$/;"	s	namespace:boost::mpl
boost::mpl::less_impl	/usr/include/boost/units/scaled_base_unit.hpp	/^struct less_impl<boost::units::scaled_base_unit_tag, Tag>$/;"	s	namespace:boost::mpl
boost::mpl::less_impl	/usr/include/boost/units/scaled_base_unit.hpp	/^struct less_impl<boost::units::scaled_base_unit_tag, boost::units::scaled_base_unit_tag>$/;"	s	namespace:boost::mpl
boost::mpl::less_impl	/usr/include/boost/units/static_rational.hpp	/^struct less_impl<boost::units::detail::static_rational_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
boost::mpl::less_impl::apply	/usr/include/boost/units/detail/dim_impl.hpp	/^    struct apply : mpl::less<typename T0::tag_type, typename T1::tag_type> {};$/;"	s	struct:boost::mpl::less_impl	inherits:mpl::less	access:public
boost::mpl::less_impl::apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply : mpl::less<typename T0::tag_type, typename T1::tag_type> {};$/;"	s	struct:boost::mpl::less_impl	inherits:mpl::less	access:public
boost::mpl::less_impl::apply	/usr/include/boost/units/scaled_base_unit.hpp	/^    struct apply : mpl::bool_<$/;"	s	struct:boost::mpl::less_impl	inherits:mpl::bool_	access:public
boost::mpl::less_impl::apply	/usr/include/boost/units/static_rational.hpp	/^    struct apply$/;"	s	struct:boost::mpl::less_impl	access:public
boost::mpl::minus_impl	/usr/include/boost/units/dim.hpp	/^struct minus_impl<boost::units::detail::dim_tag,boost::units::detail::dim_tag>$/;"	s	namespace:boost::mpl
boost::mpl::minus_impl	/usr/include/boost/units/dimension.hpp	/^struct minus_impl<boost::units::detail::dimension_list_tag,boost::units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
boost::mpl::minus_impl	/usr/include/boost/units/static_rational.hpp	/^struct minus_impl<boost::units::detail::static_rational_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
boost::mpl::minus_impl::apply	/usr/include/boost/units/dim.hpp	/^    struct apply$/;"	s	struct:boost::mpl::minus_impl	access:public
boost::mpl::minus_impl::apply	/usr/include/boost/units/dimension.hpp	/^    struct apply$/;"	s	struct:boost::mpl::minus_impl	access:public
boost::mpl::minus_impl::apply	/usr/include/boost/units/static_rational.hpp	/^    struct apply {$/;"	s	struct:boost::mpl::minus_impl	access:public
boost::mpl::minus_impl::apply::BOOST_STATIC_ASSERT	/usr/include/boost/units/dim.hpp	/^        BOOST_STATIC_ASSERT((boost::is_same<typename T0::tag_type,typename T1::tag_type>::value == true));$/;"	p	struct:boost::mpl::minus_impl::apply	access:public	signature:(boost::is_same<typename T0::tag_type,typename T1::tag_type>::value == true)
boost::mpl::minus_impl::apply::BOOST_STATIC_ASSERT	/usr/include/boost/units/dimension.hpp	/^        BOOST_STATIC_ASSERT((boost::is_same<T0,T1>::value == true));$/;"	p	struct:boost::mpl::minus_impl::apply	access:public	signature:(boost::is_same<T0,T1>::value == true)
boost::mpl::minus_impl::apply::type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T0::tag_type, typename mpl::minus<typename T0::value_type, typename T1::value_type>::type> type;$/;"	t	struct:boost::mpl::minus_impl::apply	access:public
boost::mpl::minus_impl::apply::type	/usr/include/boost/units/dimension.hpp	/^        typedef T0 type;$/;"	t	struct:boost::mpl::minus_impl::apply	access:public
boost::mpl::minus_impl::apply::type	/usr/include/boost/units/static_rational.hpp	/^        >::type type;$/;"	t	struct:boost::mpl::minus_impl::apply	access:public
boost::mpl::negate_impl	/usr/include/boost/units/dim.hpp	/^struct negate_impl<boost::units::detail::dim_tag>$/;"	s	namespace:boost::mpl
boost::mpl::negate_impl	/usr/include/boost/units/dimension.hpp	/^struct negate_impl<boost::units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
boost::mpl::negate_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct negate_impl<boost::units::heterogeneous_system_dim_tag>$/;"	s	namespace:boost::mpl
boost::mpl::negate_impl	/usr/include/boost/units/static_rational.hpp	/^struct negate_impl<boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
boost::mpl::negate_impl::apply	/usr/include/boost/units/dim.hpp	/^    struct apply$/;"	s	struct:boost::mpl::negate_impl	access:public
boost::mpl::negate_impl::apply	/usr/include/boost/units/dimension.hpp	/^    struct apply$/;"	s	struct:boost::mpl::negate_impl	access:public
boost::mpl::negate_impl::apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::mpl::negate_impl	access:public
boost::mpl::negate_impl::apply	/usr/include/boost/units/static_rational.hpp	/^    struct apply {$/;"	s	struct:boost::mpl::negate_impl	access:public
boost::mpl::negate_impl::apply::type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T0::tag_type,typename mpl::negate<typename T0::value_type>::type> type;$/;"	t	struct:boost::mpl::negate_impl::apply	access:public
boost::mpl::negate_impl::apply::type	/usr/include/boost/units/dimension.hpp	/^        typedef T0 type;$/;"	t	struct:boost::mpl::negate_impl::apply	access:public
boost::mpl::negate_impl::apply::type	/usr/include/boost/units/heterogeneous_system.hpp	/^        typedef boost::units::heterogeneous_system_dim<typename T::tag_type, typename mpl::negate<typename T::value_type>::type> type;$/;"	t	struct:boost::mpl::negate_impl::apply	access:public
boost::mpl::negate_impl::apply::type	/usr/include/boost/units/static_rational.hpp	/^        >::type type;$/;"	t	struct:boost::mpl::negate_impl::apply	access:public
boost::mpl::plus_impl	/usr/include/boost/units/dim.hpp	/^struct plus_impl<boost::units::detail::dim_tag,boost::units::detail::dim_tag>$/;"	s	namespace:boost::mpl
boost::mpl::plus_impl	/usr/include/boost/units/dimension.hpp	/^struct plus_impl<boost::units::detail::dimension_list_tag,boost::units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
boost::mpl::plus_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct plus_impl<boost::units::heterogeneous_system_dim_tag, boost::units::heterogeneous_system_dim_tag>$/;"	s	namespace:boost::mpl
boost::mpl::plus_impl	/usr/include/boost/units/static_rational.hpp	/^struct plus_impl<boost::units::detail::static_rational_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
boost::mpl::plus_impl::apply	/usr/include/boost/units/dim.hpp	/^    struct apply$/;"	s	struct:boost::mpl::plus_impl	access:public
boost::mpl::plus_impl::apply	/usr/include/boost/units/dimension.hpp	/^    struct apply$/;"	s	struct:boost::mpl::plus_impl	access:public
boost::mpl::plus_impl::apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::mpl::plus_impl	access:public
boost::mpl::plus_impl::apply	/usr/include/boost/units/static_rational.hpp	/^    struct apply {$/;"	s	struct:boost::mpl::plus_impl	access:public
boost::mpl::plus_impl::apply::BOOST_STATIC_ASSERT	/usr/include/boost/units/dim.hpp	/^        BOOST_STATIC_ASSERT((boost::is_same<typename T0::tag_type,typename T1::tag_type>::value == true));$/;"	p	struct:boost::mpl::plus_impl::apply	access:public	signature:(boost::is_same<typename T0::tag_type,typename T1::tag_type>::value == true)
boost::mpl::plus_impl::apply::BOOST_STATIC_ASSERT	/usr/include/boost/units/dimension.hpp	/^        BOOST_STATIC_ASSERT((boost::is_same<T0,T1>::value == true));$/;"	p	struct:boost::mpl::plus_impl::apply	access:public	signature:(boost::is_same<T0,T1>::value == true)
boost::mpl::plus_impl::apply::type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T0::tag_type, typename mpl::plus<typename T0::value_type, typename T1::value_type>::type> type;$/;"	t	struct:boost::mpl::plus_impl::apply	access:public
boost::mpl::plus_impl::apply::type	/usr/include/boost/units/dimension.hpp	/^        typedef T0 type;$/;"	t	struct:boost::mpl::plus_impl::apply	access:public
boost::mpl::plus_impl::apply::type	/usr/include/boost/units/heterogeneous_system.hpp	/^        > type;$/;"	t	struct:boost::mpl::plus_impl::apply	access:public
boost::mpl::plus_impl::apply::type	/usr/include/boost/units/static_rational.hpp	/^        >::type type;$/;"	t	struct:boost::mpl::plus_impl::apply	access:public
boost::mpl::pop_front_impl	/usr/include/boost/units/detail/dimension_list.hpp	/^struct pop_front_impl<units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
boost::mpl::pop_front_impl::apply	/usr/include/boost/units/detail/dimension_list.hpp	/^    struct apply $/;"	s	struct:boost::mpl::pop_front_impl	access:public
boost::mpl::pop_front_impl::apply::type	/usr/include/boost/units/detail/dimension_list.hpp	/^        typedef typename L::next type;$/;"	t	struct:boost::mpl::pop_front_impl::apply	access:public
boost::mpl::push_front_impl	/usr/include/boost/units/detail/dimension_list.hpp	/^struct push_front_impl<units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
boost::mpl::push_front_impl::apply	/usr/include/boost/units/detail/dimension_list.hpp	/^    struct apply $/;"	s	struct:boost::mpl::push_front_impl	access:public
boost::mpl::push_front_impl::apply::type	/usr/include/boost/units/detail/dimension_list.hpp	/^        typedef units::list<T, L> type;$/;"	t	struct:boost::mpl::push_front_impl::apply	access:public
boost::mpl::size_impl	/usr/include/boost/units/detail/dimension_list.hpp	/^struct size_impl<units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
boost::mpl::size_impl::apply	/usr/include/boost/units/detail/dimension_list.hpp	/^    template<class L> struct apply : public L::size { };$/;"	s	struct:boost::mpl::size_impl	inherits:L::size	access:public
boost::mpl::times_impl	/usr/include/boost/units/dim.hpp	/^struct times_impl<boost::units::detail::dim_tag,boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
boost::mpl::times_impl	/usr/include/boost/units/dim.hpp	/^struct times_impl<boost::units::detail::static_rational_tag,boost::units::detail::dim_tag>$/;"	s	namespace:boost::mpl
boost::mpl::times_impl	/usr/include/boost/units/dimension.hpp	/^struct times_impl<boost::units::detail::dimension_list_tag,boost::units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
boost::mpl::times_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct times_impl<boost::units::heterogeneous_system_dim_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
boost::mpl::times_impl	/usr/include/boost/units/static_rational.hpp	/^struct times_impl<boost::units::detail::static_rational_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
boost::mpl::times_impl::apply	/usr/include/boost/units/dim.hpp	/^    struct apply$/;"	s	struct:boost::mpl::times_impl	access:public
boost::mpl::times_impl::apply	/usr/include/boost/units/dimension.hpp	/^    struct apply$/;"	s	struct:boost::mpl::times_impl	access:public
boost::mpl::times_impl::apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::mpl::times_impl	access:public
boost::mpl::times_impl::apply	/usr/include/boost/units/static_rational.hpp	/^    struct apply {$/;"	s	struct:boost::mpl::times_impl	access:public
boost::mpl::times_impl::apply::type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T0::tag_type, typename mpl::times<typename T0::value_type, T1>::type> type;$/;"	t	struct:boost::mpl::times_impl::apply	access:public
boost::mpl::times_impl::apply::type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T1::tag_type, typename mpl::times<T0, typename T1::value_type>::type> type;$/;"	t	struct:boost::mpl::times_impl::apply	access:public
boost::mpl::times_impl::apply::type	/usr/include/boost/units/dimension.hpp	/^        typedef typename boost::units::detail::merge_dimensions<T0,T1>::type type;$/;"	t	struct:boost::mpl::times_impl::apply	access:public
boost::mpl::times_impl::apply::type	/usr/include/boost/units/heterogeneous_system.hpp	/^        > type;$/;"	t	struct:boost::mpl::times_impl::apply	access:public
boost::mpl::times_impl::apply::type	/usr/include/boost/units/static_rational.hpp	/^        >::type type;$/;"	t	struct:boost::mpl::times_impl::apply	access:public
boost::serialization	/usr/include/boost/units/io.hpp	/^namespace serialization {$/;"	n	namespace:boost
boost::serialization::serialize	/usr/include/boost/units/io.hpp	/^inline void serialize(Archive& ar,boost::units::quantity<Unit,Y>& q,const unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar,boost::units::quantity<Unit,Y>& q,const unsigned int )
boost::serialization::serialize	/usr/include/boost/units/io.hpp	/^inline void serialize(Archive& ar,boost::units::unit<Dim,System>&,const unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar,boost::units::unit<Dim,System>&,const unsigned int )
boost::units	/usr/include/boost/units/absolute.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_dimension.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_unit.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/angle/radian.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/angle/revolution.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/angle/steradian.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/cgs/biot.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/cgs/centimeter.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/cgs/gram.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/foot.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/gill.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/grain.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/inch.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/league.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/mile.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/quart.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/stone.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/thou.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/imperial/ton.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/metric/day.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/metric/fermi.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/metric/hour.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/metric/micron.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/metric/minute.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/metric/ton.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/metric/year.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/si/ampere.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/si/candela.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/si/kelvin.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/si/kilogram.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/si/meter.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/si/mole.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/si/second.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/temperature/celsius.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/temperature/fahrenheit.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/cup.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/dram.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/foot.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/gallon.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/gill.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/grain.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/inch.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/mil.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/mile.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/minim.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/ounce.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/quart.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/base_units/us/ton.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/cmath.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/cmath.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/conversion.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/derived_dimension.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/absolute_impl.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/cmath_impl.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/conversion_impl.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/dim_impl.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/dimension_impl.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/dimension_list.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/linear_algebra.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/one.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/ordinal.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/push_front_if.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/push_front_or_add.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/sort.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/static_rational_power.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/unscale.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/detail/utility.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/dim.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/dimension.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/dimensionless_quantity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/dimensionless_type.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/dimensionless_unit.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/get_dimension.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/get_system.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/heterogeneous_system.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/homogeneous_system.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/io.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/is_dim.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/is_dimension_list.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/is_dimensionless.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/is_dimensionless_quantity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/is_dimensionless_unit.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/is_quantity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/is_quantity_of_dimension.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/is_quantity_of_system.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/is_unit.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/is_unit_of_dimension.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/is_unit_of_system.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/lambda.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/make_scaled_unit.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/make_system.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/operators.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/absorbed_dose.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/acceleration.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/action.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/activity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/amount.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/amount.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/angular_acceleration.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/angular_momentum.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/angular_velocity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/area.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/capacitance.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/conductance.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/conductivity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/current.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/current.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/dose_equivalent.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/dynamic_viscosity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/electric_charge.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/electric_potential.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/energy.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/energy_density.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/force.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/frequency.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/heat_capacity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/illuminance.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/impedance.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/inductance.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/kinematic_viscosity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/length.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/length.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/luminance.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/luminous_flux.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/luminous_intensity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/luminous_intensity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/magnetic_field_intensity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/magnetic_flux.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/magnetic_flux_density.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/mass.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/mass.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/mass_density.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/molar_energy.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/molar_heat_capacity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/moment_of_inertia.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/momentum.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/permeability.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/permittivity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/plane_angle.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/plane_angle.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/power.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/pressure.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/reluctance.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/resistance.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/resistivity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/solid_angle.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/solid_angle.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/specific_energy.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/specific_heat_capacity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/specific_volume.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/stress.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/surface_density.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/surface_tension.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/temperature.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/temperature.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/thermal_conductivity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/time.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/time.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/torque.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/velocity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/volume.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/physical_dimensions/wavenumber.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/pow.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/quantity.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/reduce_unit.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/scale.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/scaled_base_unit.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/static_rational.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/static_rational.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/abstract.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/angle/degrees.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/angle/gradians.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/angle/revolutions.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/acceleration.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/area.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/base.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/current.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/dimensionless.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/dynamic_viscosity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/energy.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/force.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/frequency.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/io.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/kinematic_viscosity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/length.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/mass.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/mass_density.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/momentum.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/power.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/pressure.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/time.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/velocity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/volume.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/detail/constants.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/absorbed_dose.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/acceleration.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/action.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/activity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/amount.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/angular_acceleration.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/angular_momentum.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/angular_velocity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/area.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/base.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/capacitance.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/conductance.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/conductivity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/current.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/dimensionless.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/dose_equivalent.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/dynamic_viscosity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/electric_charge.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/electric_potential.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/energy.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/force.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/frequency.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/illuminance.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/impedance.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/inductance.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/io.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/kinematic_viscosity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/length.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/luminous_flux.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/luminous_intensity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/magnetic_field_intensity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/magnetic_flux.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/magnetic_flux_density.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/mass.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/mass_density.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/moment_of_inertia.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/momentum.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/permeability.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/permittivity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/plane_angle.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/power.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/prefixes.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/pressure.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/reluctance.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/resistance.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/resistivity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/solid_angle.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/surface_density.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/surface_tension.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/temperature.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/time.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/torque.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/velocity.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/volume.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/si/wavenumber.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/temperature/celsius.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/unit.hpp	/^namespace units { $/;"	n	namespace:boost
boost::units	/usr/include/boost/units/unit.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units	/usr/include/boost/units/units_fwd.hpp	/^namespace units {$/;"	n	namespace:boost
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^abs BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^ceil BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^copysign BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^fabs BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^fdim BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^floor BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^fmax BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^fmin BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^fpclassify BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^hypot BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,const quantity<Unit,Y>& q2)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1,const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isfinite BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isgreater BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isgreaterequal BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isinf BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isless BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^islessequal BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^islessgreater BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isnan BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isnormal BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^isunordered BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^quantity<Unit,Y> nextafter BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^quantity<Unit,Y> nexttoward BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^round BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^signbit BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/cmath.hpp	/^trunc BOOST_PREVENT_MACRO_SUBSTITUTION (const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::absolute	/usr/include/boost/units/absolute.hpp	/^class absolute$/;"	c	namespace:boost::units
boost::units::absolute::absolute	/usr/include/boost/units/absolute.hpp	/^        absolute() : val_() { }$/;"	f	class:boost::units::absolute	access:public	signature:()
boost::units::absolute::absolute	/usr/include/boost/units/absolute.hpp	/^        absolute(const this_type& source) : val_(source.val_) { }$/;"	f	class:boost::units::absolute	access:public	signature:(const this_type& source)
boost::units::absolute::absolute	/usr/include/boost/units/absolute.hpp	/^        absolute(const value_type& val) : val_(val) { }$/;"	f	class:boost::units::absolute	access:public	signature:(const value_type& val)
boost::units::absolute::operator +=	/usr/include/boost/units/absolute.hpp	/^        const this_type& operator+=(const value_type& val)      { val_ += val; return *this; }$/;"	f	class:boost::units::absolute	access:public	signature:(const value_type& val)
boost::units::absolute::operator -=	/usr/include/boost/units/absolute.hpp	/^        const this_type& operator-=(const value_type& val)      { val_ -= val; return *this; }$/;"	f	class:boost::units::absolute	access:public	signature:(const value_type& val)
boost::units::absolute::operator =	/usr/include/boost/units/absolute.hpp	/^        this_type& operator=(const this_type& source)           { val_ = source.val_; return *this; }$/;"	f	class:boost::units::absolute	access:public	signature:(const this_type& source)
boost::units::absolute::this_type	/usr/include/boost/units/absolute.hpp	/^        typedef absolute<Y>     this_type;$/;"	t	class:boost::units::absolute	access:public
boost::units::absolute::val_	/usr/include/boost/units/absolute.hpp	/^        value_type   val_;$/;"	m	class:boost::units::absolute	access:private
boost::units::absolute::value	/usr/include/boost/units/absolute.hpp	/^        const value_type& value() const                         { return val_; }$/;"	f	class:boost::units::absolute	access:public	signature:() const
boost::units::absolute::value_type	/usr/include/boost/units/absolute.hpp	/^        typedef Y               value_type;$/;"	t	class:boost::units::absolute	access:public
boost::units::absorbed_dose_dimension	/usr/include/boost/units/physical_dimensions/absorbed_dose.hpp	/^                          time_base_dimension,-2>::type absorbed_dose_dimension;  $/;"	t	namespace:boost::units
boost::units::abstract	/usr/include/boost/units/systems/abstract.hpp	/^namespace abstract {$/;"	n	namespace:boost::units
boost::units::abstract::amount	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<amount_dimension,system>                amount;                 \/\/\/< abstract unit of amount$/;"	t	namespace:boost::units::abstract
boost::units::abstract::amount_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct amount_unit_tag : base_unit<amount_unit_tag, amount_dimension, -25> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
boost::units::abstract::current	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<current_dimension,system>               current;                \/\/\/< abstract unit of current$/;"	t	namespace:boost::units::abstract
boost::units::abstract::current_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct current_unit_tag : base_unit<current_unit_tag, current_dimension, -27> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
boost::units::abstract::length	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<length_dimension,system>                length;                 \/\/\/< abstract unit of length$/;"	t	namespace:boost::units::abstract
boost::units::abstract::length_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct length_unit_tag : base_unit<length_unit_tag, length_dimension, -30> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
boost::units::abstract::luminous_intensity	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<luminous_intensity_dimension,system>    luminous_intensity;     \/\/\/< abstract unit of luminous intensity$/;"	t	namespace:boost::units::abstract
boost::units::abstract::luminous_intensity_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct luminous_intensity_unit_tag : base_unit<luminous_intensity_unit_tag, luminous_intensity_dimension, -24> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
boost::units::abstract::mass	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<mass_dimension,system>                  mass;                   \/\/\/< abstract unit of mass$/;"	t	namespace:boost::units::abstract
boost::units::abstract::mass_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct mass_unit_tag : base_unit<mass_unit_tag, mass_dimension, -29> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
boost::units::abstract::plane_angle	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<plane_angle_dimension,system>           plane_angle;            \/\/\/< abstract unit of plane angle$/;"	t	namespace:boost::units::abstract
boost::units::abstract::plane_angle_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct plane_angle_unit_tag : base_unit<plane_angle_unit_tag, plane_angle_dimension, -23> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
boost::units::abstract::solid_angle	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<solid_angle_dimension,system>           solid_angle;            \/\/\/< abstract unit of solid angle$/;"	t	namespace:boost::units::abstract
boost::units::abstract::solid_angle_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct solid_angle_unit_tag : base_unit<solid_angle_unit_tag, solid_angle_dimension, -22> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
boost::units::abstract::system	/usr/include/boost/units/systems/abstract.hpp	/^>::type system;$/;"	t	namespace:boost::units::abstract
boost::units::abstract::temperature	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<temperature_dimension,system>           temperature;            \/\/\/< abstract unit of temperature$/;"	t	namespace:boost::units::abstract
boost::units::abstract::temperature_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct temperature_unit_tag : base_unit<temperature_unit_tag, temperature_dimension, -26> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
boost::units::abstract::time	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<time_dimension,system>                  time;                   \/\/\/< abstract unit of time$/;"	t	namespace:boost::units::abstract
boost::units::abstract::time_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct time_unit_tag : base_unit<time_unit_tag, time_dimension, -28> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
boost::units::acceleration_dimension	/usr/include/boost/units/physical_dimensions/acceleration.hpp	/^                          time_base_dimension,-2>::type acceleration_dimension;  $/;"	t	namespace:boost::units
boost::units::acos	/usr/include/boost/units/cmath.hpp	/^acos(const quantity<unit<dimensionless_type, heterogeneous_dimensionless_system>,Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<unit<dimensionless_type, heterogeneous_dimensionless_system>,Y>& val)
boost::units::acos	/usr/include/boost/units/cmath.hpp	/^acos(const quantity<unit<dimensionless_type, homogeneous_system<System> >,Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<unit<dimensionless_type, homogeneous_system<System> >,Y>& val)
boost::units::action_dimension	/usr/include/boost/units/physical_dimensions/action.hpp	/^                          time_base_dimension,-1>::type action_dimension;$/;"	t	namespace:boost::units
boost::units::activity_dimension	/usr/include/boost/units/physical_dimensions/activity.hpp	/^typedef derived_dimension<time_base_dimension,-1>::type activity_dimension; $/;"	t	namespace:boost::units
boost::units::add_typeof_helper	/usr/include/boost/units/operators.hpp	/^template<typename X,typename Y> struct add_typeof_helper        $/;"	s	namespace:boost::units
boost::units::add_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct add_typeof_helper< quantity<Unit1,X>,quantity<Unit2,Y> >$/;"	s	namespace:boost::units
boost::units::add_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct add_typeof_helper< quantity<unit<Dim, System>,X>,quantity<unit<Dim, System>,Y> >$/;"	s	namespace:boost::units
boost::units::add_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct add_typeof_helper< quantity<unit<Dim1, System1>,X>,quantity<unit<Dim2, System2>,Y> >$/;"	s	namespace:boost::units
boost::units::add_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct add_typeof_helper< unit<Dim,System>,unit<Dim,System> >$/;"	s	namespace:boost::units
boost::units::add_typeof_helper::type	/usr/include/boost/units/operators.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
boost::units::add_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                  type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
boost::units::add_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>         type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
boost::units::add_typeof_helper::type	/usr/include/boost/units/unit.hpp	/^    typedef unit<Dim,System> type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
boost::units::add_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename add_typeof_helper<Unit1,Unit2>::type   unit_type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
boost::units::add_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef unit<Dim, System>                      unit_type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
boost::units::add_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename add_typeof_helper<X,Y>::type           value_type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
boost::units::add_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename add_typeof_helper<X,Y>::type  value_type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
boost::units::affine_conversion_helper	/usr/include/boost/units/detail/absolute_impl.hpp	/^struct affine_conversion_helper : detail::undefined_affine_conversion_base { };$/;"	s	namespace:boost::units	inherits:detail::undefined_affine_conversion_base
boost::units::amount_base_dimension	/usr/include/boost/units/physical_dimensions/amount.hpp	/^struct amount_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
boost::units::amount_dimension	/usr/include/boost/units/physical_dimensions/amount.hpp	/^typedef amount_base_dimension::dimension_type     amount_dimension;$/;"	t	namespace:boost::units
boost::units::angle	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^namespace angle {$/;"	n	namespace:boost::units
boost::units::angle	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^namespace angle {$/;"	n	namespace:boost::units
boost::units::angle	/usr/include/boost/units/base_units/angle/radian.hpp	/^namespace angle {$/;"	n	namespace:boost::units
boost::units::angle	/usr/include/boost/units/base_units/angle/revolution.hpp	/^namespace angle {$/;"	n	namespace:boost::units
boost::units::angle	/usr/include/boost/units/base_units/angle/steradian.hpp	/^namespace angle {$/;"	n	namespace:boost::units
boost::units::angle::arcminute_base_unit	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^typedef scaled_base_unit<degree_base_unit, scale<60, static_rational<-1> > >  arcminute_base_unit;$/;"	t	namespace:boost::units::angle
boost::units::angle::arcsecond_base_unit	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^typedef scaled_base_unit<degree_base_unit, scale<3600, static_rational<-1> > >  arcsecond_base_unit;$/;"	t	namespace:boost::units::angle
boost::units::angle::radian_base_unit	/usr/include/boost/units/base_units/angle/radian.hpp	/^struct radian_base_unit : public base_unit<radian_base_unit, plane_angle_dimension, -2>$/;"	s	namespace:boost::units::angle	inherits:base_unit
boost::units::angle::radian_base_unit::name	/usr/include/boost/units/base_units/angle/radian.hpp	/^    static std::string name()   { return("radian"); }$/;"	f	struct:boost::units::angle::radian_base_unit	access:public	signature:()
boost::units::angle::radian_base_unit::symbol	/usr/include/boost/units/base_units/angle/radian.hpp	/^    static std::string symbol() { return("rad"); }$/;"	f	struct:boost::units::angle::radian_base_unit	access:public	signature:()
boost::units::angle::revolution_base_unit	/usr/include/boost/units/base_units/angle/revolution.hpp	/^typedef scaled_base_unit<degree_base_unit, scale<360, static_rational<1> > >  revolution_base_unit;$/;"	t	namespace:boost::units::angle
boost::units::angle::steradian_base_unit	/usr/include/boost/units/base_units/angle/steradian.hpp	/^struct steradian_base_unit : public base_unit<steradian_base_unit, solid_angle_dimension, -1>$/;"	s	namespace:boost::units::angle	inherits:base_unit
boost::units::angle::steradian_base_unit::name	/usr/include/boost/units/base_units/angle/steradian.hpp	/^    static std::string name()   { return("steradian"); }$/;"	f	struct:boost::units::angle::steradian_base_unit	access:public	signature:()
boost::units::angle::steradian_base_unit::symbol	/usr/include/boost/units/base_units/angle/steradian.hpp	/^    static std::string symbol() { return("sr"); }$/;"	f	struct:boost::units::angle::steradian_base_unit	access:public	signature:()
boost::units::angular_acceleration_dimension	/usr/include/boost/units/physical_dimensions/angular_acceleration.hpp	/^                          plane_angle_base_dimension,1>::type angular_acceleration_dimension; $/;"	t	namespace:boost::units
boost::units::angular_momentum_dimension	/usr/include/boost/units/physical_dimensions/angular_momentum.hpp	/^                          plane_angle_base_dimension,-1>::type angular_momentum_dimension;                $/;"	t	namespace:boost::units
boost::units::angular_velocity_dimension	/usr/include/boost/units/physical_dimensions/angular_velocity.hpp	/^                          plane_angle_base_dimension,1>::type angular_velocity_dimension; $/;"	t	namespace:boost::units
boost::units::area_dimension	/usr/include/boost/units/physical_dimensions/area.hpp	/^typedef derived_dimension<length_base_dimension,2>::type area_dimension; $/;"	t	namespace:boost::units
boost::units::asin	/usr/include/boost/units/cmath.hpp	/^asin(const quantity<unit<dimensionless_type, heterogeneous_dimensionless_system>,Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<unit<dimensionless_type, heterogeneous_dimensionless_system>,Y>& val)
boost::units::asin	/usr/include/boost/units/cmath.hpp	/^asin(const quantity<unit<dimensionless_type, homogeneous_system<System> >,Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<unit<dimensionless_type, homogeneous_system<System> >,Y>& val)
boost::units::astronomical	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^namespace astronomical {$/;"	n	namespace:boost::units
boost::units::astronomical	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^namespace astronomical {$/;"	n	namespace:boost::units
boost::units::astronomical	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^namespace astronomical {$/;"	n	namespace:boost::units
boost::units::astronomical	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^namespace astronomical {$/;"	n	namespace:boost::units
boost::units::astronomical::light_day_base_unit	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^typedef scaled_base_unit<boost::units::astronomical::light_second_base_unit, scale<86400, static_rational<1> > > light_day_base_unit;$/;"	t	namespace:boost::units::astronomical
boost::units::astronomical::light_hour_base_unit	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^typedef scaled_base_unit<boost::units::astronomical::light_second_base_unit, scale<3600, static_rational<1> > > light_hour_base_unit;$/;"	t	namespace:boost::units::astronomical
boost::units::astronomical::light_minute_base_unit	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^typedef scaled_base_unit<boost::units::astronomical::light_second_base_unit, scale<60, static_rational<1> > > light_minute_base_unit;$/;"	t	namespace:boost::units::astronomical
boost::units::astronomical::light_year_base_unit	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^typedef scaled_base_unit<boost::units::astronomical::light_second_base_unit, scale<31557600, static_rational<1> > > light_year_base_unit;$/;"	t	namespace:boost::units::astronomical
boost::units::atan	/usr/include/boost/units/cmath.hpp	/^atan(const quantity<unit<dimensionless_type, heterogeneous_dimensionless_system>, Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<unit<dimensionless_type, heterogeneous_dimensionless_system>, Y>& val)
boost::units::atan	/usr/include/boost/units/cmath.hpp	/^atan(const quantity<unit<dimensionless_type, homogeneous_system<System> >, Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<unit<dimensionless_type, homogeneous_system<System> >, Y>& val)
boost::units::atan2	/usr/include/boost/units/cmath.hpp	/^atan2(const quantity<unit<Dimension, heterogeneous_system<System> >, Y>& y,$/;"	f	namespace:boost::units	signature:(const quantity<unit<Dimension, heterogeneous_system<System> >, Y>& y, const quantity<unit<Dimension, heterogeneous_system<System> >, Y>& x)
boost::units::atan2	/usr/include/boost/units/cmath.hpp	/^atan2(const quantity<unit<Dimension, homogeneous_system<System> >, Y>& y,$/;"	f	namespace:boost::units	signature:(const quantity<unit<Dimension, homogeneous_system<System> >, Y>& y, const quantity<unit<Dimension, homogeneous_system<System> >, Y>& x)
boost::units::autoprefix_binary	/usr/include/boost/units/io.hpp	/^    autoprefix_binary = 8, \/\/\/ Scale and prefix with 2^10 (1024) multiples, 1024 as 1 kb.$/;"	e	enum:boost::units::autoprefix_mode
boost::units::autoprefix_engineering	/usr/include/boost/units/io.hpp	/^    autoprefix_engineering = 4, \/\/\/ Scale and prefix with 10^3 multiples, 1234.5 m output as 1.2345 km.$/;"	e	enum:boost::units::autoprefix_mode
boost::units::autoprefix_mask	/usr/include/boost/units/io.hpp	/^    autoprefix_mask = 12 \/\/\/  Bits used for autoprefix.$/;"	e	enum:boost::units::autoprefix_mode
boost::units::autoprefix_mode	/usr/include/boost/units/io.hpp	/^enum autoprefix_mode$/;"	g	namespace:boost::units
boost::units::autoprefix_none	/usr/include/boost/units/io.hpp	/^    autoprefix_none = 0, \/\/\/ No automatic prefix.$/;"	e	enum:boost::units::autoprefix_mode
boost::units::autoprefix_norm	/usr/include/boost/units/io.hpp	/^double autoprefix_norm(const T& arg);$/;"	p	namespace:boost::units	signature:(const T& arg)
boost::units::base_dimension	/usr/include/boost/units/base_dimension.hpp	/^class base_dimension : $/;"	c	namespace:boost::units	inherits:ordinal
boost::units::base_dimension::boost_units_is_registered	/usr/include/boost/units/base_dimension.hpp	/^        boost_units_is_registered(const units::base_dimension_ordinal<N>&) $/;"	f	class:boost::units::base_dimension	access:friend	signature:(const units::base_dimension_ordinal<N>&)
boost::units::base_dimension::boost_units_is_registered	/usr/include/boost/units/base_dimension.hpp	/^        boost_units_is_registered(const units::base_dimension_pair<Derived, N>&) $/;"	f	class:boost::units::base_dimension	access:friend	signature:(const units::base_dimension_pair<Derived, N>&)
boost::units::base_dimension::check_double_register	/usr/include/boost/units/base_dimension.hpp	/^        check_double_register(const units::base_dimension_ordinal<N>&) $/;"	f	class:boost::units::base_dimension	access:friend	signature:(const units::base_dimension_ordinal<N>&)
boost::units::base_dimension::dimension_type	/usr/include/boost/units/base_dimension.hpp	/^        typedef detail::unspecified dimension_type;$/;"	t	class:boost::units::base_dimension	access:public
boost::units::base_dimension::dimension_type	/usr/include/boost/units/base_dimension.hpp	/^        typedef list<dim<Derived,static_rational<1> >, dimensionless_type>    dimension_type;$/;"	t	class:boost::units::base_dimension	access:public
boost::units::base_dimension::this_type	/usr/include/boost/units/base_dimension.hpp	/^        typedef base_dimension                                                          this_type;$/;"	t	class:boost::units::base_dimension	access:public
boost::units::base_dimension::type	/usr/include/boost/units/base_dimension.hpp	/^        typedef Derived type;$/;"	t	class:boost::units::base_dimension	access:public
boost::units::base_dimension_ordinal	/usr/include/boost/units/base_dimension.hpp	/^template<long N> struct base_dimension_ordinal { };$/;"	s	namespace:boost::units
boost::units::base_dimension_pair	/usr/include/boost/units/base_dimension.hpp	/^template<class T, long N> struct base_dimension_pair { };$/;"	s	namespace:boost::units
boost::units::base_unit	/usr/include/boost/units/base_unit.hpp	/^class base_unit : $/;"	c	namespace:boost::units	inherits:ordinal
boost::units::base_unit::boost_units_is_base_unit_type	/usr/include/boost/units/base_unit.hpp	/^        typedef void boost_units_is_base_unit_type;$/;"	t	class:boost::units::base_unit	access:public
boost::units::base_unit::boost_units_unit_is_registered	/usr/include/boost/units/base_unit.hpp	/^        boost_units_unit_is_registered(const units::base_unit_ordinal<N>&) $/;"	f	class:boost::units::base_unit	access:friend	signature:(const units::base_unit_ordinal<N>&)
boost::units::base_unit::boost_units_unit_is_registered	/usr/include/boost/units/base_unit.hpp	/^        boost_units_unit_is_registered(const units::base_unit_pair<Derived, N>&) $/;"	f	class:boost::units::base_unit	access:friend	signature:(const units::base_unit_pair<Derived, N>&)
boost::units::base_unit::check_double_register	/usr/include/boost/units/base_unit.hpp	/^        check_double_register(const units::base_unit_ordinal<N>&) $/;"	f	class:boost::units::base_unit	access:friend	signature:(const units::base_unit_ordinal<N>&)
boost::units::base_unit::dimension_type	/usr/include/boost/units/base_unit.hpp	/^        typedef Dim                 dimension_type;$/;"	t	class:boost::units::base_unit	access:public
boost::units::base_unit::this_type	/usr/include/boost/units/base_unit.hpp	/^        typedef base_unit           this_type;$/;"	t	class:boost::units::base_unit	access:public
boost::units::base_unit::type	/usr/include/boost/units/base_unit.hpp	/^        typedef Derived type;$/;"	t	class:boost::units::base_unit	access:public
boost::units::base_unit::unit_type	/usr/include/boost/units/base_unit.hpp	/^        > unit_type;$/;"	t	class:boost::units::base_unit	access:public
boost::units::base_unit::unit_type	/usr/include/boost/units/base_unit.hpp	/^        typedef detail::unspecified unit_type;$/;"	t	class:boost::units::base_unit	access:public
boost::units::base_unit_converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct base_unit_converter : base_unit_converter_base<Source, Dest> { };$/;"	s	namespace:boost::units	inherits:base_unit_converter_base
boost::units::base_unit_converter_base	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct base_unit_converter_base : undefined_base_unit_converter_base {$/;"	s	namespace:boost::units	inherits:undefined_base_unit_converter_base
boost::units::base_unit_converter_base	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct base_unit_converter_base<Source, BOOST_UNITS_MAKE_HETEROGENEOUS_UNIT(Source, typename Source::dimension_type)>$/;"	s	namespace:boost::units
boost::units::base_unit_converter_base::is_defined	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static const bool is_defined = true;$/;"	m	struct:boost::units::base_unit_converter_base	access:public
boost::units::base_unit_converter_base::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef one type;$/;"	t	struct:boost::units::base_unit_converter_base	access:public
boost::units::base_unit_converter_base::value	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static type value() {$/;"	f	struct:boost::units::base_unit_converter_base	access:public	signature:()
boost::units::base_unit_info	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^struct base_unit_info<angle::arcminute_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^struct base_unit_info<angle::arcsecond_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/angle/revolution.hpp	/^struct base_unit_info<angle::revolution_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^struct base_unit_info<astronomical::light_day_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^struct base_unit_info<astronomical::light_hour_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^struct base_unit_info<astronomical::light_minute_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^struct base_unit_info<astronomical::light_year_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^struct base_unit_info<imperial::drachm_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^struct base_unit_info<imperial::fluid_ounce_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/foot.hpp	/^struct base_unit_info<imperial::foot_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^struct base_unit_info<imperial::furlong_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^struct base_unit_info<imperial::gallon_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/gill.hpp	/^struct base_unit_info<imperial::gill_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/grain.hpp	/^struct base_unit_info<imperial::grain_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^struct base_unit_info<imperial::hundredweight_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/inch.hpp	/^struct base_unit_info<imperial::inch_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/league.hpp	/^struct base_unit_info<imperial::league_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/mile.hpp	/^struct base_unit_info<imperial::mile_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^struct base_unit_info<imperial::ounce_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/quart.hpp	/^struct base_unit_info<imperial::quart_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^struct base_unit_info<imperial::quarter_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/stone.hpp	/^struct base_unit_info<imperial::stone_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/thou.hpp	/^struct base_unit_info<imperial::thou_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/imperial/ton.hpp	/^struct base_unit_info<imperial::ton_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^struct base_unit_info<metric::angstrom_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/metric/day.hpp	/^struct base_unit_info<metric::day_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/metric/fermi.hpp	/^struct base_unit_info<metric::fermi_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/metric/hour.hpp	/^struct base_unit_info<metric::hour_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/metric/micron.hpp	/^struct base_unit_info<metric::micron_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/metric/minute.hpp	/^struct base_unit_info<metric::minute_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^struct base_unit_info<metric::nautical_mile_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/metric/ton.hpp	/^struct base_unit_info<metric::ton_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/metric/year.hpp	/^struct base_unit_info<metric::year_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/cup.hpp	/^struct base_unit_info<us::cup_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/dram.hpp	/^struct base_unit_info<us::dram_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^struct base_unit_info<us::fluid_dram_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^struct base_unit_info<us::fluid_ounce_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/foot.hpp	/^struct base_unit_info<us::foot_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/gallon.hpp	/^struct base_unit_info<us::gallon_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/gill.hpp	/^struct base_unit_info<us::gill_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/grain.hpp	/^struct base_unit_info<us::grain_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^struct base_unit_info<us::hundredweight_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/inch.hpp	/^struct base_unit_info<us::inch_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/mil.hpp	/^struct base_unit_info<us::mil_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/mile.hpp	/^struct base_unit_info<us::mile_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/minim.hpp	/^struct base_unit_info<us::minim_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/ounce.hpp	/^struct base_unit_info<us::ounce_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/quart.hpp	/^struct base_unit_info<us::quart_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^struct base_unit_info<us::tablespoon_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^struct base_unit_info<us::teaspoon_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/base_units/us/ton.hpp	/^struct base_unit_info<us::ton_base_unit> {$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/io.hpp	/^struct base_unit_info$/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::amount_unit_tag> $/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::current_unit_tag> $/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::length_unit_tag> $/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::luminous_intensity_unit_tag> $/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::mass_unit_tag> $/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::plane_angle_unit_tag> $/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::solid_angle_unit_tag> $/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::temperature_unit_tag> $/;"	s	namespace:boost::units
boost::units::base_unit_info	/usr/include/boost/units/systems/abstract.hpp	/^struct base_unit_info<abstract::time_unit_tag> $/;"	s	namespace:boost::units
boost::units::base_unit_info::base_unit_info_primary_template	/usr/include/boost/units/io.hpp	/^    typedef void base_unit_info_primary_template;$/;"	t	struct:boost::units::base_unit_info	access:public
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^    static const char* name()   { return("arcminute"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^    static const char* name()   { return("arcsecond"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/angle/revolution.hpp	/^    static const char* name()   { return("revolution"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^    static const char* name()   { return("light day"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^    static const char* name()   { return("light hour"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^    static const char* name()   { return("light minute"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^    static const char* name()   { return("light year"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^    static const char* name()   { return("drachm"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^    static const char* name()   { return("fluid ounce (imp.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/foot.hpp	/^    static const char* name()   { return("foot"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^    static const char* name()   { return("furlong"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^    static const char* name()   { return("gallon (imp.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/gill.hpp	/^    static const char* name()   { return("gill (imp.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/grain.hpp	/^    static const char* name()   { return("grain"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^    static const char* name()   { return("hundredweight"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/inch.hpp	/^    static const char* name()   { return("inch"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/league.hpp	/^    static const char* name()   { return("league"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/mile.hpp	/^    static const char* name()   { return("mile"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^    static const char* name()   { return("ounce"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/quart.hpp	/^    static const char* name()   { return("quart (imp.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^    static const char* name()   { return("quarter"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/stone.hpp	/^    static const char* name()   { return("stone"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/thou.hpp	/^    static const char* name()   { return("thou"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/imperial/ton.hpp	/^    static const char* name()   { return("long ton"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^    static const char* name()   { return("angstrom"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/metric/day.hpp	/^    static const char* name()   { return("day"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/metric/fermi.hpp	/^    static const char* name()   { return("fermi"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/metric/hour.hpp	/^    static const char* name()   { return("hour"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/metric/micron.hpp	/^    static const char* name()   { return("micron"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/metric/minute.hpp	/^    static const char* name()   { return("minute"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^    static const char* name()   { return("nautical mile"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/metric/ton.hpp	/^    static const char* name()   { return("metric ton"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/metric/year.hpp	/^    static const char* name()   { return("Julian year"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/cup.hpp	/^    static const char* name()   { return("cup"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/dram.hpp	/^    static const char* name()   { return("dram (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^    static const char* name()   { return("fluid dram (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^    static const char* name()   { return("fluid ounce (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/foot.hpp	/^    static const char* name()   { return("foot"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/gallon.hpp	/^    static const char* name()   { return("gallon (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/gill.hpp	/^    static const char* name()   { return("gill (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/grain.hpp	/^    static const char* name()   { return("grain"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^    static const char* name()   { return("hundredweight (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/inch.hpp	/^    static const char* name()   { return("inch"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/mil.hpp	/^    static const char* name()   { return("mil"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/mile.hpp	/^    static const char* name()   { return("mile"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/minim.hpp	/^    static const char* name()   { return("minim (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/ounce.hpp	/^    static const char* name()   { return("ounce"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/quart.hpp	/^    static const char* name()   { return("quart (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^    static const char* name()   { return("tablespoon"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^    static const char* name()   { return("teaspoon"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/base_units/us/ton.hpp	/^    static const char* name()   { return("short ton"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/io.hpp	/^    static std::string name()$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Amount]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Electric Current]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Length]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Luminous Intensity]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Mass]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Plane Angle]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Solid Angle]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Temperature]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Time]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^    static const char* symbol() { return("'"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^    static const char* symbol() { return("\\""); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/angle/revolution.hpp	/^    static const char* symbol() { return("rev"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^    static const char* symbol() { return("ldy"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^    static const char* symbol() { return("lhr"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^    static const char* symbol() { return("lmn"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^    static const char* symbol() { return("ly"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^    static const char* symbol() { return("drachm"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^    static const char* symbol() { return("fl oz"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/foot.hpp	/^    static const char* symbol() { return("ft"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^    static const char* symbol() { return("furlong"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^    static const char* symbol() { return("gal"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/gill.hpp	/^    static const char* symbol() { return("gill"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/grain.hpp	/^    static const char* symbol() { return("grain"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^    static const char* symbol() { return("cwt"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/inch.hpp	/^    static const char* symbol() { return("in"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/league.hpp	/^    static const char* symbol() { return("league"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/mile.hpp	/^    static const char* symbol() { return("mi"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^    static const char* symbol() { return("oz"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/quart.hpp	/^    static const char* symbol() { return("qt"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^    static const char* symbol() { return("quarter"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/stone.hpp	/^    static const char* symbol() { return("st"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/thou.hpp	/^    static const char* symbol() { return("thou"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/imperial/ton.hpp	/^    static const char* symbol() { return("t"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^    static const char* symbol() { return("A"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/metric/day.hpp	/^    static const char* symbol() { return("d"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/metric/fermi.hpp	/^    static const char* symbol() { return("fm"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/metric/hour.hpp	/^    static const char* symbol() { return("h"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/metric/micron.hpp	/^    static const char* symbol() { return("u"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/metric/minute.hpp	/^    static const char* symbol() { return("min"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^    static const char* symbol() { return("nmi"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/metric/ton.hpp	/^    static const char* symbol() { return("t"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/metric/year.hpp	/^    static const char* symbol() { return("yr"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/cup.hpp	/^    static const char* symbol() { return("c"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/dram.hpp	/^    static const char* symbol() { return("dr"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^    static const char* symbol() { return("fl dr"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^    static const char* symbol() { return("fl oz"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/foot.hpp	/^    static const char* symbol() { return("ft"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/gallon.hpp	/^    static const char* symbol() { return("gal"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/gill.hpp	/^    static const char* symbol() { return("gi"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/grain.hpp	/^    static const char* symbol() { return("gr"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^    static const char* symbol() { return("cwt"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/inch.hpp	/^    static const char* symbol() { return("in"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/mil.hpp	/^    static const char* symbol() { return("mil"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/mile.hpp	/^    static const char* symbol() { return("mi"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/minim.hpp	/^    static const char* symbol() { return("minim"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/ounce.hpp	/^    static const char* symbol() { return("oz"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/quart.hpp	/^    static const char* symbol() { return("qt"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^    static const char* symbol() { return("tbsp"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^    static const char* symbol() { return("tsp"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/base_units/us/ton.hpp	/^    static const char* symbol() { return("t"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/io.hpp	/^    static std::string symbol()$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[I]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[J]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[L]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[M]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[N]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[QP]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[QS]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[T]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_info::symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[Theta]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
boost::units::base_unit_ordinal	/usr/include/boost/units/base_unit.hpp	/^template<long N> struct base_unit_ordinal { };$/;"	s	namespace:boost::units
boost::units::base_unit_pair	/usr/include/boost/units/base_unit.hpp	/^template<class T, long N> struct base_unit_pair { };$/;"	s	namespace:boost::units
boost::units::binary_prefix	/usr/include/boost/units/io.hpp	/^inline std::ios_base& binary_prefix(std::ios_base& ios)$/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
boost::units::boost_units_is_registered	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^boost_units_is_registered(const T&) $/;"	f	namespace:boost::units	signature:(const T&)
boost::units::boost_units_unit_is_registered	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^boost_units_unit_is_registered(const T&) $/;"	f	namespace:boost::units	signature:(const T&)
boost::units::capacitance_dimension	/usr/include/boost/units/physical_dimensions/capacitance.hpp	/^                          current_base_dimension,2>::type capacitance_dimension;            $/;"	t	namespace:boost::units
boost::units::celsius	/usr/include/boost/units/systems/temperature/celsius.hpp	/^namespace celsius {$/;"	n	namespace:boost::units
boost::units::celsius::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/temperature/celsius.hpp	/^BOOST_UNITS_STATIC_CONSTANT(degree,temperature);$/;"	p	namespace:boost::units::celsius	signature:(degree,temperature)
boost::units::celsius::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/temperature/celsius.hpp	/^BOOST_UNITS_STATIC_CONSTANT(degrees,temperature);$/;"	p	namespace:boost::units::celsius	signature:(degrees,temperature)
boost::units::celsius::system	/usr/include/boost/units/systems/temperature/celsius.hpp	/^typedef make_system<boost::units::temperature::celsius_base_unit>::type system;$/;"	t	namespace:boost::units::celsius
boost::units::celsius::temperature	/usr/include/boost/units/systems/temperature/celsius.hpp	/^typedef unit<temperature_dimension,system>   temperature;$/;"	t	namespace:boost::units::celsius
boost::units::cgs	/usr/include/boost/units/base_units/cgs/biot.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/base_units/cgs/centimeter.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/base_units/cgs/gram.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/acceleration.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/area.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/base.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/current.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/dimensionless.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/dynamic_viscosity.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/energy.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/force.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/frequency.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/kinematic_viscosity.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/length.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/mass.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/mass_density.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/momentum.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/power.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/pressure.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/time.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/velocity.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/volume.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/acceleration.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gal,acceleration);  $/;"	p	namespace:boost::units::cgs	signature:(gal,acceleration)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/acceleration.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gals,acceleration); $/;"	p	namespace:boost::units::cgs	signature:(gals,acceleration)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_centimeter,area);$/;"	p	namespace:boost::units::cgs	signature:(square_centimeter,area)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_centimeters,area);$/;"	p	namespace:boost::units::cgs	signature:(square_centimeters,area)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_centimetre,area);$/;"	p	namespace:boost::units::cgs	signature:(square_centimetre,area)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_centimetres,area);$/;"	p	namespace:boost::units::cgs	signature:(square_centimetres,area)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/current.hpp	/^BOOST_UNITS_STATIC_CONSTANT(biot,current);$/;"	p	namespace:boost::units::cgs	signature:(biot,current)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/current.hpp	/^BOOST_UNITS_STATIC_CONSTANT(biots,current);$/;"	p	namespace:boost::units::cgs	signature:(biots,current)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/dimensionless.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cgs_dimensionless,dimensionless);$/;"	p	namespace:boost::units::cgs	signature:(cgs_dimensionless,dimensionless)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/dynamic_viscosity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(poise,dynamic_viscosity);    $/;"	p	namespace:boost::units::cgs	signature:(poise,dynamic_viscosity)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/energy.hpp	/^BOOST_UNITS_STATIC_CONSTANT(erg,energy);$/;"	p	namespace:boost::units::cgs	signature:(erg,energy)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/energy.hpp	/^BOOST_UNITS_STATIC_CONSTANT(ergs,energy);$/;"	p	namespace:boost::units::cgs	signature:(ergs,energy)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/force.hpp	/^BOOST_UNITS_STATIC_CONSTANT(dyne,force);$/;"	p	namespace:boost::units::cgs	signature:(dyne,force)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/force.hpp	/^BOOST_UNITS_STATIC_CONSTANT(dynes,force);$/;"	p	namespace:boost::units::cgs	signature:(dynes,force)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/kinematic_viscosity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(stoke,kinematic_viscosity);           $/;"	p	namespace:boost::units::cgs	signature:(stoke,kinematic_viscosity)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/kinematic_viscosity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(stokes,kinematic_viscosity);    $/;"	p	namespace:boost::units::cgs	signature:(stokes,kinematic_viscosity)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimeter,length); $/;"	p	namespace:boost::units::cgs	signature:(centimeter,length)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimeters,length);    $/;"	p	namespace:boost::units::cgs	signature:(centimeters,length)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimetre,length); $/;"	p	namespace:boost::units::cgs	signature:(centimetre,length)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimetres,length);    $/;"	p	namespace:boost::units::cgs	signature:(centimetres,length)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gram,mass); $/;"	p	namespace:boost::units::cgs	signature:(gram,mass)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gramme,mass);   $/;"	p	namespace:boost::units::cgs	signature:(gramme,mass)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(grammes,mass);  $/;"	p	namespace:boost::units::cgs	signature:(grammes,mass)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(grams,mass);    $/;"	p	namespace:boost::units::cgs	signature:(grams,mass)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/pressure.hpp	/^BOOST_UNITS_STATIC_CONSTANT(barye,pressure);    $/;"	p	namespace:boost::units::cgs	signature:(barye,pressure)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/pressure.hpp	/^BOOST_UNITS_STATIC_CONSTANT(baryes,pressure);   $/;"	p	namespace:boost::units::cgs	signature:(baryes,pressure)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/time.hpp	/^BOOST_UNITS_STATIC_CONSTANT(second,time);   $/;"	p	namespace:boost::units::cgs	signature:(second,time)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/time.hpp	/^BOOST_UNITS_STATIC_CONSTANT(seconds,time);  $/;"	p	namespace:boost::units::cgs	signature:(seconds,time)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimeter_per_second,velocity);    $/;"	p	namespace:boost::units::cgs	signature:(centimeter_per_second,velocity)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimeters_per_second,velocity);   $/;"	p	namespace:boost::units::cgs	signature:(centimeters_per_second,velocity)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimetre_per_second,velocity);    $/;"	p	namespace:boost::units::cgs	signature:(centimetre_per_second,velocity)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(centimetres_per_second,velocity);   $/;"	p	namespace:boost::units::cgs	signature:(centimetres_per_second,velocity)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_centimeter,volume);   $/;"	p	namespace:boost::units::cgs	signature:(cubic_centimeter,volume)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_centimeters,volume);  $/;"	p	namespace:boost::units::cgs	signature:(cubic_centimeters,volume)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_centimetre,volume);   $/;"	p	namespace:boost::units::cgs	signature:(cubic_centimetre,volume)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_centimetres,volume);  $/;"	p	namespace:boost::units::cgs	signature:(cubic_centimetres,volume)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kayser,wavenumber); $/;"	p	namespace:boost::units::cgs	signature:(kayser,wavenumber)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kaysers,wavenumber);    $/;"	p	namespace:boost::units::cgs	signature:(kaysers,wavenumber)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_centimeter,wavenumber);  $/;"	p	namespace:boost::units::cgs	signature:(reciprocal_centimeter,wavenumber)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_centimeters,wavenumber); $/;"	p	namespace:boost::units::cgs	signature:(reciprocal_centimeters,wavenumber)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_centimetre,wavenumber);  $/;"	p	namespace:boost::units::cgs	signature:(reciprocal_centimetre,wavenumber)
boost::units::cgs::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_centimetres,wavenumber); $/;"	p	namespace:boost::units::cgs	signature:(reciprocal_centimetres,wavenumber)
boost::units::cgs::acceleration	/usr/include/boost/units/systems/cgs/acceleration.hpp	/^typedef unit<acceleration_dimension,cgs::system>     acceleration;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::area	/usr/include/boost/units/systems/cgs/area.hpp	/^typedef unit<area_dimension,cgs::system>     area;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::biot_base_unit	/usr/include/boost/units/base_units/cgs/biot.hpp	/^typedef scaled_base_unit<boost::units::si::ampere_base_unit, scale<10, static_rational<-1> > > biot_base_unit;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::centimeter_base_unit	/usr/include/boost/units/base_units/cgs/centimeter.hpp	/^typedef scaled_base_unit<boost::units::si::meter_base_unit, scale<10, static_rational<-2> > > centimeter_base_unit;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::current	/usr/include/boost/units/systems/cgs/current.hpp	/^typedef unit<current_dimension,cgs::system>   current;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::dimensionless	/usr/include/boost/units/systems/cgs/base.hpp	/^typedef unit<dimensionless_type,system>         dimensionless;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::dynamic_viscosity	/usr/include/boost/units/systems/cgs/dynamic_viscosity.hpp	/^typedef unit<dynamic_viscosity_dimension,cgs::system>     dynamic_viscosity;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::energy	/usr/include/boost/units/systems/cgs/energy.hpp	/^typedef unit<energy_dimension,cgs::system>   energy;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::force	/usr/include/boost/units/systems/cgs/force.hpp	/^typedef unit<force_dimension,cgs::system>        force;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::frequency	/usr/include/boost/units/systems/cgs/frequency.hpp	/^typedef unit<frequency_dimension,cgs::system>        frequency;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::gram_base_unit	/usr/include/boost/units/base_units/cgs/gram.hpp	/^struct gram_base_unit : public base_unit<gram_base_unit, mass_dimension, -8>$/;"	s	namespace:boost::units::cgs	inherits:base_unit
boost::units::cgs::gram_base_unit::name	/usr/include/boost/units/base_units/cgs/gram.hpp	/^    static std::string name()    { return("gram"); }$/;"	f	struct:boost::units::cgs::gram_base_unit	access:public	signature:()
boost::units::cgs::gram_base_unit::symbol	/usr/include/boost/units/base_units/cgs/gram.hpp	/^    static std::string symbol() { return("g"); }$/;"	f	struct:boost::units::cgs::gram_base_unit	access:public	signature:()
boost::units::cgs::kinematic_viscosity	/usr/include/boost/units/systems/cgs/kinematic_viscosity.hpp	/^typedef unit<kinematic_viscosity_dimension,cgs::system>     kinematic_viscosity;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::length	/usr/include/boost/units/systems/cgs/length.hpp	/^typedef unit<length_dimension,cgs::system>   length;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::mass	/usr/include/boost/units/systems/cgs/mass.hpp	/^typedef unit<mass_dimension,cgs::system>     mass;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::mass_density	/usr/include/boost/units/systems/cgs/mass_density.hpp	/^typedef unit<mass_density_dimension,cgs::system>     mass_density;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::momentum	/usr/include/boost/units/systems/cgs/momentum.hpp	/^typedef unit<momentum_dimension,cgs::system>     momentum;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::power	/usr/include/boost/units/systems/cgs/power.hpp	/^typedef unit<power_dimension,cgs::system>    power;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::pressure	/usr/include/boost/units/systems/cgs/pressure.hpp	/^typedef unit<pressure_dimension,cgs::system>     pressure;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::system	/usr/include/boost/units/systems/cgs/base.hpp	/^                    biot_base_unit>::type system;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::time	/usr/include/boost/units/systems/cgs/time.hpp	/^typedef unit<time_dimension,cgs::system>     time;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::velocity	/usr/include/boost/units/systems/cgs/velocity.hpp	/^typedef unit<velocity_dimension,cgs::system>     velocity;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::volume	/usr/include/boost/units/systems/cgs/volume.hpp	/^typedef unit<volume_dimension,cgs::system>   volume;$/;"	t	namespace:boost::units::cgs
boost::units::cgs::wavenumber	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^typedef unit<wavenumber_dimension,cgs::system>   wavenumber;$/;"	t	namespace:boost::units::cgs
boost::units::check_base_dimension	/usr/include/boost/units/base_dimension.hpp	/^struct check_base_dimension {$/;"	s	namespace:boost::units
boost::units::check_base_dimension::value	/usr/include/boost/units/base_dimension.hpp	/^        value = $/;"	e	enum:boost::units::check_base_dimension::__anon1
boost::units::check_base_unit	/usr/include/boost/units/base_unit.hpp	/^struct check_base_unit {$/;"	s	namespace:boost::units
boost::units::check_base_unit::value	/usr/include/boost/units/base_unit.hpp	/^        value =$/;"	e	enum:boost::units::check_base_unit::__anon2
boost::units::conductance_dimension	/usr/include/boost/units/physical_dimensions/conductance.hpp	/^                          current_base_dimension,2>::type conductance_dimension;   $/;"	t	namespace:boost::units
boost::units::conductivity_dimension	/usr/include/boost/units/physical_dimensions/conductivity.hpp	/^                          current_base_dimension,2>::type conductivity_dimension;          $/;"	t	namespace:boost::units
boost::units::constant	/usr/include/boost/units/systems/detail/constants.hpp	/^struct constant $/;"	s	namespace:boost::units
boost::units::constant::lower_bound	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type lower_bound() const { return Base().lower_bound(); } $/;"	f	struct:boost::units::constant	access:public	signature:() const
boost::units::constant::operator value_type	/usr/include/boost/units/systems/detail/constants.hpp	/^    operator value_type() const    { return Base().value(); } $/;"	f	struct:boost::units::constant	access:public	signature:() const
boost::units::constant::uncertainty	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type uncertainty() const { return Base().uncertainty(); } $/;"	f	struct:boost::units::constant	access:public	signature:() const
boost::units::constant::upper_bound	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type upper_bound() const { return Base().upper_bound(); } $/;"	f	struct:boost::units::constant	access:public	signature:() const
boost::units::constant::value	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type value() const       { return Base().value(); } $/;"	f	struct:boost::units::constant	access:public	signature:() const
boost::units::constant::value_type	/usr/include/boost/units/systems/detail/constants.hpp	/^    typedef typename Base::value_type value_type; $/;"	t	struct:boost::units::constant	access:public
boost::units::conversion_factor	/usr/include/boost/units/conversion.hpp	/^conversion_factor(const FromUnit&,const ToUnit&)$/;"	f	namespace:boost::units	signature:(const FromUnit&,const ToUnit&)
boost::units::conversion_helper	/usr/include/boost/units/conversion.hpp	/^struct conversion_helper$/;"	s	namespace:boost::units
boost::units::conversion_helper	/usr/include/boost/units/detail/absolute_impl.hpp	/^struct conversion_helper<quantity<absolute<Unit1>, T1>, quantity<absolute<Unit2>, T2> >$/;"	s	namespace:boost::units
boost::units::conversion_helper	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_helper<quantity<Unit1, T1>, quantity<Unit2, T2> >$/;"	s	namespace:boost::units
boost::units::conversion_helper::convert	/usr/include/boost/units/conversion.hpp	/^    static To convert(const From&);$/;"	p	struct:boost::units::conversion_helper	access:public	signature:(const From&)
boost::units::conversion_helper::convert	/usr/include/boost/units/detail/absolute_impl.hpp	/^    static to_quantity_type convert(const from_quantity_type& source)$/;"	f	struct:boost::units::conversion_helper	access:public	signature:(const from_quantity_type& source)
boost::units::conversion_helper::convert	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static destination_type convert(const quantity<Unit1, T1>& source)$/;"	f	struct:boost::units::conversion_helper	access:public	signature:(const quantity<Unit1, T1>& source)
boost::units::conversion_helper::destination_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef quantity<Unit2, T2> destination_type;$/;"	t	struct:boost::units::conversion_helper	access:public
boost::units::conversion_helper::from_quantity_type	/usr/include/boost/units/detail/absolute_impl.hpp	/^    typedef quantity<absolute<Unit1>, T1> from_quantity_type;$/;"	t	struct:boost::units::conversion_helper	access:public
boost::units::conversion_helper::to_quantity_type	/usr/include/boost/units/detail/absolute_impl.hpp	/^    typedef quantity<absolute<Unit2>, T2> to_quantity_type;$/;"	t	struct:boost::units::conversion_helper	access:public
boost::units::cos	/usr/include/boost/units/cmath.hpp	/^cos(const quantity<si::plane_angle,Y>& theta)$/;"	f	namespace:boost::units	signature:(const quantity<si::plane_angle,Y>& theta)
boost::units::cos	/usr/include/boost/units/cmath.hpp	/^cos(const quantity<unit<plane_angle_dimension,System>,Y>& theta)$/;"	f	namespace:boost::units	signature:(const quantity<unit<plane_angle_dimension,System>,Y>& theta)
boost::units::current_base_dimension	/usr/include/boost/units/physical_dimensions/current.hpp	/^struct current_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
boost::units::current_dimension	/usr/include/boost/units/physical_dimensions/current.hpp	/^typedef current_base_dimension::dimension_type    current_dimension;$/;"	t	namespace:boost::units
boost::units::degree	/usr/include/boost/units/systems/angle/degrees.hpp	/^namespace degree {$/;"	n	namespace:boost::units
boost::units::degree::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/angle/degrees.hpp	/^BOOST_UNITS_STATIC_CONSTANT(degree,plane_angle);$/;"	p	namespace:boost::units::degree	signature:(degree,plane_angle)
boost::units::degree::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/angle/degrees.hpp	/^BOOST_UNITS_STATIC_CONSTANT(degrees,plane_angle);$/;"	p	namespace:boost::units::degree	signature:(degrees,plane_angle)
boost::units::degree::dimensionless	/usr/include/boost/units/systems/angle/degrees.hpp	/^typedef unit<dimensionless_type,system>         dimensionless;$/;"	t	namespace:boost::units::degree
boost::units::degree::plane_angle	/usr/include/boost/units/systems/angle/degrees.hpp	/^typedef unit<plane_angle_dimension,system>      plane_angle;           \/\/\/< angle degree unit constant$/;"	t	namespace:boost::units::degree
boost::units::degree::system	/usr/include/boost/units/systems/angle/degrees.hpp	/^typedef make_system<boost::units::angle::degree_base_unit>::type system;$/;"	t	namespace:boost::units::degree
boost::units::derived_dimension	/usr/include/boost/units/derived_dimension.hpp	/^struct derived_dimension$/;"	s	namespace:boost::units
boost::units::derived_dimension	/usr/include/boost/units/derived_dimension.hpp	/^struct derived_dimension<$/;"	s	namespace:boost::units
boost::units::derived_dimension::type	/usr/include/boost/units/derived_dimension.hpp	/^                         list< dim< DT2,static_rational<E2> >, dimensionless_type > > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
boost::units::derived_dimension::type	/usr/include/boost/units/derived_dimension.hpp	/^                         list< dim< DT3,static_rational<E3> >, dimensionless_type > > > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
boost::units::derived_dimension::type	/usr/include/boost/units/derived_dimension.hpp	/^                         list< dim< DT4,static_rational<E4> >, dimensionless_type > > > > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
boost::units::derived_dimension::type	/usr/include/boost/units/derived_dimension.hpp	/^                         list< dim< DT5,static_rational<E5> >, dimensionless_type > > > > > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
boost::units::derived_dimension::type	/usr/include/boost/units/derived_dimension.hpp	/^                         list< dim< DT6,static_rational<E6> >, dimensionless_type > > > > > > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
boost::units::derived_dimension::type	/usr/include/boost/units/derived_dimension.hpp	/^                         list< dim< DT7,static_rational<E7> >, dimensionless_type > > > > > > > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
boost::units::derived_dimension::type	/usr/include/boost/units/derived_dimension.hpp	/^    make_dimension_list< list< dim< DT1,static_rational<E1> >, dimensionless_type > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
boost::units::derived_dimension::type	/usr/include/boost/units/derived_dimension.hpp	/^    typedef detail::unspecified type;$/;"	t	struct:boost::units::derived_dimension	access:public
boost::units::detail	/usr/include/boost/units/detail/absolute_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/cmath_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/conversion_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/dim_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/dimension_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/dimension_list.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/linear_algebra.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/ordinal.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/push_front_if.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/push_front_or_add.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/sort.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/static_rational_power.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/detail/utility.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/dim.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/dimensionless_type.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/heterogeneous_system.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/homogeneous_system.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/io.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/make_system.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/quantity.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail	/usr/include/boost/units/static_rational.hpp	/^namespace detail {$/;"	n	namespace:boost::units
boost::units::detail::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline Y fdim BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
boost::units::detail::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline Y fmax BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
boost::units::detail::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline Y fmin BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
boost::units::detail::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline Y trunc BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& val)$/;"	f	namespace:boost::units::detail	signature:(const Y& val)
boost::units::detail::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline bool isgreater BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
boost::units::detail::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline bool isgreaterequal BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
boost::units::detail::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline bool isless BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
boost::units::detail::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline bool islessequal BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
boost::units::detail::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline bool islessgreater BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
boost::units::detail::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/units/detail/cmath_impl.hpp	/^inline bool isunordered BOOST_PREVENT_MACRO_SUBSTITUTION(const Y& v1,const Y& v2)$/;"	f	namespace:boost::units::detail	signature:(const Y& v1,const Y& v2)
boost::units::detail::__anon3::xalloc_key_initializer	/usr/include/boost/units/io.hpp	/^xalloc_key_initializer_t xalloc_key_initializer;$/;"	m	namespace:boost::units::detail::__anon3
boost::units::detail::add_zeroes_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct add_zeroes_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::add_zeroes_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct add_zeroes_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::add_zeroes_impl::BOOST_MPL_ASSERT_MSG	/usr/include/boost/units/detail/linear_algebra.hpp	/^    BOOST_MPL_ASSERT_MSG((N > 0), base_units_are_probably_not_linearly_independent, (void));$/;"	p	struct:boost::units::detail::add_zeroes_impl	access:public	signature:(N > 0), base_units_are_probably_not_linearly_independent, (void)
boost::units::detail::add_zeroes_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::add_zeroes_impl	access:public
boost::units::detail::add_zeroes_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > type;$/;"	t	struct:boost::units::detail::add_zeroes_impl::apply	access:public
boost::units::detail::add_zeroes_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef T type;$/;"	t	struct:boost::units::detail::add_zeroes_impl::apply	access:public
boost::units::detail::affine_conversion_impl	/usr/include/boost/units/detail/absolute_impl.hpp	/^struct affine_conversion_impl<false, true>$/;"	s	namespace:boost::units::detail
boost::units::detail::affine_conversion_impl	/usr/include/boost/units/detail/absolute_impl.hpp	/^struct affine_conversion_impl<true, ReverseIsDefined>$/;"	s	namespace:boost::units::detail
boost::units::detail::affine_conversion_impl::apply	/usr/include/boost/units/detail/absolute_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::affine_conversion_impl	access:public
boost::units::detail::affine_conversion_impl::apply	/usr/include/boost/units/detail/absolute_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::affine_conversion_impl	access:public
boost::units::detail::affine_conversion_impl::apply::value	/usr/include/boost/units/detail/absolute_impl.hpp	/^        static T1 value(const T0& t0)$/;"	f	struct:boost::units::detail::affine_conversion_impl::apply	access:public	signature:(const T0& t0)
boost::units::detail::base_unit_name_string	/usr/include/boost/units/io.hpp	/^inline std::string base_unit_name_string(const T&)$/;"	f	namespace:boost::units::detail	signature:(const T&)
boost::units::detail::base_unit_symbol_string	/usr/include/boost/units/io.hpp	/^inline std::string base_unit_symbol_string(const T&)$/;"	f	namespace:boost::units::detail	signature:(const T&)
boost::units::detail::begins_with_dimension	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct begins_with_dimension {$/;"	s	namespace:boost::units::detail
boost::units::detail::begins_with_dimension	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct begins_with_dimension<dimensionless_type> {$/;"	s	namespace:boost::units::detail
boost::units::detail::begins_with_dimension::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply : $/;"	s	struct:boost::units::detail::begins_with_dimension	inherits:boost::is_same	access:public
boost::units::detail::begins_with_dimension::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply : mpl::false_ {};$/;"	s	struct:boost::units::detail::begins_with_dimension	inherits:mpl::false_	access:public
boost::units::detail::binary_prefixes	/usr/include/boost/units/io.hpp	/^        dimensionless_type> > > > > > > binary_prefixes;$/;"	t	namespace:boost::units::detail
boost::units::detail::calculate_base_dimension_coefficients_func	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_dimension_coefficients_func<false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::calculate_base_dimension_coefficients_func	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_dimension_coefficients_func<true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::calculate_base_dimension_coefficients_func::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::calculate_base_dimension_coefficients_func	access:public
boost::units::detail::calculate_base_dimension_coefficients_func::apply::next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef T next;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_func::apply	access:public
boost::units::detail::calculate_base_dimension_coefficients_func::apply::next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename T::next next;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_func::apply	access:public
boost::units::detail::calculate_base_dimension_coefficients_func::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef static_rational<0> type;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_func::apply	access:public
boost::units::detail::calculate_base_dimension_coefficients_func::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename T::item::value_type type;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_func::apply	access:public
boost::units::detail::calculate_base_dimension_coefficients_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_dimension_coefficients_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::calculate_base_dimension_coefficients_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_dimension_coefficients_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::calculate_base_dimension_coefficients_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::calculate_base_dimension_coefficients_impl	access:public
boost::units::detail::calculate_base_dimension_coefficients_impl::apply::next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type next;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_impl::apply	access:public
boost::units::detail::calculate_base_dimension_coefficients_impl::apply::next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename result::next, typename next_::next> next;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_impl::apply	access:public
boost::units::detail::calculate_base_dimension_coefficients_impl::apply::next_	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > next_;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_impl::apply	access:public
boost::units::detail::calculate_base_dimension_coefficients_impl::apply::result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > result;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_impl::apply	access:public
boost::units::detail::calculate_base_dimension_coefficients_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef T type;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_impl::apply	access:public
boost::units::detail::calculate_base_dimension_coefficients_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next_::type type;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_impl::apply	access:public
boost::units::detail::calculate_base_unit_exponents	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_unit_exponents {$/;"	s	namespace:boost::units::detail
boost::units::detail::calculate_base_unit_exponents::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef typename calculate_base_unit_exponents_impl<is_simple_system<T>::value>::template apply<T, Dimensions>::type type;$/;"	t	struct:boost::units::detail::calculate_base_unit_exponents	access:public
boost::units::detail::calculate_base_unit_exponents_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_unit_exponents_impl<false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::calculate_base_unit_exponents_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_unit_exponents_impl<true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::calculate_base_unit_exponents_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::calculate_base_unit_exponents_impl	access:public
boost::units::detail::calculate_base_unit_exponents_impl::apply::base_solutions	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef normalize_units<T> base_solutions;$/;"	t	struct:boost::units::detail::calculate_base_unit_exponents_impl::apply	access:public
boost::units::detail::calculate_base_unit_exponents_impl::apply::dimensions	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type dimensions;$/;"	t	struct:boost::units::detail::calculate_base_unit_exponents_impl::apply	access:public
boost::units::detail::calculate_base_unit_exponents_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::calculate_base_unit_exponents_impl::apply	access:public
boost::units::detail::calculate_base_unit_exponents_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename strip_zeroes_impl<base_solutions::extra>::template apply<units>::type type;$/;"	t	struct:boost::units::detail::calculate_base_unit_exponents_impl::apply	access:public
boost::units::detail::calculate_base_unit_exponents_impl::apply::units	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type units;$/;"	t	struct:boost::units::detail::calculate_base_unit_exponents_impl::apply	access:public
boost::units::detail::call_base_unit_converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter : call_base_unit_converter_impl<BOOST_UNITS_DETAIL_BASE_UNIT_CONVERTER_IS_DEFINED(Source, Dest)>::template apply<Source, Dest>$/;"	s	namespace:boost::units::detail	inherits:call_base_unit_converter_impl::,apply
boost::units::detail::call_base_unit_converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter<Source, BOOST_UNITS_MAKE_HETEROGENEOUS_UNIT(Dest, typename Source::dimension_type)> :$/;"	s	namespace:boost::units::detail	inherits:call_base_unit_converter_base_unit_impl::,apply
boost::units::detail::call_base_unit_converter_base_unit_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter_base_unit_impl<false, false>$/;"	s	namespace:boost::units::detail
boost::units::detail::call_base_unit_converter_base_unit_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter_base_unit_impl<false, true>$/;"	s	namespace:boost::units::detail
boost::units::detail::call_base_unit_converter_base_unit_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter_base_unit_impl<true, false>$/;"	s	namespace:boost::units::detail
boost::units::detail::call_base_unit_converter_base_unit_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter_base_unit_impl<true, true>$/;"	s	namespace:boost::units::detail
boost::units::detail::call_base_unit_converter_base_unit_impl::apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::call_base_unit_converter_base_unit_impl	access:public
boost::units::detail::call_base_unit_converter_base_unit_impl::apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::call_base_unit_converter_base_unit_impl	inherits:do_call_base_unit_converter	access:public
boost::units::detail::call_base_unit_converter_base_unit_impl::apply::conversion	/usr/include/boost/units/detail/conversion_impl.hpp	/^        > conversion;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
boost::units::detail::call_base_unit_converter_base_unit_impl::apply::converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef do_call_base_unit_converter<Dest, typename Source::unit_type> converter;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
boost::units::detail::call_base_unit_converter_base_unit_impl::apply::end	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef call_base_unit_converter<Dest, new_dest> end;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
boost::units::detail::call_base_unit_converter_base_unit_impl::apply::new_dest	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename reduce_unit<typename get_default_conversion<Dest>::type>::type new_dest;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
boost::units::detail::call_base_unit_converter_base_unit_impl::apply::new_source	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename reduce_unit<typename get_default_conversion<Source>::type>::type new_source;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
boost::units::detail::call_base_unit_converter_base_unit_impl::apply::start	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef call_base_unit_converter<Source, new_source> start;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
boost::units::detail::call_base_unit_converter_base_unit_impl::apply::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
boost::units::detail::call_base_unit_converter_base_unit_impl::apply::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename divide_typeof_helper<one, typename converter::type>::type type;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
boost::units::detail::call_base_unit_converter_base_unit_impl::apply::value	/usr/include/boost/units/detail/conversion_impl.hpp	/^        static type value() {$/;"	f	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public	signature:()
boost::units::detail::call_base_unit_converter_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter_impl<false>$/;"	s	namespace:boost::units::detail
boost::units::detail::call_base_unit_converter_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter_impl<true>$/;"	s	namespace:boost::units::detail
boost::units::detail::call_base_unit_converter_impl::apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::call_base_unit_converter_impl	access:public
boost::units::detail::call_base_unit_converter_impl::apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::call_base_unit_converter_impl	inherits:do_call_base_unit_converter	access:public
boost::units::detail::call_base_unit_converter_impl::apply::conversion	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef conversion_factor_helper<new_source, new_dest> conversion;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
boost::units::detail::call_base_unit_converter_impl::apply::impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename get_default_conversion_impl<system_list::size::value>::template apply<system_list> impl;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
boost::units::detail::call_base_unit_converter_impl::apply::new_dest	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename impl::unit_type new_dest;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
boost::units::detail::call_base_unit_converter_impl::apply::new_source	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename reduce_unit<typename get_default_conversion<Source>::type>::type new_source;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
boost::units::detail::call_base_unit_converter_impl::apply::start	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef call_base_unit_converter<Source, new_source> start;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
boost::units::detail::call_base_unit_converter_impl::apply::system_list	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename Dest::system_type::type system_list;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
boost::units::detail::call_base_unit_converter_impl::apply::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
boost::units::detail::call_base_unit_converter_impl::apply::value	/usr/include/boost/units/detail/conversion_impl.hpp	/^        static type value() {$/;"	f	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public	signature:()
boost::units::detail::check_system	/usr/include/boost/units/heterogeneous_system.hpp	/^struct check_system : mpl::false_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::false_
boost::units::detail::check_system	/usr/include/boost/units/heterogeneous_system.hpp	/^struct check_system<heterogeneous_system<heterogeneous_system_impl<System, Dimension, Scale> >, Dimension> : mpl::true_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::true_
boost::units::detail::check_system	/usr/include/boost/units/homogeneous_system.hpp	/^struct check_system<homogeneous_system<L>, Dimensions> : mpl::true_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::true_
boost::units::detail::check_system	/usr/include/boost/units/homogeneous_system.hpp	/^struct check_system<homogeneous_system<L>, Dimensions> :$/;"	s	namespace:boost::units::detail	inherits:boost::mpl::not_
boost::units::detail::conversion_factor_helper	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_factor_helper<unit<D, heterogeneous_system<L1> >, unit<D, homogeneous_system<L2> > >$/;"	s	namespace:boost::units::detail	inherits:conversion_factor_helper
boost::units::detail::conversion_factor_helper	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_factor_helper<unit<D, heterogeneous_system<S1> >, unit<D, heterogeneous_system<S2> > >$/;"	s	namespace:boost::units::detail
boost::units::detail::conversion_factor_helper	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_factor_helper<unit<D, homogeneous_system<L1> >, unit<D, heterogeneous_system<L2> > >$/;"	s	namespace:boost::units::detail	inherits:conversion_factor_helper
boost::units::detail::conversion_factor_helper	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_factor_helper<unit<D, homogeneous_system<L1> >, unit<D, homogeneous_system<L2> > >$/;"	s	namespace:boost::units::detail	inherits:conversion_factor_helper
boost::units::detail::conversion_factor_helper::all_base_units	/usr/include/boost/units/detail/conversion_impl.hpp	/^    >::type all_base_units;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
boost::units::detail::conversion_factor_helper::conversion1	/usr/include/boost/units/detail/conversion_impl.hpp	/^    > conversion1;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
boost::units::detail::conversion_factor_helper::conversion2	/usr/include/boost/units/detail/conversion_impl.hpp	/^    > conversion2;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
boost::units::detail::conversion_factor_helper::from_base_units	/usr/include/boost/units/detail/conversion_impl.hpp	/^    >::type from_base_units;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
boost::units::detail::conversion_factor_helper::scale	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef eval_scale_list<typename mpl::divides<typename S1::scale, typename S2::scale>::type> scale;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
boost::units::detail::conversion_factor_helper::system	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename detail::make_homogeneous_system<all_base_units>::type system;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
boost::units::detail::conversion_factor_helper::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    >::type type;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
boost::units::detail::conversion_factor_helper::value	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static type value()$/;"	f	struct:boost::units::detail::conversion_factor_helper	access:public	signature:()
boost::units::detail::conversion_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_impl$/;"	s	namespace:boost::units::detail
boost::units::detail::conversion_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_impl<0>$/;"	s	namespace:boost::units::detail
boost::units::detail::conversion_impl::apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::conversion_impl	access:public
boost::units::detail::conversion_impl::apply::converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef detail::call_base_unit_converter<unit, reduced_unit> converter;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
boost::units::detail::conversion_impl::apply::dimensions	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename unit::dimension_type dimensions;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
boost::units::detail::conversion_impl::apply::next_iteration	/usr/include/boost/units/detail/conversion_impl.hpp	/^        > next_iteration;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
boost::units::detail::conversion_impl::apply::reduced_unit	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename reduce_unit<units::unit<dimensions, DestinationSystem> >::type reduced_unit;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
boost::units::detail::conversion_impl::apply::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef one type;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
boost::units::detail::conversion_impl::apply::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename multiply_typeof_helper<typename converter::type, typename next_iteration::type>::type type;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
boost::units::detail::conversion_impl::apply::unit	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename unit_pair::tag_type unit;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
boost::units::detail::conversion_impl::apply::unit_pair	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename Begin::item unit_pair;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
boost::units::detail::conversion_impl::apply::value	/usr/include/boost/units/detail/conversion_impl.hpp	/^        static type value() { one result; return(result); }$/;"	f	struct:boost::units::detail::conversion_impl::apply	access:public	signature:()
boost::units::detail::conversion_impl::apply::value	/usr/include/boost/units/detail/conversion_impl.hpp	/^        static type value() { return(static_rational_power<typename unit_pair::value_type>(converter::value()) * next_iteration::value()); }$/;"	f	struct:boost::units::detail::conversion_impl::apply	access:public	signature:()
boost::units::detail::create_row_of_identity	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct create_row_of_identity {$/;"	s	namespace:boost::units::detail
boost::units::detail::create_row_of_identity	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct create_row_of_identity<0, TotalColumns> {$/;"	s	namespace:boost::units::detail
boost::units::detail::create_row_of_identity	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct create_row_of_identity<Column, 0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::create_row_of_identity::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef list<static_rational<0>, typename create_row_of_identity<Column - 1, TotalColumns - 1>::type> type;$/;"	t	struct:boost::units::detail::create_row_of_identity	access:public
boost::units::detail::create_row_of_identity::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef list<static_rational<1>, typename make_zero_vector<TotalColumns - 1>::type> type;$/;"	t	struct:boost::units::detail::create_row_of_identity	access:public
boost::units::detail::create_unit_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct create_unit_matrix {$/;"	s	namespace:boost::units::detail
boost::units::detail::create_unit_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct create_unit_matrix<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::create_unit_matrix::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::create_unit_matrix	access:public
boost::units::detail::create_unit_matrix::apply::next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename create_unit_matrix<N - 1>::template apply<typename Begin::next, Dimensions>::type next;$/;"	t	struct:boost::units::detail::create_unit_matrix::apply	access:public
boost::units::detail::create_unit_matrix::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::create_unit_matrix::apply	access:public
boost::units::detail::create_unit_matrix::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename expand_dimensions<Dimensions::size::value>::template apply<Dimensions, typename Begin::item::dimension_type>::type, next> type;$/;"	t	struct:boost::units::detail::create_unit_matrix::apply	access:public
boost::units::detail::demangle	/usr/include/boost/units/detail/utility.hpp	/^demangle(const char* name)$/;"	f	namespace:boost::units::detail	signature:(const char* name)
boost::units::detail::determine_extra_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations {$/;"	s	namespace:boost::units::detail
boost::units::detail::determine_extra_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations<0, true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::determine_extra_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations<RemainingColumns, true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::determine_extra_equations::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::determine_extra_equations	access:public
boost::units::detail::determine_extra_equations::apply::column_info	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > column_info;$/;"	t	struct:boost::units::detail::determine_extra_equations::apply	access:public
boost::units::detail::determine_extra_equations::apply::top_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename RowsBegin::item top_row;$/;"	t	struct:boost::units::detail::determine_extra_equations::apply	access:public
boost::units::detail::determine_extra_equations::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::determine_extra_equations::apply	access:public
boost::units::detail::determine_extra_equations::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef Result type;$/;"	t	struct:boost::units::detail::determine_extra_equations::apply	access:public
boost::units::detail::determine_extra_equations_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::determine_extra_equations_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::determine_extra_equations_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::determine_extra_equations_impl	access:public
boost::units::detail::determine_extra_equations_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > type;$/;"	t	struct:boost::units::detail::determine_extra_equations_impl::apply	access:public
boost::units::detail::determine_extra_equations_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::determine_extra_equations_impl::apply	access:public
boost::units::detail::determine_extra_equations_skip_zeros_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations_skip_zeros_impl<false, false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::determine_extra_equations_skip_zeros_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations_skip_zeros_impl<false, true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::determine_extra_equations_skip_zeros_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations_skip_zeros_impl<true, false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::determine_extra_equations_skip_zeros_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations_skip_zeros_impl<true, true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl	access:public
boost::units::detail::determine_extra_equations_skip_zeros_impl::apply::next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > next;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
boost::units::detail::determine_extra_equations_skip_zeros_impl::apply::next_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type next_equations;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
boost::units::detail::determine_extra_equations_skip_zeros_impl::apply::next_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename RowsBegin::item::next, dimensionless_type> next_equations;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
boost::units::detail::determine_extra_equations_skip_zeros_impl::apply::next_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename RowsBegin::item::next, typename next::next_equations> next_equations;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
boost::units::detail::determine_extra_equations_skip_zeros_impl::apply::next_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename determine_extra_equations_impl<RemainingRows - 1>::template apply<typename RowsBegin::next, typename RowsBegin::item>::type next_equations;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
boost::units::detail::determine_extra_equations_skip_zeros_impl::apply::next_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename RowsBegin::next::item next_row;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
boost::units::detail::determine_extra_equations_skip_zeros_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef Result type;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
boost::units::detail::determine_extra_equations_skip_zeros_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename create_row_of_identity<CurrentColumn, TotalColumns>::type, Result> type;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
boost::units::detail::determine_extra_equations_skip_zeros_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::type type;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
boost::units::detail::dim_tag	/usr/include/boost/units/dim.hpp	/^struct dim_tag { };$/;"	s	namespace:boost::units::detail
boost::units::detail::dimension_list_tag	/usr/include/boost/units/detail/dimension_list.hpp	/^struct dimension_list_tag { };$/;"	s	namespace:boost::units::detail
boost::units::detail::disable_if_is_same	/usr/include/boost/units/quantity.hpp	/^struct disable_if_is_same$/;"	s	namespace:boost::units::detail
boost::units::detail::disable_if_is_same	/usr/include/boost/units/quantity.hpp	/^struct disable_if_is_same<T, T> {};$/;"	s	namespace:boost::units::detail
boost::units::detail::disable_if_is_same::type	/usr/include/boost/units/quantity.hpp	/^    typedef void type;$/;"	t	struct:boost::units::detail::disable_if_is_same	access:public
boost::units::detail::divide_equation	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct divide_equation {$/;"	s	namespace:boost::units::detail
boost::units::detail::divide_equation	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct divide_equation<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::divide_equation::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::divide_equation	access:public
boost::units::detail::divide_equation::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::divide_equation::apply	access:public
boost::units::detail::divide_equation::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename mpl::divides<typename Begin::item, Divisor>::type, typename divide_equation<N - 1>::template apply<typename Begin::next, Divisor>::type> type;$/;"	t	struct:boost::units::detail::divide_equation::apply	access:public
boost::units::detail::divide_systems	/usr/include/boost/units/heterogeneous_system.hpp	/^struct divide_systems$/;"	s	namespace:boost::units::detail
boost::units::detail::divide_systems::type	/usr/include/boost/units/heterogeneous_system.hpp	/^    > type;$/;"	t	struct:boost::units::detail::divide_systems	access:public
boost::units::detail::do_call_base_unit_converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct do_call_base_unit_converter {$/;"	s	namespace:boost::units::detail
boost::units::detail::do_call_base_unit_converter::converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef base_unit_converter<source_type, destination_type> converter;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
boost::units::detail::do_call_base_unit_converter::destination_factor	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename mpl::divides<typename get_scale_list<Dest>::type, typename get_scale_list<destination_type>::type>::type destination_factor;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
boost::units::detail::do_call_base_unit_converter::destination_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename selector::destination_type destination_type;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
boost::units::detail::do_call_base_unit_converter::eval_factor	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef eval_scale_list<factor> eval_factor;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
boost::units::detail::do_call_base_unit_converter::factor	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename mpl::divides<source_factor, destination_factor>::type factor;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
boost::units::detail::do_call_base_unit_converter::selector	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef select_base_unit_converter<typename unscale<Source>::type, typename unscale<Dest>::type> selector;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
boost::units::detail::do_call_base_unit_converter::source_factor	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename mpl::divides<typename get_scale_list<Source>::type, typename get_scale_list<source_type>::type>::type source_factor;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
boost::units::detail::do_call_base_unit_converter::source_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename selector::source_type source_type;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
boost::units::detail::do_call_base_unit_converter::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename multiply_typeof_helper<typename converter::type, typename eval_factor::type>::type type;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
boost::units::detail::do_call_base_unit_converter::value	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static type value()$/;"	f	struct:boost::units::detail::do_call_base_unit_converter	access:public	signature:()
boost::units::detail::do_print	/usr/include/boost/units/io.hpp	/^inline void do_print(std::basic_ostream<Char, Traits>& os, const char* s)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<Char, Traits>& os, const char* s)
boost::units::detail::do_print	/usr/include/boost/units/io.hpp	/^inline void do_print(std::basic_ostream<Char, Traits>& os, const std::string& s)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<Char, Traits>& os, const std::string& s)
boost::units::detail::do_print	/usr/include/boost/units/io.hpp	/^inline void do_print(std::ostream& os, const std::string& s)$/;"	f	namespace:boost::units::detail	signature:(std::ostream& os, const std::string& s)
boost::units::detail::do_print_prefixed	/usr/include/boost/units/io.hpp	/^do_print_prefixed($/;"	f	namespace:boost::units::detail	signature:( std::basic_ostream<CharT, Traits>& os, const quantity< unit< Dimension, heterogeneous_system< heterogeneous_system_impl< list< heterogeneous_system_dim< scaled_base_unit<BaseUnit, BaseScale>, static_rational<1> >, dimensionless_type >, Dimension, Scale > > >, T >& q)
boost::units::detail::do_print_prefixed	/usr/include/boost/units/io.hpp	/^void do_print_prefixed($/;"	f	namespace:boost::units::detail	signature:( std::basic_ostream<CharT, Traits>& os, const quantity< unit< Dimension, heterogeneous_system< heterogeneous_system_impl< L, Dimension, Scale > > >, T >& q)
boost::units::detail::do_print_prefixed	/usr/include/boost/units/io.hpp	/^void do_print_prefixed(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q)
boost::units::detail::do_print_prefixed	/usr/include/boost/units/io.hpp	/^void do_print_prefixed(std::basic_ostream<CharT, Traits>& os, const quantity<unit<Dimension, System>, T>& q)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<CharT, Traits>& os, const quantity<unit<Dimension, System>, T>& q)
boost::units::detail::do_print_prefixed_impl	/usr/include/boost/units/io.hpp	/^void do_print_prefixed_impl(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q, F default_)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q, F default_)
boost::units::detail::eliminate_from_pair_of_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct eliminate_from_pair_of_equations {$/;"	s	namespace:boost::units::detail
boost::units::detail::eliminate_from_pair_of_equations::begin1	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef E1 begin1;$/;"	t	struct:boost::units::detail::eliminate_from_pair_of_equations	access:public
boost::units::detail::eliminate_from_pair_of_equations::begin2	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef E2 begin2;$/;"	t	struct:boost::units::detail::eliminate_from_pair_of_equations	access:public
boost::units::detail::eliminate_from_pair_of_equations::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    >::type type;$/;"	t	struct:boost::units::detail::eliminate_from_pair_of_equations	access:public
boost::units::detail::eliminate_from_pair_of_equations_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct eliminate_from_pair_of_equations_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::eliminate_from_pair_of_equations_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct eliminate_from_pair_of_equations_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::eliminate_from_pair_of_equations_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::eliminate_from_pair_of_equations_impl	access:public
boost::units::detail::eliminate_from_pair_of_equations_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > type;$/;"	t	struct:boost::units::detail::eliminate_from_pair_of_equations_impl::apply	access:public
boost::units::detail::eliminate_from_pair_of_equations_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::eliminate_from_pair_of_equations_impl::apply	access:public
boost::units::detail::engineering_prefixes	/usr/include/boost/units/io.hpp	/^        dimensionless_type> > > > > > > > > > > > > > > > > > engineering_prefixes;$/;"	t	namespace:boost::units::detail
boost::units::detail::expand_dimensions	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct expand_dimensions {$/;"	s	namespace:boost::units::detail
boost::units::detail::expand_dimensions	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct expand_dimensions<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::expand_dimensions::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::expand_dimensions	access:public
boost::units::detail::expand_dimensions::apply::result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::template apply<DimensionIterator> result;$/;"	t	struct:boost::units::detail::expand_dimensions::apply	access:public
boost::units::detail::expand_dimensions::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > type;$/;"	t	struct:boost::units::detail::expand_dimensions::apply	access:public
boost::units::detail::expand_dimensions::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::expand_dimensions::apply	access:public
boost::units::detail::exponent_string	/usr/include/boost/units/io.hpp	/^inline std::string exponent_string(const static_rational<1>&)$/;"	f	namespace:boost::units::detail	signature:(const static_rational<1>&)
boost::units::detail::exponent_string	/usr/include/boost/units/io.hpp	/^inline std::string exponent_string(const static_rational<N,D>& r)$/;"	f	namespace:boost::units::detail	signature:(const static_rational<N,D>& r)
boost::units::detail::extract_base_units	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct extract_base_units {$/;"	s	namespace:boost::units::detail
boost::units::detail::extract_base_units	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct extract_base_units<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::extract_base_units::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::extract_base_units	access:public
boost::units::detail::extract_base_units::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        > type;$/;"	t	struct:boost::units::detail::extract_base_units::apply	access:public
boost::units::detail::extract_base_units::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef T type;$/;"	t	struct:boost::units::detail::extract_base_units::apply	access:public
boost::units::detail::find_base_dimensions	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct find_base_dimensions {$/;"	s	namespace:boost::units::detail
boost::units::detail::find_base_dimensions::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    >::type type;$/;"	t	struct:boost::units::detail::find_base_dimensions	access:public
boost::units::detail::find_base_dimensions_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct find_base_dimensions_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::find_base_dimensions_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct find_base_dimensions_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::find_base_dimensions_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::find_base_dimensions_impl	access:public
boost::units::detail::find_base_dimensions_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::find_base_dimensions_impl::apply	access:public
boost::units::detail::find_base_dimensions_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef set_end type;$/;"	t	struct:boost::units::detail::find_base_dimensions_impl::apply	access:public
boost::units::detail::find_base_dimensions_impl_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct find_base_dimensions_impl_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::find_base_dimensions_impl_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct find_base_dimensions_impl_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::find_base_dimensions_impl_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::find_base_dimensions_impl_impl	access:public
boost::units::detail::find_base_dimensions_impl_impl::apply::next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type next;$/;"	t	struct:boost::units::detail::find_base_dimensions_impl_impl::apply	access:public
boost::units::detail::find_base_dimensions_impl_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::find_base_dimensions_impl_impl::apply	access:public
boost::units::detail::find_base_dimensions_impl_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef S type;$/;"	t	struct:boost::units::detail::find_base_dimensions_impl_impl::apply	access:public
boost::units::detail::find_matching_scale	/usr/include/boost/units/io.hpp	/^bool find_matching_scale(T t, double x, F f)$/;"	f	namespace:boost::units::detail	signature:(T t, double x, F f)
boost::units::detail::find_matching_scale_i	/usr/include/boost/units/io.hpp	/^bool find_matching_scale_i(Begin, End end, T t, double x, F f)$/;"	f	namespace:boost::units::detail	signature:(Begin, End end, T t, double x, F f)
boost::units::detail::find_matching_scale_i	/usr/include/boost/units/io.hpp	/^bool find_matching_scale_i(End, End, T, double, F)$/;"	f	namespace:boost::units::detail	signature:(End, End, T, double, F)
boost::units::detail::find_matching_scale_impl	/usr/include/boost/units/io.hpp	/^bool find_matching_scale_impl(Begin, End end, Prev prev, T t, double x, F f)$/;"	f	namespace:boost::units::detail	signature:(Begin, End end, Prev prev, T t, double x, F f)
boost::units::detail::find_matching_scale_impl	/usr/include/boost/units/io.hpp	/^bool find_matching_scale_impl(End, End, Prev, T, double, F)$/;"	f	namespace:boost::units::detail	signature:(End, End, Prev, T, double, F)
boost::units::detail::format_name_impl	/usr/include/boost/units/io.hpp	/^struct format_name_impl : format_raw_name_impl {$/;"	s	namespace:boost::units::detail	inherits:format_raw_name_impl
boost::units::detail::format_name_impl::is_default_string	/usr/include/boost/units/io.hpp	/^    bool is_default_string(const std::string& str, const Unit& u) {$/;"	f	struct:boost::units::detail::format_name_impl	access:public	signature:(const std::string& str, const Unit& u)
boost::units::detail::format_name_impl::operator ()	/usr/include/boost/units/io.hpp	/^    std::string operator()(const Unit& u) {$/;"	f	struct:boost::units::detail::format_name_impl	access:public	signature:(const Unit& u)
boost::units::detail::format_raw_name_impl	/usr/include/boost/units/io.hpp	/^struct format_raw_name_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::format_raw_name_impl::append_scale_to	/usr/include/boost/units/io.hpp	/^    void append_scale_to(std::string& str) {$/;"	f	struct:boost::units::detail::format_raw_name_impl	access:public	signature:(std::string& str)
boost::units::detail::format_raw_name_impl::append_units_to	/usr/include/boost/units/io.hpp	/^    void append_units_to(std::string& str) {$/;"	f	struct:boost::units::detail::format_raw_name_impl	access:public	signature:(std::string& str)
boost::units::detail::format_raw_name_impl::is_default_string	/usr/include/boost/units/io.hpp	/^    bool is_default_string(const std::string&, const Unit&) {$/;"	f	struct:boost::units::detail::format_raw_name_impl	access:public	signature:(const std::string&, const Unit&)
boost::units::detail::format_raw_name_impl::operator ()	/usr/include/boost/units/io.hpp	/^    std::string operator()(const Unit& u) {$/;"	f	struct:boost::units::detail::format_raw_name_impl	access:public	signature:(const Unit& u)
boost::units::detail::format_raw_symbol_impl	/usr/include/boost/units/io.hpp	/^struct format_raw_symbol_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::format_raw_symbol_impl::append_scale_to	/usr/include/boost/units/io.hpp	/^    void append_scale_to(std::string& str) {$/;"	f	struct:boost::units::detail::format_raw_symbol_impl	access:public	signature:(std::string& str)
boost::units::detail::format_raw_symbol_impl::append_units_to	/usr/include/boost/units/io.hpp	/^    void append_units_to(std::string& str) {$/;"	f	struct:boost::units::detail::format_raw_symbol_impl	access:public	signature:(std::string& str)
boost::units::detail::format_raw_symbol_impl::is_default_string	/usr/include/boost/units/io.hpp	/^    bool is_default_string(const std::string&, const Unit&) {$/;"	f	struct:boost::units::detail::format_raw_symbol_impl	access:public	signature:(const std::string&, const Unit&)
boost::units::detail::format_raw_symbol_impl::operator ()	/usr/include/boost/units/io.hpp	/^    std::string operator()(const Unit& u) {$/;"	f	struct:boost::units::detail::format_raw_symbol_impl	access:public	signature:(const Unit& u)
boost::units::detail::format_symbol_impl	/usr/include/boost/units/io.hpp	/^struct format_symbol_impl : format_raw_symbol_impl {$/;"	s	namespace:boost::units::detail	inherits:format_raw_symbol_impl
boost::units::detail::format_symbol_impl::is_default_string	/usr/include/boost/units/io.hpp	/^    bool is_default_string(const std::string& str, const Unit& u) {$/;"	f	struct:boost::units::detail::format_symbol_impl	access:public	signature:(const std::string& str, const Unit& u)
boost::units::detail::format_symbol_impl::operator ()	/usr/include/boost/units/io.hpp	/^    std::string operator()(const Unit& u) {$/;"	f	struct:boost::units::detail::format_symbol_impl	access:public	signature:(const Unit& u)
boost::units::detail::get_default_conversion_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct get_default_conversion_impl$/;"	s	namespace:boost::units::detail
boost::units::detail::get_default_conversion_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct get_default_conversion_impl<0>$/;"	s	namespace:boost::units::detail
boost::units::detail::get_default_conversion_impl::apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::get_default_conversion_impl	access:public
boost::units::detail::get_default_conversion_impl::apply::conversion	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef call_base_unit_converter<source, new_source> conversion;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
boost::units::detail::get_default_conversion_impl::apply::exponent	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename source_pair::value_type exponent;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
boost::units::detail::get_default_conversion_impl::apply::new_source	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename reduce_unit<typename get_default_conversion<source>::type>::type new_source;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
boost::units::detail::get_default_conversion_impl::apply::next_iteration	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename get_default_conversion_impl<N-1>::template apply<typename Begin::next> next_iteration;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
boost::units::detail::get_default_conversion_impl::apply::source	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename source_pair::tag_type source;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
boost::units::detail::get_default_conversion_impl::apply::source_pair	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename Begin::item source_pair;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
boost::units::detail::get_default_conversion_impl::apply::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef one type;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
boost::units::detail::get_default_conversion_impl::apply::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename multiply_typeof_helper<typename conversion::type, typename next_iteration::type>::type type;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
boost::units::detail::get_default_conversion_impl::apply::unit_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename multiply_typeof_helper<typename power_typeof_helper<new_source, exponent>::type, typename next_iteration::unit_type>::type unit_type;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
boost::units::detail::get_default_conversion_impl::apply::unit_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef unit<dimensionless_type, heterogeneous_system<heterogeneous_system_impl<dimensionless_type, dimensionless_type, no_scale> > > unit_type;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
boost::units::detail::get_default_conversion_impl::apply::value	/usr/include/boost/units/detail/conversion_impl.hpp	/^        static one value() {$/;"	f	struct:boost::units::detail::get_default_conversion_impl::apply	access:public	signature:()
boost::units::detail::get_default_conversion_impl::apply::value	/usr/include/boost/units/detail/conversion_impl.hpp	/^        static type value() {$/;"	f	struct:boost::units::detail::get_default_conversion_impl::apply	access:public	signature:()
boost::units::detail::get_scale_list_of_heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct get_scale_list_of_heterogeneous_system_impl$/;"	s	namespace:boost::units::detail
boost::units::detail::get_scale_list_of_heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct get_scale_list_of_heterogeneous_system_impl<0>$/;"	s	namespace:boost::units::detail
boost::units::detail::get_scale_list_of_heterogeneous_system_impl::apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::get_scale_list_of_heterogeneous_system_impl	access:public
boost::units::detail::get_scale_list_of_heterogeneous_system_impl::apply::type	/usr/include/boost/units/heterogeneous_system.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::get_scale_list_of_heterogeneous_system_impl::apply	access:public
boost::units::detail::get_scale_list_of_heterogeneous_system_impl::apply::type	/usr/include/boost/units/heterogeneous_system.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::get_scale_list_of_heterogeneous_system_impl::apply	access:public
boost::units::detail::get_tag	/usr/include/boost/units/detail/dim_impl.hpp	/^struct get_tag$/;"	s	namespace:boost::units::detail
boost::units::detail::get_tag::type	/usr/include/boost/units/detail/dim_impl.hpp	/^    typedef typename T::tag_type    type;$/;"	t	struct:boost::units::detail::get_tag	access:public
boost::units::detail::get_value	/usr/include/boost/units/detail/dim_impl.hpp	/^struct get_value$/;"	s	namespace:boost::units::detail
boost::units::detail::get_value::type	/usr/include/boost/units/detail/dim_impl.hpp	/^    typedef typename T::value_type    type;$/;"	t	struct:boost::units::detail::get_value	access:public
boost::units::detail::has_key	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct has_key {$/;"	s	namespace:boost::units::detail
boost::units::detail::has_key::size	/usr/include/boost/units/detail/linear_algebra.hpp	/^    static const long size = sizeof(Set::lookup((wrap<T>*)0));$/;"	m	struct:boost::units::detail::has_key	access:public
boost::units::detail::has_key::value	/usr/include/boost/units/detail/linear_algebra.hpp	/^    static const bool value = (size == sizeof(set_yes));$/;"	m	struct:boost::units::detail::has_key	access:public
boost::units::detail::inconsistent	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct inconsistent {};$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort::type	/usr/include/boost/units/detail/sort.hpp	/^    typedef typename insertion_sort_impl<T::size::value>::template apply<T>::type type;$/;"	t	struct:boost::units::detail::insertion_sort	access:public
boost::units::detail::insertion_sort_comparison_impl	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort_comparison_impl<false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_comparison_impl	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort_comparison_impl<true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_comparison_impl::apply	/usr/include/boost/units/detail/sort.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_comparison_impl	access:public
boost::units::detail::insertion_sort_comparison_impl::apply::type	/usr/include/boost/units/detail/sort.hpp	/^        > type;$/;"	t	struct:boost::units::detail::insertion_sort_comparison_impl::apply	access:public
boost::units::detail::insertion_sort_comparison_impl::apply::type	/usr/include/boost/units/detail/sort.hpp	/^        typedef list<T, Begin> type;$/;"	t	struct:boost::units::detail::insertion_sort_comparison_impl::apply	access:public
boost::units::detail::insertion_sort_dims_comparison_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_comparison_impl<false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_dims_comparison_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_comparison_impl<true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_dims_comparison_impl::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_dims_comparison_impl	access:public
boost::units::detail::insertion_sort_dims_comparison_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        > type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_comparison_impl::apply	access:public
boost::units::detail::insertion_sort_dims_comparison_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename push_front_or_add<Begin, T>::type type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_comparison_impl::apply	access:public
boost::units::detail::insertion_sort_dims_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_dims_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_dims_impl::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_dims_impl	access:public
boost::units::detail::insertion_sort_dims_impl::apply::next	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename insertion_sort_dims_impl<N - 1>::template apply<typename Begin::next>::type next;$/;"	t	struct:boost::units::detail::insertion_sort_dims_impl::apply	access:public
boost::units::detail::insertion_sort_dims_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_impl::apply	access:public
boost::units::detail::insertion_sort_dims_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename insertion_sort_dims_insert<(next::size::value)>::template apply<next, typename Begin::item>::type type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_impl::apply	access:public
boost::units::detail::insertion_sort_dims_insert	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_insert {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_dims_insert	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_insert<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_dims_insert::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_dims_insert	access:public
boost::units::detail::insertion_sort_dims_insert::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_insert::apply	access:public
boost::units::detail::insertion_sort_dims_insert::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef list<T, dimensionless_type> type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_insert::apply	access:public
boost::units::detail::insertion_sort_dims_mpl_sequence	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_mpl_sequence {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_dims_mpl_sequence	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_mpl_sequence<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_dims_mpl_sequence::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_dims_mpl_sequence	access:public
boost::units::detail::insertion_sort_dims_mpl_sequence::apply::next	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename insertion_sort_dims_mpl_sequence<N - 1>::template apply<typename mpl::next<Begin>::type>::type next;$/;"	t	struct:boost::units::detail::insertion_sort_dims_mpl_sequence::apply	access:public
boost::units::detail::insertion_sort_dims_mpl_sequence::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_mpl_sequence::apply	access:public
boost::units::detail::insertion_sort_dims_mpl_sequence::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename insertion_sort_dims_insert<(next::size::value)>::template apply<next, typename mpl::deref<Begin>::type>::type type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_mpl_sequence::apply	access:public
boost::units::detail::insertion_sort_impl	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_impl	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_impl::apply	/usr/include/boost/units/detail/sort.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_impl	access:public
boost::units::detail::insertion_sort_impl::apply::next	/usr/include/boost/units/detail/sort.hpp	/^        typedef typename insertion_sort_impl<N - 1>::template apply<typename Begin::next>::type next;$/;"	t	struct:boost::units::detail::insertion_sort_impl::apply	access:public
boost::units::detail::insertion_sort_impl::apply::type	/usr/include/boost/units/detail/sort.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::insertion_sort_impl::apply	access:public
boost::units::detail::insertion_sort_impl::apply::type	/usr/include/boost/units/detail/sort.hpp	/^        typedef typename insertion_sort_insert<(next::size::value)>::template apply<next, typename Begin::item>::type type;$/;"	t	struct:boost::units::detail::insertion_sort_impl::apply	access:public
boost::units::detail::insertion_sort_insert	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort_insert {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_insert	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort_insert<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::insertion_sort_insert::apply	/usr/include/boost/units/detail/sort.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::insertion_sort_insert	access:public
boost::units::detail::insertion_sort_insert::apply::type	/usr/include/boost/units/detail/sort.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::insertion_sort_insert::apply	access:public
boost::units::detail::insertion_sort_insert::apply::type	/usr/include/boost/units/detail/sort.hpp	/^        typedef list<T, dimensionless_type> type;$/;"	t	struct:boost::units::detail::insertion_sort_insert::apply	access:public
boost::units::detail::invert_handle_after_pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_handle_after_pivot_row {$/;"	s	namespace:boost::units::detail
boost::units::detail::invert_handle_after_pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_handle_after_pivot_row<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::invert_handle_after_pivot_row::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::invert_handle_after_pivot_row	access:public
boost::units::detail::invert_handle_after_pivot_row::apply::current_identity_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename IdentityBegin::item current_identity_row;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
boost::units::detail::invert_handle_after_pivot_row::apply::current_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename RowsBegin::item current_row;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
boost::units::detail::invert_handle_after_pivot_row::apply::identity_pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef IdentityPivot identity_pivot_row;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
boost::units::detail::invert_handle_after_pivot_row::apply::identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > identity_result;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
boost::units::detail::invert_handle_after_pivot_row::apply::identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type identity_result;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
boost::units::detail::invert_handle_after_pivot_row::apply::new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > new_matrix;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
boost::units::detail::invert_handle_after_pivot_row::apply::new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type new_matrix;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
boost::units::detail::invert_handle_after_pivot_row::apply::next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > next;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
boost::units::detail::invert_handle_after_pivot_row::apply::pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef MatrixPivot pivot_row;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
boost::units::detail::invert_handle_inital_rows	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_handle_inital_rows {$/;"	s	namespace:boost::units::detail
boost::units::detail::invert_handle_inital_rows	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_handle_inital_rows<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::invert_handle_inital_rows::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::invert_handle_inital_rows	access:public
boost::units::detail::invert_handle_inital_rows::apply::current_identity_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename IdentityBegin::item current_identity_row;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
boost::units::detail::invert_handle_inital_rows::apply::current_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename RowsBegin::item current_row;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
boost::units::detail::invert_handle_inital_rows::apply::identity_pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::identity_pivot_row identity_pivot_row;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
boost::units::detail::invert_handle_inital_rows::apply::identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > identity_result;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
boost::units::detail::invert_handle_inital_rows::apply::identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename next::identity_pivot_row, typename next::identity_result> identity_result;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
boost::units::detail::invert_handle_inital_rows::apply::new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > new_matrix;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
boost::units::detail::invert_handle_inital_rows::apply::new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename next::pivot_row, typename next::new_matrix> new_matrix;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
boost::units::detail::invert_handle_inital_rows::apply::next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > next;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
boost::units::detail::invert_handle_inital_rows::apply::pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::pivot_row pivot_row;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
boost::units::detail::invert_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::invert_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::invert_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::invert_impl	access:public
boost::units::detail::invert_impl::apply::process_column	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename invert_handle_inital_rows<RowsBegin::size::value - N>::template apply<RowsBegin, IdentityBegin> process_column;$/;"	t	struct:boost::units::detail::invert_impl::apply	access:public
boost::units::detail::invert_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::invert_impl::apply	access:public
boost::units::detail::invert_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef IdentityBegin type;$/;"	t	struct:boost::units::detail::invert_impl::apply	access:public
boost::units::detail::invert_strip_leading_zeroes	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_strip_leading_zeroes<false, false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::invert_strip_leading_zeroes	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_strip_leading_zeroes<false, true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::invert_strip_leading_zeroes	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_strip_leading_zeroes<true, false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::invert_strip_leading_zeroes	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_strip_leading_zeroes<true, true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::invert_strip_leading_zeroes::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::invert_strip_leading_zeroes	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::current_identity_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename IdentityBegin::item current_identity_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::current_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename RowsBegin::item current_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::current_value	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename current_row::item current_value;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::identity_pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef transformed_identity_equation identity_pivot_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::identity_pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::identity_pivot_row identity_pivot_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > identity_result;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type identity_result;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::identity_result identity_result;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::new_equation	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename divide_equation<(current_row::size::value - 1)>::template apply<typename current_row::next, current_value>::type new_equation;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > new_matrix;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type new_matrix;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::new_matrix new_matrix;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > next;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::next_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename RowsBegin::next::item next_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef new_equation pivot_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::pivot_row pivot_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::invert_strip_leading_zeroes::apply::transformed_identity_equation	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename divide_equation<(IdentityBegin::item::size::value)>::template apply<typename IdentityBegin::item, current_value>::type transformed_identity_equation;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
boost::units::detail::is_base_dimension_unit	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct is_base_dimension_unit {$/;"	s	namespace:boost::units::detail
boost::units::detail::is_base_dimension_unit	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct is_base_dimension_unit<list<dim<T, static_rational<1> >, dimensionless_type> > {$/;"	s	namespace:boost::units::detail
boost::units::detail::is_base_dimension_unit::base_dimension_type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef T base_dimension_type;$/;"	t	struct:boost::units::detail::is_base_dimension_unit	access:public
boost::units::detail::is_base_dimension_unit::base_dimension_type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef void base_dimension_type;$/;"	t	struct:boost::units::detail::is_base_dimension_unit	access:public
boost::units::detail::is_base_dimension_unit::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef mpl::false_ type;$/;"	t	struct:boost::units::detail::is_base_dimension_unit	access:public
boost::units::detail::is_base_dimension_unit::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef mpl::true_ type;$/;"	t	struct:boost::units::detail::is_base_dimension_unit	access:public
boost::units::detail::is_base_unit	/usr/include/boost/units/quantity.hpp	/^struct is_base_unit : mpl::false_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::false_
boost::units::detail::is_base_unit	/usr/include/boost/units/quantity.hpp	/^struct is_base_unit<T, typename T::boost_units_is_base_unit_type> : mpl::true_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::true_
boost::units::detail::is_dimensionless_system	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct is_dimensionless_system : mpl::false_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::false_
boost::units::detail::is_dimensionless_system	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct is_dimensionless_system<System, typename void_if_dimensionless<System>::type> : mpl::true_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::true_
boost::units::detail::is_empty_dim	/usr/include/boost/units/detail/dim_impl.hpp	/^struct is_empty_dim< dim<T, V> > :$/;"	s	namespace:boost::units::detail	inherits:mpl::false_
boost::units::detail::is_empty_dim	/usr/include/boost/units/detail/dim_impl.hpp	/^struct is_empty_dim< dim<T, static_rational<0, 1> > > :$/;"	s	namespace:boost::units::detail	inherits:mpl::true_
boost::units::detail::is_empty_dim	/usr/include/boost/units/heterogeneous_system.hpp	/^struct is_empty_dim<heterogeneous_system_dim<Unit1,Exponent1> > : detail::is_zero<Exponent1> {};$/;"	s	namespace:boost::units::detail	inherits:detail::is_zero
boost::units::detail::is_narrowing_conversion_impl	/usr/include/boost/units/quantity.hpp	/^struct is_narrowing_conversion_impl : mpl::bool_<(sizeof(Source) > sizeof(Destination))> {};$/;"	s	namespace:boost::units::detail	inherits:mpl::bool_sizeof,Destination
boost::units::detail::is_non_narrowing_conversion	/usr/include/boost/units/quantity.hpp	/^struct is_non_narrowing_conversion :$/;"	s	namespace:boost::units::detail	inherits:mpl::and_
boost::units::detail::is_non_narrowing_conversion	/usr/include/boost/units/quantity.hpp	/^struct is_non_narrowing_conversion<long double, double> : mpl::false_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::false_
boost::units::detail::is_simple_system	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct is_simple_system {$/;"	s	namespace:boost::units::detail
boost::units::detail::is_simple_system::Begin	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef T Begin;$/;"	t	struct:boost::units::detail::is_simple_system	access:public
boost::units::detail::is_simple_system::test	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef is_base_dimension_unit<typename Begin::item::dimension_type> test;$/;"	t	struct:boost::units::detail::is_simple_system	access:public
boost::units::detail::is_simple_system::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    >::type type;$/;"	t	struct:boost::units::detail::is_simple_system	access:public
boost::units::detail::is_simple_system::value	/usr/include/boost/units/detail/linear_algebra.hpp	/^    static const bool value = type::value;$/;"	m	struct:boost::units::detail::is_simple_system	access:public
boost::units::detail::is_simple_system_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct is_simple_system_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::is_simple_system_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct is_simple_system_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::is_simple_system_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply : mpl::true_ {$/;"	s	struct:boost::units::detail::is_simple_system_impl	inherits:mpl::true_	access:public
boost::units::detail::is_simple_system_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::is_simple_system_impl	access:public
boost::units::detail::is_simple_system_impl::apply::test	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef is_base_dimension_unit<typename Begin::item::dimension_type> test;$/;"	t	struct:boost::units::detail::is_simple_system_impl::apply	access:public
boost::units::detail::is_simple_system_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > type;$/;"	t	struct:boost::units::detail::is_simple_system_impl::apply	access:public
boost::units::detail::is_simple_system_impl::apply::value	/usr/include/boost/units/detail/linear_algebra.hpp	/^        static const bool value = (type::value);$/;"	m	struct:boost::units::detail::is_simple_system_impl::apply	access:public
boost::units::detail::is_zero	/usr/include/boost/units/heterogeneous_system.hpp	/^struct is_zero : mpl::false_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::false_
boost::units::detail::is_zero	/usr/include/boost/units/heterogeneous_system.hpp	/^struct is_zero<static_rational<0> > : mpl::true_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::true_
boost::units::detail::iterator_to_list	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct iterator_to_list$/;"	s	namespace:boost::units::detail
boost::units::detail::iterator_to_list	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct iterator_to_list<0>$/;"	s	namespace:boost::units::detail
boost::units::detail::iterator_to_list::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::iterator_to_list	access:public
boost::units::detail::iterator_to_list::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::iterator_to_list	access:public
boost::units::detail::iterator_to_list::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        > type;$/;"	t	struct:boost::units::detail::iterator_to_list::apply	access:public
boost::units::detail::iterator_to_list::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::iterator_to_list::apply	access:public
boost::units::detail::make_heterogeneous_system	/usr/include/boost/units/heterogeneous_system.hpp	/^struct make_heterogeneous_system$/;"	s	namespace:boost::units::detail
boost::units::detail::make_heterogeneous_system	/usr/include/boost/units/heterogeneous_system.hpp	/^struct make_heterogeneous_system<Dimensions, heterogeneous_system<T> >$/;"	s	namespace:boost::units::detail
boost::units::detail::make_heterogeneous_system::BOOST_MPL_ASSERT_MSG	/usr/include/boost/units/heterogeneous_system.hpp	/^    BOOST_MPL_ASSERT_MSG((!boost::is_same<exponents, inconsistent>::value), the_specified_dimension_is_not_representible_in_the_given_system, (types<Dimensions, System>));$/;"	p	struct:boost::units::detail::make_heterogeneous_system	access:public	signature:(!boost::is_same<exponents, inconsistent>::value), the_specified_dimension_is_not_representible_in_the_given_system, (types<Dimensions, System>)
boost::units::detail::make_heterogeneous_system::exponents	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef typename calculate_base_unit_exponents<typename System::type, Dimensions>::type exponents;$/;"	t	struct:boost::units::detail::make_heterogeneous_system	access:public
boost::units::detail::make_heterogeneous_system::type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef heterogeneous_system<T> type;$/;"	t	struct:boost::units::detail::make_heterogeneous_system	access:public
boost::units::detail::make_heterogeneous_system::type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef heterogeneous_system<heterogeneous_system_impl<unit_list, Dimensions, no_scale> > type;$/;"	t	struct:boost::units::detail::make_heterogeneous_system	access:public
boost::units::detail::make_heterogeneous_system::unit_list	/usr/include/boost/units/heterogeneous_system.hpp	/^    >::type unit_list;$/;"	t	struct:boost::units::detail::make_heterogeneous_system	access:public
boost::units::detail::make_heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct make_heterogeneous_system_impl$/;"	s	namespace:boost::units::detail
boost::units::detail::make_heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct make_heterogeneous_system_impl<0>$/;"	s	namespace:boost::units::detail
boost::units::detail::make_heterogeneous_system_impl::apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::make_heterogeneous_system_impl	access:public
boost::units::detail::make_heterogeneous_system_impl::apply::type	/usr/include/boost/units/heterogeneous_system.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::make_heterogeneous_system_impl::apply	access:public
boost::units::detail::make_heterogeneous_system_impl::apply::type	/usr/include/boost/units/heterogeneous_system.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::make_heterogeneous_system_impl::apply	access:public
boost::units::detail::make_homogeneous_system	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_homogeneous_system::base_dimensions	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    typedef typename find_base_dimensions<Units>::type base_dimensions;$/;"	t	struct:boost::units::detail::make_homogeneous_system	access:public
boost::units::detail::make_homogeneous_system::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    > type;$/;"	t	struct:boost::units::detail::make_homogeneous_system	access:public
boost::units::detail::make_homogeneous_system_func	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system_func<T, false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_homogeneous_system_func	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system_func<T, true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_homogeneous_system_func	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system_func<no_solution, false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_homogeneous_system_func	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system_func<no_solution, true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_homogeneous_system_func::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_homogeneous_system_func	access:public
boost::units::detail::make_homogeneous_system_func::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::make_homogeneous_system_func::apply	access:public
boost::units::detail::make_homogeneous_system_func::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef list<typename Begin::item, Units> type;$/;"	t	struct:boost::units::detail::make_homogeneous_system_func::apply	access:public
boost::units::detail::make_homogeneous_system_impl	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_homogeneous_system_impl	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_homogeneous_system_impl::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_homogeneous_system_impl	access:public
boost::units::detail::make_homogeneous_system_impl::apply::dimensions	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        >::type dimensions;$/;"	t	struct:boost::units::detail::make_homogeneous_system_impl::apply	access:public
boost::units::detail::make_homogeneous_system_impl::apply::new_element	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef typename try_add_unit_impl<Current::size::value>::template apply<Current, dimensions>::type new_element;$/;"	t	struct:boost::units::detail::make_homogeneous_system_impl::apply	access:public
boost::units::detail::make_homogeneous_system_impl::apply::new_func	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef typename make_solve_list_leading_zeroes<new_element::size::value>::template apply<new_element>::type new_func;$/;"	t	struct:boost::units::detail::make_homogeneous_system_impl::apply	access:public
boost::units::detail::make_homogeneous_system_impl::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        >::template apply<Begin, Current, Units, Dimensions, N>::type type;$/;"	t	struct:boost::units::detail::make_homogeneous_system_impl::apply	access:public
boost::units::detail::make_homogeneous_system_impl::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef Units type;$/;"	t	struct:boost::units::detail::make_homogeneous_system_impl::apply	access:public
boost::units::detail::make_identity	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct make_identity {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_identity	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct make_identity<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_identity::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_identity	access:public
boost::units::detail::make_identity::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::make_identity::apply	access:public
boost::units::detail::make_identity::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename create_row_of_identity<Size - N, Size>::type, typename make_identity<N - 1>::template apply<Size>::type> type;$/;"	t	struct:boost::units::detail::make_identity::apply	access:public
boost::units::detail::make_solve_list_first_non_zero	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_first_non_zero {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_solve_list_first_non_zero	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_first_non_zero<static_rational<0> > {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_solve_list_first_non_zero::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_solve_list_first_non_zero	access:public
boost::units::detail::make_solve_list_first_non_zero::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        > type;$/;"	t	struct:boost::units::detail::make_solve_list_first_non_zero::apply	access:public
boost::units::detail::make_solve_list_first_non_zero::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::make_solve_list_first_non_zero::apply	access:public
boost::units::detail::make_solve_list_internal_zero	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_internal_zero {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_solve_list_internal_zero	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_internal_zero<static_rational<0> > {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_solve_list_internal_zero::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_solve_list_internal_zero	access:public
boost::units::detail::make_solve_list_internal_zero::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef solve_internal_zero<Next> type;$/;"	t	struct:boost::units::detail::make_solve_list_internal_zero::apply	access:public
boost::units::detail::make_solve_list_internal_zero::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef solve_normal<T, X, Next> type;$/;"	t	struct:boost::units::detail::make_solve_list_internal_zero::apply	access:public
boost::units::detail::make_solve_list_leading_zeroes	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_leading_zeroes {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_solve_list_leading_zeroes	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_leading_zeroes<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_solve_list_leading_zeroes::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_solve_list_leading_zeroes	access:public
boost::units::detail::make_solve_list_leading_zeroes::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef no_solution type;$/;"	t	struct:boost::units::detail::make_solve_list_leading_zeroes::apply	access:public
boost::units::detail::make_solve_list_leading_zeroes::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef typename make_solve_list_first_non_zero<typename Begin::item>::template apply<Begin, N>::type type;$/;"	t	struct:boost::units::detail::make_solve_list_leading_zeroes::apply	access:public
boost::units::detail::make_solve_list_normal	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_normal {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_solve_list_normal	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_normal<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_solve_list_normal::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::make_solve_list_normal	access:public
boost::units::detail::make_solve_list_normal::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::make_solve_list_normal::apply	access:public
boost::units::detail::make_solve_list_normal::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef solve_end type;$/;"	t	struct:boost::units::detail::make_solve_list_normal::apply	access:public
boost::units::detail::make_square_and_invert	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct make_square_and_invert {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_square_and_invert::invertible	/usr/include/boost/units/detail/linear_algebra.hpp	/^    >::type invertible;$/;"	t	struct:boost::units::detail::make_square_and_invert	access:public
boost::units::detail::make_square_and_invert::top_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef typename Matrix::item top_row;$/;"	t	struct:boost::units::detail::make_square_and_invert	access:public
boost::units::detail::make_square_and_invert::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    >::type type;$/;"	t	struct:boost::units::detail::make_square_and_invert	access:public
boost::units::detail::make_zero_vector	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct make_zero_vector {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_zero_vector	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct make_zero_vector<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::make_zero_vector::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::make_zero_vector	access:public
boost::units::detail::make_zero_vector::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef list<static_rational<0>, typename make_zero_vector<N - 1>::type> type;$/;"	t	struct:boost::units::detail::make_zero_vector	access:public
boost::units::detail::maybe_parenthesize	/usr/include/boost/units/io.hpp	/^maybe_parenthesize(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<Units, Dimension, Scale> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<Units, Dimension, Scale> > >&, Subformatter f)
boost::units::detail::maybe_parenthesize	/usr/include/boost/units/io.hpp	/^maybe_parenthesize(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<list<heterogeneous_system_dim<Unit, static_rational<1> >,dimensionless_type>, Dimension, Scale> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<list<heterogeneous_system_dim<Unit, static_rational<1> >,dimensionless_type>, Dimension, Scale> > >&, Subformatter f)
boost::units::detail::maybe_print_prefixed	/usr/include/boost/units/io.hpp	/^void maybe_print_prefixed(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q, mpl::false_)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q, mpl::false_)
boost::units::detail::maybe_print_prefixed	/usr/include/boost/units/io.hpp	/^void maybe_print_prefixed(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q, mpl::true_)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q, mpl::true_)
boost::units::detail::merge_dimensions	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions$/;"	s	namespace:boost::units::detail
boost::units::detail::merge_dimensions::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::merge_dimensions	access:public
boost::units::detail::merge_dimensions_func	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_func<false, false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::merge_dimensions_func	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_func<false, true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::merge_dimensions_func	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_func<true, false>$/;"	s	namespace:boost::units::detail
boost::units::detail::merge_dimensions_func::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::merge_dimensions_func	access:public
boost::units::detail::merge_dimensions_func::apply::combined	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename mpl::plus<typename Begin1::item, typename Begin2::item>::type combined;$/;"	t	struct:boost::units::detail::merge_dimensions_func::apply	access:public
boost::units::detail::merge_dimensions_func::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        > type;$/;"	t	struct:boost::units::detail::merge_dimensions_func::apply	access:public
boost::units::detail::merge_dimensions_func::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::merge_dimensions_func::apply	access:public
boost::units::detail::merge_dimensions_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::merge_dimensions_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_impl<0, 0>$/;"	s	namespace:boost::units::detail
boost::units::detail::merge_dimensions_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_impl<0, N>$/;"	s	namespace:boost::units::detail
boost::units::detail::merge_dimensions_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_impl<N, 0>$/;"	s	namespace:boost::units::detail
boost::units::detail::merge_dimensions_impl::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::merge_dimensions_impl	access:public
boost::units::detail::merge_dimensions_impl::apply::dim1	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename Begin1::item dim1;$/;"	t	struct:boost::units::detail::merge_dimensions_impl::apply	access:public
boost::units::detail::merge_dimensions_impl::apply::dim2	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename Begin2::item dim2;$/;"	t	struct:boost::units::detail::merge_dimensions_impl::apply	access:public
boost::units::detail::merge_dimensions_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::merge_dimensions_impl::apply	access:public
boost::units::detail::merge_dimensions_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::merge_dimensions_impl::apply	access:public
boost::units::detail::merge_dimensions_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename iterator_to_list<N>::template apply<Begin1>::type type;$/;"	t	struct:boost::units::detail::merge_dimensions_impl::apply	access:public
boost::units::detail::merge_dimensions_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename iterator_to_list<N>::template apply<Begin2>::type type;$/;"	t	struct:boost::units::detail::merge_dimensions_impl::apply	access:public
boost::units::detail::multiply_add_units	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct multiply_add_units {$/;"	s	namespace:boost::units::detail
boost::units::detail::multiply_add_units	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct multiply_add_units<1> {$/;"	s	namespace:boost::units::detail
boost::units::detail::multiply_add_units::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::multiply_add_units	access:public
boost::units::detail::multiply_add_units::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::multiply_add_units::apply	access:public
boost::units::detail::multiply_add_units::apply::type1	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::template apply<dimensionless_type>::type type1;$/;"	t	struct:boost::units::detail::multiply_add_units::apply	access:public
boost::units::detail::multiply_add_units_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct multiply_add_units_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::multiply_add_units_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct multiply_add_units_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::multiply_add_units_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::multiply_add_units_impl	access:public
boost::units::detail::multiply_add_units_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > type;$/;"	t	struct:boost::units::detail::multiply_add_units_impl::apply	access:public
boost::units::detail::multiply_add_units_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::multiply_add_units_impl::apply	access:public
boost::units::detail::multiply_systems	/usr/include/boost/units/heterogeneous_system.hpp	/^struct multiply_systems$/;"	s	namespace:boost::units::detail
boost::units::detail::multiply_systems::type	/usr/include/boost/units/heterogeneous_system.hpp	/^    > type;$/;"	t	struct:boost::units::detail::multiply_systems	access:public
boost::units::detail::name_string_impl	/usr/include/boost/units/io.hpp	/^struct name_string_impl$/;"	s	namespace:boost::units::detail
boost::units::detail::name_string_impl	/usr/include/boost/units/io.hpp	/^struct name_string_impl<0>$/;"	s	namespace:boost::units::detail
boost::units::detail::name_string_impl	/usr/include/boost/units/io.hpp	/^struct name_string_impl<1>$/;"	s	namespace:boost::units::detail
boost::units::detail::name_string_impl::apply	/usr/include/boost/units/io.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::name_string_impl	access:public
boost::units::detail::name_string_impl::apply::next	/usr/include/boost/units/io.hpp	/^        typedef typename name_string_impl<N-1>::template apply<typename Begin::next> next;$/;"	t	struct:boost::units::detail::name_string_impl::apply	access:public
boost::units::detail::name_string_impl::apply::value	/usr/include/boost/units/io.hpp	/^        static void value(std::string& str)$/;"	f	struct:boost::units::detail::name_string_impl::apply	access:public	signature:(std::string& str)
boost::units::detail::no	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct no { no() {} char dummy; };$/;"	s	namespace:boost::units::detail
boost::units::detail::no::dummy	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct no { no() {} char dummy; };$/;"	m	struct:boost::units::detail::no	access:public
boost::units::detail::no::no	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct no { no() {} char dummy; };$/;"	f	struct:boost::units::detail::no	access:public	signature:()
boost::units::detail::no_solution	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct no_solution {};$/;"	s	namespace:boost::units::detail
boost::units::detail::normalize_units	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct normalize_units {$/;"	s	namespace:boost::units::detail
boost::units::detail::normalize_units::dimensions	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef typename find_base_dimensions<T>::type dimensions;$/;"	t	struct:boost::units::detail::normalize_units	access:public
boost::units::detail::normalize_units::extra	/usr/include/boost/units/detail/linear_algebra.hpp	/^    static const long extra = (type::size::value) - (T::size::value);$/;"	m	struct:boost::units::detail::normalize_units	access:public
boost::units::detail::normalize_units::matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^    >::type matrix;$/;"	t	struct:boost::units::detail::normalize_units	access:public
boost::units::detail::normalize_units::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef typename make_square_and_invert<matrix>::type type;$/;"	t	struct:boost::units::detail::normalize_units	access:public
boost::units::detail::ordinal_has_already_been_defined	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct ordinal_has_already_been_defined<false>  { typedef void type; };$/;"	s	namespace:boost::units::detail
boost::units::detail::ordinal_has_already_been_defined	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct ordinal_has_already_been_defined<true>   { };$/;"	s	namespace:boost::units::detail
boost::units::detail::ordinal_has_already_been_defined::type	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct ordinal_has_already_been_defined<false>  { typedef void type; };$/;"	t	struct:boost::units::detail::ordinal_has_already_been_defined	access:public
boost::units::detail::ordinal_tag	/usr/include/boost/units/detail/ordinal.hpp	/^struct ordinal_tag {};$/;"	s	namespace:boost::units::detail
boost::units::detail::print_default	/usr/include/boost/units/io.hpp	/^print_default_t<Os, Quantity> print_default(Os& os, const Quantity& q)$/;"	f	namespace:boost::units::detail	signature:(Os& os, const Quantity& q)
boost::units::detail::print_default_t	/usr/include/boost/units/io.hpp	/^struct print_default_t {$/;"	s	namespace:boost::units::detail
boost::units::detail::print_default_t::operator ()	/usr/include/boost/units/io.hpp	/^    void operator()() const$/;"	f	struct:boost::units::detail::print_default_t	access:public	signature:() const
boost::units::detail::print_default_t::os	/usr/include/boost/units/io.hpp	/^    Os* os;$/;"	m	struct:boost::units::detail::print_default_t	access:public
boost::units::detail::print_default_t::q	/usr/include/boost/units/io.hpp	/^    const Quantity* q;$/;"	m	struct:boost::units::detail::print_default_t	access:public
boost::units::detail::print_default_t::result_type	/usr/include/boost/units/io.hpp	/^    typedef void result_type;$/;"	t	struct:boost::units::detail::print_default_t	access:public
boost::units::detail::print_scale	/usr/include/boost/units/io.hpp	/^print_scale_t<Os> print_scale(Os& os, bool& prefixed)$/;"	f	namespace:boost::units::detail	signature:(Os& os, bool& prefixed)
boost::units::detail::print_scale_t	/usr/include/boost/units/io.hpp	/^struct print_scale_t {$/;"	s	namespace:boost::units::detail
boost::units::detail::print_scale_t::operator ()	/usr/include/boost/units/io.hpp	/^    void operator()(Prefix, const T& t) const$/;"	f	struct:boost::units::detail::print_scale_t	access:public	signature:(Prefix, const T& t) const
boost::units::detail::print_scale_t::operator ()	/usr/include/boost/units/io.hpp	/^    void operator()(scale<N, static_rational<0> >, const T& t) const$/;"	f	struct:boost::units::detail::print_scale_t	access:public	signature:(scale<N, static_rational<0> >, const T& t) const
boost::units::detail::print_scale_t::os	/usr/include/boost/units/io.hpp	/^    Os* os;$/;"	m	struct:boost::units::detail::print_scale_t	access:public
boost::units::detail::print_scale_t::prefixed	/usr/include/boost/units/io.hpp	/^    bool* prefixed;$/;"	m	struct:boost::units::detail::print_scale_t	access:public
boost::units::detail::print_scale_t::result_type	/usr/include/boost/units/io.hpp	/^    typedef void result_type;$/;"	t	struct:boost::units::detail::print_scale_t	access:public
boost::units::detail::push_front_if	/usr/include/boost/units/detail/push_front_if.hpp	/^struct push_front_if<false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::push_front_if	/usr/include/boost/units/detail/push_front_if.hpp	/^struct push_front_if<true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::push_front_if::apply	/usr/include/boost/units/detail/push_front_if.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::push_front_if	access:public
boost::units::detail::push_front_if::apply::type	/usr/include/boost/units/detail/push_front_if.hpp	/^        typedef L type;$/;"	t	struct:boost::units::detail::push_front_if::apply	access:public
boost::units::detail::push_front_if::apply::type	/usr/include/boost/units/detail/push_front_if.hpp	/^        typedef list<T, L> type;$/;"	t	struct:boost::units::detail::push_front_if::apply	access:public
boost::units::detail::push_front_or_add	/usr/include/boost/units/detail/push_front_or_add.hpp	/^struct push_front_or_add$/;"	s	namespace:boost::units::detail
boost::units::detail::push_front_or_add	/usr/include/boost/units/detail/push_front_or_add.hpp	/^struct push_front_or_add<dimensionless_type, T>$/;"	s	namespace:boost::units::detail
boost::units::detail::push_front_or_add::type	/usr/include/boost/units/detail/push_front_or_add.hpp	/^    >::type type;$/;"	t	struct:boost::units::detail::push_front_or_add	access:public
boost::units::detail::push_front_or_add::type	/usr/include/boost/units/detail/push_front_or_add.hpp	/^    typedef list<T, dimensionless_type> type;$/;"	t	struct:boost::units::detail::push_front_or_add	access:public
boost::units::detail::push_front_or_add_impl	/usr/include/boost/units/detail/push_front_or_add.hpp	/^struct push_front_or_add_impl<false>$/;"	s	namespace:boost::units::detail
boost::units::detail::push_front_or_add_impl	/usr/include/boost/units/detail/push_front_or_add.hpp	/^struct push_front_or_add_impl<true>$/;"	s	namespace:boost::units::detail
boost::units::detail::push_front_or_add_impl::apply	/usr/include/boost/units/detail/push_front_or_add.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::push_front_or_add_impl	access:public
boost::units::detail::push_front_or_add_impl::apply::item	/usr/include/boost/units/detail/push_front_or_add.hpp	/^        typedef typename mpl::plus<T, typename Sequence::item>::type item;$/;"	t	struct:boost::units::detail::push_front_or_add_impl::apply	access:public
boost::units::detail::push_front_or_add_impl::apply::type	/usr/include/boost/units/detail/push_front_or_add.hpp	/^        > type;$/;"	t	struct:boost::units::detail::push_front_or_add_impl::apply	access:public
boost::units::detail::push_front_or_add_impl::apply::type	/usr/include/boost/units/detail/push_front_or_add.hpp	/^        typedef list<T, Sequence> type;$/;"	t	struct:boost::units::detail::push_front_or_add_impl::apply	access:public
boost::units::detail::quantity_cast_helper	/usr/include/boost/units/quantity.hpp	/^struct quantity_cast_helper<Y,const quantity<Unit,X> >$/;"	s	namespace:boost::units::detail
boost::units::detail::quantity_cast_helper	/usr/include/boost/units/quantity.hpp	/^struct quantity_cast_helper<Y,quantity<Unit,X> >$/;"	s	namespace:boost::units::detail
boost::units::detail::quantity_cast_helper::operator ()	/usr/include/boost/units/quantity.hpp	/^    type operator()(const quantity<Unit,X>& source)     { return source.value(); }$/;"	f	struct:boost::units::detail::quantity_cast_helper	access:public	signature:(const quantity<Unit,X>& source)
boost::units::detail::quantity_cast_helper::operator ()	/usr/include/boost/units/quantity.hpp	/^    type operator()(quantity<Unit,X>& source)           { return const_cast<X&>(source.value()); }$/;"	f	struct:boost::units::detail::quantity_cast_helper	access:public	signature:(quantity<Unit,X>& source)
boost::units::detail::quantity_cast_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef Y type;$/;"	t	struct:boost::units::detail::quantity_cast_helper	access:public
boost::units::detail::scale_name_string_impl	/usr/include/boost/units/io.hpp	/^struct scale_name_string_impl $/;"	s	namespace:boost::units::detail
boost::units::detail::scale_name_string_impl	/usr/include/boost/units/io.hpp	/^struct scale_name_string_impl<0>$/;"	s	namespace:boost::units::detail
boost::units::detail::scale_name_string_impl::apply	/usr/include/boost/units/io.hpp	/^    struct apply $/;"	s	struct:boost::units::detail::scale_name_string_impl	access:public
boost::units::detail::scale_name_string_impl::apply::value	/usr/include/boost/units/io.hpp	/^        static void value(std::string& str) $/;"	f	struct:boost::units::detail::scale_name_string_impl::apply	access:public	signature:(std::string& str)
boost::units::detail::scale_name_string_impl::apply::value	/usr/include/boost/units/io.hpp	/^        static void value(std::string&) { }$/;"	f	struct:boost::units::detail::scale_name_string_impl::apply	access:public	signature:(std::string&)
boost::units::detail::scale_symbol_string_impl	/usr/include/boost/units/io.hpp	/^struct scale_symbol_string_impl $/;"	s	namespace:boost::units::detail
boost::units::detail::scale_symbol_string_impl	/usr/include/boost/units/io.hpp	/^struct scale_symbol_string_impl<0>$/;"	s	namespace:boost::units::detail
boost::units::detail::scale_symbol_string_impl::apply	/usr/include/boost/units/io.hpp	/^    struct apply $/;"	s	struct:boost::units::detail::scale_symbol_string_impl	access:public
boost::units::detail::scale_symbol_string_impl::apply::value	/usr/include/boost/units/io.hpp	/^        static void value(std::string& str) $/;"	f	struct:boost::units::detail::scale_symbol_string_impl::apply	access:public	signature:(std::string& str)
boost::units::detail::scale_symbol_string_impl::apply::value	/usr/include/boost/units/io.hpp	/^        static void value(std::string&) { }$/;"	f	struct:boost::units::detail::scale_symbol_string_impl::apply	access:public	signature:(std::string&)
boost::units::detail::set	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct set : Next {$/;"	s	namespace:boost::units::detail	inherits:Next
boost::units::detail::set::item	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef T item;$/;"	t	struct:boost::units::detail::set	access:public
boost::units::detail::set::lookup	/usr/include/boost/units/detail/linear_algebra.hpp	/^    static set_yes lookup(wrap<T>*);$/;"	p	struct:boost::units::detail::set	access:public	signature:(wrap<T>*)
boost::units::detail::set::next	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef Next next;$/;"	t	struct:boost::units::detail::set	access:public
boost::units::detail::set::size	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef typename mpl::next<typename Next::size>::type size;$/;"	t	struct:boost::units::detail::set	access:public
boost::units::detail::set_end	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct set_end {$/;"	s	namespace:boost::units::detail
boost::units::detail::set_end::lookup	/usr/include/boost/units/detail/linear_algebra.hpp	/^    static set_no lookup(...);$/;"	p	struct:boost::units::detail::set_end	access:public	signature:(....)
boost::units::detail::set_end::size	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef mpl::long_<0> size;$/;"	t	struct:boost::units::detail::set_end	access:public
boost::units::detail::set_insert	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct set_insert<false> {$/;"	s	namespace:boost::units::detail
boost::units::detail::set_insert	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct set_insert<true> {$/;"	s	namespace:boost::units::detail
boost::units::detail::set_insert::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::set_insert	access:public
boost::units::detail::set_insert::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef Set type;$/;"	t	struct:boost::units::detail::set_insert::apply	access:public
boost::units::detail::set_insert::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef set<T, Set> type;$/;"	t	struct:boost::units::detail::set_insert::apply	access:public
boost::units::detail::set_no	/usr/include/boost/units/detail/linear_algebra.hpp	/^typedef char set_no;$/;"	t	namespace:boost::units::detail
boost::units::detail::set_yes	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct set_yes { set_no dummy[2]; };$/;"	s	namespace:boost::units::detail
boost::units::detail::set_yes::dummy	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct set_yes { set_no dummy[2]; };$/;"	m	struct:boost::units::detail::set_yes	access:public
boost::units::detail::solve_end	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct solve_end {$/;"	s	namespace:boost::units::detail
boost::units::detail::solve_end::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::solve_end	access:public
boost::units::detail::solve_end::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::solve_end::apply	access:public
boost::units::detail::solve_first_non_zero	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct solve_first_non_zero {$/;"	s	namespace:boost::units::detail
boost::units::detail::solve_first_non_zero::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::solve_first_non_zero	access:public
boost::units::detail::solve_first_non_zero::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::solve_first_non_zero::apply	access:public
boost::units::detail::solve_internal_zero	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct solve_internal_zero {$/;"	s	namespace:boost::units::detail
boost::units::detail::solve_internal_zero::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::solve_internal_zero	access:public
boost::units::detail::solve_internal_zero::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        > type;$/;"	t	struct:boost::units::detail::solve_internal_zero::apply	access:public
boost::units::detail::solve_leading_zeroes	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct solve_leading_zeroes {$/;"	s	namespace:boost::units::detail
boost::units::detail::solve_leading_zeroes	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct solve_leading_zeroes<no_solution> {$/;"	s	namespace:boost::units::detail
boost::units::detail::solve_leading_zeroes::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::solve_leading_zeroes	access:public
boost::units::detail::solve_leading_zeroes::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        > type;$/;"	t	struct:boost::units::detail::solve_leading_zeroes::apply	access:public
boost::units::detail::solve_leading_zeroes::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    typedef no_solution type;$/;"	t	struct:boost::units::detail::solve_leading_zeroes	access:public
boost::units::detail::solve_leading_zeroes::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    typedef solve_leading_zeroes type;$/;"	t	struct:boost::units::detail::solve_leading_zeroes	access:public
boost::units::detail::solve_normal	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct solve_normal {$/;"	s	namespace:boost::units::detail
boost::units::detail::solve_normal::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::solve_normal	access:public
boost::units::detail::solve_normal::apply::next	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef typename Begin::next next;$/;"	t	struct:boost::units::detail::solve_normal::apply	access:public
boost::units::detail::solve_normal::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        > type;$/;"	t	struct:boost::units::detail::solve_normal::apply	access:public
boost::units::detail::sort_dims	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct sort_dims$/;"	s	namespace:boost::units::detail
boost::units::detail::sort_dims	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct sort_dims<list<T, Next> >$/;"	s	namespace:boost::units::detail
boost::units::detail::sort_dims::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^    typedef typename insertion_sort_dims_impl<list<T, Next>::size::value>::template apply<list<T, Next> >::type type;$/;"	t	struct:boost::units::detail::sort_dims	access:public
boost::units::detail::sort_dims::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^    typedef typename insertion_sort_dims_mpl_sequence<mpl::size<T>::value>::template apply<typename mpl::begin<T>::type>::type type;$/;"	t	struct:boost::units::detail::sort_dims	access:public
boost::units::detail::static_int_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_int_power_impl<0, true>$/;"	s	namespace:boost::units::detail
boost::units::detail::static_int_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_int_power_impl<1, false>$/;"	s	namespace:boost::units::detail
boost::units::detail::static_int_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_int_power_impl<N, false>$/;"	s	namespace:boost::units::detail
boost::units::detail::static_int_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_int_power_impl<N, true>$/;"	s	namespace:boost::units::detail
boost::units::detail::static_int_power_impl::apply	/usr/include/boost/units/detail/static_rational_power.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::static_int_power_impl	access:public
boost::units::detail::static_int_power_impl::apply::call	/usr/include/boost/units/detail/static_rational_power.hpp	/^        static R call(const Y&, const R& r)$/;"	f	struct:boost::units::detail::static_int_power_impl::apply	access:public	signature:(const Y&, const R& r)
boost::units::detail::static_int_power_impl::apply::call	/usr/include/boost/units/detail/static_rational_power.hpp	/^        static type call(const Y& y, const R& r)$/;"	f	struct:boost::units::detail::static_int_power_impl::apply	access:public	signature:(const Y& y, const R& r)
boost::units::detail::static_int_power_impl::apply::new_r	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef typename multiply_typeof_helper<Y, R>::type new_r;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
boost::units::detail::static_int_power_impl::apply::next	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef typename static_int_power_impl<(N >> 1)>::template apply<square_type, R> next;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
boost::units::detail::static_int_power_impl::apply::next	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef typename static_int_power_impl<(N >> 1)>::template apply<square_type, new_r> next;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
boost::units::detail::static_int_power_impl::apply::square_type	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef typename multiply_typeof_helper<Y, Y>::type square_type;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
boost::units::detail::static_int_power_impl::apply::type	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef R type;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
boost::units::detail::static_int_power_impl::apply::type	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef typename multiply_typeof_helper<Y, R>::type type;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
boost::units::detail::static_int_power_impl::apply::type	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef typename next::type type;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
boost::units::detail::static_inverse_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct static_inverse_impl$/;"	s	namespace:boost::units::detail
boost::units::detail::static_inverse_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct static_inverse_impl<0>$/;"	s	namespace:boost::units::detail
boost::units::detail::static_inverse_impl::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::static_inverse_impl	access:public
boost::units::detail::static_inverse_impl::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::static_inverse_impl	access:public
boost::units::detail::static_inverse_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        > type;$/;"	t	struct:boost::units::detail::static_inverse_impl::apply	access:public
boost::units::detail::static_inverse_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::static_inverse_impl::apply	access:public
boost::units::detail::static_power_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct static_power_impl$/;"	s	namespace:boost::units::detail
boost::units::detail::static_power_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct static_power_impl<0>$/;"	s	namespace:boost::units::detail
boost::units::detail::static_power_impl::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::static_power_impl	access:public
boost::units::detail::static_power_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        > type;$/;"	t	struct:boost::units::detail::static_power_impl::apply	access:public
boost::units::detail::static_power_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::static_power_impl::apply	access:public
boost::units::detail::static_rational_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_rational_power_impl$/;"	s	namespace:boost::units::detail
boost::units::detail::static_rational_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_rational_power_impl<R, one>$/;"	s	namespace:boost::units::detail
boost::units::detail::static_rational_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_rational_power_impl<static_rational<N, 1>, one>$/;"	s	namespace:boost::units::detail
boost::units::detail::static_rational_power_impl::call	/usr/include/boost/units/detail/static_rational_power.hpp	/^    static one call(const one&)$/;"	f	struct:boost::units::detail::static_rational_power_impl	access:public	signature:(const one&)
boost::units::detail::static_rational_power_impl::call	/usr/include/boost/units/detail/static_rational_power.hpp	/^    static type call(const Y& y)$/;"	f	struct:boost::units::detail::static_rational_power_impl	access:public	signature:(const Y& y)
boost::units::detail::static_rational_power_impl::type	/usr/include/boost/units/detail/static_rational_power.hpp	/^    typedef one type;$/;"	t	struct:boost::units::detail::static_rational_power_impl	access:public
boost::units::detail::static_rational_power_impl::type	/usr/include/boost/units/detail/static_rational_power.hpp	/^    typedef typename typeof_pow_adl_barrier::typeof_pow<Y>::type type;$/;"	t	struct:boost::units::detail::static_rational_power_impl	access:public
boost::units::detail::static_rational_tag	/usr/include/boost/units/static_rational.hpp	/^struct static_rational_tag {};$/;"	s	namespace:boost::units::detail
boost::units::detail::static_root_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct static_root_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::static_root_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct static_root_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::static_root_impl::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply $/;"	s	struct:boost::units::detail::static_root_impl	access:public
boost::units::detail::static_root_impl::apply	/usr/include/boost/units/detail/dimension_impl.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::static_root_impl	access:public
boost::units::detail::static_root_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        > type;$/;"	t	struct:boost::units::detail::static_root_impl::apply	access:public
boost::units::detail::static_root_impl::apply::type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::static_root_impl::apply	access:public
boost::units::detail::strip_zeroes_func	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct strip_zeroes_func {$/;"	s	namespace:boost::units::detail
boost::units::detail::strip_zeroes_func	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct strip_zeroes_func<static_rational<0> > {$/;"	s	namespace:boost::units::detail
boost::units::detail::strip_zeroes_func::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::strip_zeroes_func	access:public
boost::units::detail::strip_zeroes_func::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef inconsistent type;$/;"	t	struct:boost::units::detail::strip_zeroes_func::apply	access:public
boost::units::detail::strip_zeroes_func::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename strip_zeroes_impl<N-1>::template apply<typename L::next>::type type;$/;"	t	struct:boost::units::detail::strip_zeroes_func::apply	access:public
boost::units::detail::strip_zeroes_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct strip_zeroes_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::strip_zeroes_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct strip_zeroes_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::strip_zeroes_impl::apply	/usr/include/boost/units/detail/linear_algebra.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::strip_zeroes_impl	access:public
boost::units::detail::strip_zeroes_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef T type;$/;"	t	struct:boost::units::detail::strip_zeroes_impl::apply	access:public
boost::units::detail::strip_zeroes_impl::apply::type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename strip_zeroes_func<typename T::item>::template apply<T, N>::type type;$/;"	t	struct:boost::units::detail::strip_zeroes_impl::apply	access:public
boost::units::detail::symbol_string_impl	/usr/include/boost/units/io.hpp	/^struct symbol_string_impl$/;"	s	namespace:boost::units::detail
boost::units::detail::symbol_string_impl	/usr/include/boost/units/io.hpp	/^struct symbol_string_impl<0>$/;"	s	namespace:boost::units::detail
boost::units::detail::symbol_string_impl	/usr/include/boost/units/io.hpp	/^struct symbol_string_impl<1>$/;"	s	namespace:boost::units::detail
boost::units::detail::symbol_string_impl::apply	/usr/include/boost/units/io.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::symbol_string_impl	access:public
boost::units::detail::symbol_string_impl::apply::next	/usr/include/boost/units/io.hpp	/^        typedef typename symbol_string_impl<N-1>::template apply<typename Begin::next> next;$/;"	t	struct:boost::units::detail::symbol_string_impl::apply	access:public
boost::units::detail::symbol_string_impl::apply::value	/usr/include/boost/units/io.hpp	/^        static void value(std::string& str)$/;"	f	struct:boost::units::detail::symbol_string_impl::apply	access:public	signature:(std::string& str)
boost::units::detail::test_norm	/usr/include/boost/units/io.hpp	/^inline mpl::false_ test_norm(one) { return mpl::false_(); }$/;"	f	namespace:boost::units::detail	signature:(one)
boost::units::detail::test_norm	/usr/include/boost/units/io.hpp	/^inline mpl::true_ test_norm(double) { return mpl::true_(); }$/;"	f	namespace:boost::units::detail	signature:(double)
boost::units::detail::to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl($/;"	f	namespace:boost::units::detail	signature:( const unit< Dimension, heterogeneous_system< heterogeneous_system_impl< list<heterogeneous_system_dim<scaled_base_unit<Unit, UnitScale>, static_rational<1> >, dimensionless_type>, Dimension, Scale > > >&, Subformatter f, typename base_unit_info<scaled_base_unit<Unit, UnitScale> >::base_unit_info_primary_template* = 0)
boost::units::detail::to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl($/;"	f	namespace:boost::units::detail	signature:( const unit< Dimension, heterogeneous_system< heterogeneous_system_impl< list<heterogeneous_system_dim<scaled_base_unit<Unit, UnitScale>, static_rational<1> >, dimensionless_type>, Dimension, dimensionless_type > > >&, Subformatter f, typename base_unit_info<scaled_base_unit<Unit, UnitScale> >::base_unit_info_primary_template* = 0)
boost::units::detail::to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<Units, Dimension, Scale> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<Units, Dimension, Scale> > >&, Subformatter f)
boost::units::detail::to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<Units, Dimension, dimensionless_type> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<Units, Dimension, dimensionless_type> > >&, Subformatter f)
boost::units::detail::to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<list<heterogeneous_system_dim<Unit, static_rational<1> >,dimensionless_type>, Dimension, Scale> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<list<heterogeneous_system_dim<Unit, static_rational<1> >,dimensionless_type>, Dimension, Scale> > >&, Subformatter f)
boost::units::detail::to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<list<heterogeneous_system_dim<Unit, static_rational<1> >,dimensionless_type>, Dimension, dimensionless_type> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<list<heterogeneous_system_dim<Unit, static_rational<1> >,dimensionless_type>, Dimension, dimensionless_type> > >&, Subformatter f)
boost::units::detail::to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<Dimension,System>&, SubFormatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension,System>&, SubFormatter f)
boost::units::detail::to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<dimensionless_type, heterogeneous_system<heterogeneous_system_impl<dimensionless_type, dimensionless_type, Scale> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<dimensionless_type, heterogeneous_system<heterogeneous_system_impl<dimensionless_type, dimensionless_type, Scale> > >&, Subformatter f)
boost::units::detail::to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<dimensionless_type, heterogeneous_system<heterogeneous_system_impl<dimensionless_type, dimensionless_type, dimensionless_type> > >&, Subformatter)$/;"	f	namespace:boost::units::detail	signature:(const unit<dimensionless_type, heterogeneous_system<heterogeneous_system_impl<dimensionless_type, dimensionless_type, dimensionless_type> > >&, Subformatter)
boost::units::detail::try_add_unit_impl	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct try_add_unit_impl {$/;"	s	namespace:boost::units::detail
boost::units::detail::try_add_unit_impl	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct try_add_unit_impl<0> {$/;"	s	namespace:boost::units::detail
boost::units::detail::try_add_unit_impl::apply	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    struct apply {$/;"	s	struct:boost::units::detail::try_add_unit_impl	access:public
boost::units::detail::try_add_unit_impl::apply::BOOST_STATIC_ASSERT	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        BOOST_STATIC_ASSERT((next::size::value - 1 == type::size::value));$/;"	p	struct:boost::units::detail::try_add_unit_impl::apply	access:public	signature:(next::size::value - 1 == type::size::value)
boost::units::detail::try_add_unit_impl::apply::next	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef typename try_add_unit_impl<N-1>::template apply<typename Begin::next, L>::type next;$/;"	t	struct:boost::units::detail::try_add_unit_impl::apply	access:public
boost::units::detail::try_add_unit_impl::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef L type;$/;"	t	struct:boost::units::detail::try_add_unit_impl::apply	access:public
boost::units::detail::try_add_unit_impl::apply::type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef typename Begin::item::template apply<next>::type type;$/;"	t	struct:boost::units::detail::try_add_unit_impl::apply	access:public
boost::units::detail::typeof_pow_adl_barrier	/usr/include/boost/units/detail/static_rational_power.hpp	/^namespace typeof_pow_adl_barrier {$/;"	n	namespace:boost::units::detail
boost::units::detail::typeof_pow_adl_barrier::typeof_pow	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct typeof_pow$/;"	s	namespace:boost::units::detail::typeof_pow_adl_barrier
boost::units::detail::typeof_pow_adl_barrier::typeof_pow::type	/usr/include/boost/units/detail/static_rational_power.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::detail::typeof_pow_adl_barrier::typeof_pow	access:public
boost::units::detail::undefined_affine_conversion_base	/usr/include/boost/units/detail/absolute_impl.hpp	/^struct undefined_affine_conversion_base {$/;"	s	namespace:boost::units::detail
boost::units::detail::undefined_affine_conversion_base::is_defined	/usr/include/boost/units/detail/absolute_impl.hpp	/^    static const bool is_defined = false;$/;"	m	struct:boost::units::detail::undefined_affine_conversion_base	access:public
boost::units::detail::unscale_heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct unscale_heterogeneous_system_impl$/;"	s	namespace:boost::units::detail
boost::units::detail::unscale_heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct unscale_heterogeneous_system_impl<0>$/;"	s	namespace:boost::units::detail
boost::units::detail::unscale_heterogeneous_system_impl::apply	/usr/include/boost/units/heterogeneous_system.hpp	/^    struct apply$/;"	s	struct:boost::units::detail::unscale_heterogeneous_system_impl	access:public
boost::units::detail::unscale_heterogeneous_system_impl::apply::type	/usr/include/boost/units/heterogeneous_system.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::unscale_heterogeneous_system_impl::apply	access:public
boost::units::detail::unscale_heterogeneous_system_impl::apply::type	/usr/include/boost/units/heterogeneous_system.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::unscale_heterogeneous_system_impl::apply	access:public
boost::units::detail::unspecified	/usr/include/boost/units/make_system.hpp	/^struct unspecified {};$/;"	s	namespace:boost::units::detail
boost::units::detail::void_if_dimensionless	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct void_if_dimensionless {$/;"	s	namespace:boost::units::detail
boost::units::detail::void_if_dimensionless	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct void_if_dimensionless<boost::units::homogeneous_system<T> > {$/;"	s	namespace:boost::units::detail
boost::units::detail::void_if_dimensionless	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct void_if_dimensionless<heterogeneous_dimensionless_system> {$/;"	s	namespace:boost::units::detail
boost::units::detail::void_if_dimensionless::type	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^    typedef int type;$/;"	t	struct:boost::units::detail::void_if_dimensionless	access:public
boost::units::detail::void_if_dimensionless::type	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^    typedef void type;$/;"	t	struct:boost::units::detail::void_if_dimensionless	access:public
boost::units::detail::void_if_heterogeneous	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct void_if_heterogeneous {$/;"	s	namespace:boost::units::detail
boost::units::detail::void_if_heterogeneous	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct void_if_heterogeneous<System, typename void_if_dimensionless<System>::type> {$/;"	s	namespace:boost::units::detail
boost::units::detail::void_if_heterogeneous::type	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^    typedef int type;$/;"	t	struct:boost::units::detail::void_if_heterogeneous	access:public
boost::units::detail::void_if_heterogeneous::type	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^    typedef void type;$/;"	t	struct:boost::units::detail::void_if_heterogeneous	access:public
boost::units::detail::wrap	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct wrap {};$/;"	s	namespace:boost::units::detail
boost::units::detail::xalloc_key_holder	/usr/include/boost/units/io.hpp	/^struct xalloc_key_holder $/;"	s	namespace:boost::units::detail
boost::units::detail::xalloc_key_holder::initialized	/usr/include/boost/units/io.hpp	/^    static bool initialized;$/;"	m	struct:boost::units::detail::xalloc_key_holder	access:public
boost::units::detail::xalloc_key_holder::initialized	/usr/include/boost/units/io.hpp	/^bool xalloc_key_holder<b>::initialized = 0;$/;"	m	class:boost::units::detail::xalloc_key_holder
boost::units::detail::xalloc_key_holder::value	/usr/include/boost/units/io.hpp	/^    static int value;$/;"	m	struct:boost::units::detail::xalloc_key_holder	access:public
boost::units::detail::xalloc_key_holder::value	/usr/include/boost/units/io.hpp	/^int xalloc_key_holder<b>::value = 0;$/;"	m	class:boost::units::detail::xalloc_key_holder
boost::units::detail::xalloc_key_initializer_t	/usr/include/boost/units/io.hpp	/^struct xalloc_key_initializer_t $/;"	s	namespace:boost::units::detail
boost::units::detail::xalloc_key_initializer_t::xalloc_key_initializer_t	/usr/include/boost/units/io.hpp	/^    xalloc_key_initializer_t() $/;"	f	struct:boost::units::detail::xalloc_key_initializer_t	access:public	signature:()
boost::units::detail::yes	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct yes { no dummy[2]; };$/;"	s	namespace:boost::units::detail
boost::units::detail::yes::dummy	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct yes { no dummy[2]; };$/;"	m	struct:boost::units::detail::yes	access:public
boost::units::dim	/usr/include/boost/units/dim.hpp	/^struct dim$/;"	s	namespace:boost::units
boost::units::dim::tag	/usr/include/boost/units/dim.hpp	/^    typedef detail::dim_tag tag;$/;"	t	struct:boost::units::dim	access:public
boost::units::dim::tag_type	/usr/include/boost/units/dim.hpp	/^    typedef T               tag_type;$/;"	t	struct:boost::units::dim	access:public
boost::units::dim::type	/usr/include/boost/units/dim.hpp	/^    typedef dim             type;$/;"	t	struct:boost::units::dim	access:public
boost::units::dim::value_type	/usr/include/boost/units/dim.hpp	/^    typedef V               value_type;$/;"	t	struct:boost::units::dim	access:public
boost::units::dimensionless_quantity	/usr/include/boost/units/dimensionless_quantity.hpp	/^struct dimensionless_quantity$/;"	s	namespace:boost::units
boost::units::dimensionless_quantity::type	/usr/include/boost/units/dimensionless_quantity.hpp	/^    typedef quantity<typename dimensionless_unit<System>::type,Y>   type;$/;"	t	struct:boost::units::dimensionless_quantity	access:public
boost::units::dimensionless_type	/usr/include/boost/units/dimensionless_type.hpp	/^struct dimensionless_type$/;"	s	namespace:boost::units
boost::units::dimensionless_type::size	/usr/include/boost/units/dimensionless_type.hpp	/^    typedef mpl::long_<0>               size;$/;"	t	struct:boost::units::dimensionless_type	access:public
boost::units::dimensionless_type::tag	/usr/include/boost/units/dimensionless_type.hpp	/^    typedef detail::dimension_list_tag  tag;$/;"	t	struct:boost::units::dimensionless_type	access:public
boost::units::dimensionless_type::type	/usr/include/boost/units/dimensionless_type.hpp	/^    typedef dimensionless_type          type;$/;"	t	struct:boost::units::dimensionless_type	access:public
boost::units::dimensionless_unit	/usr/include/boost/units/dimensionless_unit.hpp	/^struct dimensionless_unit$/;"	s	namespace:boost::units
boost::units::dimensionless_unit::type	/usr/include/boost/units/dimensionless_unit.hpp	/^    typedef unit<dimensionless_type,System> type;$/;"	t	struct:boost::units::dimensionless_unit	access:public
boost::units::divide_typeof_helper	/usr/include/boost/units/detail/one.hpp	/^struct divide_typeof_helper<T, one>$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/detail/one.hpp	/^struct divide_typeof_helper<one, T>$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/detail/one.hpp	/^struct divide_typeof_helper<one, one>$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/lambda.hpp	/^    struct divide_typeof_helper<boost::lambda::lambda_functor<Arg>, boost::units::unit<Dim, System> > {$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/lambda.hpp	/^    struct divide_typeof_helper<boost::units::unit<Dim, System>, boost::lambda::lambda_functor<Arg> > {$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/operators.hpp	/^template<typename X,typename Y> struct divide_typeof_helper     $/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< X,quantity<Unit,Y> >$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< X,unit<Dim,System> >$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< one,quantity<Unit,Y> >$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< quantity<Unit,X>,Y >$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< quantity<Unit,X>,one >$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< quantity<Unit,X>,unit<Dim,System> >$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< quantity<Unit1,X>,quantity<Unit2,Y> >$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< unit<Dim,System>,X >$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< unit<Dim,System>,quantity<Unit,X> >$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct divide_typeof_helper< unit<Dim1,heterogeneous_system<System1> >,$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct divide_typeof_helper< unit<Dim1,homogeneous_system<System1> >,$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct divide_typeof_helper< unit<Dim1,homogeneous_system<System> >,$/;"	s	namespace:boost::units
boost::units::divide_typeof_helper::type	/usr/include/boost/units/detail/one.hpp	/^    typedef T type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::type	/usr/include/boost/units/detail/one.hpp	/^    typedef one type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::type	/usr/include/boost/units/lambda.hpp	/^        > type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::type	/usr/include/boost/units/operators.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<Unit,X> type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<Unit,Y> type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                                              type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                                  type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                      type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>              type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::type	/usr/include/boost/units/unit.hpp	/^    > type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::type	/usr/include/boost/units/unit.hpp	/^    typedef unit<typename mpl::divides<Dim1,Dim2>::type,homogeneous_system<System> >    type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef Unit                                        unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper< Unit,unit<Dim,System> >::type    unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper< unit<Dim,System>,Unit >::type    unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper<Unit1,Unit2>::type    unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename power_typeof_helper< Unit,static_rational<-1> >::type  unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename power_typeof_helper< unit<Dim,System>,static_rational<-1> >::type  unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef unit<Dim,System>                            unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef X                                                                           value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef X                                                               value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper<X,X>::type                        value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper<X,X>::type    value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper<X,Y>::type                        value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper<X,Y>::type            value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::divide_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper<X,Y>::type    value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
boost::units::dose_equivalent_dimension	/usr/include/boost/units/physical_dimensions/dose_equivalent.hpp	/^                          time_base_dimension,-2>::type dose_equivalent_dimension;  $/;"	t	namespace:boost::units
boost::units::dynamic_viscosity_dimension	/usr/include/boost/units/physical_dimensions/dynamic_viscosity.hpp	/^                          time_base_dimension,-1>::type dynamic_viscosity_dimension;$/;"	t	namespace:boost::units
boost::units::electric_charge_dimension	/usr/include/boost/units/physical_dimensions/electric_charge.hpp	/^                          current_base_dimension,1>::type electric_charge_dimension;          $/;"	t	namespace:boost::units
boost::units::electric_potential_dimension	/usr/include/boost/units/physical_dimensions/electric_potential.hpp	/^                          current_base_dimension,-1>::type electric_potential_dimension;        $/;"	t	namespace:boost::units
boost::units::energy_density_dimension	/usr/include/boost/units/physical_dimensions/energy_density.hpp	/^                          time_base_dimension,-2>::type energy_density_dimension;                $/;"	t	namespace:boost::units
boost::units::energy_dimension	/usr/include/boost/units/physical_dimensions/energy.hpp	/^                          time_base_dimension,-2>::type energy_dimension;                $/;"	t	namespace:boost::units
boost::units::engineering_prefix	/usr/include/boost/units/io.hpp	/^inline std::ios_base& engineering_prefix(std::ios_base& ios)$/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
boost::units::exp	/usr/include/boost/units/cmath.hpp	/^exp(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q)
boost::units::fahrenheit	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^namespace fahrenheit {$/;"	n	namespace:boost::units
boost::units::fahrenheit::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^BOOST_UNITS_STATIC_CONSTANT(degree,temperature);$/;"	p	namespace:boost::units::fahrenheit	signature:(degree,temperature)
boost::units::fahrenheit::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^BOOST_UNITS_STATIC_CONSTANT(degrees,temperature);$/;"	p	namespace:boost::units::fahrenheit	signature:(degrees,temperature)
boost::units::fahrenheit::system	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^typedef make_system<boost::units::temperature::fahrenheit_base_unit>::type system;$/;"	t	namespace:boost::units::fahrenheit
boost::units::fahrenheit::temperature	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^typedef unit<temperature_dimension,system>   temperature;$/;"	t	namespace:boost::units::fahrenheit
boost::units::fmod	/usr/include/boost/units/cmath.hpp	/^fmod(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
boost::units::fmt_mask	/usr/include/boost/units/io.hpp	/^    fmt_mask = 3 \/\/\/ Bits used for format.$/;"	e	enum:boost::units::format_mode
boost::units::force_dimension	/usr/include/boost/units/physical_dimensions/force.hpp	/^                          time_base_dimension,-2>::type force_dimension;                    $/;"	t	namespace:boost::units
boost::units::format_mode	/usr/include/boost/units/io.hpp	/^enum format_mode$/;"	g	namespace:boost::units
boost::units::frequency_dimension	/usr/include/boost/units/physical_dimensions/frequency.hpp	/^typedef derived_dimension<time_base_dimension,-1>::type frequency_dimension;                $/;"	t	namespace:boost::units
boost::units::frexp	/usr/include/boost/units/cmath.hpp	/^frexp(const quantity<Unit, Y>& q,Int* ex)$/;"	f	namespace:boost::units	signature:(const quantity<Unit, Y>& q,Int* ex)
boost::units::get_autoprefix	/usr/include/boost/units/io.hpp	/^inline autoprefix_mode get_autoprefix(std::ios_base& ios)$/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
boost::units::get_default_conversion	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct get_default_conversion$/;"	s	namespace:boost::units
boost::units::get_default_conversion::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    >::template apply<BaseUnit>::type type;$/;"	t	struct:boost::units::get_default_conversion	access:public
boost::units::get_dimension	/usr/include/boost/units/get_dimension.hpp	/^struct get_dimension {};$/;"	s	namespace:boost::units
boost::units::get_dimension	/usr/include/boost/units/get_dimension.hpp	/^struct get_dimension< absolute<Unit> >$/;"	s	namespace:boost::units
boost::units::get_dimension	/usr/include/boost/units/get_dimension.hpp	/^struct get_dimension< quantity<Unit,Y> >$/;"	s	namespace:boost::units
boost::units::get_dimension	/usr/include/boost/units/get_dimension.hpp	/^struct get_dimension< unit<Dim,System> >$/;"	s	namespace:boost::units
boost::units::get_dimension::type	/usr/include/boost/units/get_dimension.hpp	/^    typedef Dim type;$/;"	t	struct:boost::units::get_dimension	access:public
boost::units::get_dimension::type	/usr/include/boost/units/get_dimension.hpp	/^    typedef typename get_dimension<Unit>::type  type;$/;"	t	struct:boost::units::get_dimension	access:public
boost::units::get_flags	/usr/include/boost/units/io.hpp	/^inline long get_flags(std::ios_base& ios, long mask) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios, long mask)
boost::units::get_format	/usr/include/boost/units/io.hpp	/^inline format_mode get_format(std::ios_base& ios) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
boost::units::get_scale_list	/usr/include/boost/units/detail/unscale.hpp	/^struct get_scale_list$/;"	s	namespace:boost::units
boost::units::get_scale_list	/usr/include/boost/units/detail/unscale.hpp	/^struct get_scale_list<scaled_base_unit<S, Scale> >$/;"	s	namespace:boost::units
boost::units::get_scale_list	/usr/include/boost/units/detail/unscale.hpp	/^struct get_scale_list<unit<D, S> >$/;"	s	namespace:boost::units
boost::units::get_scale_list	/usr/include/boost/units/heterogeneous_system.hpp	/^struct get_scale_list<heterogeneous_system<T> >$/;"	s	namespace:boost::units
boost::units::get_scale_list	/usr/include/boost/units/heterogeneous_system.hpp	/^struct get_scale_list<heterogeneous_system_dim<Unit, Exponent> >$/;"	s	namespace:boost::units
boost::units::get_scale_list::type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef dimensionless_type type;$/;"	t	struct:boost::units::get_scale_list	access:public
boost::units::get_scale_list::type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef typename get_scale_list<S>::type type;$/;"	t	struct:boost::units::get_scale_list	access:public
boost::units::get_scale_list::type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef typename mpl::times<list<scale_list_dim<Scale>, dimensionless_type>, typename get_scale_list<S>::type>::type type;$/;"	t	struct:boost::units::get_scale_list	access:public
boost::units::get_scale_list::type	/usr/include/boost/units/heterogeneous_system.hpp	/^    >::type type;$/;"	t	struct:boost::units::get_scale_list	access:public
boost::units::get_scale_list::type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef typename static_power<typename get_scale_list<Unit>::type, Exponent>::type type;$/;"	t	struct:boost::units::get_scale_list	access:public
boost::units::get_system	/usr/include/boost/units/get_system.hpp	/^struct get_system {};$/;"	s	namespace:boost::units
boost::units::get_system	/usr/include/boost/units/get_system.hpp	/^struct get_system< absolute<Unit> >$/;"	s	namespace:boost::units
boost::units::get_system	/usr/include/boost/units/get_system.hpp	/^struct get_system< quantity<Unit,Y> >$/;"	s	namespace:boost::units
boost::units::get_system	/usr/include/boost/units/get_system.hpp	/^struct get_system< unit<Dim,System> >$/;"	s	namespace:boost::units
boost::units::get_system::type	/usr/include/boost/units/get_system.hpp	/^    typedef System type;$/;"	t	struct:boost::units::get_system	access:public
boost::units::get_system::type	/usr/include/boost/units/get_system.hpp	/^    typedef typename get_system<Unit>::type     type;$/;"	t	struct:boost::units::get_system	access:public
boost::units::get_system::type	/usr/include/boost/units/get_system.hpp	/^    typedef typename get_system<Unit>::type type;$/;"	t	struct:boost::units::get_system	access:public
boost::units::gradian	/usr/include/boost/units/systems/angle/gradians.hpp	/^namespace gradian {$/;"	n	namespace:boost::units
boost::units::gradian::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/angle/gradians.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gradian,plane_angle);$/;"	p	namespace:boost::units::gradian	signature:(gradian,plane_angle)
boost::units::gradian::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/angle/gradians.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gradians,plane_angle);$/;"	p	namespace:boost::units::gradian	signature:(gradians,plane_angle)
boost::units::gradian::dimensionless	/usr/include/boost/units/systems/angle/gradians.hpp	/^typedef unit<dimensionless_type,system>         dimensionless;$/;"	t	namespace:boost::units::gradian
boost::units::gradian::plane_angle	/usr/include/boost/units/systems/angle/gradians.hpp	/^typedef unit<plane_angle_dimension,system>      plane_angle;          \/\/\/< angle gradian unit constant$/;"	t	namespace:boost::units::gradian
boost::units::gradian::system	/usr/include/boost/units/systems/angle/gradians.hpp	/^typedef make_system<boost::units::angle::gradian_base_unit>::type system;$/;"	t	namespace:boost::units::gradian
boost::units::heat_capacity_dimension	/usr/include/boost/units/physical_dimensions/heat_capacity.hpp	/^                          temperature_base_dimension,-1>::type heat_capacity_dimension;                    $/;"	t	namespace:boost::units
boost::units::heterogeneous_dimensionless_system	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^> heterogeneous_dimensionless_system;$/;"	t	namespace:boost::units
boost::units::heterogeneous_system	/usr/include/boost/units/heterogeneous_system.hpp	/^struct heterogeneous_system : T {};$/;"	s	namespace:boost::units	inherits:T
boost::units::heterogeneous_system_dim	/usr/include/boost/units/heterogeneous_system.hpp	/^struct heterogeneous_system_dim$/;"	s	namespace:boost::units
boost::units::heterogeneous_system_dim::tag	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef heterogeneous_system_dim_tag tag;$/;"	t	struct:boost::units::heterogeneous_system_dim	access:public
boost::units::heterogeneous_system_dim::tag_type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef Unit tag_type;$/;"	t	struct:boost::units::heterogeneous_system_dim	access:public
boost::units::heterogeneous_system_dim::type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef heterogeneous_system_dim type;$/;"	t	struct:boost::units::heterogeneous_system_dim	access:public
boost::units::heterogeneous_system_dim::value_type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef Exponent value_type;$/;"	t	struct:boost::units::heterogeneous_system_dim	access:public
boost::units::heterogeneous_system_dim_tag	/usr/include/boost/units/heterogeneous_system.hpp	/^struct heterogeneous_system_dim_tag {};$/;"	s	namespace:boost::units
boost::units::heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct heterogeneous_system_impl$/;"	s	namespace:boost::units
boost::units::heterogeneous_system_impl::dimensions	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef Dimensions dimensions;$/;"	t	struct:boost::units::heterogeneous_system_impl	access:public
boost::units::heterogeneous_system_impl::scale	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef Scale scale;$/;"	t	struct:boost::units::heterogeneous_system_impl	access:public
boost::units::heterogeneous_system_impl::type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef L type;$/;"	t	struct:boost::units::heterogeneous_system_impl	access:public
boost::units::homogeneous_system	/usr/include/boost/units/homogeneous_system.hpp	/^struct homogeneous_system {$/;"	s	namespace:boost::units
boost::units::homogeneous_system::type	/usr/include/boost/units/homogeneous_system.hpp	/^    typedef L type;$/;"	t	struct:boost::units::homogeneous_system	access:public
boost::units::illuminance_dimension	/usr/include/boost/units/physical_dimensions/illuminance.hpp	/^                          solid_angle_base_dimension,1>::type illuminance_dimension;$/;"	t	namespace:boost::units
boost::units::impedance_dimension	/usr/include/boost/units/physical_dimensions/impedance.hpp	/^                          current_base_dimension,-2>::type impedance_dimension;          $/;"	t	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/foot.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/gill.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/grain.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/inch.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/league.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/mile.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/quart.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/stone.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/thou.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial	/usr/include/boost/units/base_units/imperial/ton.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
boost::units::imperial::drachm_base_unit	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<16, static_rational<-2> > > drachm_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::fluid_ounce_base_unit	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<20, static_rational<-1> > > fluid_ounce_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::foot_base_unit	/usr/include/boost/units/base_units/imperial/foot.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<3, static_rational<-1> > > foot_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::furlong_base_unit	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<220, static_rational<1> > > furlong_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::gallon_base_unit	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<8, static_rational<1> > > gallon_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::gill_base_unit	/usr/include/boost/units/base_units/imperial/gill.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<4, static_rational<-1> > > gill_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::grain_base_unit	/usr/include/boost/units/base_units/imperial/grain.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<7000, static_rational<-1> > > grain_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::hundredweight_base_unit	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<112, static_rational<1> > > hundredweight_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::inch_base_unit	/usr/include/boost/units/base_units/imperial/inch.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<36, static_rational<-1> > > inch_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::league_base_unit	/usr/include/boost/units/base_units/imperial/league.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<5280, static_rational<1> > > league_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::mile_base_unit	/usr/include/boost/units/base_units/imperial/mile.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<1760, static_rational<1> > > mile_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::ounce_base_unit	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<2, static_rational<-4> > > ounce_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::quart_base_unit	/usr/include/boost/units/base_units/imperial/quart.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<1> > > quart_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::quarter_base_unit	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<28, static_rational<1> > > quarter_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::stone_base_unit	/usr/include/boost/units/base_units/imperial/stone.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<14, static_rational<1> > > stone_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::thou_base_unit	/usr/include/boost/units/base_units/imperial/thou.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<36000, static_rational<-1> > > thou_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::imperial::ton_base_unit	/usr/include/boost/units/base_units/imperial/ton.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<2240, static_rational<1> > > ton_base_unit;$/;"	t	namespace:boost::units::imperial
boost::units::inductance_dimension	/usr/include/boost/units/physical_dimensions/inductance.hpp	/^                          current_base_dimension,-2>::type inductance_dimension;       $/;"	t	namespace:boost::units
boost::units::integer_type	/usr/include/boost/units/static_rational.hpp	/^typedef long   integer_type;$/;"	t	namespace:boost::units
boost::units::is_dim	/usr/include/boost/units/is_dim.hpp	/^struct is_dim :$/;"	s	namespace:boost::units	inherits:mpl::false_
boost::units::is_dim	/usr/include/boost/units/is_dim.hpp	/^struct is_dim< dim<T,V> > :$/;"	s	namespace:boost::units	inherits:mpl::true_
boost::units::is_dimension_list	/usr/include/boost/units/is_dimension_list.hpp	/^struct is_dimension_list :$/;"	s	namespace:boost::units	inherits:mpl::false_
boost::units::is_dimension_list	/usr/include/boost/units/is_dimension_list.hpp	/^struct is_dimension_list<dimensionless_type> :$/;"	s	namespace:boost::units	inherits:mpl::true_
boost::units::is_dimension_list	/usr/include/boost/units/is_dimension_list.hpp	/^struct is_dimension_list<list<Item, Next> > :$/;"	s	namespace:boost::units	inherits:mpl::true_
boost::units::is_dimensionless	/usr/include/boost/units/is_dimensionless.hpp	/^struct is_dimensionless :$/;"	s	namespace:boost::units	inherits:mpl::false_
boost::units::is_dimensionless	/usr/include/boost/units/is_dimensionless.hpp	/^struct is_dimensionless< quantity<Unit,Y> > :$/;"	s	namespace:boost::units	inherits:is_dimensionless
boost::units::is_dimensionless	/usr/include/boost/units/is_dimensionless.hpp	/^struct is_dimensionless< unit<dimensionless_type,System> > :$/;"	s	namespace:boost::units	inherits:mpl::true_
boost::units::is_dimensionless_quantity	/usr/include/boost/units/is_dimensionless_quantity.hpp	/^struct is_dimensionless_quantity :$/;"	s	namespace:boost::units	inherits:is_quantity_of_dimension
boost::units::is_dimensionless_unit	/usr/include/boost/units/is_dimensionless_unit.hpp	/^struct is_dimensionless_unit :$/;"	s	namespace:boost::units	inherits:is_unit_of_dimension
boost::units::is_implicitly_convertible	/usr/include/boost/units/unit.hpp	/^struct is_implicitly_convertible :$/;"	s	namespace:boost::units	inherits:boost::is_same
boost::units::is_quantity	/usr/include/boost/units/is_quantity.hpp	/^struct is_quantity :$/;"	s	namespace:boost::units	inherits:mpl::false_
boost::units::is_quantity	/usr/include/boost/units/is_quantity.hpp	/^struct is_quantity< quantity<Unit,Y> > : $/;"	s	namespace:boost::units	inherits:mpl::true_
boost::units::is_quantity_of_dimension	/usr/include/boost/units/is_quantity_of_dimension.hpp	/^struct is_quantity_of_dimension :$/;"	s	namespace:boost::units	inherits:mpl::false_
boost::units::is_quantity_of_dimension	/usr/include/boost/units/is_quantity_of_dimension.hpp	/^struct is_quantity_of_dimension< quantity< Unit,Y>,Dim > :$/;"	s	namespace:boost::units	inherits:is_unit_of_dimension
boost::units::is_quantity_of_system	/usr/include/boost/units/is_quantity_of_system.hpp	/^struct is_quantity_of_system :$/;"	s	namespace:boost::units	inherits:mpl::false_
boost::units::is_quantity_of_system	/usr/include/boost/units/is_quantity_of_system.hpp	/^struct is_quantity_of_system< quantity< Unit,Y>,System > :$/;"	s	namespace:boost::units	inherits:is_unit_of_system
boost::units::is_unit	/usr/include/boost/units/is_unit.hpp	/^struct is_unit : $/;"	s	namespace:boost::units	inherits:mpl::false_
boost::units::is_unit	/usr/include/boost/units/is_unit.hpp	/^struct is_unit< unit<Dim,System> > :$/;"	s	namespace:boost::units	inherits:mpl::true_
boost::units::is_unit_of_dimension	/usr/include/boost/units/is_unit_of_dimension.hpp	/^struct is_unit_of_dimension :$/;"	s	namespace:boost::units	inherits:mpl::false_
boost::units::is_unit_of_dimension	/usr/include/boost/units/is_unit_of_dimension.hpp	/^struct is_unit_of_dimension< absolute<unit<Dim,System> >,Dim > :$/;"	s	namespace:boost::units	inherits:mpl::true_
boost::units::is_unit_of_dimension	/usr/include/boost/units/is_unit_of_dimension.hpp	/^struct is_unit_of_dimension< unit<Dim,System>,Dim > :$/;"	s	namespace:boost::units	inherits:mpl::true_
boost::units::is_unit_of_system	/usr/include/boost/units/is_unit_of_system.hpp	/^struct is_unit_of_system :$/;"	s	namespace:boost::units	inherits:mpl::false_
boost::units::is_unit_of_system	/usr/include/boost/units/is_unit_of_system.hpp	/^struct is_unit_of_system< absolute<unit<Dim,System> >,System > :$/;"	s	namespace:boost::units	inherits:mpl::true_
boost::units::is_unit_of_system	/usr/include/boost/units/is_unit_of_system.hpp	/^struct is_unit_of_system< unit<Dim,System>,System > :$/;"	s	namespace:boost::units	inherits:mpl::true_
boost::units::kinematic_viscosity_dimension	/usr/include/boost/units/physical_dimensions/kinematic_viscosity.hpp	/^                          time_base_dimension,-1>::type kinematic_viscosity_dimension;$/;"	t	namespace:boost::units
boost::units::ldexp	/usr/include/boost/units/cmath.hpp	/^ldexp(const quantity<Unit, Y>& q,const Int& ex)$/;"	f	namespace:boost::units	signature:(const quantity<Unit, Y>& q,const Int& ex)
boost::units::length_base_dimension	/usr/include/boost/units/physical_dimensions/length.hpp	/^struct length_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
boost::units::length_dimension	/usr/include/boost/units/physical_dimensions/length.hpp	/^typedef length_base_dimension::dimension_type length_dimension;$/;"	t	namespace:boost::units
boost::units::list	/usr/include/boost/units/detail/dimension_list.hpp	/^struct list$/;"	s	namespace:boost::units
boost::units::list::item	/usr/include/boost/units/detail/dimension_list.hpp	/^    typedef Item                        item;$/;"	t	struct:boost::units::list	access:public
boost::units::list::next	/usr/include/boost/units/detail/dimension_list.hpp	/^    typedef Next                        next;$/;"	t	struct:boost::units::list	access:public
boost::units::list::size	/usr/include/boost/units/detail/dimension_list.hpp	/^    typedef typename mpl::next<typename Next::size>::type size;$/;"	t	struct:boost::units::list	access:public
boost::units::list::tag	/usr/include/boost/units/detail/dimension_list.hpp	/^    typedef detail::dimension_list_tag  tag;$/;"	t	struct:boost::units::list	access:public
boost::units::list::type	/usr/include/boost/units/detail/dimension_list.hpp	/^    typedef list              type;$/;"	t	struct:boost::units::list	access:public
boost::units::log	/usr/include/boost/units/cmath.hpp	/^log(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q)
boost::units::log10	/usr/include/boost/units/cmath.hpp	/^log10(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q)
boost::units::luminance_dimension	/usr/include/boost/units/physical_dimensions/luminance.hpp	/^                          luminous_intensity_base_dimension,1>::type luminance_dimension;$/;"	t	namespace:boost::units
boost::units::luminous_flux_dimension	/usr/include/boost/units/physical_dimensions/luminous_flux.hpp	/^                          solid_angle_base_dimension,1>::type luminous_flux_dimension;$/;"	t	namespace:boost::units
boost::units::luminous_intensity_base_dimension	/usr/include/boost/units/physical_dimensions/luminous_intensity.hpp	/^struct luminous_intensity_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
boost::units::luminous_intensity_dimension	/usr/include/boost/units/physical_dimensions/luminous_intensity.hpp	/^typedef luminous_intensity_base_dimension::dimension_type luminous_intensity_dimension;$/;"	t	namespace:boost::units
boost::units::magnetic_field_intensity_dimension	/usr/include/boost/units/physical_dimensions/magnetic_field_intensity.hpp	/^                          current_base_dimension,1>::type magnetic_field_intensity_dimension;      $/;"	t	namespace:boost::units
boost::units::magnetic_flux_density_dimension	/usr/include/boost/units/physical_dimensions/magnetic_flux_density.hpp	/^                          current_base_dimension,-1>::type magnetic_flux_density_dimension;        $/;"	t	namespace:boost::units
boost::units::magnetic_flux_dimension	/usr/include/boost/units/physical_dimensions/magnetic_flux.hpp	/^                          current_base_dimension,-1>::type magnetic_flux_dimension;           $/;"	t	namespace:boost::units
boost::units::make_dimension_list	/usr/include/boost/units/dimension.hpp	/^struct make_dimension_list$/;"	s	namespace:boost::units
boost::units::make_dimension_list::type	/usr/include/boost/units/dimension.hpp	/^    typedef typename detail::sort_dims<Seq>::type type;$/;"	t	struct:boost::units::make_dimension_list	access:public
boost::units::make_integral_c	/usr/include/boost/units/static_rational.hpp	/^struct make_integral_c {$/;"	s	namespace:boost::units
boost::units::make_integral_c::type	/usr/include/boost/units/static_rational.hpp	/^    typedef boost::mpl::integral_c<integer_type, X> type;$/;"	t	struct:boost::units::make_integral_c	access:public
boost::units::make_one	/usr/include/boost/units/detail/one.hpp	/^inline one make_one() {$/;"	f	namespace:boost::units	signature:()
boost::units::make_scaled_unit	/usr/include/boost/units/make_scaled_unit.hpp	/^struct make_scaled_unit {$/;"	s	namespace:boost::units
boost::units::make_scaled_unit	/usr/include/boost/units/make_scaled_unit.hpp	/^struct make_scaled_unit<unit<Dimension, heterogeneous_system<heterogeneous_system_impl<UnitList, Dimension, OldScale> > >, Scale> {$/;"	s	namespace:boost::units
boost::units::make_scaled_unit	/usr/include/boost/units/make_scaled_unit.hpp	/^struct make_scaled_unit<unit<Dimension, heterogeneous_system<heterogeneous_system_impl<UnitList, Dimension, OldScale> > >, scale<Base, static_rational<0> > > {$/;"	s	namespace:boost::units
boost::units::make_scaled_unit::type	/usr/include/boost/units/make_scaled_unit.hpp	/^    > type;$/;"	t	struct:boost::units::make_scaled_unit	access:public
boost::units::make_scaled_unit::type	/usr/include/boost/units/make_scaled_unit.hpp	/^    typedef typename make_scaled_unit<typename reduce_unit<Unit>::type, Scale>::type type;$/;"	t	struct:boost::units::make_scaled_unit	access:public
boost::units::make_system	/usr/include/boost/units/make_system.hpp	/^struct make_system$/;"	s	namespace:boost::units
boost::units::make_system::type	/usr/include/boost/units/make_system.hpp	/^    typedef homogeneous_system<detail::unspecified> type;$/;"	t	struct:boost::units::make_system	access:public
boost::units::mass_base_dimension	/usr/include/boost/units/physical_dimensions/mass.hpp	/^struct mass_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
boost::units::mass_density_dimension	/usr/include/boost/units/physical_dimensions/mass_density.hpp	/^                          mass_base_dimension,1>::type mass_density_dimension;            $/;"	t	namespace:boost::units
boost::units::mass_dimension	/usr/include/boost/units/physical_dimensions/mass.hpp	/^typedef mass_base_dimension::dimension_type   mass_dimension;           $/;"	t	namespace:boost::units
boost::units::metric	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^namespace metric {$/;"	n	namespace:boost::units
boost::units::metric	/usr/include/boost/units/base_units/metric/day.hpp	/^namespace metric {$/;"	n	namespace:boost::units
boost::units::metric	/usr/include/boost/units/base_units/metric/fermi.hpp	/^namespace metric {$/;"	n	namespace:boost::units
boost::units::metric	/usr/include/boost/units/base_units/metric/hour.hpp	/^namespace metric {$/;"	n	namespace:boost::units
boost::units::metric	/usr/include/boost/units/base_units/metric/micron.hpp	/^namespace metric {$/;"	n	namespace:boost::units
boost::units::metric	/usr/include/boost/units/base_units/metric/minute.hpp	/^namespace metric {$/;"	n	namespace:boost::units
boost::units::metric	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^namespace metric {$/;"	n	namespace:boost::units
boost::units::metric	/usr/include/boost/units/base_units/metric/ton.hpp	/^namespace metric {$/;"	n	namespace:boost::units
boost::units::metric	/usr/include/boost/units/base_units/metric/year.hpp	/^namespace metric {$/;"	n	namespace:boost::units
boost::units::metric::angstrom_base_unit	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^typedef scaled_base_unit<boost::units::si::meter_base_unit, scale<10, static_rational<-10> > > angstrom_base_unit;$/;"	t	namespace:boost::units::metric
boost::units::metric::day_base_unit	/usr/include/boost/units/base_units/metric/day.hpp	/^typedef scaled_base_unit<boost::units::si::second_base_unit, scale<86400, static_rational<1> > > day_base_unit;$/;"	t	namespace:boost::units::metric
boost::units::metric::fermi_base_unit	/usr/include/boost/units/base_units/metric/fermi.hpp	/^typedef scaled_base_unit<boost::units::si::meter_base_unit, scale<10, static_rational<-15> > > fermi_base_unit;$/;"	t	namespace:boost::units::metric
boost::units::metric::hour_base_unit	/usr/include/boost/units/base_units/metric/hour.hpp	/^typedef scaled_base_unit<boost::units::si::second_base_unit, scale<60, static_rational<2> > > hour_base_unit;$/;"	t	namespace:boost::units::metric
boost::units::metric::micron_base_unit	/usr/include/boost/units/base_units/metric/micron.hpp	/^typedef scaled_base_unit<boost::units::si::meter_base_unit, scale<10, static_rational<-6> > >  micron_base_unit;$/;"	t	namespace:boost::units::metric
boost::units::metric::minute_base_unit	/usr/include/boost/units/base_units/metric/minute.hpp	/^typedef scaled_base_unit<boost::units::si::second_base_unit, scale<60, static_rational<1> > > minute_base_unit;$/;"	t	namespace:boost::units::metric
boost::units::metric::nautical_mile_base_unit	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^typedef scaled_base_unit<boost::units::si::meter_base_unit, scale<1852, static_rational<1> > > nautical_mile_base_unit;$/;"	t	namespace:boost::units::metric
boost::units::metric::ton_base_unit	/usr/include/boost/units/base_units/metric/ton.hpp	/^typedef scaled_base_unit<boost::units::si::kilogram_base_unit, scale<1000, static_rational<1> > > ton_base_unit;$/;"	t	namespace:boost::units::metric
boost::units::metric::year_base_unit	/usr/include/boost/units/base_units/metric/year.hpp	/^typedef scaled_base_unit<boost::units::si::second_base_unit, scale<31557600, static_rational<1> > > year_base_unit;$/;"	t	namespace:boost::units::metric
boost::units::modf	/usr/include/boost/units/cmath.hpp	/^modf(const quantity<Unit, Y>& q1, quantity<Unit, Y>* q2)$/;"	f	namespace:boost::units	signature:(const quantity<Unit, Y>& q1, quantity<Unit, Y>* q2)
boost::units::molar_energy_dimension	/usr/include/boost/units/physical_dimensions/molar_energy.hpp	/^                          amount_base_dimension,-1>::type molar_energy_dimension;                    $/;"	t	namespace:boost::units
boost::units::molar_heat_capacity_dimension	/usr/include/boost/units/physical_dimensions/molar_heat_capacity.hpp	/^                          amount_base_dimension,-1>::type molar_heat_capacity_dimension;                    $/;"	t	namespace:boost::units
boost::units::moment_of_inertia_dimension	/usr/include/boost/units/physical_dimensions/moment_of_inertia.hpp	/^                          plane_angle_base_dimension,-2>::type moment_of_inertia_dimension;                $/;"	t	namespace:boost::units
boost::units::momentum_dimension	/usr/include/boost/units/physical_dimensions/momentum.hpp	/^                          time_base_dimension,-1>::type momentum_dimension;                $/;"	t	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/detail/one.hpp	/^struct multiply_typeof_helper<T, one>$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/detail/one.hpp	/^struct multiply_typeof_helper<one, T>$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/detail/one.hpp	/^struct multiply_typeof_helper<one, one>$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/lambda.hpp	/^    struct multiply_typeof_helper<boost::lambda::lambda_functor<Arg>, boost::units::absolute<boost::units::unit<Dim, System> > > {$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/lambda.hpp	/^    struct multiply_typeof_helper<boost::lambda::lambda_functor<Arg>, boost::units::unit<Dim, System> > {$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/lambda.hpp	/^    struct multiply_typeof_helper<boost::units::absolute<boost::units::unit<Dim, System> >, boost::lambda::lambda_functor<Arg> > {$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/lambda.hpp	/^    struct multiply_typeof_helper<boost::units::unit<Dim, System>, boost::lambda::lambda_functor<Arg> > {$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/operators.hpp	/^template<typename X,typename Y> struct multiply_typeof_helper   $/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< X,quantity<Unit,Y> >$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< X,unit<Dim,System> >$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< one,quantity<Unit,Y> >$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< quantity<Unit,X>,Y >$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< quantity<Unit,X>,one >$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< quantity<Unit,X>,unit<Dim,System> >$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< quantity<Unit1,X>,quantity<Unit2,Y> >$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< unit<Dim,System>,X >$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< unit<Dim,System>,quantity<Unit,X> >$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct multiply_typeof_helper< unit<Dim1,heterogeneous_system<System1> >,$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct multiply_typeof_helper< unit<Dim1,homogeneous_system<System1> >,$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct multiply_typeof_helper< unit<Dim1,homogeneous_system<System> >,$/;"	s	namespace:boost::units
boost::units::multiply_typeof_helper::type	/usr/include/boost/units/detail/one.hpp	/^    typedef T type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::type	/usr/include/boost/units/detail/one.hpp	/^    typedef one type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::type	/usr/include/boost/units/lambda.hpp	/^        > type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::type	/usr/include/boost/units/operators.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<Unit,X> type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<Unit,Y> type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                                  type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                      type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>              type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>  type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::type	/usr/include/boost/units/unit.hpp	/^    > type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::type	/usr/include/boost/units/unit.hpp	/^    typedef unit<typename mpl::times<Dim1,Dim2>::type,homogeneous_system<System> >    type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef Unit                                        unit_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename multiply_typeof_helper< Unit,unit<Dim,System> >::type  unit_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename multiply_typeof_helper< unit<Dim,System>,Unit >::type  unit_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename multiply_typeof_helper<Unit1,Unit2>::type  unit_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef unit<Dim,System>                unit_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef X                                                               value_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef X                               value_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename multiply_typeof_helper<X,Y>::type          value_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::multiply_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename multiply_typeof_helper<X,Y>::type  value_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
boost::units::name_fmt	/usr/include/boost/units/io.hpp	/^    name_fmt = 1,           \/\/\/ output full unit names for base and derived units, for example "meter".$/;"	e	enum:boost::units::format_mode
boost::units::name_format	/usr/include/boost/units/io.hpp	/^inline std::ios_base& name_format(std::ios_base& ios) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
boost::units::name_string	/usr/include/boost/units/io.hpp	/^name_string(const unit<Dimension, System>&)$/;"	f	namespace:boost::units	signature:(const unit<Dimension, System>&)
boost::units::name_string	/usr/include/boost/units/scale.hpp	/^std::string name_string(const scale<Base,Exponent>&)$/;"	f	namespace:boost::units	signature:(const scale<Base,Exponent>&)
boost::units::name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::acceleration>::type&) { return "galileo"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::acceleration>::type&)
boost::units::name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::current>::type&)   { return "biot"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::current>::type&)
boost::units::name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::dynamic_viscosity>::type&) { return "poise"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::dynamic_viscosity>::type&)
boost::units::name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::energy>::type&) { return "erg"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::energy>::type&)
boost::units::name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::force>::type&) { return "dyne"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::force>::type&)
boost::units::name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::kinematic_viscosity>::type&) { return "stoke"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::kinematic_viscosity>::type&)
boost::units::name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::pressure>::type&) { return "barye"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::pressure>::type&)
boost::units::name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::wavenumber>::type&) { return "kayser"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::wavenumber>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::absorbed_dose>::type&) { return "gray"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::absorbed_dose>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::capacitance>::type&)   { return "farad"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::capacitance>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::catalytic_activity>::type&) { return "katal"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::catalytic_activity>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::conductance>::type&) { return "siemen"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::conductance>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::electric_charge>::type&) { return "coulomb"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::electric_charge>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::electric_potential>::type&) { return "volt"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::electric_potential>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::energy>::type&) { return "joule"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::energy>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::force>::type&) { return "newton"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::force>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::frequency>::type&) { return "hertz"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::frequency>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::illuminance>::type&) { return "lux"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::illuminance>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::inductance>::type&) { return "henry"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::inductance>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::luminous_flux>::type&) { return "lumen"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::luminous_flux>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::magnetic_flux>::type&) { return "weber"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::magnetic_flux>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::magnetic_flux_density>::type&) { return "tesla"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::magnetic_flux_density>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::power>::type&) { return "watt"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::power>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::pressure>::type&) { return "pascal"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::pressure>::type&)
boost::units::name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::resistance>::type&) { return "ohm"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::resistance>::type&)
boost::units::name_string	/usr/include/boost/units/units_fwd.hpp	/^template<class T> std::string name_string(const T&);$/;"	p	namespace:boost::units	signature:(const T&)
boost::units::no_default_conversion	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct no_default_conversion {$/;"	s	namespace:boost::units
boost::units::no_default_conversion::is_defined	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static const bool is_defined = false;$/;"	m	struct:boost::units::no_default_conversion	access:public
boost::units::no_prefix	/usr/include/boost/units/io.hpp	/^inline std::ios_base& no_prefix(std::ios_base& ios)$/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
boost::units::no_scale	/usr/include/boost/units/heterogeneous_system.hpp	/^typedef dimensionless_type no_scale;$/;"	t	namespace:boost::units
boost::units::one	/usr/include/boost/units/detail/one.hpp	/^struct one { one() {} };$/;"	s	namespace:boost::units
boost::units::one::one	/usr/include/boost/units/detail/one.hpp	/^struct one { one() {} };$/;"	f	struct:boost::units::one	access:public	signature:()
boost::units::one_to_double	/usr/include/boost/units/detail/one.hpp	/^T one_to_double(const T& t) { return t; }$/;"	f	namespace:boost::units	signature:(const T& t)
boost::units::one_to_double	/usr/include/boost/units/detail/one.hpp	/^inline double one_to_double(const one&) { return 1.0; }$/;"	f	namespace:boost::units	signature:(const one&)
boost::units::one_to_double_type	/usr/include/boost/units/detail/one.hpp	/^struct one_to_double_type { typedef T type; };$/;"	s	namespace:boost::units
boost::units::one_to_double_type	/usr/include/boost/units/detail/one.hpp	/^struct one_to_double_type<one> { typedef double type; };$/;"	s	namespace:boost::units
boost::units::one_to_double_type::type	/usr/include/boost/units/detail/one.hpp	/^struct one_to_double_type { typedef T type; };$/;"	t	struct:boost::units::one_to_double_type	access:public
boost::units::one_to_double_type::type	/usr/include/boost/units/detail/one.hpp	/^struct one_to_double_type<one> { typedef double type; };$/;"	t	struct:boost::units::one_to_double_type	access:public
boost::units::operator !=	/usr/include/boost/units/quantity.hpp	/^operator!=(const quantity<Unit,X>& val1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& val1, const quantity<Unit,Y>& val2)
boost::units::operator !=	/usr/include/boost/units/unit.hpp	/^operator!=(const unit<Dim1,System1>&,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const unit<Dim2,System2>&)
boost::units::operator *	/usr/include/boost/units/absolute.hpp	/^quantity<absolute<unit<D, S> >, T> operator*(const T& t, const absolute<unit<D, S> >&)$/;"	f	namespace:boost::units	signature:(const T& t, const absolute<unit<D, S> >&)
boost::units::operator *	/usr/include/boost/units/absolute.hpp	/^quantity<absolute<unit<D, S> >, T> operator*(const absolute<unit<D, S> >&, const T& t)$/;"	f	namespace:boost::units	signature:(const absolute<unit<D, S> >&, const T& t)
boost::units::operator *	/usr/include/boost/units/detail/one.hpp	/^inline T operator*(const T& t, const one&)$/;"	f	namespace:boost::units	signature:(const T& t, const one&)
boost::units::operator *	/usr/include/boost/units/detail/one.hpp	/^inline T operator*(const one&, const T& t)$/;"	f	namespace:boost::units	signature:(const one&, const T& t)
boost::units::operator *	/usr/include/boost/units/detail/one.hpp	/^inline one operator*(const one&, const one&)$/;"	f	namespace:boost::units	signature:(const one&, const one&)
boost::units::operator *	/usr/include/boost/units/lambda.hpp	/^    operator*(const boost::lambda::lambda_functor<Arg>& a,$/;"	f	namespace:boost::units	signature:(const boost::lambda::lambda_functor<Arg>& a, const boost::units::absolute<boost::units::unit<Dim, System> >& b)
boost::units::operator *	/usr/include/boost/units/lambda.hpp	/^    operator*(const boost::lambda::lambda_functor<Arg>& a,$/;"	f	namespace:boost::units	signature:(const boost::lambda::lambda_functor<Arg>& a, const boost::units::unit<Dim, System>& b)
boost::units::operator *	/usr/include/boost/units/lambda.hpp	/^    operator*(const boost::units::absolute<boost::units::unit<Dim, System> >& a,$/;"	f	namespace:boost::units	signature:(const boost::units::absolute<boost::units::unit<Dim, System> >& a, const boost::lambda::lambda_functor<Arg>& b)
boost::units::operator *	/usr/include/boost/units/lambda.hpp	/^    operator*(const boost::units::unit<Dim, System>& a,$/;"	f	namespace:boost::units	signature:(const boost::units::unit<Dim, System>& a, const boost::lambda::lambda_functor<Arg>& b)
boost::units::operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const X& lhs,const quantity<Unit,X>& rhs)$/;"	f	namespace:boost::units	signature:(const X& lhs,const quantity<Unit,X>& rhs)
boost::units::operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const Y& lhs,const unit<Dim,System>&)$/;"	f	namespace:boost::units	signature:(const Y& lhs,const unit<Dim,System>&)
boost::units::operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const quantity<Unit,X>& lhs,const X& rhs)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& lhs,const X& rhs)
boost::units::operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const quantity<Unit1,X>& lhs,$/;"	f	namespace:boost::units	signature:(const quantity<Unit1,X>& lhs, const quantity<Unit2,Y>& rhs)
boost::units::operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const quantity<Unit1,Y>& lhs,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const quantity<Unit1,Y>& lhs,const unit<Dim2,System2>&)
boost::units::operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const unit<Dim,System>&,const Y& rhs)$/;"	f	namespace:boost::units	signature:(const unit<Dim,System>&,const Y& rhs)
boost::units::operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const unit<Dim1,System1>&,const quantity<Unit2,Y>& rhs)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const quantity<Unit2,Y>& rhs)
boost::units::operator *	/usr/include/boost/units/unit.hpp	/^operator*(const unit<Dim1,System1>&,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const unit<Dim2,System2>&)
boost::units::operator +	/usr/include/boost/units/absolute.hpp	/^absolute<Y> operator+(const Y& rval,const absolute<Y>& aval)$/;"	f	namespace:boost::units	signature:(const Y& rval,const absolute<Y>& aval)
boost::units::operator +	/usr/include/boost/units/absolute.hpp	/^absolute<Y> operator+(const absolute<Y>& aval,const Y& rval)$/;"	f	namespace:boost::units	signature:(const absolute<Y>& aval,const Y& rval)
boost::units::operator +	/usr/include/boost/units/quantity.hpp	/^operator+(const quantity<Unit,Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& val)
boost::units::operator +	/usr/include/boost/units/quantity.hpp	/^operator+(const quantity<Unit1,X>& lhs,$/;"	f	namespace:boost::units	signature:(const quantity<Unit1,X>& lhs, const quantity<Unit2,Y>& rhs)
boost::units::operator +	/usr/include/boost/units/unit.hpp	/^operator+(const unit<Dim,System>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim,System>&)
boost::units::operator +	/usr/include/boost/units/unit.hpp	/^operator+(const unit<Dim1,System1>&,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const unit<Dim2,System2>&)
boost::units::operator -	/usr/include/boost/units/absolute.hpp	/^Y operator-(const absolute<Y>& aval1,const absolute<Y>& aval2)$/;"	f	namespace:boost::units	signature:(const absolute<Y>& aval1,const absolute<Y>& aval2)
boost::units::operator -	/usr/include/boost/units/absolute.hpp	/^absolute<Y> operator-(const absolute<Y>& aval,const Y& rval)$/;"	f	namespace:boost::units	signature:(const absolute<Y>& aval,const Y& rval)
boost::units::operator -	/usr/include/boost/units/quantity.hpp	/^operator-(const quantity<Unit,Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& val)
boost::units::operator -	/usr/include/boost/units/quantity.hpp	/^operator-(const quantity<Unit1,X>& lhs,$/;"	f	namespace:boost::units	signature:(const quantity<Unit1,X>& lhs, const quantity<Unit2,Y>& rhs)
boost::units::operator -	/usr/include/boost/units/unit.hpp	/^operator-(const unit<Dim,System>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim,System>&)
boost::units::operator -	/usr/include/boost/units/unit.hpp	/^operator-(const unit<Dim1,System1>&,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const unit<Dim2,System2>&)
boost::units::operator /	/usr/include/boost/units/detail/one.hpp	/^inline T operator\/(const T& t, const one&)$/;"	f	namespace:boost::units	signature:(const T& t, const one&)
boost::units::operator /	/usr/include/boost/units/detail/one.hpp	/^inline T operator\/(const one&, const T& t)$/;"	f	namespace:boost::units	signature:(const one&, const T& t)
boost::units::operator /	/usr/include/boost/units/detail/one.hpp	/^inline one operator\/(const one&, const one&)$/;"	f	namespace:boost::units	signature:(const one&, const one&)
boost::units::operator /	/usr/include/boost/units/lambda.hpp	/^    operator\/(const boost::lambda::lambda_functor<Arg>& a,$/;"	f	namespace:boost::units	signature:(const boost::lambda::lambda_functor<Arg>& a, const boost::units::unit<Dim, System>& b)
boost::units::operator /	/usr/include/boost/units/lambda.hpp	/^    operator\/(const boost::units::unit<Dim, System>& a,$/;"	f	namespace:boost::units	signature:(const boost::units::unit<Dim, System>& a, const boost::lambda::lambda_functor<Arg>& b)
boost::units::operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const X& lhs,const quantity<Unit,X>& rhs)$/;"	f	namespace:boost::units	signature:(const X& lhs,const quantity<Unit,X>& rhs)
boost::units::operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const Y& lhs,const unit<Dim,System>&)$/;"	f	namespace:boost::units	signature:(const Y& lhs,const unit<Dim,System>&)
boost::units::operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const quantity<Unit,X>& lhs,const X& rhs)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& lhs,const X& rhs)
boost::units::operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const quantity<Unit1,X>& lhs,$/;"	f	namespace:boost::units	signature:(const quantity<Unit1,X>& lhs, const quantity<Unit2,Y>& rhs)
boost::units::operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const quantity<Unit1,Y>& lhs,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const quantity<Unit1,Y>& lhs,const unit<Dim2,System2>&)
boost::units::operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const unit<Dim,System>&,const Y& rhs)$/;"	f	namespace:boost::units	signature:(const unit<Dim,System>&,const Y& rhs)
boost::units::operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const unit<Dim1,System1>&,const quantity<Unit2,Y>& rhs)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const quantity<Unit2,Y>& rhs)
boost::units::operator /	/usr/include/boost/units/unit.hpp	/^operator\/(const unit<Dim1,System1>&,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const unit<Dim2,System2>&)
boost::units::operator <	/usr/include/boost/units/quantity.hpp	/^operator<(const quantity<Unit,X>& val1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& val1, const quantity<Unit,Y>& val2)
boost::units::operator <<	/usr/include/boost/units/absolute.hpp	/^std::basic_ostream<Char, Traits>& operator<<(std::basic_ostream<Char, Traits>& os,const absolute<Y>& aval)$/;"	f	namespace:boost::units	signature:(std::basic_ostream<Char, Traits>& os,const absolute<Y>& aval)
boost::units::operator <<	/usr/include/boost/units/io.hpp	/^inline std::basic_ostream<Char, Traits>& operator<<(std::basic_ostream<Char, Traits>& os, const quantity<Unit, T>& q)$/;"	f	namespace:boost::units	signature:(std::basic_ostream<Char, Traits>& os, const quantity<Unit, T>& q)
boost::units::operator <<	/usr/include/boost/units/io.hpp	/^inline std::basic_ostream<Char, Traits>& operator<<(std::basic_ostream<Char, Traits>& os, const unit<Dimension, System>& u)$/;"	f	namespace:boost::units	signature:(std::basic_ostream<Char, Traits>& os, const unit<Dimension, System>& u)
boost::units::operator <<	/usr/include/boost/units/io.hpp	/^inline std::basic_ostream<Char, Traits>& operator<<(std::basic_ostream<Char, Traits>& os,const static_rational<N,D>& r)$/;"	f	namespace:boost::units	signature:(std::basic_ostream<Char, Traits>& os,const static_rational<N,D>& r)
boost::units::operator <<	/usr/include/boost/units/systems/detail/constants.hpp	/^std::basic_ostream<Char,Traits>& operator<<(std::basic_ostream<Char,Traits>& os,const constant<Y>&)$/;"	f	namespace:boost::units	signature:(std::basic_ostream<Char,Traits>& os,const constant<Y>&)
boost::units::operator <<	/usr/include/boost/units/systems/detail/constants.hpp	/^std::basic_ostream<Char,Traits>& operator<<(std::basic_ostream<Char,Traits>& os,const physical_constant<Y>& val)$/;"	f	namespace:boost::units	signature:(std::basic_ostream<Char,Traits>& os,const physical_constant<Y>& val)
boost::units::operator <=	/usr/include/boost/units/quantity.hpp	/^operator<=(const quantity<Unit,X>& val1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& val1, const quantity<Unit,Y>& val2)
boost::units::operator ==	/usr/include/boost/units/quantity.hpp	/^operator==(const quantity<Unit,X>& val1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& val1, const quantity<Unit,Y>& val2)
boost::units::operator ==	/usr/include/boost/units/unit.hpp	/^operator==(const unit<Dim1,System1>&,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const unit<Dim2,System2>&)
boost::units::operator >	/usr/include/boost/units/detail/one.hpp	/^inline bool operator>(const boost::units::one&, const T& t) {$/;"	f	namespace:boost::units	signature:(const boost::units::one&, const T& t)
boost::units::operator >	/usr/include/boost/units/quantity.hpp	/^operator>(const quantity<Unit,X>& val1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& val1, const quantity<Unit,Y>& val2)
boost::units::operator >=	/usr/include/boost/units/quantity.hpp	/^operator>=(const quantity<Unit,X>& val1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& val1, const quantity<Unit,Y>& val2)
boost::units::ordinal	/usr/include/boost/units/detail/ordinal.hpp	/^struct ordinal {$/;"	s	namespace:boost::units
boost::units::ordinal::tag	/usr/include/boost/units/detail/ordinal.hpp	/^    typedef detail::ordinal_tag tag;$/;"	t	struct:boost::units::ordinal	access:public
boost::units::ordinal::value	/usr/include/boost/units/detail/ordinal.hpp	/^    static const long value = N;$/;"	m	struct:boost::units::ordinal	access:public
boost::units::ordinal::value	/usr/include/boost/units/detail/ordinal.hpp	/^const long ordinal<N>::value;$/;"	m	class:boost::units::ordinal
boost::units::permeability_dimension	/usr/include/boost/units/physical_dimensions/permeability.hpp	/^                          current_base_dimension,-2>::type permeability_dimension;$/;"	t	namespace:boost::units
boost::units::permittivity_dimension	/usr/include/boost/units/physical_dimensions/permittivity.hpp	/^                          current_base_dimension,2>::type permittivity_dimension;                $/;"	t	namespace:boost::units
boost::units::physical_constant	/usr/include/boost/units/systems/detail/constants.hpp	/^struct physical_constant $/;"	s	namespace:boost::units
boost::units::physical_constant::lower_bound	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type lower_bound() const { return Base().lower_bound(); } $/;"	f	struct:boost::units::physical_constant	access:public	signature:() const
boost::units::physical_constant::operator value_type	/usr/include/boost/units/systems/detail/constants.hpp	/^    operator value_type() const    { return Base().value(); } $/;"	f	struct:boost::units::physical_constant	access:public	signature:() const
boost::units::physical_constant::uncertainty	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type uncertainty() const { return Base().uncertainty(); } $/;"	f	struct:boost::units::physical_constant	access:public	signature:() const
boost::units::physical_constant::upper_bound	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type upper_bound() const { return Base().upper_bound(); } $/;"	f	struct:boost::units::physical_constant	access:public	signature:() const
boost::units::physical_constant::value	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type value() const       { return Base().value(); } $/;"	f	struct:boost::units::physical_constant	access:public	signature:() const
boost::units::physical_constant::value_type	/usr/include/boost/units/systems/detail/constants.hpp	/^    typedef typename Base::value_type value_type; $/;"	t	struct:boost::units::physical_constant	access:public
boost::units::plane_angle_base_dimension	/usr/include/boost/units/physical_dimensions/plane_angle.hpp	/^struct plane_angle_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
boost::units::plane_angle_dimension	/usr/include/boost/units/physical_dimensions/plane_angle.hpp	/^typedef plane_angle_base_dimension::dimension_type    plane_angle_dimension;$/;"	t	namespace:boost::units
boost::units::pow	/usr/include/boost/units/cmath.hpp	/^pow(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q1, const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q2)
boost::units::pow	/usr/include/boost/units/pow.hpp	/^pow(const Y& x)$/;"	f	namespace:boost::units	signature:(const Y& x)
boost::units::power_dimension	/usr/include/boost/units/physical_dimensions/power.hpp	/^                          time_base_dimension,-3>::type power_dimension;                    $/;"	t	namespace:boost::units
boost::units::power_typeof_helper	/usr/include/boost/units/operators.hpp	/^struct power_typeof_helper$/;"	s	namespace:boost::units
boost::units::power_typeof_helper	/usr/include/boost/units/pow.hpp	/^struct power_typeof_helper<T, static_rational<N,D> >                $/;"	s	namespace:boost::units
boost::units::power_typeof_helper	/usr/include/boost/units/pow.hpp	/^struct power_typeof_helper<float, static_rational<N,D> >$/;"	s	namespace:boost::units
boost::units::power_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct power_typeof_helper< quantity<Unit,Y>,static_rational<N,D> >                $/;"	s	namespace:boost::units
boost::units::power_typeof_helper	/usr/include/boost/units/systems/detail/constants.hpp	/^struct power_typeof_helper<constant<T1>, static_rational<N,D> >$/;"	s	namespace:boost::units
boost::units::power_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct power_typeof_helper<unit<Dim,System>,static_rational<N,D> >                $/;"	s	namespace:boost::units
boost::units::power_typeof_helper::base	/usr/include/boost/units/pow.hpp	/^    typedef power_typeof_helper<double, static_rational<N,D> > base;$/;"	t	struct:boost::units::power_typeof_helper	access:public
boost::units::power_typeof_helper::base	/usr/include/boost/units/systems/detail/constants.hpp	/^    typedef power_typeof_helper<typename T1::value_type, static_rational<N,D> > base;$/;"	t	struct:boost::units::power_typeof_helper	access:public
boost::units::power_typeof_helper::impl	/usr/include/boost/units/pow.hpp	/^    typedef detail::static_rational_power_impl<static_rational<N, D>, internal_type> impl;$/;"	t	struct:boost::units::power_typeof_helper	access:public
boost::units::power_typeof_helper::internal_type	/usr/include/boost/units/pow.hpp	/^    typedef typename mpl::if_<boost::is_integral<T>, double, T>::type internal_type;$/;"	t	struct:boost::units::power_typeof_helper	access:public
boost::units::power_typeof_helper::type	/usr/include/boost/units/operators.hpp	/^    typedef detail::unspecified type;$/;"	t	struct:boost::units::power_typeof_helper	access:public
boost::units::power_typeof_helper::type	/usr/include/boost/units/pow.hpp	/^    typedef typename base::type type;$/;"	t	struct:boost::units::power_typeof_helper	access:public
boost::units::power_typeof_helper::type	/usr/include/boost/units/pow.hpp	/^    typedef typename impl::type type; $/;"	t	struct:boost::units::power_typeof_helper	access:public
boost::units::power_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                                  type; $/;"	t	struct:boost::units::power_typeof_helper	access:public
boost::units::power_typeof_helper::type	/usr/include/boost/units/systems/detail/constants.hpp	/^    typedef typename base::type type;$/;"	t	struct:boost::units::power_typeof_helper	access:public
boost::units::power_typeof_helper::type	/usr/include/boost/units/unit.hpp	/^    typedef unit<typename static_power<Dim,static_rational<N,D> >::type,typename static_power<System, static_rational<N,D> >::type>     type; $/;"	t	struct:boost::units::power_typeof_helper	access:public
boost::units::power_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename power_typeof_helper<Unit,static_rational<N,D> >::type  unit_type;$/;"	t	struct:boost::units::power_typeof_helper	access:public
boost::units::power_typeof_helper::value	/usr/include/boost/units/operators.hpp	/^    static type value(const BaseType& base);$/;"	p	struct:boost::units::power_typeof_helper	access:public	signature:(const BaseType& base)
boost::units::power_typeof_helper::value	/usr/include/boost/units/pow.hpp	/^    static type value(const T& x)  $/;"	f	struct:boost::units::power_typeof_helper	access:public	signature:(const T& x)
boost::units::power_typeof_helper::value	/usr/include/boost/units/pow.hpp	/^    static type value(const double& x)$/;"	f	struct:boost::units::power_typeof_helper	access:public	signature:(const double& x)
boost::units::power_typeof_helper::value	/usr/include/boost/units/quantity.hpp	/^    static type value(const quantity<Unit,Y>& x)  $/;"	f	struct:boost::units::power_typeof_helper	access:public	signature:(const quantity<Unit,Y>& x)
boost::units::power_typeof_helper::value	/usr/include/boost/units/systems/detail/constants.hpp	/^    static type value(const constant<T1>& arg)$/;"	f	struct:boost::units::power_typeof_helper	access:public	signature:(const constant<T1>& arg)
boost::units::power_typeof_helper::value	/usr/include/boost/units/unit.hpp	/^    static type value(const unit<Dim,System>&)  $/;"	f	struct:boost::units::power_typeof_helper	access:public	signature:(const unit<Dim,System>&)
boost::units::power_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename power_typeof_helper<Y,static_rational<N,D> >::type     value_type;$/;"	t	struct:boost::units::power_typeof_helper	access:public
boost::units::pressure_dimension	/usr/include/boost/units/physical_dimensions/pressure.hpp	/^                          time_base_dimension,-2>::type pressure_dimension;                $/;"	t	namespace:boost::units
boost::units::quantity	/usr/include/boost/units/quantity.hpp	/^class quantity$/;"	c	namespace:boost::units
boost::units::quantity	/usr/include/boost/units/quantity.hpp	/^class quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(System),Y>$/;"	c	namespace:boost::units
boost::units::quantity	/usr/include/boost/units/quantity.hpp	/^class quantity<int, T> {};$/;"	c	namespace:boost::units
boost::units::quantity	/usr/include/boost/units/quantity.hpp	/^class quantity<unit<int, System>, T> {};$/;"	c	namespace:boost::units
boost::units::quantity::BOOST_MPL_ASSERT_NOT	/usr/include/boost/units/quantity.hpp	/^        BOOST_MPL_ASSERT_NOT((detail::is_base_unit<Unit>));$/;"	p	class:boost::units::quantity	access:private	signature:(detail::is_base_unit<Unit>)
boost::units::quantity::dimension_type	/usr/include/boost/units/quantity.hpp	/^        typedef dimensionless_type                              dimension_type;$/;"	t	class:boost::units::quantity	access:public
boost::units::quantity::force_instantiation_of_unit	/usr/include/boost/units/quantity.hpp	/^        enum { force_instantiation_of_unit = sizeof(Unit) };$/;"	e	enum:boost::units::quantity::__anon4
boost::units::quantity::from_value	/usr/include/boost/units/quantity.hpp	/^        static this_type from_value(const value_type& val)  { return this_type(val); }$/;"	f	class:boost::units::quantity	access:public	signature:(const value_type& val)
boost::units::quantity::from_value	/usr/include/boost/units/quantity.hpp	/^        static this_type from_value(const value_type& val)  { return this_type(val, 0); }$/;"	f	class:boost::units::quantity	access:public	signature:(const value_type& val)
boost::units::quantity::operator *=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator*=(const quantity<Unit2, YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2, YY>& source)
boost::units::quantity::operator *=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator*=(const value_type& source) { val_ *= source; return *this; }$/;"	f	class:boost::units::quantity	access:public	signature:(const value_type& source)
boost::units::quantity::operator *=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator*=(const value_type& val)        { val_ *= val; return *this; }          $/;"	f	class:boost::units::quantity	access:public	signature:(const value_type& val)
boost::units::quantity::operator +=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator+=(const quantity<Unit2, YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2, YY>& source)
boost::units::quantity::operator +=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator+=(const this_type& source)      { val_ += source.val_; return *this; }  $/;"	f	class:boost::units::quantity	access:public	signature:(const this_type& source)
boost::units::quantity::operator -=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator-=(const quantity<Unit2, YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2, YY>& source)
boost::units::quantity::operator -=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator-=(const this_type& source)      { val_ -= source.val_; return *this; }  $/;"	f	class:boost::units::quantity	access:public	signature:(const this_type& source)
boost::units::quantity::operator /=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator\/=(const quantity<Unit2, YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2, YY>& source)
boost::units::quantity::operator /=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator\/=(const value_type& source) { val_ \/= source; return *this; }$/;"	f	class:boost::units::quantity	access:public	signature:(const value_type& source)
boost::units::quantity::operator /=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator\/=(const value_type& val)        { val_ \/= val; return *this; }          $/;"	f	class:boost::units::quantity	access:public	signature:(const value_type& val)
boost::units::quantity::operator =	/usr/include/boost/units/quantity.hpp	/^        this_type& operator=(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(System2),Y>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(System2),Y>& source)
boost::units::quantity::operator =	/usr/include/boost/units/quantity.hpp	/^        this_type& operator=(const quantity<Unit,YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit,YY>& source)
boost::units::quantity::operator =	/usr/include/boost/units/quantity.hpp	/^        this_type& operator=(const quantity<Unit2,YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2,YY>& source)
boost::units::quantity::operator =	/usr/include/boost/units/quantity.hpp	/^        this_type& operator=(const quantity<unit<dimension_type,system_type>,YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimension_type,system_type>,YY>& source)
boost::units::quantity::operator =	/usr/include/boost/units/quantity.hpp	/^        this_type& operator=(const this_type& source) $/;"	f	class:boost::units::quantity	access:public	signature:(const this_type& source)
boost::units::quantity::operator value_type	/usr/include/boost/units/quantity.hpp	/^        operator value_type() const                         { return val_; }$/;"	f	class:boost::units::quantity	access:public	signature:() const
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        explicit quantity(const quantity<Unit,YY>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit,YY>& source, typename boost::disable_if<detail::is_non_narrowing_conversion<YY, Y> >::type* = 0)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        explicit quantity(const quantity<Unit2,YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2,YY>& source)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        explicit quantity(const quantity<unit<dimension_type,system_type>,YY>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimension_type,system_type>,YY>& source, typename boost::disable_if<detail::is_non_narrowing_conversion<YY, Y> >::type* = 0)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        explicit quantity(const quantity<unit<dimensionless_type, System2>,Y2>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimensionless_type, System2>,Y2>& source, typename boost::disable_if<detail::is_dimensionless_system<System2> >::type* = 0)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        explicit quantity(const quantity<unit<dimensionless_type, System2>,Y2>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimensionless_type, System2>,Y2>& source, typename boost::enable_if< boost::mpl::and_< boost::mpl::not_<detail::is_non_narrowing_conversion<Y2, Y> >, detail::is_dimensionless_system<System2> > >::type* = 0 )
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        explicit quantity(const value_type& val, int) : val_(val) { }$/;"	f	class:boost::units::quantity	access:protected	signature:(const value_type& val, int)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        quantity() : val_() $/;"	f	class:boost::units::quantity	access:public	signature:()
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<Unit,YY>& source) :$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit,YY>& source)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<Unit,YY>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit,YY>& source, typename boost::enable_if<detail::is_non_narrowing_conversion<YY, Y> >::type* = 0)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<Unit2,YY>& source, $/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2,YY>& source, typename boost::disable_if< mpl::and_< typename is_implicitly_convertible<Unit2,Unit>::type, detail::is_non_narrowing_conversion<YY, Y> >, typename detail::disable_if_is_same<Unit, Unit2>::type >::type* = 0)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<Unit2,YY>& source, $/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2,YY>& source, typename boost::enable_if< mpl::and_< typename is_implicitly_convertible<Unit2,Unit>::type, detail::is_non_narrowing_conversion<YY, Y> >, typename detail::disable_if_is_same<Unit, Unit2>::type >::type* = 0)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<unit<dimension_type,system_type>,YY>& source) :$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimension_type,system_type>,YY>& source)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<unit<dimension_type,system_type>,YY>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimension_type,system_type>,YY>& source, typename boost::enable_if<detail::is_non_narrowing_conversion<YY, Y> >::type* = 0)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<unit<dimensionless_type, System2>,Y2>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimensionless_type, System2>,Y2>& source, typename boost::enable_if< boost::mpl::and_< detail::is_non_narrowing_conversion<Y2, Y>, detail::is_dimensionless_system<System2> > >::type* = 0 )
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<unit<dimensionless_type,homogeneous_system<System2> >,Y2>& source) :$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimensionless_type,homogeneous_system<System2> >,Y2>& source)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const this_type& source) : val_(source.val_) $/;"	f	class:boost::units::quantity	access:public	signature:(const this_type& source)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(unspecified_null_pointer_constant_type) : val_() $/;"	f	class:boost::units::quantity	access:public	signature:(unspecified_null_pointer_constant_type)
boost::units::quantity::quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(value_type val) : val_(val) $/;"	f	class:boost::units::quantity	access:public	signature:(value_type val)
boost::units::quantity::system_type	/usr/include/boost/units/quantity.hpp	/^        typedef System                                          system_type;$/;"	t	class:boost::units::quantity	access:public
boost::units::quantity::this_type	/usr/include/boost/units/quantity.hpp	/^        typedef quantity<Unit,Y>                        this_type;$/;"	t	class:boost::units::quantity	access:public
boost::units::quantity::this_type	/usr/include/boost/units/quantity.hpp	/^        typedef quantity<unit<dimensionless_type,System>,Y>     this_type;$/;"	t	class:boost::units::quantity	access:public
boost::units::quantity::unit_type	/usr/include/boost/units/quantity.hpp	/^        typedef Unit        unit_type;$/;"	t	class:boost::units::quantity	access:public
boost::units::quantity::unit_type	/usr/include/boost/units/quantity.hpp	/^        typedef unit<dimension_type,system_type>                unit_type;$/;"	t	class:boost::units::quantity	access:public
boost::units::quantity::unspecified_null_pointer_constant_type	/usr/include/boost/units/quantity.hpp	/^        typedef void (quantity::*unspecified_null_pointer_constant_type)(int*******);$/;"	t	class:boost::units::quantity	access:private
boost::units::quantity::val_	/usr/include/boost/units/quantity.hpp	/^        value_type    val_;$/;"	m	class:boost::units::quantity	access:private
boost::units::quantity::value	/usr/include/boost/units/quantity.hpp	/^        const value_type& value() const                     { return val_; }                        \/\/\/< constant accessor to value$/;"	f	class:boost::units::quantity	access:public	signature:() const
boost::units::quantity::value_type	/usr/include/boost/units/quantity.hpp	/^        typedef Y                                               value_type;$/;"	t	class:boost::units::quantity	access:public
boost::units::quantity::value_type	/usr/include/boost/units/quantity.hpp	/^        typedef Y                                       value_type;$/;"	t	class:boost::units::quantity	access:public
boost::units::quantity::~quantity	/usr/include/boost/units/quantity.hpp	/^        ~quantity() {$/;"	f	class:boost::units::quantity	access:public	signature:()
boost::units::quantity_cast	/usr/include/boost/units/quantity.hpp	/^quantity_cast(Y& source)$/;"	f	namespace:boost::units	signature:(Y& source)
boost::units::quantity_cast	/usr/include/boost/units/quantity.hpp	/^quantity_cast(const Y& source)$/;"	f	namespace:boost::units	signature:(const Y& source)
boost::units::raw_fmt	/usr/include/boost/units/io.hpp	/^    raw_fmt = 2,            \/\/\/ output only symbols for base units (but not derived units), for example "m".$/;"	e	enum:boost::units::format_mode
boost::units::raw_format	/usr/include/boost/units/io.hpp	/^inline std::ios_base& raw_format(std::ios_base& ios) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
boost::units::raw_string	/usr/include/boost/units/units_fwd.hpp	/^template<class T> std::string raw_string(const T&);$/;"	p	namespace:boost::units	signature:(const T&)
boost::units::reduce_unit	/usr/include/boost/units/detail/absolute_impl.hpp	/^struct reduce_unit<absolute<unit<D, S> > >$/;"	s	namespace:boost::units
boost::units::reduce_unit	/usr/include/boost/units/reduce_unit.hpp	/^struct reduce_unit {$/;"	s	namespace:boost::units
boost::units::reduce_unit	/usr/include/boost/units/unit.hpp	/^struct reduce_unit<unit<Dim, System> >$/;"	s	namespace:boost::units
boost::units::reduce_unit::type	/usr/include/boost/units/detail/absolute_impl.hpp	/^    typedef absolute<typename reduce_unit<unit<D, S> >::type> type;$/;"	t	struct:boost::units::reduce_unit	access:public
boost::units::reduce_unit::type	/usr/include/boost/units/reduce_unit.hpp	/^    typedef detail::unspecified type;$/;"	t	struct:boost::units::reduce_unit	access:public
boost::units::reduce_unit::type	/usr/include/boost/units/unit.hpp	/^    > type;$/;"	t	struct:boost::units::reduce_unit	access:public
boost::units::reluctance_dimension	/usr/include/boost/units/physical_dimensions/reluctance.hpp	/^                          current_base_dimension,2>::type reluctance_dimension;            $/;"	t	namespace:boost::units
boost::units::resistance_dimension	/usr/include/boost/units/physical_dimensions/resistance.hpp	/^                          current_base_dimension,-2>::type resistance_dimension;              $/;"	t	namespace:boost::units
boost::units::resistivity_dimension	/usr/include/boost/units/physical_dimensions/resistivity.hpp	/^                          current_base_dimension,-2>::type resistivity_dimension;              $/;"	t	namespace:boost::units
boost::units::revolution	/usr/include/boost/units/systems/angle/revolutions.hpp	/^namespace revolution {$/;"	n	namespace:boost::units
boost::units::revolution::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/angle/revolutions.hpp	/^BOOST_UNITS_STATIC_CONSTANT(revolution,plane_angle);$/;"	p	namespace:boost::units::revolution	signature:(revolution,plane_angle)
boost::units::revolution::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/angle/revolutions.hpp	/^BOOST_UNITS_STATIC_CONSTANT(revolutions,plane_angle);$/;"	p	namespace:boost::units::revolution	signature:(revolutions,plane_angle)
boost::units::revolution::dimensionless	/usr/include/boost/units/systems/angle/revolutions.hpp	/^typedef unit<dimensionless_type,system>         dimensionless;$/;"	t	namespace:boost::units::revolution
boost::units::revolution::plane_angle	/usr/include/boost/units/systems/angle/revolutions.hpp	/^typedef unit<plane_angle_dimension,system>      plane_angle;          \/\/\/< angle revolution unit constant$/;"	t	namespace:boost::units::revolution
boost::units::revolution::system	/usr/include/boost/units/systems/angle/revolutions.hpp	/^typedef make_system<boost::units::angle::revolution_base_unit>::type system;$/;"	t	namespace:boost::units::revolution
boost::units::root	/usr/include/boost/units/pow.hpp	/^root(const Y& x)$/;"	f	namespace:boost::units	signature:(const Y& x)
boost::units::root_typeof_helper	/usr/include/boost/units/operators.hpp	/^struct root_typeof_helper$/;"	s	namespace:boost::units
boost::units::root_typeof_helper	/usr/include/boost/units/pow.hpp	/^struct root_typeof_helper<T,static_rational<N,D> >$/;"	s	namespace:boost::units
boost::units::root_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct root_typeof_helper< quantity<Unit,Y>,static_rational<N,D> >                $/;"	s	namespace:boost::units
boost::units::root_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct root_typeof_helper<unit<Dim,System>,static_rational<N,D> >                $/;"	s	namespace:boost::units
boost::units::root_typeof_helper::base	/usr/include/boost/units/pow.hpp	/^    typedef power_typeof_helper<T, static_rational<D,N> > base;$/;"	t	struct:boost::units::root_typeof_helper	access:public
boost::units::root_typeof_helper::type	/usr/include/boost/units/operators.hpp	/^    typedef detail::unspecified type;$/;"	t	struct:boost::units::root_typeof_helper	access:public
boost::units::root_typeof_helper::type	/usr/include/boost/units/pow.hpp	/^    typedef typename base::type type;$/;"	t	struct:boost::units::root_typeof_helper	access:public
boost::units::root_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                                  type;$/;"	t	struct:boost::units::root_typeof_helper	access:public
boost::units::root_typeof_helper::type	/usr/include/boost/units/unit.hpp	/^    typedef unit<typename static_root<Dim,static_rational<N,D> >::type,typename static_root<System, static_rational<N,D> >::type>      type; $/;"	t	struct:boost::units::root_typeof_helper	access:public
boost::units::root_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename root_typeof_helper<Unit,static_rational<N,D> >::type   unit_type;$/;"	t	struct:boost::units::root_typeof_helper	access:public
boost::units::root_typeof_helper::value	/usr/include/boost/units/operators.hpp	/^    static type value(const Radicand& base);$/;"	p	struct:boost::units::root_typeof_helper	access:public	signature:(const Radicand& base)
boost::units::root_typeof_helper::value	/usr/include/boost/units/pow.hpp	/^    static type value(const T& x)$/;"	f	struct:boost::units::root_typeof_helper	access:public	signature:(const T& x)
boost::units::root_typeof_helper::value	/usr/include/boost/units/quantity.hpp	/^    static type value(const quantity<Unit,Y>& x)  $/;"	f	struct:boost::units::root_typeof_helper	access:public	signature:(const quantity<Unit,Y>& x)
boost::units::root_typeof_helper::value	/usr/include/boost/units/unit.hpp	/^    static type value(const unit<Dim,System>&)  $/;"	f	struct:boost::units::root_typeof_helper	access:public	signature:(const unit<Dim,System>&)
boost::units::root_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename root_typeof_helper<Y,static_rational<N,D> >::type      value_type;$/;"	t	struct:boost::units::root_typeof_helper	access:public
boost::units::scale	/usr/include/boost/units/scale.hpp	/^struct scale$/;"	s	namespace:boost::units
boost::units::scale	/usr/include/boost/units/scale.hpp	/^struct scale<Base, static_rational<0> >$/;"	s	namespace:boost::units
boost::units::scale::base	/usr/include/boost/units/scale.hpp	/^    static const long base = Base;$/;"	m	struct:boost::units::scale	access:public
boost::units::scale::base	/usr/include/boost/units/scale.hpp	/^const long scale<Base, Exponent>::base;$/;"	m	class:boost::units::scale
boost::units::scale::base	/usr/include/boost/units/scale.hpp	/^const long scale<Base, static_rational<0> >::base;$/;"	m	class:boost::units::scale
boost::units::scale::exponent	/usr/include/boost/units/scale.hpp	/^    typedef Exponent exponent;$/;"	t	struct:boost::units::scale	access:public
boost::units::scale::exponent	/usr/include/boost/units/scale.hpp	/^    typedef static_rational<0> exponent;$/;"	t	struct:boost::units::scale	access:public
boost::units::scale::name	/usr/include/boost/units/scale.hpp	/^    static std::string name() { return(""); }$/;"	f	struct:boost::units::scale	access:public	signature:()
boost::units::scale::symbol	/usr/include/boost/units/scale.hpp	/^    static std::string symbol() { return(""); }$/;"	f	struct:boost::units::scale	access:public	signature:()
boost::units::scale::value	/usr/include/boost/units/scale.hpp	/^    static one value() { one result; return(result); }$/;"	f	struct:boost::units::scale	access:public	signature:()
boost::units::scale::value	/usr/include/boost/units/scale.hpp	/^    static value_type value() { return(detail::static_rational_power<Exponent>(static_cast<double>(base))); }$/;"	f	struct:boost::units::scale	access:public	signature:()
boost::units::scale::value_type	/usr/include/boost/units/scale.hpp	/^    typedef double value_type;$/;"	t	struct:boost::units::scale	access:public
boost::units::scale::value_type	/usr/include/boost/units/scale.hpp	/^    typedef one value_type;$/;"	t	struct:boost::units::scale	access:public
boost::units::scale_dim_tag	/usr/include/boost/units/detail/unscale.hpp	/^struct scale_dim_tag {};$/;"	s	namespace:boost::units
boost::units::scale_list_dim	/usr/include/boost/units/detail/unscale.hpp	/^struct scale_list_dim : Scale$/;"	s	namespace:boost::units	inherits:Scale
boost::units::scale_list_dim::tag	/usr/include/boost/units/detail/unscale.hpp	/^    typedef scale_dim_tag tag;$/;"	t	struct:boost::units::scale_list_dim	access:public
boost::units::scale_list_dim::type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef scale_list_dim type;$/;"	t	struct:boost::units::scale_list_dim	access:public
boost::units::scaled_base_unit	/usr/include/boost/units/scaled_base_unit.hpp	/^struct scaled_base_unit$/;"	s	namespace:boost::units
boost::units::scaled_base_unit::boost_units_is_base_unit_type	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef void boost_units_is_base_unit_type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
boost::units::scaled_base_unit::dimension_type	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef typename S::dimension_type dimension_type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
boost::units::scaled_base_unit::name	/usr/include/boost/units/scaled_base_unit.hpp	/^    static std::string name()$/;"	f	struct:boost::units::scaled_base_unit	access:public	signature:()
boost::units::scaled_base_unit::scale_type	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef Scale scale_type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
boost::units::scaled_base_unit::symbol	/usr/include/boost/units/scaled_base_unit.hpp	/^    static std::string symbol()$/;"	f	struct:boost::units::scaled_base_unit	access:public	signature:()
boost::units::scaled_base_unit::system_type	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef S system_type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
boost::units::scaled_base_unit::tag	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef scaled_base_unit_tag tag;$/;"	t	struct:boost::units::scaled_base_unit	access:public
boost::units::scaled_base_unit::type	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef scaled_base_unit type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
boost::units::scaled_base_unit::unit_type	/usr/include/boost/units/scaled_base_unit.hpp	/^    > unit_type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
boost::units::scaled_base_unit::unit_type	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef detail::unspecified unit_type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
boost::units::scaled_base_unit_tag	/usr/include/boost/units/scaled_base_unit.hpp	/^struct scaled_base_unit_tag {};$/;"	s	namespace:boost::units
boost::units::select_base_unit_converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct select_base_unit_converter$/;"	s	namespace:boost::units
boost::units::select_base_unit_converter::destination_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef Destination destination_type;$/;"	t	struct:boost::units::select_base_unit_converter	access:public
boost::units::select_base_unit_converter::source_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef Source source_type;$/;"	t	struct:boost::units::select_base_unit_converter	access:public
boost::units::set_autoprefix	/usr/include/boost/units/io.hpp	/^inline void set_autoprefix(std::ios_base& ios, autoprefix_mode new_mode)$/;"	f	namespace:boost::units	signature:(std::ios_base& ios, autoprefix_mode new_mode)
boost::units::set_flags	/usr/include/boost/units/io.hpp	/^inline void set_flags(std::ios_base& ios, long new_flags, long mask) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios, long new_flags, long mask)
boost::units::set_format	/usr/include/boost/units/io.hpp	/^inline void set_format(std::ios_base& ios, format_mode new_mode) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios, format_mode new_mode)
boost::units::si	/usr/include/boost/units/base_units/si/ampere.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/base_units/si/candela.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/base_units/si/kelvin.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/base_units/si/kilogram.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/base_units/si/meter.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/base_units/si/mole.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/base_units/si/second.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/absorbed_dose.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/acceleration.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/action.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/activity.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/amount.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/angular_acceleration.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/angular_momentum.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/angular_velocity.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/area.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/base.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/capacitance.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/conductance.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/conductivity.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/current.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/dimensionless.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/dose_equivalent.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/dynamic_viscosity.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/electric_charge.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/electric_potential.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/energy.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/force.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/frequency.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/illuminance.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/impedance.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/inductance.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/kinematic_viscosity.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/length.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/luminous_flux.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/luminous_intensity.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/magnetic_field_intensity.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/magnetic_flux.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/magnetic_flux_density.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/mass.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/mass_density.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/moment_of_inertia.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/momentum.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/permeability.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/permittivity.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/plane_angle.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/power.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/prefixes.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/pressure.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/reluctance.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/resistance.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/resistivity.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/solid_angle.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/surface_density.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/surface_tension.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/temperature.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/time.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/torque.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/velocity.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/volume.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si	/usr/include/boost/units/systems/si/wavenumber.hpp	/^namespace si {$/;"	n	namespace:boost::units
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/absorbed_dose.hpp	/^BOOST_UNITS_STATIC_CONSTANT(gray,absorbed_dose);  $/;"	p	namespace:boost::units::si	signature:(gray,absorbed_dose)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/absorbed_dose.hpp	/^BOOST_UNITS_STATIC_CONSTANT(grays,absorbed_dose); $/;"	p	namespace:boost::units::si	signature:(grays,absorbed_dose)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/acceleration.hpp	/^BOOST_UNITS_STATIC_CONSTANT(meter_per_second_squared,acceleration);$/;"	p	namespace:boost::units::si	signature:(meter_per_second_squared,acceleration)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/acceleration.hpp	/^BOOST_UNITS_STATIC_CONSTANT(meters_per_second_squared,acceleration);$/;"	p	namespace:boost::units::si	signature:(meters_per_second_squared,acceleration)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/acceleration.hpp	/^BOOST_UNITS_STATIC_CONSTANT(metre_per_second_squared,acceleration);$/;"	p	namespace:boost::units::si	signature:(metre_per_second_squared,acceleration)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/acceleration.hpp	/^BOOST_UNITS_STATIC_CONSTANT(metres_per_second_squared,acceleration);$/;"	p	namespace:boost::units::si	signature:(metres_per_second_squared,acceleration)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/activity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(becquerel,activity);$/;"	p	namespace:boost::units::si	signature:(becquerel,activity)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/activity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(becquerels,activity);$/;"	p	namespace:boost::units::si	signature:(becquerels,activity)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/amount.hpp	/^BOOST_UNITS_STATIC_CONSTANT(mole,amount);$/;"	p	namespace:boost::units::si	signature:(mole,amount)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/amount.hpp	/^BOOST_UNITS_STATIC_CONSTANT(moles,amount);$/;"	p	namespace:boost::units::si	signature:(moles,amount)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/angular_velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(radian_per_second,angular_velocity); $/;"	p	namespace:boost::units::si	signature:(radian_per_second,angular_velocity)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/angular_velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(radians_per_second,angular_velocity);    $/;"	p	namespace:boost::units::si	signature:(radians_per_second,angular_velocity)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_meter,area);$/;"	p	namespace:boost::units::si	signature:(square_meter,area)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_meters,area);$/;"	p	namespace:boost::units::si	signature:(square_meters,area)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_metre,area);$/;"	p	namespace:boost::units::si	signature:(square_metre,area)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/area.hpp	/^BOOST_UNITS_STATIC_CONSTANT(square_metres,area);$/;"	p	namespace:boost::units::si	signature:(square_metres,area)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/capacitance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(farad,capacitance);$/;"	p	namespace:boost::units::si	signature:(farad,capacitance)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/capacitance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(farads,capacitance);$/;"	p	namespace:boost::units::si	signature:(farads,capacitance)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(katal,catalytic_activity);$/;"	p	namespace:boost::units::si	signature:(katal,catalytic_activity)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(katals,catalytic_activity);$/;"	p	namespace:boost::units::si	signature:(katals,catalytic_activity)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/conductance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(mho,conductance);   $/;"	p	namespace:boost::units::si	signature:(mho,conductance)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/conductance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(mhos,conductance);  $/;"	p	namespace:boost::units::si	signature:(mhos,conductance)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/conductance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(siemen,conductance);    $/;"	p	namespace:boost::units::si	signature:(siemen,conductance)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/conductance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(siemens,conductance);   $/;"	p	namespace:boost::units::si	signature:(siemens,conductance)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/current.hpp	/^BOOST_UNITS_STATIC_CONSTANT(ampere,current);$/;"	p	namespace:boost::units::si	signature:(ampere,current)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/current.hpp	/^BOOST_UNITS_STATIC_CONSTANT(amperes,current);$/;"	p	namespace:boost::units::si	signature:(amperes,current)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/dimensionless.hpp	/^BOOST_UNITS_STATIC_CONSTANT(si_dimensionless,dimensionless);$/;"	p	namespace:boost::units::si	signature:(si_dimensionless,dimensionless)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/dose_equivalent.hpp	/^BOOST_UNITS_STATIC_CONSTANT(sievert,dose_equivalent);  $/;"	p	namespace:boost::units::si	signature:(sievert,dose_equivalent)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/dose_equivalent.hpp	/^BOOST_UNITS_STATIC_CONSTANT(sieverts,dose_equivalent); $/;"	p	namespace:boost::units::si	signature:(sieverts,dose_equivalent)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/electric_charge.hpp	/^BOOST_UNITS_STATIC_CONSTANT(coulomb,electric_charge);   $/;"	p	namespace:boost::units::si	signature:(coulomb,electric_charge)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/electric_charge.hpp	/^BOOST_UNITS_STATIC_CONSTANT(coulombs,electric_charge);  $/;"	p	namespace:boost::units::si	signature:(coulombs,electric_charge)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/electric_potential.hpp	/^BOOST_UNITS_STATIC_CONSTANT(volt,electric_potential);   $/;"	p	namespace:boost::units::si	signature:(volt,electric_potential)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/electric_potential.hpp	/^BOOST_UNITS_STATIC_CONSTANT(volts,electric_potential);  $/;"	p	namespace:boost::units::si	signature:(volts,electric_potential)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/energy.hpp	/^BOOST_UNITS_STATIC_CONSTANT(joule,energy);  $/;"	p	namespace:boost::units::si	signature:(joule,energy)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/energy.hpp	/^BOOST_UNITS_STATIC_CONSTANT(joules,energy); $/;"	p	namespace:boost::units::si	signature:(joules,energy)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/force.hpp	/^BOOST_UNITS_STATIC_CONSTANT(newton,force);  $/;"	p	namespace:boost::units::si	signature:(newton,force)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/force.hpp	/^BOOST_UNITS_STATIC_CONSTANT(newtons,force); $/;"	p	namespace:boost::units::si	signature:(newtons,force)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/frequency.hpp	/^BOOST_UNITS_STATIC_CONSTANT(hertz,frequency);   $/;"	p	namespace:boost::units::si	signature:(hertz,frequency)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/illuminance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(lux,illuminance); $/;"	p	namespace:boost::units::si	signature:(lux,illuminance)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/inductance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(henry,inductance);  $/;"	p	namespace:boost::units::si	signature:(henry,inductance)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/inductance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(henrys,inductance); $/;"	p	namespace:boost::units::si	signature:(henrys,inductance)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(meter,length);  $/;"	p	namespace:boost::units::si	signature:(meter,length)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(meters,length); $/;"	p	namespace:boost::units::si	signature:(meters,length)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(metre,length);  $/;"	p	namespace:boost::units::si	signature:(metre,length)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/length.hpp	/^BOOST_UNITS_STATIC_CONSTANT(metres,length); $/;"	p	namespace:boost::units::si	signature:(metres,length)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/luminous_flux.hpp	/^BOOST_UNITS_STATIC_CONSTANT(lumen,luminous_flux); $/;"	p	namespace:boost::units::si	signature:(lumen,luminous_flux)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/luminous_flux.hpp	/^BOOST_UNITS_STATIC_CONSTANT(lumens,luminous_flux);    $/;"	p	namespace:boost::units::si	signature:(lumens,luminous_flux)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/luminous_intensity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(candela,luminous_intensity); $/;"	p	namespace:boost::units::si	signature:(candela,luminous_intensity)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/luminous_intensity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(candelas,luminous_intensity);    $/;"	p	namespace:boost::units::si	signature:(candelas,luminous_intensity)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/magnetic_flux.hpp	/^BOOST_UNITS_STATIC_CONSTANT(weber,magnetic_flux);   $/;"	p	namespace:boost::units::si	signature:(weber,magnetic_flux)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/magnetic_flux.hpp	/^BOOST_UNITS_STATIC_CONSTANT(webers,magnetic_flux);  $/;"	p	namespace:boost::units::si	signature:(webers,magnetic_flux)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/magnetic_flux_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(tesla,magnetic_flux_density);   $/;"	p	namespace:boost::units::si	signature:(tesla,magnetic_flux_density)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/magnetic_flux_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(teslas,magnetic_flux_density);  $/;"	p	namespace:boost::units::si	signature:(teslas,magnetic_flux_density)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogram,mass); $/;"	p	namespace:boost::units::si	signature:(kilogram,mass)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogramme,mass);   $/;"	p	namespace:boost::units::si	signature:(kilogramme,mass)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogrammes,mass);  $/;"	p	namespace:boost::units::si	signature:(kilogrammes,mass)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilograms,mass);    $/;"	p	namespace:boost::units::si	signature:(kilograms,mass)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogram_per_cubic_meter,mass_density);$/;"	p	namespace:boost::units::si	signature:(kilogram_per_cubic_meter,mass_density)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogramme_per_cubic_metre,mass_density);$/;"	p	namespace:boost::units::si	signature:(kilogramme_per_cubic_metre,mass_density)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogrammes_per_cubic_metre,mass_density);$/;"	p	namespace:boost::units::si	signature:(kilogrammes_per_cubic_metre,mass_density)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/mass_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilograms_per_cubic_meter,mass_density);$/;"	p	namespace:boost::units::si	signature:(kilograms_per_cubic_meter,mass_density)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/plane_angle.hpp	/^BOOST_UNITS_STATIC_CONSTANT(radian,plane_angle); $/;"	p	namespace:boost::units::si	signature:(radian,plane_angle)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/plane_angle.hpp	/^BOOST_UNITS_STATIC_CONSTANT(radians,plane_angle);    $/;"	p	namespace:boost::units::si	signature:(radians,plane_angle)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/power.hpp	/^BOOST_UNITS_STATIC_CONSTANT(watt,power);    $/;"	p	namespace:boost::units::si	signature:(watt,power)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/power.hpp	/^BOOST_UNITS_STATIC_CONSTANT(watts,power);   $/;"	p	namespace:boost::units::si	signature:(watts,power)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/pressure.hpp	/^BOOST_UNITS_STATIC_CONSTANT(pascal,pressure);   $/;"	p	namespace:boost::units::si	signature:(pascal,pressure)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/pressure.hpp	/^BOOST_UNITS_STATIC_CONSTANT(pascals,pressure);  $/;"	p	namespace:boost::units::si	signature:(pascals,pressure)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/resistance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(ohm,resistance);    $/;"	p	namespace:boost::units::si	signature:(ohm,resistance)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/resistance.hpp	/^BOOST_UNITS_STATIC_CONSTANT(ohms,resistance);   $/;"	p	namespace:boost::units::si	signature:(ohms,resistance)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/solid_angle.hpp	/^BOOST_UNITS_STATIC_CONSTANT(steradian,solid_angle); $/;"	p	namespace:boost::units::si	signature:(steradian,solid_angle)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/solid_angle.hpp	/^BOOST_UNITS_STATIC_CONSTANT(steradians,solid_angle);    $/;"	p	namespace:boost::units::si	signature:(steradians,solid_angle)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/surface_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogram_per_square_meter,surface_density);$/;"	p	namespace:boost::units::si	signature:(kilogram_per_square_meter,surface_density)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/surface_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogramme_per_square_metre,surface_density);$/;"	p	namespace:boost::units::si	signature:(kilogramme_per_square_metre,surface_density)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/surface_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilogrammes_per_square_metre,surface_density);$/;"	p	namespace:boost::units::si	signature:(kilogrammes_per_square_metre,surface_density)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/surface_density.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kilograms_per_square_meter,surface_density);$/;"	p	namespace:boost::units::si	signature:(kilograms_per_square_meter,surface_density)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/surface_tension.hpp	/^BOOST_UNITS_STATIC_CONSTANT(newton_per_meter,surface_tension);  $/;"	p	namespace:boost::units::si	signature:(newton_per_meter,surface_tension)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/surface_tension.hpp	/^BOOST_UNITS_STATIC_CONSTANT(newtons_per_meter,surface_tension); $/;"	p	namespace:boost::units::si	signature:(newtons_per_meter,surface_tension)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/temperature.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kelvin,temperature);    $/;"	p	namespace:boost::units::si	signature:(kelvin,temperature)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/temperature.hpp	/^BOOST_UNITS_STATIC_CONSTANT(kelvins,temperature);   $/;"	p	namespace:boost::units::si	signature:(kelvins,temperature)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/time.hpp	/^BOOST_UNITS_STATIC_CONSTANT(second,time);   $/;"	p	namespace:boost::units::si	signature:(second,time)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/time.hpp	/^BOOST_UNITS_STATIC_CONSTANT(seconds,time);  $/;"	p	namespace:boost::units::si	signature:(seconds,time)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/torque.hpp	/^BOOST_UNITS_STATIC_CONSTANT(newton_meter,torque);  $/;"	p	namespace:boost::units::si	signature:(newton_meter,torque)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/torque.hpp	/^BOOST_UNITS_STATIC_CONSTANT(newton_meters,torque); $/;"	p	namespace:boost::units::si	signature:(newton_meters,torque)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(meter_per_second,velocity); $/;"	p	namespace:boost::units::si	signature:(meter_per_second,velocity)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(meters_per_second,velocity);    $/;"	p	namespace:boost::units::si	signature:(meters_per_second,velocity)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(metre_per_second,velocity); $/;"	p	namespace:boost::units::si	signature:(metre_per_second,velocity)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/velocity.hpp	/^BOOST_UNITS_STATIC_CONSTANT(metres_per_second,velocity);    $/;"	p	namespace:boost::units::si	signature:(metres_per_second,velocity)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_meter,volume);    $/;"	p	namespace:boost::units::si	signature:(cubic_meter,volume)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_meters,volume);   $/;"	p	namespace:boost::units::si	signature:(cubic_meters,volume)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_metre,volume);    $/;"	p	namespace:boost::units::si	signature:(cubic_metre,volume)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/volume.hpp	/^BOOST_UNITS_STATIC_CONSTANT(cubic_metres,volume);   $/;"	p	namespace:boost::units::si	signature:(cubic_metres,volume)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_meter,wavenumber);   $/;"	p	namespace:boost::units::si	signature:(reciprocal_meter,wavenumber)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_meters,wavenumber);  $/;"	p	namespace:boost::units::si	signature:(reciprocal_meters,wavenumber)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_metre,wavenumber);   $/;"	p	namespace:boost::units::si	signature:(reciprocal_metre,wavenumber)
boost::units::si::BOOST_UNITS_STATIC_CONSTANT	/usr/include/boost/units/systems/si/wavenumber.hpp	/^BOOST_UNITS_STATIC_CONSTANT(reciprocal_metres,wavenumber);  $/;"	p	namespace:boost::units::si	signature:(reciprocal_metres,wavenumber)
boost::units::si::absorbed_dose	/usr/include/boost/units/systems/si/absorbed_dose.hpp	/^typedef unit<absorbed_dose_dimension,si::system>     absorbed_dose;$/;"	t	namespace:boost::units::si
boost::units::si::acceleration	/usr/include/boost/units/systems/si/acceleration.hpp	/^typedef unit<acceleration_dimension,si::system>  acceleration;$/;"	t	namespace:boost::units::si
boost::units::si::action	/usr/include/boost/units/systems/si/action.hpp	/^typedef unit<action_dimension,si::system>    action;$/;"	t	namespace:boost::units::si
boost::units::si::activity	/usr/include/boost/units/systems/si/activity.hpp	/^typedef unit<activity_dimension,si::system>  activity;$/;"	t	namespace:boost::units::si
boost::units::si::amount	/usr/include/boost/units/systems/si/amount.hpp	/^typedef unit<amount_dimension,si::system>    amount;$/;"	t	namespace:boost::units::si
boost::units::si::ampere_base_unit	/usr/include/boost/units/base_units/si/ampere.hpp	/^struct ampere_base_unit : public base_unit<ampere_base_unit, current_dimension, -6>$/;"	s	namespace:boost::units::si	inherits:base_unit
boost::units::si::ampere_base_unit::name	/usr/include/boost/units/base_units/si/ampere.hpp	/^    static std::string name()   { return("ampere"); }$/;"	f	struct:boost::units::si::ampere_base_unit	access:public	signature:()
boost::units::si::ampere_base_unit::symbol	/usr/include/boost/units/base_units/si/ampere.hpp	/^    static std::string symbol() { return("A"); }$/;"	f	struct:boost::units::si::ampere_base_unit	access:public	signature:()
boost::units::si::angular_acceleration	/usr/include/boost/units/systems/si/angular_acceleration.hpp	/^typedef unit<angular_acceleration_dimension,si::system>      angular_acceleration;$/;"	t	namespace:boost::units::si
boost::units::si::angular_momentum	/usr/include/boost/units/systems/si/angular_momentum.hpp	/^typedef unit<angular_momentum_dimension,si::system>      angular_momentum;$/;"	t	namespace:boost::units::si
boost::units::si::angular_velocity	/usr/include/boost/units/systems/si/angular_velocity.hpp	/^typedef unit<angular_velocity_dimension,si::system>      angular_velocity;$/;"	t	namespace:boost::units::si
boost::units::si::area	/usr/include/boost/units/systems/si/area.hpp	/^typedef unit<area_dimension,si::system>      area;$/;"	t	namespace:boost::units::si
boost::units::si::candela_base_unit	/usr/include/boost/units/base_units/si/candela.hpp	/^struct candela_base_unit : public base_unit<candela_base_unit, luminous_intensity_dimension, -3>$/;"	s	namespace:boost::units::si	inherits:base_unit
boost::units::si::candela_base_unit::name	/usr/include/boost/units/base_units/si/candela.hpp	/^    static std::string name()   { return("candela"); }$/;"	f	struct:boost::units::si::candela_base_unit	access:public	signature:()
boost::units::si::candela_base_unit::symbol	/usr/include/boost/units/base_units/si/candela.hpp	/^    static std::string symbol() { return("cd"); }$/;"	f	struct:boost::units::si::candela_base_unit	access:public	signature:()
boost::units::si::capacitance	/usr/include/boost/units/systems/si/capacitance.hpp	/^typedef unit<capacitance_dimension,si::system>    capacitance;$/;"	t	namespace:boost::units::si
boost::units::si::catalytic_activity	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^typedef unit<si::catalytic_activity_dim,si::system>                                    catalytic_activity;$/;"	t	namespace:boost::units::si
boost::units::si::catalytic_activity_dim	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^typedef derived_dimension<time_base_dimension,-1,amount_base_dimension,1>::type                             catalytic_activity_dim;    $/;"	t	namespace:boost::units::si
boost::units::si::conductance	/usr/include/boost/units/systems/si/conductance.hpp	/^typedef unit<conductance_dimension,si::system>    conductance;$/;"	t	namespace:boost::units::si
boost::units::si::conductivity	/usr/include/boost/units/systems/si/conductivity.hpp	/^typedef unit<conductivity_dimension,si::system>    conductivity;$/;"	t	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_alpha,quantity<mass_over_amount>,4.001506179127e-3*kilograms\/mole,6.2e-14*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_alpha,quantity<mass_over_amount>,4.001506179127e-3*kilograms/mole,6.2e-14*kilograms/mole)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_alpha,quantity<mass>,6.64465620e-27*kilograms,3.3e-34*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_alpha,quantity<mass>,6.64465620e-27*kilograms,3.3e-34*kilograms)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_alpha_over_m_e,quantity<dimensionless>,7294.2995365*dimensionless(),3.1e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_alpha_over_m_e,quantity<dimensionless>,7294.2995365*dimensionless(),3.1e-6*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_alpha_over_m_p,quantity<dimensionless>,3.97259968951*dimensionless(),4.1e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_alpha_over_m_p,quantity<dimensionless>,3.97259968951*dimensionless(),4.1e-10*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(E_h,quantity<energy>,4.35974394e-18*joules,2.2e-25*joules);$/;"	p	namespace:boost::units::si::constants::codata	signature:(E_h,quantity<energy>,4.35974394e-18*joules,2.2e-25*joules)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(R_infinity,quantity<wavenumber>,10973731.568527\/meter,7.3e-5\/meter);$/;"	p	namespace:boost::units::si::constants::codata	signature:(R_infinity,quantity<wavenumber>,10973731.568527/meter,7.3e-5/meter)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(a_0,quantity<length>,0.52917720859e-10*meters,3.6e-20*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(a_0,quantity<length>,0.52917720859e-10*meters,3.6e-20*meters)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(alpha,quantity<dimensionless>,7.2973525376e-3*dimensionless(),5.0e-12*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(alpha,quantity<dimensionless>,7.2973525376e-3*dimensionless(),5.0e-12*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_d,quantity<mass_over_amount>,2.013553212724e-3*kilograms\/mole,7.8e-14*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_d,quantity<mass_over_amount>,2.013553212724e-3*kilograms/mole,7.8e-14*kilograms/mole)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(R_d,quantity<length>,2.1402e-15*meters,2.8e-18*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(R_d,quantity<length>,2.1402e-15*meters,2.8e-18*meters)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(g_d,quantity<dimensionless>,0.8574382308*dimensionless(),7.2e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(g_d,quantity<dimensionless>,0.8574382308*dimensionless(),7.2e-9*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_d,quantity<mass>,3.34358320e-27*kilograms,1.7e-34*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_d,quantity<mass>,3.34358320e-27*kilograms,1.7e-34*kilograms)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_d_over_m_e,quantity<dimensionless>,3670.4829654*dimensionless(),1.6e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_d_over_m_e,quantity<dimensionless>,3670.4829654*dimensionless(),1.6e-6*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_d_over_m_p,quantity<dimensionless>,1.99900750108*dimensionless(),2.2e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_d_over_m_p,quantity<dimensionless>,1.99900750108*dimensionless(),2.2e-10*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_d,quantity<energy_over_magnetic_flux_density>,0.433073465e-26*joules\/tesla,1.1e-34*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_d,quantity<energy_over_magnetic_flux_density>,0.433073465e-26*joules/tesla,1.1e-34*joules/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_d_over_mu_B,quantity<dimensionless>,0.4669754556e-3*dimensionless(),3.9e-12*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_d_over_mu_B,quantity<dimensionless>,0.4669754556e-3*dimensionless(),3.9e-12*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_d_over_mu_N,quantity<dimensionless>,0.8574382308*dimensionless(),7.2e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_d_over_mu_N,quantity<dimensionless>,0.8574382308*dimensionless(),7.2e-9*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_d_over_mu_e,quantity<dimensionless>,-4.664345537e-4*dimensionless(),3.9e-12*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_d_over_mu_e,quantity<dimensionless>,-4.664345537e-4*dimensionless(),3.9e-12*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_d_over_mu_n,quantity<dimensionless>,-0.44820652*dimensionless(),1.1e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_d_over_mu_n,quantity<dimensionless>,-0.44820652*dimensionless(),1.1e-7*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_d_over_mu_p,quantity<dimensionless>,0.3070122070*dimensionless(),2.4e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_d_over_mu_p,quantity<dimensionless>,0.3070122070*dimensionless(),2.4e-9*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(G_0,quantity<conductance>,7.7480917004e-5*siemens,5.3e-14*siemens);$/;"	p	namespace:boost::units::si::constants::codata	signature:(G_0,quantity<conductance>,7.7480917004e-5*siemens,5.3e-14*siemens)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(K_J,quantity<frequency_over_electric_potential>,483597.891e9*hertz\/volt,1.2e7*hertz\/volt);$/;"	p	namespace:boost::units::si::constants::codata	signature:(K_J,quantity<frequency_over_electric_potential>,483597.891e9*hertz/volt,1.2e7*hertz/volt)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(Phi_0,quantity<magnetic_flux>,2.067833667e-15*webers,5.2e-23*webers);$/;"	p	namespace:boost::units::si::constants::codata	signature:(Phi_0,quantity<magnetic_flux>,2.067833667e-15*webers,5.2e-23*webers)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(R_K,quantity<resistance>,25812.807557*ohms,1.77e-5*ohms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(R_K,quantity<resistance>,25812.807557*ohms,1.77e-5*ohms)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(e,quantity<electric_charge>,1.602176487e-19*coulombs,4.0e-27*coulombs);$/;"	p	namespace:boost::units::si::constants::codata	signature:(e,quantity<electric_charge>,1.602176487e-19*coulombs,4.0e-27*coulombs)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(e_over_h,quantity<current_over_energy>,2.417989454e14*amperes\/joule,6.0e6*amperes\/joule);$/;"	p	namespace:boost::units::si::constants::codata	signature:(e_over_h,quantity<current_over_energy>,2.417989454e14*amperes/joule,6.0e6*amperes/joule)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_B,quantity<energy_over_magnetic_flux_density>,927.400915e-26*joules\/tesla,2.3e-31*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_B,quantity<energy_over_magnetic_flux_density>,927.400915e-26*joules/tesla,2.3e-31*joules/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_N,quantity<energy_over_magnetic_flux_density>,5.05078324e-27*joules\/tesla,1.3e-34*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_N,quantity<energy_over_magnetic_flux_density>,5.05078324e-27*joules/tesla,1.3e-34*joules/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_e,quantity<mass_over_amount>,5.4857990943e-7*kilograms\/mole,2.3e-16*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_e,quantity<mass_over_amount>,5.4857990943e-7*kilograms/mole,2.3e-16*kilograms/mole)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(a_e,quantity<dimensionless>,1.15965218111e-3*dimensionless(),7.4e-13*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(a_e,quantity<dimensionless>,1.15965218111e-3*dimensionless(),7.4e-13*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(e_over_m_e,quantity<electric_charge_over_mass>,1.758820150e11*coulombs\/kilogram,4.4e3*coulombs\/kilogram);$/;"	p	namespace:boost::units::si::constants::codata	signature:(e_over_m_e,quantity<electric_charge_over_mass>,1.758820150e11*coulombs/kilogram,4.4e3*coulombs/kilogram)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(g_e,quantity<dimensionless>,-2.0023193043622*dimensionless(),1.5e-12*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(g_e,quantity<dimensionless>,-2.0023193043622*dimensionless(),1.5e-12*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(gamma_e,quantity<frequency_over_magnetic_flux_density>,1.760859770e11\/second\/tesla,4.4e3\/second\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(gamma_e,quantity<frequency_over_magnetic_flux_density>,1.760859770e11/second/tesla,4.4e3/second/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(lambda_C,quantity<length>,2.4263102175e-12*meters,3.3e-21*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(lambda_C,quantity<length>,2.4263102175e-12*meters,3.3e-21*meters)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e,quantity<mass>,9.10938215e-31*kilograms,4.5e-38*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e,quantity<mass>,9.10938215e-31*kilograms,4.5e-38*kilograms)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e_over_m_alpha,quantity<dimensionless>,1.37093355570e-4*dimensionless(),5.8e-14*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e_over_m_alpha,quantity<dimensionless>,1.37093355570e-4*dimensionless(),5.8e-14*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e_over_m_d,quantity<dimensionless>,2.7244371093e-4*dimensionless(),1.2e-13*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e_over_m_d,quantity<dimensionless>,2.7244371093e-4*dimensionless(),1.2e-13*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e_over_m_mu,quantity<dimensionless>,4.83633171e-3*dimensionless(),1.2e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e_over_m_mu,quantity<dimensionless>,4.83633171e-3*dimensionless(),1.2e-10*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e_over_m_n,quantity<dimensionless>,5.4386734459e-4*dimensionless(),3.3e-13*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e_over_m_n,quantity<dimensionless>,5.4386734459e-4*dimensionless(),3.3e-13*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e_over_m_p,quantity<dimensionless>,5.4461702177e-4*dimensionless(),2.4e-13*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e_over_m_p,quantity<dimensionless>,5.4461702177e-4*dimensionless(),2.4e-13*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_e_over_m_tau,quantity<dimensionless>,2.87564e-4*dimensionless(),4.7e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_e_over_m_tau,quantity<dimensionless>,2.87564e-4*dimensionless(),4.7e-8*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e,quantity<energy_over_magnetic_flux_density>,-928.476377e-26*joules\/tesla,2.3e-31*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e,quantity<energy_over_magnetic_flux_density>,-928.476377e-26*joules/tesla,2.3e-31*joules/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_B,quantity<dimensionless>,-1.00115965218111*dimensionless(),7.4e-13*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_B,quantity<dimensionless>,-1.00115965218111*dimensionless(),7.4e-13*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_N,quantity<dimensionless>,-183.28197092*dimensionless(),8.0e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_N,quantity<dimensionless>,-183.28197092*dimensionless(),8.0e-7*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_d,quantity<dimensionless>,-2143.923498*dimensionless(),1.8e-5*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_d,quantity<dimensionless>,-2143.923498*dimensionless(),1.8e-5*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_h_prime,quantity<dimensionless>,864.058257*dimensionless(),1.0e-5*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_h_prime,quantity<dimensionless>,864.058257*dimensionless(),1.0e-5*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_mu,quantity<dimensionless>,206.7669877*dimensionless(),5.2e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_mu,quantity<dimensionless>,206.7669877*dimensionless(),5.2e-6*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_n,quantity<dimensionless>,960.92050*dimensionless(),2.3e-4*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_n,quantity<dimensionless>,960.92050*dimensionless(),2.3e-4*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_p,quantity<dimensionless>,-658.2106848*dimensionless(),5.4e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_p,quantity<dimensionless>,-658.2106848*dimensionless(),5.4e-6*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_e_over_mu_p_prime,quantity<dimensionless>,-658.2275971*dimensionless(),7.2e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_e_over_mu_p_prime,quantity<dimensionless>,-658.2275971*dimensionless(),7.2e-6*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(r_e,quantity<length>,2.8179402894e-15*meters,5.8e-24*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(r_e,quantity<length>,2.8179402894e-15*meters,5.8e-24*meters)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(sigma_e,quantity<area>,0.6652458558e-28*square_meters,2.7e-37*square_meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(sigma_e,quantity<area>,0.6652458558e-28*square_meters,2.7e-37*square_meters)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_h,quantity<mass_over_amount>,3.0149322473e-3*kilograms\/mole,2.6e-12*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_h,quantity<mass_over_amount>,3.0149322473e-3*kilograms/mole,2.6e-12*kilograms/mole)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(gamma_h_prime,quantity<frequency_over_magnetic_flux_density>,2.037894730e8\/second\/tesla,5.6e-0\/second\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(gamma_h_prime,quantity<frequency_over_magnetic_flux_density>,2.037894730e8/second/tesla,5.6e-0/second/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_h,quantity<mass>,5.00641192e-27*kilograms,2.5e-34*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_h,quantity<mass>,5.00641192e-27*kilograms,2.5e-34*kilograms)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_h_over_m_e,quantity<dimensionless>,5495.8852765*dimensionless(),5.2e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_h_over_m_e,quantity<dimensionless>,5495.8852765*dimensionless(),5.2e-6*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_h_over_m_p,quantity<dimensionless>,2.9931526713*dimensionless(),2.6e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_h_over_m_p,quantity<dimensionless>,2.9931526713*dimensionless(),2.6e-9*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_h_prime,quantity<energy_over_magnetic_flux_density>,-1.074552982e-26*joules\/tesla,3.0e-34*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_h_prime,quantity<energy_over_magnetic_flux_density>,-1.074552982e-26*joules/tesla,3.0e-34*joules/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_h_prime_over_mu_B,quantity<dimensionless>,-1.158671471e-3*dimensionless(),1.4e-11*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_h_prime_over_mu_B,quantity<dimensionless>,-1.158671471e-3*dimensionless(),1.4e-11*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_h_prime_over_mu_N,quantity<dimensionless>,-2.127497718*dimensionless(),2.5e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_h_prime_over_mu_N,quantity<dimensionless>,-2.127497718*dimensionless(),2.5e-8*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_h_prime_over_mu_p,quantity<dimensionless>,-0.761766558*dimensionless(),1.1e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_h_prime_over_mu_p,quantity<dimensionless>,-0.761766558*dimensionless(),1.1e-8*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_h_prime_over_mu_p_prime,quantity<dimensionless>,-0.7617861313*dimensionless(),3.3e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_h_prime_over_mu_p_prime,quantity<dimensionless>,-0.7617861313*dimensionless(),3.3e-8*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_mu,quantity<mass_over_amount>,0.1134289256e-3*kilograms\/mole,2.9e-12*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_mu,quantity<mass_over_amount>,0.1134289256e-3*kilograms/mole,2.9e-12*kilograms/mole)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(a_mu,quantity<dimensionless>,1.16592069e-3*dimensionless(),6.0e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(a_mu,quantity<dimensionless>,1.16592069e-3*dimensionless(),6.0e-10*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(g_mu,quantity<dimensionless>,-2.0023318414*dimensionless(),1.2e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(g_mu,quantity<dimensionless>,-2.0023318414*dimensionless(),1.2e-9*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(lambda_C_mu,quantity<length>,11.73444104e-15*meters,3.0e-22*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(lambda_C_mu,quantity<length>,11.73444104e-15*meters,3.0e-22*meters)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_mu,quantity<mass>,1.88353130e-28*kilograms,1.1e-35*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_mu,quantity<mass>,1.88353130e-28*kilograms,1.1e-35*kilograms)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_mu_over_m_e,quantity<dimensionless>,206.7682823*dimensionless(),5.2e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_mu_over_m_e,quantity<dimensionless>,206.7682823*dimensionless(),5.2e-6*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_mu_over_m_n,quantity<dimensionless>,0.1124545167*dimensionless(),2.9e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_mu_over_m_n,quantity<dimensionless>,0.1124545167*dimensionless(),2.9e-9*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_mu_over_m_p,quantity<dimensionless>,0.1126095261*dimensionless(),2.9e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_mu_over_m_p,quantity<dimensionless>,0.1126095261*dimensionless(),2.9e-9*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_mu_over_m_tau,quantity<dimensionless>,5.94592e-2*dimensionless(),9.7e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_mu_over_m_tau,quantity<dimensionless>,5.94592e-2*dimensionless(),9.7e-6*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_mu,quantity<energy_over_magnetic_flux_density>,-4.49044786e-26*joules\/tesla,1.6e-33*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_mu,quantity<energy_over_magnetic_flux_density>,-4.49044786e-26*joules/tesla,1.6e-33*joules/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_mu_over_mu_B,quantity<dimensionless>,-4.84197049e-3*dimensionless(),1.2e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_mu_over_mu_B,quantity<dimensionless>,-4.84197049e-3*dimensionless(),1.2e-10*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_mu_over_mu_N,quantity<dimensionless>,-8.89059705*dimensionless(),2.3e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_mu_over_mu_N,quantity<dimensionless>,-8.89059705*dimensionless(),2.3e-7*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_mu_over_mu_p,quantity<dimensionless>,-3.183345137*dimensionless(),8.5e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_mu_over_mu_p,quantity<dimensionless>,-3.183345137*dimensionless(),8.5e-8*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_n,quantity<mass_over_amount>,1.00866491597e-3*kilograms\/mole,4.3e-13*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_n,quantity<mass_over_amount>,1.00866491597e-3*kilograms/mole,4.3e-13*kilograms/mole)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(g_n,quantity<dimensionless>,-3.82608545*dimensionless(),9.0e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(g_n,quantity<dimensionless>,-3.82608545*dimensionless(),9.0e-7*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(gamma_n,quantity<frequency_over_magnetic_flux_density>,1.83247185e8\/second\/tesla,4.3e1\/second\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(gamma_n,quantity<frequency_over_magnetic_flux_density>,1.83247185e8/second/tesla,4.3e1/second/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(lambda_C_n,quantity<length>,1.3195908951e-15*meters,2.0e-24*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(lambda_C_n,quantity<length>,1.3195908951e-15*meters,2.0e-24*meters)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_n,quantity<mass>,1.674927211e-27*kilograms,8.4e-35*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_n,quantity<mass>,1.674927211e-27*kilograms,8.4e-35*kilograms)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_n_over_m_e,quantity<dimensionless>,1838.6836605*dimensionless(),1.1e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_n_over_m_e,quantity<dimensionless>,1838.6836605*dimensionless(),1.1e-6*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_n_over_m_mu,quantity<dimensionless>,8.89248409*dimensionless(),2.3e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_n_over_m_mu,quantity<dimensionless>,8.89248409*dimensionless(),2.3e-7*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_n_over_m_p,quantity<dimensionless>,1.00137841918*dimensionless(),4.6e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_n_over_m_p,quantity<dimensionless>,1.00137841918*dimensionless(),4.6e-10*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_n_over_m_tau,quantity<dimensionless>,0.528740*dimensionless(),8.6e-5*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_n_over_m_tau,quantity<dimensionless>,0.528740*dimensionless(),8.6e-5*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_n,quantity<energy_over_magnetic_flux_density>,-0.96623641e-26*joules\/tesla,2.3e-33*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_n,quantity<energy_over_magnetic_flux_density>,-0.96623641e-26*joules/tesla,2.3e-33*joules/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_n_over_mu_e,quantity<dimensionless>,1.04066882e-3*dimensionless(),2.5e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_n_over_mu_e,quantity<dimensionless>,1.04066882e-3*dimensionless(),2.5e-10*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_n_over_mu_p,quantity<dimensionless>,-0.68497934*dimensionless(),1.6e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_n_over_mu_p,quantity<dimensionless>,-0.68497934*dimensionless(),1.6e-7*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_n_over_mu_p_prime,quantity<dimensionless>,-0.68499694*dimensionless(),1.6e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_n_over_mu_p_prime,quantity<dimensionless>,-0.68499694*dimensionless(),1.6e-7*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(F,quantity<electric_charge_over_amount>,96485.3399*coulombs\/mole,2.4e-3*coulombs\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(F,quantity<electric_charge_over_amount>,96485.3399*coulombs/mole,2.4e-3*coulombs/mole)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(N_A,quantity<inverse_amount>,6.02214179e23\/mole,3.0e16\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(N_A,quantity<inverse_amount>,6.02214179e23/mole,3.0e16/mole)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(R,quantity<energy_over_temperature_amount>,8.314472*joules\/kelvin\/mole,1.5e-5*joules\/kelvin\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(R,quantity<energy_over_temperature_amount>,8.314472*joules/kelvin/mole,1.5e-5*joules/kelvin/mole)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(b,quantity<length_temperature>,2.8977685e-3*meter*kelvin,5.1e-9*meter*kelvin);$/;"	p	namespace:boost::units::si::constants::codata	signature:(b,quantity<length_temperature>,2.8977685e-3*meter*kelvin,5.1e-9*meter*kelvin)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(b_prime,quantity<frequency_over_temperature>,5.878933e10*hertz\/kelvin,1.0e15*hertz\/kelvin);$/;"	p	namespace:boost::units::si::constants::codata	signature:(b_prime,quantity<frequency_over_temperature>,5.878933e10*hertz/kelvin,1.0e15*hertz/kelvin)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(c_1,quantity<power_area>,3.74177118e-16*watt*square_meters,1.9e-23*watt*square_meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(c_1,quantity<power_area>,3.74177118e-16*watt*square_meters,1.9e-23*watt*square_meters)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(c_1L,quantity<power_area_over_solid_angle>,1.191042759e-16*watt*square_meters\/steradian,5.9e-24*watt*square_meters\/steradian);$/;"	p	namespace:boost::units::si::constants::codata	signature:(c_1L,quantity<power_area_over_solid_angle>,1.191042759e-16*watt*square_meters/steradian,5.9e-24*watt*square_meters/steradian)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(c_2,quantity<length_temperature>,1.4387752e-2*meter*kelvin,2.5e-8*meter*kelvin);$/;"	p	namespace:boost::units::si::constants::codata	signature:(c_2,quantity<length_temperature>,1.4387752e-2*meter*kelvin,2.5e-8*meter*kelvin)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(k_B,quantity<energy_over_temperature>,1.3806504e-23*joules\/kelvin,2.4e-29*joules\/kelvin);$/;"	p	namespace:boost::units::si::constants::codata	signature:(k_B,quantity<energy_over_temperature>,1.3806504e-23*joules/kelvin,2.4e-29*joules/kelvin)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_u,quantity<mass>,1.660538782e-27*kilograms,8.3e-35*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_u,quantity<mass>,1.660538782e-27*kilograms,8.3e-35*kilograms)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(sigma_SB,quantity<power_over_area_temperature_4>,5.670400e-8*watts\/square_meter\/pow<4>(kelvin),4.0e-13*watts\/square_meter\/pow<4>(kelvin));$/;"	p	namespace:boost::units::si::constants::codata	signature:(sigma_SB,quantity<power_over_area_temperature_4>,5.670400e-8*watts/square_meter/pow<4>(kelvin),4.0e-13*watts/square_meter/pow<4>(kelvin))
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_p,quantity<mass_over_amount>,1.00727646677e-3*kilograms\/mole,1.0e-13*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_p,quantity<mass_over_amount>,1.00727646677e-3*kilograms/mole,1.0e-13*kilograms/mole)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(R_p,quantity<length>,0.8768e-15*meters,6.9e-18*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(R_p,quantity<length>,0.8768e-15*meters,6.9e-18*meters)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(e_over_m_p,quantity<electric_charge_over_mass>,9.57883392e7*coulombs\/kilogram,2.4e0*coulombs\/kilogram);$/;"	p	namespace:boost::units::si::constants::codata	signature:(e_over_m_p,quantity<electric_charge_over_mass>,9.57883392e7*coulombs/kilogram,2.4e0*coulombs/kilogram)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(g_p,quantity<dimensionless>,5.585694713*dimensionless(),4.6e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(g_p,quantity<dimensionless>,5.585694713*dimensionless(),4.6e-8*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(gamma_p,quantity<frequency_over_magnetic_flux_density>,2.675222099e8\/second\/tesla,7.0e0\/second\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(gamma_p,quantity<frequency_over_magnetic_flux_density>,2.675222099e8/second/tesla,7.0e0/second/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(gamma_p_prime,quantity<frequency_over_magnetic_flux_density>,2.675153362e8\/second\/tesla,7.3e0\/second\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(gamma_p_prime,quantity<frequency_over_magnetic_flux_density>,2.675153362e8/second/tesla,7.3e0/second/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(lambda_C_p,quantity<length>,1.3214098446e-15*meters,1.9e-24*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(lambda_C_p,quantity<length>,1.3214098446e-15*meters,1.9e-24*meters)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_p,quantity<mass>,1.672621637e-27*kilograms,8.3e-35*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_p,quantity<mass>,1.672621637e-27*kilograms,8.3e-35*kilograms)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_p_over_m_e,quantity<dimensionless>,1836.15267247*dimensionless(),8.0e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_p_over_m_e,quantity<dimensionless>,1836.15267247*dimensionless(),8.0e-7*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_p_over_m_mu,quantity<dimensionless>,8.88024339*dimensionless(),2.3e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_p_over_m_mu,quantity<dimensionless>,8.88024339*dimensionless(),2.3e-7*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_p_over_m_n,quantity<dimensionless>,0.99862347824*dimensionless(),4.6e-10*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_p_over_m_n,quantity<dimensionless>,0.99862347824*dimensionless(),4.6e-10*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_p_over_m_tau,quantity<dimensionless>,0.528012*dimensionless(),8.6e-5*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_p_over_m_tau,quantity<dimensionless>,0.528012*dimensionless(),8.6e-5*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p,quantity<energy_over_magnetic_flux_density>,1.410606662e-26*joules\/tesla,3.7e-34*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p,quantity<energy_over_magnetic_flux_density>,1.410606662e-26*joules/tesla,3.7e-34*joules/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p_over_mu_B,quantity<dimensionless>,1.521032209e-3*dimensionless(),1.2e-11*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p_over_mu_B,quantity<dimensionless>,1.521032209e-3*dimensionless(),1.2e-11*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p_over_mu_N,quantity<dimensionless>,2.792847356*dimensionless(),2.3e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p_over_mu_N,quantity<dimensionless>,2.792847356*dimensionless(),2.3e-8*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p_over_mu_n,quantity<dimensionless>,-1.45989806*dimensionless(),3.4e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p_over_mu_n,quantity<dimensionless>,-1.45989806*dimensionless(),3.4e-7*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p_prime,quantity<energy_over_magnetic_flux_density>,1.410570419e-26*joules\/tesla,3.8e-34*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p_prime,quantity<energy_over_magnetic_flux_density>,1.410570419e-26*joules/tesla,3.8e-34*joules/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p_prime_over_mu_B,quantity<dimensionless>,1.520993128e-3*dimensionless(),1.7e-11*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p_prime_over_mu_B,quantity<dimensionless>,1.520993128e-3*dimensionless(),1.7e-11*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_p_prime_over_mu_N,quantity<dimensionless>,2.792775598*dimensionless(),3.0e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_p_prime_over_mu_N,quantity<dimensionless>,2.792775598*dimensionless(),3.0e-8*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(sigma_p_prime,quantity<dimensionless>,25.694e-6*dimensionless(),1.4e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(sigma_p_prime,quantity<dimensionless>,25.694e-6*dimensionless(),1.4e-8*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_tau,quantity<mass_over_amount>,1.90768e-3*kilograms\/mole,3.1e-7*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_tau,quantity<mass_over_amount>,1.90768e-3*kilograms/mole,3.1e-7*kilograms/mole)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(lambda_C_tau,quantity<length>,0.69772e-15*meters,1.1e-19*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(lambda_C_tau,quantity<length>,0.69772e-15*meters,1.1e-19*meters)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_tau,quantity<mass>,3.16777e-27*kilograms,5.2e-31*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_tau,quantity<mass>,3.16777e-27*kilograms,5.2e-31*kilograms)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_tau_over_m_e,quantity<dimensionless>,3477.48*dimensionless(),5.7e-1*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_tau_over_m_e,quantity<dimensionless>,3477.48*dimensionless(),5.7e-1*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_tau_over_m_mu,quantity<dimensionless>,16.8183*dimensionless(),2.7e-3*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_tau_over_m_mu,quantity<dimensionless>,16.8183*dimensionless(),2.7e-3*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_tau_over_m_n,quantity<dimensionless>,1.89129*dimensionless(),3.1e-4*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_tau_over_m_n,quantity<dimensionless>,1.89129*dimensionless(),3.1e-4*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_tau_over_m_p,quantity<dimensionless>,1.89390*dimensionless(),3.1e-4*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_tau_over_m_p,quantity<dimensionless>,1.89390*dimensionless(),3.1e-4*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(M_t,quantity<mass_over_amount>,3.0155007134e-3*kilograms\/mole,2.5e-12*kilograms\/mole);$/;"	p	namespace:boost::units::si::constants::codata	signature:(M_t,quantity<mass_over_amount>,3.0155007134e-3*kilograms/mole,2.5e-12*kilograms/mole)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(g_t,quantity<dimensionless>,5.957924896*dimensionless(),7.6e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(g_t,quantity<dimensionless>,5.957924896*dimensionless(),7.6e-8*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_t,quantity<mass>,5.00735588e-27*kilograms,2.5e-34*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_t,quantity<mass>,5.00735588e-27*kilograms,2.5e-34*kilograms)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_t_over_m_e,quantity<dimensionless>,5496.9215269*dimensionless(),5.1e-6*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_t_over_m_e,quantity<dimensionless>,5496.9215269*dimensionless(),5.1e-6*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_t_over_m_p,quantity<dimensionless>,2.9937170309*dimensionless(),2.5e-9*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_t_over_m_p,quantity<dimensionless>,2.9937170309*dimensionless(),2.5e-9*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_t,quantity<energy_over_magnetic_flux_density>,1.504609361e-26*joules\/tesla,4.2e-34*joules\/tesla);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_t,quantity<energy_over_magnetic_flux_density>,1.504609361e-26*joules/tesla,4.2e-34*joules/tesla)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_t_over_mu_B,quantity<dimensionless>,1.622393657e-3*dimensionless(),2.1e-11*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_t_over_mu_B,quantity<dimensionless>,1.622393657e-3*dimensionless(),2.1e-11*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_t_over_mu_N,quantity<dimensionless>,2.978962448*dimensionless(),3.8e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_t_over_mu_N,quantity<dimensionless>,2.978962448*dimensionless(),3.8e-8*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_t_over_mu_e,quantity<dimensionless>,-1.620514423e-3*dimensionless(),2.1e-11*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_t_over_mu_e,quantity<dimensionless>,-1.620514423e-3*dimensionless(),2.1e-11*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_t_over_mu_n,quantity<dimensionless>,-1.55718553*dimensionless(),3.7e-7*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_t_over_mu_n,quantity<dimensionless>,-1.55718553*dimensionless(),3.7e-7*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_t_over_mu_p,quantity<dimensionless>,1.066639908*dimensionless(),1.0e-8*dimensionless());$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_t_over_mu_p,quantity<dimensionless>,1.066639908*dimensionless(),1.0e-8*dimensionless())
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(G,quantity<volume_over_mass_time_squared>,6.67428e-11*cubic_meters\/kilogram\/second\/second,6.7e-15*cubic_meters\/kilogram\/second\/second);$/;"	p	namespace:boost::units::si::constants::codata	signature:(G,quantity<volume_over_mass_time_squared>,6.67428e-11*cubic_meters/kilogram/second/second,6.7e-15*cubic_meters/kilogram/second/second)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(T_P,quantity<temperature>,1.416785e32*kelvin,7.1e27*kelvin);$/;"	p	namespace:boost::units::si::constants::codata	signature:(T_P,quantity<temperature>,1.416785e32*kelvin,7.1e27*kelvin)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(Z_0,quantity<resistance>,376.7303134617706554681984004203193082686*ohm,0.0*ohm);$/;"	p	namespace:boost::units::si::constants::codata	signature:(Z_0,quantity<resistance>,376.7303134617706554681984004203193082686*ohm,0.0*ohm)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(c,quantity<velocity>,299792458.0*meters\/second,0.0*meters\/second);$/;"	p	namespace:boost::units::si::constants::codata	signature:(c,quantity<velocity>,299792458.0*meters/second,0.0*meters/second)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(epsilon_0,quantity<capacitance_over_length>,8.854187817620389850536563031710750260608e-12*farad\/meter,0.0*farad\/meter);$/;"	p	namespace:boost::units::si::constants::codata	signature:(epsilon_0,quantity<capacitance_over_length>,8.854187817620389850536563031710750260608e-12*farad/meter,0.0*farad/meter)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(h,quantity<energy_time>,6.62606896e-34*joule*seconds,3.3e-41*joule*seconds);$/;"	p	namespace:boost::units::si::constants::codata	signature:(h,quantity<energy_time>,6.62606896e-34*joule*seconds,3.3e-41*joule*seconds)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(hbar,quantity<energy_time>,1.054571628e-34*joule*seconds,5.3e-42*joule*seconds);$/;"	p	namespace:boost::units::si::constants::codata	signature:(hbar,quantity<energy_time>,1.054571628e-34*joule*seconds,5.3e-42*joule*seconds)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(l_P,quantity<length>,1.616252e-35*meters,8.1e-40*meters);$/;"	p	namespace:boost::units::si::constants::codata	signature:(l_P,quantity<length>,1.616252e-35*meters,8.1e-40*meters)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(m_P,quantity<mass>,2.17644e-8*kilograms,1.1e-12*kilograms);$/;"	p	namespace:boost::units::si::constants::codata	signature:(m_P,quantity<mass>,2.17644e-8*kilograms,1.1e-12*kilograms)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(mu_0,quantity<force_over_current_squared>,12.56637061435917295385057353311801153679e-7*newtons\/ampere\/ampere,0.0*newtons\/ampere\/ampere);$/;"	p	namespace:boost::units::si::constants::codata	signature:(mu_0,quantity<force_over_current_squared>,12.56637061435917295385057353311801153679e-7*newtons/ampere/ampere,0.0*newtons/ampere/ampere)
boost::units::si::constants::codata::BOOST_UNITS_PHYSICAL_CONSTANT	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^BOOST_UNITS_PHYSICAL_CONSTANT(t_P,quantity<time>,5.39124e-44*seconds,2.7e-48*seconds);$/;"	p	namespace:boost::units::si::constants::codata	signature:(t_P,quantity<time>,5.39124e-44*seconds,2.7e-48*seconds)
boost::units::si::constants::codata::capacitance_over_length	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<capacitance,length>::type capacitance_over_length;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::current_over_energy	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<current,energy>::type current_over_energy;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::electric_charge_over_amount	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<electric_charge,amount>::type electric_charge_over_amount;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::electric_charge_over_mass	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<electric_charge,mass>::type electric_charge_over_mass;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::energy_over_magnetic_flux_density	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<energy,magnetic_flux_density>::type energy_over_magnetic_flux_density;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::energy_over_temperature	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<energy,temperature>::type energy_over_temperature;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::energy_over_temperature_amount	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<energy_over_temperature,amount>::type energy_over_temperature_amount;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::energy_time	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef multiply_typeof_helper<energy,time>::type energy_time;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::force_over_current_squared	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<divide_typeof_helper<force,current>::type,current>::type force_over_current_squared;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::frequency_over_electric_potential	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<frequency,electric_potential>::type frequency_over_electric_potential;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::frequency_over_magnetic_flux_density	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<frequency,magnetic_flux_density>::type frequency_over_magnetic_flux_density;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::frequency_over_temperature	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<frequency,temperature>::type frequency_over_temperature;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::inverse_amount	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<dimensionless,amount>::type inverse_amount;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::length_temperature	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef multiply_typeof_helper<length,temperature>::type length_temperature;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::mass_over_amount	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<mass,amount>::type mass_over_amount;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::power_area	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef multiply_typeof_helper<power,area>::type power_area;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::power_area_over_solid_angle	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<power_area,solid_angle>::type power_area_over_solid_angle;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::power_over_area_temperature_4	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^        >::type power_over_area_temperature_4;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::constants::codata::volume_over_mass_time_squared	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^        >::type volume_over_mass_time_squared;$/;"	t	namespace:boost::units::si::constants::codata
boost::units::si::current	/usr/include/boost/units/systems/si/current.hpp	/^typedef unit<current_dimension,si::system>   current;$/;"	t	namespace:boost::units::si
boost::units::si::dimensionless	/usr/include/boost/units/systems/si/base.hpp	/^typedef unit<dimensionless_type,system>         dimensionless;$/;"	t	namespace:boost::units::si
boost::units::si::dose_equivalent	/usr/include/boost/units/systems/si/dose_equivalent.hpp	/^typedef unit<dose_equivalent_dimension,si::system>     dose_equivalent;$/;"	t	namespace:boost::units::si
boost::units::si::dynamic_viscosity	/usr/include/boost/units/systems/si/dynamic_viscosity.hpp	/^typedef unit<dynamic_viscosity_dimension,si::system>     dynamic_viscosity;$/;"	t	namespace:boost::units::si
boost::units::si::electric_charge	/usr/include/boost/units/systems/si/electric_charge.hpp	/^typedef unit<electric_charge_dimension,si::system>    electric_charge;$/;"	t	namespace:boost::units::si
boost::units::si::electric_potential	/usr/include/boost/units/systems/si/electric_potential.hpp	/^typedef unit<electric_potential_dimension,si::system>    electric_potential;$/;"	t	namespace:boost::units::si
boost::units::si::energy	/usr/include/boost/units/systems/si/energy.hpp	/^typedef unit<energy_dimension,si::system>    energy;$/;"	t	namespace:boost::units::si
boost::units::si::force	/usr/include/boost/units/systems/si/force.hpp	/^typedef unit<force_dimension,si::system>     force;$/;"	t	namespace:boost::units::si
boost::units::si::frequency	/usr/include/boost/units/systems/si/frequency.hpp	/^typedef unit<frequency_dimension,si::system>     frequency;$/;"	t	namespace:boost::units::si
boost::units::si::illuminance	/usr/include/boost/units/systems/si/illuminance.hpp	/^typedef unit<illuminance_dimension,si::system>      illuminance;$/;"	t	namespace:boost::units::si
boost::units::si::impedance	/usr/include/boost/units/systems/si/impedance.hpp	/^typedef unit<impedance_dimension,si::system>    impedance;$/;"	t	namespace:boost::units::si
boost::units::si::inductance	/usr/include/boost/units/systems/si/inductance.hpp	/^typedef unit<inductance_dimension,si::system>    inductance;$/;"	t	namespace:boost::units::si
boost::units::si::kelvin_base_unit	/usr/include/boost/units/base_units/si/kelvin.hpp	/^struct kelvin_base_unit : public base_unit<kelvin_base_unit, temperature_dimension, -5>$/;"	s	namespace:boost::units::si	inherits:base_unit
boost::units::si::kelvin_base_unit::name	/usr/include/boost/units/base_units/si/kelvin.hpp	/^    static std::string name()   { return("kelvin"); }$/;"	f	struct:boost::units::si::kelvin_base_unit	access:public	signature:()
boost::units::si::kelvin_base_unit::symbol	/usr/include/boost/units/base_units/si/kelvin.hpp	/^    static std::string symbol() { return("K"); }$/;"	f	struct:boost::units::si::kelvin_base_unit	access:public	signature:()
boost::units::si::kilogram_base_unit	/usr/include/boost/units/base_units/si/kilogram.hpp	/^typedef scaled_base_unit<boost::units::cgs::gram_base_unit, scale<10, static_rational<3> > > kilogram_base_unit;$/;"	t	namespace:boost::units::si
boost::units::si::kinematic_viscosity	/usr/include/boost/units/systems/si/kinematic_viscosity.hpp	/^typedef unit<kinematic_viscosity_dimension,si::system>     kinematic_viscosity;$/;"	t	namespace:boost::units::si
boost::units::si::length	/usr/include/boost/units/systems/si/length.hpp	/^typedef unit<length_dimension,si::system>    length;$/;"	t	namespace:boost::units::si
boost::units::si::luminous_flux	/usr/include/boost/units/systems/si/luminous_flux.hpp	/^typedef unit<luminous_flux_dimension,si::system>      luminous_flux;$/;"	t	namespace:boost::units::si
boost::units::si::luminous_intensity	/usr/include/boost/units/systems/si/luminous_intensity.hpp	/^typedef unit<luminous_intensity_dimension,si::system>      luminous_intensity;$/;"	t	namespace:boost::units::si
boost::units::si::magnetic_field_intensity	/usr/include/boost/units/systems/si/magnetic_field_intensity.hpp	/^typedef unit<magnetic_field_intensity_dimension,si::system>    magnetic_field_intensity;$/;"	t	namespace:boost::units::si
boost::units::si::magnetic_flux	/usr/include/boost/units/systems/si/magnetic_flux.hpp	/^typedef unit<magnetic_flux_dimension,si::system>    magnetic_flux;$/;"	t	namespace:boost::units::si
boost::units::si::magnetic_flux_density	/usr/include/boost/units/systems/si/magnetic_flux_density.hpp	/^typedef unit<magnetic_flux_density_dimension,si::system>    magnetic_flux_density;$/;"	t	namespace:boost::units::si
boost::units::si::mass	/usr/include/boost/units/systems/si/mass.hpp	/^typedef unit<mass_dimension,si::system>      mass;$/;"	t	namespace:boost::units::si
boost::units::si::mass_density	/usr/include/boost/units/systems/si/mass_density.hpp	/^typedef unit<mass_density_dimension,si::system>  mass_density;$/;"	t	namespace:boost::units::si
boost::units::si::meter_base_unit	/usr/include/boost/units/base_units/si/meter.hpp	/^struct meter_base_unit : public base_unit<meter_base_unit, length_dimension, -9>$/;"	s	namespace:boost::units::si	inherits:base_unit
boost::units::si::meter_base_unit::name	/usr/include/boost/units/base_units/si/meter.hpp	/^    static std::string name()   { return("meter"); }$/;"	f	struct:boost::units::si::meter_base_unit	access:public	signature:()
boost::units::si::meter_base_unit::symbol	/usr/include/boost/units/base_units/si/meter.hpp	/^    static std::string symbol() { return("m"); }$/;"	f	struct:boost::units::si::meter_base_unit	access:public	signature:()
boost::units::si::mole_base_unit	/usr/include/boost/units/base_units/si/mole.hpp	/^struct mole_base_unit : public base_unit<mole_base_unit, amount_dimension, -4>$/;"	s	namespace:boost::units::si	inherits:base_unit
boost::units::si::mole_base_unit::name	/usr/include/boost/units/base_units/si/mole.hpp	/^    static std::string name()   { return("mole"); }$/;"	f	struct:boost::units::si::mole_base_unit	access:public	signature:()
boost::units::si::mole_base_unit::symbol	/usr/include/boost/units/base_units/si/mole.hpp	/^    static std::string symbol() { return("mol"); }$/;"	f	struct:boost::units::si::mole_base_unit	access:public	signature:()
boost::units::si::moment_of_inertia	/usr/include/boost/units/systems/si/moment_of_inertia.hpp	/^typedef unit<moment_of_inertia_dimension,si::system>      moment_of_inertia;$/;"	t	namespace:boost::units::si
boost::units::si::momentum	/usr/include/boost/units/systems/si/momentum.hpp	/^typedef unit<momentum_dimension,si::system>  momentum;$/;"	t	namespace:boost::units::si
boost::units::si::permeability	/usr/include/boost/units/systems/si/permeability.hpp	/^typedef unit<permeability_dimension,si::system>    permeability;$/;"	t	namespace:boost::units::si
boost::units::si::permittivity	/usr/include/boost/units/systems/si/permittivity.hpp	/^typedef unit<permittivity_dimension,si::system>    permittivity;$/;"	t	namespace:boost::units::si
boost::units::si::plane_angle	/usr/include/boost/units/systems/si/plane_angle.hpp	/^typedef unit<plane_angle_dimension,si::system>      plane_angle;$/;"	t	namespace:boost::units::si
boost::units::si::power	/usr/include/boost/units/systems/si/power.hpp	/^typedef unit<power_dimension,si::system>     power;$/;"	t	namespace:boost::units::si
boost::units::si::pressure	/usr/include/boost/units/systems/si/pressure.hpp	/^typedef unit<pressure_dimension,si::system>      pressure;$/;"	t	namespace:boost::units::si
boost::units::si::reluctance	/usr/include/boost/units/systems/si/reluctance.hpp	/^typedef unit<reluctance_dimension,si::system>    reluctance;$/;"	t	namespace:boost::units::si
boost::units::si::resistance	/usr/include/boost/units/systems/si/resistance.hpp	/^typedef unit<resistance_dimension,si::system>    resistance;$/;"	t	namespace:boost::units::si
boost::units::si::resistivity	/usr/include/boost/units/systems/si/resistivity.hpp	/^typedef unit<resistivity_dimension,si::system>    resistivity;$/;"	t	namespace:boost::units::si
boost::units::si::second_base_unit	/usr/include/boost/units/base_units/si/second.hpp	/^struct second_base_unit : public base_unit<second_base_unit, time_dimension, -7>$/;"	s	namespace:boost::units::si	inherits:base_unit
boost::units::si::second_base_unit::name	/usr/include/boost/units/base_units/si/second.hpp	/^    static std::string name()   { return("second"); }$/;"	f	struct:boost::units::si::second_base_unit	access:public	signature:()
boost::units::si::second_base_unit::symbol	/usr/include/boost/units/base_units/si/second.hpp	/^    static std::string symbol() { return("s"); }$/;"	f	struct:boost::units::si::second_base_unit	access:public	signature:()
boost::units::si::solid_angle	/usr/include/boost/units/systems/si/solid_angle.hpp	/^typedef unit<solid_angle_dimension,si::system>      solid_angle;$/;"	t	namespace:boost::units::si
boost::units::si::surface_density	/usr/include/boost/units/systems/si/surface_density.hpp	/^typedef unit<surface_density_dimension,si::system>  surface_density;$/;"	t	namespace:boost::units::si
boost::units::si::surface_tension	/usr/include/boost/units/systems/si/surface_tension.hpp	/^typedef unit<surface_tension_dimension,si::system>     surface_tension;$/;"	t	namespace:boost::units::si
boost::units::si::system	/usr/include/boost/units/systems/si/base.hpp	/^                    angle::steradian_base_unit>::type system;$/;"	t	namespace:boost::units::si
boost::units::si::temperature	/usr/include/boost/units/systems/si/temperature.hpp	/^typedef unit<temperature_dimension,si::system>   temperature;$/;"	t	namespace:boost::units::si
boost::units::si::time	/usr/include/boost/units/systems/si/time.hpp	/^typedef unit<time_dimension,si::system>      time;$/;"	t	namespace:boost::units::si
boost::units::si::torque	/usr/include/boost/units/systems/si/torque.hpp	/^typedef unit<torque_dimension,si::system>     torque;$/;"	t	namespace:boost::units::si
boost::units::si::velocity	/usr/include/boost/units/systems/si/velocity.hpp	/^typedef unit<velocity_dimension,si::system>      velocity;$/;"	t	namespace:boost::units::si
boost::units::si::volume	/usr/include/boost/units/systems/si/volume.hpp	/^typedef unit<volume_dimension,si::system>    volume;$/;"	t	namespace:boost::units::si
boost::units::si::wavenumber	/usr/include/boost/units/systems/si/wavenumber.hpp	/^typedef unit<wavenumber_dimension,si::system>    wavenumber;$/;"	t	namespace:boost::units::si
boost::units::simplify_typename	/usr/include/boost/units/detail/utility.hpp	/^std::string simplify_typename(const L& \/*source*\/)$/;"	f	namespace:boost::units	signature:(const L& )
boost::units::sin	/usr/include/boost/units/cmath.hpp	/^sin(const quantity<si::plane_angle,Y>& theta)$/;"	f	namespace:boost::units	signature:(const quantity<si::plane_angle,Y>& theta)
boost::units::sin	/usr/include/boost/units/cmath.hpp	/^sin(const quantity<unit<plane_angle_dimension,System>,Y>& theta)$/;"	f	namespace:boost::units	signature:(const quantity<unit<plane_angle_dimension,System>,Y>& theta)
boost::units::solid_angle_base_dimension	/usr/include/boost/units/physical_dimensions/solid_angle.hpp	/^struct solid_angle_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
boost::units::solid_angle_dimension	/usr/include/boost/units/physical_dimensions/solid_angle.hpp	/^typedef solid_angle_base_dimension::dimension_type    solid_angle_dimension;$/;"	t	namespace:boost::units
boost::units::specific_energy_dimension	/usr/include/boost/units/physical_dimensions/specific_energy.hpp	/^                          time_base_dimension,-2>::type specific_energy_dimension;                    $/;"	t	namespace:boost::units
boost::units::specific_heat_capacity_dimension	/usr/include/boost/units/physical_dimensions/specific_heat_capacity.hpp	/^                          temperature_base_dimension,-1>::type specific_heat_capacity_dimension;                    $/;"	t	namespace:boost::units
boost::units::specific_volume_dimension	/usr/include/boost/units/physical_dimensions/specific_volume.hpp	/^                          mass_base_dimension,-1>::type specific_volume_dimension;            $/;"	t	namespace:boost::units
boost::units::sqrt	/usr/include/boost/units/cmath.hpp	/^sqrt(const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
boost::units::static_abs	/usr/include/boost/units/static_rational.hpp	/^struct static_abs$/;"	s	namespace:boost::units
boost::units::static_abs::BOOST_STATIC_CONSTANT	/usr/include/boost/units/static_rational.hpp	/^    BOOST_STATIC_CONSTANT(integer_type,value = Value < 0 ? -Value : Value);$/;"	p	struct:boost::units::static_abs	access:public	signature:(integer_type,value = Value < 0 ? -Value : Value)
boost::units::static_power	/usr/include/boost/units/dimension.hpp	/^struct static_power$/;"	s	namespace:boost::units
boost::units::static_power	/usr/include/boost/units/heterogeneous_system.hpp	/^struct static_power<heterogeneous_system<S>, static_rational<N,D> >$/;"	s	namespace:boost::units
boost::units::static_power	/usr/include/boost/units/homogeneous_system.hpp	/^struct static_power<homogeneous_system<L>, static_rational<N,D> >$/;"	s	namespace:boost::units
boost::units::static_power::type	/usr/include/boost/units/dimension.hpp	/^    >::type type;    $/;"	t	struct:boost::units::static_power	access:public
boost::units::static_power::type	/usr/include/boost/units/heterogeneous_system.hpp	/^    > type;$/;"	t	struct:boost::units::static_power	access:public
boost::units::static_power::type	/usr/include/boost/units/homogeneous_system.hpp	/^    typedef homogeneous_system<L> type;$/;"	t	struct:boost::units::static_power	access:public
boost::units::static_rational	/usr/include/boost/units/static_rational.hpp	/^class static_rational$/;"	c	namespace:boost::units
boost::units::static_rational::BOOST_STATIC_CONSTANT	/usr/include/boost/units/static_rational.hpp	/^        BOOST_STATIC_CONSTANT(integer_type, Denominator =$/;"	p	class:boost::units::static_rational	access:public	signature:(integer_type, Denominator = (::boost::mpl::divides<D_type, den_type>::value))
boost::units::static_rational::BOOST_STATIC_CONSTANT	/usr/include/boost/units/static_rational.hpp	/^        BOOST_STATIC_CONSTANT(integer_type, Numerator =$/;"	p	class:boost::units::static_rational	access:public	signature:(integer_type, Numerator = (::boost::mpl::divides<N_type, den_type>::value))
boost::units::static_rational::D_type	/usr/include/boost/units/static_rational.hpp	/^        typedef boost::mpl::integral_c<integer_type, D> D_type;$/;"	t	class:boost::units::static_rational	access:public
boost::units::static_rational::Denominator	/usr/include/boost/units/static_rational.hpp	/^            Denominator = D\/den;$/;"	m	class:boost::units::static_rational	access:public
boost::units::static_rational::N_type	/usr/include/boost/units/static_rational.hpp	/^        typedef boost::mpl::integral_c<integer_type, N> N_type;$/;"	t	class:boost::units::static_rational	access:public
boost::units::static_rational::Numerator	/usr/include/boost/units/static_rational.hpp	/^        static const integer_type   Numerator = N\/den,$/;"	m	class:boost::units::static_rational	access:public
boost::units::static_rational::dabs	/usr/include/boost/units/static_rational.hpp	/^                                    dabs = static_abs<D>::value;$/;"	m	class:boost::units::static_rational	access:private
boost::units::static_rational::den	/usr/include/boost/units/static_rational.hpp	/^        static const integer_type   den = $/;"	m	class:boost::units::static_rational	access:private
boost::units::static_rational::den_type	/usr/include/boost/units/static_rational.hpp	/^        >::type den_type;$/;"	t	class:boost::units::static_rational	access:public
boost::units::static_rational::denominator	/usr/include/boost/units/static_rational.hpp	/^        static integer_type denominator()    { return Denominator; }$/;"	f	class:boost::units::static_rational	access:public	signature:()
boost::units::static_rational::gcd_type	/usr/include/boost/units/static_rational.hpp	/^            >::value)>::type gcd_type;$/;"	t	class:boost::units::static_rational	access:public
boost::units::static_rational::nabs	/usr/include/boost/units/static_rational.hpp	/^        static const integer_type   nabs = static_abs<N>::value,$/;"	m	class:boost::units::static_rational	access:private
boost::units::static_rational::numerator	/usr/include/boost/units/static_rational.hpp	/^        static integer_type numerator()      { return Numerator; }$/;"	f	class:boost::units::static_rational	access:public	signature:()
boost::units::static_rational::static_rational	/usr/include/boost/units/static_rational.hpp	/^        static_rational() { }$/;"	f	class:boost::units::static_rational	access:public	signature:()
boost::units::static_rational::tag	/usr/include/boost/units/static_rational.hpp	/^        typedef detail::static_rational_tag tag;$/;"	t	class:boost::units::static_rational	access:public
boost::units::static_rational::this_type	/usr/include/boost/units/static_rational.hpp	/^        typedef static_rational this_type;$/;"	t	class:boost::units::static_rational	access:public
boost::units::static_rational::this_type	/usr/include/boost/units/static_rational.hpp	/^        typedef static_rational<N,D>    this_type;$/;"	t	class:boost::units::static_rational	access:public
boost::units::static_rational::type	/usr/include/boost/units/static_rational.hpp	/^        >  type;$/;"	t	class:boost::units::static_rational	access:public
boost::units::static_rational::type	/usr/include/boost/units/static_rational.hpp	/^        typedef static_rational<Numerator,Denominator>  type;$/;"	t	class:boost::units::static_rational	access:public
boost::units::static_root	/usr/include/boost/units/dimension.hpp	/^struct static_root$/;"	s	namespace:boost::units
boost::units::static_root	/usr/include/boost/units/heterogeneous_system.hpp	/^struct static_root<heterogeneous_system<S>, static_rational<N,D> >$/;"	s	namespace:boost::units
boost::units::static_root	/usr/include/boost/units/homogeneous_system.hpp	/^struct static_root<homogeneous_system<L>, static_rational<N,D> >$/;"	s	namespace:boost::units
boost::units::static_root::type	/usr/include/boost/units/dimension.hpp	/^    >::type type;    $/;"	t	struct:boost::units::static_root	access:public
boost::units::static_root::type	/usr/include/boost/units/heterogeneous_system.hpp	/^    > type;$/;"	t	struct:boost::units::static_root	access:public
boost::units::static_root::type	/usr/include/boost/units/homogeneous_system.hpp	/^    typedef homogeneous_system<L> type;$/;"	t	struct:boost::units::static_root	access:public
boost::units::stress_dimension	/usr/include/boost/units/physical_dimensions/stress.hpp	/^                          time_base_dimension,-2>::type stress_dimension;     $/;"	t	namespace:boost::units
boost::units::subtract_typeof_helper	/usr/include/boost/units/operators.hpp	/^template<typename X,typename Y> struct subtract_typeof_helper   $/;"	s	namespace:boost::units
boost::units::subtract_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct subtract_typeof_helper< quantity<Unit1,X>,quantity<Unit2,Y> >$/;"	s	namespace:boost::units
boost::units::subtract_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct subtract_typeof_helper< quantity<unit<Dim, System>,X>,quantity<unit<Dim, System>,Y> >$/;"	s	namespace:boost::units
boost::units::subtract_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct subtract_typeof_helper< quantity<unit<Dim1, System1>,X>,quantity<unit<Dim2, System2>,Y> >$/;"	s	namespace:boost::units
boost::units::subtract_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct subtract_typeof_helper< unit<Dim,System>,unit<Dim,System> >$/;"	s	namespace:boost::units
boost::units::subtract_typeof_helper::type	/usr/include/boost/units/operators.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
boost::units::subtract_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                      type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
boost::units::subtract_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>              type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
boost::units::subtract_typeof_helper::type	/usr/include/boost/units/unit.hpp	/^    typedef unit<Dim,System>   type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
boost::units::subtract_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename subtract_typeof_helper<Unit1,Unit2>::type  unit_type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
boost::units::subtract_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef unit<Dim, System>                           unit_type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
boost::units::subtract_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename subtract_typeof_helper<X,Y>::type          value_type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
boost::units::subtract_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename subtract_typeof_helper<X,Y>::type  value_type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
boost::units::surface_density_dimension	/usr/include/boost/units/physical_dimensions/surface_density.hpp	/^                          mass_base_dimension,1>::type surface_density_dimension;$/;"	t	namespace:boost::units
boost::units::surface_tension_dimension	/usr/include/boost/units/physical_dimensions/surface_tension.hpp	/^                          time_base_dimension,-2>::type surface_tension_dimension;                    $/;"	t	namespace:boost::units
boost::units::swap	/usr/include/boost/units/quantity.hpp	/^inline void swap(quantity<Unit,Y>& lhs, quantity<Unit,Y>& rhs)$/;"	f	namespace:boost::units	signature:(quantity<Unit,Y>& lhs, quantity<Unit,Y>& rhs)
boost::units::symbol_fmt	/usr/include/boost/units/io.hpp	/^    symbol_fmt = 0,     \/\/\/ default - reduces unit names to known symbols for both base and derived units.$/;"	e	enum:boost::units::format_mode
boost::units::symbol_format	/usr/include/boost/units/io.hpp	/^inline std::ios_base& symbol_format(std::ios_base& ios) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
boost::units::symbol_string	/usr/include/boost/units/io.hpp	/^symbol_string(const unit<Dimension, System>&)$/;"	f	namespace:boost::units	signature:(const unit<Dimension, System>&)
boost::units::symbol_string	/usr/include/boost/units/scale.hpp	/^std::string symbol_string(const scale<Base,Exponent>&)$/;"	f	namespace:boost::units	signature:(const scale<Base,Exponent>&)
boost::units::symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::acceleration>::type&) { return "Gal"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::acceleration>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::current>::type&) { return "Bi"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::current>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::dynamic_viscosity>::type&) { return "P"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::dynamic_viscosity>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::energy>::type&) { return "erg"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::energy>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::force>::type&) { return "dyn"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::force>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::kinematic_viscosity>::type&) { return "St"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::kinematic_viscosity>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::pressure>::type&) { return "Ba"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::pressure>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::wavenumber>::type&) { return "K"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::wavenumber>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::absorbed_dose>::type&) { return "Gy"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::absorbed_dose>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::capacitance>::type&) { return "F"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::capacitance>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::catalytic_activity>::type&) { return "kat"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::catalytic_activity>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::conductance>::type&) { return "S"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::conductance>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::electric_charge>::type&) { return "C"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::electric_charge>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::electric_potential>::type&) { return "V"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::electric_potential>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::energy>::type&) { return "J"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::energy>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::force>::type&) { return "N"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::force>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::frequency>::type&) { return "Hz"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::frequency>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::illuminance>::type&) { return "lx"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::illuminance>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::inductance>::type&) { return "H"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::inductance>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::luminous_flux>::type&) { return "lm"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::luminous_flux>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::magnetic_flux>::type&) { return "Wb"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::magnetic_flux>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::magnetic_flux_density>::type&) { return "T"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::magnetic_flux_density>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::power>::type&) { return "W"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::power>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::pressure>::type&) { return "Pa"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::pressure>::type&)
boost::units::symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::resistance>::type&) { return "Ohm"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::resistance>::type&)
boost::units::symbol_string	/usr/include/boost/units/units_fwd.hpp	/^template<class T> std::string symbol_string(const T&);$/;"	p	namespace:boost::units	signature:(const T&)
boost::units::tan	/usr/include/boost/units/cmath.hpp	/^tan(const quantity<si::plane_angle,Y>& theta)$/;"	f	namespace:boost::units	signature:(const quantity<si::plane_angle,Y>& theta)
boost::units::tan	/usr/include/boost/units/cmath.hpp	/^tan(const quantity<unit<plane_angle_dimension,System>,Y>& theta)$/;"	f	namespace:boost::units	signature:(const quantity<unit<plane_angle_dimension,System>,Y>& theta)
boost::units::temperature	/usr/include/boost/units/base_units/temperature/celsius.hpp	/^namespace temperature {$/;"	n	namespace:boost::units
boost::units::temperature	/usr/include/boost/units/base_units/temperature/fahrenheit.hpp	/^namespace temperature {$/;"	n	namespace:boost::units
boost::units::temperature::celsius_base_unit	/usr/include/boost/units/base_units/temperature/celsius.hpp	/^struct celsius_base_unit : public base_unit<celsius_base_unit, temperature_dimension, -1008>$/;"	s	namespace:boost::units::temperature	inherits:base_unit
boost::units::temperature::celsius_base_unit::name	/usr/include/boost/units/base_units/temperature/celsius.hpp	/^    static std::string name()   { return("celsius"); }$/;"	f	struct:boost::units::temperature::celsius_base_unit	access:public	signature:()
boost::units::temperature::celsius_base_unit::symbol	/usr/include/boost/units/base_units/temperature/celsius.hpp	/^    static std::string symbol() { return("C"); }$/;"	f	struct:boost::units::temperature::celsius_base_unit	access:public	signature:()
boost::units::temperature::fahrenheit_base_unit	/usr/include/boost/units/base_units/temperature/fahrenheit.hpp	/^struct fahrenheit_base_unit : public base_unit<fahrenheit_base_unit, temperature_dimension, -1007>$/;"	s	namespace:boost::units::temperature	inherits:base_unit
boost::units::temperature::fahrenheit_base_unit::name	/usr/include/boost/units/base_units/temperature/fahrenheit.hpp	/^    static std::string name()   { return("fahrenheit"); }$/;"	f	struct:boost::units::temperature::fahrenheit_base_unit	access:public	signature:()
boost::units::temperature::fahrenheit_base_unit::symbol	/usr/include/boost/units/base_units/temperature/fahrenheit.hpp	/^    static std::string symbol() { return("F"); }$/;"	f	struct:boost::units::temperature::fahrenheit_base_unit	access:public	signature:()
boost::units::temperature_base_dimension	/usr/include/boost/units/physical_dimensions/temperature.hpp	/^struct temperature_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
boost::units::temperature_dimension	/usr/include/boost/units/physical_dimensions/temperature.hpp	/^typedef temperature_base_dimension::dimension_type temperature_dimension;$/;"	t	namespace:boost::units
boost::units::thermal_conductivity_dimension	/usr/include/boost/units/physical_dimensions/thermal_conductivity.hpp	/^                          temperature_base_dimension,-1>::type thermal_conductivity_dimension;                    $/;"	t	namespace:boost::units
boost::units::time_base_dimension	/usr/include/boost/units/physical_dimensions/time.hpp	/^struct time_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
boost::units::time_dimension	/usr/include/boost/units/physical_dimensions/time.hpp	/^typedef time_base_dimension::dimension_type time_dimension;$/;"	t	namespace:boost::units
boost::units::to_string	/usr/include/boost/units/io.hpp	/^template<class T> std::string to_string(const T& t)$/;"	f	namespace:boost::units	signature:(const T& t)
boost::units::to_string	/usr/include/boost/units/io.hpp	/^template<integer_type N, integer_type D> std::string to_string(const static_rational<N,D>&)$/;"	f	namespace:boost::units	signature:(const static_rational<N,D>&)
boost::units::to_string	/usr/include/boost/units/io.hpp	/^template<integer_type N> std::string to_string(const static_rational<N>&)$/;"	f	namespace:boost::units	signature:(const static_rational<N>&)
boost::units::to_string	/usr/include/boost/units/units_fwd.hpp	/^template<class T> std::string to_string(const T&);$/;"	p	namespace:boost::units	signature:(const T&)
boost::units::torque_dimension	/usr/include/boost/units/physical_dimensions/torque.hpp	/^                          plane_angle_base_dimension,-1>::type torque_dimension;                    $/;"	t	namespace:boost::units
boost::units::typename_fmt	/usr/include/boost/units/io.hpp	/^    typename_fmt = 3,       \/\/\/ output demangled typenames (useful only for diagnosis).$/;"	e	enum:boost::units::format_mode
boost::units::typename_format	/usr/include/boost/units/io.hpp	/^inline std::ios_base& typename_format(std::ios_base& ios) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
boost::units::typename_string	/usr/include/boost/units/io.hpp	/^typename_string(const unit<Dimension, System>&)$/;"	f	namespace:boost::units	signature:(const unit<Dimension, System>&)
boost::units::typename_string	/usr/include/boost/units/units_fwd.hpp	/^template<class T> std::string typename_string(const T&);$/;"	p	namespace:boost::units	signature:(const T&)
boost::units::typeof_	/usr/include/boost/units/operators.hpp	/^namespace typeof_ {$/;"	n	namespace:boost::units
boost::units::typeof_::make	/usr/include/boost/units/operators.hpp	/^template<class T> T make();$/;"	p	namespace:boost::units::typeof_	signature:()
boost::units::unary_minus_typeof_helper	/usr/include/boost/units/operators.hpp	/^template<typename X> struct unary_minus_typeof_helper           $/;"	s	namespace:boost::units
boost::units::unary_minus_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct unary_minus_typeof_helper< quantity<Unit,Y> >$/;"	s	namespace:boost::units
boost::units::unary_minus_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct unary_minus_typeof_helper< unit<Dim,System> >$/;"	s	namespace:boost::units
boost::units::unary_minus_typeof_helper::type	/usr/include/boost/units/operators.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::unary_minus_typeof_helper	access:public
boost::units::unary_minus_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                  type;$/;"	t	struct:boost::units::unary_minus_typeof_helper	access:public
boost::units::unary_minus_typeof_helper::type	/usr/include/boost/units/unit.hpp	/^    typedef unit<Dim,System>    type;$/;"	t	struct:boost::units::unary_minus_typeof_helper	access:public
boost::units::unary_minus_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename unary_minus_typeof_helper<Unit>::type  unit_type;$/;"	t	struct:boost::units::unary_minus_typeof_helper	access:public
boost::units::unary_minus_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename unary_minus_typeof_helper<Y>::type     value_type;$/;"	t	struct:boost::units::unary_minus_typeof_helper	access:public
boost::units::unary_plus_typeof_helper	/usr/include/boost/units/operators.hpp	/^template<typename X> struct unary_plus_typeof_helper            $/;"	s	namespace:boost::units
boost::units::unary_plus_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct unary_plus_typeof_helper< quantity<Unit,Y> >$/;"	s	namespace:boost::units
boost::units::unary_plus_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct unary_plus_typeof_helper< unit<Dim,System> >$/;"	s	namespace:boost::units
boost::units::unary_plus_typeof_helper::type	/usr/include/boost/units/operators.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::unary_plus_typeof_helper	access:public
boost::units::unary_plus_typeof_helper::type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                  type;$/;"	t	struct:boost::units::unary_plus_typeof_helper	access:public
boost::units::unary_plus_typeof_helper::type	/usr/include/boost/units/unit.hpp	/^    typedef unit<Dim,System>    type;$/;"	t	struct:boost::units::unary_plus_typeof_helper	access:public
boost::units::unary_plus_typeof_helper::unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename unary_plus_typeof_helper<Unit>::type   unit_type;$/;"	t	struct:boost::units::unary_plus_typeof_helper	access:public
boost::units::unary_plus_typeof_helper::value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename unary_plus_typeof_helper<Y>::type      value_type;$/;"	t	struct:boost::units::unary_plus_typeof_helper	access:public
boost::units::undefined_base_unit_converter_base	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct undefined_base_unit_converter_base {$/;"	s	namespace:boost::units
boost::units::undefined_base_unit_converter_base::is_defined	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static const bool is_defined = false;$/;"	m	struct:boost::units::undefined_base_unit_converter_base	access:public
boost::units::unit	/usr/include/boost/units/unit.hpp	/^class unit$/;"	c	namespace:boost::units
boost::units::unit::BOOST_MPL_ASSERT	/usr/include/boost/units/unit.hpp	/^        BOOST_MPL_ASSERT((detail::check_system<System, Dim>));$/;"	p	class:boost::units::unit	access:private	signature:(detail::check_system<System, Dim>)
boost::units::unit::BOOST_MPL_ASSERT	/usr/include/boost/units/unit.hpp	/^        BOOST_MPL_ASSERT((is_dimension_list<Dim>));$/;"	p	class:boost::units::unit	access:private	signature:(is_dimension_list<Dim>)
boost::units::unit::dimension_type	/usr/include/boost/units/unit.hpp	/^        typedef Dim                 dimension_type; $/;"	t	class:boost::units::unit	access:public
boost::units::unit::operator =	/usr/include/boost/units/unit.hpp	/^        this_type& operator=(const this_type&) { return *this; }$/;"	f	class:boost::units::unit	access:public	signature:(const this_type&)
boost::units::unit::system_type	/usr/include/boost/units/unit.hpp	/^        typedef System              system_type;$/;"	t	class:boost::units::unit	access:public
boost::units::unit::this_type	/usr/include/boost/units/unit.hpp	/^        typedef unit<Dim,System>    this_type;$/;"	t	class:boost::units::unit	access:public
boost::units::unit::unit	/usr/include/boost/units/unit.hpp	/^        unit() { }$/;"	f	class:boost::units::unit	access:public	signature:()
boost::units::unit::unit	/usr/include/boost/units/unit.hpp	/^        unit(const this_type&) { }$/;"	f	class:boost::units::unit	access:public	signature:(const this_type&)
boost::units::unit::unit_type	/usr/include/boost/units/unit.hpp	/^        typedef unit<Dim, System>   unit_type;$/;"	t	class:boost::units::unit	access:public
boost::units::unit::~unit	/usr/include/boost/units/unit.hpp	/^        ~unit() {$/;"	f	class:boost::units::unit	access:public	signature:()
boost::units::unscale	/usr/include/boost/units/detail/unscale.hpp	/^struct unscale$/;"	s	namespace:boost::units
boost::units::unscale	/usr/include/boost/units/detail/unscale.hpp	/^struct unscale<scaled_base_unit<S, Scale> >$/;"	s	namespace:boost::units
boost::units::unscale	/usr/include/boost/units/detail/unscale.hpp	/^struct unscale<unit<D, S> >$/;"	s	namespace:boost::units
boost::units::unscale	/usr/include/boost/units/heterogeneous_system.hpp	/^struct unscale<heterogeneous_system<T> >$/;"	s	namespace:boost::units
boost::units::unscale	/usr/include/boost/units/heterogeneous_system.hpp	/^struct unscale<heterogeneous_system_dim<Unit, Exponent> >$/;"	s	namespace:boost::units
boost::units::unscale::type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef T type;$/;"	t	struct:boost::units::unscale	access:public
boost::units::unscale::type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef typename unscale<S>::type type;$/;"	t	struct:boost::units::unscale	access:public
boost::units::unscale::type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef unit<D, typename unscale<S>::type> type;$/;"	t	struct:boost::units::unscale	access:public
boost::units::unscale::type	/usr/include/boost/units/heterogeneous_system.hpp	/^    > type;$/;"	t	struct:boost::units::unscale	access:public
boost::units::unscale::type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef heterogeneous_system_dim<typename unscale<Unit>::type, Exponent> type;$/;"	t	struct:boost::units::unscale	access:public
boost::units::unscaled_get_default_conversion	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct unscaled_get_default_conversion : no_default_conversion { };$/;"	s	namespace:boost::units	inherits:no_default_conversion
boost::units::unscaled_get_default_conversion_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct unscaled_get_default_conversion_impl<false>$/;"	s	namespace:boost::units
boost::units::unscaled_get_default_conversion_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct unscaled_get_default_conversion_impl<true>$/;"	s	namespace:boost::units
boost::units::unscaled_get_default_conversion_impl::apply	/usr/include/boost/units/detail/conversion_impl.hpp	/^    struct apply$/;"	s	struct:boost::units::unscaled_get_default_conversion_impl	access:public
boost::units::unscaled_get_default_conversion_impl::apply::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename T::unit_type type;$/;"	t	struct:boost::units::unscaled_get_default_conversion_impl::apply	access:public
boost::units::unscaled_get_default_conversion_impl::apply::type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename unscaled_get_default_conversion<typename unscale<T>::type>::type type;$/;"	t	struct:boost::units::unscaled_get_default_conversion_impl::apply	access:public
boost::units::us	/usr/include/boost/units/base_units/us/cup.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/dram.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/foot.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/gallon.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/gill.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/grain.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/inch.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/mil.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/mile.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/minim.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/ounce.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/quart.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us	/usr/include/boost/units/base_units/us/ton.hpp	/^namespace us {$/;"	n	namespace:boost::units
boost::units::us::cup_base_unit	/usr/include/boost/units/base_units/us/cup.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<-1> > > cup_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::dram_base_unit	/usr/include/boost/units/base_units/us/dram.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<16, static_rational<-2> > > dram_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::fluid_dram_base_unit	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<-7> > > fluid_dram_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::fluid_ounce_base_unit	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<16, static_rational<-1> > > fluid_ounce_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::foot_base_unit	/usr/include/boost/units/base_units/us/foot.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<3, static_rational<-1> > > foot_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::gallon_base_unit	/usr/include/boost/units/base_units/us/gallon.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<3> > > gallon_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::gill_base_unit	/usr/include/boost/units/base_units/us/gill.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<-2> > > gill_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::grain_base_unit	/usr/include/boost/units/base_units/us/grain.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<7000, static_rational<-1> > > grain_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::hundredweight_base_unit	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<100, static_rational<1> > > hundredweight_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::inch_base_unit	/usr/include/boost/units/base_units/us/inch.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<36, static_rational<-1> > > inch_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::mil_base_unit	/usr/include/boost/units/base_units/us/mil.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<36000, static_rational<-1> > > mil_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::mile_base_unit	/usr/include/boost/units/base_units/us/mile.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<1760, static_rational<1> > > mile_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::minim_base_unit	/usr/include/boost/units/base_units/us/minim.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<7680, static_rational<-1> > > minim_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::ounce_base_unit	/usr/include/boost/units/base_units/us/ounce.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<2, static_rational<-4> > > ounce_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::quart_base_unit	/usr/include/boost/units/base_units/us/quart.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<1> > > quart_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::tablespoon_base_unit	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<-5> > > tablespoon_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::teaspoon_base_unit	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<96, static_rational<-1> > > teaspoon_base_unit;$/;"	t	namespace:boost::units::us
boost::units::us::ton_base_unit	/usr/include/boost/units/base_units/us/ton.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<2000, static_rational<1> > > ton_base_unit;$/;"	t	namespace:boost::units::us
boost::units::value	/usr/include/boost/units/static_rational.hpp	/^value(const static_rational<N,D>&)$/;"	f	namespace:boost::units	signature:(const static_rational<N,D>&)
boost::units::velocity_dimension	/usr/include/boost/units/physical_dimensions/velocity.hpp	/^                          time_base_dimension,-1>::type velocity_dimension;                $/;"	t	namespace:boost::units
boost::units::volume_dimension	/usr/include/boost/units/physical_dimensions/volume.hpp	/^typedef derived_dimension<length_base_dimension,3>::type volume_dimension;$/;"	t	namespace:boost::units
boost::units::wavenumber_dimension	/usr/include/boost/units/physical_dimensions/wavenumber.hpp	/^typedef derived_dimension<length_base_dimension,-1>::type wavenumber_dimension;                 $/;"	t	namespace:boost::units
boost_units_is_base_unit_type	/usr/include/boost/units/base_unit.hpp	/^        typedef void boost_units_is_base_unit_type;$/;"	t	class:boost::units::base_unit	access:public
boost_units_is_base_unit_type	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef void boost_units_is_base_unit_type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
boost_units_is_registered	/usr/include/boost/units/base_dimension.hpp	/^        boost_units_is_registered(const units::base_dimension_ordinal<N>&) $/;"	f	class:boost::units::base_dimension	access:friend	signature:(const units::base_dimension_ordinal<N>&)
boost_units_is_registered	/usr/include/boost/units/base_dimension.hpp	/^        boost_units_is_registered(const units::base_dimension_pair<Derived, N>&) $/;"	f	class:boost::units::base_dimension	access:friend	signature:(const units::base_dimension_pair<Derived, N>&)
boost_units_is_registered	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^boost_units_is_registered(const T&) $/;"	f	namespace:boost::units	signature:(const T&)
boost_units_unit_is_registered	/usr/include/boost/units/base_unit.hpp	/^        boost_units_unit_is_registered(const units::base_unit_ordinal<N>&) $/;"	f	class:boost::units::base_unit	access:friend	signature:(const units::base_unit_ordinal<N>&)
boost_units_unit_is_registered	/usr/include/boost/units/base_unit.hpp	/^        boost_units_unit_is_registered(const units::base_unit_pair<Derived, N>&) $/;"	f	class:boost::units::base_unit	access:friend	signature:(const units::base_unit_pair<Derived, N>&)
boost_units_unit_is_registered	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^boost_units_unit_is_registered(const T&) $/;"	f	namespace:boost::units	signature:(const T&)
calculate_base_dimension_coefficients_func	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_dimension_coefficients_func<false> {$/;"	s	namespace:boost::units::detail
calculate_base_dimension_coefficients_func	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_dimension_coefficients_func<true> {$/;"	s	namespace:boost::units::detail
calculate_base_dimension_coefficients_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_dimension_coefficients_impl {$/;"	s	namespace:boost::units::detail
calculate_base_dimension_coefficients_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_dimension_coefficients_impl<0> {$/;"	s	namespace:boost::units::detail
calculate_base_unit_exponents	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_unit_exponents {$/;"	s	namespace:boost::units::detail
calculate_base_unit_exponents_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_unit_exponents_impl<false> {$/;"	s	namespace:boost::units::detail
calculate_base_unit_exponents_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct calculate_base_unit_exponents_impl<true> {$/;"	s	namespace:boost::units::detail
call	/usr/include/boost/units/detail/static_rational_power.hpp	/^        static R call(const Y&, const R& r)$/;"	f	struct:boost::units::detail::static_int_power_impl::apply	access:public	signature:(const Y&, const R& r)
call	/usr/include/boost/units/detail/static_rational_power.hpp	/^        static type call(const Y& y, const R& r)$/;"	f	struct:boost::units::detail::static_int_power_impl::apply	access:public	signature:(const Y& y, const R& r)
call	/usr/include/boost/units/detail/static_rational_power.hpp	/^    static one call(const one&)$/;"	f	struct:boost::units::detail::static_rational_power_impl	access:public	signature:(const one&)
call	/usr/include/boost/units/detail/static_rational_power.hpp	/^    static type call(const Y& y)$/;"	f	struct:boost::units::detail::static_rational_power_impl	access:public	signature:(const Y& y)
call_base_unit_converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter : call_base_unit_converter_impl<BOOST_UNITS_DETAIL_BASE_UNIT_CONVERTER_IS_DEFINED(Source, Dest)>::template apply<Source, Dest>$/;"	s	namespace:boost::units::detail	inherits:call_base_unit_converter_impl::,apply
call_base_unit_converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter<Source, BOOST_UNITS_MAKE_HETEROGENEOUS_UNIT(Dest, typename Source::dimension_type)> :$/;"	s	namespace:boost::units::detail	inherits:call_base_unit_converter_base_unit_impl::,apply
call_base_unit_converter_base_unit_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter_base_unit_impl<false, false>$/;"	s	namespace:boost::units::detail
call_base_unit_converter_base_unit_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter_base_unit_impl<false, true>$/;"	s	namespace:boost::units::detail
call_base_unit_converter_base_unit_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter_base_unit_impl<true, false>$/;"	s	namespace:boost::units::detail
call_base_unit_converter_base_unit_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter_base_unit_impl<true, true>$/;"	s	namespace:boost::units::detail
call_base_unit_converter_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter_impl<false>$/;"	s	namespace:boost::units::detail
call_base_unit_converter_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct call_base_unit_converter_impl<true>$/;"	s	namespace:boost::units::detail
candela_base_unit	/usr/include/boost/units/base_units/si/candela.hpp	/^struct candela_base_unit : public base_unit<candela_base_unit, luminous_intensity_dimension, -3>$/;"	s	namespace:boost::units::si	inherits:base_unit
capacitance	/usr/include/boost/units/systems/si/capacitance.hpp	/^typedef unit<capacitance_dimension,si::system>    capacitance;$/;"	t	namespace:boost::units::si
capacitance_dimension	/usr/include/boost/units/physical_dimensions/capacitance.hpp	/^                          current_base_dimension,2>::type capacitance_dimension;            $/;"	t	namespace:boost::units
capacitance_over_length	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<capacitance,length>::type capacitance_over_length;$/;"	t	namespace:boost::units::si::constants::codata
catalytic_activity	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^typedef unit<si::catalytic_activity_dim,si::system>                                    catalytic_activity;$/;"	t	namespace:boost::units::si
catalytic_activity_dim	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^typedef derived_dimension<time_base_dimension,-1,amount_base_dimension,1>::type                             catalytic_activity_dim;    $/;"	t	namespace:boost::units::si
celsius	/usr/include/boost/units/systems/temperature/celsius.hpp	/^namespace celsius {$/;"	n	namespace:boost::units
celsius_base_unit	/usr/include/boost/units/base_units/temperature/celsius.hpp	/^struct celsius_base_unit : public base_unit<celsius_base_unit, temperature_dimension, -1008>$/;"	s	namespace:boost::units::temperature	inherits:base_unit
centimeter_base_unit	/usr/include/boost/units/base_units/cgs/centimeter.hpp	/^typedef scaled_base_unit<boost::units::si::meter_base_unit, scale<10, static_rational<-2> > > centimeter_base_unit;$/;"	t	namespace:boost::units::cgs
cgs	/usr/include/boost/units/base_units/cgs/biot.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/base_units/cgs/centimeter.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/base_units/cgs/gram.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/acceleration.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/area.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/base.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/current.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/dimensionless.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/dynamic_viscosity.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/energy.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/force.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/frequency.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/kinematic_viscosity.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/length.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/mass.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/mass_density.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/momentum.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/power.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/pressure.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/time.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/velocity.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/volume.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
cgs	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^namespace cgs {$/;"	n	namespace:boost::units
check_base_dimension	/usr/include/boost/units/base_dimension.hpp	/^struct check_base_dimension {$/;"	s	namespace:boost::units
check_base_unit	/usr/include/boost/units/base_unit.hpp	/^struct check_base_unit {$/;"	s	namespace:boost::units
check_double_register	/usr/include/boost/units/base_dimension.hpp	/^        check_double_register(const units::base_dimension_ordinal<N>&) $/;"	f	class:boost::units::base_dimension	access:friend	signature:(const units::base_dimension_ordinal<N>&)
check_double_register	/usr/include/boost/units/base_unit.hpp	/^        check_double_register(const units::base_unit_ordinal<N>&) $/;"	f	class:boost::units::base_unit	access:friend	signature:(const units::base_unit_ordinal<N>&)
check_system	/usr/include/boost/units/heterogeneous_system.hpp	/^struct check_system : mpl::false_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::false_
check_system	/usr/include/boost/units/heterogeneous_system.hpp	/^struct check_system<heterogeneous_system<heterogeneous_system_impl<System, Dimension, Scale> >, Dimension> : mpl::true_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::true_
check_system	/usr/include/boost/units/homogeneous_system.hpp	/^struct check_system<homogeneous_system<L>, Dimensions> : mpl::true_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::true_
check_system	/usr/include/boost/units/homogeneous_system.hpp	/^struct check_system<homogeneous_system<L>, Dimensions> :$/;"	s	namespace:boost::units::detail	inherits:boost::mpl::not_
codata	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
codata	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^namespace codata {$/;"	n	namespace:boost::units::si::constants
column_info	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > column_info;$/;"	t	struct:boost::units::detail::determine_extra_equations::apply	access:public
combined	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename mpl::plus<typename Begin1::item, typename Begin2::item>::type combined;$/;"	t	struct:boost::units::detail::merge_dimensions_func::apply	access:public
conductance	/usr/include/boost/units/systems/si/conductance.hpp	/^typedef unit<conductance_dimension,si::system>    conductance;$/;"	t	namespace:boost::units::si
conductance_dimension	/usr/include/boost/units/physical_dimensions/conductance.hpp	/^                          current_base_dimension,2>::type conductance_dimension;   $/;"	t	namespace:boost::units
conductivity	/usr/include/boost/units/systems/si/conductivity.hpp	/^typedef unit<conductivity_dimension,si::system>    conductivity;$/;"	t	namespace:boost::units::si
conductivity_dimension	/usr/include/boost/units/physical_dimensions/conductivity.hpp	/^                          current_base_dimension,2>::type conductivity_dimension;          $/;"	t	namespace:boost::units
constant	/usr/include/boost/units/systems/detail/constants.hpp	/^struct constant $/;"	s	namespace:boost::units
constants	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
constants	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^namespace constants {$/;"	n	namespace:boost::units::si
conversion	/usr/include/boost/units/detail/conversion_impl.hpp	/^        > conversion;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
conversion	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef call_base_unit_converter<source, new_source> conversion;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
conversion	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef conversion_factor_helper<new_source, new_dest> conversion;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
conversion1	/usr/include/boost/units/detail/conversion_impl.hpp	/^    > conversion1;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
conversion2	/usr/include/boost/units/detail/conversion_impl.hpp	/^    > conversion2;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
conversion_factor	/usr/include/boost/units/conversion.hpp	/^conversion_factor(const FromUnit&,const ToUnit&)$/;"	f	namespace:boost::units	signature:(const FromUnit&,const ToUnit&)
conversion_factor_helper	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_factor_helper<unit<D, heterogeneous_system<L1> >, unit<D, homogeneous_system<L2> > >$/;"	s	namespace:boost::units::detail	inherits:conversion_factor_helper
conversion_factor_helper	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_factor_helper<unit<D, heterogeneous_system<S1> >, unit<D, heterogeneous_system<S2> > >$/;"	s	namespace:boost::units::detail
conversion_factor_helper	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_factor_helper<unit<D, homogeneous_system<L1> >, unit<D, heterogeneous_system<L2> > >$/;"	s	namespace:boost::units::detail	inherits:conversion_factor_helper
conversion_factor_helper	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_factor_helper<unit<D, homogeneous_system<L1> >, unit<D, homogeneous_system<L2> > >$/;"	s	namespace:boost::units::detail	inherits:conversion_factor_helper
conversion_helper	/usr/include/boost/units/conversion.hpp	/^struct conversion_helper$/;"	s	namespace:boost::units
conversion_helper	/usr/include/boost/units/detail/absolute_impl.hpp	/^struct conversion_helper<quantity<absolute<Unit1>, T1>, quantity<absolute<Unit2>, T2> >$/;"	s	namespace:boost::units
conversion_helper	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_helper<quantity<Unit1, T1>, quantity<Unit2, T2> >$/;"	s	namespace:boost::units
conversion_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_impl$/;"	s	namespace:boost::units::detail
conversion_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct conversion_impl<0>$/;"	s	namespace:boost::units::detail
convert	/usr/include/boost/units/conversion.hpp	/^    static To convert(const From&);$/;"	p	struct:boost::units::conversion_helper	access:public	signature:(const From&)
convert	/usr/include/boost/units/detail/absolute_impl.hpp	/^    static to_quantity_type convert(const from_quantity_type& source)$/;"	f	struct:boost::units::conversion_helper	access:public	signature:(const from_quantity_type& source)
convert	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static destination_type convert(const quantity<Unit1, T1>& source)$/;"	f	struct:boost::units::conversion_helper	access:public	signature:(const quantity<Unit1, T1>& source)
converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef detail::call_base_unit_converter<unit, reduced_unit> converter;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef do_call_base_unit_converter<Dest, typename Source::unit_type> converter;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef base_unit_converter<source_type, destination_type> converter;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
cos	/usr/include/boost/units/cmath.hpp	/^cos(const quantity<si::plane_angle,Y>& theta)$/;"	f	namespace:boost::units	signature:(const quantity<si::plane_angle,Y>& theta)
cos	/usr/include/boost/units/cmath.hpp	/^cos(const quantity<unit<plane_angle_dimension,System>,Y>& theta)$/;"	f	namespace:boost::units	signature:(const quantity<unit<plane_angle_dimension,System>,Y>& theta)
create_row_of_identity	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct create_row_of_identity {$/;"	s	namespace:boost::units::detail
create_row_of_identity	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct create_row_of_identity<0, TotalColumns> {$/;"	s	namespace:boost::units::detail
create_row_of_identity	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct create_row_of_identity<Column, 0> {$/;"	s	namespace:boost::units::detail
create_unit_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct create_unit_matrix {$/;"	s	namespace:boost::units::detail
create_unit_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct create_unit_matrix<0> {$/;"	s	namespace:boost::units::detail
cup_base_unit	/usr/include/boost/units/base_units/us/cup.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<-1> > > cup_base_unit;$/;"	t	namespace:boost::units::us
current	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<current_dimension,system>               current;                \/\/\/< abstract unit of current$/;"	t	namespace:boost::units::abstract
current	/usr/include/boost/units/systems/cgs/current.hpp	/^typedef unit<current_dimension,cgs::system>   current;$/;"	t	namespace:boost::units::cgs
current	/usr/include/boost/units/systems/si/current.hpp	/^typedef unit<current_dimension,si::system>   current;$/;"	t	namespace:boost::units::si
current_base_dimension	/usr/include/boost/units/physical_dimensions/current.hpp	/^struct current_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
current_dimension	/usr/include/boost/units/physical_dimensions/current.hpp	/^typedef current_base_dimension::dimension_type    current_dimension;$/;"	t	namespace:boost::units
current_identity_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename IdentityBegin::item current_identity_row;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
current_identity_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename IdentityBegin::item current_identity_row;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
current_identity_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename IdentityBegin::item current_identity_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
current_over_energy	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<current,energy>::type current_over_energy;$/;"	t	namespace:boost::units::si::constants::codata
current_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename RowsBegin::item current_row;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
current_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename RowsBegin::item current_row;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
current_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename RowsBegin::item current_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
current_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct current_unit_tag : base_unit<current_unit_tag, current_dimension, -27> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
current_value	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename current_row::item current_value;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
dabs	/usr/include/boost/units/static_rational.hpp	/^                                    dabs = static_abs<D>::value;$/;"	m	class:boost::units::static_rational	access:private
day_base_unit	/usr/include/boost/units/base_units/metric/day.hpp	/^typedef scaled_base_unit<boost::units::si::second_base_unit, scale<86400, static_rational<1> > > day_base_unit;$/;"	t	namespace:boost::units::metric
degree	/usr/include/boost/units/systems/angle/degrees.hpp	/^namespace degree {$/;"	n	namespace:boost::units
demangle	/usr/include/boost/units/detail/utility.hpp	/^demangle(const char* name)$/;"	f	namespace:boost::units::detail	signature:(const char* name)
den	/usr/include/boost/units/static_rational.hpp	/^        static const integer_type   den = $/;"	m	class:boost::units::static_rational	access:private
den_type	/usr/include/boost/units/static_rational.hpp	/^        >::type den_type;$/;"	t	class:boost::units::static_rational	access:public
denominator	/usr/include/boost/units/static_rational.hpp	/^        static integer_type denominator()    { return Denominator; }$/;"	f	class:boost::units::static_rational	access:public	signature:()
denorm_min	/usr/include/boost/units/limits.hpp	/^        static quantity_type denorm_min()  { return(quantity_type::from_value(std::numeric_limits<T>::denorm_min())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
deref	/usr/include/boost/units/detail/dimension_list.hpp	/^struct deref<units::list<Item, Next> >$/;"	s	namespace:boost::mpl
derived_dimension	/usr/include/boost/units/derived_dimension.hpp	/^struct derived_dimension$/;"	s	namespace:boost::units
derived_dimension	/usr/include/boost/units/derived_dimension.hpp	/^struct derived_dimension<$/;"	s	namespace:boost::units
destination_factor	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename mpl::divides<typename get_scale_list<Dest>::type, typename get_scale_list<destination_type>::type>::type destination_factor;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
destination_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef Destination destination_type;$/;"	t	struct:boost::units::select_base_unit_converter	access:public
destination_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef quantity<Unit2, T2> destination_type;$/;"	t	struct:boost::units::conversion_helper	access:public
destination_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename selector::destination_type destination_type;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
detail	/usr/include/boost/units/detail/absolute_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/cmath_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/conversion_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/dim_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/dimension_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/dimension_list.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/linear_algebra.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/ordinal.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/push_front_if.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/push_front_or_add.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/sort.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/static_rational_power.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/detail/utility.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/dim.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/dimensionless_type.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/heterogeneous_system.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/homogeneous_system.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/io.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/make_system.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/quantity.hpp	/^namespace detail {$/;"	n	namespace:boost::units
detail	/usr/include/boost/units/static_rational.hpp	/^namespace detail {$/;"	n	namespace:boost::units
determine_extra_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations {$/;"	s	namespace:boost::units::detail
determine_extra_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations<0, true> {$/;"	s	namespace:boost::units::detail
determine_extra_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations<RemainingColumns, true> {$/;"	s	namespace:boost::units::detail
determine_extra_equations_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations_impl {$/;"	s	namespace:boost::units::detail
determine_extra_equations_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations_impl<0> {$/;"	s	namespace:boost::units::detail
determine_extra_equations_skip_zeros_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations_skip_zeros_impl<false, false> {$/;"	s	namespace:boost::units::detail
determine_extra_equations_skip_zeros_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations_skip_zeros_impl<false, true> {$/;"	s	namespace:boost::units::detail
determine_extra_equations_skip_zeros_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations_skip_zeros_impl<true, false> {$/;"	s	namespace:boost::units::detail
determine_extra_equations_skip_zeros_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct determine_extra_equations_skip_zeros_impl<true, true> {$/;"	s	namespace:boost::units::detail
digits	/usr/include/boost/units/limits.hpp	/^        static const int digits = std::numeric_limits<T>::digits;$/;"	m	class:std::numeric_limits	access:public
digits10	/usr/include/boost/units/limits.hpp	/^        static const int digits10 = std::numeric_limits<T>::digits10;$/;"	m	class:std::numeric_limits	access:public
dim	/usr/include/boost/units/dim.hpp	/^struct dim$/;"	s	namespace:boost::units
dim1	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename Begin1::item dim1;$/;"	t	struct:boost::units::detail::merge_dimensions_impl::apply	access:public
dim2	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename Begin2::item dim2;$/;"	t	struct:boost::units::detail::merge_dimensions_impl::apply	access:public
dim_tag	/usr/include/boost/units/dim.hpp	/^struct dim_tag { };$/;"	s	namespace:boost::units::detail
dimension_list_tag	/usr/include/boost/units/detail/dimension_list.hpp	/^struct dimension_list_tag { };$/;"	s	namespace:boost::units::detail
dimension_type	/usr/include/boost/units/base_dimension.hpp	/^        typedef detail::unspecified dimension_type;$/;"	t	class:boost::units::base_dimension	access:public
dimension_type	/usr/include/boost/units/base_dimension.hpp	/^        typedef list<dim<Derived,static_rational<1> >, dimensionless_type>    dimension_type;$/;"	t	class:boost::units::base_dimension	access:public
dimension_type	/usr/include/boost/units/base_unit.hpp	/^        typedef Dim                 dimension_type;$/;"	t	class:boost::units::base_unit	access:public
dimension_type	/usr/include/boost/units/quantity.hpp	/^        typedef dimensionless_type                              dimension_type;$/;"	t	class:boost::units::quantity	access:public
dimension_type	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef typename S::dimension_type dimension_type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
dimension_type	/usr/include/boost/units/unit.hpp	/^        typedef Dim                 dimension_type; $/;"	t	class:boost::units::unit	access:public
dimensionless	/usr/include/boost/units/systems/angle/degrees.hpp	/^typedef unit<dimensionless_type,system>         dimensionless;$/;"	t	namespace:boost::units::degree
dimensionless	/usr/include/boost/units/systems/angle/gradians.hpp	/^typedef unit<dimensionless_type,system>         dimensionless;$/;"	t	namespace:boost::units::gradian
dimensionless	/usr/include/boost/units/systems/angle/revolutions.hpp	/^typedef unit<dimensionless_type,system>         dimensionless;$/;"	t	namespace:boost::units::revolution
dimensionless	/usr/include/boost/units/systems/cgs/base.hpp	/^typedef unit<dimensionless_type,system>         dimensionless;$/;"	t	namespace:boost::units::cgs
dimensionless	/usr/include/boost/units/systems/si/base.hpp	/^typedef unit<dimensionless_type,system>         dimensionless;$/;"	t	namespace:boost::units::si
dimensionless_quantity	/usr/include/boost/units/dimensionless_quantity.hpp	/^struct dimensionless_quantity$/;"	s	namespace:boost::units
dimensionless_type	/usr/include/boost/units/dimensionless_type.hpp	/^struct dimensionless_type$/;"	s	namespace:boost::units
dimensionless_unit	/usr/include/boost/units/dimensionless_unit.hpp	/^struct dimensionless_unit$/;"	s	namespace:boost::units
dimensions	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename unit::dimension_type dimensions;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
dimensions	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        >::type dimensions;$/;"	t	struct:boost::units::detail::make_homogeneous_system_impl::apply	access:public
dimensions	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type dimensions;$/;"	t	struct:boost::units::detail::calculate_base_unit_exponents_impl::apply	access:public
dimensions	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef typename find_base_dimensions<T>::type dimensions;$/;"	t	struct:boost::units::detail::normalize_units	access:public
dimensions	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef Dimensions dimensions;$/;"	t	struct:boost::units::heterogeneous_system_impl	access:public
disable_if_is_same	/usr/include/boost/units/quantity.hpp	/^struct disable_if_is_same$/;"	s	namespace:boost::units::detail
disable_if_is_same	/usr/include/boost/units/quantity.hpp	/^struct disable_if_is_same<T, T> {};$/;"	s	namespace:boost::units::detail
divide_equation	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct divide_equation {$/;"	s	namespace:boost::units::detail
divide_equation	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct divide_equation<0> {$/;"	s	namespace:boost::units::detail
divide_systems	/usr/include/boost/units/heterogeneous_system.hpp	/^struct divide_systems$/;"	s	namespace:boost::units::detail
divide_typeof_helper	/usr/include/boost/units/detail/one.hpp	/^struct divide_typeof_helper<T, one>$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/detail/one.hpp	/^struct divide_typeof_helper<one, T>$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/detail/one.hpp	/^struct divide_typeof_helper<one, one>$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/lambda.hpp	/^    struct divide_typeof_helper<boost::lambda::lambda_functor<Arg>, boost::units::unit<Dim, System> > {$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/lambda.hpp	/^    struct divide_typeof_helper<boost::units::unit<Dim, System>, boost::lambda::lambda_functor<Arg> > {$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/operators.hpp	/^template<typename X,typename Y> struct divide_typeof_helper     $/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< X,quantity<Unit,Y> >$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< X,unit<Dim,System> >$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< one,quantity<Unit,Y> >$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< quantity<Unit,X>,Y >$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< quantity<Unit,X>,one >$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< quantity<Unit,X>,unit<Dim,System> >$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< quantity<Unit1,X>,quantity<Unit2,Y> >$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< unit<Dim,System>,X >$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct divide_typeof_helper< unit<Dim,System>,quantity<Unit,X> >$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct divide_typeof_helper< unit<Dim1,heterogeneous_system<System1> >,$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct divide_typeof_helper< unit<Dim1,homogeneous_system<System1> >,$/;"	s	namespace:boost::units
divide_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct divide_typeof_helper< unit<Dim1,homogeneous_system<System> >,$/;"	s	namespace:boost::units
divides_impl	/usr/include/boost/units/dim.hpp	/^struct divides_impl<boost::units::detail::dim_tag,boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
divides_impl	/usr/include/boost/units/dim.hpp	/^struct divides_impl<boost::units::detail::static_rational_tag,boost::units::detail::dim_tag>$/;"	s	namespace:boost::mpl
divides_impl	/usr/include/boost/units/dimension.hpp	/^struct divides_impl<boost::units::detail::dimension_list_tag,boost::units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
divides_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct divides_impl<boost::units::heterogeneous_system_dim_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
divides_impl	/usr/include/boost/units/static_rational.hpp	/^struct divides_impl<boost::units::detail::static_rational_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
do_call_base_unit_converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct do_call_base_unit_converter {$/;"	s	namespace:boost::units::detail
do_print	/usr/include/boost/units/io.hpp	/^inline void do_print(std::basic_ostream<Char, Traits>& os, const char* s)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<Char, Traits>& os, const char* s)
do_print	/usr/include/boost/units/io.hpp	/^inline void do_print(std::basic_ostream<Char, Traits>& os, const std::string& s)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<Char, Traits>& os, const std::string& s)
do_print	/usr/include/boost/units/io.hpp	/^inline void do_print(std::ostream& os, const std::string& s)$/;"	f	namespace:boost::units::detail	signature:(std::ostream& os, const std::string& s)
do_print_prefixed	/usr/include/boost/units/io.hpp	/^do_print_prefixed($/;"	f	namespace:boost::units::detail	signature:( std::basic_ostream<CharT, Traits>& os, const quantity< unit< Dimension, heterogeneous_system< heterogeneous_system_impl< list< heterogeneous_system_dim< scaled_base_unit<BaseUnit, BaseScale>, static_rational<1> >, dimensionless_type >, Dimension, Scale > > >, T >& q)
do_print_prefixed	/usr/include/boost/units/io.hpp	/^void do_print_prefixed($/;"	f	namespace:boost::units::detail	signature:( std::basic_ostream<CharT, Traits>& os, const quantity< unit< Dimension, heterogeneous_system< heterogeneous_system_impl< L, Dimension, Scale > > >, T >& q)
do_print_prefixed	/usr/include/boost/units/io.hpp	/^void do_print_prefixed(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q)
do_print_prefixed	/usr/include/boost/units/io.hpp	/^void do_print_prefixed(std::basic_ostream<CharT, Traits>& os, const quantity<unit<Dimension, System>, T>& q)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<CharT, Traits>& os, const quantity<unit<Dimension, System>, T>& q)
do_print_prefixed_impl	/usr/include/boost/units/io.hpp	/^void do_print_prefixed_impl(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q, F default_)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q, F default_)
dose_equivalent	/usr/include/boost/units/systems/si/dose_equivalent.hpp	/^typedef unit<dose_equivalent_dimension,si::system>     dose_equivalent;$/;"	t	namespace:boost::units::si
dose_equivalent_dimension	/usr/include/boost/units/physical_dimensions/dose_equivalent.hpp	/^                          time_base_dimension,-2>::type dose_equivalent_dimension;  $/;"	t	namespace:boost::units
drachm_base_unit	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<16, static_rational<-2> > > drachm_base_unit;$/;"	t	namespace:boost::units::imperial
dram_base_unit	/usr/include/boost/units/base_units/us/dram.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<16, static_rational<-2> > > dram_base_unit;$/;"	t	namespace:boost::units::us
dummy	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct set_yes { set_no dummy[2]; };$/;"	m	struct:boost::units::detail::set_yes	access:public
dummy	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct no { no() {} char dummy; };$/;"	m	struct:boost::units::detail::no	access:public
dummy	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct yes { no dummy[2]; };$/;"	m	struct:boost::units::detail::yes	access:public
dynamic_viscosity	/usr/include/boost/units/systems/cgs/dynamic_viscosity.hpp	/^typedef unit<dynamic_viscosity_dimension,cgs::system>     dynamic_viscosity;$/;"	t	namespace:boost::units::cgs
dynamic_viscosity	/usr/include/boost/units/systems/si/dynamic_viscosity.hpp	/^typedef unit<dynamic_viscosity_dimension,si::system>     dynamic_viscosity;$/;"	t	namespace:boost::units::si
dynamic_viscosity_dimension	/usr/include/boost/units/physical_dimensions/dynamic_viscosity.hpp	/^                          time_base_dimension,-1>::type dynamic_viscosity_dimension;$/;"	t	namespace:boost::units
electric_charge	/usr/include/boost/units/systems/si/electric_charge.hpp	/^typedef unit<electric_charge_dimension,si::system>    electric_charge;$/;"	t	namespace:boost::units::si
electric_charge_dimension	/usr/include/boost/units/physical_dimensions/electric_charge.hpp	/^                          current_base_dimension,1>::type electric_charge_dimension;          $/;"	t	namespace:boost::units
electric_charge_over_amount	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<electric_charge,amount>::type electric_charge_over_amount;$/;"	t	namespace:boost::units::si::constants::codata
electric_charge_over_mass	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<electric_charge,mass>::type electric_charge_over_mass;$/;"	t	namespace:boost::units::si::constants::codata
electric_potential	/usr/include/boost/units/systems/si/electric_potential.hpp	/^typedef unit<electric_potential_dimension,si::system>    electric_potential;$/;"	t	namespace:boost::units::si
electric_potential_dimension	/usr/include/boost/units/physical_dimensions/electric_potential.hpp	/^                          current_base_dimension,-1>::type electric_potential_dimension;        $/;"	t	namespace:boost::units
eliminate_from_pair_of_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct eliminate_from_pair_of_equations {$/;"	s	namespace:boost::units::detail
eliminate_from_pair_of_equations_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct eliminate_from_pair_of_equations_impl {$/;"	s	namespace:boost::units::detail
eliminate_from_pair_of_equations_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct eliminate_from_pair_of_equations_impl<0> {$/;"	s	namespace:boost::units::detail
end	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef call_base_unit_converter<Dest, new_dest> end;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
end_impl	/usr/include/boost/units/detail/dimension_list.hpp	/^struct end_impl<units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
energy	/usr/include/boost/units/systems/cgs/energy.hpp	/^typedef unit<energy_dimension,cgs::system>   energy;$/;"	t	namespace:boost::units::cgs
energy	/usr/include/boost/units/systems/si/energy.hpp	/^typedef unit<energy_dimension,si::system>    energy;$/;"	t	namespace:boost::units::si
energy_density_dimension	/usr/include/boost/units/physical_dimensions/energy_density.hpp	/^                          time_base_dimension,-2>::type energy_density_dimension;                $/;"	t	namespace:boost::units
energy_dimension	/usr/include/boost/units/physical_dimensions/energy.hpp	/^                          time_base_dimension,-2>::type energy_dimension;                $/;"	t	namespace:boost::units
energy_over_magnetic_flux_density	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<energy,magnetic_flux_density>::type energy_over_magnetic_flux_density;$/;"	t	namespace:boost::units::si::constants::codata
energy_over_temperature	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<energy,temperature>::type energy_over_temperature;$/;"	t	namespace:boost::units::si::constants::codata
energy_over_temperature_amount	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<energy_over_temperature,amount>::type energy_over_temperature_amount;$/;"	t	namespace:boost::units::si::constants::codata
energy_time	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef multiply_typeof_helper<energy,time>::type energy_time;$/;"	t	namespace:boost::units::si::constants::codata
engineering_prefix	/usr/include/boost/units/io.hpp	/^inline std::ios_base& engineering_prefix(std::ios_base& ios)$/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
engineering_prefixes	/usr/include/boost/units/io.hpp	/^        dimensionless_type> > > > > > > > > > > > > > > > > > engineering_prefixes;$/;"	t	namespace:boost::units::detail
epsilon	/usr/include/boost/units/limits.hpp	/^        static quantity_type epsilon()  { return(quantity_type::from_value(std::numeric_limits<T>::epsilon())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
eval_factor	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef eval_scale_list<factor> eval_factor;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
exp	/usr/include/boost/units/cmath.hpp	/^exp(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q)
expand_dimensions	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct expand_dimensions {$/;"	s	namespace:boost::units::detail
expand_dimensions	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct expand_dimensions<0> {$/;"	s	namespace:boost::units::detail
exponent	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename source_pair::value_type exponent;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
exponent	/usr/include/boost/units/scale.hpp	/^    typedef Exponent exponent;$/;"	t	struct:boost::units::scale	access:public
exponent	/usr/include/boost/units/scale.hpp	/^    typedef static_rational<0> exponent;$/;"	t	struct:boost::units::scale	access:public
exponent_string	/usr/include/boost/units/io.hpp	/^inline std::string exponent_string(const static_rational<1>&)$/;"	f	namespace:boost::units::detail	signature:(const static_rational<1>&)
exponent_string	/usr/include/boost/units/io.hpp	/^inline std::string exponent_string(const static_rational<N,D>& r)$/;"	f	namespace:boost::units::detail	signature:(const static_rational<N,D>& r)
exponents	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef typename calculate_base_unit_exponents<typename System::type, Dimensions>::type exponents;$/;"	t	struct:boost::units::detail::make_heterogeneous_system	access:public
extra	/usr/include/boost/units/detail/linear_algebra.hpp	/^    static const long extra = (type::size::value) - (T::size::value);$/;"	m	struct:boost::units::detail::normalize_units	access:public
extract_base_units	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct extract_base_units {$/;"	s	namespace:boost::units::detail
extract_base_units	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct extract_base_units<0> {$/;"	s	namespace:boost::units::detail
factor	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename mpl::divides<source_factor, destination_factor>::type factor;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
fahrenheit	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^namespace fahrenheit {$/;"	n	namespace:boost::units
fahrenheit_base_unit	/usr/include/boost/units/base_units/temperature/fahrenheit.hpp	/^struct fahrenheit_base_unit : public base_unit<fahrenheit_base_unit, temperature_dimension, -1007>$/;"	s	namespace:boost::units::temperature	inherits:base_unit
fermi_base_unit	/usr/include/boost/units/base_units/metric/fermi.hpp	/^typedef scaled_base_unit<boost::units::si::meter_base_unit, scale<10, static_rational<-15> > > fermi_base_unit;$/;"	t	namespace:boost::units::metric
find_base_dimensions	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct find_base_dimensions {$/;"	s	namespace:boost::units::detail
find_base_dimensions_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct find_base_dimensions_impl {$/;"	s	namespace:boost::units::detail
find_base_dimensions_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct find_base_dimensions_impl<0> {$/;"	s	namespace:boost::units::detail
find_base_dimensions_impl_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct find_base_dimensions_impl_impl {$/;"	s	namespace:boost::units::detail
find_base_dimensions_impl_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct find_base_dimensions_impl_impl<0> {$/;"	s	namespace:boost::units::detail
find_matching_scale	/usr/include/boost/units/io.hpp	/^bool find_matching_scale(T t, double x, F f)$/;"	f	namespace:boost::units::detail	signature:(T t, double x, F f)
find_matching_scale_i	/usr/include/boost/units/io.hpp	/^bool find_matching_scale_i(Begin, End end, T t, double x, F f)$/;"	f	namespace:boost::units::detail	signature:(Begin, End end, T t, double x, F f)
find_matching_scale_i	/usr/include/boost/units/io.hpp	/^bool find_matching_scale_i(End, End, T, double, F)$/;"	f	namespace:boost::units::detail	signature:(End, End, T, double, F)
find_matching_scale_impl	/usr/include/boost/units/io.hpp	/^bool find_matching_scale_impl(Begin, End end, Prev prev, T t, double x, F f)$/;"	f	namespace:boost::units::detail	signature:(Begin, End end, Prev prev, T t, double x, F f)
find_matching_scale_impl	/usr/include/boost/units/io.hpp	/^bool find_matching_scale_impl(End, End, Prev, T, double, F)$/;"	f	namespace:boost::units::detail	signature:(End, End, Prev, T, double, F)
fluid_dram_base_unit	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<-7> > > fluid_dram_base_unit;$/;"	t	namespace:boost::units::us
fluid_ounce_base_unit	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<20, static_rational<-1> > > fluid_ounce_base_unit;$/;"	t	namespace:boost::units::imperial
fluid_ounce_base_unit	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<16, static_rational<-1> > > fluid_ounce_base_unit;$/;"	t	namespace:boost::units::us
fmod	/usr/include/boost/units/cmath.hpp	/^fmod(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q1, const quantity<Unit,Y>& q2)
fmt_mask	/usr/include/boost/units/io.hpp	/^    fmt_mask = 3 \/\/\/ Bits used for format.$/;"	e	enum:boost::units::format_mode
foot_base_unit	/usr/include/boost/units/base_units/imperial/foot.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<3, static_rational<-1> > > foot_base_unit;$/;"	t	namespace:boost::units::imperial
foot_base_unit	/usr/include/boost/units/base_units/us/foot.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<3, static_rational<-1> > > foot_base_unit;$/;"	t	namespace:boost::units::us
force	/usr/include/boost/units/systems/cgs/force.hpp	/^typedef unit<force_dimension,cgs::system>        force;$/;"	t	namespace:boost::units::cgs
force	/usr/include/boost/units/systems/si/force.hpp	/^typedef unit<force_dimension,si::system>     force;$/;"	t	namespace:boost::units::si
force_dimension	/usr/include/boost/units/physical_dimensions/force.hpp	/^                          time_base_dimension,-2>::type force_dimension;                    $/;"	t	namespace:boost::units
force_instantiation_of_unit	/usr/include/boost/units/quantity.hpp	/^        enum { force_instantiation_of_unit = sizeof(Unit) };$/;"	e	enum:boost::units::quantity::__anon4
force_over_current_squared	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<divide_typeof_helper<force,current>::type,current>::type force_over_current_squared;$/;"	t	namespace:boost::units::si::constants::codata
format_mode	/usr/include/boost/units/io.hpp	/^enum format_mode$/;"	g	namespace:boost::units
format_name_impl	/usr/include/boost/units/io.hpp	/^struct format_name_impl : format_raw_name_impl {$/;"	s	namespace:boost::units::detail	inherits:format_raw_name_impl
format_raw_name_impl	/usr/include/boost/units/io.hpp	/^struct format_raw_name_impl {$/;"	s	namespace:boost::units::detail
format_raw_symbol_impl	/usr/include/boost/units/io.hpp	/^struct format_raw_symbol_impl {$/;"	s	namespace:boost::units::detail
format_symbol_impl	/usr/include/boost/units/io.hpp	/^struct format_symbol_impl : format_raw_symbol_impl {$/;"	s	namespace:boost::units::detail	inherits:format_raw_symbol_impl
frequency	/usr/include/boost/units/systems/cgs/frequency.hpp	/^typedef unit<frequency_dimension,cgs::system>        frequency;$/;"	t	namespace:boost::units::cgs
frequency	/usr/include/boost/units/systems/si/frequency.hpp	/^typedef unit<frequency_dimension,si::system>     frequency;$/;"	t	namespace:boost::units::si
frequency_dimension	/usr/include/boost/units/physical_dimensions/frequency.hpp	/^typedef derived_dimension<time_base_dimension,-1>::type frequency_dimension;                $/;"	t	namespace:boost::units
frequency_over_electric_potential	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<frequency,electric_potential>::type frequency_over_electric_potential;$/;"	t	namespace:boost::units::si::constants::codata
frequency_over_magnetic_flux_density	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<frequency,magnetic_flux_density>::type frequency_over_magnetic_flux_density;$/;"	t	namespace:boost::units::si::constants::codata
frequency_over_temperature	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<frequency,temperature>::type frequency_over_temperature;$/;"	t	namespace:boost::units::si::constants::codata
frexp	/usr/include/boost/units/cmath.hpp	/^frexp(const quantity<Unit, Y>& q,Int* ex)$/;"	f	namespace:boost::units	signature:(const quantity<Unit, Y>& q,Int* ex)
from_base_units	/usr/include/boost/units/detail/conversion_impl.hpp	/^    >::type from_base_units;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
from_quantity_type	/usr/include/boost/units/detail/absolute_impl.hpp	/^    typedef quantity<absolute<Unit1>, T1> from_quantity_type;$/;"	t	struct:boost::units::conversion_helper	access:public
from_value	/usr/include/boost/units/quantity.hpp	/^        static this_type from_value(const value_type& val)  { return this_type(val); }$/;"	f	class:boost::units::quantity	access:public	signature:(const value_type& val)
from_value	/usr/include/boost/units/quantity.hpp	/^        static this_type from_value(const value_type& val)  { return this_type(val, 0); }$/;"	f	class:boost::units::quantity	access:public	signature:(const value_type& val)
front_impl	/usr/include/boost/units/detail/dimension_list.hpp	/^struct front_impl<units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
furlong_base_unit	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<220, static_rational<1> > > furlong_base_unit;$/;"	t	namespace:boost::units::imperial
gallon_base_unit	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<8, static_rational<1> > > gallon_base_unit;$/;"	t	namespace:boost::units::imperial
gallon_base_unit	/usr/include/boost/units/base_units/us/gallon.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<3> > > gallon_base_unit;$/;"	t	namespace:boost::units::us
gcd_type	/usr/include/boost/units/static_rational.hpp	/^            >::value)>::type gcd_type;$/;"	t	class:boost::units::static_rational	access:public
get_autoprefix	/usr/include/boost/units/io.hpp	/^inline autoprefix_mode get_autoprefix(std::ios_base& ios)$/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
get_default_conversion	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct get_default_conversion$/;"	s	namespace:boost::units
get_default_conversion_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct get_default_conversion_impl$/;"	s	namespace:boost::units::detail
get_default_conversion_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct get_default_conversion_impl<0>$/;"	s	namespace:boost::units::detail
get_dimension	/usr/include/boost/units/get_dimension.hpp	/^struct get_dimension {};$/;"	s	namespace:boost::units
get_dimension	/usr/include/boost/units/get_dimension.hpp	/^struct get_dimension< absolute<Unit> >$/;"	s	namespace:boost::units
get_dimension	/usr/include/boost/units/get_dimension.hpp	/^struct get_dimension< quantity<Unit,Y> >$/;"	s	namespace:boost::units
get_dimension	/usr/include/boost/units/get_dimension.hpp	/^struct get_dimension< unit<Dim,System> >$/;"	s	namespace:boost::units
get_flags	/usr/include/boost/units/io.hpp	/^inline long get_flags(std::ios_base& ios, long mask) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios, long mask)
get_format	/usr/include/boost/units/io.hpp	/^inline format_mode get_format(std::ios_base& ios) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
get_scale_list	/usr/include/boost/units/detail/unscale.hpp	/^struct get_scale_list$/;"	s	namespace:boost::units
get_scale_list	/usr/include/boost/units/detail/unscale.hpp	/^struct get_scale_list<scaled_base_unit<S, Scale> >$/;"	s	namespace:boost::units
get_scale_list	/usr/include/boost/units/detail/unscale.hpp	/^struct get_scale_list<unit<D, S> >$/;"	s	namespace:boost::units
get_scale_list	/usr/include/boost/units/heterogeneous_system.hpp	/^struct get_scale_list<heterogeneous_system<T> >$/;"	s	namespace:boost::units
get_scale_list	/usr/include/boost/units/heterogeneous_system.hpp	/^struct get_scale_list<heterogeneous_system_dim<Unit, Exponent> >$/;"	s	namespace:boost::units
get_scale_list_of_heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct get_scale_list_of_heterogeneous_system_impl$/;"	s	namespace:boost::units::detail
get_scale_list_of_heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct get_scale_list_of_heterogeneous_system_impl<0>$/;"	s	namespace:boost::units::detail
get_system	/usr/include/boost/units/get_system.hpp	/^struct get_system {};$/;"	s	namespace:boost::units
get_system	/usr/include/boost/units/get_system.hpp	/^struct get_system< absolute<Unit> >$/;"	s	namespace:boost::units
get_system	/usr/include/boost/units/get_system.hpp	/^struct get_system< quantity<Unit,Y> >$/;"	s	namespace:boost::units
get_system	/usr/include/boost/units/get_system.hpp	/^struct get_system< unit<Dim,System> >$/;"	s	namespace:boost::units
get_tag	/usr/include/boost/units/detail/dim_impl.hpp	/^struct get_tag$/;"	s	namespace:boost::units::detail
get_value	/usr/include/boost/units/detail/dim_impl.hpp	/^struct get_value$/;"	s	namespace:boost::units::detail
gill_base_unit	/usr/include/boost/units/base_units/imperial/gill.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<4, static_rational<-1> > > gill_base_unit;$/;"	t	namespace:boost::units::imperial
gill_base_unit	/usr/include/boost/units/base_units/us/gill.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<-2> > > gill_base_unit;$/;"	t	namespace:boost::units::us
gradian	/usr/include/boost/units/systems/angle/gradians.hpp	/^namespace gradian {$/;"	n	namespace:boost::units
grain_base_unit	/usr/include/boost/units/base_units/imperial/grain.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<7000, static_rational<-1> > > grain_base_unit;$/;"	t	namespace:boost::units::imperial
grain_base_unit	/usr/include/boost/units/base_units/us/grain.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<7000, static_rational<-1> > > grain_base_unit;$/;"	t	namespace:boost::units::us
gram_base_unit	/usr/include/boost/units/base_units/cgs/gram.hpp	/^struct gram_base_unit : public base_unit<gram_base_unit, mass_dimension, -8>$/;"	s	namespace:boost::units::cgs	inherits:base_unit
has_denorm	/usr/include/boost/units/limits.hpp	/^        static const float_denorm_style has_denorm = std::numeric_limits<T>::has_denorm;$/;"	m	class:std::numeric_limits	access:public
has_denorm	/usr/include/boost/units/limits.hpp	/^        static const int has_denorm = std::numeric_limits<T>::has_denorm;$/;"	m	class:std::numeric_limits	access:public
has_denorm_loss	/usr/include/boost/units/limits.hpp	/^        static const bool has_denorm_loss = std::numeric_limits<T>::has_denorm_loss;$/;"	m	class:std::numeric_limits	access:public
has_infinity	/usr/include/boost/units/limits.hpp	/^        static const bool has_infinity = std::numeric_limits<T>::has_infinity;$/;"	m	class:std::numeric_limits	access:public
has_key	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct has_key {$/;"	s	namespace:boost::units::detail
has_quiet_NaN	/usr/include/boost/units/limits.hpp	/^        static const bool has_quiet_NaN = std::numeric_limits<T>::has_quiet_NaN;$/;"	m	class:std::numeric_limits	access:public
has_signaling_NaN	/usr/include/boost/units/limits.hpp	/^        static const bool has_signaling_NaN = std::numeric_limits<T>::has_signaling_NaN;$/;"	m	class:std::numeric_limits	access:public
heat_capacity_dimension	/usr/include/boost/units/physical_dimensions/heat_capacity.hpp	/^                          temperature_base_dimension,-1>::type heat_capacity_dimension;                    $/;"	t	namespace:boost::units
heterogeneous_dimensionless_system	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^> heterogeneous_dimensionless_system;$/;"	t	namespace:boost::units
heterogeneous_system	/usr/include/boost/units/heterogeneous_system.hpp	/^struct heterogeneous_system : T {};$/;"	s	namespace:boost::units	inherits:T
heterogeneous_system_dim	/usr/include/boost/units/heterogeneous_system.hpp	/^struct heterogeneous_system_dim$/;"	s	namespace:boost::units
heterogeneous_system_dim_tag	/usr/include/boost/units/heterogeneous_system.hpp	/^struct heterogeneous_system_dim_tag {};$/;"	s	namespace:boost::units
heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct heterogeneous_system_impl$/;"	s	namespace:boost::units
homogeneous_system	/usr/include/boost/units/homogeneous_system.hpp	/^struct homogeneous_system {$/;"	s	namespace:boost::units
hour_base_unit	/usr/include/boost/units/base_units/metric/hour.hpp	/^typedef scaled_base_unit<boost::units::si::second_base_unit, scale<60, static_rational<2> > > hour_base_unit;$/;"	t	namespace:boost::units::metric
hundredweight_base_unit	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<112, static_rational<1> > > hundredweight_base_unit;$/;"	t	namespace:boost::units::imperial
hundredweight_base_unit	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<100, static_rational<1> > > hundredweight_base_unit;$/;"	t	namespace:boost::units::us
identity_pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef IdentityPivot identity_pivot_row;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
identity_pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef transformed_identity_equation identity_pivot_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
identity_pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::identity_pivot_row identity_pivot_row;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
identity_pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::identity_pivot_row identity_pivot_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > identity_result;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > identity_result;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > identity_result;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type identity_result;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type identity_result;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename next::identity_pivot_row, typename next::identity_result> identity_result;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
identity_result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::identity_result identity_result;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
illuminance	/usr/include/boost/units/systems/si/illuminance.hpp	/^typedef unit<illuminance_dimension,si::system>      illuminance;$/;"	t	namespace:boost::units::si
illuminance_dimension	/usr/include/boost/units/physical_dimensions/illuminance.hpp	/^                          solid_angle_base_dimension,1>::type illuminance_dimension;$/;"	t	namespace:boost::units
impedance	/usr/include/boost/units/systems/si/impedance.hpp	/^typedef unit<impedance_dimension,si::system>    impedance;$/;"	t	namespace:boost::units::si
impedance_dimension	/usr/include/boost/units/physical_dimensions/impedance.hpp	/^                          current_base_dimension,-2>::type impedance_dimension;          $/;"	t	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/foot.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/gill.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/grain.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/inch.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/league.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/mile.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/quart.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/stone.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/thou.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
imperial	/usr/include/boost/units/base_units/imperial/ton.hpp	/^namespace imperial {$/;"	n	namespace:boost::units
impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename get_default_conversion_impl<system_list::size::value>::template apply<system_list> impl;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
impl	/usr/include/boost/units/pow.hpp	/^    typedef detail::static_rational_power_impl<static_rational<N, D>, internal_type> impl;$/;"	t	struct:boost::units::power_typeof_helper	access:public
inch_base_unit	/usr/include/boost/units/base_units/imperial/inch.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<36, static_rational<-1> > > inch_base_unit;$/;"	t	namespace:boost::units::imperial
inch_base_unit	/usr/include/boost/units/base_units/us/inch.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<36, static_rational<-1> > > inch_base_unit;$/;"	t	namespace:boost::units::us
inconsistent	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct inconsistent {};$/;"	s	namespace:boost::units::detail
inductance	/usr/include/boost/units/systems/si/inductance.hpp	/^typedef unit<inductance_dimension,si::system>    inductance;$/;"	t	namespace:boost::units::si
inductance_dimension	/usr/include/boost/units/physical_dimensions/inductance.hpp	/^                          current_base_dimension,-2>::type inductance_dimension;       $/;"	t	namespace:boost::units
infinity	/usr/include/boost/units/limits.hpp	/^        static quantity_type infinity()  { return(quantity_type::from_value(std::numeric_limits<T>::infinity())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
initialized	/usr/include/boost/units/io.hpp	/^    static bool initialized;$/;"	m	struct:boost::units::detail::xalloc_key_holder	access:public
initialized	/usr/include/boost/units/io.hpp	/^bool xalloc_key_holder<b>::initialized = 0;$/;"	m	class:boost::units::detail::xalloc_key_holder
insertion_sort	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort$/;"	s	namespace:boost::units::detail
insertion_sort_comparison_impl	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort_comparison_impl<false> {$/;"	s	namespace:boost::units::detail
insertion_sort_comparison_impl	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort_comparison_impl<true> {$/;"	s	namespace:boost::units::detail
insertion_sort_dims_comparison_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_comparison_impl<false> {$/;"	s	namespace:boost::units::detail
insertion_sort_dims_comparison_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_comparison_impl<true> {$/;"	s	namespace:boost::units::detail
insertion_sort_dims_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_impl {$/;"	s	namespace:boost::units::detail
insertion_sort_dims_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_impl<0> {$/;"	s	namespace:boost::units::detail
insertion_sort_dims_insert	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_insert {$/;"	s	namespace:boost::units::detail
insertion_sort_dims_insert	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_insert<0> {$/;"	s	namespace:boost::units::detail
insertion_sort_dims_mpl_sequence	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_mpl_sequence {$/;"	s	namespace:boost::units::detail
insertion_sort_dims_mpl_sequence	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct insertion_sort_dims_mpl_sequence<0> {$/;"	s	namespace:boost::units::detail
insertion_sort_impl	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort_impl {$/;"	s	namespace:boost::units::detail
insertion_sort_impl	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort_impl<0> {$/;"	s	namespace:boost::units::detail
insertion_sort_insert	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort_insert {$/;"	s	namespace:boost::units::detail
insertion_sort_insert	/usr/include/boost/units/detail/sort.hpp	/^struct insertion_sort_insert<0> {$/;"	s	namespace:boost::units::detail
integer_type	/usr/include/boost/units/static_rational.hpp	/^typedef long   integer_type;$/;"	t	namespace:boost::units
internal_type	/usr/include/boost/units/pow.hpp	/^    typedef typename mpl::if_<boost::is_integral<T>, double, T>::type internal_type;$/;"	t	struct:boost::units::power_typeof_helper	access:public
inverse_amount	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<dimensionless,amount>::type inverse_amount;$/;"	t	namespace:boost::units::si::constants::codata
invert_handle_after_pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_handle_after_pivot_row {$/;"	s	namespace:boost::units::detail
invert_handle_after_pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_handle_after_pivot_row<0> {$/;"	s	namespace:boost::units::detail
invert_handle_inital_rows	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_handle_inital_rows {$/;"	s	namespace:boost::units::detail
invert_handle_inital_rows	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_handle_inital_rows<0> {$/;"	s	namespace:boost::units::detail
invert_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_impl {$/;"	s	namespace:boost::units::detail
invert_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_impl<0> {$/;"	s	namespace:boost::units::detail
invert_strip_leading_zeroes	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_strip_leading_zeroes<false, false> {$/;"	s	namespace:boost::units::detail
invert_strip_leading_zeroes	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_strip_leading_zeroes<false, true> {$/;"	s	namespace:boost::units::detail
invert_strip_leading_zeroes	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_strip_leading_zeroes<true, false> {$/;"	s	namespace:boost::units::detail
invert_strip_leading_zeroes	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct invert_strip_leading_zeroes<true, true> {$/;"	s	namespace:boost::units::detail
invertible	/usr/include/boost/units/detail/linear_algebra.hpp	/^    >::type invertible;$/;"	t	struct:boost::units::detail::make_square_and_invert	access:public
is_base_dimension_unit	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct is_base_dimension_unit {$/;"	s	namespace:boost::units::detail
is_base_dimension_unit	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct is_base_dimension_unit<list<dim<T, static_rational<1> >, dimensionless_type> > {$/;"	s	namespace:boost::units::detail
is_base_unit	/usr/include/boost/units/quantity.hpp	/^struct is_base_unit : mpl::false_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::false_
is_base_unit	/usr/include/boost/units/quantity.hpp	/^struct is_base_unit<T, typename T::boost_units_is_base_unit_type> : mpl::true_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::true_
is_bounded	/usr/include/boost/units/limits.hpp	/^        static const bool is_bounded = std::numeric_limits<T>::is_bounded;$/;"	m	class:std::numeric_limits	access:public
is_default_string	/usr/include/boost/units/io.hpp	/^    bool is_default_string(const std::string& str, const Unit& u) {$/;"	f	struct:boost::units::detail::format_name_impl	access:public	signature:(const std::string& str, const Unit& u)
is_default_string	/usr/include/boost/units/io.hpp	/^    bool is_default_string(const std::string& str, const Unit& u) {$/;"	f	struct:boost::units::detail::format_symbol_impl	access:public	signature:(const std::string& str, const Unit& u)
is_default_string	/usr/include/boost/units/io.hpp	/^    bool is_default_string(const std::string&, const Unit&) {$/;"	f	struct:boost::units::detail::format_raw_name_impl	access:public	signature:(const std::string&, const Unit&)
is_default_string	/usr/include/boost/units/io.hpp	/^    bool is_default_string(const std::string&, const Unit&) {$/;"	f	struct:boost::units::detail::format_raw_symbol_impl	access:public	signature:(const std::string&, const Unit&)
is_defined	/usr/include/boost/units/detail/absolute_impl.hpp	/^    static const bool is_defined = false;$/;"	m	struct:boost::units::detail::undefined_affine_conversion_base	access:public
is_defined	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static const bool is_defined = false;$/;"	m	struct:boost::units::no_default_conversion	access:public
is_defined	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static const bool is_defined = false;$/;"	m	struct:boost::units::undefined_base_unit_converter_base	access:public
is_defined	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static const bool is_defined = true;$/;"	m	struct:boost::units::base_unit_converter_base	access:public
is_dim	/usr/include/boost/units/is_dim.hpp	/^struct is_dim :$/;"	s	namespace:boost::units	inherits:mpl::false_
is_dim	/usr/include/boost/units/is_dim.hpp	/^struct is_dim< dim<T,V> > :$/;"	s	namespace:boost::units	inherits:mpl::true_
is_dimension_list	/usr/include/boost/units/is_dimension_list.hpp	/^struct is_dimension_list :$/;"	s	namespace:boost::units	inherits:mpl::false_
is_dimension_list	/usr/include/boost/units/is_dimension_list.hpp	/^struct is_dimension_list<dimensionless_type> :$/;"	s	namespace:boost::units	inherits:mpl::true_
is_dimension_list	/usr/include/boost/units/is_dimension_list.hpp	/^struct is_dimension_list<list<Item, Next> > :$/;"	s	namespace:boost::units	inherits:mpl::true_
is_dimensionless	/usr/include/boost/units/is_dimensionless.hpp	/^struct is_dimensionless :$/;"	s	namespace:boost::units	inherits:mpl::false_
is_dimensionless	/usr/include/boost/units/is_dimensionless.hpp	/^struct is_dimensionless< quantity<Unit,Y> > :$/;"	s	namespace:boost::units	inherits:is_dimensionless
is_dimensionless	/usr/include/boost/units/is_dimensionless.hpp	/^struct is_dimensionless< unit<dimensionless_type,System> > :$/;"	s	namespace:boost::units	inherits:mpl::true_
is_dimensionless_quantity	/usr/include/boost/units/is_dimensionless_quantity.hpp	/^struct is_dimensionless_quantity :$/;"	s	namespace:boost::units	inherits:is_quantity_of_dimension
is_dimensionless_system	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct is_dimensionless_system : mpl::false_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::false_
is_dimensionless_system	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct is_dimensionless_system<System, typename void_if_dimensionless<System>::type> : mpl::true_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::true_
is_dimensionless_unit	/usr/include/boost/units/is_dimensionless_unit.hpp	/^struct is_dimensionless_unit :$/;"	s	namespace:boost::units	inherits:is_unit_of_dimension
is_empty_dim	/usr/include/boost/units/detail/dim_impl.hpp	/^struct is_empty_dim< dim<T, V> > :$/;"	s	namespace:boost::units::detail	inherits:mpl::false_
is_empty_dim	/usr/include/boost/units/detail/dim_impl.hpp	/^struct is_empty_dim< dim<T, static_rational<0, 1> > > :$/;"	s	namespace:boost::units::detail	inherits:mpl::true_
is_empty_dim	/usr/include/boost/units/heterogeneous_system.hpp	/^struct is_empty_dim<heterogeneous_system_dim<Unit1,Exponent1> > : detail::is_zero<Exponent1> {};$/;"	s	namespace:boost::units::detail	inherits:detail::is_zero
is_exact	/usr/include/boost/units/limits.hpp	/^        static const bool is_exact = std::numeric_limits<T>::is_exact;$/;"	m	class:std::numeric_limits	access:public
is_iec559	/usr/include/boost/units/limits.hpp	/^        static const bool is_iec559 = std::numeric_limits<T>::is_iec559;$/;"	m	class:std::numeric_limits	access:public
is_implicitly_convertible	/usr/include/boost/units/unit.hpp	/^struct is_implicitly_convertible :$/;"	s	namespace:boost::units	inherits:boost::is_same
is_integer	/usr/include/boost/units/limits.hpp	/^        static const bool is_integer = std::numeric_limits<T>::is_integer;$/;"	m	class:std::numeric_limits	access:public
is_modulo	/usr/include/boost/units/limits.hpp	/^        static const bool is_modulo = std::numeric_limits<T>::is_modulo;$/;"	m	class:std::numeric_limits	access:public
is_narrowing_conversion_impl	/usr/include/boost/units/quantity.hpp	/^struct is_narrowing_conversion_impl : mpl::bool_<(sizeof(Source) > sizeof(Destination))> {};$/;"	s	namespace:boost::units::detail	inherits:mpl::bool_sizeof,Destination
is_non_narrowing_conversion	/usr/include/boost/units/quantity.hpp	/^struct is_non_narrowing_conversion :$/;"	s	namespace:boost::units::detail	inherits:mpl::and_
is_non_narrowing_conversion	/usr/include/boost/units/quantity.hpp	/^struct is_non_narrowing_conversion<long double, double> : mpl::false_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::false_
is_quantity	/usr/include/boost/units/is_quantity.hpp	/^struct is_quantity :$/;"	s	namespace:boost::units	inherits:mpl::false_
is_quantity	/usr/include/boost/units/is_quantity.hpp	/^struct is_quantity< quantity<Unit,Y> > : $/;"	s	namespace:boost::units	inherits:mpl::true_
is_quantity_of_dimension	/usr/include/boost/units/is_quantity_of_dimension.hpp	/^struct is_quantity_of_dimension :$/;"	s	namespace:boost::units	inherits:mpl::false_
is_quantity_of_dimension	/usr/include/boost/units/is_quantity_of_dimension.hpp	/^struct is_quantity_of_dimension< quantity< Unit,Y>,Dim > :$/;"	s	namespace:boost::units	inherits:is_unit_of_dimension
is_quantity_of_system	/usr/include/boost/units/is_quantity_of_system.hpp	/^struct is_quantity_of_system :$/;"	s	namespace:boost::units	inherits:mpl::false_
is_quantity_of_system	/usr/include/boost/units/is_quantity_of_system.hpp	/^struct is_quantity_of_system< quantity< Unit,Y>,System > :$/;"	s	namespace:boost::units	inherits:is_unit_of_system
is_signed	/usr/include/boost/units/limits.hpp	/^        static const bool is_signed = std::numeric_limits<T>::is_signed;$/;"	m	class:std::numeric_limits	access:public
is_simple_system	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct is_simple_system {$/;"	s	namespace:boost::units::detail
is_simple_system_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct is_simple_system_impl {$/;"	s	namespace:boost::units::detail
is_simple_system_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct is_simple_system_impl<0> {$/;"	s	namespace:boost::units::detail
is_specialized	/usr/include/boost/units/limits.hpp	/^        static const bool is_specialized = std::numeric_limits<T>::is_specialized;$/;"	m	class:std::numeric_limits	access:public
is_unit	/usr/include/boost/units/is_unit.hpp	/^struct is_unit : $/;"	s	namespace:boost::units	inherits:mpl::false_
is_unit	/usr/include/boost/units/is_unit.hpp	/^struct is_unit< unit<Dim,System> > :$/;"	s	namespace:boost::units	inherits:mpl::true_
is_unit_of_dimension	/usr/include/boost/units/is_unit_of_dimension.hpp	/^struct is_unit_of_dimension :$/;"	s	namespace:boost::units	inherits:mpl::false_
is_unit_of_dimension	/usr/include/boost/units/is_unit_of_dimension.hpp	/^struct is_unit_of_dimension< absolute<unit<Dim,System> >,Dim > :$/;"	s	namespace:boost::units	inherits:mpl::true_
is_unit_of_dimension	/usr/include/boost/units/is_unit_of_dimension.hpp	/^struct is_unit_of_dimension< unit<Dim,System>,Dim > :$/;"	s	namespace:boost::units	inherits:mpl::true_
is_unit_of_system	/usr/include/boost/units/is_unit_of_system.hpp	/^struct is_unit_of_system :$/;"	s	namespace:boost::units	inherits:mpl::false_
is_unit_of_system	/usr/include/boost/units/is_unit_of_system.hpp	/^struct is_unit_of_system< absolute<unit<Dim,System> >,System > :$/;"	s	namespace:boost::units	inherits:mpl::true_
is_unit_of_system	/usr/include/boost/units/is_unit_of_system.hpp	/^struct is_unit_of_system< unit<Dim,System>,System > :$/;"	s	namespace:boost::units	inherits:mpl::true_
is_zero	/usr/include/boost/units/heterogeneous_system.hpp	/^struct is_zero : mpl::false_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::false_
is_zero	/usr/include/boost/units/heterogeneous_system.hpp	/^struct is_zero<static_rational<0> > : mpl::true_ {};$/;"	s	namespace:boost::units::detail	inherits:mpl::true_
item	/usr/include/boost/units/detail/dimension_list.hpp	/^    typedef Item                        item;$/;"	t	struct:boost::units::list	access:public
item	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef T item;$/;"	t	struct:boost::units::detail::set	access:public
item	/usr/include/boost/units/detail/push_front_or_add.hpp	/^        typedef typename mpl::plus<T, typename Sequence::item>::type item;$/;"	t	struct:boost::units::detail::push_front_or_add_impl::apply	access:public
iterator_to_list	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct iterator_to_list$/;"	s	namespace:boost::units::detail
iterator_to_list	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct iterator_to_list<0>$/;"	s	namespace:boost::units::detail
kelvin_base_unit	/usr/include/boost/units/base_units/si/kelvin.hpp	/^struct kelvin_base_unit : public base_unit<kelvin_base_unit, temperature_dimension, -5>$/;"	s	namespace:boost::units::si	inherits:base_unit
kilogram_base_unit	/usr/include/boost/units/base_units/si/kilogram.hpp	/^typedef scaled_base_unit<boost::units::cgs::gram_base_unit, scale<10, static_rational<3> > > kilogram_base_unit;$/;"	t	namespace:boost::units::si
kinematic_viscosity	/usr/include/boost/units/systems/cgs/kinematic_viscosity.hpp	/^typedef unit<kinematic_viscosity_dimension,cgs::system>     kinematic_viscosity;$/;"	t	namespace:boost::units::cgs
kinematic_viscosity	/usr/include/boost/units/systems/si/kinematic_viscosity.hpp	/^typedef unit<kinematic_viscosity_dimension,si::system>     kinematic_viscosity;$/;"	t	namespace:boost::units::si
kinematic_viscosity_dimension	/usr/include/boost/units/physical_dimensions/kinematic_viscosity.hpp	/^                          time_base_dimension,-1>::type kinematic_viscosity_dimension;$/;"	t	namespace:boost::units
lambda	/usr/include/boost/units/lambda.hpp	/^namespace lambda {$/;"	n	namespace:boost
ldexp	/usr/include/boost/units/cmath.hpp	/^ldexp(const quantity<Unit, Y>& q,const Int& ex)$/;"	f	namespace:boost::units	signature:(const quantity<Unit, Y>& q,const Int& ex)
league_base_unit	/usr/include/boost/units/base_units/imperial/league.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<5280, static_rational<1> > > league_base_unit;$/;"	t	namespace:boost::units::imperial
length	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<length_dimension,system>                length;                 \/\/\/< abstract unit of length$/;"	t	namespace:boost::units::abstract
length	/usr/include/boost/units/systems/cgs/length.hpp	/^typedef unit<length_dimension,cgs::system>   length;$/;"	t	namespace:boost::units::cgs
length	/usr/include/boost/units/systems/si/length.hpp	/^typedef unit<length_dimension,si::system>    length;$/;"	t	namespace:boost::units::si
length_base_dimension	/usr/include/boost/units/physical_dimensions/length.hpp	/^struct length_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
length_dimension	/usr/include/boost/units/physical_dimensions/length.hpp	/^typedef length_base_dimension::dimension_type length_dimension;$/;"	t	namespace:boost::units
length_temperature	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef multiply_typeof_helper<length,temperature>::type length_temperature;$/;"	t	namespace:boost::units::si::constants::codata
length_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct length_unit_tag : base_unit<length_unit_tag, length_dimension, -30> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
less_impl	/usr/include/boost/units/detail/dim_impl.hpp	/^struct less_impl<boost::units::detail::dim_tag, boost::units::detail::dim_tag>$/;"	s	namespace:boost::mpl
less_impl	/usr/include/boost/units/detail/ordinal.hpp	/^struct less_impl<units::detail::ordinal_tag, units::detail::ordinal_tag> {$/;"	s	namespace:boost::mpl
less_impl	/usr/include/boost/units/detail/unscale.hpp	/^struct less_impl<boost::units::scale_dim_tag, boost::units::scale_dim_tag>$/;"	s	namespace:boost::mpl
less_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct less_impl<boost::units::heterogeneous_system_dim_tag, boost::units::heterogeneous_system_dim_tag>$/;"	s	namespace:boost::mpl
less_impl	/usr/include/boost/units/scaled_base_unit.hpp	/^struct less_impl<boost::units::scaled_base_unit_tag, Tag>$/;"	s	namespace:boost::mpl
less_impl	/usr/include/boost/units/scaled_base_unit.hpp	/^struct less_impl<boost::units::scaled_base_unit_tag, boost::units::scaled_base_unit_tag>$/;"	s	namespace:boost::mpl
less_impl	/usr/include/boost/units/static_rational.hpp	/^struct less_impl<boost::units::detail::static_rational_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
light_day_base_unit	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^typedef scaled_base_unit<boost::units::astronomical::light_second_base_unit, scale<86400, static_rational<1> > > light_day_base_unit;$/;"	t	namespace:boost::units::astronomical
light_hour_base_unit	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^typedef scaled_base_unit<boost::units::astronomical::light_second_base_unit, scale<3600, static_rational<1> > > light_hour_base_unit;$/;"	t	namespace:boost::units::astronomical
light_minute_base_unit	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^typedef scaled_base_unit<boost::units::astronomical::light_second_base_unit, scale<60, static_rational<1> > > light_minute_base_unit;$/;"	t	namespace:boost::units::astronomical
light_year_base_unit	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^typedef scaled_base_unit<boost::units::astronomical::light_second_base_unit, scale<31557600, static_rational<1> > > light_year_base_unit;$/;"	t	namespace:boost::units::astronomical
list	/usr/include/boost/units/detail/dimension_list.hpp	/^struct list$/;"	s	namespace:boost::units
log	/usr/include/boost/units/cmath.hpp	/^log(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q)
log10	/usr/include/boost/units/cmath.hpp	/^log10(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q)
lookup	/usr/include/boost/units/detail/linear_algebra.hpp	/^    static set_no lookup(...);$/;"	p	struct:boost::units::detail::set_end	access:public	signature:(....)
lookup	/usr/include/boost/units/detail/linear_algebra.hpp	/^    static set_yes lookup(wrap<T>*);$/;"	p	struct:boost::units::detail::set	access:public	signature:(wrap<T>*)
lower_bound	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type lower_bound() const { return Base().lower_bound(); } $/;"	f	struct:boost::units::constant	access:public	signature:() const
lower_bound	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type lower_bound() const { return Base().lower_bound(); } $/;"	f	struct:boost::units::physical_constant	access:public	signature:() const
luminance_dimension	/usr/include/boost/units/physical_dimensions/luminance.hpp	/^                          luminous_intensity_base_dimension,1>::type luminance_dimension;$/;"	t	namespace:boost::units
luminous_flux	/usr/include/boost/units/systems/si/luminous_flux.hpp	/^typedef unit<luminous_flux_dimension,si::system>      luminous_flux;$/;"	t	namespace:boost::units::si
luminous_flux_dimension	/usr/include/boost/units/physical_dimensions/luminous_flux.hpp	/^                          solid_angle_base_dimension,1>::type luminous_flux_dimension;$/;"	t	namespace:boost::units
luminous_intensity	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<luminous_intensity_dimension,system>    luminous_intensity;     \/\/\/< abstract unit of luminous intensity$/;"	t	namespace:boost::units::abstract
luminous_intensity	/usr/include/boost/units/systems/si/luminous_intensity.hpp	/^typedef unit<luminous_intensity_dimension,si::system>      luminous_intensity;$/;"	t	namespace:boost::units::si
luminous_intensity_base_dimension	/usr/include/boost/units/physical_dimensions/luminous_intensity.hpp	/^struct luminous_intensity_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
luminous_intensity_dimension	/usr/include/boost/units/physical_dimensions/luminous_intensity.hpp	/^typedef luminous_intensity_base_dimension::dimension_type luminous_intensity_dimension;$/;"	t	namespace:boost::units
luminous_intensity_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct luminous_intensity_unit_tag : base_unit<luminous_intensity_unit_tag, luminous_intensity_dimension, -24> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
magnetic_field_intensity	/usr/include/boost/units/systems/si/magnetic_field_intensity.hpp	/^typedef unit<magnetic_field_intensity_dimension,si::system>    magnetic_field_intensity;$/;"	t	namespace:boost::units::si
magnetic_field_intensity_dimension	/usr/include/boost/units/physical_dimensions/magnetic_field_intensity.hpp	/^                          current_base_dimension,1>::type magnetic_field_intensity_dimension;      $/;"	t	namespace:boost::units
magnetic_flux	/usr/include/boost/units/systems/si/magnetic_flux.hpp	/^typedef unit<magnetic_flux_dimension,si::system>    magnetic_flux;$/;"	t	namespace:boost::units::si
magnetic_flux_density	/usr/include/boost/units/systems/si/magnetic_flux_density.hpp	/^typedef unit<magnetic_flux_density_dimension,si::system>    magnetic_flux_density;$/;"	t	namespace:boost::units::si
magnetic_flux_density_dimension	/usr/include/boost/units/physical_dimensions/magnetic_flux_density.hpp	/^                          current_base_dimension,-1>::type magnetic_flux_density_dimension;        $/;"	t	namespace:boost::units
magnetic_flux_dimension	/usr/include/boost/units/physical_dimensions/magnetic_flux.hpp	/^                          current_base_dimension,-1>::type magnetic_flux_dimension;           $/;"	t	namespace:boost::units
make	/usr/include/boost/units/operators.hpp	/^template<class T> T make();$/;"	p	namespace:boost::units::typeof_	signature:()
make_dimension_list	/usr/include/boost/units/dimension.hpp	/^struct make_dimension_list$/;"	s	namespace:boost::units
make_heterogeneous_system	/usr/include/boost/units/heterogeneous_system.hpp	/^struct make_heterogeneous_system$/;"	s	namespace:boost::units::detail
make_heterogeneous_system	/usr/include/boost/units/heterogeneous_system.hpp	/^struct make_heterogeneous_system<Dimensions, heterogeneous_system<T> >$/;"	s	namespace:boost::units::detail
make_heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct make_heterogeneous_system_impl$/;"	s	namespace:boost::units::detail
make_heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct make_heterogeneous_system_impl<0>$/;"	s	namespace:boost::units::detail
make_homogeneous_system	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system {$/;"	s	namespace:boost::units::detail
make_homogeneous_system_func	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system_func<T, false> {$/;"	s	namespace:boost::units::detail
make_homogeneous_system_func	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system_func<T, true> {$/;"	s	namespace:boost::units::detail
make_homogeneous_system_func	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system_func<no_solution, false> {$/;"	s	namespace:boost::units::detail
make_homogeneous_system_func	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system_func<no_solution, true> {$/;"	s	namespace:boost::units::detail
make_homogeneous_system_impl	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system_impl {$/;"	s	namespace:boost::units::detail
make_homogeneous_system_impl	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_homogeneous_system_impl<0> {$/;"	s	namespace:boost::units::detail
make_identity	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct make_identity {$/;"	s	namespace:boost::units::detail
make_identity	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct make_identity<0> {$/;"	s	namespace:boost::units::detail
make_integral_c	/usr/include/boost/units/static_rational.hpp	/^struct make_integral_c {$/;"	s	namespace:boost::units
make_one	/usr/include/boost/units/detail/one.hpp	/^inline one make_one() {$/;"	f	namespace:boost::units	signature:()
make_scaled_unit	/usr/include/boost/units/make_scaled_unit.hpp	/^struct make_scaled_unit {$/;"	s	namespace:boost::units
make_scaled_unit	/usr/include/boost/units/make_scaled_unit.hpp	/^struct make_scaled_unit<unit<Dimension, heterogeneous_system<heterogeneous_system_impl<UnitList, Dimension, OldScale> > >, Scale> {$/;"	s	namespace:boost::units
make_scaled_unit	/usr/include/boost/units/make_scaled_unit.hpp	/^struct make_scaled_unit<unit<Dimension, heterogeneous_system<heterogeneous_system_impl<UnitList, Dimension, OldScale> > >, scale<Base, static_rational<0> > > {$/;"	s	namespace:boost::units
make_solve_list_first_non_zero	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_first_non_zero {$/;"	s	namespace:boost::units::detail
make_solve_list_first_non_zero	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_first_non_zero<static_rational<0> > {$/;"	s	namespace:boost::units::detail
make_solve_list_internal_zero	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_internal_zero {$/;"	s	namespace:boost::units::detail
make_solve_list_internal_zero	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_internal_zero<static_rational<0> > {$/;"	s	namespace:boost::units::detail
make_solve_list_leading_zeroes	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_leading_zeroes {$/;"	s	namespace:boost::units::detail
make_solve_list_leading_zeroes	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_leading_zeroes<0> {$/;"	s	namespace:boost::units::detail
make_solve_list_normal	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_normal {$/;"	s	namespace:boost::units::detail
make_solve_list_normal	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct make_solve_list_normal<0> {$/;"	s	namespace:boost::units::detail
make_square_and_invert	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct make_square_and_invert {$/;"	s	namespace:boost::units::detail
make_system	/usr/include/boost/units/make_system.hpp	/^struct make_system$/;"	s	namespace:boost::units
make_zero_vector	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct make_zero_vector {$/;"	s	namespace:boost::units::detail
make_zero_vector	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct make_zero_vector<0> {$/;"	s	namespace:boost::units::detail
mass	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<mass_dimension,system>                  mass;                   \/\/\/< abstract unit of mass$/;"	t	namespace:boost::units::abstract
mass	/usr/include/boost/units/systems/cgs/mass.hpp	/^typedef unit<mass_dimension,cgs::system>     mass;$/;"	t	namespace:boost::units::cgs
mass	/usr/include/boost/units/systems/si/mass.hpp	/^typedef unit<mass_dimension,si::system>      mass;$/;"	t	namespace:boost::units::si
mass_base_dimension	/usr/include/boost/units/physical_dimensions/mass.hpp	/^struct mass_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
mass_density	/usr/include/boost/units/systems/cgs/mass_density.hpp	/^typedef unit<mass_density_dimension,cgs::system>     mass_density;$/;"	t	namespace:boost::units::cgs
mass_density	/usr/include/boost/units/systems/si/mass_density.hpp	/^typedef unit<mass_density_dimension,si::system>  mass_density;$/;"	t	namespace:boost::units::si
mass_density_dimension	/usr/include/boost/units/physical_dimensions/mass_density.hpp	/^                          mass_base_dimension,1>::type mass_density_dimension;            $/;"	t	namespace:boost::units
mass_dimension	/usr/include/boost/units/physical_dimensions/mass.hpp	/^typedef mass_base_dimension::dimension_type   mass_dimension;           $/;"	t	namespace:boost::units
mass_over_amount	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<mass,amount>::type mass_over_amount;$/;"	t	namespace:boost::units::si::constants::codata
mass_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct mass_unit_tag : base_unit<mass_unit_tag, mass_dimension, -29> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^    >::type matrix;$/;"	t	struct:boost::units::detail::normalize_units	access:public
max	/usr/include/boost/units/limits.hpp	/^        static quantity_type (max)() { return(quantity_type::from_value((std::numeric_limits<T>::max)())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
max_exponent	/usr/include/boost/units/limits.hpp	/^        static const int max_exponent = std::numeric_limits<T>::max_exponent;$/;"	m	class:std::numeric_limits	access:public
max_exponent10	/usr/include/boost/units/limits.hpp	/^        static const int max_exponent10 = std::numeric_limits<T>::max_exponent10;$/;"	m	class:std::numeric_limits	access:public
maybe_parenthesize	/usr/include/boost/units/io.hpp	/^maybe_parenthesize(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<Units, Dimension, Scale> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<Units, Dimension, Scale> > >&, Subformatter f)
maybe_parenthesize	/usr/include/boost/units/io.hpp	/^maybe_parenthesize(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<list<heterogeneous_system_dim<Unit, static_rational<1> >,dimensionless_type>, Dimension, Scale> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<list<heterogeneous_system_dim<Unit, static_rational<1> >,dimensionless_type>, Dimension, Scale> > >&, Subformatter f)
maybe_print_prefixed	/usr/include/boost/units/io.hpp	/^void maybe_print_prefixed(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q, mpl::false_)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q, mpl::false_)
maybe_print_prefixed	/usr/include/boost/units/io.hpp	/^void maybe_print_prefixed(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q, mpl::true_)$/;"	f	namespace:boost::units::detail	signature:(std::basic_ostream<CharT, Traits>& os, const quantity<Unit, T>& q, mpl::true_)
merge_dimensions	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions$/;"	s	namespace:boost::units::detail
merge_dimensions_func	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_func<false, false> {$/;"	s	namespace:boost::units::detail
merge_dimensions_func	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_func<false, true> {$/;"	s	namespace:boost::units::detail
merge_dimensions_func	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_func<true, false>$/;"	s	namespace:boost::units::detail
merge_dimensions_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_impl {$/;"	s	namespace:boost::units::detail
merge_dimensions_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_impl<0, 0>$/;"	s	namespace:boost::units::detail
merge_dimensions_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_impl<0, N>$/;"	s	namespace:boost::units::detail
merge_dimensions_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct merge_dimensions_impl<N, 0>$/;"	s	namespace:boost::units::detail
meter_base_unit	/usr/include/boost/units/base_units/si/meter.hpp	/^struct meter_base_unit : public base_unit<meter_base_unit, length_dimension, -9>$/;"	s	namespace:boost::units::si	inherits:base_unit
metric	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^namespace metric {$/;"	n	namespace:boost::units
metric	/usr/include/boost/units/base_units/metric/day.hpp	/^namespace metric {$/;"	n	namespace:boost::units
metric	/usr/include/boost/units/base_units/metric/fermi.hpp	/^namespace metric {$/;"	n	namespace:boost::units
metric	/usr/include/boost/units/base_units/metric/hour.hpp	/^namespace metric {$/;"	n	namespace:boost::units
metric	/usr/include/boost/units/base_units/metric/micron.hpp	/^namespace metric {$/;"	n	namespace:boost::units
metric	/usr/include/boost/units/base_units/metric/minute.hpp	/^namespace metric {$/;"	n	namespace:boost::units
metric	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^namespace metric {$/;"	n	namespace:boost::units
metric	/usr/include/boost/units/base_units/metric/ton.hpp	/^namespace metric {$/;"	n	namespace:boost::units
metric	/usr/include/boost/units/base_units/metric/year.hpp	/^namespace metric {$/;"	n	namespace:boost::units
micron_base_unit	/usr/include/boost/units/base_units/metric/micron.hpp	/^typedef scaled_base_unit<boost::units::si::meter_base_unit, scale<10, static_rational<-6> > >  micron_base_unit;$/;"	t	namespace:boost::units::metric
mil_base_unit	/usr/include/boost/units/base_units/us/mil.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<36000, static_rational<-1> > > mil_base_unit;$/;"	t	namespace:boost::units::us
mile_base_unit	/usr/include/boost/units/base_units/imperial/mile.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<1760, static_rational<1> > > mile_base_unit;$/;"	t	namespace:boost::units::imperial
mile_base_unit	/usr/include/boost/units/base_units/us/mile.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<1760, static_rational<1> > > mile_base_unit;$/;"	t	namespace:boost::units::us
min	/usr/include/boost/units/limits.hpp	/^        static quantity_type (min)() { return(quantity_type::from_value((std::numeric_limits<T>::min)())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
min_exponent	/usr/include/boost/units/limits.hpp	/^        static const int min_exponent = std::numeric_limits<T>::min_exponent;$/;"	m	class:std::numeric_limits	access:public
min_exponent10	/usr/include/boost/units/limits.hpp	/^        static const int min_exponent10 = std::numeric_limits<T>::min_exponent10;$/;"	m	class:std::numeric_limits	access:public
minim_base_unit	/usr/include/boost/units/base_units/us/minim.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<7680, static_rational<-1> > > minim_base_unit;$/;"	t	namespace:boost::units::us
minus_impl	/usr/include/boost/units/dim.hpp	/^struct minus_impl<boost::units::detail::dim_tag,boost::units::detail::dim_tag>$/;"	s	namespace:boost::mpl
minus_impl	/usr/include/boost/units/dimension.hpp	/^struct minus_impl<boost::units::detail::dimension_list_tag,boost::units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
minus_impl	/usr/include/boost/units/static_rational.hpp	/^struct minus_impl<boost::units::detail::static_rational_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
minute_base_unit	/usr/include/boost/units/base_units/metric/minute.hpp	/^typedef scaled_base_unit<boost::units::si::second_base_unit, scale<60, static_rational<1> > > minute_base_unit;$/;"	t	namespace:boost::units::metric
modf	/usr/include/boost/units/cmath.hpp	/^modf(const quantity<Unit, Y>& q1, quantity<Unit, Y>* q2)$/;"	f	namespace:boost::units	signature:(const quantity<Unit, Y>& q1, quantity<Unit, Y>* q2)
molar_energy_dimension	/usr/include/boost/units/physical_dimensions/molar_energy.hpp	/^                          amount_base_dimension,-1>::type molar_energy_dimension;                    $/;"	t	namespace:boost::units
molar_heat_capacity_dimension	/usr/include/boost/units/physical_dimensions/molar_heat_capacity.hpp	/^                          amount_base_dimension,-1>::type molar_heat_capacity_dimension;                    $/;"	t	namespace:boost::units
mole_base_unit	/usr/include/boost/units/base_units/si/mole.hpp	/^struct mole_base_unit : public base_unit<mole_base_unit, amount_dimension, -4>$/;"	s	namespace:boost::units::si	inherits:base_unit
moment_of_inertia	/usr/include/boost/units/systems/si/moment_of_inertia.hpp	/^typedef unit<moment_of_inertia_dimension,si::system>      moment_of_inertia;$/;"	t	namespace:boost::units::si
moment_of_inertia_dimension	/usr/include/boost/units/physical_dimensions/moment_of_inertia.hpp	/^                          plane_angle_base_dimension,-2>::type moment_of_inertia_dimension;                $/;"	t	namespace:boost::units
momentum	/usr/include/boost/units/systems/cgs/momentum.hpp	/^typedef unit<momentum_dimension,cgs::system>     momentum;$/;"	t	namespace:boost::units::cgs
momentum	/usr/include/boost/units/systems/si/momentum.hpp	/^typedef unit<momentum_dimension,si::system>  momentum;$/;"	t	namespace:boost::units::si
momentum_dimension	/usr/include/boost/units/physical_dimensions/momentum.hpp	/^                          time_base_dimension,-1>::type momentum_dimension;                $/;"	t	namespace:boost::units
mpl	/usr/include/boost/units/detail/dim_impl.hpp	/^namespace mpl {$/;"	n	namespace:boost
mpl	/usr/include/boost/units/detail/dimension_list.hpp	/^namespace mpl {$/;"	n	namespace:boost
mpl	/usr/include/boost/units/detail/ordinal.hpp	/^namespace mpl {$/;"	n	namespace:boost
mpl	/usr/include/boost/units/detail/unscale.hpp	/^namespace mpl {$/;"	n	namespace:boost
mpl	/usr/include/boost/units/dim.hpp	/^namespace mpl {$/;"	n	namespace:boost
mpl	/usr/include/boost/units/dimension.hpp	/^namespace mpl {$/;"	n	namespace:boost
mpl	/usr/include/boost/units/heterogeneous_system.hpp	/^namespace mpl {$/;"	n	namespace:boost
mpl	/usr/include/boost/units/scaled_base_unit.hpp	/^namespace mpl {$/;"	n	namespace:boost
mpl	/usr/include/boost/units/static_rational.hpp	/^namespace mpl {$/;"	n	namespace:boost
multiply_add_units	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct multiply_add_units {$/;"	s	namespace:boost::units::detail
multiply_add_units	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct multiply_add_units<1> {$/;"	s	namespace:boost::units::detail
multiply_add_units_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct multiply_add_units_impl {$/;"	s	namespace:boost::units::detail
multiply_add_units_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct multiply_add_units_impl<0> {$/;"	s	namespace:boost::units::detail
multiply_systems	/usr/include/boost/units/heterogeneous_system.hpp	/^struct multiply_systems$/;"	s	namespace:boost::units::detail
multiply_typeof_helper	/usr/include/boost/units/detail/one.hpp	/^struct multiply_typeof_helper<T, one>$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/detail/one.hpp	/^struct multiply_typeof_helper<one, T>$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/detail/one.hpp	/^struct multiply_typeof_helper<one, one>$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/lambda.hpp	/^    struct multiply_typeof_helper<boost::lambda::lambda_functor<Arg>, boost::units::absolute<boost::units::unit<Dim, System> > > {$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/lambda.hpp	/^    struct multiply_typeof_helper<boost::lambda::lambda_functor<Arg>, boost::units::unit<Dim, System> > {$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/lambda.hpp	/^    struct multiply_typeof_helper<boost::units::absolute<boost::units::unit<Dim, System> >, boost::lambda::lambda_functor<Arg> > {$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/lambda.hpp	/^    struct multiply_typeof_helper<boost::units::unit<Dim, System>, boost::lambda::lambda_functor<Arg> > {$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/operators.hpp	/^template<typename X,typename Y> struct multiply_typeof_helper   $/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< X,quantity<Unit,Y> >$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< X,unit<Dim,System> >$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< one,quantity<Unit,Y> >$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< quantity<Unit,X>,Y >$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< quantity<Unit,X>,one >$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< quantity<Unit,X>,unit<Dim,System> >$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< quantity<Unit1,X>,quantity<Unit2,Y> >$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< unit<Dim,System>,X >$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct multiply_typeof_helper< unit<Dim,System>,quantity<Unit,X> >$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct multiply_typeof_helper< unit<Dim1,heterogeneous_system<System1> >,$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct multiply_typeof_helper< unit<Dim1,homogeneous_system<System1> >,$/;"	s	namespace:boost::units
multiply_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct multiply_typeof_helper< unit<Dim1,homogeneous_system<System> >,$/;"	s	namespace:boost::units
nabs	/usr/include/boost/units/static_rational.hpp	/^        static const integer_type   nabs = static_abs<N>::value,$/;"	m	class:boost::units::static_rational	access:private
name	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^    static const char* name()   { return("arcminute"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^    static const char* name()   { return("arcsecond"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/angle/radian.hpp	/^    static std::string name()   { return("radian"); }$/;"	f	struct:boost::units::angle::radian_base_unit	access:public	signature:()
name	/usr/include/boost/units/base_units/angle/revolution.hpp	/^    static const char* name()   { return("revolution"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/angle/steradian.hpp	/^    static std::string name()   { return("steradian"); }$/;"	f	struct:boost::units::angle::steradian_base_unit	access:public	signature:()
name	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^    static const char* name()   { return("light day"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^    static const char* name()   { return("light hour"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^    static const char* name()   { return("light minute"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^    static const char* name()   { return("light year"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/cgs/gram.hpp	/^    static std::string name()    { return("gram"); }$/;"	f	struct:boost::units::cgs::gram_base_unit	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^    static const char* name()   { return("drachm"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^    static const char* name()   { return("fluid ounce (imp.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/foot.hpp	/^    static const char* name()   { return("foot"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^    static const char* name()   { return("furlong"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^    static const char* name()   { return("gallon (imp.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/gill.hpp	/^    static const char* name()   { return("gill (imp.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/grain.hpp	/^    static const char* name()   { return("grain"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^    static const char* name()   { return("hundredweight"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/inch.hpp	/^    static const char* name()   { return("inch"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/league.hpp	/^    static const char* name()   { return("league"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/mile.hpp	/^    static const char* name()   { return("mile"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^    static const char* name()   { return("ounce"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/quart.hpp	/^    static const char* name()   { return("quart (imp.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^    static const char* name()   { return("quarter"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/stone.hpp	/^    static const char* name()   { return("stone"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/thou.hpp	/^    static const char* name()   { return("thou"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/imperial/ton.hpp	/^    static const char* name()   { return("long ton"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^    static const char* name()   { return("angstrom"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/metric/day.hpp	/^    static const char* name()   { return("day"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/metric/fermi.hpp	/^    static const char* name()   { return("fermi"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/metric/hour.hpp	/^    static const char* name()   { return("hour"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/metric/micron.hpp	/^    static const char* name()   { return("micron"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/metric/minute.hpp	/^    static const char* name()   { return("minute"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^    static const char* name()   { return("nautical mile"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/metric/ton.hpp	/^    static const char* name()   { return("metric ton"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/metric/year.hpp	/^    static const char* name()   { return("Julian year"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/si/ampere.hpp	/^    static std::string name()   { return("ampere"); }$/;"	f	struct:boost::units::si::ampere_base_unit	access:public	signature:()
name	/usr/include/boost/units/base_units/si/candela.hpp	/^    static std::string name()   { return("candela"); }$/;"	f	struct:boost::units::si::candela_base_unit	access:public	signature:()
name	/usr/include/boost/units/base_units/si/kelvin.hpp	/^    static std::string name()   { return("kelvin"); }$/;"	f	struct:boost::units::si::kelvin_base_unit	access:public	signature:()
name	/usr/include/boost/units/base_units/si/meter.hpp	/^    static std::string name()   { return("meter"); }$/;"	f	struct:boost::units::si::meter_base_unit	access:public	signature:()
name	/usr/include/boost/units/base_units/si/mole.hpp	/^    static std::string name()   { return("mole"); }$/;"	f	struct:boost::units::si::mole_base_unit	access:public	signature:()
name	/usr/include/boost/units/base_units/si/second.hpp	/^    static std::string name()   { return("second"); }$/;"	f	struct:boost::units::si::second_base_unit	access:public	signature:()
name	/usr/include/boost/units/base_units/temperature/celsius.hpp	/^    static std::string name()   { return("celsius"); }$/;"	f	struct:boost::units::temperature::celsius_base_unit	access:public	signature:()
name	/usr/include/boost/units/base_units/temperature/fahrenheit.hpp	/^    static std::string name()   { return("fahrenheit"); }$/;"	f	struct:boost::units::temperature::fahrenheit_base_unit	access:public	signature:()
name	/usr/include/boost/units/base_units/us/cup.hpp	/^    static const char* name()   { return("cup"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/dram.hpp	/^    static const char* name()   { return("dram (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^    static const char* name()   { return("fluid dram (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^    static const char* name()   { return("fluid ounce (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/foot.hpp	/^    static const char* name()   { return("foot"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/gallon.hpp	/^    static const char* name()   { return("gallon (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/gill.hpp	/^    static const char* name()   { return("gill (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/grain.hpp	/^    static const char* name()   { return("grain"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^    static const char* name()   { return("hundredweight (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/inch.hpp	/^    static const char* name()   { return("inch"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/mil.hpp	/^    static const char* name()   { return("mil"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/mile.hpp	/^    static const char* name()   { return("mile"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/minim.hpp	/^    static const char* name()   { return("minim (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/ounce.hpp	/^    static const char* name()   { return("ounce"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/quart.hpp	/^    static const char* name()   { return("quart (U.S.)"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^    static const char* name()   { return("tablespoon"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^    static const char* name()   { return("teaspoon"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/base_units/us/ton.hpp	/^    static const char* name()   { return("short ton"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/io.hpp	/^    static std::string name()$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/scale.hpp	/^    static std::string name() { return(""); }$/;"	f	struct:boost::units::scale	access:public	signature:()
name	/usr/include/boost/units/scaled_base_unit.hpp	/^    static std::string name()$/;"	f	struct:boost::units::scaled_base_unit	access:public	signature:()
name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Amount]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Electric Current]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Length]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Luminous Intensity]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Mass]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Plane Angle]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Solid Angle]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Temperature]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string name()       { return "[Time]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
name_fmt	/usr/include/boost/units/io.hpp	/^    name_fmt = 1,           \/\/\/ output full unit names for base and derived units, for example "meter".$/;"	e	enum:boost::units::format_mode
name_format	/usr/include/boost/units/io.hpp	/^inline std::ios_base& name_format(std::ios_base& ios) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
name_string	/usr/include/boost/units/io.hpp	/^name_string(const unit<Dimension, System>&)$/;"	f	namespace:boost::units	signature:(const unit<Dimension, System>&)
name_string	/usr/include/boost/units/scale.hpp	/^std::string name_string(const scale<Base,Exponent>&)$/;"	f	namespace:boost::units	signature:(const scale<Base,Exponent>&)
name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::acceleration>::type&) { return "galileo"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::acceleration>::type&)
name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::current>::type&)   { return "biot"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::current>::type&)
name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::dynamic_viscosity>::type&) { return "poise"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::dynamic_viscosity>::type&)
name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::energy>::type&) { return "erg"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::energy>::type&)
name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::force>::type&) { return "dyne"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::force>::type&)
name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::kinematic_viscosity>::type&) { return "stoke"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::kinematic_viscosity>::type&)
name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::pressure>::type&) { return "barye"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::pressure>::type&)
name_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string name_string(const reduce_unit<cgs::wavenumber>::type&) { return "kayser"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::wavenumber>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::absorbed_dose>::type&) { return "gray"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::absorbed_dose>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::capacitance>::type&)   { return "farad"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::capacitance>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::catalytic_activity>::type&) { return "katal"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::catalytic_activity>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::conductance>::type&) { return "siemen"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::conductance>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::electric_charge>::type&) { return "coulomb"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::electric_charge>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::electric_potential>::type&) { return "volt"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::electric_potential>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::energy>::type&) { return "joule"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::energy>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::force>::type&) { return "newton"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::force>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::frequency>::type&) { return "hertz"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::frequency>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::illuminance>::type&) { return "lux"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::illuminance>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::inductance>::type&) { return "henry"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::inductance>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::luminous_flux>::type&) { return "lumen"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::luminous_flux>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::magnetic_flux>::type&) { return "weber"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::magnetic_flux>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::magnetic_flux_density>::type&) { return "tesla"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::magnetic_flux_density>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::power>::type&) { return "watt"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::power>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::pressure>::type&) { return "pascal"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::pressure>::type&)
name_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string name_string(const reduce_unit<si::resistance>::type&) { return "ohm"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::resistance>::type&)
name_string	/usr/include/boost/units/units_fwd.hpp	/^template<class T> std::string name_string(const T&);$/;"	p	namespace:boost::units	signature:(const T&)
name_string_impl	/usr/include/boost/units/io.hpp	/^struct name_string_impl$/;"	s	namespace:boost::units::detail
name_string_impl	/usr/include/boost/units/io.hpp	/^struct name_string_impl<0>$/;"	s	namespace:boost::units::detail
name_string_impl	/usr/include/boost/units/io.hpp	/^struct name_string_impl<1>$/;"	s	namespace:boost::units::detail
nautical_mile_base_unit	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^typedef scaled_base_unit<boost::units::si::meter_base_unit, scale<1852, static_rational<1> > > nautical_mile_base_unit;$/;"	t	namespace:boost::units::metric
negate_impl	/usr/include/boost/units/dim.hpp	/^struct negate_impl<boost::units::detail::dim_tag>$/;"	s	namespace:boost::mpl
negate_impl	/usr/include/boost/units/dimension.hpp	/^struct negate_impl<boost::units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
negate_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct negate_impl<boost::units::heterogeneous_system_dim_tag>$/;"	s	namespace:boost::mpl
negate_impl	/usr/include/boost/units/static_rational.hpp	/^struct negate_impl<boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
new_dest	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename impl::unit_type new_dest;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
new_dest	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename reduce_unit<typename get_default_conversion<Dest>::type>::type new_dest;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
new_element	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef typename try_add_unit_impl<Current::size::value>::template apply<Current, dimensions>::type new_element;$/;"	t	struct:boost::units::detail::make_homogeneous_system_impl::apply	access:public
new_equation	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename divide_equation<(current_row::size::value - 1)>::template apply<typename current_row::next, current_value>::type new_equation;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
new_func	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef typename make_solve_list_leading_zeroes<new_element::size::value>::template apply<new_element>::type new_func;$/;"	t	struct:boost::units::detail::make_homogeneous_system_impl::apply	access:public
new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > new_matrix;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > new_matrix;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > new_matrix;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type new_matrix;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type new_matrix;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename next::pivot_row, typename next::new_matrix> new_matrix;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
new_matrix	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::new_matrix new_matrix;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
new_r	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef typename multiply_typeof_helper<Y, R>::type new_r;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
new_source	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename reduce_unit<typename get_default_conversion<Source>::type>::type new_source;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
new_source	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename reduce_unit<typename get_default_conversion<Source>::type>::type new_source;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
new_source	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename reduce_unit<typename get_default_conversion<source>::type>::type new_source;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
next	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename insertion_sort_dims_impl<N - 1>::template apply<typename Begin::next>::type next;$/;"	t	struct:boost::units::detail::insertion_sort_dims_impl::apply	access:public
next	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename insertion_sort_dims_mpl_sequence<N - 1>::template apply<typename mpl::next<Begin>::type>::type next;$/;"	t	struct:boost::units::detail::insertion_sort_dims_mpl_sequence::apply	access:public
next	/usr/include/boost/units/detail/dimension_list.hpp	/^    typedef Next                        next;$/;"	t	struct:boost::units::list	access:public
next	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef typename Begin::next next;$/;"	t	struct:boost::units::detail::solve_normal::apply	access:public
next	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef typename try_add_unit_impl<N-1>::template apply<typename Begin::next, L>::type next;$/;"	t	struct:boost::units::detail::try_add_unit_impl::apply	access:public
next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > next;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > next;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > next;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > next;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type next;$/;"	t	struct:boost::units::detail::find_base_dimensions_impl_impl::apply	access:public
next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef T next;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_func::apply	access:public
next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type next;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_impl::apply	access:public
next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename result::next, typename next_::next> next;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_impl::apply	access:public
next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename T::next next;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_func::apply	access:public
next	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename create_unit_matrix<N - 1>::template apply<typename Begin::next, Dimensions>::type next;$/;"	t	struct:boost::units::detail::create_unit_matrix::apply	access:public
next	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef Next next;$/;"	t	struct:boost::units::detail::set	access:public
next	/usr/include/boost/units/detail/sort.hpp	/^        typedef typename insertion_sort_impl<N - 1>::template apply<typename Begin::next>::type next;$/;"	t	struct:boost::units::detail::insertion_sort_impl::apply	access:public
next	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef typename static_int_power_impl<(N >> 1)>::template apply<square_type, R> next;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
next	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef typename static_int_power_impl<(N >> 1)>::template apply<square_type, new_r> next;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
next	/usr/include/boost/units/io.hpp	/^        typedef typename name_string_impl<N-1>::template apply<typename Begin::next> next;$/;"	t	struct:boost::units::detail::name_string_impl::apply	access:public
next	/usr/include/boost/units/io.hpp	/^        typedef typename symbol_string_impl<N-1>::template apply<typename Begin::next> next;$/;"	t	struct:boost::units::detail::symbol_string_impl::apply	access:public
next_	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > next_;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_impl::apply	access:public
next_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type next_equations;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
next_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename RowsBegin::item::next, dimensionless_type> next_equations;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
next_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename RowsBegin::item::next, typename next::next_equations> next_equations;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
next_equations	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename determine_extra_equations_impl<RemainingRows - 1>::template apply<typename RowsBegin::next, typename RowsBegin::item>::type next_equations;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
next_iteration	/usr/include/boost/units/detail/conversion_impl.hpp	/^        > next_iteration;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
next_iteration	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename get_default_conversion_impl<N-1>::template apply<typename Begin::next> next_iteration;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
next_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename RowsBegin::next::item next_row;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
next_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename RowsBegin::next::item next_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
no	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct no { no() {} char dummy; };$/;"	f	struct:boost::units::detail::no	access:public	signature:()
no	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct no { no() {} char dummy; };$/;"	s	namespace:boost::units::detail
no_default_conversion	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct no_default_conversion {$/;"	s	namespace:boost::units
no_prefix	/usr/include/boost/units/io.hpp	/^inline std::ios_base& no_prefix(std::ios_base& ios)$/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
no_scale	/usr/include/boost/units/heterogeneous_system.hpp	/^typedef dimensionless_type no_scale;$/;"	t	namespace:boost::units
no_solution	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct no_solution {};$/;"	s	namespace:boost::units::detail
normalize_units	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct normalize_units {$/;"	s	namespace:boost::units::detail
numerator	/usr/include/boost/units/static_rational.hpp	/^        static integer_type numerator()      { return Numerator; }$/;"	f	class:boost::units::static_rational	access:public	signature:()
numeric_limits	/usr/include/boost/units/limits.hpp	/^class numeric_limits< ::boost::units::quantity<Unit, T> >$/;"	c	namespace:std
one	/usr/include/boost/units/detail/one.hpp	/^struct one { one() {} };$/;"	f	struct:boost::units::one	access:public	signature:()
one	/usr/include/boost/units/detail/one.hpp	/^struct one { one() {} };$/;"	s	namespace:boost::units
one_to_double	/usr/include/boost/units/detail/one.hpp	/^T one_to_double(const T& t) { return t; }$/;"	f	namespace:boost::units	signature:(const T& t)
one_to_double	/usr/include/boost/units/detail/one.hpp	/^inline double one_to_double(const one&) { return 1.0; }$/;"	f	namespace:boost::units	signature:(const one&)
one_to_double_type	/usr/include/boost/units/detail/one.hpp	/^struct one_to_double_type { typedef T type; };$/;"	s	namespace:boost::units
one_to_double_type	/usr/include/boost/units/detail/one.hpp	/^struct one_to_double_type<one> { typedef double type; };$/;"	s	namespace:boost::units
operator !=	/usr/include/boost/units/quantity.hpp	/^operator!=(const quantity<Unit,X>& val1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& val1, const quantity<Unit,Y>& val2)
operator !=	/usr/include/boost/units/unit.hpp	/^operator!=(const unit<Dim1,System1>&,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const unit<Dim2,System2>&)
operator ()	/usr/include/boost/units/io.hpp	/^    std::string operator()(const Unit& u) {$/;"	f	struct:boost::units::detail::format_name_impl	access:public	signature:(const Unit& u)
operator ()	/usr/include/boost/units/io.hpp	/^    std::string operator()(const Unit& u) {$/;"	f	struct:boost::units::detail::format_raw_name_impl	access:public	signature:(const Unit& u)
operator ()	/usr/include/boost/units/io.hpp	/^    std::string operator()(const Unit& u) {$/;"	f	struct:boost::units::detail::format_raw_symbol_impl	access:public	signature:(const Unit& u)
operator ()	/usr/include/boost/units/io.hpp	/^    std::string operator()(const Unit& u) {$/;"	f	struct:boost::units::detail::format_symbol_impl	access:public	signature:(const Unit& u)
operator ()	/usr/include/boost/units/io.hpp	/^    void operator()() const$/;"	f	struct:boost::units::detail::print_default_t	access:public	signature:() const
operator ()	/usr/include/boost/units/io.hpp	/^    void operator()(Prefix, const T& t) const$/;"	f	struct:boost::units::detail::print_scale_t	access:public	signature:(Prefix, const T& t) const
operator ()	/usr/include/boost/units/io.hpp	/^    void operator()(scale<N, static_rational<0> >, const T& t) const$/;"	f	struct:boost::units::detail::print_scale_t	access:public	signature:(scale<N, static_rational<0> >, const T& t) const
operator ()	/usr/include/boost/units/quantity.hpp	/^    type operator()(const quantity<Unit,X>& source)     { return source.value(); }$/;"	f	struct:boost::units::detail::quantity_cast_helper	access:public	signature:(const quantity<Unit,X>& source)
operator ()	/usr/include/boost/units/quantity.hpp	/^    type operator()(quantity<Unit,X>& source)           { return const_cast<X&>(source.value()); }$/;"	f	struct:boost::units::detail::quantity_cast_helper	access:public	signature:(quantity<Unit,X>& source)
operator *	/usr/include/boost/units/absolute.hpp	/^quantity<absolute<unit<D, S> >, T> operator*(const T& t, const absolute<unit<D, S> >&)$/;"	f	namespace:boost::units	signature:(const T& t, const absolute<unit<D, S> >&)
operator *	/usr/include/boost/units/absolute.hpp	/^quantity<absolute<unit<D, S> >, T> operator*(const absolute<unit<D, S> >&, const T& t)$/;"	f	namespace:boost::units	signature:(const absolute<unit<D, S> >&, const T& t)
operator *	/usr/include/boost/units/detail/one.hpp	/^inline T operator*(const T& t, const one&)$/;"	f	namespace:boost::units	signature:(const T& t, const one&)
operator *	/usr/include/boost/units/detail/one.hpp	/^inline T operator*(const one&, const T& t)$/;"	f	namespace:boost::units	signature:(const one&, const T& t)
operator *	/usr/include/boost/units/detail/one.hpp	/^inline one operator*(const one&, const one&)$/;"	f	namespace:boost::units	signature:(const one&, const one&)
operator *	/usr/include/boost/units/lambda.hpp	/^    operator*(const boost::lambda::lambda_functor<Arg>& a,$/;"	f	namespace:boost::units	signature:(const boost::lambda::lambda_functor<Arg>& a, const boost::units::absolute<boost::units::unit<Dim, System> >& b)
operator *	/usr/include/boost/units/lambda.hpp	/^    operator*(const boost::lambda::lambda_functor<Arg>& a,$/;"	f	namespace:boost::units	signature:(const boost::lambda::lambda_functor<Arg>& a, const boost::units::unit<Dim, System>& b)
operator *	/usr/include/boost/units/lambda.hpp	/^    operator*(const boost::units::absolute<boost::units::unit<Dim, System> >& a,$/;"	f	namespace:boost::units	signature:(const boost::units::absolute<boost::units::unit<Dim, System> >& a, const boost::lambda::lambda_functor<Arg>& b)
operator *	/usr/include/boost/units/lambda.hpp	/^    operator*(const boost::units::unit<Dim, System>& a,$/;"	f	namespace:boost::units	signature:(const boost::units::unit<Dim, System>& a, const boost::lambda::lambda_functor<Arg>& b)
operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const X& lhs,const quantity<Unit,X>& rhs)$/;"	f	namespace:boost::units	signature:(const X& lhs,const quantity<Unit,X>& rhs)
operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const Y& lhs,const unit<Dim,System>&)$/;"	f	namespace:boost::units	signature:(const Y& lhs,const unit<Dim,System>&)
operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const quantity<Unit,X>& lhs,const X& rhs)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& lhs,const X& rhs)
operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const quantity<Unit1,X>& lhs,$/;"	f	namespace:boost::units	signature:(const quantity<Unit1,X>& lhs, const quantity<Unit2,Y>& rhs)
operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const quantity<Unit1,Y>& lhs,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const quantity<Unit1,Y>& lhs,const unit<Dim2,System2>&)
operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const unit<Dim,System>&,const Y& rhs)$/;"	f	namespace:boost::units	signature:(const unit<Dim,System>&,const Y& rhs)
operator *	/usr/include/boost/units/quantity.hpp	/^operator*(const unit<Dim1,System1>&,const quantity<Unit2,Y>& rhs)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const quantity<Unit2,Y>& rhs)
operator *	/usr/include/boost/units/unit.hpp	/^operator*(const unit<Dim1,System1>&,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const unit<Dim2,System2>&)
operator *=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator*=(const quantity<Unit2, YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2, YY>& source)
operator *=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator*=(const value_type& source) { val_ *= source; return *this; }$/;"	f	class:boost::units::quantity	access:public	signature:(const value_type& source)
operator *=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator*=(const value_type& val)        { val_ *= val; return *this; }          $/;"	f	class:boost::units::quantity	access:public	signature:(const value_type& val)
operator +	/usr/include/boost/units/absolute.hpp	/^absolute<Y> operator+(const Y& rval,const absolute<Y>& aval)$/;"	f	namespace:boost::units	signature:(const Y& rval,const absolute<Y>& aval)
operator +	/usr/include/boost/units/absolute.hpp	/^absolute<Y> operator+(const absolute<Y>& aval,const Y& rval)$/;"	f	namespace:boost::units	signature:(const absolute<Y>& aval,const Y& rval)
operator +	/usr/include/boost/units/quantity.hpp	/^operator+(const quantity<Unit,Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& val)
operator +	/usr/include/boost/units/quantity.hpp	/^operator+(const quantity<Unit1,X>& lhs,$/;"	f	namespace:boost::units	signature:(const quantity<Unit1,X>& lhs, const quantity<Unit2,Y>& rhs)
operator +	/usr/include/boost/units/unit.hpp	/^operator+(const unit<Dim,System>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim,System>&)
operator +	/usr/include/boost/units/unit.hpp	/^operator+(const unit<Dim1,System1>&,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const unit<Dim2,System2>&)
operator +=	/usr/include/boost/units/absolute.hpp	/^        const this_type& operator+=(const value_type& val)      { val_ += val; return *this; }$/;"	f	class:boost::units::absolute	access:public	signature:(const value_type& val)
operator +=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator+=(const quantity<Unit2, YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2, YY>& source)
operator +=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator+=(const this_type& source)      { val_ += source.val_; return *this; }  $/;"	f	class:boost::units::quantity	access:public	signature:(const this_type& source)
operator -	/usr/include/boost/units/absolute.hpp	/^Y operator-(const absolute<Y>& aval1,const absolute<Y>& aval2)$/;"	f	namespace:boost::units	signature:(const absolute<Y>& aval1,const absolute<Y>& aval2)
operator -	/usr/include/boost/units/absolute.hpp	/^absolute<Y> operator-(const absolute<Y>& aval,const Y& rval)$/;"	f	namespace:boost::units	signature:(const absolute<Y>& aval,const Y& rval)
operator -	/usr/include/boost/units/quantity.hpp	/^operator-(const quantity<Unit,Y>& val)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& val)
operator -	/usr/include/boost/units/quantity.hpp	/^operator-(const quantity<Unit1,X>& lhs,$/;"	f	namespace:boost::units	signature:(const quantity<Unit1,X>& lhs, const quantity<Unit2,Y>& rhs)
operator -	/usr/include/boost/units/unit.hpp	/^operator-(const unit<Dim,System>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim,System>&)
operator -	/usr/include/boost/units/unit.hpp	/^operator-(const unit<Dim1,System1>&,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const unit<Dim2,System2>&)
operator -=	/usr/include/boost/units/absolute.hpp	/^        const this_type& operator-=(const value_type& val)      { val_ -= val; return *this; }$/;"	f	class:boost::units::absolute	access:public	signature:(const value_type& val)
operator -=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator-=(const quantity<Unit2, YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2, YY>& source)
operator -=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator-=(const this_type& source)      { val_ -= source.val_; return *this; }  $/;"	f	class:boost::units::quantity	access:public	signature:(const this_type& source)
operator /	/usr/include/boost/units/detail/one.hpp	/^inline T operator\/(const T& t, const one&)$/;"	f	namespace:boost::units	signature:(const T& t, const one&)
operator /	/usr/include/boost/units/detail/one.hpp	/^inline T operator\/(const one&, const T& t)$/;"	f	namespace:boost::units	signature:(const one&, const T& t)
operator /	/usr/include/boost/units/detail/one.hpp	/^inline one operator\/(const one&, const one&)$/;"	f	namespace:boost::units	signature:(const one&, const one&)
operator /	/usr/include/boost/units/lambda.hpp	/^    operator\/(const boost::lambda::lambda_functor<Arg>& a,$/;"	f	namespace:boost::units	signature:(const boost::lambda::lambda_functor<Arg>& a, const boost::units::unit<Dim, System>& b)
operator /	/usr/include/boost/units/lambda.hpp	/^    operator\/(const boost::units::unit<Dim, System>& a,$/;"	f	namespace:boost::units	signature:(const boost::units::unit<Dim, System>& a, const boost::lambda::lambda_functor<Arg>& b)
operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const X& lhs,const quantity<Unit,X>& rhs)$/;"	f	namespace:boost::units	signature:(const X& lhs,const quantity<Unit,X>& rhs)
operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const Y& lhs,const unit<Dim,System>&)$/;"	f	namespace:boost::units	signature:(const Y& lhs,const unit<Dim,System>&)
operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const quantity<Unit,X>& lhs,const X& rhs)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& lhs,const X& rhs)
operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const quantity<Unit1,X>& lhs,$/;"	f	namespace:boost::units	signature:(const quantity<Unit1,X>& lhs, const quantity<Unit2,Y>& rhs)
operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const quantity<Unit1,Y>& lhs,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const quantity<Unit1,Y>& lhs,const unit<Dim2,System2>&)
operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const unit<Dim,System>&,const Y& rhs)$/;"	f	namespace:boost::units	signature:(const unit<Dim,System>&,const Y& rhs)
operator /	/usr/include/boost/units/quantity.hpp	/^operator\/(const unit<Dim1,System1>&,const quantity<Unit2,Y>& rhs)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const quantity<Unit2,Y>& rhs)
operator /	/usr/include/boost/units/unit.hpp	/^operator\/(const unit<Dim1,System1>&,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const unit<Dim2,System2>&)
operator /=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator\/=(const quantity<Unit2, YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2, YY>& source)
operator /=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator\/=(const value_type& source) { val_ \/= source; return *this; }$/;"	f	class:boost::units::quantity	access:public	signature:(const value_type& source)
operator /=	/usr/include/boost/units/quantity.hpp	/^        this_type& operator\/=(const value_type& val)        { val_ \/= val; return *this; }          $/;"	f	class:boost::units::quantity	access:public	signature:(const value_type& val)
operator <	/usr/include/boost/units/quantity.hpp	/^operator<(const quantity<Unit,X>& val1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& val1, const quantity<Unit,Y>& val2)
operator <<	/usr/include/boost/units/absolute.hpp	/^std::basic_ostream<Char, Traits>& operator<<(std::basic_ostream<Char, Traits>& os,const absolute<Y>& aval)$/;"	f	namespace:boost::units	signature:(std::basic_ostream<Char, Traits>& os,const absolute<Y>& aval)
operator <<	/usr/include/boost/units/io.hpp	/^inline std::basic_ostream<Char, Traits>& operator<<(std::basic_ostream<Char, Traits>& os, const quantity<Unit, T>& q)$/;"	f	namespace:boost::units	signature:(std::basic_ostream<Char, Traits>& os, const quantity<Unit, T>& q)
operator <<	/usr/include/boost/units/io.hpp	/^inline std::basic_ostream<Char, Traits>& operator<<(std::basic_ostream<Char, Traits>& os, const unit<Dimension, System>& u)$/;"	f	namespace:boost::units	signature:(std::basic_ostream<Char, Traits>& os, const unit<Dimension, System>& u)
operator <<	/usr/include/boost/units/io.hpp	/^inline std::basic_ostream<Char, Traits>& operator<<(std::basic_ostream<Char, Traits>& os,const static_rational<N,D>& r)$/;"	f	namespace:boost::units	signature:(std::basic_ostream<Char, Traits>& os,const static_rational<N,D>& r)
operator <<	/usr/include/boost/units/systems/detail/constants.hpp	/^std::basic_ostream<Char,Traits>& operator<<(std::basic_ostream<Char,Traits>& os,const constant<Y>&)$/;"	f	namespace:boost::units	signature:(std::basic_ostream<Char,Traits>& os,const constant<Y>&)
operator <<	/usr/include/boost/units/systems/detail/constants.hpp	/^std::basic_ostream<Char,Traits>& operator<<(std::basic_ostream<Char,Traits>& os,const physical_constant<Y>& val)$/;"	f	namespace:boost::units	signature:(std::basic_ostream<Char,Traits>& os,const physical_constant<Y>& val)
operator <=	/usr/include/boost/units/quantity.hpp	/^operator<=(const quantity<Unit,X>& val1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& val1, const quantity<Unit,Y>& val2)
operator =	/usr/include/boost/units/absolute.hpp	/^        this_type& operator=(const this_type& source)           { val_ = source.val_; return *this; }$/;"	f	class:boost::units::absolute	access:public	signature:(const this_type& source)
operator =	/usr/include/boost/units/quantity.hpp	/^        this_type& operator=(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(System2),Y>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(System2),Y>& source)
operator =	/usr/include/boost/units/quantity.hpp	/^        this_type& operator=(const quantity<Unit,YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit,YY>& source)
operator =	/usr/include/boost/units/quantity.hpp	/^        this_type& operator=(const quantity<Unit2,YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2,YY>& source)
operator =	/usr/include/boost/units/quantity.hpp	/^        this_type& operator=(const quantity<unit<dimension_type,system_type>,YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimension_type,system_type>,YY>& source)
operator =	/usr/include/boost/units/quantity.hpp	/^        this_type& operator=(const this_type& source) $/;"	f	class:boost::units::quantity	access:public	signature:(const this_type& source)
operator =	/usr/include/boost/units/unit.hpp	/^        this_type& operator=(const this_type&) { return *this; }$/;"	f	class:boost::units::unit	access:public	signature:(const this_type&)
operator ==	/usr/include/boost/units/quantity.hpp	/^operator==(const quantity<Unit,X>& val1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& val1, const quantity<Unit,Y>& val2)
operator ==	/usr/include/boost/units/unit.hpp	/^operator==(const unit<Dim1,System1>&,const unit<Dim2,System2>&)$/;"	f	namespace:boost::units	signature:(const unit<Dim1,System1>&,const unit<Dim2,System2>&)
operator >	/usr/include/boost/units/detail/one.hpp	/^inline bool operator>(const boost::units::one&, const T& t) {$/;"	f	namespace:boost::units	signature:(const boost::units::one&, const T& t)
operator >	/usr/include/boost/units/quantity.hpp	/^operator>(const quantity<Unit,X>& val1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& val1, const quantity<Unit,Y>& val2)
operator >=	/usr/include/boost/units/quantity.hpp	/^operator>=(const quantity<Unit,X>& val1,$/;"	f	namespace:boost::units	signature:(const quantity<Unit,X>& val1, const quantity<Unit,Y>& val2)
operator value_type	/usr/include/boost/units/quantity.hpp	/^        operator value_type() const                         { return val_; }$/;"	f	class:boost::units::quantity	access:public	signature:() const
operator value_type	/usr/include/boost/units/systems/detail/constants.hpp	/^    operator value_type() const    { return Base().value(); } $/;"	f	struct:boost::units::constant	access:public	signature:() const
operator value_type	/usr/include/boost/units/systems/detail/constants.hpp	/^    operator value_type() const    { return Base().value(); } $/;"	f	struct:boost::units::physical_constant	access:public	signature:() const
ordinal	/usr/include/boost/units/detail/ordinal.hpp	/^struct ordinal {$/;"	s	namespace:boost::units
ordinal_has_already_been_defined	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct ordinal_has_already_been_defined<false>  { typedef void type; };$/;"	s	namespace:boost::units::detail
ordinal_has_already_been_defined	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct ordinal_has_already_been_defined<true>   { };$/;"	s	namespace:boost::units::detail
ordinal_tag	/usr/include/boost/units/detail/ordinal.hpp	/^struct ordinal_tag {};$/;"	s	namespace:boost::units::detail
os	/usr/include/boost/units/io.hpp	/^    Os* os;$/;"	m	struct:boost::units::detail::print_default_t	access:public
os	/usr/include/boost/units/io.hpp	/^    Os* os;$/;"	m	struct:boost::units::detail::print_scale_t	access:public
ounce_base_unit	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<2, static_rational<-4> > > ounce_base_unit;$/;"	t	namespace:boost::units::imperial
ounce_base_unit	/usr/include/boost/units/base_units/us/ounce.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<2, static_rational<-4> > > ounce_base_unit;$/;"	t	namespace:boost::units::us
permeability	/usr/include/boost/units/systems/si/permeability.hpp	/^typedef unit<permeability_dimension,si::system>    permeability;$/;"	t	namespace:boost::units::si
permeability_dimension	/usr/include/boost/units/physical_dimensions/permeability.hpp	/^                          current_base_dimension,-2>::type permeability_dimension;$/;"	t	namespace:boost::units
permittivity	/usr/include/boost/units/systems/si/permittivity.hpp	/^typedef unit<permittivity_dimension,si::system>    permittivity;$/;"	t	namespace:boost::units::si
permittivity_dimension	/usr/include/boost/units/physical_dimensions/permittivity.hpp	/^                          current_base_dimension,2>::type permittivity_dimension;                $/;"	t	namespace:boost::units
physical_constant	/usr/include/boost/units/systems/detail/constants.hpp	/^struct physical_constant $/;"	s	namespace:boost::units
pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef MatrixPivot pivot_row;$/;"	t	struct:boost::units::detail::invert_handle_after_pivot_row::apply	access:public
pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef new_equation pivot_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::pivot_row pivot_row;$/;"	t	struct:boost::units::detail::invert_handle_inital_rows::apply	access:public
pivot_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::pivot_row pivot_row;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
plain_return_type_1	/usr/include/boost/units/lambda.hpp	/^    struct plain_return_type_1<unary_arithmetic_action<minus_action>,$/;"	s	namespace:boost::lambda
plain_return_type_1	/usr/include/boost/units/lambda.hpp	/^    struct plain_return_type_1<unary_arithmetic_action<plus_action>,$/;"	s	namespace:boost::lambda
plain_return_type_2	/usr/include/boost/units/lambda.hpp	/^    struct plain_return_type_2<arithmetic_action<divide_action>,$/;"	s	namespace:boost::lambda
plain_return_type_2	/usr/include/boost/units/lambda.hpp	/^    struct plain_return_type_2<arithmetic_action<minus_action>,$/;"	s	namespace:boost::lambda
plain_return_type_2	/usr/include/boost/units/lambda.hpp	/^    struct plain_return_type_2<arithmetic_action<multiply_action>,$/;"	s	namespace:boost::lambda
plain_return_type_2	/usr/include/boost/units/lambda.hpp	/^    struct plain_return_type_2<arithmetic_action<plus_action>,$/;"	s	namespace:boost::lambda
plane_angle	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<plane_angle_dimension,system>           plane_angle;            \/\/\/< abstract unit of plane angle$/;"	t	namespace:boost::units::abstract
plane_angle	/usr/include/boost/units/systems/angle/degrees.hpp	/^typedef unit<plane_angle_dimension,system>      plane_angle;           \/\/\/< angle degree unit constant$/;"	t	namespace:boost::units::degree
plane_angle	/usr/include/boost/units/systems/angle/gradians.hpp	/^typedef unit<plane_angle_dimension,system>      plane_angle;          \/\/\/< angle gradian unit constant$/;"	t	namespace:boost::units::gradian
plane_angle	/usr/include/boost/units/systems/angle/revolutions.hpp	/^typedef unit<plane_angle_dimension,system>      plane_angle;          \/\/\/< angle revolution unit constant$/;"	t	namespace:boost::units::revolution
plane_angle	/usr/include/boost/units/systems/si/plane_angle.hpp	/^typedef unit<plane_angle_dimension,si::system>      plane_angle;$/;"	t	namespace:boost::units::si
plane_angle_base_dimension	/usr/include/boost/units/physical_dimensions/plane_angle.hpp	/^struct plane_angle_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
plane_angle_dimension	/usr/include/boost/units/physical_dimensions/plane_angle.hpp	/^typedef plane_angle_base_dimension::dimension_type    plane_angle_dimension;$/;"	t	namespace:boost::units
plane_angle_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct plane_angle_unit_tag : base_unit<plane_angle_unit_tag, plane_angle_dimension, -23> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
plus_impl	/usr/include/boost/units/dim.hpp	/^struct plus_impl<boost::units::detail::dim_tag,boost::units::detail::dim_tag>$/;"	s	namespace:boost::mpl
plus_impl	/usr/include/boost/units/dimension.hpp	/^struct plus_impl<boost::units::detail::dimension_list_tag,boost::units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
plus_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct plus_impl<boost::units::heterogeneous_system_dim_tag, boost::units::heterogeneous_system_dim_tag>$/;"	s	namespace:boost::mpl
plus_impl	/usr/include/boost/units/static_rational.hpp	/^struct plus_impl<boost::units::detail::static_rational_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
pop_front_impl	/usr/include/boost/units/detail/dimension_list.hpp	/^struct pop_front_impl<units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
pow	/usr/include/boost/units/cmath.hpp	/^pow(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q1,$/;"	f	namespace:boost::units	signature:(const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q1, const quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y>& q2)
pow	/usr/include/boost/units/pow.hpp	/^pow(const Y& x)$/;"	f	namespace:boost::units	signature:(const Y& x)
power	/usr/include/boost/units/systems/cgs/power.hpp	/^typedef unit<power_dimension,cgs::system>    power;$/;"	t	namespace:boost::units::cgs
power	/usr/include/boost/units/systems/si/power.hpp	/^typedef unit<power_dimension,si::system>     power;$/;"	t	namespace:boost::units::si
power_area	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef multiply_typeof_helper<power,area>::type power_area;$/;"	t	namespace:boost::units::si::constants::codata
power_area_over_solid_angle	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^typedef divide_typeof_helper<power_area,solid_angle>::type power_area_over_solid_angle;$/;"	t	namespace:boost::units::si::constants::codata
power_dimension	/usr/include/boost/units/physical_dimensions/power.hpp	/^                          time_base_dimension,-3>::type power_dimension;                    $/;"	t	namespace:boost::units
power_over_area_temperature_4	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^        >::type power_over_area_temperature_4;$/;"	t	namespace:boost::units::si::constants::codata
power_typeof_helper	/usr/include/boost/units/operators.hpp	/^struct power_typeof_helper$/;"	s	namespace:boost::units
power_typeof_helper	/usr/include/boost/units/pow.hpp	/^struct power_typeof_helper<T, static_rational<N,D> >                $/;"	s	namespace:boost::units
power_typeof_helper	/usr/include/boost/units/pow.hpp	/^struct power_typeof_helper<float, static_rational<N,D> >$/;"	s	namespace:boost::units
power_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct power_typeof_helper< quantity<Unit,Y>,static_rational<N,D> >                $/;"	s	namespace:boost::units
power_typeof_helper	/usr/include/boost/units/systems/detail/constants.hpp	/^struct power_typeof_helper<constant<T1>, static_rational<N,D> >$/;"	s	namespace:boost::units
power_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct power_typeof_helper<unit<Dim,System>,static_rational<N,D> >                $/;"	s	namespace:boost::units
prefixed	/usr/include/boost/units/io.hpp	/^    bool* prefixed;$/;"	m	struct:boost::units::detail::print_scale_t	access:public
pressure	/usr/include/boost/units/systems/cgs/pressure.hpp	/^typedef unit<pressure_dimension,cgs::system>     pressure;$/;"	t	namespace:boost::units::cgs
pressure	/usr/include/boost/units/systems/si/pressure.hpp	/^typedef unit<pressure_dimension,si::system>      pressure;$/;"	t	namespace:boost::units::si
pressure_dimension	/usr/include/boost/units/physical_dimensions/pressure.hpp	/^                          time_base_dimension,-2>::type pressure_dimension;                $/;"	t	namespace:boost::units
print_default	/usr/include/boost/units/io.hpp	/^print_default_t<Os, Quantity> print_default(Os& os, const Quantity& q)$/;"	f	namespace:boost::units::detail	signature:(Os& os, const Quantity& q)
print_default_t	/usr/include/boost/units/io.hpp	/^struct print_default_t {$/;"	s	namespace:boost::units::detail
print_scale	/usr/include/boost/units/io.hpp	/^print_scale_t<Os> print_scale(Os& os, bool& prefixed)$/;"	f	namespace:boost::units::detail	signature:(Os& os, bool& prefixed)
print_scale_t	/usr/include/boost/units/io.hpp	/^struct print_scale_t {$/;"	s	namespace:boost::units::detail
process_column	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename invert_handle_inital_rows<RowsBegin::size::value - N>::template apply<RowsBegin, IdentityBegin> process_column;$/;"	t	struct:boost::units::detail::invert_impl::apply	access:public
push_front_if	/usr/include/boost/units/detail/push_front_if.hpp	/^struct push_front_if<false> {$/;"	s	namespace:boost::units::detail
push_front_if	/usr/include/boost/units/detail/push_front_if.hpp	/^struct push_front_if<true> {$/;"	s	namespace:boost::units::detail
push_front_impl	/usr/include/boost/units/detail/dimension_list.hpp	/^struct push_front_impl<units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
push_front_or_add	/usr/include/boost/units/detail/push_front_or_add.hpp	/^struct push_front_or_add$/;"	s	namespace:boost::units::detail
push_front_or_add	/usr/include/boost/units/detail/push_front_or_add.hpp	/^struct push_front_or_add<dimensionless_type, T>$/;"	s	namespace:boost::units::detail
push_front_or_add_impl	/usr/include/boost/units/detail/push_front_or_add.hpp	/^struct push_front_or_add_impl<false>$/;"	s	namespace:boost::units::detail
push_front_or_add_impl	/usr/include/boost/units/detail/push_front_or_add.hpp	/^struct push_front_or_add_impl<true>$/;"	s	namespace:boost::units::detail
q	/usr/include/boost/units/io.hpp	/^    const Quantity* q;$/;"	m	struct:boost::units::detail::print_default_t	access:public
quantity	/usr/include/boost/units/quantity.hpp	/^        explicit quantity(const quantity<Unit,YY>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit,YY>& source, typename boost::disable_if<detail::is_non_narrowing_conversion<YY, Y> >::type* = 0)
quantity	/usr/include/boost/units/quantity.hpp	/^        explicit quantity(const quantity<Unit2,YY>& source)$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2,YY>& source)
quantity	/usr/include/boost/units/quantity.hpp	/^        explicit quantity(const quantity<unit<dimension_type,system_type>,YY>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimension_type,system_type>,YY>& source, typename boost::disable_if<detail::is_non_narrowing_conversion<YY, Y> >::type* = 0)
quantity	/usr/include/boost/units/quantity.hpp	/^        explicit quantity(const quantity<unit<dimensionless_type, System2>,Y2>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimensionless_type, System2>,Y2>& source, typename boost::disable_if<detail::is_dimensionless_system<System2> >::type* = 0)
quantity	/usr/include/boost/units/quantity.hpp	/^        explicit quantity(const quantity<unit<dimensionless_type, System2>,Y2>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimensionless_type, System2>,Y2>& source, typename boost::enable_if< boost::mpl::and_< boost::mpl::not_<detail::is_non_narrowing_conversion<Y2, Y> >, detail::is_dimensionless_system<System2> > >::type* = 0 )
quantity	/usr/include/boost/units/quantity.hpp	/^        explicit quantity(const value_type& val, int) : val_(val) { }$/;"	f	class:boost::units::quantity	access:protected	signature:(const value_type& val, int)
quantity	/usr/include/boost/units/quantity.hpp	/^        quantity() : val_() $/;"	f	class:boost::units::quantity	access:public	signature:()
quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<Unit,YY>& source) :$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit,YY>& source)
quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<Unit,YY>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit,YY>& source, typename boost::enable_if<detail::is_non_narrowing_conversion<YY, Y> >::type* = 0)
quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<Unit2,YY>& source, $/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2,YY>& source, typename boost::disable_if< mpl::and_< typename is_implicitly_convertible<Unit2,Unit>::type, detail::is_non_narrowing_conversion<YY, Y> >, typename detail::disable_if_is_same<Unit, Unit2>::type >::type* = 0)
quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<Unit2,YY>& source, $/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<Unit2,YY>& source, typename boost::enable_if< mpl::and_< typename is_implicitly_convertible<Unit2,Unit>::type, detail::is_non_narrowing_conversion<YY, Y> >, typename detail::disable_if_is_same<Unit, Unit2>::type >::type* = 0)
quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<unit<dimension_type,system_type>,YY>& source) :$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimension_type,system_type>,YY>& source)
quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<unit<dimension_type,system_type>,YY>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimension_type,system_type>,YY>& source, typename boost::enable_if<detail::is_non_narrowing_conversion<YY, Y> >::type* = 0)
quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<unit<dimensionless_type, System2>,Y2>& source,$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimensionless_type, System2>,Y2>& source, typename boost::enable_if< boost::mpl::and_< detail::is_non_narrowing_conversion<Y2, Y>, detail::is_dimensionless_system<System2> > >::type* = 0 )
quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const quantity<unit<dimensionless_type,homogeneous_system<System2> >,Y2>& source) :$/;"	f	class:boost::units::quantity	access:public	signature:(const quantity<unit<dimensionless_type,homogeneous_system<System2> >,Y2>& source)
quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(const this_type& source) : val_(source.val_) $/;"	f	class:boost::units::quantity	access:public	signature:(const this_type& source)
quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(unspecified_null_pointer_constant_type) : val_() $/;"	f	class:boost::units::quantity	access:public	signature:(unspecified_null_pointer_constant_type)
quantity	/usr/include/boost/units/quantity.hpp	/^        quantity(value_type val) : val_(val) $/;"	f	class:boost::units::quantity	access:public	signature:(value_type val)
quantity	/usr/include/boost/units/quantity.hpp	/^class quantity$/;"	c	namespace:boost::units
quantity	/usr/include/boost/units/quantity.hpp	/^class quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(System),Y>$/;"	c	namespace:boost::units
quantity	/usr/include/boost/units/quantity.hpp	/^class quantity<int, T> {};$/;"	c	namespace:boost::units
quantity	/usr/include/boost/units/quantity.hpp	/^class quantity<unit<int, System>, T> {};$/;"	c	namespace:boost::units
quantity_cast	/usr/include/boost/units/quantity.hpp	/^quantity_cast(Y& source)$/;"	f	namespace:boost::units	signature:(Y& source)
quantity_cast	/usr/include/boost/units/quantity.hpp	/^quantity_cast(const Y& source)$/;"	f	namespace:boost::units	signature:(const Y& source)
quantity_cast_helper	/usr/include/boost/units/quantity.hpp	/^struct quantity_cast_helper<Y,const quantity<Unit,X> >$/;"	s	namespace:boost::units::detail
quantity_cast_helper	/usr/include/boost/units/quantity.hpp	/^struct quantity_cast_helper<Y,quantity<Unit,X> >$/;"	s	namespace:boost::units::detail
quantity_type	/usr/include/boost/units/limits.hpp	/^        typedef ::boost::units::quantity<Unit, T> quantity_type;$/;"	t	class:std::numeric_limits	access:public
quart_base_unit	/usr/include/boost/units/base_units/imperial/quart.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<1> > > quart_base_unit;$/;"	t	namespace:boost::units::imperial
quart_base_unit	/usr/include/boost/units/base_units/us/quart.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<1> > > quart_base_unit;$/;"	t	namespace:boost::units::us
quarter_base_unit	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<28, static_rational<1> > > quarter_base_unit;$/;"	t	namespace:boost::units::imperial
quiet_NaN	/usr/include/boost/units/limits.hpp	/^        static quantity_type quiet_NaN()  { return(quantity_type::from_value(std::numeric_limits<T>::quiet_NaN())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
radian_base_unit	/usr/include/boost/units/base_units/angle/radian.hpp	/^struct radian_base_unit : public base_unit<radian_base_unit, plane_angle_dimension, -2>$/;"	s	namespace:boost::units::angle	inherits:base_unit
radix	/usr/include/boost/units/limits.hpp	/^        static const int radix = std::numeric_limits<T>::radix;$/;"	m	class:std::numeric_limits	access:public
raw_fmt	/usr/include/boost/units/io.hpp	/^    raw_fmt = 2,            \/\/\/ output only symbols for base units (but not derived units), for example "m".$/;"	e	enum:boost::units::format_mode
raw_format	/usr/include/boost/units/io.hpp	/^inline std::ios_base& raw_format(std::ios_base& ios) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
raw_string	/usr/include/boost/units/units_fwd.hpp	/^template<class T> std::string raw_string(const T&);$/;"	p	namespace:boost::units	signature:(const T&)
reduce_unit	/usr/include/boost/units/detail/absolute_impl.hpp	/^struct reduce_unit<absolute<unit<D, S> > >$/;"	s	namespace:boost::units
reduce_unit	/usr/include/boost/units/reduce_unit.hpp	/^struct reduce_unit {$/;"	s	namespace:boost::units
reduce_unit	/usr/include/boost/units/unit.hpp	/^struct reduce_unit<unit<Dim, System> >$/;"	s	namespace:boost::units
reduced_unit	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename reduce_unit<units::unit<dimensions, DestinationSystem> >::type reduced_unit;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
reluctance	/usr/include/boost/units/systems/si/reluctance.hpp	/^typedef unit<reluctance_dimension,si::system>    reluctance;$/;"	t	namespace:boost::units::si
reluctance_dimension	/usr/include/boost/units/physical_dimensions/reluctance.hpp	/^                          current_base_dimension,2>::type reluctance_dimension;            $/;"	t	namespace:boost::units
resistance	/usr/include/boost/units/systems/si/resistance.hpp	/^typedef unit<resistance_dimension,si::system>    resistance;$/;"	t	namespace:boost::units::si
resistance_dimension	/usr/include/boost/units/physical_dimensions/resistance.hpp	/^                          current_base_dimension,-2>::type resistance_dimension;              $/;"	t	namespace:boost::units
resistivity	/usr/include/boost/units/systems/si/resistivity.hpp	/^typedef unit<resistivity_dimension,si::system>    resistivity;$/;"	t	namespace:boost::units::si
resistivity_dimension	/usr/include/boost/units/physical_dimensions/resistivity.hpp	/^                          current_base_dimension,-2>::type resistivity_dimension;              $/;"	t	namespace:boost::units
result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > result;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_impl::apply	access:public
result	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::template apply<DimensionIterator> result;$/;"	t	struct:boost::units::detail::expand_dimensions::apply	access:public
result_type	/usr/include/boost/units/io.hpp	/^    typedef void result_type;$/;"	t	struct:boost::units::detail::print_default_t	access:public
result_type	/usr/include/boost/units/io.hpp	/^    typedef void result_type;$/;"	t	struct:boost::units::detail::print_scale_t	access:public
revolution	/usr/include/boost/units/systems/angle/revolutions.hpp	/^namespace revolution {$/;"	n	namespace:boost::units
revolution_base_unit	/usr/include/boost/units/base_units/angle/revolution.hpp	/^typedef scaled_base_unit<degree_base_unit, scale<360, static_rational<1> > >  revolution_base_unit;$/;"	t	namespace:boost::units::angle
root	/usr/include/boost/units/pow.hpp	/^root(const Y& x)$/;"	f	namespace:boost::units	signature:(const Y& x)
root_typeof_helper	/usr/include/boost/units/operators.hpp	/^struct root_typeof_helper$/;"	s	namespace:boost::units
root_typeof_helper	/usr/include/boost/units/pow.hpp	/^struct root_typeof_helper<T,static_rational<N,D> >$/;"	s	namespace:boost::units
root_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct root_typeof_helper< quantity<Unit,Y>,static_rational<N,D> >                $/;"	s	namespace:boost::units
root_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct root_typeof_helper<unit<Dim,System>,static_rational<N,D> >                $/;"	s	namespace:boost::units
round_error	/usr/include/boost/units/limits.hpp	/^        static quantity_type round_error()  { return(quantity_type::from_value(std::numeric_limits<T>::round_error())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
round_style	/usr/include/boost/units/limits.hpp	/^        static const float_round_style round_style = std::numeric_limits<T>::round_style;$/;"	m	class:std::numeric_limits	access:public
round_style	/usr/include/boost/units/limits.hpp	/^        static const int round_style = std::numeric_limits<T>::round_style;$/;"	m	class:std::numeric_limits	access:public
scale	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef eval_scale_list<typename mpl::divides<typename S1::scale, typename S2::scale>::type> scale;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
scale	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef Scale scale;$/;"	t	struct:boost::units::heterogeneous_system_impl	access:public
scale	/usr/include/boost/units/scale.hpp	/^struct scale$/;"	s	namespace:boost::units
scale	/usr/include/boost/units/scale.hpp	/^struct scale<Base, static_rational<0> >$/;"	s	namespace:boost::units
scale_dim_tag	/usr/include/boost/units/detail/unscale.hpp	/^struct scale_dim_tag {};$/;"	s	namespace:boost::units
scale_list_dim	/usr/include/boost/units/detail/unscale.hpp	/^struct scale_list_dim : Scale$/;"	s	namespace:boost::units	inherits:Scale
scale_name_string_impl	/usr/include/boost/units/io.hpp	/^struct scale_name_string_impl $/;"	s	namespace:boost::units::detail
scale_name_string_impl	/usr/include/boost/units/io.hpp	/^struct scale_name_string_impl<0>$/;"	s	namespace:boost::units::detail
scale_symbol_string_impl	/usr/include/boost/units/io.hpp	/^struct scale_symbol_string_impl $/;"	s	namespace:boost::units::detail
scale_symbol_string_impl	/usr/include/boost/units/io.hpp	/^struct scale_symbol_string_impl<0>$/;"	s	namespace:boost::units::detail
scale_type	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef Scale scale_type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
scaled_base_unit	/usr/include/boost/units/scaled_base_unit.hpp	/^struct scaled_base_unit$/;"	s	namespace:boost::units
scaled_base_unit_tag	/usr/include/boost/units/scaled_base_unit.hpp	/^struct scaled_base_unit_tag {};$/;"	s	namespace:boost::units
second_base_unit	/usr/include/boost/units/base_units/si/second.hpp	/^struct second_base_unit : public base_unit<second_base_unit, time_dimension, -7>$/;"	s	namespace:boost::units::si	inherits:base_unit
select_base_unit_converter	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct select_base_unit_converter$/;"	s	namespace:boost::units
selector	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef select_base_unit_converter<typename unscale<Source>::type, typename unscale<Dest>::type> selector;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
serialization	/usr/include/boost/units/io.hpp	/^namespace serialization {$/;"	n	namespace:boost
serialize	/usr/include/boost/units/io.hpp	/^inline void serialize(Archive& ar,boost::units::quantity<Unit,Y>& q,const unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar,boost::units::quantity<Unit,Y>& q,const unsigned int )
serialize	/usr/include/boost/units/io.hpp	/^inline void serialize(Archive& ar,boost::units::unit<Dim,System>&,const unsigned int \/*version*\/)$/;"	f	namespace:boost::serialization	signature:(Archive& ar,boost::units::unit<Dim,System>&,const unsigned int )
set	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct set : Next {$/;"	s	namespace:boost::units::detail	inherits:Next
set_autoprefix	/usr/include/boost/units/io.hpp	/^inline void set_autoprefix(std::ios_base& ios, autoprefix_mode new_mode)$/;"	f	namespace:boost::units	signature:(std::ios_base& ios, autoprefix_mode new_mode)
set_end	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct set_end {$/;"	s	namespace:boost::units::detail
set_flags	/usr/include/boost/units/io.hpp	/^inline void set_flags(std::ios_base& ios, long new_flags, long mask) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios, long new_flags, long mask)
set_format	/usr/include/boost/units/io.hpp	/^inline void set_format(std::ios_base& ios, format_mode new_mode) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios, format_mode new_mode)
set_insert	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct set_insert<false> {$/;"	s	namespace:boost::units::detail
set_insert	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct set_insert<true> {$/;"	s	namespace:boost::units::detail
set_no	/usr/include/boost/units/detail/linear_algebra.hpp	/^typedef char set_no;$/;"	t	namespace:boost::units::detail
set_yes	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct set_yes { set_no dummy[2]; };$/;"	s	namespace:boost::units::detail
si	/usr/include/boost/units/base_units/si/ampere.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/base_units/si/candela.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/base_units/si/kelvin.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/base_units/si/kilogram.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/base_units/si/meter.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/base_units/si/mole.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/base_units/si/second.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/absorbed_dose.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/acceleration.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/action.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/activity.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/amount.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/angular_acceleration.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/angular_momentum.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/angular_velocity.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/area.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/base.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/capacitance.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/conductance.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/conductivity.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/current.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/dimensionless.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/dose_equivalent.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/dynamic_viscosity.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/electric_charge.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/electric_potential.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/energy.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/force.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/frequency.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/illuminance.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/impedance.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/inductance.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/kinematic_viscosity.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/length.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/luminous_flux.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/luminous_intensity.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/magnetic_field_intensity.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/magnetic_flux.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/magnetic_flux_density.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/mass.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/mass_density.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/moment_of_inertia.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/momentum.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/permeability.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/permittivity.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/plane_angle.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/power.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/prefixes.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/pressure.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/reluctance.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/resistance.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/resistivity.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/solid_angle.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/surface_density.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/surface_tension.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/temperature.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/time.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/torque.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/velocity.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/volume.hpp	/^namespace si {$/;"	n	namespace:boost::units
si	/usr/include/boost/units/systems/si/wavenumber.hpp	/^namespace si {$/;"	n	namespace:boost::units
signaling_NaN	/usr/include/boost/units/limits.hpp	/^        static quantity_type signaling_NaN()  { return(quantity_type::from_value(std::numeric_limits<T>::signaling_NaN())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
simplify_typename	/usr/include/boost/units/detail/utility.hpp	/^std::string simplify_typename(const L& \/*source*\/)$/;"	f	namespace:boost::units	signature:(const L& )
sin	/usr/include/boost/units/cmath.hpp	/^sin(const quantity<si::plane_angle,Y>& theta)$/;"	f	namespace:boost::units	signature:(const quantity<si::plane_angle,Y>& theta)
sin	/usr/include/boost/units/cmath.hpp	/^sin(const quantity<unit<plane_angle_dimension,System>,Y>& theta)$/;"	f	namespace:boost::units	signature:(const quantity<unit<plane_angle_dimension,System>,Y>& theta)
size	/usr/include/boost/units/detail/dimension_list.hpp	/^    typedef typename mpl::next<typename Next::size>::type size;$/;"	t	struct:boost::units::list	access:public
size	/usr/include/boost/units/detail/linear_algebra.hpp	/^    static const long size = sizeof(Set::lookup((wrap<T>*)0));$/;"	m	struct:boost::units::detail::has_key	access:public
size	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef mpl::long_<0> size;$/;"	t	struct:boost::units::detail::set_end	access:public
size	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef typename mpl::next<typename Next::size>::type size;$/;"	t	struct:boost::units::detail::set	access:public
size	/usr/include/boost/units/dimensionless_type.hpp	/^    typedef mpl::long_<0>               size;$/;"	t	struct:boost::units::dimensionless_type	access:public
size_impl	/usr/include/boost/units/detail/dimension_list.hpp	/^struct size_impl<units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
solid_angle	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<solid_angle_dimension,system>           solid_angle;            \/\/\/< abstract unit of solid angle$/;"	t	namespace:boost::units::abstract
solid_angle	/usr/include/boost/units/systems/si/solid_angle.hpp	/^typedef unit<solid_angle_dimension,si::system>      solid_angle;$/;"	t	namespace:boost::units::si
solid_angle_base_dimension	/usr/include/boost/units/physical_dimensions/solid_angle.hpp	/^struct solid_angle_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
solid_angle_dimension	/usr/include/boost/units/physical_dimensions/solid_angle.hpp	/^typedef solid_angle_base_dimension::dimension_type    solid_angle_dimension;$/;"	t	namespace:boost::units
solid_angle_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct solid_angle_unit_tag : base_unit<solid_angle_unit_tag, solid_angle_dimension, -22> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
solve_end	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct solve_end {$/;"	s	namespace:boost::units::detail
solve_first_non_zero	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct solve_first_non_zero {$/;"	s	namespace:boost::units::detail
solve_internal_zero	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct solve_internal_zero {$/;"	s	namespace:boost::units::detail
solve_leading_zeroes	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct solve_leading_zeroes {$/;"	s	namespace:boost::units::detail
solve_leading_zeroes	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct solve_leading_zeroes<no_solution> {$/;"	s	namespace:boost::units::detail
solve_normal	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct solve_normal {$/;"	s	namespace:boost::units::detail
sort_dims	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct sort_dims$/;"	s	namespace:boost::units::detail
sort_dims	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct sort_dims<list<T, Next> >$/;"	s	namespace:boost::units::detail
source	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename source_pair::tag_type source;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
source_factor	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename mpl::divides<typename get_scale_list<Source>::type, typename get_scale_list<source_type>::type>::type source_factor;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
source_pair	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename Begin::item source_pair;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
source_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef Source source_type;$/;"	t	struct:boost::units::select_base_unit_converter	access:public
source_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename selector::source_type source_type;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
specific_energy_dimension	/usr/include/boost/units/physical_dimensions/specific_energy.hpp	/^                          time_base_dimension,-2>::type specific_energy_dimension;                    $/;"	t	namespace:boost::units
specific_heat_capacity_dimension	/usr/include/boost/units/physical_dimensions/specific_heat_capacity.hpp	/^                          temperature_base_dimension,-1>::type specific_heat_capacity_dimension;                    $/;"	t	namespace:boost::units
specific_volume_dimension	/usr/include/boost/units/physical_dimensions/specific_volume.hpp	/^                          mass_base_dimension,-1>::type specific_volume_dimension;            $/;"	t	namespace:boost::units
sqrt	/usr/include/boost/units/cmath.hpp	/^sqrt(const quantity<Unit,Y>& q)$/;"	f	namespace:boost::units	signature:(const quantity<Unit,Y>& q)
square_type	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef typename multiply_typeof_helper<Y, Y>::type square_type;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
start	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef call_base_unit_converter<Source, new_source> start;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
start	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef call_base_unit_converter<Source, new_source> start;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
static_abs	/usr/include/boost/units/static_rational.hpp	/^struct static_abs$/;"	s	namespace:boost::units
static_int_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_int_power_impl<0, true>$/;"	s	namespace:boost::units::detail
static_int_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_int_power_impl<1, false>$/;"	s	namespace:boost::units::detail
static_int_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_int_power_impl<N, false>$/;"	s	namespace:boost::units::detail
static_int_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_int_power_impl<N, true>$/;"	s	namespace:boost::units::detail
static_inverse_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct static_inverse_impl$/;"	s	namespace:boost::units::detail
static_inverse_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct static_inverse_impl<0>$/;"	s	namespace:boost::units::detail
static_power	/usr/include/boost/units/dimension.hpp	/^struct static_power$/;"	s	namespace:boost::units
static_power	/usr/include/boost/units/heterogeneous_system.hpp	/^struct static_power<heterogeneous_system<S>, static_rational<N,D> >$/;"	s	namespace:boost::units
static_power	/usr/include/boost/units/homogeneous_system.hpp	/^struct static_power<homogeneous_system<L>, static_rational<N,D> >$/;"	s	namespace:boost::units
static_power_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct static_power_impl$/;"	s	namespace:boost::units::detail
static_power_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct static_power_impl<0>$/;"	s	namespace:boost::units::detail
static_rational	/usr/include/boost/units/static_rational.hpp	/^        static_rational() { }$/;"	f	class:boost::units::static_rational	access:public	signature:()
static_rational	/usr/include/boost/units/static_rational.hpp	/^class static_rational$/;"	c	namespace:boost::units
static_rational_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_rational_power_impl$/;"	s	namespace:boost::units::detail
static_rational_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_rational_power_impl<R, one>$/;"	s	namespace:boost::units::detail
static_rational_power_impl	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct static_rational_power_impl<static_rational<N, 1>, one>$/;"	s	namespace:boost::units::detail
static_rational_tag	/usr/include/boost/units/static_rational.hpp	/^struct static_rational_tag {};$/;"	s	namespace:boost::units::detail
static_root	/usr/include/boost/units/dimension.hpp	/^struct static_root$/;"	s	namespace:boost::units
static_root	/usr/include/boost/units/heterogeneous_system.hpp	/^struct static_root<heterogeneous_system<S>, static_rational<N,D> >$/;"	s	namespace:boost::units
static_root	/usr/include/boost/units/homogeneous_system.hpp	/^struct static_root<homogeneous_system<L>, static_rational<N,D> >$/;"	s	namespace:boost::units
static_root_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct static_root_impl {$/;"	s	namespace:boost::units::detail
static_root_impl	/usr/include/boost/units/detail/dimension_impl.hpp	/^struct static_root_impl<0> {$/;"	s	namespace:boost::units::detail
std	/usr/include/boost/units/limits.hpp	/^namespace std {$/;"	n
std::numeric_limits	/usr/include/boost/units/limits.hpp	/^class numeric_limits< ::boost::units::quantity<Unit, T> >$/;"	c	namespace:std
std::numeric_limits::denorm_min	/usr/include/boost/units/limits.hpp	/^        static quantity_type denorm_min()  { return(quantity_type::from_value(std::numeric_limits<T>::denorm_min())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
std::numeric_limits::digits	/usr/include/boost/units/limits.hpp	/^        static const int digits = std::numeric_limits<T>::digits;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::digits10	/usr/include/boost/units/limits.hpp	/^        static const int digits10 = std::numeric_limits<T>::digits10;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::epsilon	/usr/include/boost/units/limits.hpp	/^        static quantity_type epsilon()  { return(quantity_type::from_value(std::numeric_limits<T>::epsilon())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
std::numeric_limits::has_denorm	/usr/include/boost/units/limits.hpp	/^        static const float_denorm_style has_denorm = std::numeric_limits<T>::has_denorm;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::has_denorm	/usr/include/boost/units/limits.hpp	/^        static const int has_denorm = std::numeric_limits<T>::has_denorm;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::has_denorm_loss	/usr/include/boost/units/limits.hpp	/^        static const bool has_denorm_loss = std::numeric_limits<T>::has_denorm_loss;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::has_infinity	/usr/include/boost/units/limits.hpp	/^        static const bool has_infinity = std::numeric_limits<T>::has_infinity;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::has_quiet_NaN	/usr/include/boost/units/limits.hpp	/^        static const bool has_quiet_NaN = std::numeric_limits<T>::has_quiet_NaN;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::has_signaling_NaN	/usr/include/boost/units/limits.hpp	/^        static const bool has_signaling_NaN = std::numeric_limits<T>::has_signaling_NaN;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::infinity	/usr/include/boost/units/limits.hpp	/^        static quantity_type infinity()  { return(quantity_type::from_value(std::numeric_limits<T>::infinity())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
std::numeric_limits::is_bounded	/usr/include/boost/units/limits.hpp	/^        static const bool is_bounded = std::numeric_limits<T>::is_bounded;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::is_exact	/usr/include/boost/units/limits.hpp	/^        static const bool is_exact = std::numeric_limits<T>::is_exact;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::is_iec559	/usr/include/boost/units/limits.hpp	/^        static const bool is_iec559 = std::numeric_limits<T>::is_iec559;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::is_integer	/usr/include/boost/units/limits.hpp	/^        static const bool is_integer = std::numeric_limits<T>::is_integer;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::is_modulo	/usr/include/boost/units/limits.hpp	/^        static const bool is_modulo = std::numeric_limits<T>::is_modulo;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::is_signed	/usr/include/boost/units/limits.hpp	/^        static const bool is_signed = std::numeric_limits<T>::is_signed;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::is_specialized	/usr/include/boost/units/limits.hpp	/^        static const bool is_specialized = std::numeric_limits<T>::is_specialized;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::max	/usr/include/boost/units/limits.hpp	/^        static quantity_type (max)() { return(quantity_type::from_value((std::numeric_limits<T>::max)())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
std::numeric_limits::max_exponent	/usr/include/boost/units/limits.hpp	/^        static const int max_exponent = std::numeric_limits<T>::max_exponent;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::max_exponent10	/usr/include/boost/units/limits.hpp	/^        static const int max_exponent10 = std::numeric_limits<T>::max_exponent10;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::min	/usr/include/boost/units/limits.hpp	/^        static quantity_type (min)() { return(quantity_type::from_value((std::numeric_limits<T>::min)())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
std::numeric_limits::min_exponent	/usr/include/boost/units/limits.hpp	/^        static const int min_exponent = std::numeric_limits<T>::min_exponent;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::min_exponent10	/usr/include/boost/units/limits.hpp	/^        static const int min_exponent10 = std::numeric_limits<T>::min_exponent10;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::quantity_type	/usr/include/boost/units/limits.hpp	/^        typedef ::boost::units::quantity<Unit, T> quantity_type;$/;"	t	class:std::numeric_limits	access:public
std::numeric_limits::quiet_NaN	/usr/include/boost/units/limits.hpp	/^        static quantity_type quiet_NaN()  { return(quantity_type::from_value(std::numeric_limits<T>::quiet_NaN())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
std::numeric_limits::radix	/usr/include/boost/units/limits.hpp	/^        static const int radix = std::numeric_limits<T>::radix;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::round_error	/usr/include/boost/units/limits.hpp	/^        static quantity_type round_error()  { return(quantity_type::from_value(std::numeric_limits<T>::round_error())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
std::numeric_limits::round_style	/usr/include/boost/units/limits.hpp	/^        static const float_round_style round_style = std::numeric_limits<T>::round_style;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::round_style	/usr/include/boost/units/limits.hpp	/^        static const int round_style = std::numeric_limits<T>::round_style;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::signaling_NaN	/usr/include/boost/units/limits.hpp	/^        static quantity_type signaling_NaN()  { return(quantity_type::from_value(std::numeric_limits<T>::signaling_NaN())); }$/;"	f	class:std::numeric_limits	access:public	signature:()
std::numeric_limits::tinyness_before	/usr/include/boost/units/limits.hpp	/^        static const bool tinyness_before = std::numeric_limits<T>::tinyness_before;$/;"	m	class:std::numeric_limits	access:public
std::numeric_limits::traps	/usr/include/boost/units/limits.hpp	/^        static const bool traps = std::numeric_limits<T>::traps;$/;"	m	class:std::numeric_limits	access:public
steradian_base_unit	/usr/include/boost/units/base_units/angle/steradian.hpp	/^struct steradian_base_unit : public base_unit<steradian_base_unit, solid_angle_dimension, -1>$/;"	s	namespace:boost::units::angle	inherits:base_unit
stone_base_unit	/usr/include/boost/units/base_units/imperial/stone.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<14, static_rational<1> > > stone_base_unit;$/;"	t	namespace:boost::units::imperial
stress_dimension	/usr/include/boost/units/physical_dimensions/stress.hpp	/^                          time_base_dimension,-2>::type stress_dimension;     $/;"	t	namespace:boost::units
strip_zeroes_func	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct strip_zeroes_func {$/;"	s	namespace:boost::units::detail
strip_zeroes_func	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct strip_zeroes_func<static_rational<0> > {$/;"	s	namespace:boost::units::detail
strip_zeroes_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct strip_zeroes_impl {$/;"	s	namespace:boost::units::detail
strip_zeroes_impl	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct strip_zeroes_impl<0> {$/;"	s	namespace:boost::units::detail
subtract_typeof_helper	/usr/include/boost/units/operators.hpp	/^template<typename X,typename Y> struct subtract_typeof_helper   $/;"	s	namespace:boost::units
subtract_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct subtract_typeof_helper< quantity<Unit1,X>,quantity<Unit2,Y> >$/;"	s	namespace:boost::units
subtract_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct subtract_typeof_helper< quantity<unit<Dim, System>,X>,quantity<unit<Dim, System>,Y> >$/;"	s	namespace:boost::units
subtract_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct subtract_typeof_helper< quantity<unit<Dim1, System1>,X>,quantity<unit<Dim2, System2>,Y> >$/;"	s	namespace:boost::units
subtract_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct subtract_typeof_helper< unit<Dim,System>,unit<Dim,System> >$/;"	s	namespace:boost::units
surface_density	/usr/include/boost/units/systems/si/surface_density.hpp	/^typedef unit<surface_density_dimension,si::system>  surface_density;$/;"	t	namespace:boost::units::si
surface_density_dimension	/usr/include/boost/units/physical_dimensions/surface_density.hpp	/^                          mass_base_dimension,1>::type surface_density_dimension;$/;"	t	namespace:boost::units
surface_tension	/usr/include/boost/units/systems/si/surface_tension.hpp	/^typedef unit<surface_tension_dimension,si::system>     surface_tension;$/;"	t	namespace:boost::units::si
surface_tension_dimension	/usr/include/boost/units/physical_dimensions/surface_tension.hpp	/^                          time_base_dimension,-2>::type surface_tension_dimension;                    $/;"	t	namespace:boost::units
swap	/usr/include/boost/units/quantity.hpp	/^inline void swap(quantity<Unit,Y>& lhs, quantity<Unit,Y>& rhs)$/;"	f	namespace:boost::units	signature:(quantity<Unit,Y>& lhs, quantity<Unit,Y>& rhs)
symbol	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^    static const char* symbol() { return("'"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^    static const char* symbol() { return("\\""); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/angle/radian.hpp	/^    static std::string symbol() { return("rad"); }$/;"	f	struct:boost::units::angle::radian_base_unit	access:public	signature:()
symbol	/usr/include/boost/units/base_units/angle/revolution.hpp	/^    static const char* symbol() { return("rev"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/angle/steradian.hpp	/^    static std::string symbol() { return("sr"); }$/;"	f	struct:boost::units::angle::steradian_base_unit	access:public	signature:()
symbol	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^    static const char* symbol() { return("ldy"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^    static const char* symbol() { return("lhr"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^    static const char* symbol() { return("lmn"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^    static const char* symbol() { return("ly"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/cgs/gram.hpp	/^    static std::string symbol() { return("g"); }$/;"	f	struct:boost::units::cgs::gram_base_unit	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^    static const char* symbol() { return("drachm"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^    static const char* symbol() { return("fl oz"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/foot.hpp	/^    static const char* symbol() { return("ft"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^    static const char* symbol() { return("furlong"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^    static const char* symbol() { return("gal"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/gill.hpp	/^    static const char* symbol() { return("gill"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/grain.hpp	/^    static const char* symbol() { return("grain"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^    static const char* symbol() { return("cwt"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/inch.hpp	/^    static const char* symbol() { return("in"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/league.hpp	/^    static const char* symbol() { return("league"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/mile.hpp	/^    static const char* symbol() { return("mi"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^    static const char* symbol() { return("oz"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/quart.hpp	/^    static const char* symbol() { return("qt"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^    static const char* symbol() { return("quarter"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/stone.hpp	/^    static const char* symbol() { return("st"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/thou.hpp	/^    static const char* symbol() { return("thou"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/imperial/ton.hpp	/^    static const char* symbol() { return("t"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^    static const char* symbol() { return("A"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/metric/day.hpp	/^    static const char* symbol() { return("d"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/metric/fermi.hpp	/^    static const char* symbol() { return("fm"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/metric/hour.hpp	/^    static const char* symbol() { return("h"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/metric/micron.hpp	/^    static const char* symbol() { return("u"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/metric/minute.hpp	/^    static const char* symbol() { return("min"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^    static const char* symbol() { return("nmi"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/metric/ton.hpp	/^    static const char* symbol() { return("t"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/metric/year.hpp	/^    static const char* symbol() { return("yr"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/si/ampere.hpp	/^    static std::string symbol() { return("A"); }$/;"	f	struct:boost::units::si::ampere_base_unit	access:public	signature:()
symbol	/usr/include/boost/units/base_units/si/candela.hpp	/^    static std::string symbol() { return("cd"); }$/;"	f	struct:boost::units::si::candela_base_unit	access:public	signature:()
symbol	/usr/include/boost/units/base_units/si/kelvin.hpp	/^    static std::string symbol() { return("K"); }$/;"	f	struct:boost::units::si::kelvin_base_unit	access:public	signature:()
symbol	/usr/include/boost/units/base_units/si/meter.hpp	/^    static std::string symbol() { return("m"); }$/;"	f	struct:boost::units::si::meter_base_unit	access:public	signature:()
symbol	/usr/include/boost/units/base_units/si/mole.hpp	/^    static std::string symbol() { return("mol"); }$/;"	f	struct:boost::units::si::mole_base_unit	access:public	signature:()
symbol	/usr/include/boost/units/base_units/si/second.hpp	/^    static std::string symbol() { return("s"); }$/;"	f	struct:boost::units::si::second_base_unit	access:public	signature:()
symbol	/usr/include/boost/units/base_units/temperature/celsius.hpp	/^    static std::string symbol() { return("C"); }$/;"	f	struct:boost::units::temperature::celsius_base_unit	access:public	signature:()
symbol	/usr/include/boost/units/base_units/temperature/fahrenheit.hpp	/^    static std::string symbol() { return("F"); }$/;"	f	struct:boost::units::temperature::fahrenheit_base_unit	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/cup.hpp	/^    static const char* symbol() { return("c"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/dram.hpp	/^    static const char* symbol() { return("dr"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^    static const char* symbol() { return("fl dr"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^    static const char* symbol() { return("fl oz"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/foot.hpp	/^    static const char* symbol() { return("ft"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/gallon.hpp	/^    static const char* symbol() { return("gal"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/gill.hpp	/^    static const char* symbol() { return("gi"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/grain.hpp	/^    static const char* symbol() { return("gr"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^    static const char* symbol() { return("cwt"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/inch.hpp	/^    static const char* symbol() { return("in"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/mil.hpp	/^    static const char* symbol() { return("mil"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/mile.hpp	/^    static const char* symbol() { return("mi"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/minim.hpp	/^    static const char* symbol() { return("minim"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/ounce.hpp	/^    static const char* symbol() { return("oz"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/quart.hpp	/^    static const char* symbol() { return("qt"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^    static const char* symbol() { return("tbsp"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^    static const char* symbol() { return("tsp"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/base_units/us/ton.hpp	/^    static const char* symbol() { return("t"); }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/io.hpp	/^    static std::string symbol()$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/scale.hpp	/^    static std::string symbol() { return(""); }$/;"	f	struct:boost::units::scale	access:public	signature:()
symbol	/usr/include/boost/units/scaled_base_unit.hpp	/^    static std::string symbol()$/;"	f	struct:boost::units::scaled_base_unit	access:public	signature:()
symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[I]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[J]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[L]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[M]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[N]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[QP]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[QS]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[T]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol	/usr/include/boost/units/systems/abstract.hpp	/^    static std::string symbol()     { return "[Theta]"; }$/;"	f	struct:boost::units::base_unit_info	access:public	signature:()
symbol_fmt	/usr/include/boost/units/io.hpp	/^    symbol_fmt = 0,     \/\/\/ default - reduces unit names to known symbols for both base and derived units.$/;"	e	enum:boost::units::format_mode
symbol_format	/usr/include/boost/units/io.hpp	/^inline std::ios_base& symbol_format(std::ios_base& ios) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
symbol_string	/usr/include/boost/units/io.hpp	/^symbol_string(const unit<Dimension, System>&)$/;"	f	namespace:boost::units	signature:(const unit<Dimension, System>&)
symbol_string	/usr/include/boost/units/scale.hpp	/^std::string symbol_string(const scale<Base,Exponent>&)$/;"	f	namespace:boost::units	signature:(const scale<Base,Exponent>&)
symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::acceleration>::type&) { return "Gal"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::acceleration>::type&)
symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::current>::type&) { return "Bi"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::current>::type&)
symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::dynamic_viscosity>::type&) { return "P"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::dynamic_viscosity>::type&)
symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::energy>::type&) { return "erg"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::energy>::type&)
symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::force>::type&) { return "dyn"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::force>::type&)
symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::kinematic_viscosity>::type&) { return "St"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::kinematic_viscosity>::type&)
symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::pressure>::type&) { return "Ba"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::pressure>::type&)
symbol_string	/usr/include/boost/units/systems/cgs/io.hpp	/^inline std::string symbol_string(const reduce_unit<cgs::wavenumber>::type&) { return "K"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<cgs::wavenumber>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::absorbed_dose>::type&) { return "Gy"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::absorbed_dose>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::capacitance>::type&) { return "F"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::capacitance>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::catalytic_activity>::type&) { return "kat"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::catalytic_activity>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::conductance>::type&) { return "S"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::conductance>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::electric_charge>::type&) { return "C"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::electric_charge>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::electric_potential>::type&) { return "V"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::electric_potential>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::energy>::type&) { return "J"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::energy>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::force>::type&) { return "N"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::force>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::frequency>::type&) { return "Hz"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::frequency>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::illuminance>::type&) { return "lx"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::illuminance>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::inductance>::type&) { return "H"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::inductance>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::luminous_flux>::type&) { return "lm"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::luminous_flux>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::magnetic_flux>::type&) { return "Wb"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::magnetic_flux>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::magnetic_flux_density>::type&) { return "T"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::magnetic_flux_density>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::power>::type&) { return "W"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::power>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::pressure>::type&) { return "Pa"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::pressure>::type&)
symbol_string	/usr/include/boost/units/systems/si/io.hpp	/^inline std::string symbol_string(const reduce_unit<si::resistance>::type&) { return "Ohm"; }$/;"	f	namespace:boost::units	signature:(const reduce_unit<si::resistance>::type&)
symbol_string	/usr/include/boost/units/units_fwd.hpp	/^template<class T> std::string symbol_string(const T&);$/;"	p	namespace:boost::units	signature:(const T&)
symbol_string_impl	/usr/include/boost/units/io.hpp	/^struct symbol_string_impl$/;"	s	namespace:boost::units::detail
symbol_string_impl	/usr/include/boost/units/io.hpp	/^struct symbol_string_impl<0>$/;"	s	namespace:boost::units::detail
symbol_string_impl	/usr/include/boost/units/io.hpp	/^struct symbol_string_impl<1>$/;"	s	namespace:boost::units::detail
system	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename detail::make_homogeneous_system<all_base_units>::type system;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
system	/usr/include/boost/units/systems/abstract.hpp	/^>::type system;$/;"	t	namespace:boost::units::abstract
system	/usr/include/boost/units/systems/angle/degrees.hpp	/^typedef make_system<boost::units::angle::degree_base_unit>::type system;$/;"	t	namespace:boost::units::degree
system	/usr/include/boost/units/systems/angle/gradians.hpp	/^typedef make_system<boost::units::angle::gradian_base_unit>::type system;$/;"	t	namespace:boost::units::gradian
system	/usr/include/boost/units/systems/angle/revolutions.hpp	/^typedef make_system<boost::units::angle::revolution_base_unit>::type system;$/;"	t	namespace:boost::units::revolution
system	/usr/include/boost/units/systems/cgs/base.hpp	/^                    biot_base_unit>::type system;$/;"	t	namespace:boost::units::cgs
system	/usr/include/boost/units/systems/si/base.hpp	/^                    angle::steradian_base_unit>::type system;$/;"	t	namespace:boost::units::si
system	/usr/include/boost/units/systems/temperature/celsius.hpp	/^typedef make_system<boost::units::temperature::celsius_base_unit>::type system;$/;"	t	namespace:boost::units::celsius
system	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^typedef make_system<boost::units::temperature::fahrenheit_base_unit>::type system;$/;"	t	namespace:boost::units::fahrenheit
system_list	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename Dest::system_type::type system_list;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
system_type	/usr/include/boost/units/quantity.hpp	/^        typedef System                                          system_type;$/;"	t	class:boost::units::quantity	access:public
system_type	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef S system_type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
system_type	/usr/include/boost/units/unit.hpp	/^        typedef System              system_type;$/;"	t	class:boost::units::unit	access:public
tablespoon_base_unit	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<2, static_rational<-5> > > tablespoon_base_unit;$/;"	t	namespace:boost::units::us
tag	/usr/include/boost/units/detail/dimension_list.hpp	/^    typedef detail::dimension_list_tag  tag;$/;"	t	struct:boost::units::list	access:public
tag	/usr/include/boost/units/detail/ordinal.hpp	/^    typedef detail::ordinal_tag tag;$/;"	t	struct:boost::units::ordinal	access:public
tag	/usr/include/boost/units/detail/unscale.hpp	/^    typedef scale_dim_tag tag;$/;"	t	struct:boost::units::scale_list_dim	access:public
tag	/usr/include/boost/units/dim.hpp	/^    typedef detail::dim_tag tag;$/;"	t	struct:boost::units::dim	access:public
tag	/usr/include/boost/units/dimensionless_type.hpp	/^    typedef detail::dimension_list_tag  tag;$/;"	t	struct:boost::units::dimensionless_type	access:public
tag	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef heterogeneous_system_dim_tag tag;$/;"	t	struct:boost::units::heterogeneous_system_dim	access:public
tag	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef scaled_base_unit_tag tag;$/;"	t	struct:boost::units::scaled_base_unit	access:public
tag	/usr/include/boost/units/static_rational.hpp	/^        typedef detail::static_rational_tag tag;$/;"	t	class:boost::units::static_rational	access:public
tag_type	/usr/include/boost/units/dim.hpp	/^    typedef T               tag_type;$/;"	t	struct:boost::units::dim	access:public
tag_type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef Unit tag_type;$/;"	t	struct:boost::units::heterogeneous_system_dim	access:public
tan	/usr/include/boost/units/cmath.hpp	/^tan(const quantity<si::plane_angle,Y>& theta)$/;"	f	namespace:boost::units	signature:(const quantity<si::plane_angle,Y>& theta)
tan	/usr/include/boost/units/cmath.hpp	/^tan(const quantity<unit<plane_angle_dimension,System>,Y>& theta)$/;"	f	namespace:boost::units	signature:(const quantity<unit<plane_angle_dimension,System>,Y>& theta)
teaspoon_base_unit	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^typedef scaled_base_unit<pint_base_unit, scale<96, static_rational<-1> > > teaspoon_base_unit;$/;"	t	namespace:boost::units::us
temperature	/usr/include/boost/units/base_units/temperature/celsius.hpp	/^namespace temperature {$/;"	n	namespace:boost::units
temperature	/usr/include/boost/units/base_units/temperature/fahrenheit.hpp	/^namespace temperature {$/;"	n	namespace:boost::units
temperature	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<temperature_dimension,system>           temperature;            \/\/\/< abstract unit of temperature$/;"	t	namespace:boost::units::abstract
temperature	/usr/include/boost/units/systems/si/temperature.hpp	/^typedef unit<temperature_dimension,si::system>   temperature;$/;"	t	namespace:boost::units::si
temperature	/usr/include/boost/units/systems/temperature/celsius.hpp	/^typedef unit<temperature_dimension,system>   temperature;$/;"	t	namespace:boost::units::celsius
temperature	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^typedef unit<temperature_dimension,system>   temperature;$/;"	t	namespace:boost::units::fahrenheit
temperature_base_dimension	/usr/include/boost/units/physical_dimensions/temperature.hpp	/^struct temperature_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
temperature_dimension	/usr/include/boost/units/physical_dimensions/temperature.hpp	/^typedef temperature_base_dimension::dimension_type temperature_dimension;$/;"	t	namespace:boost::units
temperature_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct temperature_unit_tag : base_unit<temperature_unit_tag, temperature_dimension, -26> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
test	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef is_base_dimension_unit<typename Begin::item::dimension_type> test;$/;"	t	struct:boost::units::detail::is_simple_system_impl::apply	access:public
test	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef is_base_dimension_unit<typename Begin::item::dimension_type> test;$/;"	t	struct:boost::units::detail::is_simple_system	access:public
test_norm	/usr/include/boost/units/io.hpp	/^inline mpl::false_ test_norm(one) { return mpl::false_(); }$/;"	f	namespace:boost::units::detail	signature:(one)
test_norm	/usr/include/boost/units/io.hpp	/^inline mpl::true_ test_norm(double) { return mpl::true_(); }$/;"	f	namespace:boost::units::detail	signature:(double)
thermal_conductivity_dimension	/usr/include/boost/units/physical_dimensions/thermal_conductivity.hpp	/^                          temperature_base_dimension,-1>::type thermal_conductivity_dimension;                    $/;"	t	namespace:boost::units
this_type	/usr/include/boost/units/absolute.hpp	/^        typedef absolute<Y>     this_type;$/;"	t	class:boost::units::absolute	access:public
this_type	/usr/include/boost/units/base_dimension.hpp	/^        typedef base_dimension                                                          this_type;$/;"	t	class:boost::units::base_dimension	access:public
this_type	/usr/include/boost/units/base_unit.hpp	/^        typedef base_unit           this_type;$/;"	t	class:boost::units::base_unit	access:public
this_type	/usr/include/boost/units/quantity.hpp	/^        typedef quantity<Unit,Y>                        this_type;$/;"	t	class:boost::units::quantity	access:public
this_type	/usr/include/boost/units/quantity.hpp	/^        typedef quantity<unit<dimensionless_type,System>,Y>     this_type;$/;"	t	class:boost::units::quantity	access:public
this_type	/usr/include/boost/units/static_rational.hpp	/^        typedef static_rational this_type;$/;"	t	class:boost::units::static_rational	access:public
this_type	/usr/include/boost/units/static_rational.hpp	/^        typedef static_rational<N,D>    this_type;$/;"	t	class:boost::units::static_rational	access:public
this_type	/usr/include/boost/units/unit.hpp	/^        typedef unit<Dim,System>    this_type;$/;"	t	class:boost::units::unit	access:public
thou_base_unit	/usr/include/boost/units/base_units/imperial/thou.hpp	/^typedef scaled_base_unit<yard_base_unit, scale<36000, static_rational<-1> > > thou_base_unit;$/;"	t	namespace:boost::units::imperial
time	/usr/include/boost/units/systems/abstract.hpp	/^typedef unit<time_dimension,system>                  time;                   \/\/\/< abstract unit of time$/;"	t	namespace:boost::units::abstract
time	/usr/include/boost/units/systems/cgs/time.hpp	/^typedef unit<time_dimension,cgs::system>     time;$/;"	t	namespace:boost::units::cgs
time	/usr/include/boost/units/systems/si/time.hpp	/^typedef unit<time_dimension,si::system>      time;$/;"	t	namespace:boost::units::si
time_base_dimension	/usr/include/boost/units/physical_dimensions/time.hpp	/^struct time_base_dimension : $/;"	s	namespace:boost::units	inherits:boost::units::base_dimension
time_dimension	/usr/include/boost/units/physical_dimensions/time.hpp	/^typedef time_base_dimension::dimension_type time_dimension;$/;"	t	namespace:boost::units
time_unit_tag	/usr/include/boost/units/systems/abstract.hpp	/^struct time_unit_tag : base_unit<time_unit_tag, time_dimension, -28> { };$/;"	s	namespace:boost::units::abstract	inherits:base_unit
times_impl	/usr/include/boost/units/dim.hpp	/^struct times_impl<boost::units::detail::dim_tag,boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
times_impl	/usr/include/boost/units/dim.hpp	/^struct times_impl<boost::units::detail::static_rational_tag,boost::units::detail::dim_tag>$/;"	s	namespace:boost::mpl
times_impl	/usr/include/boost/units/dimension.hpp	/^struct times_impl<boost::units::detail::dimension_list_tag,boost::units::detail::dimension_list_tag>$/;"	s	namespace:boost::mpl
times_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct times_impl<boost::units::heterogeneous_system_dim_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
times_impl	/usr/include/boost/units/static_rational.hpp	/^struct times_impl<boost::units::detail::static_rational_tag, boost::units::detail::static_rational_tag>$/;"	s	namespace:boost::mpl
tinyness_before	/usr/include/boost/units/limits.hpp	/^        static const bool tinyness_before = std::numeric_limits<T>::tinyness_before;$/;"	m	class:std::numeric_limits	access:public
to_quantity_type	/usr/include/boost/units/detail/absolute_impl.hpp	/^    typedef quantity<absolute<Unit2>, T2> to_quantity_type;$/;"	t	struct:boost::units::conversion_helper	access:public
to_string	/usr/include/boost/units/io.hpp	/^template<class T> std::string to_string(const T& t)$/;"	f	namespace:boost::units	signature:(const T& t)
to_string	/usr/include/boost/units/io.hpp	/^template<integer_type N, integer_type D> std::string to_string(const static_rational<N,D>&)$/;"	f	namespace:boost::units	signature:(const static_rational<N,D>&)
to_string	/usr/include/boost/units/io.hpp	/^template<integer_type N> std::string to_string(const static_rational<N>&)$/;"	f	namespace:boost::units	signature:(const static_rational<N>&)
to_string	/usr/include/boost/units/units_fwd.hpp	/^template<class T> std::string to_string(const T&);$/;"	p	namespace:boost::units	signature:(const T&)
to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl($/;"	f	namespace:boost::units::detail	signature:( const unit< Dimension, heterogeneous_system< heterogeneous_system_impl< list<heterogeneous_system_dim<scaled_base_unit<Unit, UnitScale>, static_rational<1> >, dimensionless_type>, Dimension, Scale > > >&, Subformatter f, typename base_unit_info<scaled_base_unit<Unit, UnitScale> >::base_unit_info_primary_template* = 0)
to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl($/;"	f	namespace:boost::units::detail	signature:( const unit< Dimension, heterogeneous_system< heterogeneous_system_impl< list<heterogeneous_system_dim<scaled_base_unit<Unit, UnitScale>, static_rational<1> >, dimensionless_type>, Dimension, dimensionless_type > > >&, Subformatter f, typename base_unit_info<scaled_base_unit<Unit, UnitScale> >::base_unit_info_primary_template* = 0)
to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<Units, Dimension, Scale> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<Units, Dimension, Scale> > >&, Subformatter f)
to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<Units, Dimension, dimensionless_type> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<Units, Dimension, dimensionless_type> > >&, Subformatter f)
to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<list<heterogeneous_system_dim<Unit, static_rational<1> >,dimensionless_type>, Dimension, Scale> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<list<heterogeneous_system_dim<Unit, static_rational<1> >,dimensionless_type>, Dimension, Scale> > >&, Subformatter f)
to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<list<heterogeneous_system_dim<Unit, static_rational<1> >,dimensionless_type>, Dimension, dimensionless_type> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension, heterogeneous_system<heterogeneous_system_impl<list<heterogeneous_system_dim<Unit, static_rational<1> >,dimensionless_type>, Dimension, dimensionless_type> > >&, Subformatter f)
to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<Dimension,System>&, SubFormatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<Dimension,System>&, SubFormatter f)
to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<dimensionless_type, heterogeneous_system<heterogeneous_system_impl<dimensionless_type, dimensionless_type, Scale> > >&, Subformatter f)$/;"	f	namespace:boost::units::detail	signature:(const unit<dimensionless_type, heterogeneous_system<heterogeneous_system_impl<dimensionless_type, dimensionless_type, Scale> > >&, Subformatter f)
to_string_impl	/usr/include/boost/units/io.hpp	/^to_string_impl(const unit<dimensionless_type, heterogeneous_system<heterogeneous_system_impl<dimensionless_type, dimensionless_type, dimensionless_type> > >&, Subformatter)$/;"	f	namespace:boost::units::detail	signature:(const unit<dimensionless_type, heterogeneous_system<heterogeneous_system_impl<dimensionless_type, dimensionless_type, dimensionless_type> > >&, Subformatter)
ton_base_unit	/usr/include/boost/units/base_units/imperial/ton.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<2240, static_rational<1> > > ton_base_unit;$/;"	t	namespace:boost::units::imperial
ton_base_unit	/usr/include/boost/units/base_units/metric/ton.hpp	/^typedef scaled_base_unit<boost::units::si::kilogram_base_unit, scale<1000, static_rational<1> > > ton_base_unit;$/;"	t	namespace:boost::units::metric
ton_base_unit	/usr/include/boost/units/base_units/us/ton.hpp	/^typedef scaled_base_unit<pound_base_unit, scale<2000, static_rational<1> > > ton_base_unit;$/;"	t	namespace:boost::units::us
top_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename RowsBegin::item top_row;$/;"	t	struct:boost::units::detail::determine_extra_equations::apply	access:public
top_row	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef typename Matrix::item top_row;$/;"	t	struct:boost::units::detail::make_square_and_invert	access:public
torque	/usr/include/boost/units/systems/si/torque.hpp	/^typedef unit<torque_dimension,si::system>     torque;$/;"	t	namespace:boost::units::si
torque_dimension	/usr/include/boost/units/physical_dimensions/torque.hpp	/^                          plane_angle_base_dimension,-1>::type torque_dimension;                    $/;"	t	namespace:boost::units
transformed_identity_equation	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename divide_equation<(IdentityBegin::item::size::value)>::template apply<typename IdentityBegin::item, current_value>::type transformed_identity_equation;$/;"	t	struct:boost::units::detail::invert_strip_leading_zeroes::apply	access:public
traps	/usr/include/boost/units/limits.hpp	/^        static const bool traps = std::numeric_limits<T>::traps;$/;"	m	class:std::numeric_limits	access:public
try_add_unit_impl	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct try_add_unit_impl {$/;"	s	namespace:boost::units::detail
try_add_unit_impl	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^struct try_add_unit_impl<0> {$/;"	s	namespace:boost::units::detail
type	/usr/include/boost/units/base_dimension.hpp	/^        typedef Derived type;$/;"	t	class:boost::units::base_dimension	access:public
type	/usr/include/boost/units/base_unit.hpp	/^        typedef Derived type;$/;"	t	class:boost::units::base_unit	access:public
type	/usr/include/boost/units/derived_dimension.hpp	/^                         list< dim< DT2,static_rational<E2> >, dimensionless_type > > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
type	/usr/include/boost/units/derived_dimension.hpp	/^                         list< dim< DT3,static_rational<E3> >, dimensionless_type > > > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
type	/usr/include/boost/units/derived_dimension.hpp	/^                         list< dim< DT4,static_rational<E4> >, dimensionless_type > > > > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
type	/usr/include/boost/units/derived_dimension.hpp	/^                         list< dim< DT5,static_rational<E5> >, dimensionless_type > > > > > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
type	/usr/include/boost/units/derived_dimension.hpp	/^                         list< dim< DT6,static_rational<E6> >, dimensionless_type > > > > > > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
type	/usr/include/boost/units/derived_dimension.hpp	/^                         list< dim< DT7,static_rational<E7> >, dimensionless_type > > > > > > > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
type	/usr/include/boost/units/derived_dimension.hpp	/^    make_dimension_list< list< dim< DT1,static_rational<E1> >, dimensionless_type > >::type type;$/;"	t	struct:boost::units::derived_dimension	access:public
type	/usr/include/boost/units/derived_dimension.hpp	/^    typedef detail::unspecified type;$/;"	t	struct:boost::units::derived_dimension	access:public
type	/usr/include/boost/units/detail/absolute_impl.hpp	/^    typedef absolute<typename reduce_unit<unit<D, S> >::type> type;$/;"	t	struct:boost::units::reduce_unit	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef one type;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef one type;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename T::unit_type type;$/;"	t	struct:boost::units::unscaled_get_default_conversion_impl::apply	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename divide_typeof_helper<one, typename converter::type>::type type;$/;"	t	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename multiply_typeof_helper<typename conversion::type, typename next_iteration::type>::type type;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename multiply_typeof_helper<typename converter::type, typename next_iteration::type>::type type;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename unscaled_get_default_conversion<typename unscale<T>::type>::type type;$/;"	t	struct:boost::units::unscaled_get_default_conversion_impl::apply	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    >::template apply<BaseUnit>::type type;$/;"	t	struct:boost::units::get_default_conversion	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    >::type type;$/;"	t	struct:boost::units::detail::conversion_factor_helper	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef one type;$/;"	t	struct:boost::units::base_unit_converter_base	access:public
type	/usr/include/boost/units/detail/conversion_impl.hpp	/^    typedef typename multiply_typeof_helper<typename converter::type, typename eval_factor::type>::type type;$/;"	t	struct:boost::units::detail::do_call_base_unit_converter	access:public
type	/usr/include/boost/units/detail/dim_impl.hpp	/^    typedef typename T::tag_type    type;$/;"	t	struct:boost::units::detail::get_tag	access:public
type	/usr/include/boost/units/detail/dim_impl.hpp	/^    typedef typename T::value_type    type;$/;"	t	struct:boost::units::detail::get_value	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        > type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_comparison_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        > type;$/;"	t	struct:boost::units::detail::iterator_to_list::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        > type;$/;"	t	struct:boost::units::detail::merge_dimensions_func::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        > type;$/;"	t	struct:boost::units::detail::static_inverse_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        > type;$/;"	t	struct:boost::units::detail::static_power_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        > type;$/;"	t	struct:boost::units::detail::static_root_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_insert::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::merge_dimensions	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::merge_dimensions_func::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::merge_dimensions_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_mpl_sequence::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::iterator_to_list::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::merge_dimensions_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::static_inverse_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::static_power_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::static_root_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef list<T, dimensionless_type> type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_insert::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename insertion_sort_dims_insert<(next::size::value)>::template apply<next, typename Begin::item>::type type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename insertion_sort_dims_insert<(next::size::value)>::template apply<next, typename mpl::deref<Begin>::type>::type type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_mpl_sequence::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename iterator_to_list<N>::template apply<Begin1>::type type;$/;"	t	struct:boost::units::detail::merge_dimensions_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename iterator_to_list<N>::template apply<Begin2>::type type;$/;"	t	struct:boost::units::detail::merge_dimensions_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^        typedef typename push_front_or_add<Begin, T>::type type;$/;"	t	struct:boost::units::detail::insertion_sort_dims_comparison_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^    typedef typename insertion_sort_dims_impl<list<T, Next>::size::value>::template apply<list<T, Next> >::type type;$/;"	t	struct:boost::units::detail::sort_dims	access:public
type	/usr/include/boost/units/detail/dimension_impl.hpp	/^    typedef typename insertion_sort_dims_mpl_sequence<mpl::size<T>::value>::template apply<typename mpl::begin<T>::type>::type type;$/;"	t	struct:boost::units::detail::sort_dims	access:public
type	/usr/include/boost/units/detail/dimension_list.hpp	/^        typedef L type;$/;"	t	struct:boost::mpl::begin_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_list.hpp	/^        typedef typename L::item type;$/;"	t	struct:boost::mpl::front_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_list.hpp	/^        typedef typename L::next type;$/;"	t	struct:boost::mpl::pop_front_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_list.hpp	/^        typedef units::dimensionless_type type;$/;"	t	struct:boost::mpl::end_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_list.hpp	/^        typedef units::list<T, L> type;$/;"	t	struct:boost::mpl::push_front_impl::apply	access:public
type	/usr/include/boost/units/detail/dimension_list.hpp	/^    typedef Item type;$/;"	t	struct:boost::mpl::deref	access:public
type	/usr/include/boost/units/detail/dimension_list.hpp	/^    typedef list              type;$/;"	t	struct:boost::units::list	access:public
type	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^    typedef int type;$/;"	t	struct:boost::units::detail::void_if_dimensionless	access:public
type	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^    typedef int type;$/;"	t	struct:boost::units::detail::void_if_heterogeneous	access:public
type	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^    typedef void type;$/;"	t	struct:boost::units::detail::void_if_dimensionless	access:public
type	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^    typedef void type;$/;"	t	struct:boost::units::detail::void_if_heterogeneous	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        > type;$/;"	t	struct:boost::units::detail::extract_base_units::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        > type;$/;"	t	struct:boost::units::detail::make_solve_list_first_non_zero::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        > type;$/;"	t	struct:boost::units::detail::solve_internal_zero::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        > type;$/;"	t	struct:boost::units::detail::solve_leading_zeroes::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        > type;$/;"	t	struct:boost::units::detail::solve_normal::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        >::template apply<Begin, Current, Units, Dimensions, N>::type type;$/;"	t	struct:boost::units::detail::make_homogeneous_system_impl::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::make_homogeneous_system_func::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::make_solve_list_first_non_zero::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::make_solve_list_normal::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::solve_first_non_zero::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef L type;$/;"	t	struct:boost::units::detail::try_add_unit_impl::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef T type;$/;"	t	struct:boost::units::detail::extract_base_units::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef Units type;$/;"	t	struct:boost::units::detail::make_homogeneous_system_impl::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::solve_end::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef list<typename Begin::item, Units> type;$/;"	t	struct:boost::units::detail::make_homogeneous_system_func::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef no_solution type;$/;"	t	struct:boost::units::detail::make_solve_list_leading_zeroes::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef solve_end type;$/;"	t	struct:boost::units::detail::make_solve_list_normal::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef solve_internal_zero<Next> type;$/;"	t	struct:boost::units::detail::make_solve_list_internal_zero::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef solve_normal<T, X, Next> type;$/;"	t	struct:boost::units::detail::make_solve_list_internal_zero::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef typename Begin::item::template apply<next>::type type;$/;"	t	struct:boost::units::detail::try_add_unit_impl::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^        typedef typename make_solve_list_first_non_zero<typename Begin::item>::template apply<Begin, N>::type type;$/;"	t	struct:boost::units::detail::make_solve_list_leading_zeroes::apply	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    > type;$/;"	t	struct:boost::units::detail::make_homogeneous_system	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    typedef no_solution type;$/;"	t	struct:boost::units::detail::solve_leading_zeroes	access:public
type	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^    typedef solve_leading_zeroes type;$/;"	t	struct:boost::units::detail::solve_leading_zeroes	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > type;$/;"	t	struct:boost::units::detail::add_zeroes_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > type;$/;"	t	struct:boost::units::detail::determine_extra_equations_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > type;$/;"	t	struct:boost::units::detail::eliminate_from_pair_of_equations_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > type;$/;"	t	struct:boost::units::detail::expand_dimensions::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > type;$/;"	t	struct:boost::units::detail::is_simple_system_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        > type;$/;"	t	struct:boost::units::detail::multiply_add_units_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::calculate_base_unit_exponents_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::determine_extra_equations::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::find_base_dimensions_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::find_base_dimensions_impl_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::invert_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::multiply_add_units::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef IdentityBegin type;$/;"	t	struct:boost::units::detail::invert_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef Result type;$/;"	t	struct:boost::units::detail::determine_extra_equations::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef Result type;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef S type;$/;"	t	struct:boost::units::detail::find_base_dimensions_impl_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef Set type;$/;"	t	struct:boost::units::detail::set_insert::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef T type;$/;"	t	struct:boost::units::detail::add_zeroes_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef T type;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef T type;$/;"	t	struct:boost::units::detail::strip_zeroes_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::create_unit_matrix::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::determine_extra_equations_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::divide_equation::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::eliminate_from_pair_of_equations_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::expand_dimensions::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::make_identity::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::multiply_add_units_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef inconsistent type;$/;"	t	struct:boost::units::detail::strip_zeroes_func::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename create_row_of_identity<CurrentColumn, TotalColumns>::type, Result> type;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename create_row_of_identity<Size - N, Size>::type, typename make_identity<N - 1>::template apply<Size>::type> type;$/;"	t	struct:boost::units::detail::make_identity::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename expand_dimensions<Dimensions::size::value>::template apply<Dimensions, typename Begin::item::dimension_type>::type, next> type;$/;"	t	struct:boost::units::detail::create_unit_matrix::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef list<typename mpl::divides<typename Begin::item, Divisor>::type, typename divide_equation<N - 1>::template apply<typename Begin::next, Divisor>::type> type;$/;"	t	struct:boost::units::detail::divide_equation::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef set<T, Set> type;$/;"	t	struct:boost::units::detail::set_insert::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef set_end type;$/;"	t	struct:boost::units::detail::find_base_dimensions_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef static_rational<0> type;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_func::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename T::item::value_type type;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_func::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next::type type;$/;"	t	struct:boost::units::detail::determine_extra_equations_skip_zeros_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename next_::type type;$/;"	t	struct:boost::units::detail::calculate_base_dimension_coefficients_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename strip_zeroes_func<typename T::item>::template apply<T, N>::type type;$/;"	t	struct:boost::units::detail::strip_zeroes_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename strip_zeroes_impl<N-1>::template apply<typename L::next>::type type;$/;"	t	struct:boost::units::detail::strip_zeroes_func::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^        typedef typename strip_zeroes_impl<base_solutions::extra>::template apply<units>::type type;$/;"	t	struct:boost::units::detail::calculate_base_unit_exponents_impl::apply	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    >::type type;$/;"	t	struct:boost::units::detail::eliminate_from_pair_of_equations	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    >::type type;$/;"	t	struct:boost::units::detail::find_base_dimensions	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    >::type type;$/;"	t	struct:boost::units::detail::is_simple_system	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    >::type type;$/;"	t	struct:boost::units::detail::make_square_and_invert	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::make_zero_vector	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef list<static_rational<0>, typename create_row_of_identity<Column - 1, TotalColumns - 1>::type> type;$/;"	t	struct:boost::units::detail::create_row_of_identity	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef list<static_rational<0>, typename make_zero_vector<N - 1>::type> type;$/;"	t	struct:boost::units::detail::make_zero_vector	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef list<static_rational<1>, typename make_zero_vector<TotalColumns - 1>::type> type;$/;"	t	struct:boost::units::detail::create_row_of_identity	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef mpl::false_ type;$/;"	t	struct:boost::units::detail::is_base_dimension_unit	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef mpl::true_ type;$/;"	t	struct:boost::units::detail::is_base_dimension_unit	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef typename calculate_base_unit_exponents_impl<is_simple_system<T>::value>::template apply<T, Dimensions>::type type;$/;"	t	struct:boost::units::detail::calculate_base_unit_exponents	access:public
type	/usr/include/boost/units/detail/linear_algebra.hpp	/^    typedef typename make_square_and_invert<matrix>::type type;$/;"	t	struct:boost::units::detail::normalize_units	access:public
type	/usr/include/boost/units/detail/one.hpp	/^    typedef T type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
type	/usr/include/boost/units/detail/one.hpp	/^    typedef T type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
type	/usr/include/boost/units/detail/one.hpp	/^    typedef one type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
type	/usr/include/boost/units/detail/one.hpp	/^    typedef one type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
type	/usr/include/boost/units/detail/one.hpp	/^struct one_to_double_type { typedef T type; };$/;"	t	struct:boost::units::one_to_double_type	access:public
type	/usr/include/boost/units/detail/one.hpp	/^struct one_to_double_type<one> { typedef double type; };$/;"	t	struct:boost::units::one_to_double_type	access:public
type	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct ordinal_has_already_been_defined<false>  { typedef void type; };$/;"	t	struct:boost::units::detail::ordinal_has_already_been_defined	access:public
type	/usr/include/boost/units/detail/push_front_if.hpp	/^        typedef L type;$/;"	t	struct:boost::units::detail::push_front_if::apply	access:public
type	/usr/include/boost/units/detail/push_front_if.hpp	/^        typedef list<T, L> type;$/;"	t	struct:boost::units::detail::push_front_if::apply	access:public
type	/usr/include/boost/units/detail/push_front_or_add.hpp	/^        > type;$/;"	t	struct:boost::units::detail::push_front_or_add_impl::apply	access:public
type	/usr/include/boost/units/detail/push_front_or_add.hpp	/^        typedef list<T, Sequence> type;$/;"	t	struct:boost::units::detail::push_front_or_add_impl::apply	access:public
type	/usr/include/boost/units/detail/push_front_or_add.hpp	/^    >::type type;$/;"	t	struct:boost::units::detail::push_front_or_add	access:public
type	/usr/include/boost/units/detail/push_front_or_add.hpp	/^    typedef list<T, dimensionless_type> type;$/;"	t	struct:boost::units::detail::push_front_or_add	access:public
type	/usr/include/boost/units/detail/sort.hpp	/^        > type;$/;"	t	struct:boost::units::detail::insertion_sort_comparison_impl::apply	access:public
type	/usr/include/boost/units/detail/sort.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::insertion_sort_insert::apply	access:public
type	/usr/include/boost/units/detail/sort.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::insertion_sort_impl::apply	access:public
type	/usr/include/boost/units/detail/sort.hpp	/^        typedef list<T, Begin> type;$/;"	t	struct:boost::units::detail::insertion_sort_comparison_impl::apply	access:public
type	/usr/include/boost/units/detail/sort.hpp	/^        typedef list<T, dimensionless_type> type;$/;"	t	struct:boost::units::detail::insertion_sort_insert::apply	access:public
type	/usr/include/boost/units/detail/sort.hpp	/^        typedef typename insertion_sort_insert<(next::size::value)>::template apply<next, typename Begin::item>::type type;$/;"	t	struct:boost::units::detail::insertion_sort_impl::apply	access:public
type	/usr/include/boost/units/detail/sort.hpp	/^    typedef typename insertion_sort_impl<T::size::value>::template apply<T>::type type;$/;"	t	struct:boost::units::detail::insertion_sort	access:public
type	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef R type;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
type	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef typename multiply_typeof_helper<Y, R>::type type;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
type	/usr/include/boost/units/detail/static_rational_power.hpp	/^        typedef typename next::type type;$/;"	t	struct:boost::units::detail::static_int_power_impl::apply	access:public
type	/usr/include/boost/units/detail/static_rational_power.hpp	/^    typedef one type;$/;"	t	struct:boost::units::detail::static_rational_power_impl	access:public
type	/usr/include/boost/units/detail/static_rational_power.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::detail::typeof_pow_adl_barrier::typeof_pow	access:public
type	/usr/include/boost/units/detail/static_rational_power.hpp	/^    typedef typename typeof_pow_adl_barrier::typeof_pow<Y>::type type;$/;"	t	struct:boost::units::detail::static_rational_power_impl	access:public
type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef T type;$/;"	t	struct:boost::units::unscale	access:public
type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef dimensionless_type type;$/;"	t	struct:boost::units::get_scale_list	access:public
type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef scale_list_dim type;$/;"	t	struct:boost::units::scale_list_dim	access:public
type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef typename get_scale_list<S>::type type;$/;"	t	struct:boost::units::get_scale_list	access:public
type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef typename mpl::times<list<scale_list_dim<Scale>, dimensionless_type>, typename get_scale_list<S>::type>::type type;$/;"	t	struct:boost::units::get_scale_list	access:public
type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef typename unscale<S>::type type;$/;"	t	struct:boost::units::unscale	access:public
type	/usr/include/boost/units/detail/unscale.hpp	/^    typedef unit<D, typename unscale<S>::type> type;$/;"	t	struct:boost::units::unscale	access:public
type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T0::tag_type, typename mpl::divides<typename T0::value_type, T1>::type> type;$/;"	t	struct:boost::mpl::divides_impl::apply	access:public
type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T0::tag_type, typename mpl::minus<typename T0::value_type, typename T1::value_type>::type> type;$/;"	t	struct:boost::mpl::minus_impl::apply	access:public
type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T0::tag_type, typename mpl::plus<typename T0::value_type, typename T1::value_type>::type> type;$/;"	t	struct:boost::mpl::plus_impl::apply	access:public
type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T0::tag_type, typename mpl::times<typename T0::value_type, T1>::type> type;$/;"	t	struct:boost::mpl::times_impl::apply	access:public
type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T0::tag_type,typename mpl::negate<typename T0::value_type>::type> type;$/;"	t	struct:boost::mpl::negate_impl::apply	access:public
type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T1::tag_type, typename mpl::divides<T0, typename T1::value_type>::type> type;$/;"	t	struct:boost::mpl::divides_impl::apply	access:public
type	/usr/include/boost/units/dim.hpp	/^        typedef boost::units::dim<typename T1::tag_type, typename mpl::times<T0, typename T1::value_type>::type> type;$/;"	t	struct:boost::mpl::times_impl::apply	access:public
type	/usr/include/boost/units/dim.hpp	/^    typedef dim             type;$/;"	t	struct:boost::units::dim	access:public
type	/usr/include/boost/units/dimension.hpp	/^        >::type type;$/;"	t	struct:boost::mpl::divides_impl::apply	access:public
type	/usr/include/boost/units/dimension.hpp	/^        typedef T0 type;$/;"	t	struct:boost::mpl::minus_impl::apply	access:public
type	/usr/include/boost/units/dimension.hpp	/^        typedef T0 type;$/;"	t	struct:boost::mpl::negate_impl::apply	access:public
type	/usr/include/boost/units/dimension.hpp	/^        typedef T0 type;$/;"	t	struct:boost::mpl::plus_impl::apply	access:public
type	/usr/include/boost/units/dimension.hpp	/^        typedef typename boost::units::detail::merge_dimensions<T0,T1>::type type;$/;"	t	struct:boost::mpl::times_impl::apply	access:public
type	/usr/include/boost/units/dimension.hpp	/^    >::type type;    $/;"	t	struct:boost::units::static_power	access:public
type	/usr/include/boost/units/dimension.hpp	/^    >::type type;    $/;"	t	struct:boost::units::static_root	access:public
type	/usr/include/boost/units/dimension.hpp	/^    typedef typename detail::sort_dims<Seq>::type type;$/;"	t	struct:boost::units::make_dimension_list	access:public
type	/usr/include/boost/units/dimensionless_quantity.hpp	/^    typedef quantity<typename dimensionless_unit<System>::type,Y>   type;$/;"	t	struct:boost::units::dimensionless_quantity	access:public
type	/usr/include/boost/units/dimensionless_type.hpp	/^    typedef dimensionless_type          type;$/;"	t	struct:boost::units::dimensionless_type	access:public
type	/usr/include/boost/units/dimensionless_unit.hpp	/^    typedef unit<dimensionless_type,System> type;$/;"	t	struct:boost::units::dimensionless_unit	access:public
type	/usr/include/boost/units/get_dimension.hpp	/^    typedef Dim type;$/;"	t	struct:boost::units::get_dimension	access:public
type	/usr/include/boost/units/get_dimension.hpp	/^    typedef typename get_dimension<Unit>::type  type;$/;"	t	struct:boost::units::get_dimension	access:public
type	/usr/include/boost/units/get_system.hpp	/^    typedef System type;$/;"	t	struct:boost::units::get_system	access:public
type	/usr/include/boost/units/get_system.hpp	/^    typedef typename get_system<Unit>::type     type;$/;"	t	struct:boost::units::get_system	access:public
type	/usr/include/boost/units/get_system.hpp	/^    typedef typename get_system<Unit>::type type;$/;"	t	struct:boost::units::get_system	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^        > type;$/;"	t	struct:boost::mpl::divides_impl::apply	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^        > type;$/;"	t	struct:boost::mpl::plus_impl::apply	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^        > type;$/;"	t	struct:boost::mpl::times_impl::apply	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::get_scale_list_of_heterogeneous_system_impl::apply	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::make_heterogeneous_system_impl::apply	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^        >::type type;$/;"	t	struct:boost::units::detail::unscale_heterogeneous_system_impl::apply	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^        typedef boost::units::heterogeneous_system_dim<typename T::tag_type, typename mpl::negate<typename T::value_type>::type> type;$/;"	t	struct:boost::mpl::negate_impl::apply	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::get_scale_list_of_heterogeneous_system_impl::apply	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::make_heterogeneous_system_impl::apply	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^        typedef dimensionless_type type;$/;"	t	struct:boost::units::detail::unscale_heterogeneous_system_impl::apply	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^    > type;$/;"	t	struct:boost::units::detail::divide_systems	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^    > type;$/;"	t	struct:boost::units::detail::multiply_systems	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^    > type;$/;"	t	struct:boost::units::static_power	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^    > type;$/;"	t	struct:boost::units::static_root	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^    > type;$/;"	t	struct:boost::units::unscale	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^    >::type type;$/;"	t	struct:boost::units::get_scale_list	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef L type;$/;"	t	struct:boost::units::heterogeneous_system_impl	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef heterogeneous_system<T> type;$/;"	t	struct:boost::units::detail::make_heterogeneous_system	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef heterogeneous_system<heterogeneous_system_impl<unit_list, Dimensions, no_scale> > type;$/;"	t	struct:boost::units::detail::make_heterogeneous_system	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef heterogeneous_system_dim type;$/;"	t	struct:boost::units::heterogeneous_system_dim	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef heterogeneous_system_dim<typename unscale<Unit>::type, Exponent> type;$/;"	t	struct:boost::units::unscale	access:public
type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef typename static_power<typename get_scale_list<Unit>::type, Exponent>::type type;$/;"	t	struct:boost::units::get_scale_list	access:public
type	/usr/include/boost/units/homogeneous_system.hpp	/^    typedef L type;$/;"	t	struct:boost::units::homogeneous_system	access:public
type	/usr/include/boost/units/homogeneous_system.hpp	/^    typedef homogeneous_system<L> type;$/;"	t	struct:boost::units::static_power	access:public
type	/usr/include/boost/units/homogeneous_system.hpp	/^    typedef homogeneous_system<L> type;$/;"	t	struct:boost::units::static_root	access:public
type	/usr/include/boost/units/lambda.hpp	/^            X, boost::units::quantity<Unit, X> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
type	/usr/include/boost/units/lambda.hpp	/^            Y, boost::units::unit<Dim, System> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
type	/usr/include/boost/units/lambda.hpp	/^            Y>::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
type	/usr/include/boost/units/lambda.hpp	/^            boost::units::absolute<boost::units::unit<D, S> >, T> type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
type	/usr/include/boost/units/lambda.hpp	/^            boost::units::quantity<BOOST_UNITS_DIMENSIONLESS_UNIT(System), Y> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
type	/usr/include/boost/units/lambda.hpp	/^            boost::units::quantity<Unit, X>, X>::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
type	/usr/include/boost/units/lambda.hpp	/^            boost::units::quantity<Unit, Y> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_1	access:public
type	/usr/include/boost/units/lambda.hpp	/^            boost::units::quantity<Unit2, Y> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
type	/usr/include/boost/units/lambda.hpp	/^            boost::units::unit<Dim, System> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_1	access:public
type	/usr/include/boost/units/lambda.hpp	/^            boost::units::unit<Dim, System>, Y >::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
type	/usr/include/boost/units/lambda.hpp	/^            boost::units::unit<Dim2, System2> >::type type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
type	/usr/include/boost/units/lambda.hpp	/^        > type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
type	/usr/include/boost/units/lambda.hpp	/^        > type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
type	/usr/include/boost/units/lambda.hpp	/^        typedef Y type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
type	/usr/include/boost/units/lambda.hpp	/^        typedef typename boost::units::absolute<Y> type;$/;"	t	struct:boost::lambda::plain_return_type_2	access:public
type	/usr/include/boost/units/make_scaled_unit.hpp	/^    > type;$/;"	t	struct:boost::units::make_scaled_unit	access:public
type	/usr/include/boost/units/make_scaled_unit.hpp	/^    typedef typename make_scaled_unit<typename reduce_unit<Unit>::type, Scale>::type type;$/;"	t	struct:boost::units::make_scaled_unit	access:public
type	/usr/include/boost/units/make_system.hpp	/^    typedef homogeneous_system<detail::unspecified> type;$/;"	t	struct:boost::units::make_system	access:public
type	/usr/include/boost/units/operators.hpp	/^    typedef detail::unspecified type;$/;"	t	struct:boost::units::power_typeof_helper	access:public
type	/usr/include/boost/units/operators.hpp	/^    typedef detail::unspecified type;$/;"	t	struct:boost::units::root_typeof_helper	access:public
type	/usr/include/boost/units/operators.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
type	/usr/include/boost/units/operators.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
type	/usr/include/boost/units/operators.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
type	/usr/include/boost/units/operators.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
type	/usr/include/boost/units/operators.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::unary_minus_typeof_helper	access:public
type	/usr/include/boost/units/operators.hpp	/^    typedef typename nested::type type;$/;"	t	struct:boost::units::unary_plus_typeof_helper	access:public
type	/usr/include/boost/units/pow.hpp	/^    typedef typename base::type type;$/;"	t	struct:boost::units::power_typeof_helper	access:public
type	/usr/include/boost/units/pow.hpp	/^    typedef typename base::type type;$/;"	t	struct:boost::units::root_typeof_helper	access:public
type	/usr/include/boost/units/pow.hpp	/^    typedef typename impl::type type; $/;"	t	struct:boost::units::power_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef Y type;$/;"	t	struct:boost::units::detail::quantity_cast_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<Unit,X> type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<Unit,X> type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<Unit,Y> type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<Unit,Y> type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                                              type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                                  type; $/;"	t	struct:boost::units::power_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                                  type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                                  type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                                  type;$/;"	t	struct:boost::units::root_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                      type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                      type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                      type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                  type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                  type;$/;"	t	struct:boost::units::unary_minus_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>                  type;$/;"	t	struct:boost::units::unary_plus_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>              type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>              type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>              type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>         type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef quantity<unit_type,value_type>  type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
type	/usr/include/boost/units/quantity.hpp	/^    typedef void type;$/;"	t	struct:boost::units::detail::disable_if_is_same	access:public
type	/usr/include/boost/units/reduce_unit.hpp	/^    typedef detail::unspecified type;$/;"	t	struct:boost::units::reduce_unit	access:public
type	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef scaled_base_unit type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
type	/usr/include/boost/units/static_rational.hpp	/^        >  type;$/;"	t	class:boost::units::static_rational	access:public
type	/usr/include/boost/units/static_rational.hpp	/^        >::type type;$/;"	t	struct:boost::mpl::divides_impl::apply	access:public
type	/usr/include/boost/units/static_rational.hpp	/^        >::type type;$/;"	t	struct:boost::mpl::minus_impl::apply	access:public
type	/usr/include/boost/units/static_rational.hpp	/^        >::type type;$/;"	t	struct:boost::mpl::negate_impl::apply	access:public
type	/usr/include/boost/units/static_rational.hpp	/^        >::type type;$/;"	t	struct:boost::mpl::plus_impl::apply	access:public
type	/usr/include/boost/units/static_rational.hpp	/^        >::type type;$/;"	t	struct:boost::mpl::times_impl::apply	access:public
type	/usr/include/boost/units/static_rational.hpp	/^        typedef static_rational<Numerator,Denominator>  type;$/;"	t	class:boost::units::static_rational	access:public
type	/usr/include/boost/units/static_rational.hpp	/^    typedef boost::mpl::integral_c<integer_type, X> type;$/;"	t	struct:boost::units::make_integral_c	access:public
type	/usr/include/boost/units/systems/detail/constants.hpp	/^    typedef typename base::type type;$/;"	t	struct:boost::units::power_typeof_helper	access:public
type	/usr/include/boost/units/unit.hpp	/^    > type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
type	/usr/include/boost/units/unit.hpp	/^    > type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
type	/usr/include/boost/units/unit.hpp	/^    > type;$/;"	t	struct:boost::units::reduce_unit	access:public
type	/usr/include/boost/units/unit.hpp	/^    typedef unit<Dim,System>    type;$/;"	t	struct:boost::units::unary_minus_typeof_helper	access:public
type	/usr/include/boost/units/unit.hpp	/^    typedef unit<Dim,System>    type;$/;"	t	struct:boost::units::unary_plus_typeof_helper	access:public
type	/usr/include/boost/units/unit.hpp	/^    typedef unit<Dim,System>   type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
type	/usr/include/boost/units/unit.hpp	/^    typedef unit<Dim,System> type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
type	/usr/include/boost/units/unit.hpp	/^    typedef unit<typename mpl::divides<Dim1,Dim2>::type,homogeneous_system<System> >    type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
type	/usr/include/boost/units/unit.hpp	/^    typedef unit<typename mpl::times<Dim1,Dim2>::type,homogeneous_system<System> >    type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
type	/usr/include/boost/units/unit.hpp	/^    typedef unit<typename static_power<Dim,static_rational<N,D> >::type,typename static_power<System, static_rational<N,D> >::type>     type; $/;"	t	struct:boost::units::power_typeof_helper	access:public
type	/usr/include/boost/units/unit.hpp	/^    typedef unit<typename static_root<Dim,static_rational<N,D> >::type,typename static_root<System, static_rational<N,D> >::type>      type; $/;"	t	struct:boost::units::root_typeof_helper	access:public
type1	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::template apply<dimensionless_type>::type type1;$/;"	t	struct:boost::units::detail::multiply_add_units::apply	access:public
typename_fmt	/usr/include/boost/units/io.hpp	/^    typename_fmt = 3,       \/\/\/ output demangled typenames (useful only for diagnosis).$/;"	e	enum:boost::units::format_mode
typename_format	/usr/include/boost/units/io.hpp	/^inline std::ios_base& typename_format(std::ios_base& ios) $/;"	f	namespace:boost::units	signature:(std::ios_base& ios)
typename_string	/usr/include/boost/units/io.hpp	/^typename_string(const unit<Dimension, System>&)$/;"	f	namespace:boost::units	signature:(const unit<Dimension, System>&)
typename_string	/usr/include/boost/units/units_fwd.hpp	/^template<class T> std::string typename_string(const T&);$/;"	p	namespace:boost::units	signature:(const T&)
typeof_	/usr/include/boost/units/operators.hpp	/^namespace typeof_ {$/;"	n	namespace:boost::units
typeof_pow	/usr/include/boost/units/detail/static_rational_power.hpp	/^struct typeof_pow$/;"	s	namespace:boost::units::detail::typeof_pow_adl_barrier
typeof_pow_adl_barrier	/usr/include/boost/units/detail/static_rational_power.hpp	/^namespace typeof_pow_adl_barrier {$/;"	n	namespace:boost::units::detail
unary_minus_typeof_helper	/usr/include/boost/units/operators.hpp	/^template<typename X> struct unary_minus_typeof_helper           $/;"	s	namespace:boost::units
unary_minus_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct unary_minus_typeof_helper< quantity<Unit,Y> >$/;"	s	namespace:boost::units
unary_minus_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct unary_minus_typeof_helper< unit<Dim,System> >$/;"	s	namespace:boost::units
unary_plus_typeof_helper	/usr/include/boost/units/operators.hpp	/^template<typename X> struct unary_plus_typeof_helper            $/;"	s	namespace:boost::units
unary_plus_typeof_helper	/usr/include/boost/units/quantity.hpp	/^struct unary_plus_typeof_helper< quantity<Unit,Y> >$/;"	s	namespace:boost::units
unary_plus_typeof_helper	/usr/include/boost/units/unit.hpp	/^struct unary_plus_typeof_helper< unit<Dim,System> >$/;"	s	namespace:boost::units
uncertainty	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type uncertainty() const { return Base().uncertainty(); } $/;"	f	struct:boost::units::constant	access:public	signature:() const
uncertainty	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type uncertainty() const { return Base().uncertainty(); } $/;"	f	struct:boost::units::physical_constant	access:public	signature:() const
undefined_affine_conversion_base	/usr/include/boost/units/detail/absolute_impl.hpp	/^struct undefined_affine_conversion_base {$/;"	s	namespace:boost::units::detail
undefined_base_unit_converter_base	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct undefined_base_unit_converter_base {$/;"	s	namespace:boost::units
unit	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename unit_pair::tag_type unit;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
unit	/usr/include/boost/units/unit.hpp	/^        unit() { }$/;"	f	class:boost::units::unit	access:public	signature:()
unit	/usr/include/boost/units/unit.hpp	/^        unit(const this_type&) { }$/;"	f	class:boost::units::unit	access:public	signature:(const this_type&)
unit	/usr/include/boost/units/unit.hpp	/^class unit$/;"	c	namespace:boost::units
unit_list	/usr/include/boost/units/heterogeneous_system.hpp	/^    >::type unit_list;$/;"	t	struct:boost::units::detail::make_heterogeneous_system	access:public
unit_pair	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename Begin::item unit_pair;$/;"	t	struct:boost::units::detail::conversion_impl::apply	access:public
unit_type	/usr/include/boost/units/base_unit.hpp	/^        > unit_type;$/;"	t	class:boost::units::base_unit	access:public
unit_type	/usr/include/boost/units/base_unit.hpp	/^        typedef detail::unspecified unit_type;$/;"	t	class:boost::units::base_unit	access:public
unit_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef typename multiply_typeof_helper<typename power_typeof_helper<new_source, exponent>::type, typename next_iteration::unit_type>::type unit_type;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
unit_type	/usr/include/boost/units/detail/conversion_impl.hpp	/^        typedef unit<dimensionless_type, heterogeneous_system<heterogeneous_system_impl<dimensionless_type, dimensionless_type, no_scale> > > unit_type;$/;"	t	struct:boost::units::detail::get_default_conversion_impl::apply	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^        typedef Unit        unit_type;$/;"	t	class:boost::units::quantity	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^        typedef unit<dimension_type,system_type>                unit_type;$/;"	t	class:boost::units::quantity	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef Unit                                        unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef Unit                                        unit_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename add_typeof_helper<Unit1,Unit2>::type   unit_type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper< Unit,unit<Dim,System> >::type    unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper< unit<Dim,System>,Unit >::type    unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper<Unit1,Unit2>::type    unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename multiply_typeof_helper< Unit,unit<Dim,System> >::type  unit_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename multiply_typeof_helper< unit<Dim,System>,Unit >::type  unit_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename multiply_typeof_helper<Unit1,Unit2>::type  unit_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename power_typeof_helper< Unit,static_rational<-1> >::type  unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename power_typeof_helper< unit<Dim,System>,static_rational<-1> >::type  unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename power_typeof_helper<Unit,static_rational<N,D> >::type  unit_type;$/;"	t	struct:boost::units::power_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename root_typeof_helper<Unit,static_rational<N,D> >::type   unit_type;$/;"	t	struct:boost::units::root_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename subtract_typeof_helper<Unit1,Unit2>::type  unit_type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename unary_minus_typeof_helper<Unit>::type  unit_type;$/;"	t	struct:boost::units::unary_minus_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename unary_plus_typeof_helper<Unit>::type   unit_type;$/;"	t	struct:boost::units::unary_plus_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef unit<Dim, System>                           unit_type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef unit<Dim, System>                      unit_type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef unit<Dim,System>                            unit_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
unit_type	/usr/include/boost/units/quantity.hpp	/^    typedef unit<Dim,System>                unit_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
unit_type	/usr/include/boost/units/scaled_base_unit.hpp	/^    > unit_type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
unit_type	/usr/include/boost/units/scaled_base_unit.hpp	/^    typedef detail::unspecified unit_type;$/;"	t	struct:boost::units::scaled_base_unit	access:public
unit_type	/usr/include/boost/units/unit.hpp	/^        typedef unit<Dim, System>   unit_type;$/;"	t	class:boost::units::unit	access:public
units	/usr/include/boost/units/absolute.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_dimension.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_unit.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/angle/arcminute.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/angle/arcsecond.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/angle/radian.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/angle/revolution.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/angle/steradian.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/astronomical/light_day.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/astronomical/light_hour.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/astronomical/light_minute.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/astronomical/light_year.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/cgs/biot.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/cgs/centimeter.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/cgs/gram.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/drachm.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/fluid_ounce.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/foot.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/furlong.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/gallon.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/gill.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/grain.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/hundredweight.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/inch.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/league.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/mile.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/ounce.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/quart.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/quarter.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/stone.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/thou.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/imperial/ton.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/metric/angstrom.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/metric/day.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/metric/fermi.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/metric/hour.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/metric/micron.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/metric/minute.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/metric/nautical_mile.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/metric/ton.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/metric/year.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/si/ampere.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/si/candela.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/si/kelvin.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/si/kilogram.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/si/meter.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/si/mole.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/si/second.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/temperature/celsius.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/temperature/fahrenheit.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/cup.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/dram.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/foot.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/gallon.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/gill.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/grain.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/inch.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/mil.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/mile.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/minim.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/ounce.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/quart.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/base_units/us/ton.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/cmath.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/cmath.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/conversion.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/derived_dimension.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/absolute_impl.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/cmath_impl.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/conversion_impl.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/dim_impl.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/dimension_impl.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/dimension_list.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/heterogeneous_conversion.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/linear_algebra.hpp	/^        >::type units;$/;"	t	struct:boost::units::detail::calculate_base_unit_exponents_impl::apply	access:public
units	/usr/include/boost/units/detail/linear_algebra.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/one.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/ordinal.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/push_front_if.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/push_front_or_add.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/sort.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/static_rational_power.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/unscale.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/detail/utility.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/dim.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/dimension.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/dimensionless_quantity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/dimensionless_type.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/dimensionless_unit.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/get_dimension.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/get_system.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/heterogeneous_system.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/homogeneous_system.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/io.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/is_dim.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/is_dimension_list.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/is_dimensionless.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/is_dimensionless_quantity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/is_dimensionless_unit.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/is_quantity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/is_quantity_of_dimension.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/is_quantity_of_system.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/is_unit.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/is_unit_of_dimension.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/is_unit_of_system.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/lambda.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/make_scaled_unit.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/make_system.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/operators.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/absorbed_dose.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/acceleration.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/action.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/activity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/amount.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/amount.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/angular_acceleration.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/angular_momentum.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/angular_velocity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/area.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/capacitance.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/conductance.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/conductivity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/current.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/current.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/dose_equivalent.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/dynamic_viscosity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/electric_charge.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/electric_potential.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/energy.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/energy_density.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/force.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/frequency.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/heat_capacity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/illuminance.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/impedance.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/inductance.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/kinematic_viscosity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/length.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/length.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/luminance.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/luminous_flux.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/luminous_intensity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/luminous_intensity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/magnetic_field_intensity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/magnetic_flux.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/magnetic_flux_density.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/mass.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/mass.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/mass_density.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/molar_energy.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/molar_heat_capacity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/moment_of_inertia.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/momentum.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/permeability.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/permittivity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/plane_angle.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/plane_angle.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/power.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/pressure.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/reluctance.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/resistance.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/resistivity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/solid_angle.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/solid_angle.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/specific_energy.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/specific_heat_capacity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/specific_volume.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/stress.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/surface_density.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/surface_tension.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/temperature.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/temperature.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/thermal_conductivity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/time.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/time.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/torque.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/velocity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/volume.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/physical_dimensions/wavenumber.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/pow.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/quantity.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/reduce_unit.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/scale.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/scaled_base_unit.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/static_rational.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/static_rational.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/systems/abstract.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/systems/angle/degrees.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/systems/angle/gradians.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/systems/angle/revolutions.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/acceleration.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/area.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/base.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/current.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/dimensionless.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/dynamic_viscosity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/energy.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/force.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/frequency.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/io.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/kinematic_viscosity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/length.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/mass.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/mass_density.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/momentum.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/power.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/pressure.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/time.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/velocity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/volume.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/detail/constants.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/absorbed_dose.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/acceleration.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/action.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/activity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/amount.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/angular_acceleration.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/angular_momentum.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/angular_velocity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/area.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/base.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/capacitance.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/catalytic_activity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/alpha_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/atomic-nuclear_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/deuteron_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/electromagnetic_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/electron_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/helion_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/muon_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/neutron_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/physico-chemical_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/proton_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/tau_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/triton_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/codata/universal_constants.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/conductance.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/conductivity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/current.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/dimensionless.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/dose_equivalent.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/dynamic_viscosity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/electric_charge.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/electric_potential.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/energy.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/force.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/frequency.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/illuminance.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/impedance.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/inductance.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/io.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/kinematic_viscosity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/length.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/luminous_flux.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/luminous_intensity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/magnetic_field_intensity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/magnetic_flux.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/magnetic_flux_density.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/mass.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/mass_density.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/moment_of_inertia.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/momentum.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/permeability.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/permittivity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/plane_angle.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/power.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/prefixes.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/pressure.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/reluctance.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/resistance.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/resistivity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/solid_angle.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/surface_density.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/surface_tension.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/temperature.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/time.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/torque.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/velocity.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/volume.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/si/wavenumber.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/systems/temperature/celsius.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/systems/temperature/fahrenheit.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/unit.hpp	/^namespace units { $/;"	n	namespace:boost
units	/usr/include/boost/units/unit.hpp	/^namespace units {$/;"	n	namespace:boost
units	/usr/include/boost/units/units_fwd.hpp	/^namespace units {$/;"	n	namespace:boost
unscale	/usr/include/boost/units/detail/unscale.hpp	/^struct unscale$/;"	s	namespace:boost::units
unscale	/usr/include/boost/units/detail/unscale.hpp	/^struct unscale<scaled_base_unit<S, Scale> >$/;"	s	namespace:boost::units
unscale	/usr/include/boost/units/detail/unscale.hpp	/^struct unscale<unit<D, S> >$/;"	s	namespace:boost::units
unscale	/usr/include/boost/units/heterogeneous_system.hpp	/^struct unscale<heterogeneous_system<T> >$/;"	s	namespace:boost::units
unscale	/usr/include/boost/units/heterogeneous_system.hpp	/^struct unscale<heterogeneous_system_dim<Unit, Exponent> >$/;"	s	namespace:boost::units
unscale_heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct unscale_heterogeneous_system_impl$/;"	s	namespace:boost::units::detail
unscale_heterogeneous_system_impl	/usr/include/boost/units/heterogeneous_system.hpp	/^struct unscale_heterogeneous_system_impl<0>$/;"	s	namespace:boost::units::detail
unscaled_get_default_conversion	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct unscaled_get_default_conversion : no_default_conversion { };$/;"	s	namespace:boost::units	inherits:no_default_conversion
unscaled_get_default_conversion_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct unscaled_get_default_conversion_impl<false>$/;"	s	namespace:boost::units
unscaled_get_default_conversion_impl	/usr/include/boost/units/detail/conversion_impl.hpp	/^struct unscaled_get_default_conversion_impl<true>$/;"	s	namespace:boost::units
unspecified	/usr/include/boost/units/make_system.hpp	/^struct unspecified {};$/;"	s	namespace:boost::units::detail
unspecified_null_pointer_constant_type	/usr/include/boost/units/quantity.hpp	/^        typedef void (quantity::*unspecified_null_pointer_constant_type)(int*******);$/;"	t	class:boost::units::quantity	access:private
upper_bound	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type upper_bound() const { return Base().upper_bound(); } $/;"	f	struct:boost::units::constant	access:public	signature:() const
upper_bound	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type upper_bound() const { return Base().upper_bound(); } $/;"	f	struct:boost::units::physical_constant	access:public	signature:() const
us	/usr/include/boost/units/base_units/us/cup.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/dram.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/fluid_dram.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/fluid_ounce.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/foot.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/gallon.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/gill.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/grain.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/hundredweight.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/inch.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/mil.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/mile.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/minim.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/ounce.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/quart.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/tablespoon.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/teaspoon.hpp	/^namespace us {$/;"	n	namespace:boost::units
us	/usr/include/boost/units/base_units/us/ton.hpp	/^namespace us {$/;"	n	namespace:boost::units
val_	/usr/include/boost/units/absolute.hpp	/^        value_type   val_;$/;"	m	class:boost::units::absolute	access:private
val_	/usr/include/boost/units/quantity.hpp	/^        value_type    val_;$/;"	m	class:boost::units::quantity	access:private
value	/usr/include/boost/units/absolute.hpp	/^        const value_type& value() const                         { return val_; }$/;"	f	class:boost::units::absolute	access:public	signature:() const
value	/usr/include/boost/units/base_dimension.hpp	/^        value = $/;"	e	enum:boost::units::check_base_dimension::__anon1
value	/usr/include/boost/units/base_unit.hpp	/^        value =$/;"	e	enum:boost::units::check_base_unit::__anon2
value	/usr/include/boost/units/detail/absolute_impl.hpp	/^        static T1 value(const T0& t0)$/;"	f	struct:boost::units::detail::affine_conversion_impl::apply	access:public	signature:(const T0& t0)
value	/usr/include/boost/units/detail/conversion_impl.hpp	/^        static one value() {$/;"	f	struct:boost::units::detail::get_default_conversion_impl::apply	access:public	signature:()
value	/usr/include/boost/units/detail/conversion_impl.hpp	/^        static type value() { one result; return(result); }$/;"	f	struct:boost::units::detail::conversion_impl::apply	access:public	signature:()
value	/usr/include/boost/units/detail/conversion_impl.hpp	/^        static type value() { return(static_rational_power<typename unit_pair::value_type>(converter::value()) * next_iteration::value()); }$/;"	f	struct:boost::units::detail::conversion_impl::apply	access:public	signature:()
value	/usr/include/boost/units/detail/conversion_impl.hpp	/^        static type value() {$/;"	f	struct:boost::units::detail::call_base_unit_converter_base_unit_impl::apply	access:public	signature:()
value	/usr/include/boost/units/detail/conversion_impl.hpp	/^        static type value() {$/;"	f	struct:boost::units::detail::call_base_unit_converter_impl::apply	access:public	signature:()
value	/usr/include/boost/units/detail/conversion_impl.hpp	/^        static type value() {$/;"	f	struct:boost::units::detail::get_default_conversion_impl::apply	access:public	signature:()
value	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static type value() {$/;"	f	struct:boost::units::base_unit_converter_base	access:public	signature:()
value	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static type value()$/;"	f	struct:boost::units::detail::conversion_factor_helper	access:public	signature:()
value	/usr/include/boost/units/detail/conversion_impl.hpp	/^    static type value()$/;"	f	struct:boost::units::detail::do_call_base_unit_converter	access:public	signature:()
value	/usr/include/boost/units/detail/linear_algebra.hpp	/^        static const bool value = (type::value);$/;"	m	struct:boost::units::detail::is_simple_system_impl::apply	access:public
value	/usr/include/boost/units/detail/linear_algebra.hpp	/^    static const bool value = (size == sizeof(set_yes));$/;"	m	struct:boost::units::detail::has_key	access:public
value	/usr/include/boost/units/detail/linear_algebra.hpp	/^    static const bool value = type::value;$/;"	m	struct:boost::units::detail::is_simple_system	access:public
value	/usr/include/boost/units/detail/ordinal.hpp	/^    static const long value = N;$/;"	m	struct:boost::units::ordinal	access:public
value	/usr/include/boost/units/detail/ordinal.hpp	/^const long ordinal<N>::value;$/;"	m	class:boost::units::ordinal
value	/usr/include/boost/units/io.hpp	/^        static void value(std::string& str) $/;"	f	struct:boost::units::detail::scale_name_string_impl::apply	access:public	signature:(std::string& str)
value	/usr/include/boost/units/io.hpp	/^        static void value(std::string& str) $/;"	f	struct:boost::units::detail::scale_symbol_string_impl::apply	access:public	signature:(std::string& str)
value	/usr/include/boost/units/io.hpp	/^        static void value(std::string& str)$/;"	f	struct:boost::units::detail::name_string_impl::apply	access:public	signature:(std::string& str)
value	/usr/include/boost/units/io.hpp	/^        static void value(std::string& str)$/;"	f	struct:boost::units::detail::symbol_string_impl::apply	access:public	signature:(std::string& str)
value	/usr/include/boost/units/io.hpp	/^        static void value(std::string&) { }$/;"	f	struct:boost::units::detail::scale_name_string_impl::apply	access:public	signature:(std::string&)
value	/usr/include/boost/units/io.hpp	/^        static void value(std::string&) { }$/;"	f	struct:boost::units::detail::scale_symbol_string_impl::apply	access:public	signature:(std::string&)
value	/usr/include/boost/units/io.hpp	/^    static int value;$/;"	m	struct:boost::units::detail::xalloc_key_holder	access:public
value	/usr/include/boost/units/io.hpp	/^int xalloc_key_holder<b>::value = 0;$/;"	m	class:boost::units::detail::xalloc_key_holder
value	/usr/include/boost/units/operators.hpp	/^    static type value(const BaseType& base);$/;"	p	struct:boost::units::power_typeof_helper	access:public	signature:(const BaseType& base)
value	/usr/include/boost/units/operators.hpp	/^    static type value(const Radicand& base);$/;"	p	struct:boost::units::root_typeof_helper	access:public	signature:(const Radicand& base)
value	/usr/include/boost/units/pow.hpp	/^    static type value(const T& x)  $/;"	f	struct:boost::units::power_typeof_helper	access:public	signature:(const T& x)
value	/usr/include/boost/units/pow.hpp	/^    static type value(const T& x)$/;"	f	struct:boost::units::root_typeof_helper	access:public	signature:(const T& x)
value	/usr/include/boost/units/pow.hpp	/^    static type value(const double& x)$/;"	f	struct:boost::units::power_typeof_helper	access:public	signature:(const double& x)
value	/usr/include/boost/units/quantity.hpp	/^        const value_type& value() const                     { return val_; }                        \/\/\/< constant accessor to value$/;"	f	class:boost::units::quantity	access:public	signature:() const
value	/usr/include/boost/units/quantity.hpp	/^    static type value(const quantity<Unit,Y>& x)  $/;"	f	struct:boost::units::power_typeof_helper	access:public	signature:(const quantity<Unit,Y>& x)
value	/usr/include/boost/units/quantity.hpp	/^    static type value(const quantity<Unit,Y>& x)  $/;"	f	struct:boost::units::root_typeof_helper	access:public	signature:(const quantity<Unit,Y>& x)
value	/usr/include/boost/units/scale.hpp	/^    static one value() { one result; return(result); }$/;"	f	struct:boost::units::scale	access:public	signature:()
value	/usr/include/boost/units/scale.hpp	/^    static value_type value() { return(detail::static_rational_power<Exponent>(static_cast<double>(base))); }$/;"	f	struct:boost::units::scale	access:public	signature:()
value	/usr/include/boost/units/static_rational.hpp	/^value(const static_rational<N,D>&)$/;"	f	namespace:boost::units	signature:(const static_rational<N,D>&)
value	/usr/include/boost/units/systems/detail/constants.hpp	/^    static type value(const constant<T1>& arg)$/;"	f	struct:boost::units::power_typeof_helper	access:public	signature:(const constant<T1>& arg)
value	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type value() const       { return Base().value(); } $/;"	f	struct:boost::units::constant	access:public	signature:() const
value	/usr/include/boost/units/systems/detail/constants.hpp	/^    value_type value() const       { return Base().value(); } $/;"	f	struct:boost::units::physical_constant	access:public	signature:() const
value	/usr/include/boost/units/unit.hpp	/^    static type value(const unit<Dim,System>&)  $/;"	f	struct:boost::units::power_typeof_helper	access:public	signature:(const unit<Dim,System>&)
value	/usr/include/boost/units/unit.hpp	/^    static type value(const unit<Dim,System>&)  $/;"	f	struct:boost::units::root_typeof_helper	access:public	signature:(const unit<Dim,System>&)
value_type	/usr/include/boost/units/absolute.hpp	/^        typedef Y               value_type;$/;"	t	class:boost::units::absolute	access:public
value_type	/usr/include/boost/units/dim.hpp	/^    typedef V               value_type;$/;"	t	struct:boost::units::dim	access:public
value_type	/usr/include/boost/units/heterogeneous_system.hpp	/^    typedef Exponent value_type;$/;"	t	struct:boost::units::heterogeneous_system_dim	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^        typedef Y                                               value_type;$/;"	t	class:boost::units::quantity	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^        typedef Y                                       value_type;$/;"	t	class:boost::units::quantity	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef X                                                                           value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef X                                                               value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef X                                                               value_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef X                               value_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename add_typeof_helper<X,Y>::type           value_type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename add_typeof_helper<X,Y>::type  value_type;$/;"	t	struct:boost::units::add_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper<X,X>::type                        value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper<X,X>::type    value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper<X,Y>::type                        value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper<X,Y>::type            value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename divide_typeof_helper<X,Y>::type    value_type;$/;"	t	struct:boost::units::divide_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename multiply_typeof_helper<X,Y>::type          value_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename multiply_typeof_helper<X,Y>::type  value_type;$/;"	t	struct:boost::units::multiply_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename power_typeof_helper<Y,static_rational<N,D> >::type     value_type;$/;"	t	struct:boost::units::power_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename root_typeof_helper<Y,static_rational<N,D> >::type      value_type;$/;"	t	struct:boost::units::root_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename subtract_typeof_helper<X,Y>::type          value_type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename subtract_typeof_helper<X,Y>::type  value_type;$/;"	t	struct:boost::units::subtract_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename unary_minus_typeof_helper<Y>::type     value_type;$/;"	t	struct:boost::units::unary_minus_typeof_helper	access:public
value_type	/usr/include/boost/units/quantity.hpp	/^    typedef typename unary_plus_typeof_helper<Y>::type      value_type;$/;"	t	struct:boost::units::unary_plus_typeof_helper	access:public
value_type	/usr/include/boost/units/scale.hpp	/^    typedef double value_type;$/;"	t	struct:boost::units::scale	access:public
value_type	/usr/include/boost/units/scale.hpp	/^    typedef one value_type;$/;"	t	struct:boost::units::scale	access:public
value_type	/usr/include/boost/units/systems/detail/constants.hpp	/^    typedef typename Base::value_type value_type; $/;"	t	struct:boost::units::constant	access:public
value_type	/usr/include/boost/units/systems/detail/constants.hpp	/^    typedef typename Base::value_type value_type; $/;"	t	struct:boost::units::physical_constant	access:public
velocity	/usr/include/boost/units/systems/cgs/velocity.hpp	/^typedef unit<velocity_dimension,cgs::system>     velocity;$/;"	t	namespace:boost::units::cgs
velocity	/usr/include/boost/units/systems/si/velocity.hpp	/^typedef unit<velocity_dimension,si::system>      velocity;$/;"	t	namespace:boost::units::si
velocity_dimension	/usr/include/boost/units/physical_dimensions/velocity.hpp	/^                          time_base_dimension,-1>::type velocity_dimension;                $/;"	t	namespace:boost::units
void_if_dimensionless	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct void_if_dimensionless {$/;"	s	namespace:boost::units::detail
void_if_dimensionless	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct void_if_dimensionless<boost::units::homogeneous_system<T> > {$/;"	s	namespace:boost::units::detail
void_if_dimensionless	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct void_if_dimensionless<heterogeneous_dimensionless_system> {$/;"	s	namespace:boost::units::detail
void_if_heterogeneous	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct void_if_heterogeneous {$/;"	s	namespace:boost::units::detail
void_if_heterogeneous	/usr/include/boost/units/detail/dimensionless_unit.hpp	/^struct void_if_heterogeneous<System, typename void_if_dimensionless<System>::type> {$/;"	s	namespace:boost::units::detail
volume	/usr/include/boost/units/systems/cgs/volume.hpp	/^typedef unit<volume_dimension,cgs::system>   volume;$/;"	t	namespace:boost::units::cgs
volume	/usr/include/boost/units/systems/si/volume.hpp	/^typedef unit<volume_dimension,si::system>    volume;$/;"	t	namespace:boost::units::si
volume_dimension	/usr/include/boost/units/physical_dimensions/volume.hpp	/^typedef derived_dimension<length_base_dimension,3>::type volume_dimension;$/;"	t	namespace:boost::units
volume_over_mass_time_squared	/usr/include/boost/units/systems/si/codata/typedefs.hpp	/^        >::type volume_over_mass_time_squared;$/;"	t	namespace:boost::units::si::constants::codata
wavenumber	/usr/include/boost/units/systems/cgs/wavenumber.hpp	/^typedef unit<wavenumber_dimension,cgs::system>   wavenumber;$/;"	t	namespace:boost::units::cgs
wavenumber	/usr/include/boost/units/systems/si/wavenumber.hpp	/^typedef unit<wavenumber_dimension,si::system>    wavenumber;$/;"	t	namespace:boost::units::si
wavenumber_dimension	/usr/include/boost/units/physical_dimensions/wavenumber.hpp	/^typedef derived_dimension<length_base_dimension,-1>::type wavenumber_dimension;                 $/;"	t	namespace:boost::units
wrap	/usr/include/boost/units/detail/linear_algebra.hpp	/^struct wrap {};$/;"	s	namespace:boost::units::detail
xalloc_key_holder	/usr/include/boost/units/io.hpp	/^struct xalloc_key_holder $/;"	s	namespace:boost::units::detail
xalloc_key_initializer	/usr/include/boost/units/io.hpp	/^xalloc_key_initializer_t xalloc_key_initializer;$/;"	m	namespace:boost::units::detail::__anon3
xalloc_key_initializer_t	/usr/include/boost/units/io.hpp	/^    xalloc_key_initializer_t() $/;"	f	struct:boost::units::detail::xalloc_key_initializer_t	access:public	signature:()
xalloc_key_initializer_t	/usr/include/boost/units/io.hpp	/^struct xalloc_key_initializer_t $/;"	s	namespace:boost::units::detail
year_base_unit	/usr/include/boost/units/base_units/metric/year.hpp	/^typedef scaled_base_unit<boost::units::si::second_base_unit, scale<31557600, static_rational<1> > > year_base_unit;$/;"	t	namespace:boost::units::metric
yes	/usr/include/boost/units/detail/prevent_redefinition.hpp	/^struct yes { no dummy[2]; };$/;"	s	namespace:boost::units::detail
~quantity	/usr/include/boost/units/quantity.hpp	/^        ~quantity() {$/;"	f	class:boost::units::quantity	access:public	signature:()
~unit	/usr/include/boost/units/unit.hpp	/^        ~unit() {$/;"	f	class:boost::units::unit	access:public	signature:()
